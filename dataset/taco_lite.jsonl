{"requirement": "def is_anagram(test, original):\n\"\"\"An **anagram** is the result of rearranging the letters of a word to produce a new word.\n\n**Note:** anagrams are case insensitive\n\nComplete the function to return `true` if the two arguments given are anagrams of each other; return `false` otherwise.\n\n\n## Examples\n\n* `\"foefet\"` is an anagram of `\"toffee\"`\n\n* `\"Buckethead\"` is an anagram of `\"DeathCubeK\"`\n\"\"\"", "inputs": [["foefet", "toffee"], ["Buckethead", "DeathCubeK"], ["Twoo", "WooT"], ["dumble", "bumble"], ["ound", "round"], ["apple", "pale"]], "outputs": [[true], [true], [true], [false], [false], [false]], "starter_code": "def is_anagram(test, original):", "canonical_solution": "def is_anagram(test, original):\n    return sorted(original.lower()) == sorted(test.lower())", "entry_point": "is_anagram", "task_id": "TACO_lite/0", "input_output_examples": [[["foefet", "toffee"], ["Buckethead", "DeathCubeK"]], [[true], [true]]]}
{"requirement": "def make_acronym(phrase):\n\"\"\"Implement a function called makeAcronym that returns the first letters of each word in a passed in string.\n\nMake sure the letters returned are uppercase.\n\nIf the value passed in is not a string return 'Not a string'.\n\nIf the value passed in is a string which contains characters other than spaces and alphabet letters, return 'Not letters'.\n\nIf the string is empty, just return the string itself: \"\".\n\n**EXAMPLES:**\n```\n'Hello codewarrior' -> 'HC'\n\n'a42' -> 'Not letters'\n\n42 -> 'Not a string'\n\n[2,12] -> 'Not a string'\n\n{name: 'Abraham'} -> 'Not a string'\n```\n\"\"\"", "inputs": [["My aunt sally"], ["Please excuse my dear aunt Sally"], ["How much wood would a woodchuck chuck if a woodchuck could chuck wood"], ["Unique New York"], ["a42"], ["1111"], [64], [[]], [{}], [""]], "outputs": [["MAS"], ["PEMDAS"], ["HMWWAWCIAWCCW"], ["UNY"], ["Not letters"], ["Not letters"], ["Not a string"], ["Not a string"], ["Not a string"], [""]], "starter_code": "def make_acronym(phrase):", "canonical_solution": "def make_acronym(phrase):\n    try:\n        return ''.join((word[0].upper() if word.isalpha() else 0 for word in phrase.split()))\n    except AttributeError:\n        return 'Not a string'\n    except TypeError:\n        return 'Not letters'", "entry_point": "make_acronym", "task_id": "TACO_lite/1", "input_output_examples": [[["Hello codewarrior"], ["a42"], [42], [[2, 12]], [{"name": "Abraham"}], ["My aunt sally"]], [["HC"], ["Not letters"], ["Not a string"], ["Not a string"], ["Not a string"], ["MAS"]]]}
{"requirement": "def solve_for_x(equation):\n\"\"\"# Solve For X\n\nYou will be given an equation as a string and you will need to [solve for X](https://www.mathplacementreview.com/algebra/basic-algebra.php#solve-for-a-variable) and return x's value. For example: \n\n```python\nsolve_for_x('x - 5 = 20') # should return 25\nsolve_for_x('20 = 5 * x - 5') # should return 5\nsolve_for_x('5 * x = x + 8') # should return 2\nsolve_for_x('(5 - 3) * x = x + 2') # should return 2\n```\n\nNOTES:\n * All numbers will be whole numbers\n * Don't forget about the [order of operations](https://www.mathplacementreview.com/algebra/basic-algebra.php#order-of-operations).\n * If the random tests don't pass the first time, just run them again.\n\"\"\"", "inputs": [["x - 5 = 20"], ["5 * x + 5 = 30"], ["20 = 5 * x - 5"], ["24 = 4 + 5 * x"], ["x = 5"], ["x * 100 = 700"], ["2 * x + 5 = 105"], ["2 * x = 198"], ["x - 100 + 2 - 50 = 52"], ["x / 3 = 33"], ["x + 80 = 20"], ["x + 20 = -60"], ["5 * x + 20 - x = 60"], ["x + x + 6 = 10"], ["5 * x = x + 8"], ["x = x / 2 + 25"], ["(5 - 3) * x = x + 2"], ["(x - 30) * 2 = x"]], "outputs": [[25], [5], [5], [4], [5], [7], [50], [99], [200], [99], [-60], [-80], [10], [2], [2], [50], [2], [60]], "starter_code": "def solve_for_x(equation):", "canonical_solution": "from itertools import count\n\ndef solve_for_x(equation):\n    return next((x for n in count(0) for x in [n, -n] if eval(equation.replace('x', str(x)).replace('=', '=='))))", "entry_point": "solve_for_x", "task_id": "TACO_lite/2", "input_output_examples": [[["x - 5 = 20"], ["20 = 5 * x - 5"], ["5 * x = x + 8"], ["(5 - 3) * x = x + 2"]], [[25], [5], [2], [2]]]}
{"requirement": "def total(arr):\n\"\"\"Write a function that takes an array/list of numbers and returns a number such that \n\nExplanation\ntotal([1,2,3,4,5]) => 48\n\n1+2=3--\\ 3+5 =>     8 \\\n2+3=5--/ \\            ==  8+12=>20\\     \n          ==>5+7=> 12 / \\           20+28 => 48\n3+4=7--\\ /            == 12+16=>28/\n4+5=9--/ 7+9 =>     16  /\n\n\nif total([1,2,3]) => 8 then \n\n\nfirst+second => 3 \\\n                   then 3+5 => 8\nsecond+third => 5 /\n\n\n### Examples\n```python\ntotal([-1,-1,-1]) => -4\ntotal([1,2,3,4])  => 20\n```\n\n**Note:** each array/list will have at least an element and all elements will be valid numbers.\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 4]], [[1, 2, 3]], [[4, 4, 52, 23, 32, 1, -1]], [[4, 4, 5, -1]], [[-1, -1, -1]], [[-1, -1, -10, 42, 92, 1, 23, 6, -3]], [[-1, 1, -1, 1]], [[42]]], "outputs": [[48], [20], [8], [1753], [30], [-4], [9248], [0], [42]], "starter_code": "def total(arr):", "canonical_solution": "def total(arr):\n    while len(arr) > 1:\n        arr = [x + y for x, y in zip(arr, arr[1:])]\n    return arr[0]", "entry_point": "total", "task_id": "TACO_lite/3", "input_output_examples": [[[[-1, -1, -1]], [[1, 2, 3, 4]], [[1, 2, 3, 4, 5]], [[1, 2, 3]]], [[-4], [20], [48], [8]]]}
{"requirement": "def faro_cycles(n):\n\"\"\"A faro shuffle of a deck of playing cards is a shuffle in which the deck is split exactly in half and then the cards in the two halves are perfectly interwoven, such that the original bottom card is still on the bottom and the original top card is still on top.\n\nFor example, faro shuffling the list\n```python\n['ace', 'two', 'three', 'four', 'five', 'six']\n```\ngives\n```python\n['ace', 'four', 'two', 'five', 'three', 'six' ]\n```\n\nIf 8 perfect faro shuffles are performed on a deck of 52 playing cards, the deck is restored to its original order.\n\nWrite a function that inputs an integer n and returns an integer representing the number of faro shuffles it takes to restore a deck of n cards to its original order.\n\nAssume n is an even number between 2 and 2000.\n\"\"\"", "inputs": [[2], [52], [542], [1250], [1954]], "outputs": [[1], [8], [540], [156], [30]], "starter_code": "def faro_cycles(n):", "canonical_solution": "def faro_cycles(n):\n    x, cnt = (2, 1)\n    while x != 1 and n > 3:\n        cnt += 1\n        x = x * 2 % (n - 1)\n    return cnt", "entry_point": "faro_cycles", "task_id": "TACO_lite/4", "input_output_examples": [[[6], [52]], [["ace", "four", "two", "five", "three", "six"], [8]]]}
{"requirement": "def word_search(query, seq):\n\"\"\"Write a method that will search an array of strings for all strings that contain another string, ignoring capitalization. Then return an array of the found strings. \n\nThe method takes two parameters, the query string and the array of strings to search, and returns an array. \n\nIf the string isn't contained in any of the strings in the array, the method returns an array containing a single string: \"Empty\" (or `Nothing` in Haskell, or \"None\" in Python and C)\n\n### Examples\nIf the string to search for is \"me\", and the array to search is [\"home\", \"milk\", \"Mercury\", \"fish\"], the method should return [\"home\", \"Mercury\"].\n\"\"\"", "inputs": [["ab", ["za", "ab", "abc", "zab", "zbc"]], ["aB", ["za", "ab", "abc", "zab", "zbc"]], ["ab", ["za", "aB", "Abc", "zAB", "zbc"]], ["abcd", ["za", "aB", "Abc", "zAB", "zbc"]]], "outputs": [[["ab", "abc", "zab"]], [["ab", "abc", "zab"]], [["aB", "Abc", "zAB"]], [["None"]]], "starter_code": "def word_search(query, seq):", "canonical_solution": "def word_search(query, seq):\n    return [x for x in seq if query.lower() in x.lower()] or ['None']", "entry_point": "word_search", "task_id": "TACO_lite/5", "input_output_examples": [[["me", ["home", "milk", "Mercury", "fish"]], ["ab", ["za", "ab", "abc", "zab", "zbc"]]], [["home", "Mercury"], ["ab", "abc", "zab"]]]}
{"requirement": "def calculate_grade(scores):\n\"\"\"You're a statistics professor and the deadline for submitting your students' grades is tonight at midnight. Each student's grade is determined by their mean score across all of the tests they took this semester.\n\nYou've decided to automate grade calculation by writing a function `calculate_grade()` that takes a list of test scores as an argument and returns a one character string representing the student's grade calculated as follows:\n\n * 90% <= mean score <= 100%: `\"A\"`,\n * 80% <= mean score < 90%: `\"B\"`,\n * 70% <= mean score < 80%: `\"C\"`,\n * 60% <= mean score < 70%: `\"D\"`,\n * mean score < 60%: `\"F\"`\n\nFor example, `calculate_grade([92, 94, 99])` would return `\"A\"` since the mean score is `95`, and `calculate_grade([50, 60, 70, 80, 90])` would return `\"C\"` since the mean score is `70`.\n\nYour function should handle an input list of any length greater than zero.\n\"\"\"", "inputs": [[[92, 94, 99]], [[50, 60, 70, 80, 90]], [[50, 55]]], "outputs": [["A"], ["C"], ["F"]], "starter_code": "def calculate_grade(scores):", "canonical_solution": "from bisect import bisect\nfrom statistics import mean\n\ndef calculate_grade(scores):\n    return 'FDCBA'[bisect([60, 70, 80, 90], mean(scores))]", "entry_point": "calculate_grade", "task_id": "TACO_lite/6", "input_output_examples": [[[[92, 94, 99]], [[50, 60, 70, 80, 90]]], [["A"], ["C"]]]}
{"requirement": "def trump_detector(ts):\n\"\"\"We all love the future president (or Führer or duce or sōtō as he could find them more fitting) donald trump, but we might fear that some of his many fans like John Miller or John Barron are not making him justice, sounding too much like their (and our as well, of course!) hero and thus risking to compromise him.\n\nFor this reason we need to create a function to detect the original and unique rythm of our beloved leader, typically having a lot of extra vowels, all ready to fight the estabilishment.\n\nThe index is calculated based on how many vowels are repeated more than once in a row and dividing them by the total number of vowels a petty enemy of America would use.\n\nFor example:\n```python\ntrump_detector(\"I will build a huge wall\")==0 #definitely not our trump: 0 on the trump score\ntrump_detector(\"HUUUUUGEEEE WAAAAAALL\")==4 #4 extra \"U\", 3 extra \"E\" and 5 extra \"A\" on 3 different vowel groups: 12/3 make for a trumpy trumping score of 4: not bad at all!\ntrump_detector(\"listen migrants: IIII KIIIDD YOOOUUU NOOOOOOTTT\")==1.56 #14 extra vowels on 9 base ones\n```\n**Notes:** vowels are only the ones in the patriotic group of \"aeiou\": \"y\" should go back to Greece if she thinks she can have the same rights of true American vowels; there is always going to be at least a vowel, as silence is the option of coward Kenyan/terrorist presidents and their friends.\n\nRound each result by two decimal digits: there is no place for small fry in Trump's America.\n\n*Special thanks for [Izabela](https://www.codewars.com/users/ijelonek) for support and proof-reading.*\n\"\"\"", "inputs": [["I will build a huge wall"], ["HUUUUUGEEEE WAAAAAALL"], ["MEXICAAAAAAAANS GOOOO HOOOMEEEE"], ["America NUUUUUKEEEE Oooobaaaamaaaaa"], ["listen migrants: IIII KIIIDD YOOOUUU NOOOOOOTTT"]], "outputs": [[0], [4], [2.5], [1.89], [1.56]], "starter_code": "def trump_detector(ts):", "canonical_solution": "import re\n\ndef trump_detector(ts):\n    x = re.findall('([aeiou])(\\\\1*)', ts, re.I)\n    y = [len(i[1]) for i in x]\n    return round(sum(y) / len(y), 2)", "entry_point": "trump_detector", "task_id": "TACO_lite/7", "input_output_examples": [[["I will build a huge wall"], ["HUUUUUGEEEE WAAAAAALL"], ["listen migrants: IIII KIIIDD YOOOUUU NOOOOOOTTT"]], [[0], [4], [1.56]]]}
{"requirement": "def likes(names):\n\"\"\"You probably know the \"like\" system from Facebook and other pages. People can \"like\" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.\n\nImplement a function `likes :: [String] -> String`, which must take in input array, containing the names of people who like an item. It must return the display text as shown in the examples:\n\n```python\nlikes([]) # must be \"no one likes this\"\nlikes([\"Peter\"]) # must be \"Peter likes this\"\nlikes([\"Jacob\", \"Alex\"]) # must be \"Jacob and Alex like this\"\nlikes([\"Max\", \"John\", \"Mark\"]) # must be \"Max, John and Mark like this\"\nlikes([\"Alex\", \"Jacob\", \"Mark\", \"Max\"]) # must be \"Alex, Jacob and 2 others like this\"\n```\n\nFor 4 or more names, the number in `and 2 others` simply increases.\n\"\"\"", "inputs": [[[]], [["Peter"]], [["Jacob", "Alex"]], [["Max", "John", "Mark"]], [["Alex", "Jacob", "Mark", "Max"]]], "outputs": [["no one likes this"], ["Peter likes this"], ["Jacob and Alex like this"], ["Max, John and Mark like this"], ["Alex, Jacob and 2 others like this"]], "starter_code": "def likes(names):", "canonical_solution": "def likes(names):\n    n = len(names)\n    return {0: 'no one likes this', 1: '{} likes this', 2: '{} and {} like this', 3: '{}, {} and {} like this', 4: '{}, {} and {others} others like this'}[min(4, n)].format(*names[:3], others=n - 2)", "entry_point": "likes", "task_id": "TACO_lite/8", "input_output_examples": [[[[]], [["Peter"]], [["Jacob", "Alex"]], [["Max", "John", "Mark"]], [["Alex", "Jacob", "Mark", "Max"]]], [["no one likes this"], ["Peter likes this"], ["Jacob and Alex like this"], ["Max, John and Mark like this"], ["Alex, Jacob and 2 others like this"]]]}
{"requirement": "def solve(p):\n\"\"\"Consider the following well known rules:\n\n- A number is divisible by 3 if the sum of its digits is divisible by 3. Let's call '3' a \"1-sum\" prime\n- For 37, we take numbers in groups of threes from the right and check if the sum of these groups is divisible by 37. \n  Example: 37 * 123456787 = 4567901119 => 4 + 567 + 901 + 119 = 1591 = 37 * 43. Let's call this a \"3-sum\" prime because we use groups of 3.\n- For 41, we take numbers in groups of fives from the right and check if the sum of these groups is divisible by 41. This is a \"5-sum\" prime.\n- Other examples: 239 is a \"7-sum\" prime (groups of 7), while 199 is a \"99-sum\" prime (groups of 99).\n\nLet's look at another type of prime:\n- For 11, we need to add all digits by alternating their signs from the right. \n  Example: 11 * 123456 = 1358016 => 6-1+0-8+5-3+1 = 0, which is divible by 11. Let's call this a \"1-altsum\" prime\n- For 7, we need to group the digits into threes from the right and add all groups by alternating their signs.\n  Example: 7 * 1234567891234 = 8641975238638 => 638 - 238 + 975 - 641 + 8 = 742/7 = 106. \n- 7 is a \"3-altsum\" prime because we use groups of threes. 47 is a \"23-altsum\" (groups of 23), while 73 is a \"4-altsum\" prime (groups of 4).\n\n\nYou will be given a prime number `p` and your task is to find the smallest positive integer `n` such that `p’s` divisibility testing is `n-sum` or `n-altsum`.\n\nFor example:\n```\nsolve(3) = \"1-sum\"\nsolve(7) = \"3-altsum\"\n```\nPrimes will not exceed `50,000,000`. More examples in test cases. \n\nYou can get some insight from [Fermat's little theorem](https://en.wikipedia.org/wiki/Fermat%27s_little_theorem). \n\nGood luck!\n\"\"\"", "inputs": [[3], [7], [11], [13], [37], [47], [73], [239], [376049], [999883], [24701723], [45939401]], "outputs": [["1-sum"], ["3-altsum"], ["1-altsum"], ["3-altsum"], ["3-sum"], ["23-altsum"], ["4-altsum"], ["7-sum"], ["47006-altsum"], ["499941-sum"], ["12350861-sum"], ["11484850-altsum"]], "starter_code": "def solve(p):", "canonical_solution": "import math\n\ndef divisors(n):\n    divs = [1]\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divs.extend([i, n // i])\n    divs.extend([n])\n    return list(set(divs))\n\ndef solve(p):\n    for d in sorted(divisors(p - 1)):\n        if pow(10, d, p) == 1:\n            return '{}-sum'.format(d)\n            break\n        elif pow(10, d, p) == p - 1:\n            return '{}-altsum'.format(d)\n            break", "entry_point": "solve", "task_id": "TACO_lite/9", "input_output_examples": [[[3], [7]], [["1-sum"], ["3-altsum"]]]}
{"requirement": "def beggars(values, n):\n\"\"\"Born a misinterpretation of [this kata](https://www.codewars.com/kata/simple-fun-number-334-two-beggars-and-gold/), your task here is pretty simple: given an array of values and an amount of beggars, you are supposed to return an array with the sum of what each beggar brings home, assuming they all take regular turns, from the first to the last.\n\nFor example: `[1,2,3,4,5]` for `2` beggars will return a result of `[9,6]`, as the first one takes `[1,3,5]`, the second collects `[2,4]`.\n\nThe same array with `3` beggars would have in turn have produced a better out come for the second beggar: `[5,7,3]`, as they will respectively take `[1,4]`, `[2,5]` and `[3]`.\n\nAlso note that not all beggars have to take the same amount of \"offers\", meaning that the length of the array is not necessarily a multiple of `n`; length can be even shorter, in which case the last beggars will of course take nothing (`0`).\n\n***Note:*** in case you don't get why this kata is about *English* beggars, then you are not familiar on how religiously queues are taken in the kingdom ;)\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 2], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 6], [[1, 2, 3, 4, 5], 0]], "outputs": [[[15]], [[9, 6]], [[5, 7, 3]], [[1, 2, 3, 4, 5, 0]], [[]]], "starter_code": "def beggars(values, n):", "canonical_solution": "def beggars(values, n):\n    return [sum(values[i::n]) for i in range(n)]", "entry_point": "beggars", "task_id": "TACO_lite/10", "input_output_examples": [[[[1, 2, 3, 4, 5], 2], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 1]], [[9, 6], [5, 7, 3], [15]]]}
{"requirement": "def fizz_buzz_cuckoo_clock(t):\n\"\"\"## Your story\nYou've always loved both Fizz Buzz katas and cuckoo clocks, and when you walked by a garage sale and saw an ornate cuckoo clock with a missing pendulum, and a \"Beyond-Ultimate Raspberry Pi Starter Kit\" filled with all sorts of sensors and motors and other components, it's like you were suddenly hit by a beam of light and knew that it was your mission to combine the two to create a computerized Fizz Buzz cuckoo clock!\n\nYou took them home and set up shop on the kitchen table, getting more and more excited as you got everything working together just perfectly. Soon the only task remaining was to write a function to select from the sounds you had recorded depending on what time it was:\n\n## Your plan\n* When a minute is evenly divisible by three, the clock will say the word \"Fizz\".\n* When a minute is evenly divisible by five, the clock will say the word \"Buzz\".\n* When a minute is evenly divisible by both, the clock will say \"Fizz Buzz\", with two exceptions:\n  1. On the hour, instead of \"Fizz Buzz\", the clock door will open, and the cuckoo bird will come out and \"Cuckoo\" between one and twelve times depending on the hour.\n  2. On the half hour, instead of \"Fizz Buzz\", the clock door will open, and the cuckoo will come out and \"Cuckoo\" just once. \n* With minutes that are not evenly divisible by either three or five, at first you had intended to have the clock just say the numbers ala Fizz Buzz, but then you decided at least for version 1.0 to just have the clock make a quiet, subtle \"tick\" sound for a little more clock nature and a little less noise.\n\nYour input will be a string containing hour and minute values in 24-hour time, separated by a colon, and with leading zeros. For example, 1:34 pm would be `\"13:34\"`.\n\nYour return value will be a string containing the combination of Fizz, Buzz, Cuckoo, and/or tick sounds that the clock needs to make at that time, separated by spaces. Note that although the input is in 24-hour time, cuckoo clocks' cuckoos are in 12-hour time. \n\n## Some examples\n```\n\"13:34\"       \"tick\"\n\"21:00\"       \"Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo\"\n\"11:15\"       \"Fizz Buzz\"\n\"03:03\"       \"Fizz\"\n\"14:30\"       \"Cuckoo\"\n\"08:55\"       \"Buzz\"\n\"00:00\"       \"Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo\"\n\"12:00\"       \"Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo\"\n```\nHave fun!\n\"\"\"", "inputs": [["13:34"], ["21:00"], ["11:15"], ["03:03"], ["14:30"], ["08:55"], ["00:00"], ["12:00"]], "outputs": [["tick"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"], ["Fizz Buzz"], ["Fizz"], ["Cuckoo"], ["Buzz"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"]], "starter_code": "def fizz_buzz_cuckoo_clock(t):", "canonical_solution": "def fizz_buzz_cuckoo_clock(t):\n    h, m = list(map(int, t.split(':')))\n    h = h - 12 if h > 12 else h + 12 if h == 0 else h\n    if m == 0:\n        return ' '.join(('Cuckoo' for i in range(h)))\n    if m == 30:\n        return 'Cuckoo'\n    if m % 3 == 0 and m % 5 == 0:\n        return 'Fizz Buzz'\n    if m % 3 == 0:\n        return 'Fizz'\n    if m % 5 == 0:\n        return 'Buzz'\n    return 'tick'", "entry_point": "fizz_buzz_cuckoo_clock", "task_id": "TACO_lite/11", "input_output_examples": [[["13:34"], ["21:00"], ["11:15"], ["03:03"], ["14:30"], ["08:55"], ["00:00"], ["12:00"]], [["tick"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"], ["Fizz Buzz"], ["Fizz"], ["Cuckoo"], ["Buzz"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"], ["Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo Cuckoo"]]]}
{"requirement": "def power_law(p1, p2, x3):\n\"\"\"A [Power Law](https://en.wikipedia.org/wiki/Power_law) distribution occurs whenever \"a relative change in one quantity results in a proportional relative change in the other quantity.\" For example, if *y* = 120 when *x* = 1 and *y* = 60 when *x* = 2 (i.e. *y* halves whenever *x* doubles) then when *x* = 4, *y* = 30 and when *x* = 8, *y* = 15.\n\n\nTherefore, if I give you any pair of co-ordinates (x1,y1) and (x2,y2) in a power law distribution, you can plot the entire rest of the distribution and tell me the value of *y* for any other value of *x*. \n\nGiven a pair of co-ordinates (x1,y1) and (x2,y2) and another x co-ordinate *x3*, return the value of *y3*\n\n```\npowerLaw(x1y1, x2y2, x3)\ne.g. powerLaw([1,120], [2,60], 4)\n- when x = 1, y = 120\n- when x = 2, y = 60\n- therefore whenever x doubles, y halves\n- therefore when x = 4, y = 60 * 0.5\n- therfore solution = 30\n```\n\n(x1,y1) and (x2,y2) will be given as arrays. Answer should be to the nearest integer, but random tests will give you leeway of 1% of the reference solution to account for possible discrepancies from different methods.\n\"\"\"", "inputs": [[[1, 120], [2, 60], 4], [[1, 120], [2, 60], 8], [[1, 120], [4, 30], 8], [[1, 120], [3, 60], 9], [[1, 120], [3, 60], 27], [[1, 120], [9, 30], 27], [[1, 81], [2, 27], 4], [[1, 81], [2, 27], 8], [[1, 81], [4, 9], 8], [[1, 81], [5, 27], 25], [[1, 81], [5, 27], 125], [[1, 81], [25, 9], 125], [[4, 30], [2, 60], 1], [[5, 27], [1, 81], 1], [[4, 9], [8, 3], 1], [[1, 120], [1, 120], 1], [[4, 99], [4, 99], 4], [[9, 1], [9, 1], 9]], "outputs": [[30], [15], [15], [30], [15], [15], [9], [3], [3], [9], [3], [3], [120], [81], [81], [120], [99], [1]], "starter_code": "def power_law(p1, p2, x3):", "canonical_solution": "from math import log\n\ndef power_law(p1, p2, x3):\n    (x1, y1), (x2, y2) = (p1, p2)\n    x1 += 1e-09\n    y1 += 1e-09\n    return round(y1 * (y2 / y1) ** log(x3 / x1, x2 / x1))", "entry_point": "power_law", "task_id": "TACO_lite/12", "input_output_examples": [[[[1, 120], [2, 60], 4]], [[30]]]}
{"requirement": "def human_years_cat_years_dog_years(x):\n\"\"\"# Kata Task\n\nI have a cat and a dog.\n\nI got them at the same time as kitten/puppy. That was `humanYears` years ago.\n\nReturn their respective ages now as [`humanYears`,`catYears`,`dogYears`]\n\nNOTES:\n* humanYears >= 1\n* humanYears are whole numbers only\n\n## Cat Years\n\n* `15` cat years for first year\n* `+9` cat years for second year\n* `+4` cat years for each year after that\n\n## Dog Years\n\n* `15` dog years for first year\n* `+9` dog years for second year\n* `+5` dog years for each year after that\n\n\n\n**References**\n\n* http://www.catster.com/cats-101/calculate-cat-age-in-cat-years\n* http://www.slate.com/articles/news_and_politics/explainer/2009/05/a_dogs_life.html\n\n\n\nIf you liked this Kata there is another related one here\n\"\"\"", "inputs": [[1], [2], [10]], "outputs": [[[1, 15, 15]], [[2, 24, 24]], [[10, 56, 64]]], "starter_code": "def human_years_cat_years_dog_years(x):", "canonical_solution": "def human_years_cat_years_dog_years(x):\n    return [x, 24 + (x - 2) * 4 if x != 1 else 15, 24 + (x - 2) * 5 if x != 1 else 15]", "entry_point": "human_years_cat_years_dog_years", "task_id": "TACO_lite/13", "input_output_examples": [[[1]], [[[1, 15, 15]]]]}
{"requirement": "def solve(lst):\n\"\"\"In this Kata, you will be given an array and your task will be to determine if an array is in ascending or descending order and if it is rotated or not. \n\nConsider the array `[1,2,3,4,5,7,12]`. This array is sorted in `Ascending` order. If we rotate this array once to the left, we get `[12,1,2,3,4,5,7]` and twice-rotated we get `[7,12,1,2,3,4,5]`. These two rotated arrays are in `Rotated Ascending` order.\n\nSimilarly, the array `[9,6,5,3,1]` is in `Descending` order, but we can rotate it to get an array in `Rotated Descending` order: `[1,9,6,5,3]` or `[3,1,9,6,5]` etc.\n\nArrays will never be unsorted, except for those that are rotated as shown above. Arrays will always have an answer, as shown in the examples below.\n\nMore examples:\n```Haskell\nsolve([1,2,3,4,5,7]) = \"A\" -- Ascending\nsolve([7,1,2,3,4,5]) = \"RA\" -- Rotated ascending\nsolve([4,5,6,1,2,3]) = \"RA\" -- Rotated ascending\nsolve([9,8,7,6]) = \"D\" -- Descending\nsolve([5,9,8,7,6]) = \"RD\" -- Rotated Descending\n```\nMore examples in the test cases. \n\nGood luck!\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5, 7]], [[7, 1, 2, 3, 4, 5]], [[2, 3, 4, 5, 7, 12]], [[7, 12, 1, 2, 3, 4, 5]], [[4, 5, 6, 1, 2, 3]], [[9, 8, 7, 6, 5]], [[5, 9, 8, 7, 6]], [[6, 5, 9, 8, 7]], [[9, 6, 7]], [[10, 12, 11]], [[13, 10, 11]]], "outputs": [["A"], ["RA"], ["A"], ["RA"], ["RA"], ["D"], ["RD"], ["RD"], ["RA"], ["RD"], ["RA"]], "starter_code": "def solve(lst):", "canonical_solution": "def solve(lst):\n    a, b, c = (lst[0] < lst[1], lst[1] < lst[2], lst[-1] < lst[0])\n    m = a if a == b else c\n    return ('R' if c == m else '') + ('A' if m else 'D')", "entry_point": "solve", "task_id": "TACO_lite/14", "input_output_examples": [[[[1, 2, 3, 4, 5, 7]], [[7, 1, 2, 3, 4, 5]], [[4, 5, 6, 1, 2, 3]], [[9, 8, 7, 6]], [[5, 9, 8, 7, 6]]], [["A"], ["RA"], ["RA"], ["D"], ["RD"]]]}
{"requirement": "def socialist_distribution(population, minimum):\n\"\"\"A core idea of several left-wing ideologies is that the wealthiest should *support* the poorest, no matter what and that is exactly what you are called to do using this kata (which, on a side note, was born out of the necessity to redistribute the width of `div`s into a given container).\n\nYou will be given two parameters, `population` and `minimum`: your goal is to give to each one according to his own needs (which we assume to be equal to `minimum` for everyone, no matter what), taking from the richest (bigger numbers) first.\n\nFor example, assuming a population `[2,3,5,15,75]` and `5` as a minimum, the expected result should be `[5,5,5,15,70]`. Let's punish those filthy capitalists, as we all know that being rich has to be somehow a fault and a shame!\n\nIf you happen to have few people as the richest, just take from the ones with the lowest index (the closest to the left, in few words) in the array first, on a 1:1 based heroic proletarian redistribution, until everyone is satisfied.\n\nTo clarify this rule, assuming a population `[2,3,5,45,45]` and `5` as `minimum`, the expected result should be `[5,5,5,42,43]`.\n\nIf you want to see it in steps, consider removing `minimum` from every member of the population, then iteratively (or recursively) adding 1 to the poorest while removing 1 from the richest. Pick the element most at left if more elements exist with the same level of minimal poverty, as they are certainly even more aligned with the party will than other poor people; similarly, it is ok to take from the richest one on the left first, so they can learn their lesson and be more kind, possibly giving more *gifts* to the inspectors of the State!\n\nIn steps:\n```\n[ 2, 3, 5,45,45] becomes\n[-3,-2, 0,40,40] that then becomes\n[-2,-2, 0,39,40] that then becomes\n[-1,-2, 0,39,39] that then becomes\n[-1,-1, 0,38,39] that then becomes\n[ 0,-1, 0,38,38] that then becomes\n[ 0, 0, 0,37,38] that then finally becomes (adding the minimum again, as no value is no longer under the poverty threshold\n[ 5, 5, 5,42,43]\n```\n\nIf giving `minimum` is unfeasable with the current resources (as it often comes to be the case in socialist communities...), for example if the above starting population had set a goal of giving anyone at least `30`, just return an empty array `[]`.\n\"\"\"", "inputs": [[[5, 5, 5, 15, 70], 5], [[20, 20, 20, 20, 20], 20], [[5, 5, 5, 42, 43], 5], [[2, 3, 5, 45, 45], 30], [[30, 30, 30, 30, 30], 30]], "outputs": [[[5, 5, 5, 15, 70]], [[20, 20, 20, 20, 20]], [[5, 5, 5, 42, 43]], [[]], [[30, 30, 30, 30, 30]]], "starter_code": "def socialist_distribution(population, minimum):", "canonical_solution": "def socialist_distribution(population, minimum):\n    if minimum > sum(population) // len(population):\n        return []\n    while min(population) < minimum:\n        population[population.index(min(population))] += 1\n        population[population.index(max(population))] -= 1\n    return population", "entry_point": "socialist_distribution", "task_id": "TACO_lite/15", "input_output_examples": [[[[2, 3, 5, 15, 75], 5], [[2, 3, 5, 45, 45], 5], [[2, 3, 5, 45, 45], 30]], [[5, 5, 5, 15, 70], [5, 5, 5, 42, 43], []]]}
{"requirement": "def roots(a, b, c):\n\"\"\"Implement function which will return sum of roots of a quadratic equation rounded to 2 decimal places, if there are any possible roots, else return **None/null/nil/nothing**. If you use discriminant,when discriminant = 0, x1 = x2 = root => return sum of both roots. There will always be valid arguments. \n\nQuadratic equation - https://en.wikipedia.org/wiki/Quadratic_equation\n\"\"\"", "inputs": [[1, -35, -23], [6, 0, -24], [-5, 21, 0], [6, 4, 8], [1, 5, -24], [3, 11, 6], [2, 2, 9], [1, -1.6666666666666667, -26], [1, 6, 10], [7, -2, -5], [1, 8, 20], [2, 3, -2], [1, 4, 12], [3, -2, -5], [3, 4, 9], [5, 4, 0], [4, -5, 0], [1, 4, 9], [1, 0, -49], [2, 8, 8], [1, 0, -0.16], [1, 6, 12], [1, 0, -9], [-3, 0, 12], [1, 3, 9], [3, 7, 0], [5, 3, 6], [1, 4, 4], [-1, 0, 5.29], [1, 12, 36], [1, 0, -0.09], [2, 5, 11], [3, 0, -15], [1, -3, 0], [1, 8, 16], [2, 6, 9], [-1, 36, 0], [5, -8, 0], [1, 5, 12], [-14, 0, 0], [1, 7, 20], [1, -6, 0], [1, -11, 30], [1, 3, 12], [1, 6, 9], [8, 47, 41]], "outputs": [[35], [0], [4.2], [null], [-5], [-3.67], [null], [1.67], [null], [0.29], [null], [-1.5], [null], [0.67], [null], [-0.8], [1.25], [null], [0], [-4], [0], [null], [0], [0], [null], [-2.33], [null], [-4], [0], [-12], [0], [null], [0], [3], [-8], [null], [36], [1.6], [null], [0], [null], [6], [11], [null], [-6], [-5.88]], "starter_code": "def roots(a, b, c):", "canonical_solution": "def roots(a, b, c):\n    if b ** 2 >= 4 * a * c:\n        return round(-b / a, 2)", "entry_point": "roots", "task_id": "TACO_lite/16", "input_output_examples": [[[1, -35, -23]], [[35.0]]]}
{"requirement": "def london_city_hacker(journey):\n\"\"\"You are given a sequence of a journey in London, UK. The sequence will contain bus **numbers** and TFL tube names as **strings** e.g.\n\n```python\n['Northern', 'Central', 243, 1, 'Victoria']\n```\nJourneys will always only contain a combination of tube names and bus numbers. Each tube journey costs `£2.40` and each bus journey costs `£1.50`. If there are `2` or more adjacent bus journeys, the bus fare is capped for sets of two adjacent buses and calculated as one bus fare for each set.\n\nYour task is to calculate the total cost of the journey and return the cost `rounded to 2 decimal places` in the format (where x is a number): `£x.xx`\n\"\"\"", "inputs": [[[12, "Central", "Circle", 21]], [["Piccidilly", 56]], [["Northern", "Central", "Circle"]], [["Piccidilly", 56, 93, 243]], [[386, 56, 1, 876]], [[]]], "outputs": [["£7.80"], ["£3.90"], ["£7.20"], ["£5.40"], ["£3.00"], ["£0.00"]], "starter_code": "def london_city_hacker(journey):", "canonical_solution": "def london_city_hacker(journey):\n    tube = 2.4\n    bus = 1.5\n    total_cost = 0.0\n    count = 0\n    for link in journey:\n        if isinstance(link, str):\n            total_cost += tube\n            count = 0\n        elif count == 0:\n            total_cost += bus\n            count += 1\n        else:\n            count = 0\n    return '£{:.2f}'.format(total_cost)", "entry_point": "london_city_hacker", "task_id": "TACO_lite/17", "input_output_examples": [[[[12, "Central", "Circle", 21]]], [["£7.80"]]]}
{"requirement": "def chess_board(rows, columns):\n\"\"\"A grid is a perfect starting point for many games (Chess, battleships, Candy Crush!).\n\nMaking a digital chessboard I think is an interesting way of visualising how loops can work together.\n\nYour task is to write a function that takes two integers `rows` and `columns` and returns a chessboard pattern as a two dimensional array.\n\nSo `chessBoard(6,4)` should return an array like this:\n\n\n    [\n            [\"O\",\"X\",\"O\",\"X\"],\n            [\"X\",\"O\",\"X\",\"O\"],\n            [\"O\",\"X\",\"O\",\"X\"],\n            [\"X\",\"O\",\"X\",\"O\"],\n            [\"O\",\"X\",\"O\",\"X\"],\n            [\"X\",\"O\",\"X\",\"O\"]\n    ]\n\nAnd `chessBoard(3,7)` should return this:\n\n\n    [\n        [\"O\",\"X\",\"O\",\"X\",\"O\",\"X\",\"O\"],\n        [\"X\",\"O\",\"X\",\"O\",\"X\",\"O\",\"X\"],\n        [\"O\",\"X\",\"O\",\"X\",\"O\",\"X\",\"O\"]\n    ]\n\nThe white spaces should be represented by an: `'O'`\n\nand the black an: `'X'`\n\nThe first row should always start with a white space `'O'`\n\"\"\"", "inputs": [[1, 1], [1, 2], [2, 1], [2, 2], [6, 6]], "outputs": [[[["O"]]], [[["O", "X"]]], [[["O"], ["X"]]], [[["O", "X"], ["X", "O"]]], [[["O", "X", "O", "X", "O", "X"], ["X", "O", "X", "O", "X", "O"], ["O", "X", "O", "X", "O", "X"], ["X", "O", "X", "O", "X", "O"], ["O", "X", "O", "X", "O", "X"], ["X", "O", "X", "O", "X", "O"]]]], "starter_code": "def chess_board(rows, columns):", "canonical_solution": "def chess_board(rows, columns):\n    return [['OX'[(row + col) % 2] for col in range(columns)] for row in range(rows)]", "entry_point": "chess_board", "task_id": "TACO_lite/18", "input_output_examples": [[[6, 4], [3, 7]], [[["O", "X", "O", "X"], ["X", "O", "X", "O"], ["O", "X", "O", "X"], ["X", "O", "X", "O"], ["O", "X", "O", "X"], ["X", "O", "X", "O"]], [["O", "X", "O", "X", "O", "X", "O"], ["X", "O", "X", "O", "X", "O", "X"], ["O", "X", "O", "X", "O", "X", "O"]]]]}
{"requirement": "def beasts(heads, tails):\n\"\"\"You're in ancient Greece and giving Philoctetes a hand in preparing a training exercise for Hercules! You've filled a pit with two different ferocious mythical creatures for Hercules to battle!\n\nThe formidable **\"Orthus\"** is a 2 headed dog with 1 tail.  The mighty **\"Hydra\"** has 5 heads and 1 tail. \n\nBefore Hercules goes in, he asks you \"How many of each beast am  I up against!?\".\n\nYou know the total number of heads and the total number of tails, that's the dangerous parts, right? But you didn't consider how many of each beast. \n\n## Task\n\nGiven the number of heads and the number of tails, work out the number of each mythical beast! \n\nThe data is given as two parameters. Your answer should be returned as an array:\n```python \n VALID ->      [24 , 15]           INVALID ->  \"No solutions\"\n```\n\nIf there aren't any cases for the given amount of heads and tails - return \"No solutions\" or null (C#).\n\"\"\"", "inputs": [[123, 39], [371, 88], [24, 12], [113, 37], [635, 181], [25, 555], [12, 25], [54, 956], [5455, 54956], [0, 0], [-1, -1], [-45, 5], [99, 0], [0, 99], [5, -55]], "outputs": [[[24, 15]], [[23, 65]], [[12, 0]], [[24, 13]], [[90, 91]], ["No solutions"], ["No solutions"], ["No solutions"], ["No solutions"], [[0, 0]], ["No solutions"], ["No solutions"], ["No solutions"], ["No solutions"], ["No solutions"]], "starter_code": "def beasts(heads, tails):", "canonical_solution": "def beasts(heads, tails):\n    orthus = (5 * tails - heads) / 3\n    hydra = tails - orthus\n    return [orthus, hydra] if orthus >= 0 and hydra >= 0 else 'No solutions'", "entry_point": "beasts", "task_id": "TACO_lite/19", "input_output_examples": [[[123, 39]], [[[24, 15]]]]}
{"requirement": "def round_to_five(numbers):\n\"\"\"Given an array of numbers, return an array, with each member of input array rounded to a nearest number, divisible by 5.\n\nFor example:\n```\nroundToFive([34.5, 56.2, 11, 13]);\n```\nshould return\n```\n[35, 55, 10, 15]\n```\n\n```if:python\nRoundings have to be done like \"in real life\": `22.5 -> 25`\n```\n\"\"\"", "inputs": [[[1, 5, 87, 45, 8, 8]], [[3, 56.2, 11, 13]], [[22.5, 544.9, 77.5]]], "outputs": [[[0, 5, 85, 45, 10, 10]], [[5, 55, 10, 15]], [[25, 545, 80]]], "starter_code": "def round_to_five(numbers):", "canonical_solution": "from decimal import Decimal, ROUND_HALF_UP\n\ndef round_to_five(numbers):\n    return [(n / 5).quantize(1, ROUND_HALF_UP) * 5 for n in map(Decimal, numbers)]", "entry_point": "round_to_five", "task_id": "TACO_lite/20", "input_output_examples": [[[[34.5, 56.2, 11, 13]], [[1, 5, 87, 45, 8, 8]]], [[35, 55, 10, 15], [0, 5, 85, 45, 10, 10]]]}
{"requirement": "def sum_dig_pow(a, b):\n\"\"\"The number ```89``` is the first integer with more than one digit that fulfills the property partially introduced in the title of this kata. \nWhat's the use of saying \"Eureka\"? Because this sum gives the same number.\n\nIn effect: ```89 = 8^1 + 9^2``` \n\nThe next number in having this property is ```135```.\n\nSee this property again: ```135 = 1^1 + 3^2 + 5^3```\n\nWe need a function to collect these numbers, that may receive two integers ```a```, ```b``` that defines the range ```[a, b]``` (inclusive) and outputs a list of the sorted numbers in the range that fulfills the property described above.\n\nLet's see some cases:\n```python\nsum_dig_pow(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nsum_dig_pow(1, 100) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 89]\n```\nIf there are no numbers of this kind in the range [a, b] the function should output an empty list.\n```python\nsum_dig_pow(90, 100) == []\n```\nEnjoy it!!\n\"\"\"", "inputs": [[1, 100], [10, 89], [10, 100], [90, 100], [90, 150], [50, 150], [10, 150], [89, 135]], "outputs": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 89]], [[89]], [[89]], [[]], [[135]], [[89, 135]], [[89, 135]], [[89, 135]]], "starter_code": "def sum_dig_pow(a, b):", "canonical_solution": "def dig_pow(n):\n    return sum((int(x) ** y for y, x in enumerate(str(n), 1)))\n\ndef sum_dig_pow(a, b):\n    return [x for x in range(a, b + 1) if x == dig_pow(x)]", "entry_point": "sum_dig_pow", "task_id": "TACO_lite/21", "input_output_examples": [[[1, 10], [1, 100], [90, 100]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 89], []]]}
{"requirement": "def interleave(*args):\n\"\"\"```if-not:ruby\nCreate a function, that accepts an arbitrary number of arrays and returns a single array generated by alternately appending elements from the passed in arguments. If one of them is shorter than the others, the result should be padded with empty elements.\n```\n```if:ruby\nCreate a function, that accepts an arbitrary number of arrays and returns a single array generated by alternately appending elements from the passed in arguments. If one of them is shorter than the others, the result should be padded with `nil`s.\n```\n\nExamples:\n\n```python\ninterleave([1, 2, 3], [\"c\", \"d\", \"e\"]) == [1, \"c\", 2, \"d\", 3, \"e\"]\ninterleave([1, 2, 3], [4, 5]) == [1, 4, 2, 5, 3, None]\ninterleave([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\ninterleave([]) == []\n```\n\"\"\"", "inputs": [[[1, 2, 3], ["c", "d", "e"]], [[1, 2, 3], [4, 5]], [[1, 2], [3, 4, 5]], [[null], [null, null], [null, null, null]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[]]], "outputs": [[[1, "c", 2, "d", 3, "e"]], [[1, 4, 2, 5, 3, null]], [[1, 3, 2, 4, null, 5]], [[null, null, null, null, null, null, null, null, null]], [[1, 4, 7, 2, 5, 8, 3, 6, 9]], [[]]], "starter_code": "def interleave(*args):", "canonical_solution": "from itertools import chain, zip_longest\n\ndef interleave(*args):\n    return list(chain.from_iterable(zip_longest(*args)))", "entry_point": "interleave", "task_id": "TACO_lite/22", "input_output_examples": [[[[1, 2, 3], ["c", "d", "e"]], [[1, 2, 3], [4, 5]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[]]], [[1, "c", 2, "d", 3, "e"], [1, 4, 2, 5, 3, null], [1, 4, 7, 2, 5, 8, 3, 6, 9], []]]}
{"requirement": "def memesorting(meme):\n\"\"\"Roma is programmer and he likes memes about IT,  \nMaxim is chemist and he likes memes about chemistry,  \nDanik is designer and he likes memes about design,  \nand Vlad likes all other memes.\n\n___\n\nYou will be given a meme (string), and your task is to identify its category, and send it to the right receiver: `IT - 'Roma'`, `chemistry - 'Maxim'`, `design - 'Danik'`, or `other - 'Vlad'`.\n\nIT meme has letters `b, u, g`.  \nChemistry meme has letters `b, o, o, m`.  \nDesign meme has letters `e, d, i, t, s`.  \nIf there is more than 1 possible answer, the earliest match should be chosen.\n\n**Note:** letters are case-insensetive and should come in the order specified above.\n\n___\n\n## Examples:\n\n(Matching letters are surrounded by curly braces for readability.)\n\n```\nthis is programmer meme {b}ecause it has b{ug}\nthis is also program{bu}r meme {g}ecause it has needed key word\nthis is {ed}s{i}gner meme cause i{t} ha{s} key word\n\nthis could {b}e chemistry meme b{u}t our{g}Gey word 'boom' is too late\n    instead of\nthis could {b}e chemistry meme but {o}ur gey w{o}rd 'boo{m}' is too late\n```\n\"\"\"", "inputs": [["This is programmer meme ecause it has bug"], ["This is also programbur meme gecause it has needed key word"], ["This is edsigner meme cause it has key word"], ["This could be chemistry meme but our gey word boom is too late"], ["This is meme"]], "outputs": [["Roma"], ["Roma"], ["Danik"], ["Roma"], ["Vlad"]], "starter_code": "def memesorting(meme):", "canonical_solution": "import re\nfrom itertools import accumulate\npatterns = [(re.compile('.*'.join('bug'), flags=re.I), 'Roma'), (re.compile('.*'.join('boom'), flags=re.I), 'Maxim'), (re.compile('.*'.join('edits'), flags=re.I), 'Danik')]\n\ndef memesorting(meme):\n    return next((who for m in accumulate(meme) for pattern, who in patterns if pattern.search(m)), 'Vlad')", "entry_point": "memesorting", "task_id": "TACO_lite/23", "input_output_examples": [[["this is programmer meme {b}ecause it has b{ug}"], ["this is also program{bu}r meme {g}ecause it has needed key word"], ["this is {ed}s{i}gner meme cause i{t} ha{s} key word"], ["this could {b}e chemistry meme b{u}t our{g}Gey word boom is too late"], ["this could {b}e chemistry meme but {o}ur gey w{o}rd 'boo{m}' is too late"]], [["Roma"], ["Roma"], ["Danik"], ["Vlad"], ["Maxim"]]]}
{"requirement": "def not_visible_cubes(n):\n\"\"\"Imagine there's a big cube consisting of n^3 small cubes. Calculate, how many small cubes are not visible from outside.\n\nFor example, if we have a cube which has 4 cubes in a row, then the function should return 8, because there are 8 cubes inside our cube (2 cubes in each dimension)\n\"\"\"", "inputs": [[0], [1], [2], [3], [4], [5], [7], [12], [18], [10002]], "outputs": [[0], [0], [0], [1], [8], [27], [125], [1000], [4096], [1000000000000]], "starter_code": "def not_visible_cubes(n):", "canonical_solution": "def not_visible_cubes(n):\n    return max(n - 2, 0) ** 3", "entry_point": "not_visible_cubes", "task_id": "TACO_lite/24", "input_output_examples": [[[4], [0]], [[8], [0]]]}
{"requirement": "def fibonacci(m):\n\"\"\"### Problem Context\n\nThe [Fibonacci](http://en.wikipedia.org/wiki/Fibonacci_number) sequence is traditionally used to explain tree recursion.  \n\n```python\ndef fibonacci(n):\n    if n in [0, 1]:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)\n```\n\nThis algorithm serves welll its educative purpose but it's [tremendously inefficient](http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-11.html#%_sec_1.2.2), not only because of recursion, but because we invoke the fibonacci function twice, and the right branch of recursion (i.e. `fibonacci(n-2)`) recalculates all the Fibonacci numbers already calculated by the left branch (i.e. `fibonacci(n-1)`).\n\nThis algorithm is so inefficient that the time to calculate any Fibonacci number over 50 is simply too much. You may go for a cup of coffee or go take a nap while you wait for the answer. But if you try it here in Code Wars you will most likely get a code timeout before any answers.\n\nFor this particular Kata we want to **implement the memoization solution**. This will be cool because it will let us *keep using the tree recursion* algorithm while still keeping it sufficiently optimized to get an answer very rapidly.\n\nThe trick of the memoized version is that we will keep a cache data structure (most likely an associative array) where we will store the Fibonacci numbers as we calculate them. When a Fibonacci number is calculated, we first look it up in the cache, if it's not there, we calculate it and put it in the cache, otherwise we returned the cached number.\n\nRefactor the function into a recursive Fibonacci function that using  a memoized data structure avoids the deficiencies of tree recursion Can you make it so the memoization cache is private to this function?\n\"\"\"", "inputs": [[70], [60], [50]], "outputs": [[190392490709135], [1548008755920], [12586269025]], "starter_code": "def fibonacci(m):", "canonical_solution": "def fibonacci(m):\n    cache = {0: 0, 1: 1}\n\n    def fib(n):\n        if n not in cache:\n            cache[n] = fib(n - 1) + fib(n - 2)\n        return cache[n]\n    return fib(m)", "entry_point": "fibonacci", "task_id": "TACO_lite/25", "input_output_examples": [[[70]], [[190392490709135]]]}
{"requirement": "def calculate_1rm(w, r):\n\"\"\"You just got done with your set at the gym, and you are wondering how much weight you could lift if you did a single repetition. Thankfully, a few scholars have devised formulas for this purpose (from [Wikipedia](https://en.wikipedia.org/wiki/One-repetition_maximum)) :\n\n\n### Epley\n\n\n### McGlothin\n\n\n### Lombardi\n\n\nYour function will receive a weight `w` and a number of repetitions `r` and must return your projected one repetition maximum. Since you are not sure which formula to use and you are feeling confident, your function will return the largest value from the three formulas shown above, rounded to the nearest integer. However, if the number of repetitions passed in is `1` (i.e., it is already a one rep max), your function must return `w`. Also, if the number of repetitions passed in is `0` (i.e., no repetitions were completed), your function must return `0`.\n\"\"\"", "inputs": [[135, 20], [200, 8], [270, 2], [360, 1], [400, 0]], "outputs": [[282], [253], [289], [360], [0]], "starter_code": "def calculate_1rm(w, r):", "canonical_solution": "def calculate_1rm(w, r):\n    if r == 0:\n        return 0\n    if r == 1:\n        return w\n    return round(max([w * (1 + r / 30), 100 * w / (101.3 - 2.67123 * r), w * r ** 0.1]))", "entry_point": "calculate_1rm", "task_id": "TACO_lite/26", "input_output_examples": [[[135, 20]], [[282]]]}
{"requirement": "def my_crib(n):\n\"\"\"## Task\n\nGiven `n` representing the number of floors build a beautiful multi-million dollar mansions like the ones in the example below:\n\n```\n     /\\\n    /  \\\n   /    \\\n  /______\\  number of floors 3\n  |      |\n  |      |\n  |______|\n\n     /\\\n    /  \\\n   /____\\\n   |    |   2 floors\n   |____|\n\n     /\\\n    /__\\    1 floor\n    |__|\n```\n\n**Note:** whitespace should be preserved on both sides of the roof. Number of floors will go up to 30. There will be no tests with invalid input.\n\nIf you manage to complete it, you can try a harder version [here](https://www.codewars.com/kata/58360d112fb0ba255300008b).\n\nGood luck!\n\"\"\"", "inputs": [[1], [2], [3]], "outputs": [[" /\\ \n/__\\\n|__|"], ["  /\\  \n /  \\ \n/____\\\n|    |\n|____|"], ["   /\\   \n  /  \\  \n /    \\ \n/______\\\n|      |\n|      |\n|______|"]], "starter_code": "def my_crib(n):", "canonical_solution": "def my_crib(n):\n    roof = '\\n'.join(('%s/%s\\\\%s' % (' ' * (n - i), ' ' * i * 2, ' ' * (n - i)) for i in range(n)))\n    ceiling = '\\n/%s\\\\\\n' % ('_' * (n * 2))\n    walls = '|%s|\\n' % (' ' * (n * 2)) * (n - 1)\n    floor = '|%s|' % ('_' * (n * 2))\n    return roof + ceiling + walls + floor", "entry_point": "my_crib", "task_id": "TACO_lite/27", "input_output_examples": [[[1], [2], [3]], [[" /\\ \n/__\\\n|__|"], ["    /\\ \n   /  \\ \n  /____\\ \n  |    | \n  |____|"], ["     /\\ \n    /  \\ \n   /    \\ \n  /______\\ \n  |      | \n  |      | \n  |______|"]]]}
{"requirement": "def get_middle(s):\n\"\"\"You are going to be given a word. Your job is to return the middle character of the word. If the word's length is odd, return the middle character. If the word's length is even, return the middle 2 characters.\n\n#Examples:\n~~~if-not:bf\n```\nKata.getMiddle(\"test\") should return \"es\"\n\nKata.getMiddle(\"testing\") should return \"t\"\n\nKata.getMiddle(\"middle\") should return \"dd\"\n\nKata.getMiddle(\"A\") should return \"A\"\n\n```\n~~~\n~~~if:bf\n```\nrunBF(\"test\\0\") should return \"es\"\n\nrunBF(\"testing\\0\") should return \"t\"\n\nrunBF(\"middle\\0\") should return \"dd\"\n\nrunBF(\"A\\0\") should return \"A\"\n\n```\n~~~\n\n#Input\n\nA word (string) of length `0 < str < 1000` (In javascript you may get slightly more than 1000 in some test cases due to an error in the test cases). You do not need to test for this. This is only here to tell you that you do not need to worry about your solution timing out.\n\n\n#Output\n\nThe middle character(s) of the word represented as a string.\n\"\"\"", "inputs": [["test"], ["testing"], ["middle"], ["A"], ["of"]], "outputs": [["es"], ["t"], ["dd"], ["A"], ["of"]], "starter_code": "def get_middle(s):", "canonical_solution": "def get_middle(s):\n    return s[(len(s) - 1) // 2:len(s) // 2 + 1]", "entry_point": "get_middle", "task_id": "TACO_lite/28", "input_output_examples": [[["test"], ["testing"], ["middle"], ["A"]], [["es"], ["t"], ["dd"], ["A"]]]}
{"requirement": "def josephus_survivor(n, k):\n\"\"\"In this kata you have to correctly return who is the \"survivor\", ie: the last element of a Josephus permutation.\n\nBasically you have to assume that n people are put into a circle and that they are eliminated in steps of k elements, like this:\n\n```\njosephus_survivor(7,3) => means 7 people in a circle;\none every 3 is eliminated until one remains\n[1,2,3,4,5,6,7] - initial sequence\n[1,2,4,5,6,7] => 3 is counted out\n[1,2,4,5,7] => 6 is counted out\n[1,4,5,7] => 2 is counted out\n[1,4,5] => 7 is counted out\n[1,4] => 5 is counted out\n[4] => 1 counted out, 4 is the last element - the survivor!\n```\n\nThe above link about the \"base\" kata description will give you a more thorough insight about the origin of this kind of permutation, but basically that's all that there is to know to solve this kata.\n\n**Notes and tips:** using the solution to the other kata to check your function may be helpful, but as much larger numbers will be used, using an array/list to compute the number of the survivor may be too slow; you may assume that both n and k will always be >=1.\n\"\"\"", "inputs": [[7, 3], [11, 19], [40, 3], [14, 2], [100, 1], [1, 300], [2, 300], [5, 300], [7, 300], [300, 300]], "outputs": [[4], [10], [28], [13], [100], [1], [1], [1], [7], [265]], "starter_code": "def josephus_survivor(n, k):", "canonical_solution": "def josephus_survivor(n, k):\n    v = 0\n    for i in range(1, n + 1):\n        v = (v + k) % i\n    return v + 1", "entry_point": "josephus_survivor", "task_id": "TACO_lite/29", "input_output_examples": [[[7, 3]], [[4]]]}
{"requirement": "def kontti(s):\n\"\"\"Kontti language is a finnish word play game.\n\nYou add `-kontti` to the end of each word and then swap their characters until and including the first vowel (\"aeiouy\"); \n\nFor example the word `tame` becomes `kome-tantti`; `fruity` becomes `koity-fruntti` and so on.\n\nIf no vowel is present, the word stays the same.\n\nWrite a string method that turns a sentence into kontti language!\n\"\"\"", "inputs": [["lamppu"], ["lamppu sofia"], ["silly game"], ["aeiou"], ["xyz lamppu"], [""], ["lAmppU"], ["silly grrr"]], "outputs": [["komppu-lantti"], ["komppu-lantti kofia-sontti"], ["kolly-sintti kome-gantti"], ["koeiou-antti"], ["koz-xyntti komppu-lantti"], [""], ["komppU-lAntti"], ["kolly-sintti grrr"]], "starter_code": "def kontti(s):", "canonical_solution": "import re\n\ndef kontti(s):\n    return ' '.join([re.sub('([^aeiouy]*[aeiouy])(.*)', 'ko\\\\2-\\\\1ntti', w, flags=re.I) for w in s.split()])", "entry_point": "kontti", "task_id": "TACO_lite/30", "input_output_examples": [[["tame"], ["fruity"], ["lamppu"]], [["kome-tantti"], ["koity-fruntti"], ["komppu-lantti"]]]}
{"requirement": "def count_divisors(n):\n\"\"\"In this Kata we focus on finding a sum S(n) which is the total number of divisors taken for all natural numbers less or equal to n. More formally, we investigate the sum of n components denoted by d(1) + d(2) + ... + d(n) in which for any i starting from 1 up to n the value of d(i) tells us how many distinct numbers divide i without a remainder. \n\nYour solution should work for possibly large values of n without a timeout.\nAssume n to be greater than zero and not greater than 999 999 999 999 999.\nBrute force approaches will not be feasible options in such cases. It is fairly simple to conclude that for every n>1 there holds a recurrence S(n) = S(n-1) + d(n) with initial case S(1) = 1.\n\nFor example:\nS(1) = 1\nS(2) = 3\nS(3) = 5\nS(4) = 8\nS(5) = 10\n\nBut is the fact useful anyway? If you find it is rather not, maybe this will help: \n\nTry to convince yourself that for any natural k, the number S(k) is the same as the number of pairs (m,n) that solve the inequality mn <= k in natural numbers.\nOnce it becomes clear, we can think of a partition of all the solutions into classes just by saying that a pair (m,n) belongs to the class indexed by n.\nThe question now arises if it is possible to count solutions of n-th class. If f(n) stands for the number of solutions that belong to n-th class, it means that S(k) = f(1) + f(2) + f(3) + ...\n\nThe reasoning presented above leads us to some kind of a formula for S(k), however not necessarily the most efficient one. Can you imagine that all the solutions to inequality mn <= k can be split using sqrt(k) as pivotal item?\n\"\"\"", "inputs": [[5], [10], [20], [59], [105], [785], [1001], [8009], [9999999999999], [9999999999998], [9999999999995], [9999999949950]], "outputs": [[10], [27], [66], [249], [510], [5364], [7077], [73241], [300880375389561], [300880375389537], [300880375389493], [300880373832097]], "starter_code": "def count_divisors(n):", "canonical_solution": "def count_divisors(n):\n    r = int(n ** (1 / 2))\n    return 2 * sum((n // i for i in range(1, r + 1))) - r * r", "entry_point": "count_divisors", "task_id": "TACO_lite/31", "input_output_examples": [[[1], [2], [3], [4], [5]], [[1], [3], [5], [8], [10]]]}
{"requirement": "def bumps(road):\n\"\"\"Your car is old, it breaks easily. The shock absorbers are gone and you think it can handle about 15 more bumps before it dies totally.\n\nUnfortunately for you, your drive is very bumpy! Given a string showing either flat road (\"\\_\") or bumps (\"n\"), work out if you make it home safely. 15 bumps or under, return \"Woohoo!\", over 15 bumps return \"Car Dead\".\n\"\"\"", "inputs": [["n"], ["_nnnnnnn_n__n______nn__nn_nnn"], ["______n___n_"], ["nnnnnnnnnnnnnnnnnnnnn"]], "outputs": [["Woohoo!"], ["Car Dead"], ["Woohoo!"], ["Car Dead"]], "starter_code": "def bumps(road):", "canonical_solution": "def bumps(road):\n    return 'Woohoo!' if road.count('n') <= 15 else 'Car Dead'", "entry_point": "bumps", "task_id": "TACO_lite/32", "input_output_examples": [[[["n"]]], [["Woohoo!"]]]}
{"requirement": "def charcheck(text, mx, spaces):\n\"\"\"Cara is applying for several different jobs.\nThe online application forms ask her to respond within a specific character count.\nCara needs to check that her answers fit into the character limit.\n\nAnnoyingly, some application forms count spaces as a character, and some don't.\n\nYour challenge: \n\nWrite Cara a function `charcheck()` with the arguments:\n\n- `\"text\"`: a string containing Cara's answer for the question\n- `\"max\"`: a number equal to the maximum number of characters allowed in the answer\n- `\"spaces\"`: a boolean which is `True` if spaces are included in the character count and `False` if they are not\n\nThe function `charcheck()` should return an array: `[True, \"Answer\"]` , where `\"Answer\"` is equal to the original text, if Cara's answer is short enough.\n\nIf her answer `\"text\"` is too long, return an array: `[False, \"Answer\"]`. \nThe second element should be the original `\"text\"` string truncated to the length of the limit.\n\nWhen the `\"spaces\"` argument is `False`, you should remove the spaces from the `\"Answer\"`.\n\nFor example:\n\n- `charcheck(\"Cara Hertz\", 10, True)` should return `[ True, \"Cara Hertz\" ]`\n- `charcheck(\"Cara Hertz\", 9, False)` should return `[ True, \"CaraHertz\" ]`\n- `charcheck(\"Cara Hertz\", 5, True)` should return `[ False, \"Cara \" ]`\n- `charcheck(\"Cara Hertz\", 5, False)` should return `[ False, \"CaraH\" ]`\n\"\"\"", "inputs": [["I am applying for the role of Base Manager on Titan.", 60, true], ["I am looking to relocate to the vicinity of Saturn for family reasons.", 70, true], ["As Deputy Base Manager on Phobos for five Martian years, I have significant relevant experience.", 90, false], ["A challenging career moment came with the rapid depletion of water supplies on Phobos.", 80, false], ["But, as I pointed out, anyone complaining about standing downwind was lying. There was no wind.", 75, true], ["I have no notice period on Phobos. I can start immediately.", 50, true]], "outputs": [[[true, "I am applying for the role of Base Manager on Titan."]], [[true, "I am looking to relocate to the vicinity of Saturn for family reasons."]], [[true, "AsDeputyBaseManageronPhobosforfiveMartianyears,Ihavesignificantrelevantexperience."]], [[true, "AchallengingcareermomentcamewiththerapiddepletionofwatersuppliesonPhobos."]], [[false, "But, as I pointed out, anyone complaining about standing downwind was lying"]], [[false, "I have no notice period on Phobos. I can start imm"]]], "starter_code": "def charcheck(text, mx, spaces):", "canonical_solution": "def charcheck(text, mx, spaces):\n    text = text if spaces else text.replace(' ', '')\n    return [len(text) <= mx, text[:mx]]", "entry_point": "charcheck", "task_id": "TACO_lite/33", "input_output_examples": [[["Cara Hertz", 10, true], ["Cara Hertz", 9, false], ["Cara Hertz", 5, true], ["Cara Hertz", 5, false]], [[true, "Cara Hertz"], [true, "CaraHertz"], [false, "Cara "], [false, "CaraH"]]]}
{"requirement": "def convert_recipe(recipe):\n\"\"\"Mary wrote a recipe book and is about to publish it, but because of a new European law, she needs to update and include all measures in grams.\n\nGiven all the measures in tablespoon (`tbsp`) and in teaspoon (`tsp`), considering `1 tbsp = 15g` and `1 tsp = 5g`, append to the end of the measurement the biggest equivalent integer (rounding up).\n\n## Examples\n\n```\n\"2 tbsp of butter\"    -->  \"2 tbsp (30g) of butter\"\n\n\"1/2 tbsp of oregano\" -->  \"1/2 tbsp (8g) of oregano\"\n\n\"1/2 tsp of salt\"     -->  \"1/2 tbsp (3g) of salt\"\n\n\"Add to the mixing bowl and coat well with 1 tbsp of olive oil & 1/2 tbsp of dried dill\" -->\n\"Add to the mixing bowl and coat well with 1 tbsp (15g) of olive oil & 1/2 tbsp (8g) of dried dill\"\n```\n\"\"\"", "inputs": [["2 tbsp of butter"], ["Add to the mixing bowl and coat well with 1 tbsp of olive oil & 1/2 tbsp of dried dill"], ["1/2 tsp of baking powder"], ["In another bowl, add 2 tsp of vanilla extract, 3 tsp of baking soda and 1/2 tsp of salt"], ["10 tbsp of cocoa powder"], ["1/8 tbsp of baking soda"], ["In a large bowl, combine confectioners' sugar, sour cream and vanilla"]], "outputs": [["2 tbsp (30g) of butter"], ["Add to the mixing bowl and coat well with 1 tbsp (15g) of olive oil & 1/2 tbsp (8g) of dried dill"], ["1/2 tsp (3g) of baking powder"], ["In another bowl, add 2 tsp (10g) of vanilla extract, 3 tsp (15g) of baking soda and 1/2 tsp (3g) of salt"], ["10 tbsp (150g) of cocoa powder"], ["1/8 tbsp (2g) of baking soda"], ["In a large bowl, combine confectioners' sugar, sour cream and vanilla"]], "starter_code": "def convert_recipe(recipe):", "canonical_solution": "import re, math\n\ndef convert_recipe(recipe):\n\n    def repl(m):\n        ratio = 15 if m.group(2) == 'tbsp' else 5\n        return m.group(0) + ' (%sg)' % math.ceil(eval(m.group(1)) * ratio)\n    return re.sub('([0-9/]+) (tb?sp)', repl, recipe)", "entry_point": "convert_recipe", "task_id": "TACO_lite/34", "input_output_examples": [[["2 tbsp of butter"], ["1/2 tbsp of oregano"], ["1/2 tsp of salt"], ["Add to the mixing bowl and coat well with 1 tbsp of olive oil & 1/2 tbsp of dried dill"]], [["2 tbsp (30g) of butter"], ["1/2 tbsp (8g) of oregano"], ["1/2 tsp (3g) of salt"], ["Add to the mixing bowl and coat well with 1 tbsp (15g) of olive oil & 1/2 tbsp (8g) of dried dill"]]]}
{"requirement": "def move_zeros(arr):\n\"\"\"Write an algorithm that takes an array and moves all of the zeros to the end, preserving the order of the other elements.\n\n```python\nmove_zeros([False,1,0,1,2,0,1,3,\"a\"]) # returns[False,1,1,2,1,3,\"a\",0,0]\n```\n\"\"\"", "inputs": [[[1, 2, 0, 1, 0, 1, 0, 3, 0, 1]], [[9, 0.0, 0, 9, 1, 2, 0, 1, 0, 1, 0.0, 3, 0, 1, 9, 0, 0, 0, 0, 9]], [["a", 0, 0, "b", "c", "d", 0, 1, 0, 1, 0, 3, 0, 1, 9, 0, 0, 0, 0, 9]], [["a", 0, 0, "b", null, "c", "d", 0, 1, false, 0, 1, 0, 3, [], 0, 1, 9, 0, 0, {}, 0, 0, 9]], [[0, 1, null, 2, false, 1, 0]], [["a", "b"]], [["a"]], [[0, 0]], [[0]], [[]]], "outputs": [[[1, 2, 1, 1, 3, 1, 0, 0, 0, 0]], [[9, 9, 1, 2, 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [["a", "b", "c", "d", 1, 1, 3, 1, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [["a", "b", null, "c", "d", 1, false, 1, 3, [], 1, 9, {}, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[1, null, 2, false, 1, 0, 0]], [["a", "b"]], [["a"]], [[0, 0]], [[0]], [[]]], "starter_code": "def move_zeros(arr):", "canonical_solution": "def move_zeros(arr):\n    l = [i for i in arr if isinstance(i, bool) or i != 0]\n    return l + [0] * (len(arr) - len(l))", "entry_point": "move_zeros", "task_id": "TACO_lite/35", "input_output_examples": [[[[false, 1, 0, 1, 2, 0, 1, 3, "a"]], [[1, 2, 0, 1, 0, 1, 0, 3, 0, 1]]], [[false, 1, 1, 2, 1, 3, "a", 0, 0], [1, 2, 1, 1, 3, 1, 0, 0, 0, 0]]]}
{"requirement": "def string_parse(string):\n\"\"\"Create a program that will take in a string as input and, if there are duplicates of more than two alphabetical characters in the string, returns the string with all the extra characters in a bracket.\n\nFor example, the input \"aaaabbcdefffffffg\" should return  \"aa[aa]bbcdeff[fffff]g\" \n\nPlease also ensure that the input is a string, and return \"Please enter a valid string\" if it is not.\n\"\"\"", "inputs": [["aaaabbcdefffffffg"], [3], ["boopdedoop"], ["helloookat"], [true], [""], ["aAAabbcdeffFfFffg"], ["aAAabbcdeFFFffffg"], [{}], [[5.3]]], "outputs": [["aa[aa]bbcdeff[fffff]g"], ["Please enter a valid string"], ["boopdedoop"], ["helloo[o]kat"], ["Please enter a valid string"], [""], ["aAAabbcdeffFfFffg"], ["aAAabbcdeFF[F]ff[ff]g"], ["Please enter a valid string"], ["Please enter a valid string"]], "starter_code": "def string_parse(string):", "canonical_solution": "import re\n\ndef string_parse(string):\n    return re.sub('(.)\\\\1(\\\\1+)', '\\\\1\\\\1[\\\\2]', string) if isinstance(string, str) else 'Please enter a valid string'", "entry_point": "string_parse", "task_id": "TACO_lite/36", "input_output_examples": [[["aaaabbcdefffffffg"]], [["aa[aa]bbcdeff[fffff]g"]]]}
{"requirement": "def lostsheep(friday, saturday, total):\n\"\"\"Every Friday and Saturday night, farmer counts amount of sheep returned back to his farm (sheep returned on Friday stay and don't leave for a weekend).\n\nSheep return in groups each of the days -> you will be given two arrays with these numbers (one for Friday and one for Saturday night). Entries are always positive ints, higher than zero.\n\nFarmer knows the total amount of sheep, this is a third parameter. You need to return the amount of sheep lost (not returned to the farm) after final sheep counting on Saturday.\n\nExample 1: Input: {1, 2}, {3, 4}, 15 --> Output: 5\n\nExample 2: Input: {3, 1, 2}, {4, 5}, 21 --> Output: 6\n\nGood luck! :-)\n\"\"\"", "inputs": [[[1, 2], [3, 4], 15], [[3, 1, 2], [4, 5], 21], [[5, 1, 4], [5, 4], 29], [[11, 23, 3, 4, 15], [7, 14, 9, 21, 15], 300], [[2, 7, 13, 17], [23, 56, 44, 12, 1, 2, 1], 255], [[2, 5, 8], [11, 23, 3, 4, 15, 112, 12, 4], 355], [[1, 1, 1, 2, 1, 2], [2, 1, 2, 1, 2, 1], 30], [[5, 10, 15], [11, 23, 3, 4, 15], 89], [[3, 6, 9, 12], [3, 2, 1, 2, 3, 1], 44]], "outputs": [[5], [6], [10], [178], [77], [156], [13], [3], [2]], "starter_code": "def lostsheep(friday, saturday, total):", "canonical_solution": "def lostsheep(friday, saturday, total):\n    return total - sum(friday + saturday)", "entry_point": "lostsheep", "task_id": "TACO_lite/37", "input_output_examples": [[[[1, 2], [3, 4], 15], [[3, 1, 2], [4, 5], 21]], [[5], [6]]]}
{"requirement": "def diamonds_and_toads(sentence, fairy):\n\"\"\"Base on the fairy tale [Diamonds and Toads](https://en.wikipedia.org/wiki/Diamonds_and_Toads) from Charles Perrault. In this kata you will have to complete a function that take 2 arguments: \n\n- A string, that correspond to what the daugther says.\n- A string, that tell you wich fairy the girl have met, this one can be `good` or `evil`. \n\nThe function should return the following count as a hash:\n\n- If the girl have met the `good` fairy:\n  - count 1 `ruby` everytime you see a `r` and 2 everytime you see a `R`\n  - count 1 `crystal` everytime you see a `c` and 2 everytime you see a `C`\n- If the girl have met the `evil` fairy: \n  - count 1 `python` everytime you see a `p` and 2 everytime uou see a `P`\n  - count 1 `squirrel` everytime you see a `s` and 2 everytime you see a `S`\n  \n**Note**: For this kata I decided to remplace the normal `Diamonds` and `Toads` by some programming languages. And just discover that [Squirrel](https://en.wikipedia.org/wiki/Squirrel_(programming_language) is a programming language.\n\"\"\"", "inputs": [["Ruby and Crystal", "good"], ["This string contain some Ruby and some Crystal in it", "good"], ["Python and Squirrel", "evil"], ["This string contain some Python and some Squirrel in it", "evil"]], "outputs": [[{"ruby": 3, "crystal": 2}], [{"ruby": 4, "crystal": 3}], [{"python": 2, "squirrel": 2}], [{"python": 2, "squirrel": 6}]], "starter_code": "def diamonds_and_toads(sentence, fairy):", "canonical_solution": "from collections import Counter\n\ndef diamonds_and_toads(sentence, fairy):\n    c = Counter(sentence)\n    d = {'good': ['ruby', 'crystal'], 'evil': ['python', 'squirrel']}\n    return {s: c[s[0]] + 2 * c[s[0].upper()] for s in d[fairy]}", "entry_point": "diamonds_and_toads", "task_id": "TACO_lite/38", "input_output_examples": [[["Ruby and Crystal", "good"]], [[{"ruby": 3, "crystal": 2}]]]}
{"requirement": "def get_grade(s1, s2, s3):\n\"\"\"## Grade book\n\nComplete the function so that it finds the mean of the three scores passed to it and returns the letter value associated with that grade.\n\nNumerical Score    | Letter Grade\n---                | ---\n90 <= score <= 100 | 'A'\n80 <= score < 90   | 'B'\n70 <= score < 80   | 'C'\n60 <= score < 70   | 'D'\n 0 <= score < 60   | 'F'\n\nTested values are all between 0 and 100. Theres is no need to check for negative values or values greater than 100.\n\"\"\"", "inputs": [[95, 90, 93], [100, 85, 96], [92, 93, 94], [100, 100, 100], [70, 70, 100], [82, 85, 87], [84, 79, 85], [70, 70, 70], [75, 70, 79], [60, 82, 76], [65, 70, 59], [66, 62, 68], [58, 62, 70], [44, 55, 52], [48, 55, 52], [58, 59, 60], [0, 0, 0]], "outputs": [["A"], ["A"], ["A"], ["A"], ["B"], ["B"], ["B"], ["C"], ["C"], ["C"], ["D"], ["D"], ["D"], ["F"], ["F"], ["F"], ["F"]], "starter_code": "def get_grade(s1, s2, s3):", "canonical_solution": "def get_grade(s1, s2, s3):\n    m = (s1 + s2 + s3) / 3.0\n    if 90 <= m <= 100:\n        return 'A'\n    elif 80 <= m < 90:\n        return 'B'\n    elif 70 <= m < 80:\n        return 'C'\n    elif 60 <= m < 70:\n        return 'D'\n    return 'F'", "entry_point": "get_grade", "task_id": "TACO_lite/39", "input_output_examples": [[[[95, 90, 93]]], [["A"]]]}
{"requirement": "def palindrome(num):\n\"\"\"A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward. Examples of numerical palindromes are:\n\n2332  \n110011  \n54322345  \n\nFor a given number `num`, write a function to test if it's a numerical palindrome or not and return a boolean (true if it is and false if not).\n\n```if-not:haskell\nReturn \"Not valid\" if the input is not an integer or less than `0`.\n```\n```if:haskell\nReturn `Nothing` if the input is less than `0` and `Just True` or `Just False` otherwise.\n```\n\nOther Kata in this Series:\nNumerical Palindrome #1\nNumerical Palindrome #1.5\nNumerical Palindrome #2\nNumerical Palindrome #3\nNumerical Palindrome #3.5\nNumerical Palindrome #4\nNumerical Palindrome #5\n\"\"\"", "inputs": [[1221], [110011], [1456009006541], [123322], [1], [152], [9999], ["ACCDDCCA"], ["@14AbC"], ["1221"], [-450]], "outputs": [[true], [true], [true], [false], [true], [false], [true], ["Not valid"], ["Not valid"], ["Not valid"], ["Not valid"]], "starter_code": "def palindrome(num):", "canonical_solution": "def palindrome(num):\n    if type(num) is not int or num < 1:\n        return 'Not valid'\n    return num == int(str(num)[::-1])", "entry_point": "palindrome", "task_id": "TACO_lite/40", "input_output_examples": [[[2332], [110011], [54322345], [1221]], [[true], [true], [true], [true]]]}
{"requirement": "def sabb(stg, value, happiness):\n\"\"\"Learning to code around your full time job is taking over your life. You realise that in order to make significant steps quickly, it would help to go to a coding bootcamp in London.\n\nProblem is, many of them cost a fortune, and those that don't still involve a significant amount of time off work - who will pay your mortgage?!\n\nTo offset this risk, you decide that rather than leaving work totally, you will request a sabbatical so that you can go back to work post bootcamp and be paid while you look for your next role.\n\nYou need to approach your boss. Her decision will be based on three parameters:\n\nval=your value to the organisation\nhappiness=her happiness level at the time of asking and finally\nThe numbers of letters from 'sabbatical' that are present in string `s`.\n\nNote that if `s` contains three instances of the letter 'l', that still scores three points, even though there is only one in the word sabbatical.\n\nIf the sum of the three parameters (as described above) is > 22, return 'Sabbatical! Boom!', else return 'Back to your desk, boy.'.\n\n~~~if:c\nNOTE: For the C translation you should return a string literal.\n~~~\n\"\"\"", "inputs": [["Can I have a sabbatical?", 5, 5], ["Why are you shouting?", 7, 2], ["What do you mean I cant learn to code??", 8, 9], ["Please calm down", 9, 1], ["I can?! Nice. FaC..Im coming :D", 9, 9]], "outputs": [["Sabbatical! Boom!"], ["Back to your desk, boy."], ["Sabbatical! Boom!"], ["Back to your desk, boy."], ["Sabbatical! Boom!"]], "starter_code": "def sabb(stg, value, happiness):", "canonical_solution": "def sabb(stg, value, happiness):\n    sabbatical = value + happiness + sum((1 for c in stg if c in 'sabbatical')) > 22\n    return 'Sabbatical! Boom!' if sabbatical else 'Back to your desk, boy.'", "entry_point": "sabb", "task_id": "TACO_lite/41", "input_output_examples": [[["Can I have a sabbatical?", 5, 5]], [["Sabbatical! Boom!"]]]}
{"requirement": "def sort_array(xs):\n\"\"\"You are given an array of integers. Your task is to sort odd numbers within the array in ascending order, and even numbers in descending order.\n\nNote that zero is an even number. If you have an empty array, you need to return it.\n\n\nFor example:\n```\n[5, 3, 2, 8, 1, 4]  -->  [1, 3, 8, 4, 5, 2]\n\nodd numbers ascending:   [1, 3,       5   ]\neven numbers descending: [      8, 4,    2]\n```\n\"\"\"", "inputs": [[[5, 3, 2, 8, 1, 4, 11]], [[2, 22, 37, 11, 4, 1, 5, 0]], [[1, 111, 11, 11, 2, 1, 5, 0]], [[]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[0, 1, 2, 3, 4, 9, 8, 7, 6, 5]]], "outputs": [[[1, 3, 8, 4, 5, 2, 11]], [[22, 4, 1, 5, 2, 11, 37, 0]], [[1, 1, 5, 11, 2, 11, 111, 0]], [[]], [[1, 8, 3, 6, 5, 4, 7, 2, 9, 0]], [[8, 1, 6, 3, 4, 5, 2, 7, 0, 9]], [[8, 1, 6, 3, 4, 5, 2, 7, 0, 9]]], "starter_code": "def sort_array(xs):", "canonical_solution": "def sort_array(xs):\n    es = sorted((x for x in xs if x % 2 == 0))\n    os = sorted((x for x in xs if x % 2 != 0), reverse=True)\n    return [(es if x % 2 == 0 else os).pop() for x in xs]", "entry_point": "sort_array", "task_id": "TACO_lite/42", "input_output_examples": [[[[5, 3, 2, 8, 1, 4]], [[5, 3, 2, 8, 1, 4, 11]]], [[[1, 3, 8, 4, 5, 2]], [[1, 3, 8, 4, 5, 2, 11]]]]}
{"requirement": "def missing_angle(h, a, o):\n\"\"\"Below is a right-angled triangle:\n\n```\n  |\\\n  | \\\n  |  \\\n  |   \\ \no |    \\ h \n  |     \\\n  |    θ \\\n  |_______\\ \n     a\n```\n\nYour challange is to write a function (```missingAngle``` in C/C#, ```missing_angle``` in Ruby), that calculates the angle θ in degrees to the nearest integer. You will be given three arguments representing each side: o, h and a. One of the arguments equals zero. Use the length of the two other sides to calculate θ. You will not be expected to handle any erronous data in your solution.\n\"\"\"", "inputs": [[0, 400, 300], [5, 4, 0], [8, 0, 5], [16.7, 0, 12.3], [7, 5, 0]], "outputs": [[37], [37], [39], [47], [44]], "starter_code": "def missing_angle(h, a, o):", "canonical_solution": "import math\n\ndef missing_angle(h, a, o):\n    if h == 0:\n        radians = math.atan(o / a)\n    elif a == 0:\n        radians = math.asin(o / h)\n    else:\n        radians = math.acos(a / h)\n    return round(math.degrees(radians))", "entry_point": "missing_angle", "task_id": "TACO_lite/43", "input_output_examples": [[[0, 400, 300]], [[37]]]}
{"requirement": "def xor(a, b):\n\"\"\"# Exclusive \"or\" (xor) Logical Operator\n\n## Overview\n\nIn some scripting languages like PHP, there exists a logical operator (e.g. ```&&```, ```||```, ```and```, ```or```, etc.) called the \"Exclusive Or\" (hence the name of this Kata).  The exclusive or evaluates two booleans.  It then returns true if **exactly one of the two expressions are true**, false otherwise.  For example:\n\n## Task\n\nSince we cannot define keywords in Javascript (well, at least I don't know how to do it), your task is to define a function ```xor(a, b)``` where a and b are the two expressions to be evaluated.  Your ```xor``` function should have the behaviour described above, returning true if **exactly one of the two expressions evaluate to true**, false otherwise.\n\"\"\"", "inputs": [[false, false], [true, false], [false, true], [true, true]], "outputs": [[false], [true], [true], [false]], "starter_code": "def xor(a, b):", "canonical_solution": "def xor(a, b):\n    return a != b", "entry_point": "xor", "task_id": "TACO_lite/44", "input_output_examples": [[[false, false]], [[false]]]}
{"requirement": "def separate_liquids(glass):\n\"\"\"Don't Drink the Water\n\nGiven a two-dimensional array representation of a glass of mixed liquids, sort the array such that the liquids appear in the glass based on their density. (Lower density floats to the top) The width of the glass will not change from top to bottom.\n\n```\n======================\n|   Density Chart    |\n======================\n| Honey   | H | 1.36 |\n| Water   | W | 1.00 |\n| Alcohol | A | 0.87 |\n| Oil     | O | 0.80 |\n----------------------\n\n[                            [\n ['H', 'H', 'W', 'O'],        ['O','O','O','O']\n ['W', 'W', 'O', 'W'],  =>    ['W','W','W','W']\n ['H', 'H', 'O', 'O']         ['H','H','H','H']\n ]                           ]\n \n ```\n \n The glass representation may be larger or smaller. If a liquid doesn't fill a row, it floats to the top and to the left.\n\"\"\"", "inputs": [[[["H", "H", "W", "O"], ["W", "W", "O", "W"], ["H", "H", "O", "O"]]], [[["A", "A", "O", "H"], ["A", "H", "W", "O"], ["W", "W", "A", "W"], ["H", "H", "O", "O"]]], [[["A", "H", "W", "O"]]], [[["A"], ["H"], ["W"], ["O"]]], [[]]], "outputs": [[[["O", "O", "O", "O"], ["W", "W", "W", "W"], ["H", "H", "H", "H"]]], [[["O", "O", "O", "O"], ["A", "A", "A", "A"], ["W", "W", "W", "W"], ["H", "H", "H", "H"]]], [[["O", "A", "W", "H"]]], [[["O"], ["A"], ["W"], ["H"]]], [[]]], "starter_code": "def separate_liquids(glass):", "canonical_solution": "DENSITY = {'H': 1.36, 'W': 1, 'A': 0.87, 'O': 0.8}\n\ndef separate_liquids(glass):\n    if not glass:\n        return []\n    column = len(glass[0])\n    liquids = sorted((b for a in glass for b in a), key=lambda c: DENSITY[c])\n    return [liquids[d:d + column] for d in range(0, len(liquids), column)]", "entry_point": "separate_liquids", "task_id": "TACO_lite/45", "input_output_examples": [[[[["H", "H", "W", "O"], ["W", "W", "O", "W"], ["H", "H", "O", "O"]]]], [[[["O", "O", "O", "O"], ["W", "W", "W", "W"], ["H", "H", "H", "H"]]]]]}
{"requirement": "def build_square(blocks):\n\"\"\"# The Invitation\n\nMost of us played with toy blocks growing up. It was fun and you learned stuff. So what else can you do but rise to the challenge when a 3-year old exclaims, \"Look, I made a square!\", then pointing to a pile of blocks, \"Can _you_ do it?\"\n\n# These Blocks\n\nJust to play along, of course we'll be viewing these blocks in two dimensions. Depth now being disregarded, it turns out the pile has four different sizes of block: `1x1`, `1x2`, `1x3`, and `1x4`. The smallest one represents the area of a square, the other three are rectangular, and all differ by their width. Integers matching these four widths are used to represent the blocks in the input.\n\n# This Square\n\nWell, the kid made a `4x4` square from this pile, so you'll have to match that. Noticing the way they fit together, you realize the structure must be built in fours rows, one row at a time, where the blocks must be placed horizontally. With the known types of block, there are five types of row you could build:\n\n* 1 four-unit block\n* 1 three-unit block plus 1 one-unit bock (in either order)\n* 2 two-unit blocks\n* 1 two-unit block plus 2 one-unit blocks (in any order)\n* 4 one-unit blocks\n\nAmounts for all four of the block sizes in the pile will each vary from `0` to `16`. The total size of the pile will also vary from `0` to `16`. The order of rows is irrelevant. A valid square doesn't have to use up all the given blocks.\n\n# Some Examples\n\nGiven `1, 3, 2, 2, 4, 1, 1, 3, 1, 4, 2` there are many ways you could construct a square. Here are three possibilities, as described by their four rows:\n\n* 1 four-unit block\n* 2 two-unit blocks\n* 1 four-unit block\n* 4 one-unit blocks\n>\n* 1 three-unit block plus 1 one-unit block\n* 2 two-unit blocks\n* 1 four-unit block\n* 1 one-unit block plus 1 three-unit block\n>\n* 2 two-unit blocks\n* 1 three-unit block plus 1 one-unit block\n* 1 four-unit block\n* 2 one-unit blocks plus 1 two-unit block\n>\n\nGiven `1, 3, 2, 4, 3, 3, 2` there is no way to complete the task, as you could only build three rows of the correct length. The kid will not be impressed.\n\n* 2 two-unit blocks\n* 1 three-unit block plus 1 one-unit block\n* 1 four-unit block\n* (here only sadness)\n>\n\n# Input\n```python\nblocks ~ a random list of integers (1 <= x <= 4)\n```\n# Output\n```python\nTrue or False ~ whether you can build a square\n```\n# Enjoy!\n\nIf interested, I also have [this kata](https://www.codewars.com/kata/5cb7baa989b1c50014a53333) as well as [this other kata](https://www.codewars.com/kata/5cb5eb1f03c3ff4778402099) to consider solving.\n\"\"\"", "inputs": [[[]], [[2, 2, 1, 1, 2]], [[3, 3]], [[3, 3, 3, 3, 3, 3, 3]], [[]], [[3, 2]], [[1, 1, 1]], [[2, 2, 1, 1]], [[]], [[]]], "outputs": [[true], [true], [false], [false], [true], [false], [false], [true], [true], [false]], "starter_code": "def build_square(blocks):", "canonical_solution": "def build_square(blocks):\n    for x in range(4):\n        if 4 in blocks:\n            blocks.remove(4)\n        elif 3 in blocks and 1 in blocks:\n            blocks.remove(3)\n            blocks.remove(1)\n        elif blocks.count(2) >= 2:\n            blocks.remove(2)\n            blocks.remove(2)\n        elif 2 in blocks and blocks.count(1) >= 2:\n            blocks.remove(2)\n            blocks.remove(1)\n            blocks.remove(1)\n        elif blocks.count(1) >= 4:\n            blocks.remove(1)\n            blocks.remove(1)\n            blocks.remove(1)\n            blocks.remove(1)\n        else:\n            return False\n    return True", "entry_point": "build_square", "task_id": "TACO_lite/46", "input_output_examples": [[[1, 3, 2, 2, 4, 1, 1, 3, 1, 4, 2], [1, 3, 2, 4, 3, 3, 2]], [[true], [false]]]}
{"requirement": "def sea_sick(sea):\n\"\"\"Thanks to the effects of El Nino this year my holiday snorkelling trip was akin to being in a washing machine... Not fun at all.\n\nGiven a string made up of '~' and '\\_' representing waves and calm respectively, your job is to check whether a person would become seasick.\n\nRemember, only the process of change from wave to calm (and vice versa) will add to the effect (really wave peak to trough but this will do). Find out how many changes in level the string has and if that figure is more than 20% of the string, return \"Throw Up\", if less, return \"No Problem\".\n\"\"\"", "inputs": [["~"], ["_~~~~~~~_~__~______~~__~~_~~"], ["______~___~_"], ["____"], ["_~~_~____~~~~~~~__~_~"]], "outputs": [["No Problem"], ["Throw Up"], ["Throw Up"], ["No Problem"], ["Throw Up"]], "starter_code": "def sea_sick(sea):", "canonical_solution": "def sea_sick(sea):\n    return 'Throw Up' if (sea.count('~_') + sea.count('_~')) / len(sea) > 0.2 else 'No Problem'", "entry_point": "sea_sick", "task_id": "TACO_lite/47", "input_output_examples": [[["~"]], [["No Problem"]]]}
{"requirement": "def same_encryption(s1, s2):\n\"\"\"# Task\n John loves encryption. He can encrypt any string by the following algorithm:\n```\ntake the first and the last letters of the word;\nreplace the letters between them with their number;\nreplace this number with the sum of it digits \n          until a single digit is obtained.```\nGiven two strings(`s1` and `s2`), return `true` if their encryption is the same, or `false` otherwise.\n\n# Example\n\n For `s1 = \"EbnhGfjklmjhgz\" and s2 = \"Eabcz\"`, the result should be `true`.\n ```\n \"EbnhGfjklmjhgz\" --> \"E12z\" --> \"E3z\"\n \"Eabcz\" --> \"E3z\"\n Their encryption is the same.```\n \n# Input/Output\n\n\n - `[input]` string `s1`\n\n  The first string to be encrypted.\n  \n  `s1.length >= 3`\n \n \n - `[input]` string `s2`\n\n  The second string to be encrypted.\n\n  `s2.length >= 3`\n  \n  \n - `[output]` a boolean value\n\n `true` if encryption is the same, `false` otherwise.\n\"\"\"", "inputs": [["abc", "abc"], ["abc", "abd"], ["fKhjuytrdfcdc", "flJc"], ["OKhjuytrdfcdc", "OijK"]], "outputs": [[true], [false], [true], [false]], "starter_code": "def same_encryption(s1, s2):", "canonical_solution": "def same_encryption(s1, s2):\n    return (s1[0], s1[-1], len(s1) % 9) == (s2[0], s2[-1], len(s2) % 9)", "entry_point": "same_encryption", "task_id": "TACO_lite/48", "input_output_examples": [[["EbnhGfjklmjhgz", "Eabcz"]], [[true]]]}
{"requirement": "def diff(arr):\n\"\"\"Your task is to find the number couple with the greatest difference from a given array of number-couples. \n\nAll number couples will be given as strings and all numbers in them will be positive integers.  \n\nFor instance: ['56-23','1-100']; in this case, you should identify '1-100' as the number couple with the greatest difference and return it.\n\nIn case there are more than one option, for instance ['1-3','5-7','2-3'], you should identify whichever is first, so in this case '1-3'. \n\nIf there is no difference, like so ['11-11', '344-344'], return false.\n\"\"\"", "inputs": [[["43-45", "1021-55", "000-18888", "92-34", "76-32", "99-1", "1020-54"]], [["1-2", "2-4", "5-7", "8-9", "44-45"]], [["1-1000", "2-1000", "100-67", "98-45", "8-9"]], [["33-33", "77-77"]], [["23-67", "67-23", "88-88", "45-46"]], [["45896-2354", "4654-556767", "2455-423522", "3455-355", "34-34", "2524522-0"]], [["1-1", "2-2", "1-0", "77-77"]], [["0-0"]], [[]]], "outputs": [["000-18888"], ["2-4"], ["1-1000"], [false], ["23-67"], ["2524522-0"], ["1-0"], [false], [false]], "starter_code": "def diff(arr):", "canonical_solution": "def diff(arr):\n    r = arr and max(arr, key=lambda x: abs(eval(x)))\n    return bool(arr and eval(r)) and r", "entry_point": "diff", "task_id": "TACO_lite/49", "input_output_examples": [[[["56-23", "1-100"]], [["1-3", "5-7", "2-3"]], [["11-11", "344-344"]], [["43-45", "1021-55", "000-18888", "92-34", "76-32", "99-1", "1020-54"]]], [["1-100"], ["1-3"], [false], ["000-18888"]]]}
{"requirement": "def roman_fractions(n, f=0):\n\"\"\"We all know about Roman Numerals, and if not, here's a nice [introduction kata](http://www.codewars.com/kata/5580d8dc8e4ee9ffcb000050). And if you were anything like me, you 'knew' that the numerals were not used for zeroes or fractions; but not so!\n\nI learned something new today: the [Romans did use fractions](https://en.wikipedia.org/wiki/Roman_numerals#Special_values) and there was even a glyph used to indicate zero.\n\nSo in this kata, we will be implementing Roman numerals and fractions.\n\nAlthough the Romans used base 10 for their counting of units, they used base 12 for their fractions. The system used dots to represent twelfths, and an `S` to represent a half like so:\n\n* ^(1)/12 = `.`\n* ^(2)/12 = `:`\n* ^(3)/12 = `:.`\n* ^(4)/12 = `::`\n* ^(5)/12 = `:.:`\n* ^(6)/12 = `S`\n* ^(7)/12 = `S.`\n* ^(8)/12 = `S:`\n* ^(9)/12 = `S:.`\n* ^(10)/12 = `S::`\n* ^(11)/12 = `S:.:`\n* ^(12)/12 = `I` (as usual)\n\nFurther, zero was represented by `N`\n\n## Kata\n\nComplete the method that takes two parameters: an integer component in the range 0 to 5000 inclusive, and an optional fractional component in the range 0 to 11 inclusive.\n\nYou must return a string with the encoded value. Any input values outside the ranges given above should return `\"NaR\"` (i.e. \"Not a Roman\" :-)\n\n## Examples\n\n```python\nroman_fractions(-12)     #=> \"NaR\"\nroman_fractions(0, -1)   #=> \"NaR\"\nroman_fractions(0, 12)   #=> \"NaR\"\nroman_fractions(0)       #=> \"N\"\nroman_fractions(0, 3)    #=> \":.\"\nroman_fractions(1)       #=> \"I\"\nroman_fractions(1, 0)    #=> \"I\"\nroman_fractions(1, 5)    #=> \"I:.:\"\nroman_fractions(1, 9)    #=> \"IS:.\"\nroman_fractions(1632, 2) #=> \"MDCXXXII:\"\nroman_fractions(5000)    #=> \"MMMMM\"\nroman_fractions(5001)    #=> \"NaR\"\n```\n\"\"\"", "inputs": [[-12], [0, -1], [0, 12], [0], [1], [1, 5], [1, 9], [1632, 2], [5000], [5001], [0, 0], [0, 1], [0, 2], [0, 3], [0, 4], [0, 5], [0, 6], [0, 7], [0, 8], [0, 9], [0, 10], [0, 11]], "outputs": [["NaR"], ["NaR"], ["NaR"], ["N"], ["I"], ["I:.:"], ["IS:."], ["MDCXXXII:"], ["MMMMM"], ["NaR"], ["N"], ["."], [":"], [":."], ["::"], [":.:"], ["S"], ["S."], ["S:"], ["S:."], ["S::"], ["S:.:"]], "starter_code": "def roman_fractions(n, f=0):", "canonical_solution": "FRACTIONS = ' . : :. :: :.: S S. S: S:. S:: S:.:'.split(' ')\nUNITS = ' I II III IV V VI VII VIII IX'.split(' ')\nTENS = ' X XX XXX XL L LX LXX LXXX XC'.split(' ')\nHUNDREDS = ' C CC CCC CD D DC DCC DCCC CM'.split(' ')\nTHOUSANDS = ' M MM MMM MMMM MMMMM'.split(' ')\n\ndef roman_fractions(n, f=0):\n    return 'NaR' if n < 0 or n > 5000 or f < 0 or (f > 11) else 'N' if n + f == 0 else THOUSANDS[n // 1000] + HUNDREDS[n % 1000 // 100] + TENS[n % 100 // 10] + UNITS[n % 10] + FRACTIONS[f]", "entry_point": "roman_fractions", "task_id": "TACO_lite/50", "input_output_examples": [[[-12], [0, -1], [0, 12], [0], [0, 3], [1], [1, 0], [1, 5], [1, 9], [1632, 2], [5000], [5001]], [["NaR"], ["NaR"], ["NaR"], ["N"], [":."], ["I"], ["I"], ["I:.:"], ["IS:."], ["MDCXXXII:"], ["MMMMM"], ["NaR"]]]}
{"requirement": "def tribonacci(signature, n):\n\"\"\"Well met with Fibonacci bigger brother, AKA Tribonacci.\n\nAs the name may already reveal, it works basically like a Fibonacci, but summing the last 3 (instead of 2) numbers of the sequence to generate the next. And, worse part of it, regrettably I won't get to hear non-native Italian speakers trying to pronounce it :(\n\nSo, if we are to start our Tribonacci sequence with `[1, 1, 1]` as a starting input (AKA *signature*), we have this sequence:\n\n```\n[1, 1 ,1, 3, 5, 9, 17, 31, ...]\n```\n\nBut what if we started with `[0, 0, 1]` as a signature? As starting with `[0, 1]` instead of `[1, 1]` basically *shifts* the common Fibonacci sequence by once place, you may be tempted to think that we would get the same sequence shifted by 2 places, but that is not the case and we would get:\n\n```\n[0, 0, 1, 1, 2, 4, 7, 13, 24, ...]\n```\n\nWell, you may have guessed it by now, but to be clear: you need to create a fibonacci function that given a **signature** array/list, returns **the first n elements - signature included** of the so seeded sequence.\n\nSignature will always contain 3 numbers; n will always be a non-negative number; if `n == 0`, then return an empty array (except in C return NULL) and be ready for anything else which is not clearly specified ;)\n\nIf you enjoyed this kata more advanced and generalized version of it can be found in the Xbonacci kata\n\n*[Personal thanks to Professor Jim Fowler on Coursera for his awesome classes that I really recommend to any math enthusiast and for showing me this mathematical curiosity too with his usual contagious passion :)]*\n\"\"\"", "inputs": [[[1, 1, 1], 10], [[0, 0, 1], 10], [[0, 1, 1], 10], [[1, 0, 0], 10], [[0, 0, 0], 10], [[1, 2, 3], 10], [[3, 2, 1], 10], [[1, 1, 1], 1], [[300, 200, 100], 0], [[0.5, 0.5, 0.5], 30]], "outputs": [[[1, 1, 1, 3, 5, 9, 17, 31, 57, 105]], [[0, 0, 1, 1, 2, 4, 7, 13, 24, 44]], [[0, 1, 1, 2, 4, 7, 13, 24, 44, 81]], [[1, 0, 0, 1, 1, 2, 4, 7, 13, 24]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[1, 2, 3, 6, 11, 20, 37, 68, 125, 230]], [[3, 2, 1, 6, 9, 16, 31, 56, 103, 190]], [[1]], [[]], [[0.5, 0.5, 0.5, 1.5, 2.5, 4.5, 8.5, 15.5, 28.5, 52.5, 96.5, 177.5, 326.5, 600.5, 1104.5, 2031.5, 3736.5, 6872.5, 12640.5, 23249.5, 42762.5, 78652.5, 144664.5, 266079.5, 489396.5, 900140.5, 1655616.5, 3045153.5, 5600910.5, 10301680.5]]], "starter_code": "def tribonacci(signature, n):", "canonical_solution": "def tribonacci(signature, n):\n    res = signature[:n]\n    for i in range(n - 3):\n        res.append(sum(res[-3:]))\n    return res", "entry_point": "tribonacci", "task_id": "TACO_lite/51", "input_output_examples": [[[[1, 1, 1], 10], [[0, 0, 1], 10]], [[1, 1, 1, 3, 5, 9, 17, 31, 57, 105], [0, 0, 1, 1, 2, 4, 7, 13, 24, 44]]]}
{"requirement": "def array_operations(a, n):\n\"\"\"# Task\n You are given an array of integers `a` and a non-negative number of operations `k`, applied to the array. Each operation consists of two parts:\n```\nfind the maximum element value of the array;\nreplace each element a[i] with (maximum element value - a[i]).```\nHow will the array look like after `k` such operations?\n\n# Example\n\n For `a = [-4, 0, -1, 0]` and `k = 2`, the output should be `[0, 4, 3, 4]`.\n ```\n initial array: [-4, 0, -1, 0]\n 1st operation: \n find the maximum value --> 0\n replace each element:  --> [(0 - -4), (0 - 0), (0 - -1), (0 - 0)]\n                        --> [4, 0, 1, 0]\n 2nd operation: \n find the maximum value --> 4\n replace each element:  --> [(4 - 4), (4 - 0), (4 - 1), (4 - 0)]\n                        --> [0, 4, 3, 4]\n \n ```\n For `a = [0, -1, 0, 0, -1, -1, -1, -1, 1, -1]` and `k = 1`, \n \n the output should be `[1, 2, 1, 1, 2, 2, 2, 2, 0, 2]`.\n ```\n initial array: [0, -1, 0, 0, -1, -1, -1, -1, 1, -1]\n 1st operation: \n find the maximum value --> 1\n replace each element:  -->\n [(1-0),(1- -1),(1-0),(1-0),(1- -1),(1- -1),(1- -1),(1- -1),(1-1),(1- -1)]\n--> [1, 2, 1, 1, 2, 2, 2, 2, 0, 2]\n ```\n\n# Input/Output\n\n\n - `[input]` integer array a\n\n    The initial array.\n\n    Constraints: \n\n    `1 <= a.length <= 100`\n    \n    `-100 <= a[i] <= 100`\n\n\n - `[input]` integer `k`\n\n    non-negative number of operations.\n\n    Constraints: `0 <= k <= 100000`\n\n\n - [output] an integer array\n\n    The array after `k` operations.\n\"\"\"", "inputs": [[[-4, 0, -1, 0], 2], [[0, -1, 0, 0, -1, -1, -1, -1, 1, -1], 1], [[-1], 10000]], "outputs": [[[0, 4, 3, 4]], [[1, 2, 1, 1, 2, 2, 2, 2, 0, 2]], [[0]]], "starter_code": "def array_operations(a, n):", "canonical_solution": "def array_operations(a, n):\n    li = []\n    for i in range(n):\n        m = max(a)\n        a = [m - i for i in a]\n        if a in li:\n            if not n & 1:\n                return li[-1]\n            return a\n        li.append(a)\n    return a", "entry_point": "array_operations", "task_id": "TACO_lite/52", "input_output_examples": [[[[-4, 0, -1, 0], 2], [[0, -1, 0, 0, -1, -1, -1, -1, 1, -1], 1]], [[[0, 4, 3, 4]], [[1, 2, 1, 1, 2, 2, 2, 2, 0, 2]]]]}
{"requirement": "def cup_and_balls(b, arr):\n\"\"\"Ronny the robot is watching someone perform the Cups and Balls magic trick. The magician has one ball and three cups, he shows Ronny which cup he hides the ball under (b), he then mixes all the cups around by performing multiple two-cup switches (arr). Ronny can record the switches but can't work out where the ball is. Write a programme to help him do this. \n\nRules: \n- There will only ever be three cups.\n- Only two cups will be swapped at a time. \n- The cups and their switches will be refered to by their index in a row of three, beginning at one. So [[1,2]] means the cup at position one, is swapped with the cup at position two. \n- Arr will be an array of integers 1 - 3 organised in pairs. \n- There won't be any empty sub-arrays.\n- If arr is just an empty array b should be returned.\n\nExamples: \n\n(b) = 2, \n(arr) = [[1,2]]\n\nThe ball is under cup number : 1\n\n-------\n\n(b) = 1, \n(arr) = [[2,3],[1,2],[1,2]]\n\nThe ball is under cup number : 1\n\n-------\n\n(b) = 2, \n(arr) = [[1,3],[1,2],[2,1],[2,3]]\n\nThe ball is under cup number : 3\n\"\"\"", "inputs": [[2, [[1, 2]]], [1, [[2, 3], [1, 2], [1, 2]]], [2, [[1, 3], [1, 2], [2, 1], [2, 3]]]], "outputs": [[1], [1], [3]], "starter_code": "def cup_and_balls(b, arr):", "canonical_solution": "from functools import reduce\n\ndef cup_and_balls(b, arr):\n    return reduce(lambda x, y: y[1] if x == y[0] else y[0] if x == y[1] else x, arr, b)", "entry_point": "cup_and_balls", "task_id": "TACO_lite/53", "input_output_examples": [[[2, [[1, 2]]], [1, [[2, 3], [1, 2], [1, 2]]], [2, [[1, 3], [1, 2], [2, 1], [2, 3]]]], [[1], [1], [3]]]}
{"requirement": "def kooka_counter(laughing):\n\"\"\"A family of kookaburras are in my backyard.\n\nI can't see them all, but I can hear them!\n\n# How many kookaburras are there?\n\n\n\n\n## Hint \n\nThe trick to counting kookaburras is to listen carefully\n\n* The males go ```HaHaHa```...\n\n* The females go ```hahaha```...\n\n* And they always alternate male/female\n\n\n\n^ Kata Note : No validation is necessary; only valid input will be passed :-)\n\"\"\"", "inputs": [[""], ["hahahahaha"], ["hahahahahaHaHaHa"], ["HaHaHahahaHaHa"], ["hahahahahahahaHaHa"]], "outputs": [[0], [1], [2], [3], [2]], "starter_code": "def kooka_counter(laughing):", "canonical_solution": "import re\n\ndef kooka_counter(laughing):\n    return len(re.findall('(ha)+|(Ha)+', laughing))", "entry_point": "kooka_counter", "task_id": "TACO_lite/54", "input_output_examples": [[[""]], [[0]]]}
{"requirement": "def to_utf8_binary(string):\n\"\"\"Unicode Transformation Format – 8-bit\nAs the name suggests UTF-8 was designed to encode data in a stream of bytes.\n\nIt works by splitting the bits up in multiples of eight. This is achieved by inserting headers to mark in how many bytes the bits were split. If the bits need to be split in two, the header `110` is added as prefix leaving five bits of the byte for the rest of the data. Followed by a continuation byte.\n\nA continuation byte always start with `10` leaving six bits for data.\nFor a three-way split: the header `1110` is added with two continuation bytes and for four: `11110` with three continuation bytes. The number of ones at the start of the first byte denotes the number of bytes the data was split in.\n# Task\nYour task is to write two functions:\n1. `to_utf8_binary`: which encodes a string to a bitstring using UTF-8 encoding.\n2. `from_utf8_binary`: which does the reverse.\n\n- Layout of UTF-8 byte sequences:\n```\n# BYTES  FIRST CODE POINT  LAST CODE POINT    BYTE 1      BYTE 2      BYTE 3      BYTE 4\n    1                   0              127    0xxxxxxx  \n    2                 128             2047    110xxxxx    10xxxxxx\n    3                2048            65535    1110xxxx    10xxxxxx    10xxxxxx  \n    4               65536          1114111    11110xxx    10xxxxxx    10xxxxxx    10xxxxxx\n```\n\n# Examples\n```\nENCODE\n A  -> 1000001         -> 01000001\n 八 -> 101000101101011 -> 1110-0101 10-000101 10-101011\n \nDECODE\n 110-00010 10-100111                     -> 10100111          -> §\n 11110-000 10-010000 10-001010 10-001100 -> 10000001010001100 -> 𐊌\n```\n* Spaces and hyphens just for clarity\n- https://en.wikipedia.org/wiki/UTF-8#Encoding\n\"\"\"", "inputs": [[""], ["߿"], ["ࠀ"], ["￿"]], "outputs": [["1100001010000000"], ["1101111110111111"], ["111000001010000010000000"], ["111011111011111110111111"]], "starter_code": "def to_utf8_binary(string):", "canonical_solution": "from textwrap import wrap\n\ndef to_utf8_binary(string):\n    return ''.join((format(x, 'b').rjust(8, '0') for x in bytearray(string, 'utf-8')))\n\ndef from_utf8_binary(bitstring):\n    return bytearray([int(t, 2) for t in wrap(bitstring, 8)]).decode()", "entry_point": "to_utf8_binary", "task_id": "TACO_lite/55", "input_output_examples": [[["A"], ["八"], ["1100001010100111"], ["11110000100100001000101010001100"]], [["01000001"], ["111001011000010110101011"], ["10100111"], ["10000001010001100"]]]}
{"requirement": "def min_and_max(l, d, x):\n\"\"\"# Task\n You are given three integers `l, d and x`. Your task is:\n```\n• determine the minimal integer n \n    such that l ≤ n ≤ d, and the sum of its digits equals x.\n• determine the maximal integer m \n    such that l ≤ m ≤ d, and the sum of its digits equals x.\n```\nIt is guaranteed that such numbers always exist.\n\n# Input/Output\n\n\n - `[input]` integer `l`\n\n - `[input]` integer `d`\n\n  `1 ≤ l ≤ d ≤ 10000.`\n\n\n - `[input]` integer `x`\n\n  `1 ≤ x ≤ 36`\n\n\n - `[output]` an integer array\n\n  Array of two elements, where the first element is `n`, and the second one is `m`.\n\n\n# Example\n\n For `l = 500, d = 505, x = 10`, the output should be `[505, 505]`.\n \n For `l = 100, d = 200, x = 10`, the output should be `[109, 190]`.\n\"\"\"", "inputs": [[100, 200, 10], [123, 456, 5], [99, 501, 5], [99, 234, 1], [99, 234, 19], [99, 5001, 27], [99, 5001, 28], [2000, 7000, 3]], "outputs": [[[109, 190]], [[131, 410]], [[104, 500]], [[100, 100]], [[199, 199]], [[999, 4995]], [[1999, 4996]], [[2001, 3000]]], "starter_code": "def min_and_max(l, d, x):", "canonical_solution": "def min_and_max(l, d, x):\n    listOfCorect = [num for num in list(range(l, d + 1)) if sum(map(int, str(num))) == x]\n    return [min(listOfCorect), max(listOfCorect)]", "entry_point": "min_and_max", "task_id": "TACO_lite/56", "input_output_examples": [[[500, 505, 10], [100, 200, 10]], [[505, 505], [109, 190]]]}
{"requirement": "def eval_object(v):\n\"\"\"Switch/Case - Bug Fixing #6\n\nOh no! Timmy's evalObject function doesn't work. He uses Switch/Cases to evaluate the given properties of an object, can you fix timmy's function?\n\"\"\"", "inputs": [[{"a": 1, "b": 1, "operation": "+"}], [{"a": 1, "b": 1, "operation": "-"}], [{"a": 1, "b": 1, "operation": "/"}], [{"a": 1, "b": 1, "operation": "*"}], [{"a": 1, "b": 1, "operation": "%"}], [{"a": 1, "b": 1, "operation": "**"}]], "outputs": [[2], [0], [1], [1], [0], [1]], "starter_code": "def eval_object(v):", "canonical_solution": "def eval_object(v):\n    return {'+': v['a'] + v['b'], '-': v['a'] - v['b'], '/': v['a'] / v['b'], '*': v['a'] * v['b'], '%': v['a'] % v['b'], '**': v['a'] ** v['b']}.get(v['operation'])", "entry_point": "eval_object", "task_id": "TACO_lite/57", "input_output_examples": [[[{"a": 1, "b": 1, "operation": "+"}]], [[2]]]}
{"requirement": "def two_decimal_places(n):\n\"\"\"Each number should be formatted that it is rounded to two decimal places. You don't need to check whether the input is a valid number because only valid numbers are used in the tests.\n```\nExample:    \n5.5589 is rounded 5.56   \n3.3424 is rounded 3.34\n```\n\"\"\"", "inputs": [[4.659725356], [173735326.37837327], [4.653725356]], "outputs": [[4.66], [173735326.38], [4.65]], "starter_code": "def two_decimal_places(n):", "canonical_solution": "def two_decimal_places(n):\n    return round(n, 2)", "entry_point": "two_decimal_places", "task_id": "TACO_lite/58", "input_output_examples": [[[5.5589], [3.3424]], [[5.56], [3.34]]]}
{"requirement": "def cost_of_carpet(room_length, room_width, roll_width, roll_cost):\n\"\"\"A carpet shop sells carpets in different varieties. Each carpet can come in a different roll width and can have a different price per square meter. \n\nWrite a function `cost_of_carpet` which calculates the cost (rounded to 2 decimal places) of carpeting a room, following these constraints:\n\n* The carpeting has to be done in one unique piece. If not possible, retrun `\"error\"`.\n* The shop sells any length of a roll of carpets, but always with a full width.\n* The cost has to be minimal.\n* The length of the room passed as argument can sometimes be shorter than its width (because we define these relatively to the position of the door in the room).\n* A length or width equal to zero is considered invalid, return `\"error\"` if it occurs.\n\n\nINPUTS:\n\n`room_width`, `room_length`, `roll_width`, `roll_cost` as floats.\n\nOUTPUT:\n\n`\"error\"` or the minimal cost of the room carpeting, rounded to two decimal places.\n\"\"\"", "inputs": [[3, 5, 4, 10], [4, 5, 4, 10], [0, 0, 4, 10], [3, 2, 4, 10], [3.9, 2, 4, 10], [5, 6, 4, 10], [3, 2, 4, 0], [3, 2, 2, 10]], "outputs": [[200], [200], ["error"], [80], [80], ["error"], [0], [60]], "starter_code": "def cost_of_carpet(room_length, room_width, roll_width, roll_cost):", "canonical_solution": "def cost_of_carpet(room_length, room_width, roll_width, roll_cost):\n    x, y = sorted((room_length, room_width))\n    if y == 0 or x > roll_width:\n        return 'error'\n    if y < roll_width:\n        return round(x * roll_width * roll_cost, 2)\n    return round(y * roll_width * roll_cost, 2)", "entry_point": "cost_of_carpet", "task_id": "TACO_lite/59", "input_output_examples": [[[3, 5, 4, 10]], [[200]]]}
{"requirement": "def sorter(textbooks):\n\"\"\"HELP! Jason can't find his textbook! It is two days before the test date, and Jason's textbooks are all out of order! Help him sort a list (ArrayList in java) full of textbooks by subject, so he can study before the test.\n\nThe sorting should **NOT** be case sensitive\n\"\"\"", "inputs": [[["Algebra", "History", "Geometry", "English"]], [["Algebra", "history", "Geometry", "english"]], [["Alg#bra", "$istory", "Geom^try", "**english"]]], "outputs": [[["Algebra", "English", "Geometry", "History"]], [["Algebra", "english", "Geometry", "history"]], [["$istory", "**english", "Alg#bra", "Geom^try"]]], "starter_code": "def sorter(textbooks):", "canonical_solution": "def sorter(textbooks):\n    return sorted(textbooks, key=str.lower)", "entry_point": "sorter", "task_id": "TACO_lite/60", "input_output_examples": [[[["Algebra", "History", "Geometry", "English"]]], [[["Algebra", "English", "Geometry", "History"]]]]}
{"requirement": "def number_increasing(n):\n\"\"\"# Task\n Initially a number `1` is written on a board. It is possible to do the following operations with it:\n```\nmultiply the number by 3;\nincrease the number by 5.```\nYour task is to determine that using this two operations step by step, is it possible to obtain number `n`?\n\n# Example\n\n For `n = 1`, the result should be `true`.\n \n `1 = 1`\n \n For `n = 2`, the result should be `false`.\n \n For `n = 3`, the result should be `true`.\n \n `1 x 3 = 3`\n \n For `n = 4`, the result should be `false`.\n \n For `n = 5`, the result should be `false`.\n \n For `n = 6`, the result should be `true`.\n \n `1 + 5 = 6`\n \n For `n = 18`, the result should be `true`.\n \n `1 + 5 = 6  --> 6 x 3 = 18`\n \n For `n = 32`, the result should be `true`.\n \n `1 x 3 x 3 x 3 = 27  --> 27 + 5 = 32`\n \n For `n = 100`, the result should be `false`.\n \n For `n = 101`, the result should be `true`.\n \n `1 + 5 + 5 + 5 ... +5 = 101`\n \n# Input / Output\n\n\n - `[input]` integer n\n\n  positive integer, n ≤ 100000\n\n\n - `[output]` a boolean value\n\n  `true` if N can be obtained using given operations, `false` otherwise.\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6], [100], [101], [12345], [54321]], "outputs": [[true], [false], [true], [false], [false], [true], [false], [true], [false], [true]], "starter_code": "def number_increasing(n):", "canonical_solution": "def number_increasing(n):\n    return n not in {2, 4, 7, 12, 17, 22} and n % 5 != 0", "entry_point": "number_increasing", "task_id": "TACO_lite/61", "input_output_examples": [[[1], [2], [3], [4], [5], [6], [18], [32], [100], [101]], [[true], [false], [true], [false], [false], [true], [true], [true], [false], [true]]]}
{"requirement": "def add(*args):\n\"\"\"This kata is all about adding numbers.\n\nYou will create a function named add. It will return the sum of all the arguments. Sounds easy, doesn't it?\n\nWell Here's the Twist. The inputs will gradually decrease with their index as parameter to the function.\n\n```python\n  add(3,4,6) #returns (3/1)+(4/2)+(6/3)=7\n```\n\nRemember the function will return 0 if no arguments are passed and it must round the result if sum is a float.\n\nExample\n```python\n  add() #=> 0\n  add(1,2,3) #=> 3\n  add(1,4,-6,20) #=> 6\n```\n\nCheck my another kata here!! http://www.codewars.com/kata/555b73a81a6285b6ce000047\n\"\"\"", "inputs": [[100, 200, 300], [2], [4, -3, -2], [-1, -2, -3, -4]], "outputs": [[300], [2], [2], [-4]], "starter_code": "def add(*args):", "canonical_solution": "def add(*args):\n    return int(round(sum((float(a) / i for i, a in enumerate(args, 1)))))", "entry_point": "add", "task_id": "TACO_lite/62", "input_output_examples": [[[3, 4, 6], [], [1, 2, 3], [1, 4, -6, 20]], [[7], [0], [3], [6]]]}
{"requirement": "def solve(arr):\n\"\"\"In this Kata, you will be given an array of integers whose elements have both a negative and a positive value, except for one integer that is either only negative or only positive. Your task will be to find that integer. \n\nExamples:\n\n`[1, -1, 2, -2, 3] => 3`\n\n`3` has no matching negative appearance\n\n`[-3, 1, 2, 3, -1, -4, -2] => -4`\n\n`-4` has no matching positive appearance\n\n`[1, -1, 2, -2, 3, 3] => 3`\n\n(the only-positive or only-negative integer may appear more than once)\n\nGood luck!\n\"\"\"", "inputs": [[[1, -1, 2, -2, 3]], [[-3, 1, 2, 3, -1, -4, -2]], [[1, -1, 2, -2, 3, 3]], [[-110, 110, -38, -38, -62, 62, -38, -38, -38]], [[-9, -105, -9, -9, -9, -9, 105]]], "outputs": [[3], [-4], [3], [-38], [-9]], "starter_code": "def solve(arr):", "canonical_solution": "def solve(arr):\n    return sum(set(arr))", "entry_point": "solve", "task_id": "TACO_lite/63", "input_output_examples": [[[[1, -1, 2, -2, 3]], [[-3, 1, 2, 3, -1, -4, -2]], [[1, -1, 2, -2, 3, 3]]], [[3], [-4], [3]]]}
{"requirement": "def enough(cap, on, wait):\n\"\"\"### The Story:\nBob is working as a bus driver. However, he has become extremely popular amongst the city's residents. With so many passengers wanting to get aboard his bus, he sometimes has to face the problem of not enough space left on the bus! He wants you to write a simple program telling him if he will be able to fit all the passengers.\n\n### Task Overview:\n\nYou have to write a function that accepts three parameters: \n* `cap` is the amount of people the bus can hold excluding the driver.\n* `on` is the number of people on the bus.\n* `wait` is the number of people waiting to get on to the bus. \n\nIf there is enough space, return 0, and if there isn't, return the number of passengers he can't take.\n\n### Usage Examples:\n\n```python\nenough(10, 5, 5)\n0 # He can fit all 5 passengers\nenough(100, 60, 50)\n10 # He can't fit 10 out of 50 waiting\n```\n\n```if:csharp\nDocumentation:\nKata.Enough Method (Int32, Int32, Int32)\n\nReturns the number of passengers the bus cannot fit, or 0 if the bus can fit every passenger.\n\nSyntax\n\n\npublic\nstatic\nint Enough(\nint cap,\n    int on,\nint wait\n    )\n  \n\n\n\nParameters\n\ncap\n\nType: System.Int32\nThe amount of people that can fit on the bus excluding the driver.\n\non\n\nType: System.Int32\nThe amount of people on the bus excluding the driver.\n\nwait\n\nType: System.Int32\nThe amount of people waiting to enter the bus.\n\nReturn Value\n\nType: System.Int32\n  An integer representing how many passengers cannot fit on the bus, or 0 if every passenger can fit on the bus.\n\n```\n\"\"\"", "inputs": [[10, 5, 5], [100, 60, 50], [20, 5, 5]], "outputs": [[0], [10], [0]], "starter_code": "def enough(cap, on, wait):", "canonical_solution": "def enough(cap, on, wait):\n    return max(0, wait - (cap - on))", "entry_point": "enough", "task_id": "TACO_lite/64", "input_output_examples": [[[10, 5, 5], [100, 60, 50]], [[0], [10]]]}
{"requirement": "def unlucky_number(n):\n\"\"\"# Task\n The number is considered to be `unlucky` if it does not have digits `4` and `7` and is divisible by `13`. Please count all unlucky numbers not greater than `n`.\n\n# Example\n\n For `n = 20`, the result should be `2` (numbers `0 and 13`).\n \n For `n = 100`, the result should be `7` (numbers `0, 13, 26, 39, 52, 65, and 91`)\n \n# Input/Output\n\n\n - `[input]` integer `n`\n\n `1 ≤ n ≤ 10^8(10^6 in Python)`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[20], [100], [1000], [1000000]], "outputs": [[2], [7], [40], [20182]], "starter_code": "def unlucky_number(n):", "canonical_solution": "def unlucky_number(n):\n    return sum((not ('4' in s or '7' in s) for s in map(str, range(0, n + 1, 13))))", "entry_point": "unlucky_number", "task_id": "TACO_lite/65", "input_output_examples": [[[20], [100]], [[2], [7]]]}
{"requirement": "def beeramid(bonus, price):\n\"\"\"Let's pretend your company just hired your friend from college and paid you a referral bonus. Awesome! To celebrate, you're taking your team out to the terrible dive bar next door and using the referral bonus to buy, and build, the largest three-dimensional beer can pyramid you can. And then probably drink those beers, because let's pretend it's Friday too. \n\nA beer can pyramid will square the number of cans in each level - 1 can in the top level, 4 in the second, 9 in the next, 16, 25... \n\nComplete the beeramid function to return the number of **complete** levels of a beer can pyramid you can make, given the parameters of: \n\n1) your referral bonus, and\n\n2) the price of a beer can\n\nFor example:\n\"\"\"", "inputs": [[9, 2], [10, 2], [11, 2], [21, 1.5], [454, 5], [455, 5], [4, 4], [3, 4], [0, 4], [-1, 4]], "outputs": [[1], [2], [2], [3], [5], [6], [1], [0], [0], [0]], "starter_code": "def beeramid(bonus, price):", "canonical_solution": "def beeramid(bonus, price):\n    beers = bonus // price\n    levels = 0\n    while beers >= (levels + 1) ** 2:\n        levels += 1\n        beers -= levels ** 2\n    return levels", "entry_point": "beeramid", "task_id": "TACO_lite/66", "input_output_examples": [[[9, 2]], [[1]]]}
{"requirement": "def button_sequences(seqR, seqB):\n\"\"\"I have started studying electronics recently, and I came up with a circuit made up of 2 LEDs and 3 buttons.\n\nHere 's how it works: 2 buttons (`red` and `blue`) are connected to the LEDs (`red` and `blue` respectively). Buttons pressing pattern will be remembered and represented through the LEDs when the third button is pressed.\n\n - Only one LED can blink at a time.\n - The LED will only blink once even if the button is held down.\n - The button must be released to be pressed again.\n - If a button is pressed while the other button is being held down, it will be ignored.\n - If two buttons are pressed simultaneously, the red button will be preferred.\n - If a button is released while the other is being held down, the other 's LED will blink.\n - `0` is up and `1` is down.\n - The two inputs will always have the same length.\n \nHere is an example:\n\n```Python\nRed:  \"10011010\"\nBlue: \"10110111\"\n#=> \"RBRB\"\n\nRed:  \"01001000\"\nBlue: \"01011100\"\n#=> \"RB\"\n\nRed:  \"01101000\"\nBlue: \"00111000\"\n#=> \"RB\"\n```\n\nPS:\n\nThis is my first time making a kata, so there may be some errors. \nYou may report to me if the description is too confusing. \nSorry for my poor grammar.\n\"\"\"", "inputs": [["10011010", "10110111"], ["01001000", "01011100"], ["00010100", "01011100"], ["10101010", "01010101"], ["11011011", "11111011"]], "outputs": [["RBRB"], ["RB"], ["BRB"], ["RBRBRBRB"], ["RBR"]], "starter_code": "def button_sequences(seqR, seqB):", "canonical_solution": "def button_sequences(seqR, seqB):\n    pattern, state = ('', '')\n    toBool = lambda seq: [i == '1' for i in seq]\n    for red, blue in zip(toBool(seqR), toBool(seqB)):\n        if red and state == 'R' or (blue and state == 'B'):\n            continue\n        state = 'R' if red else 'B' if blue else ''\n        pattern += state\n    return pattern", "entry_point": "button_sequences", "task_id": "TACO_lite/67", "input_output_examples": [[["10011010", "10110111"], ["01001000", "01011100"], ["01101000", "00111000"]], [["RBRB"], ["RB"], ["RB"]]]}
{"requirement": "def group_size(S, D):\n\"\"\"# Your Task\nThe city of Darkishland has a strange hotel with infinite rooms. The groups that come to this hotel follow the following rules:\n\n* At the same time only members of one group can rent the hotel.\n\n* Each group comes in the morning of the check-in day and leaves the hotel in the evening of the check-out day.\n\n* Another group comes in the very next morning after the previous group has left the hotel.\n\n* A very important property of the incoming group is that it has one more member than its previous group unless it is the starting group. You will be given the number of members of the starting group.\n\n* A group with n members stays for n days in the hotel. For example, if a group of four members comes on 1st August in the morning, it will leave the hotel on 4th August in the evening and the next group of five members will come on 5th August in the morning and stay for five days and so on.\n\nGiven the initial group size you will have to find the group size staying in the hotel on a specified day.\n# Input\nS denotes the initial size of the group and D denotes that you will have to find the group size staying in the hotel on D-th day (starting from 1). A group size S\nmeans that on the first day a group of S members comes to the hotel and stays for S days. Then comes a group of S + 1 members according to the previously described rules and so on.\n\"\"\"", "inputs": [[1, 6], [3, 10], [3, 14], [10, 1000], [1, 1000], [5, 4], [5, 7], [10000, 1000000000000000], [2, 20000000000000], [10, 900000000000000000], [34545, 565], [234234, 6577], [10, 10]], "outputs": [[3], [5], [6], [46], [45], [5], [6], [44721361], [6324555], [1341640786], [34545], [234234], [10]], "starter_code": "def group_size(S, D):", "canonical_solution": "from math import floor\n\ndef group_size(S, D):\n    return floor((2 * D + S * (S - 1)) ** 0.5 + 0.5)", "entry_point": "group_size", "task_id": "TACO_lite/68", "input_output_examples": [[[1, 6]], [[3]]]}
{"requirement": "def valid_mersenne(n):\n\"\"\"A [Mersenne prime](https://en.wikipedia.org/wiki/Mersenne_prime) is a prime number that can be represented as:\nMn = 2^(n) - 1. Therefore, every Mersenne prime is one less than a power of two. \n\nWrite a function that will return whether the given integer `n` will produce a Mersenne prime or not.\n\nThe tests will check random integers up to 2000.\n\"\"\"", "inputs": [[2], [3], [5], [7], [11], [13], [17], [19], [21], [23], [31], [49], [61], [89], [107], [127], [221], [521], [607], [1279]], "outputs": [[true], [true], [true], [true], [false], [true], [true], [true], [false], [false], [true], [false], [true], [true], [true], [true], [false], [true], [true], [true]], "starter_code": "def valid_mersenne(n):", "canonical_solution": "def valid_mersenne(n):\n    return n in {2, 3, 5, 7, 13, 17, 19, 31, 61, 89, 107, 127, 521, 607, 1279}", "entry_point": "valid_mersenne", "task_id": "TACO_lite/69", "input_output_examples": [[[2]], [[true]]]}
{"requirement": "def am_i_afraid(day, num):\n\"\"\"I've got a crazy mental illness.\nI dislike numbers a lot. But it's a little complicated:\nThe number I'm afraid of depends on which day of the week it is...\nThis is a concrete description of my mental illness:\n\nMonday     --> 12\n\nTuesday    --> numbers greater than 95\n\nWednesday  --> 34\n\nThursday   --> 0\n\nFriday     --> numbers divisible by 2\n\nSaturday   --> 56\n\nSunday     --> 666 or -666\n\n\nWrite a function which takes a string (day of the week) and an integer (number to be tested) so it tells the doctor if I'm afraid or not. (return a boolean)\n\"\"\"", "inputs": [["Monday", 13], ["Monday", 12], ["Tuesday", 0], ["Tuesday", 100], ["Tuesday", 95], ["Wednesday", 35], ["Wednesday", 34], ["Thursday", 2], ["Thursday", 0], ["Friday", 5], ["Friday", 4], ["Saturday", 55], ["Saturday", 56], ["Sunday", 55], ["Sunday", 666], ["Sunday", -666]], "outputs": [[false], [true], [false], [true], [false], [false], [true], [false], [true], [false], [true], [false], [true], [false], [true], [true]], "starter_code": "def am_i_afraid(day, num):", "canonical_solution": "def am_i_afraid(day, num):\n    return {'Monday': num == 12, 'Tuesday': num > 95, 'Wednesday': num == 34, 'Thursday': num == 0, 'Friday': num % 2 == 0, 'Saturday': num == 56, 'Sunday': num == 666 or num == -666}[day]", "entry_point": "am_i_afraid", "task_id": "TACO_lite/70", "input_output_examples": [[["Monday", 13]], [[false]]]}
{"requirement": "def insert_missing_letters(s):\n\"\"\"You have to create a function,named `insertMissingLetters`, that takes in a `string` and outputs the same string processed in a particular way.\n\nThe function should insert **only after the first occurrence** of each character of the input string, all the **alphabet letters** that:\n\n-**are NOT** in the original string  \n-**come after** the letter of the string you are processing  \n\nEach added letter should be in `uppercase`, the letters of the original string will always be in `lowercase`.\n\n\nExample:  \n\n\n`input`: \"holly\"  \n\n`missing letters`: \"a,b,c,d,e,f,g,i,j,k,m,n,p,q,r,s,t,u,v,w,x,z\"  \n\n`output`: \"hIJKMNPQRSTUVWXZoPQRSTUVWXZlMNPQRSTUVWXZlyZ\"  \n\n\nYou don't need to validate input, the input string will always contain a certain amount of lowercase letters  (min 1 / max 50).\n\"\"\"", "inputs": [["hello"], ["abcdefghijklmnopqrstuvwxyz"], ["hellllllllllllooooo"], ["pixxa"], ["xpixax"], ["z"]], "outputs": [["hIJKMNPQRSTUVWXYZeFGIJKMNPQRSTUVWXYZlMNPQRSTUVWXYZloPQRSTUVWXYZ"], ["abcdefghijklmnopqrstuvwxyz"], ["hIJKMNPQRSTUVWXYZeFGIJKMNPQRSTUVWXYZlMNPQRSTUVWXYZllllllllllloPQRSTUVWXYZoooo"], ["pQRSTUVWYZiJKLMNOQRSTUVWYZxYZxaBCDEFGHJKLMNOQRSTUVWYZ"], ["xYZpQRSTUVWYZiJKLMNOQRSTUVWYZxaBCDEFGHJKLMNOQRSTUVWYZx"], ["z"]], "starter_code": "def insert_missing_letters(s):", "canonical_solution": "def insert_missing_letters(s):\n    s, lst, found, inside = (s.lower(), [], set(), set(s.upper()))\n    for a in s:\n        lst.append(a if a in found else a + ''.join((c for c in map(chr, range(ord(a) - 31, 91)) if c not in inside)))\n        found.add(a)\n    return ''.join(lst)", "entry_point": "insert_missing_letters", "task_id": "TACO_lite/71", "input_output_examples": [[["holly"], ["hello"]], [["hIJKMNPQRSTUVWXZoPQRSTUVWXZlMNPQRSTUVWXZlyZ"], ["hIJKMNPQRSTUVWXYZeFGIJKMNPQRSTUVWXYZlMNPQRSTUVWXYZloPQRSTUVWXYZ"]]]}
{"requirement": "def solve(s):\n\"\"\"In elementary arithmetic a \"carry\" is a digit that is transferred from one column of digits to another column of more significant digits during a calculation algorithm.\n\nThis Kata is about determining the number of carries performed during the addition of multi-digit numbers.\n\nYou will receive an input string containing a set of pairs of numbers formatted as follows:\n\n```\n123 456\n555 555\n123 594\n```\n\nAnd your output should be a string formatted as follows:\n\n```\nNo carry operation\n1 carry operations\n3 carry operations\n```\n\n###Some Assumptions\n\n- Assume that numbers can be of any length.\n- But both numbers in the pair will be of the same length.\n- Although not all the numbers in the set need to be of the same length.\n- If a number is shorter, it will be zero-padded.\n- The input may contain any arbitrary number of pairs.\n\"\"\"", "inputs": [["123 456\n555 555\n123 594"], ["321 679\n098 805\n123 867"], ["123 457\n631 372\n999 111"], ["123 457\n123 456\n654 312\n999 000\n123 457"], ["1 9\n123456789 111111101\n01 09\n11 09\n123 457"], ["99 99"]], "outputs": [["No carry operation\n3 carry operations\n1 carry operations"], ["3 carry operations\n2 carry operations\n1 carry operations"], ["1 carry operations\n2 carry operations\n3 carry operations"], ["1 carry operations\nNo carry operation\nNo carry operation\nNo carry operation\n1 carry operations"], ["1 carry operations\n1 carry operations\n1 carry operations\n1 carry operations\n1 carry operations"], ["2 carry operations"]], "starter_code": "def solve(s):", "canonical_solution": "def solve(s):\n    ans = []\n    for ab in s.split('\\n'):\n        carry, carried = (0, 0)\n        for a, b in zip(*map(lambda ss: map(int, ss[::-1]), ab.split())):\n            carried += a + b\n            carry += carried > 9\n            carried //= 10\n        ans.append(carry)\n    return '\\n'.join(('No carry operation' if not c else '%d carry operations' % c for c in ans))", "entry_point": "solve", "task_id": "TACO_lite/72", "input_output_examples": [[["123 456\n555 555\n123 594"]], [["No carry operation\n3 carry operations\n1 carry operations"]]]}
{"requirement": "def reverser(sentence):\n\"\"\"Take a sentence (string) and reverse each word in the sentence. Do not reverse the order of the words, just the letters in each word.\n\nIf there is punctuation, it should be interpreted as a regular character; no special rules.\n\nIf there is spacing before/after the input string, leave them there.\n\nString will not be empty.\n\n## Examples\n\n```\n\"Hi mom\" => \"iH mom\"\n\" A fun little challenge! \" => \" A nuf elttil !egnellahc \"\n```\n\"\"\"", "inputs": [["How now brown cow"], ["racecar"], ["Hi mom"], [" "], ["  "], ["go away"], ["I like noodles"], ["The red pen wrote on the wall"], ["Green trucks drive fast"], ["Pink trucks drive slow"]], "outputs": [["woH won nworb woc"], ["racecar"], ["iH mom"], [" "], ["  "], ["og yawa"], ["I ekil seldoon"], ["ehT der nep etorw no eht llaw"], ["neerG skcurt evird tsaf"], ["kniP skcurt evird wols"]], "starter_code": "def reverser(sentence):", "canonical_solution": "def reverser(sentence):\n    return ' '.join((i[::-1] for i in sentence.split(' ')))", "entry_point": "reverser", "task_id": "TACO_lite/73", "input_output_examples": [[["Hi mom"], [" A fun little challenge! "], ["How now brown cow"]], [["iH mom"], [" A nuf elttil !egnellahc "], ["woH won nworb woc"]]]}
{"requirement": "def mean_vs_median(numbers):\n\"\"\"Your goal is to implement the method **meanVsMedian** which accepts an *odd-length* array of integers and returns one of the following:\n\n* 'mean' - in case **mean** value is **larger than** median value\n* 'median' - in case **median** value is **larger than** mean value\n* 'same' - in case both mean and median share the **same value**\n\nReminder: [Median](https://en.wikipedia.org/wiki/Median)\n\nArray will always be valid (odd-length >= 3)\n\"\"\"", "inputs": [[[1, 1, 1]], [[1, 2, 37]], [[7, 14, -70]], [[-10, 20, 5]]], "outputs": [["same"], ["mean"], ["median"], ["same"]], "starter_code": "def mean_vs_median(numbers):", "canonical_solution": "from numpy import mean, median\n\ndef mean_vs_median(numbers):\n    if mean(numbers) > median(numbers):\n        return 'mean'\n    elif mean(numbers) < median(numbers):\n        return 'median'\n    else:\n        return 'same'", "entry_point": "mean_vs_median", "task_id": "TACO_lite/74", "input_output_examples": [[[[1, 1, 1]]], [["same"]]]}
{"requirement": "def swap(s, n):\n\"\"\"Your job is to change the given string `s` using a non-negative integer `n`.\n\nEach bit in `n` will specify whether or not to swap the case for each alphabetic character in `s`: if the bit is `1`, swap the case; if its `0`, leave it as is. When you finished with the last bit of `n`, start again with the first bit.\n\nYou should skip the checking of bits when a non-alphabetic character is encountered, but they should be preserved in their original positions.\n\n## Examples\n\n```\nswap('Hello world!', 11)  -->  'heLLO wORLd!'\n```\n...because `11` is `1011` in binary, so the 1st, 3rd, 4th, 5th, 7th, 8th and 9th alphabetical characters have to be swapped:\n```\nH e l l o  w o r l d !\n1 0 1 1 1  0 1 1 1 0\n^   ^ ^ ^    ^ ^ ^\n```\n\nMore examples:\n```\nswap(\"gOOd MOrniNg\", 7864)  -->  \"GooD MorNIng\"\nswap('', 11345)  -->  ''\nswap('the lord of the rings', 0)  -->  'the lord of the rings'\n```\n\"\"\"", "inputs": [["Hello world!", 11], ["the quick broWn fox leapt over the fence", 9], ["eVerybody likes ice cReam", 85], ["gOOd MOrniNg", 7864], ["how are you today?", 12345], ["the lord of the rings", 0], ["", 11345]], "outputs": [["heLLO wORLd!"], ["The QUicK BrowN foX LeaPT ovER thE FenCE"], ["EVErYbODy LiKeS IcE creAM"], ["GooD MorNIng"], ["HOw are yoU TOdaY?"], ["the lord of the rings"], [""]], "starter_code": "def swap(s, n):", "canonical_solution": "from itertools import cycle\n\ndef swap(s, n):\n    b = cycle(bin(n)[2:])\n    return ''.join((c.swapcase() if c.isalpha() and next(b) == '1' else c for c in s))", "entry_point": "swap", "task_id": "TACO_lite/75", "input_output_examples": [[["Hello world!", 11], ["gOOd MOrniNg", 7864], ["", 11345], ["the lord of the rings", 0]], [["heLLO wORLd!"], ["GooD MorNIng"], [""], ["the lord of the rings"]]]}
{"requirement": "def convert(number):\n\"\"\"You have to create a function that converts integer given as string into ASCII uppercase letters.\n\nAll ASCII characters have their numerical order in table. \n\nFor example,\n\n```\nfrom ASCII table, character of number 65 is \"A\".\n```\n\nNumbers will be next to each other, So you have to split given number to two digit long integers.\n\nFor example, \n\n```\n'658776' to [65, 87, 76] and then turn it into 'AWL'.\n```\n\"\"\"", "inputs": [["65"], ["656667"], ["676584"], ["73327673756932858080698267658369"], ["32327332327679866932328380656769833232"], ["84726982693273833278793270857832737832657889327984726982326765836983"]], "outputs": [["A"], ["ABC"], ["CAT"], ["I LIKE UPPERCASE"], ["  I  LOVE  SPACES  "], ["THERE IS NO FUN IN ANY OTHER CASES"]], "starter_code": "def convert(number):", "canonical_solution": "def convert(number):\n    return ''.join((chr(int(number[a:a + 2])) for a in range(0, len(number), 2)))", "entry_point": "convert", "task_id": "TACO_lite/76", "input_output_examples": [[["65"], ["658776"]], [["A"], ["AWL"]]]}
{"requirement": "def queue(queuers, pos):\n\"\"\"You managed to send your friend to queue for tickets in your stead, but there is a catch: he will get there only if you tell him how much that is going to take. And everybody can only take one ticket at a time, then they go back in the last position of the queue if they need more (or go home if they are fine).\n\nEach ticket takes one minutes to emit, the queue is well disciplined, [Brit-style](https://www.codewars.com/kata/english-beggars), and so it moves smoothly, with no waste of time.\n\nYou will be given an array/list/vector with all the people queuing and the *initial* position of your buddy, so for example, knowing that your friend is in the third position (that we will consider equal to the index, `2`: he is the guy that wants 3 tickets!) and the initial queue is `[2, 5, 3, 4, 6]`.\n\nThe first dude gets his ticket and the queue goes now like this `[5, 3, 4, 6, 1]`, then `[3, 4, 6, 1, 4]` and so on. In the end, our buddy will be queuing for 12 minutes, true story!\n\nBuild a function to compute it, resting assured that only positive integers are going to be there and you will be always given a valid index; but we also want to go to pretty popular events, so be ready for big queues with people getting plenty of tickets.\n\n[[hard core version](https://www.codewars.com/kata/queue-time-counter-hard-core-version/solutions/javascript) now available if you don't want the \"easy\" kata!]\n\"\"\"", "inputs": [[[2, 5, 3, 6, 4], 0], [[2, 5, 3, 6, 4], 1], [[2, 5, 3, 6, 4], 2], [[2, 5, 3, 6, 4], 3], [[2, 5, 3, 6, 4], 4]], "outputs": [[6], [18], [12], [20], [17]], "starter_code": "def queue(queuers, pos):", "canonical_solution": "def queue(queuers, pos):\n    return sum((min(queuer, queuers[pos] - (place > pos)) for place, queuer in enumerate(queuers)))", "entry_point": "queue", "task_id": "TACO_lite/77", "input_output_examples": [[[[2, 5, 3, 4, 6], 2]], [[12]]]}
{"requirement": "def operator_insertor(n):\n\"\"\"An expression is formed by taking the digits 1 to 9 in numerical order and then inserting into each gap between the numbers either a plus sign or a minus sign or neither.\n\nYour task is to write a method which takes one parameter and returns the **smallest possible number** of plus and minus signs necessary to form such an expression which equals the input.\n\n**Note:** All digits from 1-9 must be used exactly once.\n\nIf there is no possible expression that evaluates to the input, then return `null/nil/None`.\n\n~~~if:haskell\n`eval :: String -> Int` is available in `Preloaded` for your convenience.\n~~~\n\nThere are 50 random tests with upper bound of the input = 1000.\n\n\n## Examples\n\nWhen the input is 100, you need to return `3`, since that is the minimum number of signs required, because: 123 - 45 - 67 + 89 = 100 (3 operators in total).\n\nMore examples:\n```\n 11  -->  5  #  1 + 2 + 34 + 56 + 7 - 89 = 11\n100  -->  3  #  123 - 45 - 67 + 89 = 100\n766  -->  4  #  1 - 2 + 34 - 56 + 789 = 766\n160  -->  -  #  no solution possible\n```\n\nInspired by a [puzzle on BBC Radio 4](https://www.bbc.co.uk/programmes/p057wxwl) (which is unfortunately not available anymore)\n\"\"\"", "inputs": [[11], [100], [766], [160], [70], [389]], "outputs": [[5], [3], [4], [null], [6], [2]], "starter_code": "def operator_insertor(n):", "canonical_solution": "from itertools import product\n\ndef operator_insertor(n):\n    result = []\n    for ops in product(['+', '-', ''], repeat=8):\n        expression = ''.join((a + b for a, b in zip('123456789', list(ops) + [''])))\n        res = eval(expression)\n        if res == n:\n            result.append(len(expression) - 9)\n    return min(result, default=None)", "entry_point": "operator_insertor", "task_id": "TACO_lite/78", "input_output_examples": [[[100], [11], [766], [160]], [[3], [5], [4], [null]]]}
{"requirement": "def find_missing_letter(chars):\n\"\"\"#Find the missing letter\n\nWrite a method that takes an array of consecutive (increasing) letters as input and that returns the missing letter in the array.\n\nYou will always get an valid array. And it will be always exactly one letter be missing. The length of the array will always be at least 2.\nThe array will always contain letters in only one case.\n\nExample:\n```if-not:swift\n['a','b','c','d','f'] -> 'e'\n['O','Q','R','S'] -> 'P'\n```\n\n(Use the English alphabet with 26 letters!)\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have also created other katas. Take a look if you enjoyed this kata!\n\"\"\"", "inputs": [[["a", "b", "c", "d", "f"]], [["O", "Q", "R", "S"]], [["b", "d"]]], "outputs": [["e"], ["P"], ["c"]], "starter_code": "def find_missing_letter(chars):", "canonical_solution": "def find_missing_letter(chars):\n    n = 0\n    while ord(chars[n]) == ord(chars[n + 1]) - 1:\n        n += 1\n    return chr(1 + ord(chars[n]))", "entry_point": "find_missing_letter", "task_id": "TACO_lite/79", "input_output_examples": [[[["a", "b", "c", "d", "f"]], [["O", "Q", "R", "S"]]], [["e"], ["P"]]]}
{"requirement": "def invert(lst):\n\"\"\"Given a set of numbers, return the additive inverse of each. Each positive becomes negatives, and the negatives become positives.\n\n~~~if-not:racket\n```\ninvert([1,2,3,4,5]) == [-1,-2,-3,-4,-5]\ninvert([1,-2,3,-4,5]) == [-1,2,-3,4,-5]\ninvert([]) == []\n```\n~~~\n\n```if:javascript,python,ruby,php,elixir,dart\nYou can assume that all values are integers. Do not mutate the input array/list.\n```\n\n```if:c\n### Notes:\n- All values are greater than `INT_MIN`\n- The input should be modified, not returned.\n```\n~~~if:racket\n```racket\n(invert '(1 2 3 4 5))   ; '(-1 -2 -3 -4 -5)\n(invert '(1 -2 3 -4 5)) ; '(-1 2 -3 4 -5)\n(invert '())            ; '()\n```\n~~~\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[1, -2, 3, -4, 5]], [[]], [[0]]], "outputs": [[[-1, -2, -3, -4, -5]], [[-1, 2, -3, 4, -5]], [[]], [[0]]], "starter_code": "def invert(lst):", "canonical_solution": "def invert(lst):\n    return [-x for x in lst]", "entry_point": "invert", "task_id": "TACO_lite/80", "input_output_examples": [[[[1, 2, 3, 4, 5]], [[1, -2, 3, -4, 5]], [[]]], [[[-1, -2, -3, -4, -5]], [[-1, 2, -3, 4, -5]], [[]]]]}
{"requirement": "def tops(msg):\n\"\"\"# Task\n\nWrite a function that accepts `msg` string and returns local tops of string from the highest to the lowest.  \nThe string's tops are from displaying the string in the below way:\n\n```\n\n                                         7891012\n                             TUWvXY      6     3\n                   ABCDE     S    Z      5\n           lmno    z   F     R    1      4\n     abc   k  p    v   G     Q    2      3\n.34..9 d...j  q....x   H.....P    3......2\n125678 efghi  rstuwy   IJKLMNO    45678901\n\n```\nThe next top is always 1 character higher than the previous one. \nFor the above example, the solution for the `123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123` input string is `7891012TUWvXYABCDElmnoabc34`. \n\n- When the `msg` string is empty, return an empty string.\n- The input strings may be very long. Make sure your solution has good performance.\n- The (.)dots on the sample dispaly of string are only there to help you to understand the pattern  \n\nCheck the test cases for more samples.\n\n# Series\n\n- [String tops](https://www.codewars.com/kata/59b7571bbf10a48c75000070)\n- [Square string tops](https://www.codewars.com/kata/5aa3e2b0373c2e4b420009af)\n\"\"\"", "inputs": [[""], ["abcde"], ["123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTU"], ["123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123"]], "outputs": [[""], ["cd"], ["TUABCDElmnoabc34"], ["7891012TUWvXYABCDElmnoabc34"]], "starter_code": "def tops(msg):", "canonical_solution": "def tops(msg):\n    n = len(msg)\n    res, i, j, k = ('', 2, 2, 7)\n    while i < n:\n        res = msg[i:i + j] + res\n        i, j, k = (i + k, j + 1, k + 4)\n    return res", "entry_point": "tops", "task_id": "TACO_lite/81", "input_output_examples": [[["123456789abcdefghijklmnopqrstuwyxvzABCDEFGHIJKLMNOPQRSTUWvXYZ123456789012345678910123"], [""]], [["7891012TUWvXYABCDElmnoabc34"], [""]]]}
{"requirement": "def sort_string(s):\n\"\"\"# Task\n\nYour task is to sort the characters in a string according to the following rules:\n```\n- Rule1: English alphabets are arranged from A to Z, case insensitive.\n  ie. \"Type\" --> \"epTy\"\n- Rule2: If the uppercase and lowercase of an English alphabet exist\n  at the same time, they are arranged in the order of oringal input.\n  ie. \"BabA\" --> \"aABb\"\n- Rule3: non English alphabet remain in their original position.\n  ie. \"By?e\" --> \"Be?y\"\n```\n\n# Input/Output\n\n\n`[input]` string `s`\n\nA non empty string contains any characters(English alphabets or non English alphabets).\n\n`[output]` a string\n\nA sorted string according to the rules above.\n\n# Example\n\n\nFor `s = \"cba\"`, the output should be `\"abc\"`.\n\nFor `s = \"Cba\"`, the output should be `\"abC\"`.\n\nFor `s = \"cCBbAa\"`, the output should be `\"AaBbcC\"`.\n\nFor `s = \"c b a\"`, the output should be `\"a b c\"`.\n\nFor `s = \"-c--b--a-\"`, the output should be `\"-a--b--c-\"`.\n\nFor `s = \"Codewars\"`, the output should be `\"aCdeorsw\"`.\n\"\"\"", "inputs": [["a"], ["cba"], ["Cba"], ["cCBbAa"], ["!"], ["c b a"], ["-c--b--a-"], ["cbaCcC"], ["Codewars"], [" MkWD{RB=//k-^ J@,xH Vfi uAz+$ kV _[ }a!}%pSBwn !kKB (b  q PQF +}wS  .kfU r wFNEs#NsR UVMdG"]], "outputs": [["a"], ["abc"], ["abC"], ["AaBbcC"], ["!"], ["a b c"], ["-a--b--c-"], ["abcCcC"], ["aCdeorsw"], [" AaBB{Bb=//D-^ d@,Ef FfF GHi+$ Jk _[ }k!}%kkKkM !MnN (N  p PqQ +}Rr  .RSS s suUUV#VVW wwwxz"]], "starter_code": "def sort_string(s):", "canonical_solution": "def sort_string(s):\n    a = iter(sorted((c for c in s if c.isalpha()), key=str.lower))\n    return ''.join((next(a) if c.isalpha() else c for c in s))", "entry_point": "sort_string", "task_id": "TACO_lite/82", "input_output_examples": [[["cba"], ["Cba"], ["cCBbAa"], ["c b a"], ["-c--b--a-"], ["Codewars"]], [["abc"], ["abC"], ["AaBbcC"], ["a b c"], ["-a--b--c-"], ["aCdeorsw"]]]}
{"requirement": "def max_multiple(divisor, bound):\n\"\"\"# Task\n\n**_Given_** a **_Divisor and a Bound_** , *Find the largest integer N* , Such That , \n\n# Conditions :\n\n* **_N_**  is *divisible by divisor*\n\n* **_N_**  is *less than or equal to bound* \n\n* **_N_**  is *greater than 0*.\n___\n\n# Notes \n\n* The **_parameters (divisor, bound)_** passed to the function are *only positive values* .\n* *It's guaranteed that* a **divisor is Found** .\n___\n# Input >> Output Examples \n\n```\nmaxMultiple (2,7) ==> return (6)\n```\n## Explanation: \n\n**_(6)_** is divisible by **_(2)_** , **_(6)_** is less than or equal to bound **_(7)_** , and **_(6)_** is > 0 .\n___\n```\nmaxMultiple (10,50)  ==> return (50)\n```\n## Explanation:\n\n**_(50)_** *is divisible by* **_(10)_** , **_(50)_** is less than or equal to bound **_(50)_** , and **_(50)_** is > 0 .*\n___\n```\nmaxMultiple (37,200) ==> return (185)\n```\n## Explanation:\n\n**_(185)_** is divisible by **_(37)_** , **_(185)_** is less than or equal to bound **_(200)_** , and **_(185)_** is > 0 .\n___\n___\n\n## [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\n~~~if:java\nJava's default return statement can be any `int`, a divisor **will** be found.\n~~~\n\n~~~if:nasm\n## NASM-specific notes\n\nThe function declaration is `int max_multiple(int divisor, int bound)` where the first argument is the divisor and the second one is the bound.\n~~~\n\"\"\"", "inputs": [[2, 7], [3, 10], [7, 17], [10, 50], [37, 200], [7, 100]], "outputs": [[6], [9], [14], [50], [185], [98]], "starter_code": "def max_multiple(divisor, bound):", "canonical_solution": "def max_multiple(divisor, bound):\n    return bound - bound % divisor", "entry_point": "max_multiple", "task_id": "TACO_lite/83", "input_output_examples": [[[2, 7], [10, 50], [37, 200]], [[6], [50], [185]]]}
{"requirement": "def area_of_polygon_inside_circle(r, n):\n\"\"\"Write the following function:\n\n```python\ndef area_of_polygon_inside_circle(circle_radius, number_of_sides):\n```\n\nIt should calculate the area of a regular polygon of `numberOfSides`, `number-of-sides`, or `number_of_sides` sides inside a circle of radius `circleRadius`, `circle-radius`, or `circle_radius` which passes through all the vertices of the polygon (such circle is called [**circumscribed circle** or **circumcircle**](https://en.wikipedia.org/wiki/Circumscribed_circle)). The answer should be a number rounded to 3 decimal places. \n\nInput :: Output Examples \n\n```python\narea_of_polygon_inside_circle(3, 3) # returns 11.691\n\narea_of_polygon_inside_circle(5.8, 7) # returns 92.053\n\narea_of_polygon_inside_circle(4, 5) # returns 38.042\n```\n\"\"\"", "inputs": [[3, 3], [2, 4], [2.5, 5]], "outputs": [[11.691], [8], [14.86]], "starter_code": "def area_of_polygon_inside_circle(r, n):", "canonical_solution": "from math import sin, pi\n\ndef area_of_polygon_inside_circle(r, n):\n    return round(0.5 * n * r ** 2 * sin(2 * pi / n), 3)", "entry_point": "area_of_polygon_inside_circle", "task_id": "TACO_lite/84", "input_output_examples": [[[3, 3], [5.8, 7], [4, 5]], [[11.691], [92.053], [38.042]]]}
{"requirement": "def solve(s):\n\"\"\"In this Kata, you will be given a string and your task is to determine if that string can be a palindrome if we rotate one or more characters to the left.\n\n```Haskell\nsolve(\"4455\") = true, because after 1 rotation, we get \"5445\" which is a palindrome\nsolve(\"zazcbaabc\") = true, because after 3 rotations, we get \"abczazcba\", a palindrome\n```\n\nMore examples in test cases. Input will be strings of lowercase letters or numbers only.\n\nGood luck!\n\"\"\"", "inputs": [["aaab"], ["abcabc"], ["4455"], ["zazcbaabc"], ["223456776543"], ["432612345665"], ["qponmlkjihgfeeiefghijklmnopqrsttsr"]], "outputs": [[false], [false], [true], [true], [true], [false], [false]], "starter_code": "def solve(s):", "canonical_solution": "def solve(s):\n    return any((s[i + 1:] + s[:i + 1] == s[i::-1] + s[:i:-1] for i in range(len(s))))", "entry_point": "solve", "task_id": "TACO_lite/85", "input_output_examples": [[["4455"], ["zazcbaabc"], ["aaab"]], [[true], [true], [false]]]}
{"requirement": "def pattern(n):\n\"\"\"## Task:\n\nYou have to write a function `pattern` which returns the following Pattern(See Examples) upto n number of rows. \n\n* Note:```Returning``` the pattern is not the same as ```Printing``` the pattern.\n\n### Rules/Note:\n\n* The pattern should be created using only unit digits.\n* If `n < 1` then it should return \"\" i.e. empty string.\n* `The length of each line is same`, and is equal to the number of characters in a line i.e `n`.\n* Range of Parameters (for the sake of CW Compiler) :\n  + `n ∈ (-50,150]`\n   \n### Examples:\n\n + pattern(8):\n\n       88888888\n       87777777\n       87666666\n       87655555\n       87654444\n       87654333\n       87654322\n       87654321\n       \n + pattern(17):\n   \n       77777777777777777\n       76666666666666666\n       76555555555555555\n       76544444444444444\n       76543333333333333\n       76543222222222222\n       76543211111111111\n       76543210000000000\n       76543210999999999\n       76543210988888888\n       76543210987777777\n       76543210987666666\n       76543210987655555\n       76543210987654444\n       76543210987654333\n       76543210987654322\n       76543210987654321\n\n\n[List of all my katas](\"http://www.codewars.com/users/curious_db97/authored\")\n\"\"\"", "inputs": [[1], [2], [3], [7], [17], [27], [0], [-89]], "outputs": [["1"], ["22\n21"], ["333\n322\n321"], ["7777777\n7666666\n7655555\n7654444\n7654333\n7654322\n7654321"], ["77777777777777777\n76666666666666666\n76555555555555555\n76544444444444444\n76543333333333333\n76543222222222222\n76543211111111111\n76543210000000000\n76543210999999999\n76543210988888888\n76543210987777777\n76543210987666666\n76543210987655555\n76543210987654444\n76543210987654333\n76543210987654322\n76543210987654321"], ["777777777777777777777777777\n766666666666666666666666666\n765555555555555555555555555\n765444444444444444444444444\n765433333333333333333333333\n765432222222222222222222222\n765432111111111111111111111\n765432100000000000000000000\n765432109999999999999999999\n765432109888888888888888888\n765432109877777777777777777\n765432109876666666666666666\n765432109876555555555555555\n765432109876544444444444444\n765432109876543333333333333\n765432109876543222222222222\n765432109876543211111111111\n765432109876543210000000000\n765432109876543210999999999\n765432109876543210988888888\n765432109876543210987777777\n765432109876543210987666666\n765432109876543210987655555\n765432109876543210987654444\n765432109876543210987654333\n765432109876543210987654322\n765432109876543210987654321"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join((''.join((str((n - min(j, i)) % 10) for j in range(n))) for i in range(max(n, 0))))", "entry_point": "pattern", "task_id": "TACO_lite/86", "input_output_examples": [[[8], [17]], [["88888888\n87777777\n87666666\n87655555\n87654444\n87654333\n87654322\n87654321"], ["77777777777777777\n76666666666666666\n76555555555555555\n76544444444444444\n76543333333333333\n76543222222222222\n76543211111111111\n76543210000000000\n76543210999999999\n76543210988888888\n76543210987777777\n76543210987666666\n76543210987655555\n76543210987654444\n76543210987654333\n76543210987654322\n76543210987654321"]]]}
{"requirement": "def problem(a):\n\"\"\"Make a function that returns the value multiplied by 50 and increased by 6. If the value entered is a string it should return \"Error\".\n\nNote: in `C#`, you'll always get the input as a string, so the above applies if the string isn't representing a double value.\n\"\"\"", "inputs": [["hello"], [1], [5], [0], [1.2], [3], ["RyanIsCool"]], "outputs": [["Error"], [56], [256], [6], [66], [156], ["Error"]], "starter_code": "def problem(a):", "canonical_solution": "def problem(a):\n    try:\n        return a * 50 + 6\n    except TypeError:\n        return 'Error'", "entry_point": "problem", "task_id": "TACO_lite/87", "input_output_examples": [[["hello"]], [["Error"]]]}
{"requirement": "def parse_mana_cost(mana):\n\"\"\"Implement `String#parse_mana_cost`, which parses [Magic: the Gathering mana costs](http://mtgsalvation.gamepedia.com/Mana_cost) expressed as a string and returns a `Hash` with keys being kinds of mana, and values being the numbers.\n\nDon't include any mana types equal to zero.\n\nFormat is:\n\n* optionally natural number representing total amount of generic mana (use key `*`)\n* optionally followed by any combination of `w`, `u`, `b`, `r`, `g` (case insensitive in input, return lower case in output), each representing one mana of specific color.\n\nIf case of Strings not following specified format, return `nil/null/None`.\n\"\"\"", "inputs": [[""], ["0"], ["1"], ["4"], ["15"], ["2rr"], ["1wbg"], ["1WWU"], ["0r"], ["2x"], ["2R"], ["2\n"], ["\n2"], ["1b"], ["1bb"], ["1bbb"], ["1bg"], ["1bgu"], ["1br"], ["1brg"], ["1g"], ["1gg"], ["1ggg"], ["1ggu"], ["1ggw"], ["1gu"], ["1guu"], ["1gw"], ["1gwu"], ["1gww"], ["1r"], ["1rg"], ["1rgg"], ["1rgw"], ["1rr"], ["1rrr"], ["1rrw"], ["1rw"], ["1rwb"], ["1rwu"], ["1u"], ["1ub"], ["1ubr"], ["1ur"], ["1uu"], ["1uub"], ["1uur"], ["1uuu"], ["1w"], ["1wb"], ["1wbr"], ["1wu"], ["1wub"], ["1wubrg"], ["1ww"], ["1wwbb"], ["1wwu"], ["1wwuu"], ["1www"], ["2"], ["2b"], ["2bb"], ["2bbb"], ["2bbr"], ["2bbrr"], ["2bbrrgg"], ["2bg"], ["2bgg"], ["2bgu"], ["2bgw"], ["2br"], ["2brg"], ["2brr"], ["2g"], ["2gg"], ["2ggg"], ["2gggg"], ["2gguu"], ["2ggww"], ["2ggwwuu"], ["2gu"], ["2gub"], ["2gur"], ["2guu"], ["2gw"], ["2gwu"], ["2gww"], ["2r"], ["2rg"], ["2rgw"], ["2rrgg"], ["2rrggww"], ["2rrr"], ["2rrrg"], ["2rrww"], ["2rw"], ["2rwb"], ["2u"], ["2ub"], ["2ubr"], ["2ur"], ["2urg"], ["2urw"], ["2uu"], ["2uubb"], ["2uubbrr"], ["2uurr"], ["2uuu"], ["2uuuu"], ["2w"], ["2wb"], ["2wbg"], ["2wu"], ["2wub"], ["2wuu"], ["2wuub"], ["2ww"], ["2wwb"], ["2wwbb"], ["2wwuu"], ["2wwuubb"], ["2www"], ["3"], ["3b"], ["3bb"], ["3bbb"], ["3bbbb"], ["3bbg"], ["3bbr"], ["3bbrr"], ["3bg"], ["3bgu"], ["3bgw"], ["3br"], ["3brg"], ["3g"], ["3gg"], ["3ggg"], ["3gggg"], ["3ggw"], ["3ggww"], ["3gu"], ["3gub"], ["3gur"], ["3gw"], ["3gwu"], ["3gww"], ["3r"], ["3rg"], ["3rgg"], ["3rgw"], ["3rr"], ["3rrg"], ["3rrgg"], ["3rrr"], ["3rrrr"], ["3rw"], ["3rwb"], ["3rwu"], ["3rww"], ["3u"], ["3ub"], ["3ubb"], ["3ubr"], ["3ur"], ["3urg"], ["3urw"], ["3uu"], ["3uub"], ["3uubb"], ["3uuu"], ["3w"], ["3wb"], ["3wbb"], ["3wbg"], ["3wbr"], ["3wu"], ["3wub"], ["3wubrg"], ["3wuu"], ["3ww"], ["3wwbb"], ["3wwu"], ["3wwuu"], ["3www"], ["4b"], ["4bb"], ["4bbb"], ["4bbbb"], ["4bbgg"], ["4bbrr"], ["4bg"], ["4br"], ["4brg"], ["4brr"], ["4brrg"], ["4g"], ["4gg"], ["4ggg"], ["4gggg"], ["4ggww"], ["4gu"], ["4gub"], ["4gw"], ["4gwwu"], ["4r"], ["4rg"], ["4rggw"], ["4rgw"], ["4rr"], ["4rrg"], ["4rrgg"], ["4rrr"], ["4rrww"], ["4rw"], ["4rww"], ["4u"], ["4ub"], ["4ubbr"], ["4ubr"], ["4ur"], ["4uu"], ["4uuu"], ["4w"], ["4wb"], ["4wbb"], ["4wbg"], ["4wbr"], ["4wu"], ["4wub"], ["4wuub"], ["4ww"], ["4wwbb"], ["4wwu"], ["4www"], ["5"], ["5b"], ["5bb"], ["5bbb"], ["5bg"], ["5bgw"], ["5br"], ["5g"], ["5gg"], ["5ggg"], ["5gu"], ["5guu"], ["5gw"], ["5r"], ["5rg"], ["5rr"], ["5rrr"], ["5rw"], ["5u"], ["5ub"], ["5ubb"], ["5ur"], ["5urg"], ["5uu"], ["5uuu"], ["5uuuu"], ["5w"], ["5wb"], ["5wu"], ["5wub"], ["5ww"], ["5wwu"], ["5www"], ["6"], ["6b"], ["6bb"], ["6bbb"], ["6bg"], ["6br"], ["6g"], ["6gg"], ["6ggg"], ["6gw"], ["6r"], ["6rr"], ["6rrr"], ["6u"], ["6uu"], ["6uuu"], ["6w"], ["6ww"], ["6www"], ["7"], ["7b"], ["7bb"], ["7bbb"], ["7g"], ["7gg"], ["7ggg"], ["7r"], ["7rr"], ["7rrr"], ["7u"], ["7uu"], ["7uuu"], ["7w"], ["7ww"], ["7www"], ["8"], ["8b"], ["8bb"], ["8bbb"], ["8bbgg"], ["8g"], ["8gg"], ["8ggg"], ["8r"], ["8rr"], ["8uu"], ["8uuu"], ["8uuuu"], ["8ww"], ["9"], ["9b"], ["9r"], ["b"], ["bb"], ["bbb"], ["bbbb"], ["bbbbbbbbbbbbbbb"], ["bbgg"], ["bbr"], ["bbrr"], ["bbrrrgg"], ["bg"], ["bgg"], ["bgu"], ["bgw"], ["br"], ["brg"], ["brgw"], ["g"], ["gg"], ["ggg"], ["gggg"], ["ggggg"], ["gggggg"], ["gggggggg"], ["gggwww"], ["gguu"], ["ggw"], ["ggww"], ["ggwwwuu"], ["gu"], ["gur"], ["guu"], ["gw"], ["gwu"], ["gwub"], ["r"], ["rg"], ["rgw"], ["rgwu"], ["rr"], ["rrgg"], ["rrgggww"], ["rrr"], ["rrrr"], ["rw"], ["rwb"], ["u"], ["ub"], ["ubbr"], ["ubr"], ["ubrg"], ["ur"], ["urg"], ["urr"], ["urw"], ["uu"], ["uub"], ["uubb"], ["uubbbrr"], ["uur"], ["uuu"], ["uuuu"], ["w"], ["wb"], ["wbb"], ["wbg"], ["wu"], ["wub"], ["wubr"], ["wubrg"], ["wuu"], ["wuub"], ["ww"], ["wwbb"], ["wwuu"], ["wwuubbrrgg"], ["wwuuubb"], ["www"], ["wwww"]], "outputs": [[{}], [{}], [{"*": 1}], [{"*": 4}], [{"*": 15}], [{"*": 2, "r": 2}], [{"*": 1, "w": 1, "b": 1, "g": 1}], [{"*": 1, "w": 2, "u": 1}], [{"r": 1}], [null], [{"*": 2, "r": 1}], [null], [null], [{"*": 1, "b": 1}], [{"*": 1, "b": 2}], [{"*": 1, "b": 3}], [{"*": 1, "b": 1, "g": 1}], [{"*": 1, "u": 1, "b": 1, "g": 1}], [{"*": 1, "b": 1, "r": 1}], [{"*": 1, "b": 1, "r": 1, "g": 1}], [{"*": 1, "g": 1}], [{"*": 1, "g": 2}], [{"*": 1, "g": 3}], [{"*": 1, "u": 1, "g": 2}], [{"*": 1, "w": 1, "g": 2}], [{"*": 1, "u": 1, "g": 1}], [{"*": 1, "u": 2, "g": 1}], [{"*": 1, "w": 1, "g": 1}], [{"*": 1, "w": 1, "u": 1, "g": 1}], [{"*": 1, "w": 2, "g": 1}], [{"*": 1, "r": 1}], [{"*": 1, "r": 1, "g": 1}], [{"*": 1, "r": 1, "g": 2}], [{"*": 1, "w": 1, "r": 1, "g": 1}], [{"*": 1, "r": 2}], [{"*": 1, "r": 3}], [{"*": 1, "w": 1, "r": 2}], [{"*": 1, "w": 1, "r": 1}], [{"*": 1, "w": 1, "b": 1, "r": 1}], [{"*": 1, "w": 1, "u": 1, "r": 1}], [{"*": 1, "u": 1}], [{"*": 1, "u": 1, "b": 1}], [{"*": 1, "u": 1, "b": 1, "r": 1}], [{"*": 1, "u": 1, "r": 1}], [{"*": 1, "u": 2}], [{"*": 1, "u": 2, "b": 1}], [{"*": 1, "u": 2, "r": 1}], [{"*": 1, "u": 3}], [{"*": 1, "w": 1}], [{"*": 1, "w": 1, "b": 1}], [{"*": 1, "w": 1, "b": 1, "r": 1}], [{"*": 1, "w": 1, "u": 1}], [{"*": 1, "w": 1, "u": 1, "b": 1}], [{"*": 1, "w": 1, "u": 1, "b": 1, "r": 1, "g": 1}], [{"*": 1, "w": 2}], [{"*": 1, "w": 2, "b": 2}], [{"*": 1, "w": 2, "u": 1}], [{"*": 1, "w": 2, "u": 2}], [{"*": 1, "w": 3}], [{"*": 2}], [{"*": 2, "b": 1}], [{"*": 2, "b": 2}], [{"*": 2, "b": 3}], [{"*": 2, "b": 2, "r": 1}], [{"*": 2, "b": 2, "r": 2}], [{"*": 2, "b": 2, "r": 2, "g": 2}], [{"*": 2, "b": 1, "g": 1}], [{"*": 2, "b": 1, "g": 2}], [{"*": 2, "u": 1, "b": 1, "g": 1}], [{"*": 2, "w": 1, "b": 1, "g": 1}], [{"*": 2, "b": 1, "r": 1}], [{"*": 2, "b": 1, "r": 1, "g": 1}], [{"*": 2, "b": 1, "r": 2}], [{"*": 2, "g": 1}], [{"*": 2, "g": 2}], [{"*": 2, "g": 3}], [{"*": 2, "g": 4}], [{"*": 2, "u": 2, "g": 2}], [{"*": 2, "w": 2, "g": 2}], [{"*": 2, "w": 2, "u": 2, "g": 2}], [{"*": 2, "u": 1, "g": 1}], [{"*": 2, "u": 1, "b": 1, "g": 1}], [{"*": 2, "u": 1, "r": 1, "g": 1}], [{"*": 2, "u": 2, "g": 1}], [{"*": 2, "w": 1, "g": 1}], [{"*": 2, "w": 1, "u": 1, "g": 1}], [{"*": 2, "w": 2, "g": 1}], [{"*": 2, "r": 1}], [{"*": 2, "r": 1, "g": 1}], [{"*": 2, "w": 1, "r": 1, "g": 1}], [{"*": 2, "r": 2, "g": 2}], [{"*": 2, "w": 2, "r": 2, "g": 2}], [{"*": 2, "r": 3}], [{"*": 2, "r": 3, "g": 1}], [{"*": 2, "w": 2, "r": 2}], [{"*": 2, "w": 1, "r": 1}], [{"*": 2, "w": 1, "b": 1, "r": 1}], [{"*": 2, "u": 1}], [{"*": 2, "u": 1, "b": 1}], [{"*": 2, "u": 1, "b": 1, "r": 1}], [{"*": 2, "u": 1, "r": 1}], [{"*": 2, "u": 1, "r": 1, "g": 1}], [{"*": 2, "w": 1, "u": 1, "r": 1}], [{"*": 2, "u": 2}], [{"*": 2, "u": 2, "b": 2}], [{"*": 2, "u": 2, "b": 2, "r": 2}], [{"*": 2, "u": 2, "r": 2}], [{"*": 2, "u": 3}], [{"*": 2, "u": 4}], [{"*": 2, "w": 1}], [{"*": 2, "w": 1, "b": 1}], [{"*": 2, "w": 1, "b": 1, "g": 1}], [{"*": 2, "w": 1, "u": 1}], [{"*": 2, "w": 1, "u": 1, "b": 1}], [{"*": 2, "w": 1, "u": 2}], [{"*": 2, "w": 1, "u": 2, "b": 1}], [{"*": 2, "w": 2}], [{"*": 2, "w": 2, "b": 1}], [{"*": 2, "w": 2, "b": 2}], [{"*": 2, "w": 2, "u": 2}], [{"*": 2, "w": 2, "u": 2, "b": 2}], [{"*": 2, "w": 3}], [{"*": 3}], [{"*": 3, "b": 1}], [{"*": 3, "b": 2}], [{"*": 3, "b": 3}], [{"*": 3, "b": 4}], [{"*": 3, "b": 2, "g": 1}], [{"*": 3, "b": 2, "r": 1}], [{"*": 3, "b": 2, "r": 2}], [{"*": 3, "b": 1, "g": 1}], [{"*": 3, "u": 1, "b": 1, "g": 1}], [{"*": 3, "w": 1, "b": 1, "g": 1}], [{"*": 3, "b": 1, "r": 1}], [{"*": 3, "b": 1, "r": 1, "g": 1}], [{"*": 3, "g": 1}], [{"*": 3, "g": 2}], [{"*": 3, "g": 3}], [{"*": 3, "g": 4}], [{"*": 3, "w": 1, "g": 2}], [{"*": 3, "w": 2, "g": 2}], [{"*": 3, "u": 1, "g": 1}], [{"*": 3, "u": 1, "b": 1, "g": 1}], [{"*": 3, "u": 1, "r": 1, "g": 1}], [{"*": 3, "w": 1, "g": 1}], [{"*": 3, "w": 1, "u": 1, "g": 1}], [{"*": 3, "w": 2, "g": 1}], [{"*": 3, "r": 1}], [{"*": 3, "r": 1, "g": 1}], [{"*": 3, "r": 1, "g": 2}], [{"*": 3, "w": 1, "r": 1, "g": 1}], [{"*": 3, "r": 2}], [{"*": 3, "r": 2, "g": 1}], [{"*": 3, "r": 2, "g": 2}], [{"*": 3, "r": 3}], [{"*": 3, "r": 4}], [{"*": 3, "w": 1, "r": 1}], [{"*": 3, "w": 1, "b": 1, "r": 1}], [{"*": 3, "w": 1, "u": 1, "r": 1}], [{"*": 3, "w": 2, "r": 1}], [{"*": 3, "u": 1}], [{"*": 3, "u": 1, "b": 1}], [{"*": 3, "u": 1, "b": 2}], [{"*": 3, "u": 1, "b": 1, "r": 1}], [{"*": 3, "u": 1, "r": 1}], [{"*": 3, "u": 1, "r": 1, "g": 1}], [{"*": 3, "w": 1, "u": 1, "r": 1}], [{"*": 3, "u": 2}], [{"*": 3, "u": 2, "b": 1}], [{"*": 3, "u": 2, "b": 2}], [{"*": 3, "u": 3}], [{"*": 3, "w": 1}], [{"*": 3, "w": 1, "b": 1}], [{"*": 3, "w": 1, "b": 2}], [{"*": 3, "w": 1, "b": 1, "g": 1}], [{"*": 3, "w": 1, "b": 1, "r": 1}], [{"*": 3, "w": 1, "u": 1}], [{"*": 3, "w": 1, "u": 1, "b": 1}], [{"*": 3, "w": 1, "u": 1, "b": 1, "r": 1, "g": 1}], [{"*": 3, "w": 1, "u": 2}], [{"*": 3, "w": 2}], [{"*": 3, "w": 2, "b": 2}], [{"*": 3, "w": 2, "u": 1}], [{"*": 3, "w": 2, "u": 2}], [{"*": 3, "w": 3}], [{"*": 4, "b": 1}], [{"*": 4, "b": 2}], [{"*": 4, "b": 3}], [{"*": 4, "b": 4}], [{"*": 4, "b": 2, "g": 2}], [{"*": 4, "b": 2, "r": 2}], [{"*": 4, "b": 1, "g": 1}], [{"*": 4, "b": 1, "r": 1}], [{"*": 4, "b": 1, "r": 1, "g": 1}], [{"*": 4, "b": 1, "r": 2}], [{"*": 4, "b": 1, "r": 2, "g": 1}], [{"*": 4, "g": 1}], [{"*": 4, "g": 2}], [{"*": 4, "g": 3}], [{"*": 4, "g": 4}], [{"*": 4, "w": 2, "g": 2}], [{"*": 4, "u": 1, "g": 1}], [{"*": 4, "u": 1, "b": 1, "g": 1}], [{"*": 4, "w": 1, "g": 1}], [{"*": 4, "w": 2, "u": 1, "g": 1}], [{"*": 4, "r": 1}], [{"*": 4, "r": 1, "g": 1}], [{"*": 4, "w": 1, "r": 1, "g": 2}], [{"*": 4, "w": 1, "r": 1, "g": 1}], [{"*": 4, "r": 2}], [{"*": 4, "r": 2, "g": 1}], [{"*": 4, "r": 2, "g": 2}], [{"*": 4, "r": 3}], [{"*": 4, "w": 2, "r": 2}], [{"*": 4, "w": 1, "r": 1}], [{"*": 4, "w": 2, "r": 1}], [{"*": 4, "u": 1}], [{"*": 4, "u": 1, "b": 1}], [{"*": 4, "u": 1, "b": 2, "r": 1}], [{"*": 4, "u": 1, "b": 1, "r": 1}], [{"*": 4, "u": 1, "r": 1}], [{"*": 4, "u": 2}], [{"*": 4, "u": 3}], [{"*": 4, "w": 1}], [{"*": 4, "w": 1, "b": 1}], [{"*": 4, "w": 1, "b": 2}], [{"*": 4, "w": 1, "b": 1, "g": 1}], [{"*": 4, "w": 1, "b": 1, "r": 1}], [{"*": 4, "w": 1, "u": 1}], [{"*": 4, "w": 1, "u": 1, "b": 1}], [{"*": 4, "w": 1, "u": 2, "b": 1}], [{"*": 4, "w": 2}], [{"*": 4, "w": 2, "b": 2}], [{"*": 4, "w": 2, "u": 1}], [{"*": 4, "w": 3}], [{"*": 5}], [{"*": 5, "b": 1}], [{"*": 5, "b": 2}], [{"*": 5, "b": 3}], [{"*": 5, "b": 1, "g": 1}], [{"*": 5, "w": 1, "b": 1, "g": 1}], [{"*": 5, "b": 1, "r": 1}], [{"*": 5, "g": 1}], [{"*": 5, "g": 2}], [{"*": 5, "g": 3}], [{"*": 5, "u": 1, "g": 1}], [{"*": 5, "u": 2, "g": 1}], [{"*": 5, "w": 1, "g": 1}], [{"*": 5, "r": 1}], [{"*": 5, "r": 1, "g": 1}], [{"*": 5, "r": 2}], [{"*": 5, "r": 3}], [{"*": 5, "w": 1, "r": 1}], [{"*": 5, "u": 1}], [{"*": 5, "u": 1, "b": 1}], [{"*": 5, "u": 1, "b": 2}], [{"*": 5, "u": 1, "r": 1}], [{"*": 5, "u": 1, "r": 1, "g": 1}], [{"*": 5, "u": 2}], [{"*": 5, "u": 3}], [{"*": 5, "u": 4}], [{"*": 5, "w": 1}], [{"*": 5, "w": 1, "b": 1}], [{"*": 5, "w": 1, "u": 1}], [{"*": 5, "w": 1, "u": 1, "b": 1}], [{"*": 5, "w": 2}], [{"*": 5, "w": 2, "u": 1}], [{"*": 5, "w": 3}], [{"*": 6}], [{"*": 6, "b": 1}], [{"*": 6, "b": 2}], [{"*": 6, "b": 3}], [{"*": 6, "b": 1, "g": 1}], [{"*": 6, "b": 1, "r": 1}], [{"*": 6, "g": 1}], [{"*": 6, "g": 2}], [{"*": 6, "g": 3}], [{"*": 6, "w": 1, "g": 1}], [{"*": 6, "r": 1}], [{"*": 6, "r": 2}], [{"*": 6, "r": 3}], [{"*": 6, "u": 1}], [{"*": 6, "u": 2}], [{"*": 6, "u": 3}], [{"*": 6, "w": 1}], [{"*": 6, "w": 2}], [{"*": 6, "w": 3}], [{"*": 7}], [{"*": 7, "b": 1}], [{"*": 7, "b": 2}], [{"*": 7, "b": 3}], [{"*": 7, "g": 1}], [{"*": 7, "g": 2}], [{"*": 7, "g": 3}], [{"*": 7, "r": 1}], [{"*": 7, "r": 2}], [{"*": 7, "r": 3}], [{"*": 7, "u": 1}], [{"*": 7, "u": 2}], [{"*": 7, "u": 3}], [{"*": 7, "w": 1}], [{"*": 7, "w": 2}], [{"*": 7, "w": 3}], [{"*": 8}], [{"*": 8, "b": 1}], [{"*": 8, "b": 2}], [{"*": 8, "b": 3}], [{"*": 8, "b": 2, "g": 2}], [{"*": 8, "g": 1}], [{"*": 8, "g": 2}], [{"*": 8, "g": 3}], [{"*": 8, "r": 1}], [{"*": 8, "r": 2}], [{"*": 8, "u": 2}], [{"*": 8, "u": 3}], [{"*": 8, "u": 4}], [{"*": 8, "w": 2}], [{"*": 9}], [{"*": 9, "b": 1}], [{"*": 9, "r": 1}], [{"b": 1}], [{"b": 2}], [{"b": 3}], [{"b": 4}], [{"b": 15}], [{"b": 2, "g": 2}], [{"b": 2, "r": 1}], [{"b": 2, "r": 2}], [{"b": 2, "r": 3, "g": 2}], [{"b": 1, "g": 1}], [{"b": 1, "g": 2}], [{"u": 1, "b": 1, "g": 1}], [{"w": 1, "b": 1, "g": 1}], [{"b": 1, "r": 1}], [{"b": 1, "r": 1, "g": 1}], [{"w": 1, "b": 1, "r": 1, "g": 1}], [{"g": 1}], [{"g": 2}], [{"g": 3}], [{"g": 4}], [{"g": 5}], [{"g": 6}], [{"g": 8}], [{"w": 3, "g": 3}], [{"u": 2, "g": 2}], [{"w": 1, "g": 2}], [{"w": 2, "g": 2}], [{"w": 3, "u": 2, "g": 2}], [{"u": 1, "g": 1}], [{"u": 1, "r": 1, "g": 1}], [{"u": 2, "g": 1}], [{"w": 1, "g": 1}], [{"w": 1, "u": 1, "g": 1}], [{"w": 1, "u": 1, "b": 1, "g": 1}], [{"r": 1}], [{"r": 1, "g": 1}], [{"w": 1, "r": 1, "g": 1}], [{"w": 1, "u": 1, "r": 1, "g": 1}], [{"r": 2}], [{"r": 2, "g": 2}], [{"w": 2, "r": 2, "g": 3}], [{"r": 3}], [{"r": 4}], [{"w": 1, "r": 1}], [{"w": 1, "b": 1, "r": 1}], [{"u": 1}], [{"u": 1, "b": 1}], [{"u": 1, "b": 2, "r": 1}], [{"u": 1, "b": 1, "r": 1}], [{"u": 1, "b": 1, "r": 1, "g": 1}], [{"u": 1, "r": 1}], [{"u": 1, "r": 1, "g": 1}], [{"u": 1, "r": 2}], [{"w": 1, "u": 1, "r": 1}], [{"u": 2}], [{"u": 2, "b": 1}], [{"u": 2, "b": 2}], [{"u": 2, "b": 3, "r": 2}], [{"u": 2, "r": 1}], [{"u": 3}], [{"u": 4}], [{"w": 1}], [{"w": 1, "b": 1}], [{"w": 1, "b": 2}], [{"w": 1, "b": 1, "g": 1}], [{"w": 1, "u": 1}], [{"w": 1, "u": 1, "b": 1}], [{"w": 1, "u": 1, "b": 1, "r": 1}], [{"w": 1, "u": 1, "b": 1, "r": 1, "g": 1}], [{"w": 1, "u": 2}], [{"w": 1, "u": 2, "b": 1}], [{"w": 2}], [{"w": 2, "b": 2}], [{"w": 2, "u": 2}], [{"w": 2, "u": 2, "b": 2, "r": 2, "g": 2}], [{"w": 2, "u": 3, "b": 2}], [{"w": 3}], [{"w": 4}]], "starter_code": "def parse_mana_cost(mana):", "canonical_solution": "import re\n\ndef parse_mana_cost(mana):\n    n = {c: mana.lower().count(c) for c in 'wubrg' if mana.lower().count(c) > 0}\n    m = re.split('\\\\D', mana)\n    if sum(n.values()) + sum([len(c) for c in m]) != len(mana):\n        return None\n    p = sum([int(c) for c in m if c != ''])\n    if p > 0:\n        n['*'] = p\n    return n", "entry_point": "parse_mana_cost", "task_id": "TACO_lite/88", "input_output_examples": [[[""]], [[{}]]]}
{"requirement": "def hex_hash(code):\n\"\"\"Complete the function that accepts a valid string and returns an integer.\n\nWait, that would be too easy! Every character of the string should be converted to the hex value of its ascii code, then the result should be the sum of the numbers in the hex strings (ignore letters).\n\n## Examples\n```\n\"Yo\" ==> \"59 6f\" ==> 5 + 9 + 6 = 20\n\"Hello, World!\"  ==> 91\n\"Forty4Three\"    ==> 113\n```\n\"\"\"", "inputs": [["kcxnjsklsHskjHDkl7878hHJk"], [""], ["ThisIsATest!"], ["dhsajkbfyewquilb4y83q903ybr8q9apf7\\9ph79qw0-eq230br[wq87r0=18-[#20r370B 7Q0RFP23B79037902RF79WQ0[]]]"]], "outputs": [[218], [0], [120], [802]], "starter_code": "def hex_hash(code):", "canonical_solution": "def hex_hash(code):\n    return sum((int(d) for c in code for d in hex(ord(c)) if d.isdigit()))", "entry_point": "hex_hash", "task_id": "TACO_lite/89", "input_output_examples": [[["Yo"], ["Hello, World!"], ["Forty4Three"], ["kcxnjsklsHskjHDkl7878hHJk"]], [[20], [91], [113], [218]]]}
{"requirement": "def next_letter(string):\n\"\"\"In this kata you will have to change every letter in a given string to the next letter in the alphabet. You will write a function `nextLetter` to do this. The function will take a single parameter `s` (string).\n\nExamples:\n\n```\n\"Hello\" --> \"Ifmmp\"\n\n\"What is your name?\" --> \"Xibu jt zpvs obnf?\"\n\n\"zoo\" --> \"app\"\n\n\"zzZAaa\" --> \"aaABbb\"\n```\n\nNote: spaces and special characters should remain the same. Capital letters should transfer in the same way but remain capitilized.\n\"\"\"", "inputs": [["Hello"], ["What is your name?"], ["zOo"]], "outputs": [["Ifmmp"], ["Xibu jt zpvs obnf?"], ["aPp"]], "starter_code": "def next_letter(string):", "canonical_solution": "def next_letter(string):\n    return ''.join((chr(ord(c) + (-25 if c in 'zZ' else 1)) if c.isalpha() else c for c in string))", "entry_point": "next_letter", "task_id": "TACO_lite/90", "input_output_examples": [[["Hello"], ["What is your name?"], ["zoo"], ["zzZAaa"]], [["Ifmmp"], ["Xibu jt zpvs obnf?"], ["app"], ["aaABbb"]]]}
{"requirement": "def compress(sentence):\n\"\"\"Your task is to make a program takes in a sentence (without puncuation), adds all words to a list and returns the sentence as a string which is the positions of the word in the list. Casing should not matter too.\n\n\nExample\n-----\n\n`\"Ask not what your COUNTRY can do for you ASK WHAT YOU CAN DO FOR YOUR country\"`\n\nbecomes\n\n`\"01234567802856734\"`\n\nAnother example\n-----\n\n`\"the one bumble bee one bumble the bee\"`\n\nbecomes\n\n`\"01231203\"`\n\"\"\"", "inputs": [["The bumble bee"], ["SILLY LITTLE BOYS silly little boys"], ["Ask not what your COUNTRY can do for you ASK WHAT YOU CAN DO FOR YOUR country"], ["The number 0 is such a strange number Strangely it has zero meaning"]], "outputs": [["012"], ["012012"], ["01234567802856734"], ["012345617891011"]], "starter_code": "def compress(sentence):", "canonical_solution": "def compress(sentence):\n    ref = []\n    for i in sentence.lower().split():\n        if i not in ref:\n            ref.append(i)\n    return ''.join([str(ref.index(n)) for n in sentence.lower().split()])", "entry_point": "compress", "task_id": "TACO_lite/91", "input_output_examples": [[["Ask not what your COUNTRY can do for you ASK WHAT YOU CAN DO FOR YOUR country"], ["the one bumble bee one bumble the bee"], ["The bumble bee"]], [["01234567802856734"], ["01231203"], ["012"]]]}
{"requirement": "def generate_diagonal(d, l):\n\"\"\"Create a function that returns an array containing the first `l` digits from the `n`th diagonal of [Pascal's triangle](https://en.wikipedia.org/wiki/Pascal's_triangle).\n\n`n = 0` should generate the first diagonal of the triangle (the 'ones'). The first number in each diagonal should be 1.\n\nIf `l = 0`, return an empty array. Assume that both `n` and `l` will be non-negative integers in all test cases.\n\"\"\"", "inputs": [[0, 10], [1, 10], [2, 10], [3, 10], [4, 10], [10, 0], [100, 6]], "outputs": [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 3, 6, 10, 15, 21, 28, 36, 45, 55]], [[1, 4, 10, 20, 35, 56, 84, 120, 165, 220]], [[1, 5, 15, 35, 70, 126, 210, 330, 495, 715]], [[]], [[1, 101, 5151, 176851, 4598126, 96560646]]], "starter_code": "def generate_diagonal(d, l):", "canonical_solution": "def generate_diagonal(d, l):\n    result = [1] if l else []\n    for k in range(1, l):\n        result.append(result[-1] * (d + k) // k)\n    return result", "entry_point": "generate_diagonal", "task_id": "TACO_lite/92", "input_output_examples": [[[0, 10]], [[[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]]]}
{"requirement": "def shifted_diff(first, second):\n\"\"\"Write a function that receives two strings and returns n, where n is equal to the number of characters we should shift the first string forward to match the second.\n\nFor instance, take the strings \"fatigue\" and \"tiguefa\". In this case, the first string has been rotated 5 characters forward to produce the second string, so 5 would be returned.\nIf the second string isn't a valid rotation of the first string, the method returns -1. \n\nExamples:\n```\n\"coffee\", \"eecoff\" => 2\n\"eecoff\", \"coffee\" => 4\n\"moose\", \"Moose\" => -1\n\"isn't\", \"'tisn\" => 2\n\"Esham\", \"Esham\" => 0\n\"dog\", \"god\" => -1\n```\n\nFor Swift, your function should return an Int?. So rather than returning -1 when the second string isn't a valid rotation of the first, return nil.\n\"\"\"", "inputs": [["fatigue", "tiguefa"], ["hoop", "pooh"], ["eecoff", "coffee"], ["Moose", "moose"], ["isn't", "'tisn"], ["Esham", "Esham"], [" ", " "], ["dog", "god"], ["  ", " "], ["doomhouse", "hoodmouse"], ["123456789!@#$%^&*( )qwerty", "9!@#$%^&*( )qwerty12345678"]], "outputs": [[5], [-1], [4], [-1], [2], [0], [0], [-1], [-1], [-1], [18]], "starter_code": "def shifted_diff(first, second):", "canonical_solution": "def shifted_diff(first, second):\n    return (second + second).find(first) if len(first) == len(second) else -1", "entry_point": "shifted_diff", "task_id": "TACO_lite/93", "input_output_examples": [[["coffee", "eecoff"], ["eecoff", "coffee"], ["moose", "Moose"], ["isn't", "'tisn"], ["Esham", "Esham"], ["dog", "god"]], [[2], [4], [-1], [2], [0], [-1]]]}
{"requirement": "def func_or(a, b):\n\"\"\"## Task\nYou need to implement two functions, `xor` and `or`, that replicate the behaviour of their respective operators:\n\n- `xor` = Takes 2 values and returns `true` if, and only if, one of them is truthy.\n- `or` = Takes 2 values and returns `true` if either one of them is truthy.\n\nWhen doing so, **you cannot use the or operator: `||`**.\n\n# Input\n- Not all input will be booleans - there will be truthy and falsey values [the latter including also empty strings and empty arrays]\n- There will always be 2 values provided\n\n## Examples\n- `xor(true, true)` should return `false`\n- `xor(false, true)` should return `true`\n- `or(true, false)` should return `true`\n- `or(false, false)` should return `false`\n\"\"\"", "inputs": [[true, true], [true, false], [false, false], [0, 11], [null, []]], "outputs": [[true], [true], [false], [true], [false]], "starter_code": "def func_or(a, b):", "canonical_solution": "def func_or(a, b):\n    return not bool(a) == bool(b) == False\n\ndef func_xor(a, b):\n    return not bool(a) == bool(b)", "entry_point": "func_or", "task_id": "TACO_lite/94", "input_output_examples": [[[true, true], [false, true], [true, false], [false, false]], [[false], [true], [true], [false]]]}
{"requirement": "def combine(*args):\n\"\"\"Write\n\n```python\nfunction combine()\n```\n\nthat combines arrays by alternatingly taking elements passed to it.\n\nE.g\n\n```python\ncombine(['a', 'b', 'c'], [1, 2, 3]) == ['a', 1, 'b', 2, 'c', 3]\ncombine(['a', 'b', 'c'], [1, 2, 3, 4, 5]) == ['a', 1, 'b', 2, 'c', 3, 4, 5]\ncombine(['a', 'b', 'c'], [1, 2, 3, 4, 5], [6, 7], [8]) == ['a', 1, 6, 8, 'b', 2, 7, 'c', 3, 4, 5]\n```\n\nArrays can have different lengths.\n\"\"\"", "inputs": [[["a", "b", "c"], [1, 2, 3]], [["a", "b", "c"], [1, 2, 3, 4, 5]], [["a", "b", "c"], [1, 2, 3, 4, 5], [6, 7], [8]], [[{"a": 1}, {"b": 2}], [1, 2]], [[{"a": 2, "b": 1}, {"a": 1, "b": 2}], [1, 2, 3, 4], [5, 6], [7]]], "outputs": [[["a", 1, "b", 2, "c", 3]], [["a", 1, "b", 2, "c", 3, 4, 5]], [["a", 1, 6, 8, "b", 2, 7, "c", 3, 4, 5]], [[{"a": 1}, 1, {"b": 2}, 2]], [[{"a": 2, "b": 1}, 1, 5, 7, {"a": 1, "b": 2}, 2, 6, 3, 4]]], "starter_code": "def combine(*args):", "canonical_solution": "def combine(*args):\n    out = list()\n    for i in range(len(max(args, key=len))):\n        for arr in args:\n            if i < len(arr):\n                out.append(arr[i])\n    return out", "entry_point": "combine", "task_id": "TACO_lite/95", "input_output_examples": [[[["a", "b", "c"], [1, 2, 3]], [["a", "b", "c"], [1, 2, 3, 4, 5]], [["a", "b", "c"], [1, 2, 3, 4, 5], [6, 7], [8]]], [[["a", 1, "b", 2, "c", 3]], [["a", 1, "b", 2, "c", 3, 4, 5]], [["a", 1, 6, 8, "b", 2, 7, "c", 3, 4, 5]]]]}
{"requirement": "def div_con(lst):\n\"\"\"Given a mixed array of number and string representations of integers, add up the string integers and subtract this from the total of the non-string integers. \n\nReturn as a number.\n\"\"\"", "inputs": [[[9, 3, "7", "3"]], [["5", "0", 9, 3, 2, 1, "9", 6, 7]], [["3", 6, 6, 0, "5", 8, 5, "6", 2, "0"]], [["1", "5", "8", 8, 9, 9, 2, "3"]], [[8, 0, 0, 8, 5, 7, 2, 3, 7, 8, 6, 7]]], "outputs": [[2], [14], [13], [11], [61]], "starter_code": "def div_con(lst):", "canonical_solution": "def div_con(lst):\n    return sum((n if isinstance(n, int) else -int(n) for n in lst))", "entry_point": "div_con", "task_id": "TACO_lite/96", "input_output_examples": [[[[9, 3, "7", "3"]]], [[2]]]}
{"requirement": "def cycle(n):\n\"\"\"Let be `n` an integer prime with `10` e.g. `7`. \n\n`1/7 = 0.142857 142857 142857 ...`.\n\nWe see that the decimal part has a cycle: `142857`. The length of this cycle is `6`. In the same way:\n\n`1/11 = 0.09 09 09 ...`. Cycle length is `2`.\n\n# Task\n\nGiven an integer n (n > 1), the function cycle(n) returns the length of the cycle if n and 10 are coprimes, otherwise returns -1.\n\n# Examples:\n```\ncycle(5) = -1\ncycle(13) = 6 -> 0.076923 076923 0769\ncycle(21) = 6 -> 0.047619 047619 0476\ncycle(27) = 3 -> 0.037 037 037 037 0370\ncycle(33) = 2 -> 0.03 03 03 03 03 03 03 03\ncycle(37) = 3 -> 0.027 027 027 027 027 0\ncycle(94) = -1 \n\ncycle(22) = -1 since 1/22 ~ 0.0 45 45 45 45 ...\n```\n\"\"\"", "inputs": [[3], [33], [18118], [69], [197], [65], [97], [19], [111], [53], [59], [93], [51], [159], [183], [167], [94], [133], [218713], [38127], [431541], [221193], [1234567]], "outputs": [[1], [2], [-1], [22], [98], [-1], [96], [18], [3], [13], [58], [15], [16], [13], [60], [166], [-1], [18], [9744], [6230], [726], [3510], [34020]], "starter_code": "def cycle(n):", "canonical_solution": "import math\n\ndef cycle(n):\n    if n % 2 == 0 or n % 5 == 0:\n        return -1\n    k = 1\n    while pow(10, k, n) != 1:\n        k += 1\n    return k", "entry_point": "cycle", "task_id": "TACO_lite/97", "input_output_examples": [[[5], [13], [21], [27], [33], [37], [94], [22]], [[-1], [6], [6], [3], [2], [3], [-1], [-1]]]}
{"requirement": "def comb(fruits):\n\"\"\"# Task\nJohn is an orchard worker. \n\nThere are `n` piles of fruits waiting to be transported. Each pile of fruit has a corresponding weight. John's job is to combine the fruits into a pile and wait for the truck to take them away.\n\nEvery time, John can combine any two piles(`may be adjacent piles, or not`), and the energy he costs is equal to the weight of the two piles of fruit.\n\nFor example, if there are two piles, pile1's weight is `1` and pile2's weight is `2`. After merging, the new pile's weight is `3`, and he consumed 3 units of energy.\n\nJohn wants to combine all the fruits into 1 pile with the least energy.\n\nYour task is to help John, calculate the minimum energy he costs.\n\n# Input\n\n- `fruits`: An array of positive integers. Each element represents the weight of a pile of fruit.\n  \n  Javascript:\n  - 1 <= fruits.length <= 10000\n  - 1 <= fruits[i] <= 10000\n  \n  Python:\n  - 1 <= len(fruits) <= 5000\n  - 1 <= fruits[i] <= 10000\n\n# Output\n\nAn integer. the minimum energy John costs.\n\n\n# Examples\n\nFor `fruits = [1,2,9]`, the output should be `15`.\n\n```\n3 piles:  1  2  9\ncombine 1 and 2 to 3, cost 3 units of energy.\n2 piles:  3  9\ncombine 3 and 9 to 12, cost 12 units of energy.\n1 pile:  12\n\nThe total units of energy is 3 + 12 = 15 units\n```\n\nFor `fruits = [100]`, the output should be `0`.\n\nThere's only 1 pile. So no need combine it.\n\"\"\"", "inputs": [[[1, 2, 9]], [[100]], [[1, 2]], [[4, 3, 5, 6, 10, 20]], [[87, 84, 42, 34, 24, 81, 60, 48, 75]], [[11, 9, 20, 10, 21, 35, 15, 34, 48, 76, 94, 28, 79, 16, 4, 41, 98, 30, 35, 92, 93, 33, 100, 93, 64, 23, 37, 6, 86, 27, 48, 16, 66, 99, 61, 83, 3, 5, 95]]], "outputs": [[15], [0], [3], [111], [1663], [9056]], "starter_code": "def comb(fruits):", "canonical_solution": "from heapq import heappop, heappush\n\ndef comb(fruits):\n    total, heap = (0, sorted(fruits))\n    while len(heap) > 1:\n        cost = heappop(heap) + heappop(heap)\n        heappush(heap, cost)\n        total += cost\n    return total", "entry_point": "comb", "task_id": "TACO_lite/98", "input_output_examples": [[[[1, 2, 9]], [[100]]], [[15], [0]]]}
{"requirement": "def cards_and_pero(s):\n\"\"\"# Task\n Pero has been into robotics recently, so he decided to make a robot that checks whether a deck of poker cards is complete.\n\n He’s already done a fair share of work - he wrote a programme that recognizes the suits of the cards. For simplicity’s sake, we can assume that all cards have a suit and a number.\n\n The suit of the card is one of the characters `\"P\", \"K\", \"H\", \"T\"`, and the number of the card is an integer between `1` and `13`. The robot labels each card in the format `TXY` where `T` is the suit and `XY` is the number. If the card’s number consists of one digit, then X = 0. For example, the card of suit `\"P\"` and number `9` is labelled `\"P09\"`.\n\n A complete deck has `52` cards in total. For each of the four suits there is exactly one card with a number between `1` and `13`.\n\n The robot has read the labels of all the cards in the deck and combined them into the string `s`.\n \n Your task is to help Pero finish the robot by writing a program that reads the string made out of card labels and returns the number of cards that are missing for each suit.\n\n If there are two same cards in the deck, return array with `[-1, -1, -1, -1]` instead.\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  A correct string of card labels. 0 ≤ |S| ≤ 1000\n\n\n - `[output]` an integer array\n\n  Array of four elements, representing the number of missing card of suits `\"P\", \"K\", \"H\", and \"T\"` respectively. If there are two same cards in the deck, return `[-1, -1, -1, -1]` instead.\n\n\n# Example\n\n For `s = \"P01K02H03H04\"`, the output should be `[12, 12, 11, 13]`.\n \n `1` card from `\"P\"` suit, `1` card from `\"K\"` suit, `2` cards from `\"H\"` suit, no card from `\"T\"` suit.\n \n For `s = \"H02H10P11H02\"`, the output should be `[-1, -1, -1, -1]`.\n \n There are two same cards `\"H02\"` in the string `s`.\n\"\"\"", "inputs": [["P01K02H03H04"], ["H02H10P11H02"], ["P10K10H10T01"], ["P05P01P02P03P13P09P11P07K01P12K03K02K13K12K10K08H03H02H13H12H10H08T01T03T02T13T12T10T08P04K07H02T07H06T11K11T05K05H05H11"], ["P01K02P03P11K09K10P13P10"]], "outputs": [[[12, 12, 11, 13]], [[-1, -1, -1, -1]], [[12, 12, 12, 12]], [[-1, -1, -1, -1]], [[8, 10, 13, 13]]], "starter_code": "def cards_and_pero(s):", "canonical_solution": "from collections import defaultdict\n\ndef cards_and_pero(s):\n    deck = defaultdict(set)\n    for n in range(0, len(s), 3):\n        card = s[n:n + 3]\n        if card[1:] in deck[card[0]]:\n            return [-1, -1, -1, -1]\n        deck[card[0]] |= {card[1:]}\n    return [13 - len(deck[suit]) for suit in 'PKHT']", "entry_point": "cards_and_pero", "task_id": "TACO_lite/99", "input_output_examples": [[["P01K02H03H04"], ["H02H10P11H02"]], [[12, 12, 11, 13], [-1, -1, -1, -1]]]}
{"requirement": "def pattern(n):\n\"\"\"## Task:\n\nYou have to write a function **pattern** which returns the following Pattern(See Examples) upto (2n-1) rows, where n is parameter.\n\n### Rules/Note:\n* If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.\n* All the lines in the pattern have same length i.e equal to the number of characters in the longest line.\n* Range of n is (-∞,100]\n\n## Examples:\n\npattern(5):\n\n        1    \n       121   \n      12321  \n     1234321 \n    123454321\n     1234321 \n      12321  \n       121   \n        1    \n\n\npattern(10):\n\n             1         \n            121        \n           12321       \n          1234321      \n         123454321     \n        12345654321    \n       1234567654321   \n      123456787654321  \n     12345678987654321 \n    1234567890987654321\n     12345678987654321 \n      123456787654321  \n       1234567654321   \n        12345654321    \n         123454321     \n          1234321      \n           12321       \n            121        \n             1         \n\npattern(15):\n\n                  1              \n                 121             \n                12321            \n               1234321           \n              123454321          \n             12345654321         \n            1234567654321        \n           123456787654321       \n          12345678987654321      \n         1234567890987654321     \n        123456789010987654321    \n       12345678901210987654321   \n      1234567890123210987654321  \n     123456789012343210987654321 \n    12345678901234543210987654321\n     123456789012343210987654321 \n      1234567890123210987654321  \n       12345678901210987654321   \n        123456789010987654321    \n         1234567890987654321     \n          12345678987654321      \n           123456787654321       \n            1234567654321        \n             12345654321         \n              123454321          \n               1234321           \n                12321            \n                 121             \n                  1              \n\npattern(20):\n\n                       1                   \n                      121                  \n                     12321                 \n                    1234321                \n                   123454321               \n                  12345654321              \n                 1234567654321             \n                123456787654321            \n               12345678987654321           \n              1234567890987654321          \n             123456789010987654321         \n            12345678901210987654321        \n           1234567890123210987654321       \n          123456789012343210987654321      \n         12345678901234543210987654321     \n        1234567890123456543210987654321    \n       123456789012345676543210987654321   \n      12345678901234567876543210987654321  \n     1234567890123456789876543210987654321 \n    123456789012345678909876543210987654321\n     1234567890123456789876543210987654321 \n      12345678901234567876543210987654321  \n       123456789012345676543210987654321   \n        1234567890123456543210987654321    \n         12345678901234543210987654321     \n          123456789012343210987654321      \n           1234567890123210987654321       \n            12345678901210987654321        \n             123456789010987654321         \n              1234567890987654321          \n               12345678987654321           \n                123456787654321            \n                 1234567654321             \n                  12345654321              \n                   123454321               \n                    1234321                \n                     12321                 \n                      121                  \n                       1\n\"\"\"", "inputs": [[1], [3], [7], [0], [-25]], "outputs": [["1"], ["  1  \n 121 \n12321\n 121 \n  1  "], ["      1      \n     121     \n    12321    \n   1234321   \n  123454321  \n 12345654321 \n1234567654321\n 12345654321 \n  123454321  \n   1234321   \n    12321    \n     121     \n      1      "], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    lines = []\n    for i in range(1, n + 1):\n        line = ' ' * (n - i)\n        line += ''.join((str(j % 10) for j in range(1, i + 1)))\n        line += line[::-1][1:]\n        lines.append(line)\n    return '\\n'.join(lines + lines[::-1][1:])", "entry_point": "pattern", "task_id": "TACO_lite/100", "input_output_examples": [[[5], [10], [15], [20]], [["    1    ", "   121   ", "  12321  ", " 1234321 ", "123454321", " 1234321 ", "  12321  ", "   121   ", "    1    "], ["             1         ", "            121        ", "           12321       ", "          1234321      ", "         123454321     ", "        12345654321    ", "       1234567654321   ", "      123456787654321  ", "     12345678987654321 ", "    1234567890987654321", "     12345678987654321 ", "      123456787654321  ", "       1234567654321   ", "        12345654321    ", "         123454321     ", "          1234321      ", "           12321       ", "            121        ", "             1         "], ["                  1              ", "                 121             ", "                12321            ", "               1234321           ", "              123454321          ", "             12345654321         ", "            1234567654321        ", "           123456787654321       ", "          12345678987654321      ", "         1234567890987654321     ", "        123456789010987654321    ", "       12345678901210987654321   ", "      1234567890123210987654321  ", "     123456789012343210987654321 ", "    12345678901234543210987654321", "     123456789012343210987654321 ", "      1234567890123210987654321  ", "       12345678901210987654321   ", "        123456789010987654321    ", "         1234567890987654321     ", "          12345678987654321      ", "           123456787654321       ", "            1234567654321        ", "             12345654321         ", "              123454321          ", "               1234321           ", "                12321            ", "                 121             ", "                  1              "], ["                       1                   ", "                      121                  ", "                     12321                 ", "                    1234321                ", "                   123454321               ", "                  12345654321              ", "                 1234567654321             ", "                123456787654321            ", "               12345678987654321           ", "              1234567890987654321          ", "             123456789010987654321         ", "            12345678901210987654321        ", "           1234567890123210987654321       ", "          123456789012343210987654321      ", "         12345678901234543210987654321     ", "        1234567890123456543210987654321    ", "       123456789012345676543210987654321   ", "      12345678901234567876543210987654321  ", "     1234567890123456789876543210987654321 ", "    123456789012345678909876543210987654321", "     1234567890123456789876543210987654321 ", "      12345678901234567876543210987654321  ", "       123456789012345676543210987654321   ", "        1234567890123456543210987654321    ", "         12345678901234543210987654321     ", "          123456789012343210987654321      ", "           1234567890123210987654321       ", "            12345678901210987654321        ", "             123456789010987654321         ", "              1234567890987654321          ", "               12345678987654321           ", "                123456787654321            ", "                 1234567654321             ", "                  12345654321              ", "                   123454321               ", "                    1234321                ", "                     12321                 ", "                      121                  ", "                       1                   "]]]}
{"requirement": "def alphabetic(s):\n\"\"\"Your task is very simple. Just write a function `isAlphabetic(s)`, which takes an input string `s` in lowercase and returns `true`/`false` depending on whether the string is in alphabetical order or not.\n\nFor example, `isAlphabetic('kata')` is False as 'a' comes after 'k', but `isAlphabetic('ant')` is True.\n\nGood luck :)\n\"\"\"", "inputs": [["asd"], ["codewars"], ["door"], ["cell"], ["z"], [""]], "outputs": [[false], [false], [true], [true], [true], [true]], "starter_code": "def alphabetic(s):", "canonical_solution": "def alphabetic(s):\n    return sorted(s) == list(s)", "entry_point": "alphabetic", "task_id": "TACO_lite/101", "input_output_examples": [[["kata"], ["ant"], ["asd"]], [[false], [true], [false]]]}
{"requirement": "def histogram(lst, w):\n\"\"\"You will be given an array of non-negative integers and positive integer bin width. \n\nYour task is to create the Histogram method that will return histogram data corresponding to the input array. The histogram data is an array that stores under index i the count of numbers that belong to bin i. The first bin always starts with zero. \n\nOn empty input you should return empty output.\n\nExamples:\n\nFor input data [1, 1, 0, 1, 3, 2, 6] and binWidth=1 the result will be [1, 3, 1, 1, 0, 0, 1] as the data contains single element \"0\", 3 elements \"1\" etc.\nFor the same data and binWidth=2 the result will be [4, 2, 0, 1]\nFor input data [7] and binWidth=1 the result will be [0, 0, 0, 0, 0, 0, 0, 1]\n\"\"\"", "inputs": [[[1, 1, 0, 1, 3, 2, 6], 1], [[1, 1, 0, 1, 3, 2, 6], 2], [[], 1], [[8], 1]], "outputs": [[[1, 3, 1, 1, 0, 0, 1]], [[4, 2, 0, 1]], [[]], [[0, 0, 0, 0, 0, 0, 0, 0, 1]]], "starter_code": "def histogram(lst, w):", "canonical_solution": "def histogram(lst, w):\n    lst = [n // w for n in lst]\n    m = max(lst, default=-1) + 1\n    return [lst.count(n) for n in range(m)]", "entry_point": "histogram", "task_id": "TACO_lite/102", "input_output_examples": [[[[1, 1, 0, 1, 3, 2, 6], 1], [[1, 1, 0, 1, 3, 2, 6], 2], [[7], 1]], [[1, 3, 1, 1, 0, 0, 1], [4, 2, 0, 1], [0, 0, 0, 0, 0, 0, 0, 1]]]}
{"requirement": "def date_correct(text):\n\"\"\"A very easy task for you!\n\nYou have to create a method, that corrects a given date string.\nThere was a problem in addition, so many of the date strings are broken.\nDate-Format is european. That means \"DD.MM.YYYY\".\n\n\nSome examples:\n\n\"30.02.2016\" -> \"01.03.2016\"\n\"40.06.2015\" -> \"10.07.2015\"\n\"11.13.2014\" -> \"11.01.2015\"\n\"99.11.2010\" -> \"07.02.2011\"\n\nIf the input-string is null or empty return exactly this value!\nIf the date-string-format is invalid, return null.\n\nHint: Correct first the month and then the day!\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have created other katas. Have a look if you like coding and challenges.\n\"\"\"", "inputs": [[null], [""], ["01112016"], ["01,11,2016"], ["0a.1c.2016"], ["03.12.2016"], ["30.02.2016"], ["40.06.2015"], ["11.13.2014"], ["33.13.2014"], ["99.11.2010"]], "outputs": [[null], [""], [null], [null], [null], ["03.12.2016"], ["01.03.2016"], ["10.07.2015"], ["11.01.2015"], ["02.02.2015"], ["07.02.2011"]], "starter_code": "def date_correct(text):", "canonical_solution": "import re\nfrom datetime import date, timedelta\n\ndef date_correct(text):\n    if not text:\n        return text\n    try:\n        d, m, y = map(int, re.match('^(\\\\d{2})\\\\.(\\\\d{2})\\\\.(\\\\d{4})$', text).groups())\n        mo, m = divmod(m - 1, 12)\n        return (date(y + mo, m + 1, 1) + timedelta(days=d - 1)).strftime('%d.%m.%Y')\n    except AttributeError:\n        return None", "entry_point": "date_correct", "task_id": "TACO_lite/103", "input_output_examples": [[["30.02.2016"], ["40.06.2015"], ["11.13.2014"], ["99.11.2010"], [""]], [["01.03.2016"], ["10.07.2015"], ["11.01.2015"], ["07.02.2011"], [""]]]}
{"requirement": "def stringy(size):\n\"\"\"write me a function `stringy` that takes a `size` and returns a `string` of alternating `'1s'` and `'0s'`.\n\nthe string should start with a `1`.\n\na string with `size` 6 should return :`'101010'`.\n\nwith `size` 4 should return : `'1010'`.\n\nwith `size` 12 should return : `'101010101010'`.\n\nThe size will always be positive and will only use whole numbers.\n\"\"\"", "inputs": [[3], [5], [12], [26], [28]], "outputs": [["101"], ["10101"], ["101010101010"], ["10101010101010101010101010"], ["1010101010101010101010101010"]], "starter_code": "def stringy(size):", "canonical_solution": "def stringy(size):\n    return ''.join([str(i % 2) for i in range(1, size + 1)])", "entry_point": "stringy", "task_id": "TACO_lite/104", "input_output_examples": [[[6], [4], [12], [3]], [["101010"], ["1010"], ["101010101010"], ["101"]]]}
{"requirement": "def has_two_cube_sums(n):\n\"\"\"Create a function\n\n```python\nhas_two_cube_sums(n)\n```\n\nwhich checks if a given number `n` can be written as the sum of two cubes in two different ways: `n = a³+b³ = c³+d³`.\nAll the numbers `a`, `b`, `c` and `d` should be different and greater than `0`.\n\nE.g. 1729 = 9³+10³ = 1³+12³.\n\n```python\nhas_two_cube_sums(1729); // true\nhas_two_cube_sums(42);   // false\n```\n\"\"\"", "inputs": [[1], [1729], [42], [4103], [4102], [4104], [4105], [4106], [0], [46163]], "outputs": [[false], [true], [false], [false], [false], [true], [false], [false], [false], [false]], "starter_code": "def has_two_cube_sums(n):", "canonical_solution": "def has_two_cube_sums(n):\n    cubic_list = [i ** 3 for i in range(1, int(n ** (1.0 / 3.0)) + 1)]\n    return sum([n != 2 * c and n - c in cubic_list for c in cubic_list]) > 3", "entry_point": "has_two_cube_sums", "task_id": "TACO_lite/105", "input_output_examples": [[[1729], [42]], [[true], [false]]]}
{"requirement": "def sort_array(arr):\n\"\"\"You have an array of numbers.  \nYour task is to sort ascending odd numbers but even numbers must be on their places.\n\nZero isn't an odd number and you don't need to move it. If you have an empty array, you need to return it.\n\n*Example*\n```python\nsort_array([5, 3, 2, 8, 1, 4]) == [1, 3, 2, 8, 5, 4]\n```\n\"\"\"", "inputs": [[[5, 3, 2, 8, 1, 4, 11]], [[2, 22, 37, 11, 4, 1, 5, 0]], [[1, 111, 11, 11, 2, 1, 5, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[0, 1, 2, 3, 4, 9, 8, 7, 6, 5]]], "outputs": [[[1, 3, 2, 8, 5, 4, 11]], [[2, 22, 1, 5, 4, 11, 37, 0]], [[1, 1, 5, 11, 2, 11, 111, 0]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 0]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[0, 1, 2, 3, 4, 5, 8, 7, 6, 9]]], "starter_code": "def sort_array(arr):", "canonical_solution": "def sort_array(arr):\n    odds = sorted((x for x in arr if x % 2 != 0), reverse=True)\n    return [x if x % 2 == 0 else odds.pop() for x in arr]", "entry_point": "sort_array", "task_id": "TACO_lite/106", "input_output_examples": [[[[5, 3, 2, 8, 1, 4]]], [[[1, 3, 2, 8, 5, 4]]]]}
{"requirement": "def lowercase_count(strng):\n\"\"\"Your task is simply to count the total number of lowercase letters in a string.\n\n## Examples\n\"\"\"", "inputs": [["abc"], ["abcABC123"], ["abcABC123!@#$%^&*()_-+=}{[]|':;?/>.<,~"], [""], ["ABC123!@#$%^&*()_-+=}{[]|':;?/>.<,~"], ["abcdefghijklmnopqrstuvwxyz"]], "outputs": [[3], [3], [3], [0], [0], [26]], "starter_code": "def lowercase_count(strng):", "canonical_solution": "def lowercase_count(strng):\n    return sum((a.islower() for a in strng))", "entry_point": "lowercase_count", "task_id": "TACO_lite/107", "input_output_examples": [[["abc"]], [[3]]]}
{"requirement": "def only_duplicates(string):\n\"\"\"Given a string, remove any characters that are unique from the string.\n\nExample: \n\ninput: \"abccdefee\"\n\noutput: \"cceee\"\n\"\"\"", "inputs": [["abccdefee"], ["hello"], ["colloquial"], ["foundersandcoders"], ["12314256aaeff"]], "outputs": [["cceee"], ["ll"], ["ollol"], ["ondersndoders"], ["1212aaff"]], "starter_code": "def only_duplicates(string):", "canonical_solution": "from collections import Counter\n\ndef only_duplicates(string):\n    cs = Counter(string)\n    return ''.join((c for c in string if cs[c] > 1))", "entry_point": "only_duplicates", "task_id": "TACO_lite/108", "input_output_examples": [[["abccdefee"]], [["cceee"]]]}
{"requirement": "def plant_doubling(n):\n\"\"\"# Task\n Lonerz got some crazy growing plants and he wants to grow them nice and well.\n \n Initially, the garden is completely barren. \n \n Each morning, Lonerz can put any number of plants into the garden to grow. \n \n And at night, each plant mutates into two plants. \n \n Lonerz really hopes to see `n` plants in his garden.\n\n Your task is to find the minimum number of plants Lonerz has to plant to get `n` plants one day.\n\n# Example\n\n For `n = 5`, the output should be `2`.\n \n Lonerz hopes to see `5` plants. He adds `1` plant on the first morning and on the third morning there would be `4` plants in the garden. He then adds `1` more and sees `5` plants. \n \n So, Lonerz only needs to add 2 plants to his garden.\n \n For `n = 8,` the output should be `1`.\n \n Lonerz hopes to see `8` plants. Thus, he just needs to add `1` plant in the beginning and wait for it to double till 8.\n \n# Input/Output\n\n The number of plant lonerz hopes to see in his garden.\n \n \n - `[input]` integer `n`\n \n   `1 <= n <= 10^7`\n\n\n - `[output]` an integer\n\n The number of plants Lonerz needs to plant.\n\"\"\"", "inputs": [[5], [8], [536870911], [1]], "outputs": [[2], [1], [29], [1]], "starter_code": "def plant_doubling(n):", "canonical_solution": "def plant_doubling(n):\n    return bin(n).count('1')", "entry_point": "plant_doubling", "task_id": "TACO_lite/109", "input_output_examples": [[[5], [8]], [[2], [1]]]}
{"requirement": "def check_vowel(s, i):\n\"\"\"Check if it is a vowel(a, e, i, o, u,) on the ```n``` position in a string (the first argument). Don't forget about uppercase.\n\nA few cases:\n\n```\n{\ncheckVowel('cat', 1)  ->   true // 'a' is a vowel\ncheckVowel('cat', 0)  ->   false // 'c' is not a vowel\ncheckVowel('cat', 4)  ->   false // this position doesn't exist\n}\n```\nP.S. If n < 0, return false\n\"\"\"", "inputs": [["cat", 1], ["cat", 0], ["cat", 4], ["Amanda", -2], ["Amanda", 0], ["Amanda", 2]], "outputs": [[true], [false], [false], [false], [true], [true]], "starter_code": "def check_vowel(s, i):", "canonical_solution": "def check_vowel(s, i):\n    return 0 <= i < len(s) and s[i] in 'aieouAEIOU'", "entry_point": "check_vowel", "task_id": "TACO_lite/110", "input_output_examples": [[["cat", 1], ["cat", 0], ["cat", 4]], [[true], [false], [false]]]}
{"requirement": "def values(n):\n\"\"\"The palindromic number `595` is interesting because it can be written as the sum of consecutive squares: `6^2 + 7^2 + 8^2 + 9^2 + 10^2 + 11^2 + 12^2 = 595`.\n\nThere are exactly eleven palindromes below one-thousand that can be written as consecutive square sums. Note that `1 = 0^2 + 1^2` has not been included as this problem is concerned with the squares of positive integers.\n\nGiven an input `n`, find the count of all the numbers less than `n` that are both palindromic and can be written as the sum of consecutive squares.\n\nFor instance: `values(1000) = 11`. See test examples for more cases.  \n\nGood luck!\n\nThis Kata is borrowed from [Project Euler #125](https://projecteuler.net/problem=125)\n\nIf you like this Kata, please try:\n\n[Fixed length palindromes](https://www.codewars.com/kata/59f0ee47a5e12962cb0000bf)\n\n[Divisor harmony](https://www.codewars.com/kata/59bf97cd4f98a8b1cd00007e)\n\"\"\"", "inputs": [[100], [200], [300], [400], [1000], [100000], [1000000], [5000000], [9000000], [10000000]], "outputs": [[3], [4], [4], [5], [11], [30], [59], [78], [98], [110]], "starter_code": "def values(n):", "canonical_solution": "l, m, p = ([1], 10 ** 7, [])\nfor n in range(2, int(m ** 0.5) + 1):\n    l = [n * n + j for j in [0] + l]\n    p += [int(k) for k in map(str, l[1:]) if k == k[::-1]]\np = sorted(set(p))\nfrom bisect import bisect_left\n\ndef values(n):\n    return bisect_left(p, n)", "entry_point": "values", "task_id": "TACO_lite/111", "input_output_examples": [[[1000], [100]], [[11], [3]]]}
{"requirement": "def sum_them(n):\n\"\"\"For all x in the range of integers [0, 2 ** n), let y[x] be the binary exclusive-or of x and x // 2. Find the sum of all numbers in y.\n\nWrite a function sum_them that, given n, will return the value of the above sum.\n\nThis can be implemented a simple loop as shown in the initial code. But once n starts getting to higher numbers, such as 2000 (which will be tested), the loop is too slow.\n\nThere is a simple solution that can quickly find the sum. Find it!\n\nAssume that n is a nonnegative integer.\n\nHint: The complete solution can be written in two lines.\n\"\"\"", "inputs": [[0], [1], [2], [3], [4]], "outputs": [[0], [1], [6], [28], [120]], "starter_code": "def sum_them(n):", "canonical_solution": "def sum_them(n):\n    return 2 ** (n - 1) * (2 ** n - 1)", "entry_point": "sum_them", "task_id": "TACO_lite/112", "input_output_examples": [[[0]], [[0]]]}
{"requirement": "def travel(total_time, run_time, rest_time, speed):\n\"\"\"You have recently discovered that horses travel in a unique pattern - they're either running (at top speed) or resting (standing still).\n\nHere's an example of how one particular horse might travel:\n\n```\nThe horse Blaze can run at 14 metres/second for 60 seconds, but must then rest for 45 seconds.\n\nAfter 500 seconds Blaze will have traveled 4200 metres.\n```\n\nYour job is to write a function that returns how long a horse will have traveled after a given time.\n\n####Input: \n\n* totalTime - How long the horse will be traveling (in seconds)\n\n* runTime - How long the horse can run for before having to rest (in seconds)\n\n* restTime - How long the horse have to rest for after running (in seconds)\n\n* speed - The max speed of the horse (in metres/second)\n\"\"\"", "inputs": [[1000, 10, 127, 14], [1000, 10, 0, 10], [25, 50, 120, 18], [35869784, 90, 100, 5], [1234567, 4, 3, 11], [100000000, 21, 5, 14], [0, 100, 10, 14], [250, 0, 5, 14], [100, 10, 0, 14], [500, 100, 10, 0]], "outputs": [[1120], [10000], [450], [84954920], [7760148], [1130769276], [0], [0], [1400], [0]], "starter_code": "def travel(total_time, run_time, rest_time, speed):", "canonical_solution": "def travel(total_time, run_time, rest_time, speed):\n    q, r = divmod(total_time, run_time + rest_time)\n    return (q * run_time + min(r, run_time)) * speed", "entry_point": "travel", "task_id": "TACO_lite/113", "input_output_examples": [[[500, 60, 45, 14], [1000, 10, 127, 14]], [[4200], [1120]]]}
{"requirement": "def locate(seq, value):\n\"\"\"Write a function that gets a sequence and value and returns `true/false` depending on whether the variable exists in a multidimentional sequence.\n\nExample:\n```\nlocate(['a','b',['c','d',['e']]],'e'); // should return true\nlocate(['a','b',['c','d',['e']]],'a'); // should return true\nlocate(['a','b',['c','d',['e']]],'f'); // should return false\n```\n\"\"\"", "inputs": [[["a", "b", ["c", "d", ["e"]]], "a"], [["a", "b", ["c", "d", ["e"]]], "d"], [["a", "b", ["c", "d", ["e"]]], "e"], [["a", "b", ["c", "d", ["e"]]], "f"], [["a", "b", ["c", "d", ["e", ["a", "b", ["c", "d", ["e4"]]]]]], "e4"], [["a", "b", ["c", "d", ["e", ["a", "b", ["c", "d", ["e", ["a", "b", ["c", "d", ["e4", ["a", "b", ["c", "d", ["e", ["a", "b", ["c", "d", ["e", ["a", "b", ["c", "d", ["e14"]]]]]]]]]]]]]]]]]], "e"]], "outputs": [[true], [true], [true], [false], [true], [true]], "starter_code": "def locate(seq, value):", "canonical_solution": "def locate(seq, value):\n    for s in seq:\n        if s == value or (isinstance(s, list) and locate(s, value)):\n            return True\n    return False", "entry_point": "locate", "task_id": "TACO_lite/114", "input_output_examples": [[[["a", "b", ["c", "d", ["e"]]], "e"], [["a", "b", ["c", "d", ["e"]]], "a"], [["a", "b", ["c", "d", ["e"]]], "f"]], [[true], [true], [false]]]}
{"requirement": "def growing_plant(up, down, h):\n\"\"\"### Task\n Each day a plant is growing by `upSpeed` meters. Each night that plant's height decreases by `downSpeed` meters due to the lack of sun heat. Initially, plant is 0 meters tall. We plant the seed at the beginning of a day. We want to know when the height of the plant will reach a certain level.\n\n### Example\n\n For `upSpeed = 100, downSpeed = 10 and desiredHeight = 910`, the output should be `10`.\n \n ```\n After day 1 --> 100\n After night 1 --> 90\n After day 2 --> 190\n After night 2 --> 180\n After day 3 --> 280\n After night 3 --> 270\n After day 4 --> 370\n After night 4 --> 360\n After day 5 --> 460\n After night 5 --> 450\n After day 6 --> 550\n After night 6 --> 540\n After day 7 --> 640\n After night 7 --> 630\n After day 8 --> 730\n After night 8 --> 720\n After day 9 --> 820\n After night 9 --> 810\n After day 10 --> 910 \n ```\n \n For `upSpeed = 10, downSpeed = 9 and desiredHeight = 4`, the output should be `1`.\n \n Because the plant reach to the desired height at day 1(10 meters).\n \n ```\n After day 1 --> 10\n ```\n\n### Input/Output\n\n```if-not:sql\n - `[input]` integer `upSpeed`\n\n    A positive integer representing the daily growth.\n\n    Constraints: `5 ≤ upSpeed ≤ 100.`\n\n\n - `[input]` integer `downSpeed`\n\n    A positive integer representing the nightly decline.\n\n    Constraints: `2 ≤ downSpeed < upSpeed.`\n\n\n - `[input]` integer `desiredHeight`\n\n    A positive integer representing the threshold.\n\n    Constraints: `4 ≤ desiredHeight ≤ 1000.`\n\n - `[output]` an integer\n\n    The number of days that it will take for the plant to reach/pass desiredHeight (including the last day in the total count).\n```\n```if:sql\n## Input\n\n~~~\n-----------------------------------------\n|     Table     |    Column      | Type |\n|---------------+----------------+------|\n| growing_plant | down_speed     | int  |\n|               | up_speed       | int  |\n|               | desired_height | int  |\n-----------------------------------------\n~~~\n\n### Columns\n* `up_speed`: A positive integer representing the daily growth. Constraints: `5 ≤ up_speed ≤ 100.`\n* `down_speed`: A positive integer representing the nightly decline. Constraints: `2 ≤ down_speed < up_speed.`\n* `desired_height`: A positive integer representing the threshold. Constraints: `4 ≤ desired_height ≤ 1000.`\n\n## Output\n\n~~~\n-------------------\n|  Column  | Type |\n|----------+------|\n| id       | int  |\n| num_days | int  |\n-------------------\n~~~\n\n`num_days` is the number of days that it will take for the plant to reach/pass desiredHeight (including the last day in the total count).\n```\n\"\"\"", "inputs": [[100, 10, 910], [10, 9, 4], [5, 2, 5], [5, 2, 6]], "outputs": [[10], [1], [1], [2]], "starter_code": "def growing_plant(up, down, h):", "canonical_solution": "from math import ceil\n\ndef growing_plant(up, down, h):\n    return max(ceil((h - down) / (up - down)), 1)", "entry_point": "growing_plant", "task_id": "TACO_lite/115", "input_output_examples": [[[100, 10, 910], [10, 9, 4]], [[10], [1]]]}
{"requirement": "def siegfried(week, txt):\n\"\"\"# Do you ever wish you could talk like Siegfried of KAOS ?\n\n## YES, of course you do!\n\nhttps://en.wikipedia.org/wiki/Get_Smart\n\n\n\n# Task\n\nWrite the function ```siegfried``` to replace the letters of a given sentence.\n\nApply the rules using the course notes below. Each week you will learn some more rules.\n\nUnd by ze fifz vek yu vil be speakink viz un aksent lik Siegfried viz no trubl at al!\n\n\n# Lessons\n\n## Week 1\n\n* ```ci``` -> ```si```\n* ```ce``` -> ```se```\n* ```c``` -> ```k``` (except ```ch``` leave alone)\n\n## Week 2\n\n* ```ph``` -> ```f```\n\n## Week 3\n\n* remove trailing ```e``` (except for all 2 and 3 letter words)\n* replace double letters with single letters (e.g. ```tt``` -> ```t```)\n\n## Week 4\n\n* ```th``` -> ```z```\n* ```wr``` -> ```r```\n* ```wh``` -> ```v```\n* ```w``` -> ```v```\n\n## Week 5\n\n* ```ou``` -> ```u```\n* ```an``` -> ```un```\n* ```ing``` -> ```ink``` (but only when ending words)\n* ```sm``` -> ```schm``` (but only when beginning words)\n\n\n\n# Notes\n\n* You must retain the case of the original sentence\n* Apply rules strictly in the order given above\n* Rules are cummulative. So for week 3 first apply week 1 rules, then week 2 rules, then week 3 rules\n\"\"\"", "inputs": [[1, "City civilians"], [1, "Centre receiver"], [1, "Chatanooga choo choo crashed"], [1, "Capital city cats chew cheese"], [2, "Photo of 5 pheasants with graphs"], [3, "Meet me at the same place at noon"], [3, "The time is now"], [3, "Be quite quiet"], [3, "Aardvarks are nice most of the time"], [5, "And another thing Mr Smart, I want no more trouble!"], [5, "You ought to behave yourself Smart!"], [5, "Smart and 99 were husband and wife"], [5, ".. Mr Maxwell be The Smart .."], [5, ".. Mr Maxwell be We Smart .."], [5, "Be be The the We we Me me She she"], [5, "be Be the The we We me Me she She"], [5, "be the wee me"], [5, "be we Maxwell be We bee wee"], [5, "Be like Me"], [5, "be the same"], [5, "The same bee we see"], [5, "It was an inglorious ending"]], "outputs": [["Sity sivilians"], ["Sentre reseiver"], ["Chatanooga choo choo krashed"], ["Kapital sity kats chew cheese"], ["Foto of 5 feasants with grafs"], ["Met me at the sam plas at non"], ["The tim is now"], ["Be quit quiet"], ["Ardvarks are nis most of the tim"], ["Und unozer zink Mr Schmart, I vunt no mor trubl!"], ["Yu ught to behav yurself Schmart!"], ["Schmart und 99 ver husbund und vif"], [".. Mr Maxvel be Ze Schmart .."], [".. Mr Maxvel be Ve Schmart .."], ["Be be Ze ze Ve ve Me me She she"], ["be Be ze Ze ve Ve me Me she She"], ["be ze ve me"], ["be ve Maxvel be Ve be ve"], ["Be lik Me"], ["be ze sam"], ["Ze sam be ve se"], ["It vas un inglorius endink"]], "starter_code": "def siegfried(week, txt):", "canonical_solution": "import re\nPATTERNS = [re.compile('(?i)ci|ce|c(?!h)'), re.compile('(?i)ph'), re.compile('(?i)(?<!\\\\b[a-z]{1})(?<!\\\\b[a-z]{2})e\\\\b|([a-z])\\\\1'), re.compile('(?i)th|w[rh]?'), re.compile('(?i)ou|an|ing\\\\b|\\\\bsm')]\nCHANGES = {'ci': 'si', 'ce': 'se', 'c': 'k', 'ph': 'f', 'th': 'z', 'wr': 'r', 'wh': 'v', 'w': 'v', 'ou': 'u', 'an': 'un', 'ing': 'ink', 'sm': 'schm'}\n\ndef change(m):\n    tok = m.group(0)\n    rep = CHANGES.get(tok.lower(), '' if None in m.groups() else m.group()[0])\n    if tok[0].isupper():\n        rep = rep.title()\n    return rep\n\ndef siegfried(week, txt):\n    for n in range(week):\n        txt = PATTERNS[n].sub(change, txt)\n    return txt", "entry_point": "siegfried", "task_id": "TACO_lite/116", "input_output_examples": [[["City civilians"]], [["Sity sivilians"]]]}
{"requirement": "def title_to_number(title):\n\"\"\"Write a function \n\n`titleToNumber(title) or title_to_number(title) or titleToNb title ...`\n\n(depending on the language)\n\nthat given a column title as it appears in an Excel sheet, returns its corresponding column number. All column titles will be uppercase.\n\nExamples:\n```\ntitleTonumber('A') === 1\ntitleTonumber('Z') === 26\ntitleTonumber('AA') === 27\n```\n\"\"\"", "inputs": [["A"], ["Z"], ["AA"], ["AZ"], ["BA"], ["CODEWARS"], ["ZZZTOP"], ["OYAJI"], ["LONELINESS"], ["UNFORGIVABLE"]], "outputs": [[1], [26], [27], [52], [53], [28779382963], [321268054], [7294985], [68400586976949], [79089429845931757]], "starter_code": "def title_to_number(title):", "canonical_solution": "def title_to_number(title):\n    ret = 0\n    for i in title:\n        ret = ret * 26 + ord(i) - 64\n    return ret", "entry_point": "title_to_number", "task_id": "TACO_lite/117", "input_output_examples": [[["A"], ["Z"], ["AA"]], [[1], [26], [27]]]}
{"requirement": "def say_hello(name):\n\"\"\"## Debugging sayHello function\n\nThe starship Enterprise has run into some problem when creating a program to greet everyone as they come aboard. It is your job to fix the code and get the program working again!\n\nExample output: \n```\nHello, Mr. Spock\n```\n\"\"\"", "inputs": [["Mr. Spock"], ["Captain Kirk"], ["Liutenant Uhura"], ["Dr. McCoy"], ["Mr. Scott"]], "outputs": [["Hello, Mr. Spock"], ["Hello, Captain Kirk"], ["Hello, Liutenant Uhura"], ["Hello, Dr. McCoy"], ["Hello, Mr. Scott"]], "starter_code": "def say_hello(name):", "canonical_solution": "def say_hello(name):\n    return f'Hello, {name}'", "entry_point": "say_hello", "task_id": "TACO_lite/118", "input_output_examples": [[["Mr. Spock"]], [["Hello, Mr. Spock"]]]}
{"requirement": "def arr2bin(arr):\n\"\"\"Given an array containing only integers, add all the elements and return the binary equivalent of that sum.\n\nIf the array contains any non-integer element (e.g. an object, a float, a string and so on), return false.\n\n**Note:** The sum of an empty array is zero.\n\n```python\narr2bin([1,2]) == '11'\narr2bin([1,2,'a']) == False\n```\n\"\"\"", "inputs": [[[1, 2]], [[1, 2, 3, 4, 5]], [[1, 10, 100, 1000]], [[1, 2, -1, -2]], [[1, 2, -1, -2, 1]], [[]]], "outputs": [["11"], ["1111"], ["10001010111"], ["0"], ["1"], ["0"]], "starter_code": "def arr2bin(arr):", "canonical_solution": "def arr2bin(arr):\n    for x in arr:\n        if type(x) != int:\n            return False\n    return '{0:b}'.format(sum(arr))", "entry_point": "arr2bin", "task_id": "TACO_lite/119", "input_output_examples": [[[[1, 2]], [[1, 2, "a"]]], [["11"], [false]]]}
{"requirement": "def valid_parentheses(string):\n\"\"\"Write a function called that takes a string of parentheses, and determines if the order of the parentheses is valid. The function should return `true` if the string is valid, and `false` if it's invalid.\n\n## Examples\n\n```\n\"()\"              =>  true\n\")(()))\"          =>  false\n\"(\"               =>  false\n\"(())((()())())\"  =>  true\n```\n\n## Constraints\n\n`0 <= input.length <= 100`\n\n~~~if-not:javascript,go\nAlong with opening (`(`) and closing (`)`) parenthesis, input may contain any valid ASCII characters.  Furthermore, the input string may be empty and/or not contain any parentheses at all.  Do **not** treat other forms of brackets as parentheses (e.g. `[]`, `{}`, `<>`).\n~~~\n\"\"\"", "inputs": [[")"], ["("], [""], ["hi)("], ["hi(hi)"], ["hi(hi)("], ["((())()())"], ["(c(b(a)))(d)"], ["hi(hi))("], ["())(()"]], "outputs": [[false], [false], [true], [false], [true], [false], [true], [true], [false], [false]], "starter_code": "def valid_parentheses(string):", "canonical_solution": "def valid_parentheses(string):\n    cnt = 0\n    for char in string:\n        if char == '(':\n            cnt += 1\n        if char == ')':\n            cnt -= 1\n        if cnt < 0:\n            return False\n    return True if cnt == 0 else False", "entry_point": "valid_parentheses", "task_id": "TACO_lite/120", "input_output_examples": [[["()"], [")(()))"], ["("], ["(())((()())())"]], [[true], [false], [false], [true]]]}
{"requirement": "def yoga(classroom, poses):\n\"\"\"Description\n\nLets imagine a yoga classroom as a Square 2D Array of Integers ```classroom```, with each integer representing a person, and the value representing their skill level.\n\n```\nclassroom = [\n            [3,2,1,3],\n            [1,3,2,1],\n            [1,1,1,2],\n            ]\n            \nposes = [1,7,5,9,10,21,4,3]\n```\n\nDuring a yoga class the instructor gives a list of integers ```poses``` representing a yoga pose that each person in the class will attempt to complete.\n\nA person can complete a yoga pose if the sum of their row and their skill level is greater than or equal to the value of the pose.\n\n Task\n\nYour task is to return the total amount poses completed for the entire ```classroom```.\n\nExample\n\n```\nclassroom = [\n            [1,1,0,1], #sum = 3\n            [2,0,6,0], #sum = 8\n            [0,2,2,0], #sum = 4\n            ]\n                    \nposes = [4, 0, 20, 10]\n\n3 people in row 1 can complete the first pose\nEverybody in row 1 can complete the second pose\nNobody in row 1 can complete the third pose\nNobody in row 1 can complete the fourth pose\n\nThe total poses completed for row 1 is 7\n\nYou'll need to return the total for all rows and all poses.\n```\n\nTranslations are welcomed!\n\"\"\"", "inputs": [[[[0, 0], [0, 0]], [1, 1, 0, 1, 2, 3, 0, 1, 5]], [[], [1, 3, 4]], [[[0, 0], [0, 0]], []], [[], []]], "outputs": [[8], [0], [0], [0]], "starter_code": "def yoga(classroom, poses):", "canonical_solution": "def yoga(classroom, poses):\n    total_poses = 0\n    for pose in poses:\n        for row in classroom:\n            for person in row:\n                if person + sum(row) >= pose:\n                    total_poses += 1\n    return total_poses", "entry_point": "yoga", "task_id": "TACO_lite/121", "input_output_examples": [[[[[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [4, 0, 20, 10]], [[[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [4, 0, 20, 10]], [[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [[[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [4, 0, 20, 10]], [0, 2, 2, 0], [[[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [4, 0, 20, 10]], [4, 0, 20, 10], [[[1, 1, 0, 1], [2, 0, 6, 0], [0, 2, 2, 0]], [4, 0, 20, 10]]], [[7, 8, 0, 0], [7], 7, [7, 9, 0, 0], [0, 2, 2, 0], [20], [4, 0, 20, 10], [7]]]}
{"requirement": "def sum_circles(*args):\n\"\"\"Write a function that takes as its parameters *one or more numbers which are the diameters of circles.* \n\nThe function should return the *total area of all the circles*, rounded to the nearest integer in a string that says \"We have this much circle: xyz\". \n\nYou don't know how many circles you will be given, but you can assume it will be at least one.\n\nSo: \n```python\nsum_circles(2) == \"We have this much circle: 3\"\nsum_circles(2, 3, 4) == \"We have this much circle: 23\"\n```\n\nTranslations and comments (and upvotes!) welcome!\n\"\"\"", "inputs": [[48, 7, 8, 9, 10], [1], [1, 1, 1, 2, 3, 4, 5], [894, 5778, 4839, 476], [4.5456, 746.5, 98.34, 344.543], [1, 1, 1], [13.58, 14.9, 56.99, 107.321], [56894.04839, 843975.4839, 4.08437403489], [5, 6, 7, 8, 9, 10, 105083, 48839, 4853, 28, 483]], "outputs": [["We have this much circle: 2040"], ["We have this much circle: 1"], ["We have this much circle: 45"], ["We have this much circle: 45417233"], ["We have this much circle: 538519"], ["We have this much circle: 2"], ["We have this much circle: 11916"], ["We have this much circle: 561977165367"], ["We have this much circle: 10564760498"]], "starter_code": "def sum_circles(*args):", "canonical_solution": "import math\n\ndef sum_circles(*args):\n    t = round(sum([math.pi * d ** 2 / 4 for d in args]))\n    return 'We have this much circle: {}'.format(int(t))", "entry_point": "sum_circles", "task_id": "TACO_lite/122", "input_output_examples": [[[2], [2, 3, 4], [48, 7, 8, 9, 10]], [["We have this much circle: 3"], ["We have this much circle: 23"], ["We have this much circle: 2040"]]]}
{"requirement": "def stat(strg):\n\"\"\"You are the \"computer expert\" of a local Athletic Association (C.A.A.).\nMany teams of runners come to compete. Each time you get a string of \nall race results of every team who has run.\nFor example here is a string showing the individual results of a team of 5 runners:\n\n` \"01|15|59, 1|47|6, 01|17|20, 1|32|34, 2|3|17\" `\n\nEach part of the string is of the form: ` h|m|s `\nwhere h, m, s (h for hour, m for minutes, s for seconds) are positive or null integer (represented as strings) with one or two digits.\nThere are no traps in this format.\n\nTo compare the results of the teams you are asked for giving\nthree statistics; **range, average and median**.\n\n`Range` : difference between the lowest and highest values. \nIn {4, 6, 9, 3, 7} the lowest value is 3, and the highest is 9, \nso the range is 9 − 3 = 6.\n\n`Mean or Average` : To calculate mean, add together all of the numbers \nin a set and then divide the sum by the total count of numbers.\n\n`Median` : In statistics, the median is the number separating the higher half \nof a data sample from the lower half. \nThe median of a finite list of numbers can be found by arranging all \nthe observations from lowest value to highest value and picking the middle one \n(e.g., the median of {3, 3, 5, 9, 11} is 5) when there is an odd number of observations. \nIf there is an even number of observations, then there is no single middle value; \nthe median is then defined to be the mean of the two middle values\n(the median of {3, 5, 6, 9} is (5 + 6) / 2 = 5.5).\n\nYour task is to return a string giving these 3 values.  For the example given above,\nthe string result will be\n\n`\"Range: 00|47|18 Average: 01|35|15 Median: 01|32|34\"`\n\nof the form:\n\n`\"Range: hh|mm|ss Average: hh|mm|ss Median: hh|mm|ss\"`\n\nwhere hh, mm, ss are integers (represented by strings) with *each 2 digits*.\n\n*Remarks*: \n\n1. if a result in seconds is ab.xy... it will be given **truncated** as ab.\n\n2. if the given string is \"\" you will return \"\"\n\"\"\"", "inputs": [["01|15|59, 1|47|16, 01|17|20, 1|32|34, 2|17|17"], ["02|15|59, 2|47|16, 02|17|20, 2|32|34, 2|17|17, 2|22|00, 2|31|41"], ["02|15|59, 2|47|16, 02|17|20, 2|32|34, 2|32|34, 2|17|17"], ["0|15|59, 0|16|16, 0|17|20, 0|22|34, 0|19|34, 0|15|0"], ["11|15|59, 10|16|16, 12|17|20, 9|22|34, 13|19|34, 11|15|17, 11|22|00, 10|26|37, 12|17|48, 9|16|30, 12|20|14, 11|25|11"], ["1|15|59, 1|16|16, 1|17|20, 1|22|34, 1|19|34, 1|15|17, 1|22|00, 1|26|37, 1|17|48, 1|16|30, 1|20|14, 1|25|11"]], "outputs": [["Range: 01|01|18 Average: 01|38|05 Median: 01|32|34"], ["Range: 00|31|17 Average: 02|26|18 Median: 02|22|00"], ["Range: 00|31|17 Average: 02|27|10 Median: 02|24|57"], ["Range: 00|07|34 Average: 00|17|47 Median: 00|16|48"], ["Range: 04|03|04 Average: 11|14|36 Median: 11|18|59"], ["Range: 00|11|20 Average: 01|19|36 Median: 01|18|41"]], "starter_code": "def stat(strg):", "canonical_solution": "def stat(strg):\n\n    def get_time(s):\n        hh, mm, ss = [int(v) for v in s.split('|')]\n        return hh * 3600 + mm * 60 + ss\n\n    def format_time(time):\n        hh = time // 3600\n        mm = time // 60 % 60\n        ss = time % 60\n        return '{hh:02d}|{mm:02d}|{ss:02d}'.format(**locals())\n\n    def get_range(times):\n        return times[-1] - times[0]\n\n    def get_average(times):\n        return sum(times) // len(times)\n\n    def get_median(times):\n        middle = len(times) >> 1\n        return times[middle] if len(times) & 1 else (times[middle - 1] + times[middle]) // 2\n    if strg == '':\n        return strg\n    times = [get_time(s) for s in strg.split(', ')]\n    times.sort()\n    rng = format_time(get_range(times))\n    avg = format_time(get_average(times))\n    mdn = format_time(get_median(times))\n    return 'Range: {rng} Average: {avg} Median: {mdn}'.format(**locals())", "entry_point": "stat", "task_id": "TACO_lite/123", "input_output_examples": [[["01|15|59, 1|47|6, 01|17|20, 1|32|34, 2|3|17"], ["01|15|59, 1|47|16, 01|17|20, 1|32|34, 2|17|17"], [""]], [["Range: 00|47|18 Average: 01|35|15 Median: 01|32|34"], ["Range: 01|01|18 Average: 01|38|05 Median: 01|32|34"], [""]]]}
{"requirement": "def get_section_id(scroll, sizes):\n\"\"\"Your website is divided vertically in sections, and each can be of different size (height).  \nYou need to establish the section index (starting at `0`) you are at, given the `scrollY` and `sizes` of all sections.  \nSections start with `0`, so if first section is `200` high, it takes `0-199` \"pixels\" and second starts at `200`.\n\n### Example:\n\n`getSectionIdFromScroll( 300, [300,200,400,600,100] )`\n\nwill output number `1` as it's the second section.\n\n`getSectionIdFromScroll( 1600, [300,200,400,600,100] )`\n\nwill output number `-1` as it's past last section.\n\nGiven the `scrollY` integer (always non-negative) and an array of non-negative integers (with at least one element), calculate the index (starting at `0`) or `-1` if `scrollY` falls beyond last section (indication of an error).\n\"\"\"", "inputs": [[1, [300, 200, 400, 600, 100]], [299, [300, 200, 400, 600, 100]], [300, [300, 200, 400, 600, 100]], [1599, [300, 200, 400, 600, 100]], [1600, [300, 200, 400, 600, 100]]], "outputs": [[0], [0], [1], [4], [-1]], "starter_code": "def get_section_id(scroll, sizes):", "canonical_solution": "def get_section_id(scroll, sizes):\n    c = 0\n    for idx, s in enumerate(sizes):\n        c += s\n        if scroll < c:\n            return idx\n    return -1", "entry_point": "get_section_id", "task_id": "TACO_lite/124", "input_output_examples": [[[300, [300, 200, 400, 600, 100]], [1600, [300, 200, 400, 600, 100]]], [[1], [-1]]]}
{"requirement": "def de_nico(key, msg):\n\"\"\"# Task\n\nWrite a function `deNico`/`de_nico()` that accepts two parameters:\n- `key`/`$key` - string consists of unique letters and digits\n- `message`/`$message` - string with encoded message \n\nand decodes the `message` using the `key`.  \n\nFirst create a numeric key basing on the provided `key` by assigning each letter position in which it is located after setting the letters from `key` in an alphabetical order.\n\nFor example, for the key `crazy` we will get `23154` because of `acryz` (sorted letters from the key).  \nLet's decode  `cseerntiofarmit on  ` using our `crazy` key.\n\n```\n1 2 3 4 5\n---------\nc s e e r\nn t i o f\na r m i t\n  o n   \n```\n\nAfter using the key:\n```\n2 3 1 5 4\n---------\ns e c r e\nt i n f o\nr m a t i\no n\n```\n\n# Notes \n\n- The `message` is never shorter than the `key`.\n- Don't forget to remove trailing whitespace after decoding the message\n\n# Examples\n\nCheck the test cases for more examples.\n\n# Related Kata\n\n[Basic Nico - encode](https://www.codewars.com/kata/5968bb83c307f0bb86000015)\n\"\"\"", "inputs": [["crazy", "cseerntiofarmit on  "], ["crazy", "cseerntiofarmit on"], ["abc", "abcd"], ["ba", "2143658709"], ["a", "message"], ["key", "eky"]], "outputs": [["secretinformation"], ["secretinformation"], ["abcd"], ["1234567890"], ["message"], ["key"]], "starter_code": "def de_nico(key, msg):", "canonical_solution": "def de_nico(key, msg):\n    ll, order, s = (len(key), [sorted(key).index(c) for c in key], '')\n    while msg:\n        s, msg = (s + ''.join((msg[i] for i in order if i < len(msg))), msg[ll:])\n    return s.strip()", "entry_point": "de_nico", "task_id": "TACO_lite/125", "input_output_examples": [[["crazy", "cseerntiofarmit on  "]], [["secretinformation"]]]}
{"requirement": "def group_cities(seq):\n\"\"\"## Task\n\nCreate a function that given a sequence of strings, groups the elements that can be obtained by rotating others, ignoring upper or lower cases. \n\nIn the event that an element appears more than once in the input sequence, only one of them will be taken into account for the result, discarding the rest. \n\n## Input\n\nSequence of strings. Valid characters for those strings are uppercase and lowercase characters from the alphabet and whitespaces.\n\n## Output\n\nSequence of elements. Each element is the group of inputs that can be obtained by rotating the strings. \n\nSort the elements of each group alphabetically. \n\nSort the groups descendingly by size and in the case of a tie, by the first element of the group alphabetically.\n\n## Examples\n\n```python\n['Tokyo', 'London', 'Rome', 'Donlon', 'Kyoto', 'Paris', 'Okyot'] --> [['Kyoto', 'Okyot', 'Tokyo'], ['Donlon', 'London'], ['Paris'], ['Rome']]\n\n['Rome', 'Rome', 'Rome', 'Donlon', 'London'] --> [['Donlon', 'London'], ['Rome']]\n\n[] --> []\n```\n\"\"\"", "inputs": [[["Tokyo", "London", "Rome", "Donlon", "Kyoto", "Paris", "Okyot"]], [["Tokyo", "London", "Rome", "Donlon"]], [["Rome", "Rome", "Rome", "Donlon", "London"]], [["Ab", "Aa"]], [[]]], "outputs": [[[["Kyoto", "Okyot", "Tokyo"], ["Donlon", "London"], ["Paris"], ["Rome"]]], [[["Donlon", "London"], ["Rome"], ["Tokyo"]]], [[["Donlon", "London"], ["Rome"]]], [[["Aa"], ["Ab"]]], [[]]], "starter_code": "def group_cities(seq):", "canonical_solution": "def group_cities(seq):\n    result = []\n    sort_result = []\n    seq = list(dict.fromkeys(seq))\n    for e, i in enumerate(seq):\n        sort_result = [j for j in seq if len(j) == len(i) and j.lower() in 2 * i.lower()]\n        if not sorted(sort_result) in result:\n            result.append(sorted(sort_result))\n    return sorted(sorted(result), key=len, reverse=True)", "entry_point": "group_cities", "task_id": "TACO_lite/126", "input_output_examples": [[[["Tokyo", "London", "Rome", "Donlon", "Kyoto", "Paris", "Okyot"]], [["Rome", "Rome", "Rome", "Donlon", "London"]], [[]]], [[[["Kyoto", "Okyot", "Tokyo"], ["Donlon", "London"], ["Paris"], ["Rome"]]], [[["Donlon", "London"], ["Rome"]]], [[]]]]}
{"requirement": "def consecutive_sum(num):\n\"\"\"Let's say we have a number, `num`. Find the number of values of `n` such that: there exists `n` consecutive **positive** values that sum up to `num`. A positive number is `> 0`. `n` can also be 1.\n\n```python\n#Examples\nnum = 1\n#1\nreturn 1\n\nnum = 15\n#15, (7, 8), (4, 5, 6), (1, 2, 3, 4, 5)\nreturn 4\n\nnum = 48\n#48, (15, 16, 17)\nreturn 2\n\nnum = 97\n#97, (48, 49)\nreturn 2\n```\nThe upper limit is `$10^8$`\n\"\"\"", "inputs": [[1], [15], [48], [97]], "outputs": [[1], [4], [2], [2]], "starter_code": "def consecutive_sum(num):", "canonical_solution": "def consecutive_sum(num):\n    upper_limit = 1\n    while True:\n        if upper_limit * (upper_limit + 1) // 2 > num:\n            break\n        upper_limit += 1\n    return sum([1 if i % 2 and (not num % i) else 1 if not i % 2 and num % i == i // 2 else 0 for i in range(1, upper_limit)])", "entry_point": "consecutive_sum", "task_id": "TACO_lite/127", "input_output_examples": [[[1], [15], [48], [97]], [[1], [4], [2], [2]]]}
{"requirement": "def sum_nested_numbers(a, depth=1):\n\"\"\"Build a function `sumNestedNumbers`/`sum_nested_numbers` that finds the sum of all numbers in a series of nested arrays raised to the power of their respective nesting levels.  Numbers in the outer most array should be raised to the power of 1.\n\nFor example,\n\nshould return `1 + 2*2 + 3 + 4*4 + 5*5*5 === 149`\n\"\"\"", "inputs": [[[0]], [[1, 2, 3, 4, 5]], [[1, [2], 3, [4, [5]]]], [[6, [5], [[4]], [[[3]]], [[[[2]]]], [[[[[1]]]]]]], [[1, [-1], [[1]], [[[-1]]], [[[[1]]]]]]], "outputs": [[0], [15], [149], [209], [5]], "starter_code": "def sum_nested_numbers(a, depth=1):", "canonical_solution": "def sum_nested_numbers(a, depth=1):\n    return sum((sum_nested_numbers(e, depth + 1) if type(e) == list else e ** depth for e in a))", "entry_point": "sum_nested_numbers", "task_id": "TACO_lite/128", "input_output_examples": [[[[1, 2, [3, 4], [5]]]], [[149]]]}
{"requirement": "def sharkovsky(a, b):\n\"\"\"The [Sharkovsky's Theorem](https://en.wikipedia.org/wiki/Sharkovskii%27s_theorem) involves the following ordering of the natural numbers:\n```math\n3≺5≺7≺9≺ ...\\\\\n≺2·3≺2·5≺2·7≺2·9≺...\\\\\n≺2^n·3≺2^n·5≺2^n·7≺2^n·9≺...\\\\\n≺2^{(n+1)}·3≺2^{(n+1)}·5≺2^{(n+1)}·7≺2^{(n+1)}·9≺...\\\\\n≺2^n≺2^{(n-1)}≺...\\\\\n≺4≺2≺1\\\\\n```\n \nYour task is to complete the function which returns `true` if `$a≺b$` according to this ordering, and `false` otherwise.\n \nYou may assume both `$a$` and `$b$` are non-zero positive integers.\n\"\"\"", "inputs": [[18, 12], [3, 9], [10, 16], [1, 22], [32, 1024], [17, 17]], "outputs": [[true], [true], [true], [false], [false], [false]], "starter_code": "def sharkovsky(a, b):", "canonical_solution": "def sharkovsky(a, b):\n    return f(a) < f(b)\n\ndef f(n, p=0):\n    while n % 2 == 0:\n        n >>= 1\n        p += 1\n    return (n == 1, p * (-1) ** (n == 1), n)", "entry_point": "sharkovsky", "task_id": "TACO_lite/129", "input_output_examples": [[[18, 12]], [[true]]]}
{"requirement": "def next_numb(val):\n\"\"\"Make a function that receives a value, ```val``` and outputs the smallest higher number than the given value, and this number belong to a set of positive integers that have the following properties:\n\n- their digits occur only once\n\n- they are odd\n\n- they are multiple of three\n\n```python\nnext_numb(12) == 15\n\nnext_numb(13) == 15\n\nnext_numb(99) == 105\n\nnext_numb(999999) == 1023459\n\nnext_number(9999999999) == \"There is no possible number that\nfulfills those requirements\"\n```\n\nEnjoy the kata!!\n\"\"\"", "inputs": [[12], [13], [99], [999999], [9999999999]], "outputs": [[15], [15], [105], [1023459], ["There is no possible number that fulfills those requirements"]], "starter_code": "def next_numb(val):", "canonical_solution": "def unique_digits(n):\n    return len(set(str(n))) == len(str(n))\n\ndef next_numb(val):\n    val += 1\n    while val % 3:\n        val += 1\n    if val % 2 == 0:\n        val += 3\n    while not unique_digits(val):\n        val += 6\n        if val > 9876543210:\n            break\n    else:\n        return val\n    return 'There is no possible number that fulfills those requirements'", "entry_point": "next_numb", "task_id": "TACO_lite/130", "input_output_examples": [[[12], [13], [99], [999999], [9999999999]], [[15], [15], [105], [1023459], ["There is no possible number that fulfills those requirements"]]]}
{"requirement": "def make_negative(number):\n\"\"\"In this simple assignment you are given a number and have to make it negative. But maybe the number is already negative?\n\n**Example:**\n``` c\nmakeNegative(1); // return -1\nmakeNegative(-5); // return -5\nmakeNegative(0); // return 0\n```\n``` cfml\nmakeNegative(1); // return -1\nmakeNegative(-5); // return -5\nmakeNegative(0); // return 0\n```\n``` csharp\nKata.MakeNegative(1); // return -1\nKata.MakeNegative(-5); // return -5\nKata.MakeNegative(0); // return 0\n```\n``` java\nKata.makeNegative(1); // return -1\nKata.makeNegative(-5); // return -5\nKata.makeNegative(0); // return 0\n```\n``` python\nmake_negative(1);  # return -1\nmake_negative(-5); # return -5\nmake_negative(0);  # return 0\n```\n``` javascript\nmakeNegative(1); // return -1\nmakeNegative(-5); // return -5\nmakeNegative(0); // return 0\nmakeNegative(0.12); // return -0.12\n```\n``` typescript\nmakeNegative(1); // return -1\nmakeNegative(-5); // return -5\nmakeNegative(0); // return 0\n```\n``` cpp\nmakeNegative(1); // return -1\nmakeNegative(-5); // return -5\nmakeNegative(0); // return 0\n```\n``` haskell\nmakeNegative    1 -- return -1\nmakeNegative (-5) -- return -5\nmakeNegative    0 -- return 0\nmakeNegative 0.12 -- return -0.12\n```\n``` ruby\nmakeNegative(1); # return -1\nmakeNegative(-5); # return -5\nmakeNegative(0); # return 0\n```\n``` coffeescript\nmakeNegative 1    # return -1\nmakeNegative -5   # return -5\nmakeNegative 0    # return 0\n```\n``` elixir\nmake_negative 1    # return -1\nmake_negative -5   # return -5\nmake_negative 0    # return 0\n```\n``` go\nMakeNegative(1)    # return -1\nMakeNegative(-5)   # return -5\nMakeNegative(0)    # return 0\n```\n``` julia\nKata.makeNegative(1)  # return -1\nKata.makeNegative(-5) # return -5\nKata.makeNegative(0)  # return 0\n```\n``` kotlin\nKata().makeNegative(1)  // return -1\nKata().makeNegative(-5) // return -5\nKata().makeNegative(0)  // return 0\n```\n``` asm\nmake_negative(1);    // return -1\nmake_negative(-5);   // return -5\nmake_negative(0);    // return 0\n```\n``` groovy\nKata.makeNegative(1)    // return -1\nKata.makeNegative(-5)   // return -5\nKata.makeNegative(0)    // return 0\n```\n``` php\nmakeNegative(1)    // return -1\nmakeNegative(-5)   // return -5\nmakeNegative(0)    // return 0\nmakeNegative(0.12) // return -0.12\n```\n```racket\n(make-negative 1)    ; -1\n(make-negative -5)   ; -5\n(make-negative 0)    ; 0\n(make-negative 0.12) ; -0.12\n```\n\n**Notes:**\n\n- The number can be negative already, in which case no change is required.\n- Zero (0) is not checked for any specific sign. Negative zeros make no mathematical sense.\n\"\"\"", "inputs": [[42], [-9], [0], [1], [-1]], "outputs": [[-42], [-9], [0], [-1], [-1]], "starter_code": "def make_negative(number):", "canonical_solution": "def make_negative(number):\n    return -abs(number)", "entry_point": "make_negative", "task_id": "TACO_lite/131", "input_output_examples": [[[1], [-5], [0], [0.12]], [[-1], [-5], [0], [-0.12]]]}
{"requirement": "def cup_volume(d1, d2, h):\n\"\"\"Your job is to return the volume of a cup when given the diameter of the top, the diameter of the bottom and the height.\n\nYou know that there is a steady gradient from the top to the bottom.\n\nYou want to return the volume rounded to 2 decimal places.\n\nExmples:\n```python\ncup_volume(1, 1, 1)==0.79\n\ncup_volume(10, 8, 10)==638.79\n\ncup_volume(1000, 1000, 1000)==785398163.4\n\ncup_volume(13.123, 123.12, 1)==4436.57\n\ncup_volume(5, 12, 31)==1858.51\n```\n\nYou will only be passed positive numbers.\n\"\"\"", "inputs": [[1, 1, 1], [10, 8, 10], [1000, 1000, 1000], [13.123, 123.12, 1], [5, 12, 31]], "outputs": [[0.79], [638.79], [785398163.4], [4436.57], [1858.51]], "starter_code": "def cup_volume(d1, d2, h):", "canonical_solution": "from math import pi\n\ndef cup_volume(d1, d2, h):\n    return round(h / 12.0 * pi * (d1 ** 2 + d1 * d2 + d2 ** 2), 2)", "entry_point": "cup_volume", "task_id": "TACO_lite/132", "input_output_examples": [[[1, 1, 1], [10, 8, 10], [1000, 1000, 1000], [13.123, 123.12, 1], [5, 12, 31]], [[0.79], [638.79], [785398163.4], [4436.57], [1858.51]]]}
{"requirement": "def meters(x):\n\"\"\"Scientists working internationally use metric units almost exclusively. Unless that is, they wish to crash multimillion dollars worth of equipment on Mars.\n\nYour task is to write a simple function that takes a number of meters, and outputs it using metric prefixes.\n\nIn practice, meters are only measured in \"mm\" (thousandths of a meter), \"cm\" (hundredths of a meter), \"m\" (meters) and \"km\" (kilometers, or clicks for the US military).\n\nFor this exercise we just want units bigger than a meter, from meters up to yottameters, excluding decameters and hectometers.\n\nAll values passed in will be positive integers.\ne.g.\n\n```python\nmeters(5);\n// returns \"5m\"\n\nmeters(51500);\n// returns \"51.5km\"\n\nmeters(5000000);\n// returns \"5Mm\"\n```\n\nSee http://en.wikipedia.org/wiki/SI_prefix for a full list of prefixes\n\"\"\"", "inputs": [[1], [999], [123456], [12300000], [9000000000.0], [9000000000000.0], [9000000000000000.0], [9e+18], [9e+21], [9e+24]], "outputs": [["1m"], ["999m"], ["123.456km"], ["12.3Mm"], ["9Gm"], ["9Tm"], ["9Pm"], ["9Em"], ["9Zm"], ["9Ym"]], "starter_code": "def meters(x):", "canonical_solution": "def meters(x):\n    arr = ['', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']\n    count = 0\n    while x >= 1000:\n        x /= 1000.0\n        count += 1\n    if int(x) == x:\n        x = int(x)\n    return str(x) + arr[count] + 'm'", "entry_point": "meters", "task_id": "TACO_lite/133", "input_output_examples": [[[5], [51500], [5000000]], [["5m"], ["51.5km"], ["5Mm"]]]}
{"requirement": "def thirt(n):\n\"\"\"When you divide the successive powers of `10` by `13` you get the following remainders of the integer divisions:  \n\n`1, 10, 9, 12, 3, 4`. \n\nThen the whole pattern repeats.\n\nHence the following method:\nMultiply the right most digit of the number with the left most number \nin the sequence shown above, the second right most digit to the second \nleft most digit of the number in the sequence. The cycle goes on and you sum all these products. Repeat this process until the sequence of sums is stationary.\n\n...........................................................................\n\nExample: What is the remainder when `1234567` is divided by `13`?\n\n`7×1 + 6×10 + 5×9 + 4×12 + 3×3 + 2×4 + 1×1 = 178`\n\nWe repeat the process with 178:\n\n`8x1 + 7x10 + 1x9 = 87`\n\nand again with 87:\n\n`7x1 + 8x10 = 87`\n\n...........................................................................\n\nFrom now on the sequence is stationary and the remainder of `1234567` by `13` is \nthe same as the remainder of `87` by `13`: `9`\n\nCall `thirt` the function which processes this sequence of operations on an integer `n (>=0)`. `thirt` will return the stationary number.\n\n`thirt(1234567)` calculates 178, then 87, then 87 and returns `87`.\n\n`thirt(321)` calculates 48, 48 and returns `48`\n\"\"\"", "inputs": [[8529], [85299258], [5634], [1111111111], [987654321]], "outputs": [[79], [31], [57], [71], [30]], "starter_code": "def thirt(n):", "canonical_solution": "array = [1, 10, 9, 12, 3, 4]\n\ndef thirt(n):\n    total = sum([int(c) * array[i % 6] for i, c in enumerate(reversed(str(n)))])\n    if n == total:\n        return total\n    return thirt(total)", "entry_point": "thirt", "task_id": "TACO_lite/134", "input_output_examples": [[[1234567], [321], [8529]], [[87], [48], [79]]]}
{"requirement": "def find_int_inrange(a, b):\n\"\"\"We are interested in obtaining two scores from a given integer:\n\n**First score**: The sum of all the integers obtained from the power set of the digits of the given integer that have the same order \n\nE.g:\n```\ninteger = 1234 ---> (1 + 2 + 3 + 4) + (12 + 13 + 14 + 23 + 24 + 34) + \n(123 + 124 + 134 + 234) + 1234 = 10 + 120 + 615 + 1234 = 1979\n```\n**Second score**: The sum of all the integers obtained from the all the contiguous substrings of the given integer as a string.\n\nE.g.\n```\ninteger = 1234 ---> (1 + 2 + 3 + 4) + (12 + 23 + 34) + (123 + 234) + 1234 = 10 + 69 + 357 + 1234 = 1670\n```\nThe first integer, higher than ```100```, that has both scores with ```3``` common divisors is ```204```. Its first score is ```258``` and the second one ```234```. The common divisors for both scores are ```2, 3, 6```.\n\nIn fact the integers ```294``` and ```468``` are the ones in the range ```[100, 500]```, that have both scores with ```7``` common divisors, the maximum amount of common factors in that range.\n\nYour task in this kata is to create a function that may find the integer or integers that have the maximum amount of common divisors for the scores described above.\n\nThe example given above will be:\n```python\nfind_int_inrange(100, 500) == [7, 294, 468]\n```\nAs you can see, the function should receive the limits of a range [a, b], and outputs an array with the maximum amount of factors, ```max_am_div``` and the found numbers sorted\n```\nfind_int_inrange(a, b) ----> [max_am_div, k1, k2, ...., kn] # k1 < k2 < ...< kn\n```\nThe function may output only one number.\n```python\nfind_int_inrange(100, 300) == [7, 294]\n```\nEnjoy it!\n\nFeatures of the random tests:\n```\n100 < a < b < 55000 \n```\n\"\"\"", "inputs": [[100, 300], [100, 500], [300, 900]], "outputs": [[[7, 294]], [[7, 294, 468]], [[7, 468, 834]]], "starter_code": "def find_int_inrange(a, b):", "canonical_solution": "score = lambda sub_gen: lambda n: sum((int(''.join(sub)) for length in range(1, len(str(n)) + 1) for sub in sub_gen(str(n), length)))\nscore1 = score(__import__('itertools').combinations)\nscore2 = score(lambda s, r: (s[i:i + r] for i in range(len(s) - r + 1)))\ndivs = lambda n: set.union(*({d, n // d} for d in range(1, int(n ** 0.5) + 1) if not n % d)) - {1, n}\n\ndef find_int_inrange(a, b):\n    div_range = [0]\n    for n in range(a, b + 1):\n        common_divisors = divs(score1(n)) & divs(score2(n))\n        if len(common_divisors) > div_range[0]:\n            div_range = [len(common_divisors)]\n        if len(common_divisors) == div_range[0]:\n            div_range.append(n)\n    return div_range", "entry_point": "find_int_inrange", "task_id": "TACO_lite/135", "input_output_examples": [[[100, 500], [100, 300]], [[7, 294, 468], [7, 294]]]}
{"requirement": "def most_common(s):\n\"\"\"Given a string, s, return a new string that orders the characters in order of frequency. \n\nThe returned string should have the same number of characters as the original string. \n\nMake your transformation stable, meaning characters that compare equal should stay in their original order in the string s. \n\n```python\nmost_common(\"Hello world\") => \"lllooHe wrd\"\nmost_common(\"Hello He worldwrd\") => \"lllHeo He wordwrd\"\n```\n\nExplanation:\n\nIn the `hello world` example, there are 3 `'l'`characters, 2 `'o'`characters, and one each of `'H'`, `'e'`, `' '`, `'w'`, `'r'`, and `'d'`characters. Since `'He wrd'`are all tied, they occur in the same relative order that they do in the original string, `'Hello world'`.\n\nNote that ties don't just happen in the case of characters occuring once in a string. See the second example, `most_common(\"Hello He worldwrd\")`should return `'lllHeo He wordwrd'`, not `'lllHHeeoo  wwrrdd'`.  **This is a key behavior if this method were to be used to transform a string on multiple passes.**\n\"\"\"", "inputs": [["Hello world"], [""], ["wubz dermatoglyphics"], ["Four score and seven years ago"], ["Hello He worldwrd"]], "outputs": [["lllooHe wrd"], [""], ["wubz dermatoglyphics"], ["     eeeeorsorasarsaonnFucdvyg"], ["lllHeo He wordwrd"]], "starter_code": "def most_common(s):", "canonical_solution": "from collections import Counter\n\ndef most_common(s):\n    count = Counter(s)\n    return ''.join(sorted(s, key=lambda c: -count[c]))", "entry_point": "most_common", "task_id": "TACO_lite/136", "input_output_examples": [[["Hello world"], ["Hello He worldwrd"]], [["lllooHe wrd"], ["lllHeo He wordwrd"]]]}
{"requirement": "def accum(s):\n\"\"\"This time no story, no theory. The examples below show you how to write function `accum`:\n\n**Examples:**\n```\naccum(\"abcd\") -> \"A-Bb-Ccc-Dddd\"\naccum(\"RqaEzty\") -> \"R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy\"\naccum(\"cwAt\") -> \"C-Ww-Aaa-Tttt\"\n```\n\nThe parameter of accum is a string which includes only letters from `a..z` and `A..Z`.\n\"\"\"", "inputs": [["ZpglnRxqenU"], ["NyffsGeyylB"], ["MjtkuBovqrU"], ["EvidjUnokmM"], ["HbideVbxncC"], ["VwhvtHtrxfE"], ["KurgiKmkphY"], ["NctlfBlnmfH"], ["WegunHvbdmV"], ["VoywwSpqidE"], ["VbaixFpxdcO"], ["OlyqvYwkuzF"], ["JrhfdMtchiH"], ["JiwpcSwslvW"], ["EagpiEvmabJ"], ["RznlcEmuxxP"], ["OrggaExarzP"], ["DriraMtedfB"], ["BjxseRxgtjT"], ["EquhxOswchE"]], "outputs": [["Z-Pp-Ggg-Llll-Nnnnn-Rrrrrr-Xxxxxxx-Qqqqqqqq-Eeeeeeeee-Nnnnnnnnnn-Uuuuuuuuuuu"], ["N-Yy-Fff-Ffff-Sssss-Gggggg-Eeeeeee-Yyyyyyyy-Yyyyyyyyy-Llllllllll-Bbbbbbbbbbb"], ["M-Jj-Ttt-Kkkk-Uuuuu-Bbbbbb-Ooooooo-Vvvvvvvv-Qqqqqqqqq-Rrrrrrrrrr-Uuuuuuuuuuu"], ["E-Vv-Iii-Dddd-Jjjjj-Uuuuuu-Nnnnnnn-Oooooooo-Kkkkkkkkk-Mmmmmmmmmm-Mmmmmmmmmmm"], ["H-Bb-Iii-Dddd-Eeeee-Vvvvvv-Bbbbbbb-Xxxxxxxx-Nnnnnnnnn-Cccccccccc-Ccccccccccc"], ["V-Ww-Hhh-Vvvv-Ttttt-Hhhhhh-Ttttttt-Rrrrrrrr-Xxxxxxxxx-Ffffffffff-Eeeeeeeeeee"], ["K-Uu-Rrr-Gggg-Iiiii-Kkkkkk-Mmmmmmm-Kkkkkkkk-Ppppppppp-Hhhhhhhhhh-Yyyyyyyyyyy"], ["N-Cc-Ttt-Llll-Fffff-Bbbbbb-Lllllll-Nnnnnnnn-Mmmmmmmmm-Ffffffffff-Hhhhhhhhhhh"], ["W-Ee-Ggg-Uuuu-Nnnnn-Hhhhhh-Vvvvvvv-Bbbbbbbb-Ddddddddd-Mmmmmmmmmm-Vvvvvvvvvvv"], ["V-Oo-Yyy-Wwww-Wwwww-Ssssss-Ppppppp-Qqqqqqqq-Iiiiiiiii-Dddddddddd-Eeeeeeeeeee"], ["V-Bb-Aaa-Iiii-Xxxxx-Ffffff-Ppppppp-Xxxxxxxx-Ddddddddd-Cccccccccc-Ooooooooooo"], ["O-Ll-Yyy-Qqqq-Vvvvv-Yyyyyy-Wwwwwww-Kkkkkkkk-Uuuuuuuuu-Zzzzzzzzzz-Fffffffffff"], ["J-Rr-Hhh-Ffff-Ddddd-Mmmmmm-Ttttttt-Cccccccc-Hhhhhhhhh-Iiiiiiiiii-Hhhhhhhhhhh"], ["J-Ii-Www-Pppp-Ccccc-Ssssss-Wwwwwww-Ssssssss-Lllllllll-Vvvvvvvvvv-Wwwwwwwwwww"], ["E-Aa-Ggg-Pppp-Iiiii-Eeeeee-Vvvvvvv-Mmmmmmmm-Aaaaaaaaa-Bbbbbbbbbb-Jjjjjjjjjjj"], ["R-Zz-Nnn-Llll-Ccccc-Eeeeee-Mmmmmmm-Uuuuuuuu-Xxxxxxxxx-Xxxxxxxxxx-Ppppppppppp"], ["O-Rr-Ggg-Gggg-Aaaaa-Eeeeee-Xxxxxxx-Aaaaaaaa-Rrrrrrrrr-Zzzzzzzzzz-Ppppppppppp"], ["D-Rr-Iii-Rrrr-Aaaaa-Mmmmmm-Ttttttt-Eeeeeeee-Ddddddddd-Ffffffffff-Bbbbbbbbbbb"], ["B-Jj-Xxx-Ssss-Eeeee-Rrrrrr-Xxxxxxx-Gggggggg-Ttttttttt-Jjjjjjjjjj-Ttttttttttt"], ["E-Qq-Uuu-Hhhh-Xxxxx-Oooooo-Sssssss-Wwwwwwww-Ccccccccc-Hhhhhhhhhh-Eeeeeeeeeee"]], "starter_code": "def accum(s):", "canonical_solution": "def accum(s):\n    return '-'.join((c.upper() + c.lower() * i for i, c in enumerate(s)))", "entry_point": "accum", "task_id": "TACO_lite/137", "input_output_examples": [[["abcd"], ["RqaEzty"], ["cwAt"], ["ZpglnRxqenU"]], [["A-Bb-Ccc-Dddd"], ["R-Qq-Aaa-Eeee-Zzzzz-Tttttt-Yyyyyyy"], ["C-Ww-Aaa-Tttt"], ["Z-Pp-Ggg-Llll-Nnnnn-Rrrrrr-Xxxxxxx-Qqqqqqqq-Eeeeeeeee-Nnnnnnnnnn-Uuuuuuuuuuu"]]]}
{"requirement": "def find_2nd_largest(arr):\n\"\"\"Find the 2nd largest integer in array\nIf the array has no 2nd largest integer then return nil.\nReject all non integers elements and then find the 2nd largest integer in array\n\nfind_2nd_largest([1,2,3]) => 2\n\nfind_2nd_largest([1,1,1,1,1]) => nil\nbecause all elements are same. Largest no. is 1. and there is no 2nd largest no.\n\nfind_2nd_largest([1,'a','2',3,3,4,5,'b']) => 4\nas after rejecting non integers array will be [1,3,3,4,5]\nLargest no. is 5. and 2nd largest is 4.\n\nReturn nil if there is no 2nd largest integer.\nTake care of big numbers as well\n\"\"\"", "inputs": [[[1, 2, 3]], [[1, 1, 1, 1, 1, 1, 1]], [[1, "a", "2", 3, 3, 4, 5, "b"]], [[1, "a", "2", 3, 3, 3333333333333333333334, 544444444444444444444444444444, "b"]]], "outputs": [[2], [null], [4], [3333333333333333333334]], "starter_code": "def find_2nd_largest(arr):", "canonical_solution": "def find_2nd_largest(arr):\n    arr = sorted((i for i in set(arr) if type(i) == int))\n    return arr[-2] if len(arr) > 1 else None", "entry_point": "find_2nd_largest", "task_id": "TACO_lite/138", "input_output_examples": [[[[1, 2, 3]], [[1, 1, 1, 1, 1]], [[1, "a", "2", 3, 3, 4, 5, "b"]]], [[2], ["nil"], [4]]]}
{"requirement": "def baubles_on_tree(baubles, branches):\n\"\"\"You've came to visit your grandma and she straight away found you a job - her Christmas tree needs decorating!\n\nShe first shows you a tree with an identified number of branches, and then hands you a some baubles (or loads of them!).\n\nYou know your grandma is a very particular person and she would like the baubles to be distributed in the orderly manner. You decide the best course of action would be to put the same number of baubles on each of the branches (if possible) or add one more bauble to some of the branches - starting from the beginning of the tree. \n\nIn this kata you will return an array of baubles on each of the branches.\n\nFor example: \n\n10 baubles, 2 branches: [5,5]\n5 baubles, 7 branches: [1,1,1,1,1,0,0]\n12 baubles, 5 branches: [3,3,2,2,2]\n\nThe numbers of branches and baubles will be always greater or equal to 0.\nIf there are 0 branches return: \"Grandma, we will have to buy a Christmas tree first!\".\n\nGood luck - I think your granny may have some minced pies for you if you do a good job!\n\"\"\"", "inputs": [[5, 5], [5, 0], [6, 5], [50, 9], [0, 10]], "outputs": [[[1, 1, 1, 1, 1]], ["Grandma, we will have to buy a Christmas tree first!"], [[2, 1, 1, 1, 1]], [[6, 6, 6, 6, 6, 5, 5, 5, 5]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]], "starter_code": "def baubles_on_tree(baubles, branches):", "canonical_solution": "def baubles_on_tree(baubles, branches):\n    if not branches:\n        return 'Grandma, we will have to buy a Christmas tree first!'\n    d, r = divmod(baubles, branches)\n    return [d + 1] * r + [d] * (branches - r)", "entry_point": "baubles_on_tree", "task_id": "TACO_lite/139", "input_output_examples": [[[10, 2], [5, 7], [12, 5]], [[5, 5], [1, 1, 1, 1, 1, 0, 0], [3, 3, 2, 2, 2]]]}
{"requirement": "def is_int_array(a):\n\"\"\"Write a function with the signature shown below:\n```python\ndef is_int_array(arr):\n    return True\n```\n* returns `true  / True`  if every element in an array is an integer or a float with no decimals.\n* returns `true  / True`  if array is empty.\n* returns `false / False` for every other input.\n\"\"\"", "inputs": [[[]], [[1, 2, 3, 4]], [[-11, -12, -13, -14]], [[1.0, 2.0, 3.0]], [[1, 2, null]], [null], [""], [[null]], [[1.0, 2.0, 3.0001]], [["-1"]]], "outputs": [[true], [true], [true], [true], [false], [false], [false], [false], [false], [false]], "starter_code": "def is_int_array(a):", "canonical_solution": "def is_int_array(a):\n    return isinstance(a, list) and all((isinstance(x, (int, float)) and x == int(x) for x in a))", "entry_point": "is_int_array", "task_id": "TACO_lite/140", "input_output_examples": [[[[]]], [[true]]]}
{"requirement": "def replace_letters(word):\n\"\"\"In input string ```word```(1 word):\n* replace the vowel with the nearest left consonant.\n* replace the consonant with the nearest right vowel.\n\nP.S. To complete this task imagine the alphabet is a circle (connect the first and last element of the array in the mind). For example, 'a' replace with 'z', 'y' with 'a', etc.(see below)\n\nFor example:\n```\n'codewars' => 'enedazuu'\n'cat' => 'ezu'\n'abcdtuvwxyz' => 'zeeeutaaaaa'\n```\n\nIt is preloaded: \n\n```\nconst alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\nconst consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z'];\nconst vowels = ['a','e','i','o','u'];\n```\n\nP.S. You work with lowercase letters only.\n\"\"\"", "inputs": [["cat"], ["codewars"], ["abcdtuvwxyz"]], "outputs": [["ezu"], ["enedazuu"], ["zeeeutaaaaa"]], "starter_code": "def replace_letters(word):", "canonical_solution": "def replace_letters(word):\n    return word.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'zeeediiihooooonuuuuutaaaaa'))", "entry_point": "replace_letters", "task_id": "TACO_lite/141", "input_output_examples": [[["codewars"], ["cat"], ["abcdtuvwxyz"]], [["enedazuu"], ["ezu"], ["zeeeutaaaaa"]]]}
{"requirement": "def solve(arr):\n\"\"\"In this Kata, you will be given directions and your task will be to find your way back. \n```Perl\nsolve([\"Begin on Road A\",\"Right on Road B\",\"Right on Road C\",\"Left on Road D\"]) = ['Begin on Road D', 'Right on Road C', 'Left on Road B', 'Left on Road A']\nsolve(['Begin on Lua Pkwy', 'Right on Sixth Alley', 'Right on 1st Cr']) =  ['Begin on 1st Cr', 'Left on Sixth Alley', 'Left on Lua Pkwy']\n```\n\nMore examples in test cases. \n\nGood luck!\n\nPlease also try [Simple remove duplicates](https://www.codewars.com/kata/5ba38ba180824a86850000f7)\n\"\"\"", "inputs": [[["Begin on 3rd Blvd", "Right on First Road", "Left on 9th Dr"]], [["Begin on Road A", "Right on Road B", "Right on Road C", "Left on Road D"]], [["Begin on Road A"]]], "outputs": [[["Begin on 9th Dr", "Right on First Road", "Left on 3rd Blvd"]], [["Begin on Road D", "Right on Road C", "Left on Road B", "Left on Road A"]], [["Begin on Road A"]]], "starter_code": "def solve(arr):", "canonical_solution": "DIRS = {'Left': 'Right', 'Right': 'Left'}\n\ndef solve(arr):\n    lst, prevDir = ([], 'Begin')\n    for cmd in arr[::-1]:\n        d, r = cmd.split(' on ')\n        follow = DIRS.get(prevDir, prevDir)\n        prevDir = d\n        lst.append(f'{follow} on {r}')\n    return lst", "entry_point": "solve", "task_id": "TACO_lite/142", "input_output_examples": [[[["Begin on Road A", "Right on Road B", "Right on Road C", "Left on Road D"]], ["Begin on Lua Pkwy", "Right on Sixth Alley", "Right on 1st Cr"], [["Begin on 3rd Blvd", "Right on First Road", "Left on 9th Dr"]]], [["Begin on Road D", "Right on Road C", "Left on Road B", "Left on Road A"], ["Begin on 1st Cr", "Left on Sixth Alley", "Left on Lua Pkwy"], [["Begin on 9th Dr", "Right on First Road", "Left on 3rd Blvd"]]]]}
{"requirement": "def meeting(rooms):\n\"\"\"Your job at E-Corp is both boring and difficult. It isn't made any easier by the fact that everyone constantly wants to have a meeting with you, and that the meeting rooms are always taken!\n\nIn this kata, you will be given an array. Each value represents a meeting room. Your job? Find the **first** empty one and return its index (N.B. There may be more than one empty room in some test cases). \n\n'X' --> busy\n'O' --> empty\n\nIf all rooms are busy, return 'None available!'.\n\n\nMore in this series:\n\nThe Office I - Outed\nThe Office II - Boredeom Score\nThe Office III - Broken Photocopier\nThe Office V - Find a Chair\n\"\"\"", "inputs": [[["X", "O", "X"]], [["O", "X", "X", "X", "X"]], [["X", "X", "O", "X", "X"]], [["X"]]], "outputs": [[1], [0], [2], ["None available!"]], "starter_code": "def meeting(rooms):", "canonical_solution": "def meeting(rooms):\n    try:\n        return rooms.index('O')\n    except ValueError:\n        return 'None available!'", "entry_point": "meeting", "task_id": "TACO_lite/143", "input_output_examples": [[[["X", "O", "X"]]], [[1]]]}
{"requirement": "def ipsubnet2list(subnet):\n\"\"\"## Task\n\nGenerate a sorted list of all possible IP addresses in a network.\n\nFor a subnet that is not a valid IPv4 network return `None`.\n\n## Examples\n```\nipsubnet2list(\"192.168.1.0/31\") == [\"192.168.1.0\", \"192.168.1.1\"]\nipsubnet2list(\"213.256.46.160/28\") == None\n```\n\"\"\"", "inputs": [["192.168.1.0/31"], ["195.20.15.0/28"], ["174.0.153.152/29"], ["213.192.46.160/28"], ["213.256.46.160/28"]], "outputs": [[["192.168.1.0", "192.168.1.1"]], [["195.20.15.1", "195.20.15.2", "195.20.15.3", "195.20.15.4", "195.20.15.5", "195.20.15.6", "195.20.15.7", "195.20.15.8", "195.20.15.9", "195.20.15.10", "195.20.15.11", "195.20.15.12", "195.20.15.13", "195.20.15.14"]], [["174.0.153.153", "174.0.153.154", "174.0.153.155", "174.0.153.156", "174.0.153.157", "174.0.153.158"]], [["213.192.46.161", "213.192.46.162", "213.192.46.163", "213.192.46.164", "213.192.46.165", "213.192.46.166", "213.192.46.167", "213.192.46.168", "213.192.46.169", "213.192.46.170", "213.192.46.171", "213.192.46.172", "213.192.46.173", "213.192.46.174"]], [null]], "starter_code": "def ipsubnet2list(subnet):", "canonical_solution": "import ipaddress as ip\n\ndef ipsubnet2list(subnet):\n    try:\n        return list(map(str, ip.ip_network(subnet).hosts()))\n    except:\n        pass", "entry_point": "ipsubnet2list", "task_id": "TACO_lite/144", "input_output_examples": [[["192.168.1.0/31"], ["213.256.46.160/28"]], [[["192.168.1.0", "192.168.1.1"]], [null]]]}
{"requirement": "def tv_remote(words):\n\"\"\"# Background\n\nMy TV remote control has arrow buttons and an `OK` button.\n\nI can use these to move a \"cursor\" on a logical screen keyboard to type words...\n\n# Keyboard\n\nThe screen \"keyboard\" layout looks like this\n\n\n  #tvkb {\n    width : 400px;\n    border: 5px solid gray; border-collapse: collapse;\n  }\n  #tvkb td {\n    color : orange;\n    background-color : black;\n    text-align : center;\n    border: 3px solid gray; border-collapse: collapse;\n  }\n\n\nabcde123\nfghij456\nklmno789\npqrst.@0\nuvwxyz_/\naASP\n\n\n\n* `aA` is the SHIFT key. Pressing this key toggles alpha characters between UPPERCASE and lowercase\n* `SP` is the space character\n* The other blank keys in the bottom row have no function\n\n# Kata task\n\nHow many button presses on my remote are required to type the given `words`?\n\n## Notes\n\n* The cursor always starts on the letter `a` (top left)\n* The alpha characters are initially lowercase (as shown above)\n* Remember to also press `OK` to \"accept\" each letter\n* Take a direct route from one letter to the next\n* The cursor does not wrap (e.g. you cannot leave one edge and reappear on the opposite edge)\n* Although the blank keys have no function, you may navigate through them if you want to\n* Spaces may occur anywhere in the `words` string.\n* Do not press the SHIFT key until you need to. For example, with the word `e.Z`, the SHIFT change happens **after** the `.` is pressed (not before)\n \n# Example\n\nwords = `Code Wars`\n\n* C => `a`-`f`-`k`-`p`-`u`-`aA`-OK-`U`-`P`-`K`-`F`-`A`-`B`-`C`-OK = 14\n* o => `C`-`H`-`M`-`R`-`W`-`V`-`U`-`aA`-OK-`SP`-`v`-`q`-`l`-`m`-`n`-`o`-OK = 16\n* d => `o`-`j`-`e`-`d`-OK = 4\n* e => `d`-`e`-OK = 2\n* space => `e`-`d`-`c`-`b`-`g`-`l`-`q`-`v`-`SP`-OK = 9\n* W => `SP`-`aA`-OK-`SP`-`V`-`W`-OK = 6\n* a => `W`-`V`-`U`-`aA`-OK-`u`-`p`-`k`-`f`-`a`-OK = 10\n* r => `a`-`f`-`k`-`p`-`q`-`r`-OK = 6\n* s => `r`-`s`-OK = 2\n\nAnswer = 14 + 16 + 4 + 2 + 9 + 6 + 10 + 6 + 2 = 69\n\n\n\n*Good Luck!\nDM.*\n\n\n\nSeries\n* TV Remote\n* TV Remote (shift and space)\n* TV Remote (wrap)\n* TV Remote (symbols)\n\"\"\"", "inputs": [["Code Wars"], ["does"], ["your"], ["solution"], ["work"], ["for"], ["these"], ["words"], ["DOES"], ["YOUR"], ["SOLUTION"], ["WORK"], ["FOR"], ["THESE"], ["WORDS"], ["Does"], ["Your"], ["Solution"], ["Work"], ["For"], ["These"], ["Words"], ["A"], ["AADVARKS"], ["A/A/A/A/"], ["1234567890"], ["MISSISSIPPI"], ["a"], ["aadvarks"], ["a/a/a/a/"], ["mississippi"], ["Xoo ooo ooo"], ["oXo ooo ooo"], ["ooX ooo ooo"], ["ooo Xoo ooo"], ["ooo oXo ooo"], ["ooo ooX ooo"], ["ooo ooo Xoo"], ["ooo ooo oXo"], ["ooo ooo ooX"], ["The Quick Brown Fox Jumps Over A Lazy Dog."], ["Pack My Box With Five Dozen Liquor Jugs."], [""], [" "], ["   "], ["    x   X    "]], "outputs": [[69], [16], [23], [33], [20], [12], [27], [25], [27], [26], [38], [23], [21], [32], [28], [40], [37], [49], [30], [28], [41], [35], [12], [45], [96], [28], [42], [1], [34], [85], [35], [57], [65], [53], [53], [65], [53], [53], [65], [53], [306], [290], [0], [7], [9], [34]], "starter_code": "def tv_remote(words):", "canonical_solution": "import re\nKEYBOARD = 'abcde123fghij456klmno789pqrst.@0uvwxyz_/* '\nMAP = {c: (i // 8, i % 8) for i, c in enumerate(KEYBOARD)}\n\ndef manhattan(*pts):\n    return 1 + sum((abs(z2 - z1) for z1, z2 in zip(*pts)))\n\ndef toggle(m):\n    ups, end = (m.group(1), m.group(2))\n    off = '*' * bool(end)\n    return f'*{ups.lower()}{off}{end}'\n\ndef tv_remote(words):\n    reWords = re.sub('([A-Z][^a-z]*)([a-z]?)', toggle, words)\n    return sum((manhattan(MAP[was], MAP[curr]) for was, curr in zip('a' + reWords, reWords)))", "entry_point": "tv_remote", "task_id": "TACO_lite/145", "input_output_examples": [[["Code Wars"]], [[69]]]}
{"requirement": "def sum_digits(number):\n\"\"\"Write a function named sumDigits which takes a number as input and returns the sum of the absolute value of each of the number's decimal digits.  For example:\n\n```python\n  sum_digits(10)  # Returns 1\n  sum_digits(99)  # Returns 18\n  sum_digits(-32) # Returns 5\n```\n\nLet's assume that all numbers in the input will be integer values.\n\"\"\"", "inputs": [[10], [99], [-32], [1234567890], [0], [666], [100000002], [800000009]], "outputs": [[1], [18], [5], [45], [0], [18], [3], [17]], "starter_code": "def sum_digits(number):", "canonical_solution": "def sum_digits(number):\n    return sum(map(int, str(abs(number))))", "entry_point": "sum_digits", "task_id": "TACO_lite/146", "input_output_examples": [[[10], [99], [-32]], [[1], [18], [5]]]}
{"requirement": "def endless_string(string, start, length):\n\"\"\"Create a function that accepts 3 inputs, a string, a starting location, and a length.  The function needs to simulate the string endlessly repeating in both directions and return a substring beginning at the starting location and continues for length.\n\nExample:\n```python\nendless_string('xyz', -23, 6) == 'yzxyzx'\n```\nTo visualize:\n\n           Negative                               Positive\n    3         2         1         *         1         2         3      \n    0987654321098765432109876543210123456789012345678901234567890\n    xyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzxyzx\n           ******\n         -23 for a length of 6 == 'yzxyzx'\n       \nSome more examples:\n```python\nendless_string('xyz', 0, 4) == 'xyzx'\nendless_string('xyz', 19, 2) == 'yz'\nendless_string('xyz', -4, -4) == 'zxyz'\n```\n\nA negative length needs to include the starting postion and return the characters to the left of the starting position.\n\"\"\"", "inputs": [["xyz", -23, 6], ["xyz", 0, 4], ["xyz", 19, 2], ["xyz", -4, -4], ["abcdefghijklmnopqrstuvwxyz", 29, 1], ["Hello! How are you?", -14, 27], ["1x2x3x4x", 1532, 100], ["1x2x3x4x", -1532, -100], ["112233", 0, 0], ["112233", -1, 0], ["112233", 15824, 0]], "outputs": [["yzxyzx"], ["xyzx"], ["yz"], ["zxyz"], ["d"], ["! How are you?Hello! How ar"], ["3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x"], ["x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3x4x1x2x3"], [""], [""], [""]], "starter_code": "def endless_string(string, start, length):", "canonical_solution": "from itertools import cycle, islice\n\ndef endless_string(string, start, length):\n    i = (start + (length + 1 if length < 0 else 0)) % len(string)\n    return ''.join(islice(cycle(string), i, i + abs(length)))", "entry_point": "endless_string", "task_id": "TACO_lite/147", "input_output_examples": [[["xyz", -23, 6], ["xyz", 0, 4], ["xyz", 19, 2], ["xyz", -4, -4]], [["yzxyzx"], ["xyzx"], ["yz"], ["zxyz"]]]}
{"requirement": "def which_note(count):\n\"\"\"You're continuing to enjoy your new piano, as described in Piano Kata, Part 1. You're also continuing the exercise where you start on the very first (leftmost, lowest in pitch) key on the 88-key keyboard, which (as shown below) is the note A, with the little finger on your left hand, then the second key, which is the black key A# (\"A sharp\"), with your left ring finger, then the third key, B, with your left middle finger, then the fourth key, C, with your left index finger, and then the fifth key, C#, with your left thumb. Then you play the sixth key, D, with your right thumb, and continue on playing the seventh, eighth, ninth, and tenth keys with the other four fingers of your right hand. Then for the eleventh key you go back to your left little finger, and so on. Once you get to the rightmost/highest, 88th, key, C, you start all over again with your left little finger on the first key. \n\n\n\n(If the Codewars Instructions pane resizes the above piano keyboard image to be too small to read the note labels of the black/sharp keys on your screen, click here to open a copy of the image in a new tab or window.)\n\nThis time, in addition to counting each key press out loud (not starting again at 1 after 88, but continuing on to 89 and so forth) to try to keep a steady rhythm going and to see how far you can get before messing up, you're also saying the name of each note. You wonder whether this may help you develop perfect pitch in addition to learning to just *know* which note is which, and -- as in Piano Kata, Part 1 -- helping you to learn to move smoothly and with uniform pressure on the keys from each finger to the next and back and forth between hands.\n\nThe function you are going to write will explore one of the patterns you're experiencing in your practice: Given the number you stopped on, which note was it? For example, in the description of your piano exercise above, if you stopped at 5, your left thumb would be on the fifth key of the piano, which is C#. Or if you stopped at 92, you would have gone all the way from keys 1 to 88 and then wrapped around, so that you would be on the fourth key, which is C.\n\nYour function will receive an integer between 1 and 10000 (maybe you think that in principle it would be cool to count up to, say, a billion, but considering how many years it would take it is just not possible) and return one of the strings \"A\", \"A#\", \"B\", \"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", or \"G#\" indicating which note you stopped on -- here are a few more examples:\n```\n1     \"A\"\n12    \"G#\"\n42    \"D\"\n100   \"G#\"\n2017  \"F\"\n```\nHave fun!\n\"\"\"", "inputs": [[1], [5], [12], [42], [88], [89], [92], [100], [111], [200], [2017]], "outputs": [["A"], ["C#"], ["G#"], ["D"], ["C"], ["A"], ["C"], ["G#"], ["G"], ["G#"], ["F"]], "starter_code": "def which_note(count):", "canonical_solution": "def which_note(count):\n    return 'A A# B C C# D D# E F F# G G#'.split()[(count - 1) % 88 % 12]", "entry_point": "which_note", "task_id": "TACO_lite/148", "input_output_examples": [[[5], [92], [1], [12], [42], [100], [2017]], [["C#"], ["C"], ["A"], ["G#"], ["D"], ["G#"], ["F"]]]}
{"requirement": "def solve(count, ball_number):\n\"\"\"Jack and Jill are playing a game. They have balls numbered from `0` to `n - 1`. Jack looks the other way and asks Jill to reverse the position of the balls, for instance, to change the order from say, `0,1,2,3` to `3,2,1,0`. He further asks Jill to reverse the position of the balls `n` times, each time starting from one position further to the right, till she reaches the last ball. So, Jill has to reverse the positions of the ball starting from position `0`, then from position `1`, then from position `2` and so on. At the end of the game, Jill will ask Jack to guess the final position of any ball numbered `k`. \n\nYou will be given `2` integers, the first will be `n`(balls numbered from `0` to `n-1`) and the second will be `k`. You will return the position of the ball numbered `k` after the rearrangement.\n\n```Perl\nsolve(4,1) = 3. The reversals are [0,1,2,3] -> [3,2,1,0] -> [3,0,1,2] -> [3,0,2,1]. => 1 is in position 3.\n```\n\nMore examples in the test cases. Good luck!\n\"\"\"", "inputs": [[4, 1], [4, 2], [4, 3], [20, 8], [20, 9], [20, 10]], "outputs": [[3], [2], [0], [17], [19], [18]], "starter_code": "def solve(count, ball_number):", "canonical_solution": "def solve(count, ball_number):\n    assert isinstance(count, int)\n    assert isinstance(ball_number, int)\n    balls = list(range(count))\n    for idx in range(count):\n        balls = balls[:idx] + balls[idx:][::-1]\n    return balls.index(ball_number)", "entry_point": "solve", "task_id": "TACO_lite/149", "input_output_examples": [[[4, 1]], [[3]]]}
{"requirement": "def last_digit(n1, n2):\n\"\"\"Define a function that takes in two non-negative integers `$a$` and `$b$` and returns the last decimal digit of `$a^b$`. Note that `$a$` and `$b$` may be very large!\n\nFor example, the last decimal digit of `$9^7$` is `$9$`, since `$9^7 = 4782969$`.  The last decimal digit of `$({2^{200}})^{2^{300}}$`, which has over `$10^{92}$` decimal digits, is `$6$`.  Also, please take `$0^0$` to be `$1$`.\n\nYou may assume that the input will always be valid.\n\n## Examples\n\n```python\nlast_digit(4, 1)                # returns 4\nlast_digit(4, 2)                # returns 6\nlast_digit(9, 7)                # returns 9\nlast_digit(10, 10 ** 10)        # returns 0\nlast_digit(2 ** 200, 2 ** 300)  # returns 6\n```\n\n___\n\n## Remarks\n\n### JavaScript, C++, R, PureScript\n\nSince these languages don't have native arbitrarily large integers, your arguments are going to be strings representing non-negative integers instead.\n\"\"\"", "inputs": [[4, 1], [4, 2], [9, 7], [10, 1000000000], [38710248912497124917933333333284108412048102948908149081409204712406, 226628148126342643123641923461846128214626], [3715290469715693021198967285016729344580685479654510946723, 68819615221552997273737174557165657483427362207517952651]], "outputs": [[4], [6], [9], [0], [6], [7]], "starter_code": "def last_digit(n1, n2):", "canonical_solution": "def last_digit(n1, n2):\n    return pow(n1, n2, 10)", "entry_point": "last_digit", "task_id": "TACO_lite/150", "input_output_examples": [[], []]}
{"requirement": "def name_in_str(str, name):\n\"\"\"What's in a name?\n..Or rather, what's a name in? For us, a particular string is where we are looking for a name.\n\nTask\n\nTest whether or not the string contains all of the letters which spell a given name, in order.\n\nThe format\nA function passing two strings, searching for one (the name) within the other.\n``function nameInStr(str, name){ return true || false }``\n\nExamples\n\n    nameInStr(\"Across the rivers\", \"chris\") --> true\n                ^      ^  ^^   ^\n                c      h  ri   s\n                \n    Contains all of the letters in \"chris\", in order.\n----------------------------------------------------------\n    nameInStr(\"Next to a lake\", \"chris\") --> false\n    \n    Contains none of the letters in \"chris\".\n--------------------------------------------------------------------\n    nameInStr(\"Under a sea\", \"chris\") --> false\n                   ^   ^\n                   r   s\n                   \n    Contains only some of the letters in \"chris\".\n--------------------------------------------------------------------\n    nameInStr(\"A crew that boards the ship\", \"chris\") --> false\n                 cr    h              s i\n                 cr                h  s i  \n                 c     h      r       s i\n                 ...\n                 \n    Contains all of the letters in \"chris\", but not in order.\n--------------------------------------------------------------------\n    nameInStr(\"A live son\", \"Allison\") --> false\n               ^ ^^   ^^^\n               A li   son\n                 \n    Contains all of the correct letters in \"Allison\", in order, \n    but not enough of all of them (missing an 'l').\n    \n\nNote: testing will _not_ be case-sensitive.\n\"\"\"", "inputs": [["Across the rivers", "chris"], ["Next to a lake", "chris"], ["Under a sea", "chris"], ["A crew that boards the ship", "chris"], ["A live son", "Allison"], ["Just enough nice friends", "Jennifer"], ["thomas", "Thomas"], ["pippippi", "Pippi"], ["pipipp", "Pippi"], ["ppipip", "Pippi"]], "outputs": [[true], [false], [false], [false], [false], [false], [true], [true], [false], [false]], "starter_code": "def name_in_str(str, name):", "canonical_solution": "def name_in_str(str, name):\n    it = iter(str.lower())\n    return all((c in it for c in name.lower()))", "entry_point": "name_in_str", "task_id": "TACO_lite/151", "input_output_examples": [[["Across the rivers", "chris"], ["Next to a lake", "chris"], ["Under a sea", "chris"], ["A crew that boards the ship", "chris"], ["A live son", "Allison"]], [[true], [false], [false], [false], [false]]]}
{"requirement": "def is_haiku(text):\n\"\"\"[Haikus](https://en.wikipedia.org/wiki/Haiku_in_English) are short poems in a three-line format, with 17 syllables arranged in a 5–7–5 pattern. Your task is to check if the supplied text is a haiku or not.\n\n\n### About syllables\n\n[Syllables](https://en.wikipedia.org/wiki/Syllable) are the phonological building blocks of words. *In this kata*, a syllable is a part of a word including a vowel (\"a-e-i-o-u-y\") or a group of vowels (e.g. \"ou\", \"ee\", \"ay\"). A few examples: \"tea\", \"can\", \"to·day\", \"week·end\", \"el·e·phant\".\n\n**However**, silent \"E\"s **do not** create syllables. *In this kata*, an \"E\" is considered silent if it's alone at the end of the word, preceded by one (or more) consonant(s) and there is at least one other syllable in the word. Examples: \"age\", \"ar·range\", \"con·crete\"; but not in \"she\", \"blue\", \"de·gree\".\n\nSome more examples:\n* one syllable words: \"cat\", \"cool\", \"sprout\", \"like\", \"eye\", \"squeeze\"\n* two syllables words: \"ac·count\", \"hon·est\", \"beau·ty\", \"a·live\", \"be·cause\", \"re·store\"\n\n\n## Examples\n```\nAn old silent pond...\nA frog jumps into the pond,\nsplash! Silence again.\n```\n\n...should return `True`, as this is a valid 5–7–5 haiku:\n```\nAn old si·lent pond...            # 5 syllables\nA frog jumps in·to the pond,      # 7\nsplash! Si·lence a·gain.          # 5\n```\n\nAnother example:\n\n```\nAutumn moonlight -\na worm digs silently\ninto the chestnut.\n```\n\n...should return `False`, because the number of syllables per line is not correct:\n```\nAu·tumn moon·light -          # 4 syllables\na worm digs si·lent·ly        # 6\nin·to the chest·nut.          # 5\n```\n\n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)\n\"\"\"", "inputs": [["An old silent pond...\nA frog jumps into the pond,\nsplash! Silence again."], ["An old silent pond...\nA frog jumps into the pond, splash!\nSilence again."], ["An old silent pond...\nA frog jumps into the pond,\nsplash!\nSilence again."], ["An old silent pond... A frog jumps into the pond, splash! Silence again."], ["Autumn moonlight -\na worm digs silently\ninto the chestnut."], [""], ["\n\n"], ["My code is cool, right?\nJava # Pyhton ; Ruby // Go:\nI know them all, yay! ;-)"], ["Edge case the urge come;\nFurthermore eye the garage.\nLike literature!"], ["a e i o u\noo ee ay ie ey oa ie\ny a e i o"]], "outputs": [[true], [false], [false], [false], [false], [false], [false], [true], [true], [true]], "starter_code": "def is_haiku(text):", "canonical_solution": "import re\nPATTERN = re.compile('[aeyuio]+[^aeyuio ]*((?=e\\\\b)e)?', flags=re.I)\n\ndef is_haiku(text):\n    return [5, 7, 5] == [check(s) for s in text.split('\\n')]\n\ndef check(s):\n    return sum((1 for _ in PATTERN.finditer(s)))", "entry_point": "is_haiku", "task_id": "TACO_lite/152", "input_output_examples": [[["An old silent pond...\nA frog jumps into the pond,\nsplash! Silence again."], ["Autumn moonlight -\na worm digs silently\ninto the chestnut."]], [[true], [false]]]}
{"requirement": "def count_number(n, x):\n\"\"\"# Task\n Let's consider a table consisting of `n` rows and `n` columns. The cell located at the intersection of the i-th row and the j-th column contains number i × j. The rows and columns are numbered starting from 1.\n\n You are given a positive integer `x`. Your task is to count the number of cells in a table that contain number `x`.\n\n# Example\n\n For `n = 5 and x = 5`, the result should be `2`.\n \n The table looks like:\n ```\n   1  2  3  4  (5)\n   2  4  6  8  10\n   3  6  9  12 15\n   4  8  12 16 20\n (5) 10 15 20 25```\n There are two number `5` in it.\n  \n For `n = 10 and x = 5`, the result should be 2.\n \n For `n = 6 and x = 12`, the result should be 4.\n ```\n   1  2   3   4   5   6\n   2  4   6   8   10 (12)\n   3  6   9  (12) 15  18\n   4  8  (12) 16  20  24\n   5  10  15  20  25  30\n   6 (12) 18  24  30  36\n ```\n \n# Input/Output\n\n\n - `[input]` integer `n`\n\n  `1 ≤ n ≤ 10^5.`\n\n\n - `[input]` integer `x`\n\n  `1 ≤ x ≤ 10^9.`\n\n\n - `[output]` an integer\n\n  The number of times `x` occurs in the table.\n\"\"\"", "inputs": [[5, 5], [10, 5], [6, 12], [6, 169], [100000, 1000000000]], "outputs": [[2], [2], [4], [0], [16]], "starter_code": "def count_number(n, x):", "canonical_solution": "def count_number(n, x):\n    return len([j for j in range(1, n + 1) if x % j == 0 and x / j <= n])", "entry_point": "count_number", "task_id": "TACO_lite/153", "input_output_examples": [[[5, 5], [10, 5], [6, 12]], [[2], [2], [4]]]}
{"requirement": "def reindeer(presents):\n\"\"\"Santa puts all the presents into the huge sack. In order to let his reindeers rest a bit, he only takes as many reindeers with him as he is required to do. The others may take a nap.\n\nTwo reindeers are always required for the sleigh and Santa himself. Additionally he needs 1 reindeer per 30 presents. As you know, Santa has 8 reindeers in total, so he can deliver up to 180 presents at once (2 reindeers for Santa and the sleigh + 6 reindeers with 30 presents each).\n\nComplete the function `reindeers()`, which takes a number of presents and returns the minimum numbers of required reindeers. If the number of presents is too high, throw an error.\n\nExamles:\n\n```python\nreindeer(0) # must return 2\nreindeer(1) # must return 3\nreindeer(30) # must return 3\nreindeer(200) # must throw an error\n```\n\"\"\"", "inputs": [[0], [1], [5], [30], [31], [60], [61], [90], [91], [120], [121], [150], [151], [180]], "outputs": [[2], [3], [3], [3], [4], [4], [5], [5], [6], [6], [7], [7], [8], [8]], "starter_code": "def reindeer(presents):", "canonical_solution": "from math import ceil\n\ndef reindeer(presents):\n    if presents > 180:\n        raise ValueError('Too many presents')\n    return ceil(presents / 30.0) + 2", "entry_point": "reindeer", "task_id": "TACO_lite/154", "input_output_examples": [[[0], [1], [30], [200]], [[2], [3], [3], ["error"]]]}
{"requirement": "def zeros(n):\n\"\"\"Write a program that will calculate the number of trailing zeros in a factorial of a given number.\n\n`N! = 1 * 2 * 3 *  ... * N`\n\nBe careful `1000!` has 2568 digits...\n\nFor more info, see: http://mathworld.wolfram.com/Factorial.html \n\n## Examples\n\n```python\nzeros(6) = 1\n# 6! = 1 * 2 * 3 * 4 * 5 * 6 = 720 --> 1 trailing zero\n\nzeros(12) = 2\n# 12! = 479001600 --> 2 trailing zeros\n```\n\n*Hint: You're not meant to calculate the factorial. Find another way to find the number of zeros.*\n\"\"\"", "inputs": [[0], [6], [30], [100], [1000], [100000], [1000000000]], "outputs": [[0], [1], [7], [24], [249], [24999], [249999998]], "starter_code": "def zeros(n):", "canonical_solution": "def zeros(n):\n    pow_of_5 = 5\n    zeros = 0\n    while n >= pow_of_5:\n        zeros += n // pow_of_5\n        pow_of_5 *= 5\n    return zeros", "entry_point": "zeros", "task_id": "TACO_lite/155", "input_output_examples": [[[6], [12]], [[1], [2]]]}
{"requirement": "def finding_k(arr):\n\"\"\"# Task\nGiven an array `arr`, find the maximal value of `k` such `a[i] mod k` = `a[j] mod k` for all valid values of i and j.\n\nIf it's impossible to find such number (there's an infinite number of `k`s), return `-1` instead.\n\n\n# Input/Output\n\n`[input]` integer array `arr`\n\nA non-empty array of positive integer.\n\n`2 <= arr.length <= 10`\n\n`1 <= arr[i] <= 100`\n\n`[output]` an integer\n\nThe maximum value of `k` or `-1` if there is none.\n\n\n# Example\n\nFor `arr = [1, 2, 3]`, the output should be `1`.\n\n`1` is the only k which satisfies the given conditions.\n\nFor `arr = [1, 1, 1]`, the output should be `-1`.\n\n`1 % k = 1` for `any k > 1`, so it's impossible to find the maximum.\n\nFor `arr = [5, 2, 8]`, the output should be `3`.\n\n`5 % 3 == 2 % 3 == 8 % 3 == 2`\n\"\"\"", "inputs": [[[1, 2, 3]], [[1, 1, 1]], [[5, 2, 8]], [[4, 1, 7]], [[1, 7, 13]], [[4, 5, 4]], [[5, 6, 7, 8]], [[10, 100]], [[64, 8, 1]], [[2, 9, 30]]], "outputs": [[1], [-1], [3], [3], [6], [1], [1], [90], [7], [7]], "starter_code": "def finding_k(arr):", "canonical_solution": "def finding_k(arr):\n    for n in range(max(arr) - 1, 0, -1):\n        if len({x % n for x in arr}) == 1:\n            return n\n    return -1", "entry_point": "finding_k", "task_id": "TACO_lite/156", "input_output_examples": [[[[1, 2, 3]], [[1, 1, 1]], [[5, 2, 8]]], [[1], [-1], [3]]]}
{"requirement": "def sort_string(s, ordering):\n\"\"\"Define a method that accepts 2 strings as parameters. The method returns the first string sorted by the second.\n\n```python\nsort_string(\"foos\", \"of\")       == \"oofs\"\nsort_string(\"string\", \"gnirts\") == \"gnirts\"\nsort_string(\"banana\", \"abn\")    == \"aaabnn\"\n```\n\nTo elaborate, the second string defines the ordering. It is possible that in the second string characters repeat, so you should remove repeating characters, leaving only the first occurrence.\n\nAny character in the first string that does not appear in the second string should be sorted to the end of the result in original order.\n\"\"\"", "inputs": [["banana", "abn"], ["banana", "xyz"], ["banana", "an"], ["foos", "of"], ["string", "gnirts"], ["banana", "a"], ["bungholio", "aacbuoldiiaoh"], ["fumyarhncujlj", "nsejcwn"]], "outputs": [["aaabnn"], ["banana"], ["aaannb"], ["oofs"], ["gnirts"], ["aaabnn"], ["buoolihng"], ["njjcfumyarhul"]], "starter_code": "def sort_string(s, ordering):", "canonical_solution": "def sort_string(s, ordering):\n    answer = ''\n    for o in ordering:\n        answer += o * s.count(o)\n        s = s.replace(o, '')\n    return answer + s", "entry_point": "sort_string", "task_id": "TACO_lite/157", "input_output_examples": [[["foos", "of"], ["string", "gnirts"], ["banana", "abn"]], [["oofs"], ["gnirts"], ["aaabnn"]]]}
{"requirement": "def arbitrate(s, n):\n\"\"\"When multiple master devices are connected to a single bus (https://en.wikipedia.org/wiki/System_bus), there needs to be an arbitration in order to choose which of them can have access to the bus (and 'talk' with a slave).\n\nWe implement here a very simple model of bus mastering. Given `n`, a number representing the number of **masters** connected to the bus, and a fixed priority order (the first master has more access priority than the second and so on...), the task is to choose the selected master.\nIn practice, you are given a string `inp` of length `n` representing the `n` masters' requests to get access to the bus, and you should return a string representing the masters, showing which (only one) of them was granted access:\n\n```\nThe string 1101 means that master 0, master 1 and master 3 have requested\naccess to the bus. \nKnowing that master 0 has the greatest priority, the output of the function should be: 1000\n```\n\n## Examples\n\n## Notes\n\n* The resulting string (`char* `) should be allocated in the `arbitrate` function, and will be free'ed in the tests.\n\n* `n` is always greater or equal to 1.\n\"\"\"", "inputs": [["001000101", 9], ["000000101", 9], ["0000", 4]], "outputs": [["001000000"], ["000000100"], ["0000"]], "starter_code": "def arbitrate(s, n):", "canonical_solution": "def arbitrate(s, n):\n    i = s.find('1') + 1\n    return s[:i] + '0' * (n - i)", "entry_point": "arbitrate", "task_id": "TACO_lite/158", "input_output_examples": [[["001000101", 9]], [["001000000"]]]}
{"requirement": "def solve(a, b):\n\"\"\"In this Kata, you will be given two numbers, `a` and `b`, and your task is to determine if the first number `a` is divisible by `all` the prime factors of the second number `b`. For example: `solve(15,12) = False` because `15` is not divisible by all the prime factors of `12` (which include`2`).\n\nSee test cases for more examples. \n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Sub-array division](https://www.codewars.com/kata/59eb64cba954273cd4000099)\n\n[Divisor harmony](https://www.codewars.com/kata/59bf97cd4f98a8b1cd00007e)\n\"\"\"", "inputs": [[2, 256], [2, 253], [9, 243], [15, 12], [21, 2893401], [21, 2893406], [54, 2834352], [54, 2834359], [1000013, 7187761], [1000013, 7187762]], "outputs": [[true], [false], [true], [false], [true], [false], [true], [false], [true], [false]], "starter_code": "def solve(a, b):", "canonical_solution": "from math import gcd\n\ndef solve(a, b):\n    while 1 < gcd(a, b):\n        b = b // gcd(a, b)\n    return b == 1", "entry_point": "solve", "task_id": "TACO_lite/159", "input_output_examples": [[[15, 12], [2, 256]], [[false], [true]]]}
{"requirement": "def pattern(n):\n\"\"\"##Task:\n\nYou have to write a function **pattern** which creates the following pattern upto n number of rows. *If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.*\n\n##Pattern:\n\n    (n)\n    (n)(n-1)\n    (n)(n-1)(n-2)\n    ................\n    .................\n    (n)(n-1)(n-2)....4\n    (n)(n-1)(n-2)....43\n    (n)(n-1)(n-2)....432\n    (n)(n-1)(n-2)....4321\n    \n##Examples:\n\npattern(4):\n\n    4\n    43\n    432\n    4321\n    \npattern(6):\n \n    6\n    65\n    654\n    6543\n    65432\n    654321\n\n\n\n```Note: There are no blank spaces```\n\n```Hint: Use \\n in string to jump to next line```\n\"\"\"", "inputs": [[1], [2], [5], [0], [-25]], "outputs": [["1"], ["2\n21"], ["5\n54\n543\n5432\n54321"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join((''.join((str(i) for i in range(n, j, -1))) for j in range(n - 1, -1, -1)))", "entry_point": "pattern", "task_id": "TACO_lite/160", "input_output_examples": [[[4], [6], [1]], [["4\n43\n432\n4321"], ["6\n65\n654\n6543\n65432\n654321"], ["1"]]]}
{"requirement": "def vowel_back(st):\n\"\"\"You need to play around with the provided string (s).\n\nMove consonants forward 9 places through the alphabet.\nIf they pass 'z', start again at 'a'.\n\nMove vowels back 5 places through the alphabet.\nIf they pass 'a', start again at 'z'.\nFor our Polish friends this kata does not count 'y' as a vowel.\n\nExceptions:\n\nIf the character is 'c' or 'o', move it back 1 place.\nFor 'd' move it back 3, and for 'e', move it back 4.\n\nIf a moved letter becomes 'c', 'o', 'd' or 'e', revert it back to it's original value.\n\nProvided string will always be lower case, won't be empty and will have no special characters.\n\"\"\"", "inputs": [["testcase"], ["codewars"], ["exampletesthere"], ["returnofthespacecamel"], ["bringonthebootcamp"], ["weneedanofficedog"]], "outputs": [["tabtbvba"], ["bnaafvab"], ["agvvyuatabtqaaa"], ["aatpawnftqabyvbabvvau"], ["kaiwpnwtqaknntbvvy"], ["fawaaavwnffibaanp"]], "starter_code": "def vowel_back(st):", "canonical_solution": "def vowel_back(st):\n    return st.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'vkbaafpqistuvwnyzabtpvfghi'))", "entry_point": "vowel_back", "task_id": "TACO_lite/161", "input_output_examples": [[["testcase"]], [["tabtbvba"]]]}
{"requirement": "def ackermann(m, n):\n\"\"\"The ackermann function is a famous function that played a big role in computability theory as the first example of a total computable function that is not primitive recursive.\n\nSince then the function has been a bit simplified but is still of good use. Due to its definition in terms of extremely deep recursion it can be used as a benchmark of a compiler's ability to optimize recursion. \n\nThe goal of this kata is to code a function which will be given two inputs, m and n, and will return the ackermann number A(m,n) defined by:\n\n```\nA(m,n) = n+1                          if m=0  \nA(m,n) = A(m-1,1)                     if m>0 , n=0\nA(m,n) = A(m-1,A(m,n-1))              if m,n > 0\n```\n\nm,n should be non-negative integers, the function should return null (Javascript), None (Python), or nil (Ruby) for other type, non-integer and negative numbers. In C, input is restricted to integer type.\n\"\"\"", "inputs": [[1, 1], [4, 0], [3, 3]], "outputs": [[3], [13], [61]], "starter_code": "def ackermann(m, n):", "canonical_solution": "from numbers import Number\n\ndef ackermann(m, n):\n    if isinstance(n, Number) and isinstance(m, Number):\n        if m >= 0 and n >= 0:\n            return ackermann_Aux(m, n)\n    return None\n\ndef ackermann_Aux(m, n):\n    if m == 0:\n        return n + 1\n    if m > 0:\n        if n == 0:\n            return ackermann_Aux(m - 1, 1)\n        if n > 0:\n            return ackermann_Aux(m - 1, ackermann_Aux(m, n - 1))", "entry_point": "ackermann", "task_id": "TACO_lite/162", "input_output_examples": [[[1, 1]], [[3]]]}
{"requirement": "def get_count(words=''):\n\"\"\"Error Handling is very important in coding and seems to be overlooked or not implemented properly.\n\n#Task\n\nYour task is to implement a function which takes a string as input and return an object containing the properties\nvowels and consonants. The vowels property must contain the total count of vowels {a,e,i,o,u}, and the total count of consonants {a,..,z} - {a,e,i,o,u}. Handle invalid input and don't forget to return valid ones.\n\n#Input\n\nThe input is any random string. You must then discern what are vowels and what are consonants and sum for each category their total occurrences in an object. However you could also receive inputs that are not strings. If this happens then you must return an object with a vowels and consonants total of 0 because the input was NOT a string. Refer to the Example section for a more visual representation of which inputs you could receive and the outputs expected. :)\n\nExample:\n\n```python\nInput: get_count('test')\nOutput: {vowels:1,consonants:3}\n\nInput: get_count('tEst')\nOutput: {vowels:1,consonants:3}\n\nInput get_count('    ')\nOutput: {vowels:0,consonants:0}\n\nInput get_count()\nOutput: {vowels:0,consonants:0}\n```\n\nC#\n\nA Counter class has been put in the preloaded section taking two parameters Vowels and Consonants this must be the Object you return!\n\"\"\"", "inputs": [["Test"], ["Here is some text"], ["To be a Codewarrior or not to be"], ["To Kata or not to Kata"], ["aeiou"], ["TEst"], ["HEre Is sOme text"], [["To Kata or not to Kata"]], [null], ["Test               "], ["Here is some text  "], ["                         "], [{"jjjjj": "jjjjj"}]], "outputs": [[{"vowels": 1, "consonants": 3}], [{"vowels": 6, "consonants": 8}], [{"vowels": 12, "consonants": 13}], [{"vowels": 8, "consonants": 9}], [{"vowels": 5, "consonants": 0}], [{"vowels": 1, "consonants": 3}], [{"vowels": 6, "consonants": 8}], [{"vowels": 0, "consonants": 0}], [{"vowels": 0, "consonants": 0}], [{"vowels": 1, "consonants": 3}], [{"vowels": 6, "consonants": 8}], [{"vowels": 0, "consonants": 0}], [{"vowels": 0, "consonants": 0}]], "starter_code": "def get_count(words=''):", "canonical_solution": "def get_count(words=''):\n    if not isinstance(words, str):\n        return {'vowels': 0, 'consonants': 0}\n    letter = ''.join([c.lower() for c in words if c.isalpha()])\n    vowel = ''.join([c for c in letter if c in 'aeiou'])\n    consonant = ''.join([c for c in letter if c not in 'aeiou'])\n    return {'vowels': len(vowel), 'consonants': len(consonant)}", "entry_point": "get_count", "task_id": "TACO_lite/163", "input_output_examples": [[["test"], ["tEst"], ["    "], []], [[{"vowels": 1, "consonants": 3}], [{"vowels": 1, "consonants": 3}], [{"vowels": 0, "consonants": 0}], [{"vowels": 0, "consonants": 0}]]]}
{"requirement": "def word_wrap(s, limit):\n\"\"\"Your job is to write a function that takes a string and a maximum number of characters per line and then inserts line breaks as necessary so that no line in the resulting string is longer than the specified limit.\n\nIf possible, line breaks should not split words. However, if a single word is longer than the limit, it obviously has to be split. In this case, the line break should be placed after the first part of the word (see examples below).\n\nReally long words may need to be split multiple times.\n\n#Input\n\nA word consists of one or more letters.\n\nInput text will be the empty string or a string consisting of one or more words separated by single spaces. It will not contain any punctiation or other special characters.\n\nThe limit will always be an integer greater or equal to one.\n\n#Examples\n\n**Note:** Line breaks in the results have been replaced with two dashes to improve readability.\n\n1. (\"test\", 7) -> \"test\"\n2. (\"hello world\", 7) -> \"hello--world\"\n3. (\"a lot of words for a single line\", 10) -> \"a lot of--words for--a single--line\"\n4. (\"this is a test\", 4) -> \"this--is a--test\"\n5. (\"a longword\", 6) -> \"a long--word\"\n6. (\"areallylongword\", 6) -> \"areall--ylongw--ord\"\n\n**Note:** Sometimes spaces are hard to see in the test results window.\n\"\"\"", "inputs": [["test", 7], ["hello world", 7], ["a lot of words for a single line", 10], ["this is a test", 4], ["a longword", 6], ["areallylongword", 6], ["aa", 3], ["aaa", 3], ["aaaa", 3], ["a a", 3], ["a aa", 3], ["a aaa", 3], ["a aaaa", 3], ["a aaaaa", 3], ["a a a", 3], ["a aa a", 3], ["a aaa a", 3], ["a aaaa a", 3], ["a aaaaa a", 3], ["a a aaa", 3], ["a aa aaa", 3], ["a aaa aaa", 3], ["a aaaa aaa", 3], ["a aaaaa aaa", 3], ["aaa aaaa a", 3], ["a b c dd eee ffff g hhhhh i", 3]], "outputs": [["test"], ["hello\nworld"], ["a lot of\nwords for\na single\nline"], ["this\nis a\ntest"], ["a long\nword"], ["areall\nylongw\nord"], ["aa"], ["aaa"], ["aaa\na"], ["a a"], ["a\naa"], ["a\naaa"], ["a a\naaa"], ["a a\naaa\na"], ["a a\na"], ["a\naa\na"], ["a\naaa\na"], ["a a\naaa\na"], ["a a\naaa\na a"], ["a a\naaa"], ["a\naa\naaa"], ["a\naaa\naaa"], ["a a\naaa\naaa"], ["a a\naaa\na\naaa"], ["aaa\naaa\na a"], ["a b\nc\ndd\neee\nfff\nf g\nhhh\nhh\ni"]], "starter_code": "def word_wrap(s, limit):", "canonical_solution": "def word_wrap(s, limit):\n    s, i, li = (s.split(), 0, [])\n    while i < len(s):\n        t = s[i]\n        if len(t) <= limit:\n            while i + 1 < len(s) and len(t) + len(s[i + 1]) + 1 <= limit:\n                t += ' ' + s[i + 1]\n                i += 1\n            if len(t) < limit:\n                if i + 1 < len(s) and len(s[i + 1]) > limit:\n                    temp = ' ' + s[i + 1][:limit - len(t) - 1]\n                    t += temp\n                    s[i + 1] = s[i + 1][len(temp) - 1:]\n            i += 1\n            li.append(t)\n        else:\n            li.append(s[i][:limit])\n            s[i] = s[i][limit:]\n    return '\\n'.join(li)", "entry_point": "word_wrap", "task_id": "TACO_lite/164", "input_output_examples": [[["test", 7], ["hello world", 7], ["a lot of words for a single line", 10], ["this is a test", 4], ["a longword", 6], ["areallylongword", 6]], [["test"], ["hello--world"], ["a lot of--words for--a single--line"], ["this--is a--test"], ["a long--word"], ["areall--ylongw--ord"]]]}
{"requirement": "def dup(arry):\n\"\"\"In this Kata, you will be given an array of strings and your task is to remove all consecutive duplicate letters from each string in the array.\n\nFor example: \n\n  * `dup([\"abracadabra\",\"allottee\",\"assessee\"]) = [\"abracadabra\",\"alote\",\"asese\"]`. \n  \n  * `dup([\"kelless\",\"keenness\"]) = [\"keles\",\"kenes\"]`.\n\nStrings will be lowercase only, no spaces. See test cases for more examples.\n\n~~~if:rust\nFor the sake of simplicity you can use the macro 'vec_of_string' to create a Vec with an array of string literals.\n~~~\n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\n\n[Vowel consonant lexicon](https://www.codewars.com/kata/59cf8bed1a68b75ffb000026)\n\"\"\"", "inputs": [[["ccooddddddewwwaaaaarrrrsssss", "piccaninny", "hubbubbubboo"]], [["abracadabra", "allottee", "assessee"]], [["kelless", "keenness"]], [["Woolloomooloo", "flooddoorroommoonlighters", "chuchchi"]], [["adanac", "soonness", "toolless", "ppellee"]], [["callalloo", "feelless", "heelless"]], [["putteellinen", "keenness"]], [["kelless", "voorraaddoosspullen", "achcha"]]], "outputs": [[["codewars", "picaniny", "hubububo"]], [["abracadabra", "alote", "asese"]], [["keles", "kenes"]], [["Wolomolo", "flodoromonlighters", "chuchchi"]], [["adanac", "sones", "toles", "pele"]], [["calalo", "feles", "heles"]], [["putelinen", "kenes"]], [["keles", "voradospulen", "achcha"]]], "starter_code": "def dup(arry):", "canonical_solution": "from itertools import groupby\n\ndef dup(arry):\n    return [''.join((c for c, grouper in groupby(i))) for i in arry]", "entry_point": "dup", "task_id": "TACO_lite/165", "input_output_examples": [[[["abracadabra", "allottee", "assessee"]], [["kelless", "keenness"]], [["ccooddddddewwwaaaaarrrrsssss", "piccaninny", "hubbubbubboo"]]], [["abracadabra", "alote", "asese"], ["keles", "kenes"], ["codewars", "picaniny", "hubububo"]]]}
{"requirement": "def is_triangle(a, b, c):\n\"\"\"Implement a method that accepts 3 integer values a, b, c. The method should return true if a triangle can be built with the sides of given length and false in any other case.\n\n(In this case, all triangles must have surface greater than 0 to be accepted).\n\"\"\"", "inputs": [[1, 2, 2], [7, 2, 2], [1, 2, 3], [1, 3, 2], [3, 1, 2], [5, 1, 2], [1, 2, 5], [2, 5, 1], [4, 2, 3], [5, 1, 5], [2, 2, 2], [-1, 2, 3], [1, -2, 3], [1, 2, -3], [0, 2, 3]], "outputs": [[true], [false], [false], [false], [false], [false], [false], [false], [true], [true], [true], [false], [false], [false], [false]], "starter_code": "def is_triangle(a, b, c):", "canonical_solution": "def is_triangle(a, b, c):\n    return a < b + c and b < a + c and (c < a + b)", "entry_point": "is_triangle", "task_id": "TACO_lite/166", "input_output_examples": [[[1, 2, 2]], [[true]]]}
{"requirement": "def total_kilometers(cons, petrol):\n\"\"\"John is developing a system to report fuel usage but needs help with the coding.\n\nFirst, he needs you to write a function that, given the actual consumption (in l/100 km) and remaining amount of petrol (in l), will give you how many kilometers you'll be able to drive.\n\nSecond, he needs you to write a function that, given a distance (in km), a consumption (in l/100 km), and an amount of petrol (in l), will return one of the following: If you can't make the distance without refueling, it should return the message \"You will need to refuel\". If you can make the distance, the function will check every 100 km and produce an array with [1:kilometers already driven. 2: kilometers till end. 3: remaining amount of petrol] and return all the arrays inside another array ([[after 100km], [after 200km], [after 300km]...])\n\nPLEASE NOTE: any of the values with decimals that you return should be rounded to 2 decimals.\n\"\"\"", "inputs": [[10, 60], [8, 0], [6.4, 54], [9.3, 87.3], [11.7, 63.4]], "outputs": [[600], [0], [843.75], [938.71], [541.88]], "starter_code": "def total_kilometers(cons, petrol):", "canonical_solution": "def total_kilometers(cons, petrol):\n    return round(100 * petrol / cons, 2)\n\ndef check_distance(dist, cons, petrol):\n    return 'You will need to refuel' if dist > total_kilometers(cons, petrol) else [[n * 100, dist - 100 * n, round(petrol - cons * n, 2)] for n in range(dist // 100 + 1)]", "entry_point": "total_kilometers", "task_id": "TACO_lite/167", "input_output_examples": [[[10, 60]], [[600]]]}
{"requirement": "def remove_exclamation_marks(s):\n\"\"\"Write function RemoveExclamationMarks which removes all exclamation marks from a given string.\n\"\"\"", "inputs": [["Hello World!"], ["Hello World!!!"], ["Hi! Hello!"], [""], ["Oh, no!!!"]], "outputs": [["Hello World"], ["Hello World"], ["Hi Hello"], [""], ["Oh, no"]], "starter_code": "def remove_exclamation_marks(s):", "canonical_solution": "def remove_exclamation_marks(s):\n    return s.replace('!', '')", "entry_point": "remove_exclamation_marks", "task_id": "TACO_lite/168", "input_output_examples": [[["Hello World!"]], [["Hello World"]]]}
{"requirement": "def graceful_tipping(bill):\n\"\"\"Adding tip to a restaurant bill in a graceful way can be tricky, thats why you need make a function for it.\n\nThe function will receive the restaurant bill (always a positive number) as an argument. You need to 1) **add at least 15%** in tip, 2) round that number up to an *elegant* value and 3) return it.\n\nWhat is an *elegant* number? It depends on the magnitude of the number to be rounded. Numbers below 10 should simply be rounded to whole numbers. Numbers 10 and above should be rounded like this:\n\n10 - 99.99... ---> Round to number divisible by 5\n\n100 - 999.99... ---> Round to number divisible by 50\n\n1000 - 9999.99... ---> Round to number divisible by 500\n\nAnd so on...\n\nGood luck!\n\n## Examples\n```\n 1  -->    2\n 7  -->    9\n12  -->   15\n86  -->  100\n```\n\"\"\"", "inputs": [[1], [7], [12], [86], [99], [1149], [983212]], "outputs": [[2], [9], [15], [100], [150], [1500], [1500000]], "starter_code": "def graceful_tipping(bill):", "canonical_solution": "from math import ceil, log10\n\ndef graceful_tipping(bill):\n    bill *= 1.15\n    if bill < 10:\n        return ceil(bill)\n    e = int(log10(bill))\n    unit = 10 ** e / 2\n    return ceil(bill / unit) * unit", "entry_point": "graceful_tipping", "task_id": "TACO_lite/169", "input_output_examples": [[[1], [7], [12], [86]], [[2], [9], [15], [100]]]}
{"requirement": "def get_score(arr) -> int:\n\"\"\"# A History Lesson\n\nTetris is a puzzle video game originally designed and programmed by Soviet Russian software engineer Alexey Pajitnov. The first playable version was completed on June 6, 1984. Pajitnov derived its name from combining the Greek numerical prefix tetra- (the falling pieces contain 4 segments) and tennis, Pajitnov's favorite sport.\n\n# About scoring system\n\nThe scoring formula is built on the idea that more difficult line clears should be awarded more points. For example, a single line clear is worth `40` points, clearing four lines at once (known as a Tetris) is worth `1200`.\n\nA level multiplier is also used. The game starts at level `0`. The level increases every ten lines you clear. Note that after increasing the level, the total number of cleared lines is not reset.\n\nFor our task you can use this table:\n\n\n        .demo {\n    width:70%;\n                border:1px solid #C0C0C0;\n                border-collapse:collapse;\n                padding:5px;\n        }\n        .demo th {\n                border:1px solid #C0C0C0;\n                padding:5px;\n        }\n        .demo td {\n                border:1px solid #C0C0C0;\n                padding:5px;\n        }\n\n\n\nLevel\nPoints for 1 line\nPoints for 2 lines\nPoints for 3 lines\nPoints for 4 lines\n\n\n0\n40\n100\n300\n1200\n\n\n1\n80\n200\n600\n2400\n\n\n2\n120\n300\n900\n3600\n\n\n3\n160\n400\n1200\n4800\n\n\n...\n\n\n7\n320\n800\n2400\n9600\n\n\n...\nFor level n you must determine the formula by yourself using given examples from the table.\n\n\n\n# Task\n\nCalculate the final score of the game using original Nintendo scoring system\n\n# Input\n\nArray with cleaned lines.  \nExample: `[4, 2, 2, 3, 3, 4, 2]`  \nInput will always be valid: array of random length (from `0` to `5000`) with numbers from `0` to `4`.\n\n# Ouput\n\nCalculated final score.  \n`def get_score(arr) -> int: return 0`\n\n# Example\n```python\nget_score([4, 2, 2, 3, 3, 4, 2]); # returns 4900\n```\nStep 1: `+1200` points for 4 lines (current level `0`). Score: `0+1200=1200`;\\\nStep 2: `+100` for 2 lines. Score: `1200+100=1300`;\\\nStep 3: `+100`. Score: `1300+100=1400`;\\\nStep 4: `+300` for 3 lines (current level still `0`). Score: `1400+300=1700`.\\\nTotal number of cleaned lines 11 (`4 + 2 + 2 + 3`), so level goes up to `1` (level ups each 10 lines);\\\nStep 5: `+600` for 3 lines (current level `1`). Score: `1700+600=2300`;\\\nStep 6: `+2400`. Score: `2300+2400=4700`;\\\nStep 7: `+200`. Total score: `4700+200=4900` points.\n\n# Other  \n\nIf you like the idea: leave feedback, and there will be more katas in the Tetris series.\n\n* 7 kyuTetris Series #1 — Scoring System\n* 6 kyuTetris Series #2 — Primitive Gameplay\n* 6 kyuTetris Series #3 — Adding Rotation (TBA)\n* 5 kyuTetris Series #4 — New Block Types (TBA)\n* 4 kyuTetris Series #5 — Complex Block Types (TBA?)\n\"\"\"", "inputs": [[[0, 1, 2, 3, 4]], [[0, 1, 1, 3, 0, 2, 1, 2]], [[2, 0, 4, 2, 2, 3, 0, 0, 3, 3]], [[0]], [[]]], "outputs": [[1640], [620], [3300], [0], [0]], "starter_code": "def get_score(arr) -> int:", "canonical_solution": "points = [0, 40, 100, 300, 1200]\n\ndef get_score(arr) -> int:\n    cleared = 0\n    score = 0\n    for lines in arr:\n        level = cleared // 10\n        score += (level + 1) * points[lines]\n        cleared += lines\n    return score", "entry_point": "get_score", "task_id": "TACO_lite/170", "input_output_examples": [[[[4, 2, 2, 3, 3, 4, 2]]], [[4900]]]}
{"requirement": "def decrypt(text, n):\n\"\"\"For building the encrypted string:Take every 2nd char from the string, then the other chars, that are not every 2nd char, and concat them as new String.\nDo this n times!\n\nExamples:\n```\n\"This is a test!\", 1 -> \"hsi  etTi sats!\"\n\"This is a test!\", 2 -> \"hsi  etTi sats!\" -> \"s eT ashi tist!\"\n```\n\nWrite two methods:\n```python\ndef encrypt(text, n)\ndef decrypt(encrypted_text, n)\n```\n\n```Fsharp\nlet encrypt (str:string) (n:int) -> string\nlet decrypt (str:string) (n:int) -> string\n```\n\nFor both methods:\nIf the input-string is null or empty return exactly this value!\nIf n is <= 0 then return the input text.\n\nThis kata is part of the Simple Encryption Series:\nSimple Encryption #1 - Alternating Split\nSimple Encryption #2 - Index-Difference\nSimple Encryption #3 - Turn The Bits Around\nSimple Encryption #4 - Qwerty\n\nHave fun coding it and please don't forget to vote and rank this kata! :-)\n\"\"\"", "inputs": [["This is a test!", 0], ["hsi  etTi sats!", 1], ["s eT ashi tist!", 2], [" Tah itse sits!", 3], ["This is a test!", 4], ["This is a test!", -1], ["hskt svr neetn!Ti aai eyitrsig", 1], ["", 0], [null, 0]], "outputs": [["This is a test!"], ["This is a test!"], ["This is a test!"], ["This is a test!"], ["This is a test!"], ["This is a test!"], ["This kata is very interesting!"], [""], [null]], "starter_code": "def decrypt(text, n):", "canonical_solution": "def decrypt(text, n):\n    if text in ('', None):\n        return text\n    ndx = len(text) // 2\n    for i in range(n):\n        a = text[:ndx]\n        b = text[ndx:]\n        text = ''.join((b[i:i + 1] + a[i:i + 1] for i in range(ndx + 1)))\n    return text\n\ndef encrypt(text, n):\n    for i in range(n):\n        text = text[1::2] + text[::2]\n    return text", "entry_point": "decrypt", "task_id": "TACO_lite/171", "input_output_examples": [[["This is a test!", 1], ["This is a test!", 2], ["", 5], ["abc", 0]], [["hsi  etTi sats!"], ["s eT ashi tist!"], [""], ["abc"]]]}
{"requirement": "def find(seq):\n\"\"\"If you have not ever heard the term **Arithmetic Progrossion**, refer to: \nhttp://www.codewars.com/kata/find-the-missing-term-in-an-arithmetic-progression/python\n\nAnd here is an unordered version. Try if you can survive lists of **MASSIVE** numbers (which means time limit should be considered). :D\n\nNote: Don't be afraid that the minimum or the maximum element in the list is missing, e.g. [4, 6, 3, 5, 2] is missing 1 or 7, but this case is excluded from the kata.\n\nExample:\n\n```python\nfind([3, 9, 1, 11, 13, 5]) # => 7\n```\n\"\"\"", "inputs": [[[3, 9, 1, 11, 13, 5]], [[5, -1, 0, 3, 4, -3, 2, -2]], [[2, -2, 8, -8, 4, -4, 6, -6]]], "outputs": [[7], [1], [0]], "starter_code": "def find(seq):", "canonical_solution": "def find(seq):\n    return (min(seq) + max(seq)) * (len(seq) + 1) / 2 - sum(seq)", "entry_point": "find", "task_id": "TACO_lite/172", "input_output_examples": [[[[3, 9, 1, 11, 13, 5]]], [[7]]]}
{"requirement": "def motif_locator(sequence, motif):\n\"\"\"In genetics, a sequence’s motif is a nucleotides (or amino-acid) sequence pattern. Sequence motifs have a biological significance. For more information you can take a look [here](https://en.wikipedia.org/wiki/Sequence_motif).\n\n\nFor this kata you need to complete the function `motif_locator`. This function receives 2 arguments - a sequence and a motif. Both arguments are strings.\n\nYou should return an array that contains all the start positions of the motif (in order). A sequence may contain 0 or more repetitions of the given motif. Note that the number of the first position is 1, not 0.\n\n**Some examples:**\n\n- For the `sequence` \"ACGTGGGGACTAGGGG\" and the `motif` \"GGGG\" the result should be [5, 13]. \n- For the `sequence` \"ACCGTACCAAGGGACC\" and the `motif` \"AAT\"  the result should be []\n- For the `sequence` \"GGG\" and the motif \"GG\" the result should be [1, 2]\n\n**Note**: You can take a look to my others bio-info kata [here](http://www.codewars.com/users/nbeck/authored)\n\"\"\"", "inputs": [["TTCCGGAACC", "CC"], ["ACGTTACAACGTTAG", "ACGT"], ["ACGTACGTACGT", "AAA"], ["ACGT", "ACGTGAC"]], "outputs": [[[3, 9]], [[1, 9]], [[]], [[]]], "starter_code": "def motif_locator(sequence, motif):", "canonical_solution": "def motif_locator(sequence, motif):\n    res, i = ([], 0)\n    while True:\n        i = sequence.find(motif, i) + 1\n        if not i:\n            return res\n        res.append(i)", "entry_point": "motif_locator", "task_id": "TACO_lite/173", "input_output_examples": [[["ACGTGGGGACTAGGGG", "GGGG"], ["ACCGTACCAAGGGACC", "AAT"], ["GGG", "GG"], ["TTCCGGAACC", "CC"]], [[5, 13], [], [1, 2], [3, 9]]]}
{"requirement": "def tram(stops, descending, onboarding):\n\"\"\"Linear Kingdom has exactly one tram line. It has `n` stops, numbered from 1 to n in the order of tram's movement. At the i-th stop ai passengers exit the tram, while bi passengers enter it. The tram is empty before it arrives at the first stop.\n\n## Your task\n\nCalculate the tram's minimum capacity such that the number of people inside the tram never exceeds this capacity at any time. Note that at each stop all exiting passengers exit before any entering passenger enters the tram.\n\n## Example\n\n```c++\ntram(4, {0, 2, 4, 4}, {3, 5, 2, 0}) ==> 6\n```\n  \nExplaination:\n* The number of passengers inside the tram before arriving is 0.\n* At the first stop 3 passengers enter the tram, and the number of passengers inside the tram becomes 3.\n* At the second stop 2 passengers exit the tram (1 passenger remains inside). Then 5 passengers enter the tram. There are 6 passengers inside the tram now.\n* At the third stop 4 passengers exit the tram (2 passengers remain inside). Then 2 passengers enter the tram. There are 4 passengers inside the tram now.\n* Finally, all the remaining passengers inside the tram exit the tram at the last stop. There are no passenger inside the tram now, which is in line with the constraints.\n\nSince the number of passengers inside the tram never exceeds 6, a capacity of 6 is sufficient. Furthermore it is not possible for the tram to have a capacity less than 6. Hence, 6 is the correct answer.\n\"\"\"", "inputs": [[4, [0, 2, 4, 4], [3, 5, 2, 0]], [2, [0, 2, 4, 4], [3, 5, 2, 0]], [1, [0, 2, 4, 4], [3, 5, 2, 0]], [10, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]], [5, [0, 2, 4, 14, 2], [3, 5, 14, 0, 0]]], "outputs": [[6], [6], [3], [25], [16]], "starter_code": "def tram(stops, descending, onboarding):", "canonical_solution": "from itertools import accumulate\n\ndef tram(stops, descending, onboarding):\n    return max(accumulate((o - d for d, o in zip(descending[:stops], onboarding))))", "entry_point": "tram", "task_id": "TACO_lite/174", "input_output_examples": [[[4, [0, 2, 4, 4], [3, 5, 2, 0]]], [[6]]]}
{"requirement": "def climb(n):\n\"\"\"For every positive integer N, there exists a unique sequence starting with 1 and ending with N and such that every number in the sequence is either the double of the preceeding number or the double plus 1. \n\nFor example, given N = 13, the sequence is [1, 3, 6, 13], because . . . :\n```\n 3 =  2*1 +1\n 6 =  2*3\n 13 = 2*6 +1\n```\n\nWrite a function that returns this sequence given a number N. Try generating the elements of the resulting list in ascending order, i.e., without resorting to a list reversal or prependig the elements to a list.\n\"\"\"", "inputs": [[1], [100], [12345], [54321]], "outputs": [[[1]], [[1, 3, 6, 12, 25, 50, 100]], [[1, 3, 6, 12, 24, 48, 96, 192, 385, 771, 1543, 3086, 6172, 12345]], [[1, 3, 6, 13, 26, 53, 106, 212, 424, 848, 1697, 3395, 6790, 13580, 27160, 54321]]], "starter_code": "def climb(n):", "canonical_solution": "def climb(n):\n    return [1] if n == 1 else climb(int(n / 2)) + [n]", "entry_point": "climb", "task_id": "TACO_lite/175", "input_output_examples": [[[13]], [[1, 3, 6, 13]]]}
{"requirement": "def num_blocks(w, l, h):\n\"\"\"Consider a pyramid made up of blocks. Each layer of the pyramid is a rectangle of blocks, and the dimensions of these rectangles increment as you descend the pyramid. So, if a layer is a `3x6` rectangle of blocks, then the next layer will be a `4x7` rectangle of blocks. A `1x10` layer will be on top of a `2x11` layer on top of a `3x12` layer, and so on.\n\n## Task\n\nGiven the dimensions of a pyramid's topmost layer `w,l`, and its height `h` (aka the number of layers), return the total number of blocks in the pyramid.\n\n## Examples\n\n`num_blocks(1, 1, 2)` will return `5`. This pyramid starts with a `1x1` layer and has 2 layers total. So, there is 1 block in the first layer, and `2x2=4` blocks in the second. Thus, 5 is the total number of blocks.\n\n`num_blocks(2, 4, 3)` will return `47`. This pyramid has 3 layers: `2x4`, `3x5`, and `4x6`. So, there are `47` blocks total.\n\n## Notes\n\nAll parameters will always be postive nonzero integers.\n\nEfficiency is important. There will be:\n\n* 100 'small' cases with `w`, `l`, and `h` below `20`.\n* 100 'big' cases with `w`, `l`, and `h` between `1e9` and `1e10`.\n\"\"\"", "inputs": [[1, 1, 2], [2, 4, 3], [1, 10, 10], [20, 30, 40]], "outputs": [[5], [47], [880], [83540]], "starter_code": "def num_blocks(w, l, h):", "canonical_solution": "def num_blocks(w, l, h):\n    return w * l * h + (w + l) * h * (h - 1) / 2 + h * (h - 1) * (2 * h - 1) / 6", "entry_point": "num_blocks", "task_id": "TACO_lite/176", "input_output_examples": [[[1, 1, 2], [2, 4, 3]], [[5], [47]]]}
{"requirement": "def multiplication_table(row, col):\n\"\"\"Create a function that accepts dimensions, of Rows x Columns, as parameters in order to create a multiplication table sized according to the given dimensions.  **The return value of the function must be an array, and the numbers must be Fixnums, NOT strings.\n\nExample:\n\nmultiplication_table(3,3)\n\n1       2       3       \n2       4       6       \n3       6       9\n\n-->[[1,2,3],[2,4,6],[3,6,9]]\n\nEach value on the table should be equal to the value of multiplying the number in its first row times the number in its first column.\n\"\"\"", "inputs": [[2, 2], [3, 3], [3, 4], [4, 4], [2, 5]], "outputs": [[[[1, 2], [2, 4]]], [[[1, 2, 3], [2, 4, 6], [3, 6, 9]]], [[[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12]]], [[[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10]]]], "starter_code": "def multiplication_table(row, col):", "canonical_solution": "def multiplication_table(row, col):\n    return [[(i + 1) * (j + 1) for j in range(col)] for i in range(row)]", "entry_point": "multiplication_table", "task_id": "TACO_lite/177", "input_output_examples": [[[3, 3], [2, 2]], [[[1, 2, 3], [2, 4, 6], [3, 6, 9]], [[1, 2], [2, 4]]]]}
{"requirement": "def is_madhav_array(arr):\n\"\"\"A Madhav array has the following property:\n\n```a[0] = a[1] + a[2] = a[3] + a[4] + a[5] = a[6] + a[7] + a[8] + a[9] = ...```\n\nComplete the function/method that returns `true` if the given array is a Madhav array, otherwise it returns `false`.\n\n*Edge cases: An array of length* `0` *or* `1` *should not be considered a Madhav array as there is nothing to compare.*\n\"\"\"", "inputs": [[[6, 2, 4, 2, 2, 2, 1, 5, 0, 0]], [[6, 2, 4, 2, 2, 2, 1, 5, 0, -100]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, -2, -1]], [[-6, -3, -3, 8, -5, -4]], [[-6, -3, -3, 8, -10, -4]], [[3, 1, 2, 3, 0]], [[3, 3]], [[]], [[1]], [[5, 2, 4, 1, 0, 3]], [[6, 2, 4, 2, 2, 2, 1, 5, 0, 0, -12, 13, -5, 4, 6]], [[6, 2, 4, 2, 2, 2, 1, 5, 0, 0, -12, 13, -5, 4, 1]], [[2, 1, 1]], [[2, 1, 1, 4, -1, -1]]], "outputs": [[true], [false], [true], [false], [true], [false], [false], [false], [false], [false], [true], [false], [true], [true]], "starter_code": "def is_madhav_array(arr):", "canonical_solution": "def is_madhav_array(arr):\n    nTerms = ((1 + 8 * len(arr)) ** 0.5 - 1) / 2\n    return len(arr) > 1 and (not nTerms % 1) and (len({sum(arr[int(i * (i + 1) // 2):int(i * (i + 1) // 2) + i + 1]) for i in range(int(nTerms))}) == 1)", "entry_point": "is_madhav_array", "task_id": "TACO_lite/178", "input_output_examples": [[[[6, 2, 4, 2, 2, 2, 1, 5, 0, 0]]], [[true]]]}
{"requirement": "def fishex(s):\n\"\"\"# How much is the fish! (- Scooter )\nThe ocean is full of colorful fishes. We as programmers want to know the hexadecimal value of these fishes.\n\n## Task\nTake all hexadecimal valid characters (a,b,c,d,e,f) of the given name and XOR them. Return the result as an integer.\n\n## Input\nThe input is always a string, which can contain spaces, upper and lower case letters but no digits. \n\n## Example\n\n`fishex(\"redlionfish\") -> e,d,f -> XOR -> 12`\n\"\"\"", "inputs": [["pufferfish"], ["puffers"], ["balloonfish"], ["blowfish"], ["bubblefish"], ["globefish"], ["swellfish"], ["toadfish"], ["toadies"], ["honey toads"], ["sugar toads"], ["sea squab"], [""], ["Aeneus corydoras"], ["African glass catfish"], ["African lungfish"], ["Aholehole"], ["Airbreathing catfish"], ["Airsac catfish"], ["Alaska blackfish"], ["Albacore"], ["Alewife"], ["Alfonsino"], ["Algae eater"], ["Alligatorfish"], ["Asian carps"], ["Asiatic glassfish"], ["Atka mackerel"], ["Atlantic cod"], ["Atlantic herring"], ["Atlantic salmon"], ["Atlantic saury"], ["Atlantic silverside"], ["Australasian salmon"], ["Australian grayling"], ["Australian herrin"], ["Australian lungfish"], ["Australian prowfish"], ["Ayu"]], "outputs": [[1], [14], [14], [4], [10], [10], [1], [8], [9], [9], [13], [5], [0], [1], [0], [12], [10], [12], [5], [8], [9], [5], [5], [4], [15], [6], [9], [6], [13], [2], [6], [6], [1], [10], [0], [4], [5], [5], [10]], "starter_code": "def fishex(s):", "canonical_solution": "from functools import reduce\nVALID = frozenset('abcdefABCDEF')\n\ndef fishex(s):\n    return reduce(lambda b, c: b ^ c, (int(a, 16) for a in s if a in VALID), 0)", "entry_point": "fishex", "task_id": "TACO_lite/179", "input_output_examples": [[["redlionfish"], ["pufferfish"]], [[12], [1]]]}
{"requirement": "def code(*args):\n\"\"\"You've just entered a programming contest and have a chance to win a million dollars. This is the last question you have to solve, so your victory (and your vacation) depend on it. Can you guess the function just by looking at the test cases? There are two numerical inputs and one numerical output. Goodluck!\n\nhint: go\n here\n\"\"\"", "inputs": [[9, 8], [123, 456], [3, 2], [1, 1], [12, 8], [200, 100], [100, 200]], "outputs": [[1], [1419], [13], [16], [88], [1698], [1698]], "starter_code": "def code(*args):", "canonical_solution": "TABLE = str.maketrans('0123456789', '9876543210')\n\ndef code(*args):\n    return sum(map(lambda n: int(str(n).translate(TABLE)), args))", "entry_point": "code", "task_id": "TACO_lite/180", "input_output_examples": [[[9, 8]], [[1]]]}
{"requirement": "def word_mesh(arr):\n\"\"\"You will be given an array of strings. The words in the array should mesh together where one or more letters at the end of one word will have the same letters (in the same order) as the next word in the array. But, there are times when all the words won't mesh. \n\nExamples of meshed words:\n\n  \"apply\" and \"plywood\"\n  \n  \"apple\" and \"each\"\n  \n  \"behemoth\" and \"mother\"\n  \nExamples of words that don't mesh:\n\n  \"apply\" and \"playground\"\n  \n  \"apple\" and \"peggy\"\n  \n  \"behemoth\" and \"mathematics\"\n  \n\nIf all the words in the given array mesh together, then your code should return the meshed letters in a string.\nYou won't know how many letters the meshed words have in common, but it will be at least one.\n\nIf all the words don't mesh together, then your code should return `\"failed to mesh\"`.\n\nInput: An array of strings. There will always be at least two words in the input array.\n\nOutput: Either a string of letters that mesh the words together or the string `\"failed to mesh\"`.\n\n\n## Examples\n\n#1:\n\n```\n[\"allow\", \"lowering\", \"ringmaster\", \"terror\"] --> \"lowringter\"\n```\nbecause:\n\n* the letters `\"low\"` in the first two words mesh together\n* the letters `\"ring\"` in the second and third word mesh together\n* the letters `\"ter\"` in the third and fourth words mesh together.\n\n\n#2:\n\n```\n[\"kingdom\", \"dominator\", \"notorious\", \"usual\", \"allegory\"] --> \"failed to mesh\"\n```\n\nAlthough the words `\"dominator\"` and `\"notorious\"` share letters in the same order, the last letters of the first word don't mesh with the first letters of the second word.\n\"\"\"", "inputs": [[["beacon", "condominium", "umbilical", "california"]], [["allow", "lowering", "ringmaster", "terror"]], [["abandon", "donation", "onion", "ongoing"]], [["jamestown", "ownership", "hippocampus", "pushcart", "cartographer", "pheromone"]], [["marker", "kerchief", "effortless", "lesson", "sonnet", "network", "workbook", "oklahoma", "marker"]], [["california", "niagara", "arachnophobia", "biannual", "alumni", "nibbles", "blessing"]], [["fortune", "unemployment", "mentor", "toronto", "ontogeny", "enya", "yabba", "balance", "ancestry"]], [["chlorine", "nevermore", "oregon", "gonzaga", "gambino", "inoculate"]], [["chlorine", "brinemore", "oregon", "gonzaga", "gambino", "inoculate"]], [["venture", "retreat", "eatery", "rye", "yearly", "lymphoma", "homage", "agent", "entrails"]], [["kingdom", "dominator", "notorious", "usual", "allegory"]], [["governor", "normal", "mallorey", "reykjavik", "viking", "kingdom", "dominator", "torrent", "rental", "allegory"]], [["fantastic", "stickleback", "acknowledge", "gentile", "leadership", "hippie", "piecemeal", "allosaurus"]], [["economy", "mystery", "erythema", "emaciated", "teddy", "dynamite", "mitering"]], [["abacus", "cussing", "singularity", "typewritten", "tentative", "ventricle", "clerical", "calcium", "umbrella"]], [["peanutbutterandjellyontoast", "jellyontoastcanbepleasant", "bepleasantpleaseorleave", "ventyouranger", "rangersinthepark"]], [["victoria", "iambic", "icicle", "clearview", "viewpoint", "ointment", "entrance"]], [["alexandergrahambell", "belladonna", "donnasummer", "summertimeblues", "bluesfestival"]], [["workingontherailroad", "roadmaster", "terracottawarrior", "orionsbeltstarcluster"]], [["victoria", "iambic", "icicle", "clearview", "rearviewpoint", "ointment", "entrance"]], [["alexandergrahambell", "belladonna", "singerdonnasummer", "summertimeblues", "bluesfestival"]], [["workingontherailroad", "roadmaster", "terracottawarrior", "orionsbeltstarcluster", "thelusterisgone"]], [["abbabbabba", "abbacccdddeee", "deeedledeedledum", "dumdum", "umbrellas", "llasaapsopuppy", "puppydogtails"]], [["indiansummer", "summerinthecity", "thecityneversleeps", "sleepsoundlydreamon", "dreamondreamondreamon"]], [["parisinfrance", "franceineurope", "europeonearth", "earthinthesolarsystem", "systematicallygettingbigger"]], [["hawaiianpunch", "punchandjudy", "judygarland", "landrover", "overtherainbow", "rainbowconnection"]], [["justcannot", "nothappyhappyhappy", "pyromaniacinwolfclothing", "thingshappenwhenyouleastexpect", "ectoplasm"]], [["thesunshinesinthemiddle", "themiddleearthwasarealplaceinthemovies", "themoviesisagooddateplace", "placement"]], [["ilikesunshine", "thesunshinesinthemiddle", "themiddleearthwasarealplaceinthemovies", "themoviesisagooddateplace", "placement"]], [["caughtinthemiddle", "thesunshinesinthemiddle", "themiddleearthwasarealplaceinthemovies", "themoviesisagooddateplace", "placement"]]], "outputs": [["conumcal"], ["lowringter"], ["dononon"], ["ownhippuscartpher"], ["kereflesssonnetworkokma"], ["niaarabiaalnibles"], ["unementtorontoenyyabaance"], ["neoregongaino"], ["failed to mesh"], ["reeatryyelyhomaageent"], ["failed to mesh"], ["normalreyvikkingdomtorrental"], ["sticackgelehippieal"], ["myeryemateddymite"], ["cussingtytenveclecalum"], ["jellyontoastbepleasantveranger"], ["iaiccleviewointent"], ["belldonnasummerblues"], ["roadteror"], ["failed to mesh"], ["failed to mesh"], ["failed to mesh"], ["abbadeeedumumllaspuppy"], ["summerthecitysleepsdreamon"], ["franceeuropeearthsystem"], ["punchjudylandoverrainbow"], ["notpythingect"], ["themiddlethemoviesplace"], ["failed to mesh"], ["failed to mesh"]], "starter_code": "def word_mesh(arr):", "canonical_solution": "import re\n\ndef word_mesh(arr):\n    common = re.findall('(.+) (?=\\\\1)', ' '.join(arr))\n    return ''.join(common) if len(common) + 1 == len(arr) else 'failed to mesh'", "entry_point": "word_mesh", "task_id": "TACO_lite/181", "input_output_examples": [[[["allow", "lowering", "ringmaster", "terror"]], [["kingdom", "dominator", "notorious", "usual", "allegory"]]], [["lowringter"], ["failed to mesh"]]]}
{"requirement": "def calc(a):\n\"\"\"# Task\n\nJohn won the championship of a TV show. He can get some bonuses.\n\nHe needs to play a game to determine the amount of his bonus.\n\nHere are some cards in a row. A number is written on each card.\n\nIn each turn, John can take a card, but only from the beginning or the end of the row. Then multiply the number on the card by an coefficient 2^(i)(i means the ith turn). The product is John's bonus of current turn.\n\nAfter all the cards are taken away, the game is over. John's final bonus is the sum of all rounds of bonuses.\n\nObviously, the order in which John takes the cards will affect the amount of John's final bonus.\n\nYour task is to help John calculate the maximum amount of bonuses he can get.\n\n# Input\n\n- `cards`: An integer array. Each element represents the number on the card.\n  - `1 <= cards.length <= 30`\n  - `1 <= cards[i] <= 100`\n\n\n- All inputs are valid.\n\n# Output\n\nAn integer. the maximum amount of bonuses John can get.\n\n# Eaxmple\n\nFor `cards=[1,2,5]`, the output should be `50`.\n\n```\nAll possible orders are:\n1->2->5   bonus:1x2+2*4+5*8=50\n1->5->2   bonus:1x2+5*4+2*8=38\n5->1->2   bonus:5*2+1*4+2*8=30\n5->2->1   bonus:5*2+2*4+1*8=26\nThe maximum amount of bonus is 50.\n```\n\"\"\"", "inputs": [[[1, 2, 5]], [[1]], [[1, 1]], [[1, 2, 1]], [[4, 10, 2, 3, 1, 3, 1, 6, 9]]], "outputs": [[50], [2], [6], [22], [6722]], "starter_code": "def calc(a):", "canonical_solution": "def calc(a):\n    res = [0] * (len(a) + 1)\n    for k in range(len(a)):\n        res = [2 * max(a[i] + res[i + 1], a[i + k] + res[i]) for i in range(len(a) - k)]\n    return res[0]", "entry_point": "calc", "task_id": "TACO_lite/182", "input_output_examples": [[[[1, 2, 5]]], [[50]]]}
{"requirement": "def my_add(a, b):\n\"\"\"You like the way the Python `+` operator easily handles adding different numeric types, but you need a tool to do that kind of addition without killing your program with a `TypeError` exception whenever you accidentally try adding incompatible types like strings and lists to numbers.\n\nYou decide to write a function `my_add()` that takes two arguments. If the arguments can be added together it returns the sum. If adding the arguments together would raise an error the function should return `None` instead.\n\nFor example, `my_add(1, 3.414)` would return `4.414`, but `my_add(42, \" is the answer.\")` would return `None`.\n\nHint: using a `try` / `except` statement may simplify this kata.\n\"\"\"", "inputs": [[1, 3.414], [42, " is the answer."], [10, "2"]], "outputs": [[4.414], [null], [null]], "starter_code": "def my_add(a, b):", "canonical_solution": "def my_add(a, b):\n    try:\n        return a + b\n    except TypeError:\n        return None", "entry_point": "my_add", "task_id": "TACO_lite/183", "input_output_examples": [[[1, 3.414], [42, " is the answer."]], [[4.414], [null]]]}
{"requirement": "def gematria(s):\n\"\"\"Gematria is an Assyro-Babylonian-Greek system of code and numerology later adopted into Jewish culture. The system assigns numerical value to a word or a phrase in the belief that words or phrases with identical numerical values bear some relation to each other or bear some relation to the number itself. While more commonly used on Hebrew words, there is also an English version.\n\nEach letter has a value and the gematrian value of a word or a phrase is the sum of those values. The code takes a word or an expression and returns the gematrian value of it.\n\nThe calculation is case insensitive and counts no spaces. \n\nExample: The gematrian value of \"love\" is 20+50+700+5 = 775\n\n‎These are the values of the different letters:\n\na=1, b=2, c=3, d=4, e=5, f=6, g=7, h=8, i=9, k=10, l=20,\nm=30, n=40, o=50, p=60, q=70, r=80, s=90, t=100, u=200,\nx=300, y=400, z=500, j=600, v=700, w=900\n\"\"\"", "inputs": [["love"], ["jaels"], ["JAELS"], ["Devil"], ["Coding is fun"]], "outputs": [[775], [716], [716], [738], [458]], "starter_code": "def gematria(s):", "canonical_solution": "TOME = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'k': 10, 'l': 20, 'm': 30, 'n': 40, 'o': 50, 'p': 60, 'q': 70, 'r': 80, 's': 90, 't': 100, 'u': 200, 'x': 300, 'y': 400, 'z': 500, 'j': 600, 'v': 700, 'w': 900}\n\ndef gematria(s):\n    return sum((TOME.get(c, 0) for c in s.lower()))", "entry_point": "gematria", "task_id": "TACO_lite/184", "input_output_examples": [[["love"]], [[775]]]}
{"requirement": "def finance(n):\n\"\"\"I need to save some money to buy a gift. I think I can do something like that:\n\nFirst week (W0) I save nothing on Sunday, 1 on Monday, 2 on Tuesday... 6 on Saturday,\nsecond week (W1) 2 on Monday... 7 on Saturday and so on according to the table below where the days are numbered from 0 to 6.\n\nCan you tell me how much I will have for my gift on Saturday evening after I have saved 12? (Your function finance(6) should return 168 which is the sum of the savings in the table). \n\nImagine now that we live on planet XY140Z-n where the days of the week are numbered from 0 to n (integer n > 0) and where\nI save from week number 0 to week number n included (in the table below n = 6).\n\nHow much money would I have at the end of my financing plan on planet XY140Z-n?\n\n\n\n  -- |Su|Mo|Tu|We|Th|Fr|Sa|\n   --|--|--|--|--|--|--|--|\n  W6 |  |  |  |  |  |  |12|\n  W5 |  |  |  |  |  |10|11|\n  W4 |  |  |  |  |8 |9 |10|\n  W3 |  |  |  |6 |7 |8 |9 |\n  W2 |  |  |4 |5 |6 |7 |8 |\n  W1 |  |2 |3 |4 |5 |6 |7 |\n  W0 |0 |1 |2 |3 |4 |5 |6 |\n  \n#Example:\n```\nfinance(5) --> 105\nfinance(6) --> 168\nfinance(7) --> 252\nfinance(5000) --> 62537505000\n```\n#Hint: \ntry to avoid nested loops\n\"\"\"", "inputs": [[5], [6], [8], [15], [100], [365], [730], [999], [2000], [4000], [5000]], "outputs": [[105], [168], [360], [2040], [515100], [24513765], [195308580], [499999500], [4006002000], [32024004000], [62537505000]], "starter_code": "def finance(n):", "canonical_solution": "def finance(n):\n    return n * (n + 1) * (n + 2) / 2", "entry_point": "finance", "task_id": "TACO_lite/185", "input_output_examples": [[[5], [6], [7], [5000]], [[105], [168], [252], [62537505000]]]}
{"requirement": "def womens_age(n):\n\"\"\"As you may know, once some people pass their teens, they jokingly only celebrate their 20th or 21st birthday, forever. With some maths skills, that's totally possible - you only need to select the correct number base!\n\nFor example, if they turn 32, that's exactly 20 - in base 16... Already 39? That's just 21, in base 19!\n\nYour task is to translate the given age to the much desired 20 (or 21) years, and indicate the number base, in the format specified below.\n\n**Note:** input will be always > 21\n\n\n### Examples:\n\n```\n32  -->  \"32? That's just 20, in base 16!\"\n39  -->  \"39? That's just 21, in base 19!\"\n```\n\n*Hint: if you don't know (enough) about [numeral systems](https://en.wikipedia.org/wiki/Numeral_system) and [radix](https://en.wikipedia.org/wiki/Radix), just observe the pattern!*\n\n---\n\n## My other katas\n\nIf you enjoyed this kata then please try [my other katas](https://www.codewars.com/collections/katas-created-by-anter69)! :-)\n\n---\n\n### *Translations are welcome!*\n\"\"\"", "inputs": [[32], [39], [22], [65], [83]], "outputs": [["32? That's just 20, in base 16!"], ["39? That's just 21, in base 19!"], ["22? That's just 20, in base 11!"], ["65? That's just 21, in base 32!"], ["83? That's just 21, in base 41!"]], "starter_code": "def womens_age(n):", "canonical_solution": "def womens_age(n):\n    return f\"{n}? That's just {20 + n % 2}, in base {n // 2}!\"", "entry_point": "womens_age", "task_id": "TACO_lite/186", "input_output_examples": [[[32], [39]], [["32? That's just 20, in base 16!"], ["39? That's just 21, in base 19!"]]]}
{"requirement": "def solve(a, b):\n\"\"\"Consider the prime number `23`. If we sum the square of its digits we get:\n`2^2 + 3^2 = 13`, then for `13: 1^2 + 3^2 = 10`, and finally for `10: 1^2 + 0^2 = 1`. \n\nSimilarly, if we start with prime number `7`, the sequence is: `7->49->97->130->10->1`.\n\nGiven a range, how many primes within that range will eventually end up being `1`? \n\nThe upperbound for the range is `50,000`. A range of `(2,25)` means that: `2 <= n < 25`. \n\nGood luck!\n\nIf you like this Kata, please try:\n\n[Prime reversion](https://www.codewars.com/kata/59b46276afcda204ed000094)\n\n[Domainant primes](https://www.codewars.com/kata/59ce11ea9f0cbc8a390000ed)\n\"\"\"", "inputs": [[1, 25], [100, 1000], [100, 2000], [100, 3000], [100, 4000]], "outputs": [[4], [28], [47], [65], [95]], "starter_code": "def solve(a, b):", "canonical_solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    sqrtn = int(n ** 0.5) + 1\n    for i in range(5, sqrtn, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef end_one(n):\n    while n > 6:\n        n = sum(map(lambda x: int(x) * int(x), f'{n}'))\n        if n == 1:\n            return True\n\ndef solve(a, b):\n    return sum((1 for n in range(a, b) if is_prime(n) and end_one(n)))", "entry_point": "solve", "task_id": "TACO_lite/187", "input_output_examples": [[[1, 25]], [[4]]]}
{"requirement": "def istree(matrix):\n\"\"\"In graph theory, a graph is a collection of nodes with connections between them.\nAny node can be connected to any other node exactly once, and can be connected to no nodes, to some nodes, or to every other node.\nNodes cannot be connected to themselves\nA path through a graph is a sequence of nodes, with every node connected to the node following and preceding it.\nA closed path is a path which starts and ends at the same node.\n\nAn open path:\n```\n1 -> 2 -> 3\n```\na closed path:\n```\n1 -> 2 -> 3 -> 1\n```\nA graph is connected if there is a path from every node to every other node.\nA graph is a tree if it is connected and there are no closed paths.\n\n\nYour job is to write a function 'istree', which returns true if a graph is a tree, and false if it is not a tree.\n\nGraphs will be given as an array with each item being an array of integers which are the nodes that node is connected to.\n\nFor example, this graph:\n```\n0--1\n|  |\n2--3--4\n```\nhas array:\n```\n[[1,2], [0,3], [0,3], [1,2,4], [3]]\n```\nNote that it is also not a tree, because it contains closed path:\n```\n0->1->3->2->0\n```\nA node with no connections is an empty array\nNote that if node 0 is connected to node 1, node 1 is also connected to node 0. This will always be true.\nThe order in which each connection is listed for each node also does not matter.\n\nGood luck!\n\"\"\"", "inputs": [[[[], []]], [[[1], [0]]], [[[1, 2], [0, 2], [0, 1]]], [[[1, 2, 3], [0, 2], [1, 2], [0]]], [[[1, 2, 3], [0], [0], [0, 4], [3]]], [[[1, 2, 3], [0], [0], [0, 4], [3], []]], [[[1], [0, 2], [1, 3, 5], [2, 4], [3, 5], [4, 2]]], [[[1], [0, 2, 3, 4], [1], [1], [1]]], [[[1], [0, 2, 3], [1], [1], [5], [4, 6, 7], [5], [5]]], [[[1, 2], [0, 3], [0, 3], [1, 2, 4], [3]]], [[[1, 2], [0, 2], [0, 1], []]], [[[1, 2], [0, 2], [0, 1], [4], [3]]]], "outputs": [[false], [true], [false], [false], [true], [false], [false], [true], [false], [false], [false], [false]], "starter_code": "def istree(matrix):", "canonical_solution": "def istree(matrix):\n    visited_nodes = set([0])\n    crossed_edges = set()\n    agenda = [0]\n    while agenda:\n        node = agenda.pop()\n        for i in matrix[node]:\n            if (node, i) in crossed_edges:\n                continue\n            if i in visited_nodes:\n                return False\n            agenda.append(i)\n            crossed_edges.add((i, node))\n            visited_nodes.add(i)\n    return len(visited_nodes) == len(matrix)", "entry_point": "istree", "task_id": "TACO_lite/188", "input_output_examples": [[[[[1, 2], [0, 3], [0, 3], [1, 2, 4], [3]]], [[], []]], [[false], [false]]]}
{"requirement": "def graytobinary(n: int) -> int:\n\"\"\"Given N in Gray Code, find its binary equivalent. Return the decimal representation of the binary equivalent.\nExample 1:\nInput: N = 4\nOutput: 7\nExplanation:\nGiven 4 representing gray code 110.\nBinary equivalent of gray code 110 is 100.\nReturn 7 representing gray code 100.\nExample 2:\nInput: N = 15\nOutput: 10\nExplanation:\nGiven 15 representing gray code 1000.\nBinary equivalent of gray code 1000 is 1111.\nReturn 10 representing gray code 1111 \nie binary 1010.\nExample 3:\nInput: N = 0\nOutput: 0\nExplanation: \nZero remains the same in all systems.\nYour Task: \nYou don't need to read input or print anything. Your task is to complete the function graytobinary() which accepts an integer n as an input parameter and returns decimal of the binary equivalent of the given gray code. \nExpected Time Complexity: O(log N)\nExpected Auxiliary Space: O(1)\nConstraints:\n0 <= N <= 10^{8}\n\"\"\"", "inputs": [[4], [15], [0]], "outputs": [[7], [10], [0]], "starter_code": "def graytobinary(n: int) -> int:", "canonical_solution": "def graytobinary(n: int) -> int:\n    binary = n\n    while n > 0:\n        n >>= 1\n        binary ^= n\n    return binary", "entry_point": "graytobinary", "task_id": "TACO_lite/189", "input_output_examples": [[[4], [15], [0]], [[7], [10], [0]]]}
{"requirement": "def switcher(arr):\n\"\"\"Given an array of numbers (in string format), you must return a string. The numbers correspond to the letters of the alphabet in reverse order: a=26, z=1 etc. You should also account for `'!'`, `'?'` and `' '` that are represented by '27', '28' and '29' respectively.\n\nAll inputs will be valid.\n\"\"\"", "inputs": [[["24", "12", "23", "22", "4", "26", "9", "8"]], [["25", "7", "8", "4", "14", "23", "8", "25", "23", "29", "16", "16", "4"]], [["4", "24"]], [["12"]], [["12", "28", "25", "21", "25", "7", "11", "22", "15"]]], "outputs": [["codewars"], ["btswmdsbd kkw"], ["wc"], ["o"], ["o?bfbtpel"]], "starter_code": "def switcher(arr):", "canonical_solution": "def switcher(arr):\n    d = {str(i): chr(123 - i) for i in range(1, 27)}\n    d.update({'27': '!'})\n    d.update({'28': '?'})\n    d.update({'29': ' '})\n    d.update({'0': ''})\n    return ''.join([d[str(i)] for i in arr])", "entry_point": "switcher", "task_id": "TACO_lite/190", "input_output_examples": [[[["24", "12", "23", "22", "4", "26", "9", "8"]]], [["codewars"]]]}
{"requirement": "def valid_romans(arr):\n\"\"\"## Task\n\nComplete the function that receives an array of strings (`arr`) as an argument and returns all the valid Roman numerals.\n\nBasic Roman numerals are denoted as:\n\n```\nI: 1, V: 5, X: 10, L: 50, C: 100, D: 500, M: 1000\n```\n\nFor the purposes of this kata we will consider valid only the numbers in range 0 - 5000 (both exclusive) since numbers >= 5000 were written in a different way (you had to place a heavy bar over the numeral that meant it was multiplied with 1000).\n\nThere are other ways of tackling this problem but the easiest is probably writing a Regular Expression.\n\n### Let's break the problem down:\n\nTo match a set of characters `/[1-9]/`(single digits) you should take into consideration the Roman numbers `I, II, III, IV, V, VI, VII, VIII, IX`. This could be done by testing with `/IX|IV|V?I{0,3}/`. This part `/I{0,3}/` matches `I, II or III` but we have a `V` appearing 0 or 1 times because of the `?` so `/V?I{0,3}/` would match `I,II,III,V,VI,VII or VIII`. However there is one flaw with this. Do you see it? It is the fact that it would also match an empty string `\"\"` because of the {0,3}. In order to pass the tests you will have to **filter out the empty strings** as well. So the entire part matches `I to IX`(inclusive) but what about larger digits?\n\nUse the same logic for the digit in the tens place and the hundreds place. Be sure to wrap each part (units, tens, hundreds, thousands) in a pair of braces `(IX|IV|V?I{0,3})` and for the digit in the thousands place the logic is pretty straight forward, you just have to match `M` 0 to 4 times (since 5000 is not included). Wrap everything up with `^` and `$` to make sure you match the entire string (^ matches from the beginning of the string, while $ denotes the end, meaning there is nothing after that sign.\n\n## Examples\n\n```\n[\"I\", \"IIV\", \"IVI\", \"IX\", \"XII\", \"MCD\"] ==> [\"I\", \"IX\", \"XII\", \"MCD\"]\n\n[\"MMMMCMXCIX\", \"MMDCXLIV\", \"MMCIX\", \"CLD\", \"LCD\"]) ==> [\"MMMMCMXCIX\", \"MMDCXLIV\", \"MMCIX\"]\n```\n\nGood luck!\n\"\"\"", "inputs": [[["MMMCDLXVL", "MDLXXXVI", "DCLXII", "MMMMCLL", "MMDCCCLXXXIVCD"]], [["MMMMCCCXXXII", "MMDCCCXXVCD", "MMCCCXLV", "DCCLXVIIICD", "MMMMCXII"]], [["DCCLIVI", "MDCCXXXVVI", "MDLXXVI", "MDVIL", "MCCLXIII"]], [["DV", "", "CLVIII", "MDCCCXXCD", "MDCLXVI", "MMMDCCCLXXXVI"]], [["MMCDXVIII", "", "MMMCCXXXIV", "MMMMDCLXXXI", "MMMCMXIL", "MMMMCLXI"]]], "outputs": [[["MDLXXXVI", "DCLXII"]], [["MMMMCCCXXXII", "MMCCCXLV", "MMMMCXII"]], [["MDLXXVI", "MCCLXIII"]], [["DV", "CLVIII", "MDCLXVI", "MMMDCCCLXXXVI"]], [["MMCDXVIII", "MMMCCXXXIV", "MMMMDCLXXXI", "MMMMCLXI"]]], "starter_code": "def valid_romans(arr):", "canonical_solution": "import re\nPATTERN = re.compile('^M{0,4}(CM|CD|D?C{,3})(XC|XL|L?X{,3})(IX|IV|V?I{,3})$')\n\ndef valid_romans(arr):\n    return [e for e in arr if e and PATTERN.match(e)]", "entry_point": "valid_romans", "task_id": "TACO_lite/191", "input_output_examples": [[[["I", "IIV", "IVI", "IX", "XII", "MCD"]], [["MMMMCMXCIX", "MMDCXLIV", "MMCIX", "CLD", "LCD"]], [["MMMCDLXVL", "MDLXXXVI", "DCLXII", "MMMMCLL", "MMDCCCLXXXIVCD"]]], [["I", "IX", "XII", "MCD"], ["MMMMCMXCIX", "MMDCXLIV", "MMCIX"], ["MDLXXXVI", "DCLXII"]]]}
{"requirement": "def find_min_num(d, n=1):\n\"\"\"The number ```12``` is the first number in having six divisors, they are: ```1, 2, 3, 4, 6 and 12.```\nYour challenge for this kata is to find the minimum number that has a certain number of divisors.\nFor this purpose we have to create the function \n\n```find_min_num() or findMinNum() or similar in the other languages```\n\nthat receives the wanted number of divisors ```num_div```, and outputs the smallest number having an amount of divisors equals to ```num_div```.\n\nLet's see some cases:\n```\nfind_min_num(10) = 48 # divisors are: 1, 2, 3, 4, 6, 8, 12, 16, 24 and  48\nfind_min_num(12) = 60\n```\nIn this kata all the tests will be with ```numDiv < 80```\n\n(There will be a next kata with numDiv < 10000, Find the First Number Having a Certain Number of Divisors II, should have the help of number theory)\n\nEnjoy it and happy coding!\n(Memoization is advisable)\n\"\"\"", "inputs": [[6], [10], [12], [13]], "outputs": [[12], [48], [60], [4096]], "starter_code": "def find_min_num(d, n=1):", "canonical_solution": "def find_min_num(d, n=1):\n    while div_num(n) != d:\n        n += 1\n    return n\n\ndef div_num(n):\n    s = n ** 0.5\n    return sum((2 for k in range(1, int(s) + 1) if n % k == 0)) - (s % 1 == 0)", "entry_point": "find_min_num", "task_id": "TACO_lite/192", "input_output_examples": [[[10], [12]], [[48], [60]]]}
{"requirement": "def self_converge(number):\n\"\"\"### self_converge\n`Goal`: Given a number (with a minimum of 3 digits), return the number of iterations it takes to arrive at a derived number that converges on to itself, as per the following [Kaprekar][Kaprekar] routine. As a learning exercise, come up with a solution that uses recursion. The\nfollowing steps would be applicable to a number that originally had\nexactly 4 digits.\n\n0. Initialize a counter to count the number of iterations\n1. Take any four-digit number `n`, using at least two different digits.\n2. Arrange the digits in descending and then in ascending order to get two four-digit numbers, adding leading zeros if necessary. \n    - Add as many zeroes so that the width of the original number is maintained.\n3. Subtract the smaller number from the bigger number. Let us call this `nseq`.\n4. Check if `nseq` (the remainder) from Step 4 equals the previous value of `n`. If not, increment the iteration counter and go back to step 2 and perform it on the `nseq`. \n\nIf the number of digits to start with was more than 4, convergence occurs on to a `cycle` of numbers. Therefore in Step 5, detect this cycle by comparing to not only the previous value, but to all previous values of `n`.\n  - If there is a match, then return the count of iterations\n  - If the sequence_number collapses to zero, then return -1 \n\n[Kaprekar]: http://mathworld.wolfram.com/KaprekarRoutine.html\n\n### Converge values  \nWhile 3-digit numbers converge to the same unique number `k` which is also 3 digits long, all 4-digit numbers also converge to the same unique value `k1` which is 4 digits long. However, 5 digit numbers converge to any one of the following values: `53955, 59994, 61974, 62964, 63954, 71973, 74943, 75933, 82962, 83952`.\n\n### Example\n`1234`  ->   `4`\n```\n1. 4321 - 1234 =  3087 /   \n2. 8730 - 378  =  8352 /   \n3. 8532 - 2358 =  6174 /   \n4. 7641 - 1467 =  6174 // same as previous\n```\n`414` -> `5`\n```\n1. 441 - 144 =  297 /   \n2. 972 - 279 =  693 /   \n3. 963 - 369 =  594 /\n4. 954 - 459 =  495 /\n5. 954 - 459 =  495 // same as previous\n```\n`50000` -> `4`\n```\n1. 50000 - 5      =  49995 /   \n2. 99954 - 45999  =  53955 /  # first \n3. 95553 - 35559  =  59994 /\n4. 99954 - 45999  =  53955 /  # 2nd time\n```\n\"\"\"", "inputs": [[4321], [2111], [211], [90900], [992299229]], "outputs": [[4], [6], [7], [9], [22]], "starter_code": "def self_converge(number):", "canonical_solution": "def self_converge(number):\n    n, cycle = (str(number), set())\n    while n not in cycle:\n        cycle.add(n)\n        s = ''.join(sorted(n))\n        n = '%0*d' % (len(n), int(s[::-1]) - int(s))\n    return -1 if not int(n) else len(cycle)", "entry_point": "self_converge", "task_id": "TACO_lite/193", "input_output_examples": [[[1234], [414], [50000]], [[4], [5], [4]]]}
{"requirement": "def target_game(values):\n\"\"\"## Task\n In your favorite game, you must shoot a target with a water-gun to gain points. Each target can be worth a different amount of points. \n \n You are guaranteed to hit every target that you try to hit. You cannot hit consecutive targets though because targets are only visible for one second (one at a time) and it takes you a full second to reload your water-gun after shooting (you start the game already loaded).\n\n Given an array `vals` with the order of each target's point value, determine the maximum number of points that you can win.\n\n## Example\n For `vals = [1, 2, 3, 4]`, the result should be `6`.\n \n your optimal strategy would be to let the first one pass and shoot the second one with value 2 and the 4th one with value 4 thus:\n\n `vals[1](2) + vals[3](4) = 6`\n \n For `vals = [5, 5, 5, 5, 5]`, the result should be `15`.\n \n your optimal strategy would be to shoot the 1st, 3rd and 5th value:\n \n `5 + 5 + 5 = 15`\n \n You haven't shoot the 2nd, 4th value because you are reloading your water-gun after shooting other values.\n \n Note that the value can be zero or negative, don't shoot them ;-)\n \n For `vals = [0, 0, -1, -1]`, the result should be `0`.\n \n For `vals = [5, -2, -9, -4]`, the result should be `5`.\n \n Shoot the first one is enough.\n \n## Input/Output\n\n\n - `[input]` integer array `vals`\n\n  The point values (negative or non-negative) of the targets (in order of appearance).\n\n\n - `[output]` an integer\n\n  The maximum number of points that you can score.\n\"\"\"", "inputs": [[[1, 2, 3, 4]], [[1, 3, 1]], [[5, 5, 5, 5, 5]], [[36, 42, 93, 29, 0, 33, 15, 84, 14, 24, 81, 11]], [[73, 80, 40, 86, 14, 96, 10, 56, 61, 84, 82, 36, 85]], [[11, 82, 47, 48, 80, 35, 73, 99, 86, 32, 32]], [[26, 54, 36, 35, 63, 58, 31, 80, 59, 61, 34, 54, 62, 73, 89, 7, 98, 91, 78]], [[0, 0, -1, -1]], [[1, 0, 0, 1]], [[5, -2, -9, -4]]], "outputs": [[6], [3], [15], [327], [490], [353], [615], [0], [2], [5]], "starter_code": "def target_game(values):", "canonical_solution": "def target_game(values):\n    a = b = 0\n    for n in values:\n        a, b = (b, max(a + n, b))\n    return max(a, b)", "entry_point": "target_game", "task_id": "TACO_lite/194", "input_output_examples": [[[[1, 2, 3, 4]], [[5, 5, 5, 5, 5]], [[0, 0, -1, -1]], [[5, -2, -9, -4]]], [[6], [15], [0], [5]]]}
{"requirement": "def house_of_cards(n):\n\"\"\"You want to build a standard house of cards, but you don't know how many cards you will need. Write a program which will count the minimal number of cards according to the number of floors you want to have. For example, if you want a one floor house, you will need 7 of them (two pairs of two cards on the base floor, one horizontal card and one pair to get the first floor). Here you can see which kind of house of cards I mean:\nhttp://www.wikihow.com/Build-a-Tower-of-Cards\n\n## Note about floors:\nThis kata uses the British numbering system for building floors. If you want your house of cards to have a first floor, it needs a ground floor and then a first floor above that.\n\n### Details (Ruby & JavaScript & Python & R)\nThe input must be an integer greater than 0, for other input raise an error.\n\n### Details (Haskell)\nThe input must be an integer greater than 0, for other input return `Nothing`.\n\"\"\"", "inputs": [[1], [2], [3]], "outputs": [[7], [15], [26]], "starter_code": "def house_of_cards(n):", "canonical_solution": "def house_of_cards(n):\n    if n >= 1:\n        return (n + 1) * n / 2 + (n + 2) * (n + 1)\n    raise ValueError", "entry_point": "house_of_cards", "task_id": "TACO_lite/195", "input_output_examples": [[[1]], [[7]]]}
{"requirement": "def counter_effect(hit_count):\n\"\"\"# Introduction\n\nYou are the developer working on a website which features a large counter on its homepage, proudly displaying the number of happy customers who have downloaded your companies software.\n\nYou have been tasked with adding an effect to this counter to make it more interesting.  \n\nInstead of just displaying the count value immediatley when the page loads, we want to create the effect of each digit cycling through its preceding numbers before stopping on the actual value.\n\n\n\n# Task\n\nAs a step towards achieving this; you have decided to create a function that will produce a multi-dimensional array out of the hit count value.  Each inner dimension of the array represents an individual digit in the hit count, and will include all numbers that come before it, going back to 0.\n\n## Rules\n* The function will take one argument which will be a four character `string` representing hit count\n* The function must return a multi-dimensional array containing four inner arrays\n* The final value in each inner array must be the actual value to be displayed\n* Values returned in the array must be of the type `number`\n\n**Examples**\n\"\"\"", "inputs": [["1250"], ["0050"], ["0000"]], "outputs": [[[[0, 1], [0, 1, 2], [0, 1, 2, 3, 4, 5], [0]]], [[[0], [0], [0, 1, 2, 3, 4, 5], [0]]], [[[0], [0], [0], [0]]]], "starter_code": "def counter_effect(hit_count):", "canonical_solution": "def counter_effect(hit_count):\n    return [[i for i in range(int(hit_count[x]) + 1)] for x in range(4)]", "entry_point": "counter_effect", "task_id": "TACO_lite/196", "input_output_examples": [[["1250"]], [[[[0, 1], [0, 1, 2], [0, 1, 2, 3, 4, 5], [0]]]]]}
{"requirement": "def the_biggest_search_keys(*keys):\n\"\"\"You're a programmer in a SEO company. The SEO specialist of your company gets the list of all project keywords everyday, then he looks for the longest keys to analyze them.\n\nYou will get the list with keywords and must write a simple function that returns the biggest search keywords and sorts them in lexicographical order.\n\nFor instance you might get:\n```python\n'key1', 'key2', 'key3', 'key n', 'bigkey2', 'bigkey1'\n```\n\nAnd your function should return:\n```python\n\"'bigkey1', 'bigkey2'\"\n```\n\nDon't forget to rate this kata! Thanks :)\n\"\"\"", "inputs": [["key1", "key22", "key333"], ["coding", "sorting", "tryruby"], ["small keyword", "how to coding?", "very nice kata", "a lot of keys", "I like Ruby!!!"], ["pippi"]], "outputs": [["'key333'"], ["'sorting', 'tryruby'"], ["'I like Ruby!!!', 'how to coding?', 'very nice kata'"], ["'pippi'"]], "starter_code": "def the_biggest_search_keys(*keys):", "canonical_solution": "def the_biggest_search_keys(*keys):\n    L = sorted(keys, key=lambda key: (-len(key), key))\n    i = next((i for i, key in enumerate(L) if len(key) != len(L[0])), None)\n    return str(L[:i])[1:-1] or \"''\"", "entry_point": "the_biggest_search_keys", "task_id": "TACO_lite/197", "input_output_examples": [[["key1", "key2", "key3", "key n", "bigkey2", "bigkey1"], ["key1", "key22", "key333"]], [["'bigkey1', 'bigkey2'"], ["'key333'"]]]}
{"requirement": "def strange_coach(players):\n\"\"\"# Task\n Mirko has been moving up in the world of basketball. He started as a mere spectator, but has already reached the coveted position of the national team coach!\n\n Mirco is now facing a difficult task: selecting five primary players for the upcoming match against Tajikistan. Since Mirko is incredibly lazy, he doesn't bother remembering players' names, let alone their actual skills. That's why he has settled on selecting five players who share the same first letter of their surnames, so that he can remember them easier. If there are no five players sharing the first letter of their surnames, Mirko will simply forfeit the game!\n\n Your task is to find the first letters Mirko's players' surnames can begin with(In alphabetical order), or return `\"forfeit\"` if Mirko can't gather a team.\n\n# Input/Output\n\n\n - `[input]` string array `players`\n\n  Array of players' surnames, consisting only of lowercase English letters.\n\n \n - `[output]` a string\n\n  A **sorted** string of possible first letters, or \"forfeit\" if it's impossible to gather a team.\n\n\n# Example\n\nFor `players = [\"michael\",\"jordan\",\"lebron\",\"james\",\"kobe\",\"bryant\"]`, the output should be `\"forfeit\"`.\n\n For\n ```\n players = [\"babic\",\"keksic\",\"boric\",\"bukic\",\n              \"sarmic\",\"balic\",\"kruzic\",\"hrenovkic\",\n              \"beslic\",\"boksic\",\"krafnic\",\"pecivic\",\n              \"klavirkovic\",\"kukumaric\",\"sunkic\",\"kolacic\",\n              \"kovacic\",\"prijestolonasljednikovic\"]\n```\nthe output should be \"bk\".\n\"\"\"", "inputs": [[["michael", "jordan", "lebron", "james", "kobe", "bryant"]], [["babic", "keksic", "boric", "bukic", "sarmic", "balic", "kruzic", "hrenovkic", "beslic", "boksic", "krafnic", "pecivic", "klavirkovic", "kukumaric", "sunkic", "kolacic", "kovacic", "prijestolonasljednikovic"]], [["jgztazpytubijfsmjz", "bokvgratzzdibku", "qineboilzoqdqivc", "bfctyltibtkbxq", "vioxcuhqhikxeqwekqkjo", "nrvsdhttr", "eiaoajuwxpwmyliqikzcchid", "bxrwawgor", "gbsqaxotzmblxttj", "kwchrcaconuwaivhvnyf", "neiemapiica", "bppao", "bxujiwivsjfbqrzygpdgkyz", "jnzrhhmcgcpffflpzwmqib", "jhozlevckrrwimdmyzc", "bomojotkqqditelsk", "ywmbheywzfyqjjs", "snwrclyjkbspysjftcmyak", "eelrsgkuhu", "dnyzsvqjjuqoc"]]], "outputs": [["forfeit"], ["bk"], ["b"]], "starter_code": "def strange_coach(players):", "canonical_solution": "from collections import Counter\n\ndef strange_coach(players):\n    return ''.join(sorted((i for i, j in Counter(map(lambda x: x[0], players)).most_common() if j >= 5))) or 'forfeit'", "entry_point": "strange_coach", "task_id": "TACO_lite/198", "input_output_examples": [[[["michael", "jordan", "lebron", "james", "kobe", "bryant"]], [["babic", "keksic", "boric", "bukic", "sarmic", "balic", "kruzic", "hrenovkic", "beslic", "boksic", "krafnic", "pecivic", "klavirkovic", "kukumaric", "sunkic", "kolacic", "kovacic", "prijestolonasljednikovic"]]], [["forfeit"], ["bk"]]]}
{"requirement": "def get_free_urinals(urinals):\n\"\"\"# How many urinals are free?\nIn men's public toilets with urinals, there is this unwritten rule that you leave at least one urinal free\nbetween you and the next person peeing. \nFor example if there are 3 urinals and one person is already peeing in the left one, you will choose the\nurinal on the right and not the one in the middle.\nThat means that a maximum of 3 people can pee at the same time on public toilets with \n5 urinals when following this rule (Only 2 if the first person pees into urinal 2 or 4).\n\n![Imgur Urinals](https://i.imgur.com/imZE6xm.png)\n\n## Your task:\nYou need to write a function that returns the maximum of free urinals as an integer according to the unwritten rule.\n\n### Input\nA String containing 1s and 0s (Example: `10001`) (1 <= Length <= 20)  \nA one stands for a taken urinal and a zero for a free one. \n\n### Examples\n\n`10001` returns 1 (10101)  \n`1001` returns 0 (1001)  \n`00000` returns 3 (10101)  \n`0000` returns 2 (1001)  \n`01000` returns 1 (01010 or 01001) \n\n### Note\nWhen there is already a mistake in the input string (for example `011`), then return `-1`\n\nHave fun and don't pee into the wrong urinal ;)\n\"\"\"", "inputs": [["10001"], ["1001"], ["00000"], ["0000"], ["01000"], ["00010"], ["10000"], ["1"], ["0"], ["10"], ["110"], ["1011000001"]], "outputs": [[1], [0], [3], [2], [1], [1], [2], [0], [1], [0], [-1], [-1]], "starter_code": "def get_free_urinals(urinals):", "canonical_solution": "def get_free_urinals(urinals):\n    return -1 if '11' in urinals else sum(((len(l) - 1) // 2 for l in f'0{urinals}0'.split('1')))", "entry_point": "get_free_urinals", "task_id": "TACO_lite/199", "input_output_examples": [[["10001"], ["1001"], ["00000"], ["0000"], ["01000"]], [[1], [0], [3], [2], [1]]]}
{"requirement": "def swap(string_):\n\"\"\"Given a string, swap the case for each of the letters.\n\ne.g. CodEwArs --> cODeWaRS\n\n### Examples\n\n```\n\"\"           ->   \"\"\n\"CodeWars\"   ->   \"cODEwARS\"\n\"abc\"        ->   \"ABC\"\n\"ABC\"        ->   \"abc\"\n\"123235\"     ->   \"123235\"\n```\n\"\"\"", "inputs": [["HelloWorld"], ["CodeWars"], ["ThIs iS A l0NG sENTence witH nUMbERs in IT 123 456"], [""], [" "], ["  "], [" 1a1 "], ["H_E_l-l_0 WO|||Rld"], ["TeSt"], ["EeEEeeEEEeee"]], "outputs": [["hELLOwORLD"], ["cODEwARS"], ["tHiS Is a L0ng SentENCE WITh NumBerS IN it 123 456"], [""], [" "], ["  "], [" 1A1 "], ["h_e_L-L_0 wo|||rLD"], ["tEsT"], ["eEeeEEeeeEEE"]], "starter_code": "def swap(string_):", "canonical_solution": "def swap(string_):\n    return string_.swapcase()", "entry_point": "swap", "task_id": "TACO_lite/200", "input_output_examples": [[[""], ["CodeWars"], ["abc"], ["ABC"], ["123235"], ["HelloWorld"]], [[""], ["cODEwARS"], ["ABC"], ["abc"], ["123235"], ["hELLOwORLD"]]]}
{"requirement": "def inside_out(s):\n\"\"\"You are given a string of words (x), for each word within the string you need to turn the word 'inside out'. By this I mean the internal letters will move out, and the external letters move toward the centre. \n\nIf the word is even length, all letters will move. If the length is odd, you are expected to leave the 'middle' letter of the word where it is. \n\nAn example should clarify:\n\n'taxi' would become 'atix'\n'taxis' would become 'atxsi'\n\"\"\"", "inputs": [["man i need a taxi up to ubud"], ["what time are we climbing up the volcano"], ["take me to semynak"], ["massage yes massage yes massage"], ["take bintang and a dance please"]], "outputs": [["man i ende a atix up to budu"], ["hwta item are we milcgnib up the lovcona"], ["atek me to mesykan"], ["samsega yes samsega yes samsega"], ["atek nibtgna and a adnec elpesa"]], "starter_code": "def inside_out(s):", "canonical_solution": "import re\n\ndef inside_out(s):\n    return re.sub('\\\\S+', lambda m: inside_out_word(m.group()), s)\n\ndef inside_out_word(s):\n    i, j = (len(s) // 2, (len(s) + 1) // 2)\n    return s[:i][::-1] + s[i:j] + s[j:][::-1]", "entry_point": "inside_out", "task_id": "TACO_lite/201", "input_output_examples": [[["taxi"], ["taxis"], ["man i need a taxi up to ubud"]], [["atix"], ["atxsi"], ["man i ende a atix up to budu"]]]}
{"requirement": "def char_to_ascii(string):\n\"\"\"Take a string and return a hash with all the ascii values of the characters in the string.\nReturns nil if the string is empty.\nThe key is the character, and the value is the ascii value of the character.\nRepeated characters are to be ignored and non-alphebetic characters as well.\n\"\"\"", "inputs": [[""], ["a"], ["aaa"], ["hello world"], ["ABaa ^"]], "outputs": [[null], [{"a": 97}], [{"a": 97}], [{"h": 104, "e": 101, "l": 108, "o": 111, "w": 119, "r": 114, "d": 100}], [{"A": 65, "B": 66, "a": 97}]], "starter_code": "def char_to_ascii(string):", "canonical_solution": "def char_to_ascii(string):\n    return {c: ord(c) for c in set(string) if c.isalpha()} if len(string) else None", "entry_point": "char_to_ascii", "task_id": "TACO_lite/202", "input_output_examples": [[[""]], [[null]]]}
{"requirement": "def abundant_number(num):\n\"\"\"An abundant number or excessive number is a number for which the sum of its proper divisors is greater than the number itself. \n\nThe integer 12 is the first abundant number. Its proper divisors are 1, 2, 3, 4 and 6 for a total of 16 (> 12).\n\nDerive function `abundantNumber(num)/abundant_number(num)` which returns `true/True/.true.` if `num` is abundant, `false/False/.false.` if not.\n\"\"\"", "inputs": [[12], [18], [37], [120], [77], [118], [5830], [11410], [14771], [11690]], "outputs": [[true], [true], [false], [true], [false], [false], [true], [true], [false], [true]], "starter_code": "def abundant_number(num):", "canonical_solution": "def abundant_number(num):\n    return sum([e for e in range(1, num) if num % e == 0]) > num", "entry_point": "abundant_number", "task_id": "TACO_lite/203", "input_output_examples": [[[12]], [[true]]]}
{"requirement": "def opposite(number):\n\"\"\"Very simple, given a number, find its opposite.\n\nExamples:\n```\n1: -1\n14: -14\n-34: 34\n```\n\n~~~if:sql\nYou will be given a table: `opposite`, with a column: `number`. Return a table with a column: `res`.\n~~~\n\"\"\"", "inputs": [[1], [25.6], [0], [1425.2222], [-3.1458], [-95858588225]], "outputs": [[-1], [-25.6], [0], [-1425.2222], [3.1458], [95858588225]], "starter_code": "def opposite(number):", "canonical_solution": "def opposite(number):\n    return -number", "entry_point": "opposite", "task_id": "TACO_lite/204", "input_output_examples": [[[1], [14], [-34]], [[-1], [-14], [34]]]}
{"requirement": "def frame(text, char):\n\"\"\"```\n*************************\n*  Create a frame!      *\n*           __     __   *\n*          /  \\~~~/  \\  *\n*    ,----(     ..    ) *\n*   /      \\__     __/  *\n*  /|         (\\  |(    *\n* ^  \\  /___\\  /\\ |     *\n*    |__|   |__|-..     *\n*************************\n```\n\nGiven an array of strings and a character to be used as border, output the frame with the content inside.\n\nNotes:\n\n* Always keep a space between the input string and the left and right borders.\n* The biggest string inside the array should always fit in the frame.\n* The input array is never empty.\n\n\n## Example\n\n`frame(['Create', 'a', 'frame'], '+')`\n\nOutput:\n```\n++++++++++\n+ Create +\n+ a      +\n+ frame  +\n++++++++++\n```\n\"\"\"", "inputs": [[["Small", "frame"], "~"], [["Create", "this", "kata"], "+"], [["This is a very long single frame"], "-"]], "outputs": [["~~~~~~~~~\n~ Small ~\n~ frame ~\n~~~~~~~~~"], ["++++++++++\n+ Create +\n+ this   +\n+ kata   +\n++++++++++"], ["------------------------------------\n- This is a very long single frame -\n------------------------------------"]], "starter_code": "def frame(text, char):", "canonical_solution": "def frame(text, char):\n    text_lens = [len(x) for x in text]\n    longest_len = max(text_lens)\n    frame_list = [char * (longest_len + 4)]\n    for str in text:\n        frame_list.append('{} {}{} {}'.format(char, str, ' ' * (longest_len - len(str)), char))\n    frame_list.append(char * (longest_len + 4))\n    return '\\n'.join(frame_list)", "entry_point": "frame", "task_id": "TACO_lite/205", "input_output_examples": [[[["Create", "a", "frame"], "+"], [["Small", "frame"], "~"]], [["++++++++++\n+ Create +\n+ a      +\n+ frame  +\n++++++++++"], ["~~~~~~~~~\n~ Small ~\n~ frame ~\n~~~~~~~~~"]]]}
{"requirement": "def all_permuted(n):\n\"\"\"We have an array of unique elements. A special kind of permutation is the one that has all of its elements in a different position than the original.\n\nLet's see how many of these permutations may be generated from an array of four elements. We put the original array with square brackets and the wanted permutations with parentheses. \n```\narr = [1, 2, 3, 4]\n      (2, 1, 4, 3)\n      (2, 3, 4, 1)\n      (2, 4, 1, 3)\n      (3, 1, 4, 2)\n      (3, 4, 1, 2)\n      (3, 4, 2, 1)\n      (4, 1, 2, 3)\n      (4, 3, 1, 2)\n      (4, 3, 2, 1)\n      _____________\nA total of 9 permutations with all their elements in different positions than arr\n```\n\nThe task for this kata would be to create a code to count all these permutations for an array of certain length.\n\nFeatures of the random tests:\n```\nl = length of the array\n10 ≤ l ≤ 5000\n```\n\nSee the example tests.\n\nEnjoy it!\n\"\"\"", "inputs": [[1], [4], [30]], "outputs": [[0], [9], [97581073836835777732377428235481]], "starter_code": "def all_permuted(n):", "canonical_solution": "def all_permuted(n):\n    a, b = (0, 1)\n    for i in range(1, n):\n        a, b = (b, (i + 1) * (a + b))\n    return a", "entry_point": "all_permuted", "task_id": "TACO_lite/206", "input_output_examples": [[[4]], [[9]]]}
{"requirement": "# Convergents of e\nThe square root of 2 can be written as an infinite continued fraction.\n![img](http://img0.ph.126.net/x1Hyc4iHQg0Jz2EInmT3ag==/6597639313681841979.png)  \nThe infinite continued fraction can be written, √2 = [1;(2)], (2) indicates that 2 repeats ad infinitum. In a similar way, √23 = [4;(1,3,1,8)].\n\nIt turns out that the sequence of partial values of continued fractions for square roots provide the best rational approximations. Let us consider the convergents for √2.\n![img](http://img1.ph.126.net/xme9gNBQdA7bvQkwIftznQ==/6597819633588793645.png)  \nHence the sequence of the first ten convergents for √2 are:\n\n1, 3/2, 7/5, 17/12, 41/29, 99/70, 239/169, 577/408, 1393/985, 3363/2378, …\n\nWhat is most surprising is that the important mathematical constant,\ne = [2; 1,2,1, 1,4,1, 1,6,1 , … , 1,2k,1, …].\n\nThe first ten terms in the sequence of convergents for e are:\n\n2, 3, 8/3, 11/4, 19/7, 87/32, 106/39, 193/71, 1264/465, 1457/536, …\n\nThe sum of digits in the numerator of the 10th convergent is 1+4+5+7=17.\n\nFind the sum of digits in the numerator of the mth convergent of the continued fraction for e.\n\n\n- Powered by [Project Euler](https://projecteuler.net/problem=65)", "inputs": [[57], [125], [298], [938], [3756], [18287], [2132], [9999], [788], [8787]], "outputs": [[125], [298], [938], [3756], [18287], [108346], [9469], [55534], [3151], [48461]], "starter_code": "def convergents_of_e(n):\n\t", "canonical_solution": "e = [1, 2]\nfor n in range(1, 10 ** 4):\n    for f in (1, 2 * n, 1):\n        e.append(f * e[-1] + e[-2])\nconvergents_of_e = lambda n: sum(map(int, str(e[n])))", "entry_point": "convergents_of_e", "task_id": "TACO_lite/207", "input_output_examples": [[[10]], [[17]]]}
{"requirement": "def how_much_water(water, clothes, load):\n\"\"\"My washing machine uses ```water``` amount of water to wash ```clothes``` amount of clothes. You are given a ```load``` amount of clothes to wash.  For each single item of load above the standard amount of clothes, the washing machine will use 10% more water (multiplicative) to clean.\nFor example, if the amount of clothes is ```10```, the amount of water it requires is ```5``` and the load is  ```14```, then you need ```5 * 1.1 ^ (14 - 10)``` amount of water.\n\nWrite a function ```howMuchWater``` (JS)/```how_much_water``` (Python) to work out how much water is needed if you have a ```clothes``` amount of clothes.  The function will accept 3 parameters - ```howMuchWater(water, load, clothes)``` / ```how_much_water(water, load, clothes)```\n\nMy washing machine is an old model that can only handle double the amount of ```load```.  If the amount of ```clothes``` is more than 2 times the standard amount of ```load```, return ```'Too much clothes'```.  The washing machine also cannot handle any amount of clothes less than ```load```.  If that is the case, return ```'Not enough clothes'```.\n\nThe answer should be rounded to the nearest 2 decimal places.\n\"\"\"", "inputs": [[10, 10, 21], [10, 10, 2], [10, 11, 20], [50, 15, 29], [50, 15, 15]], "outputs": [["Too much clothes"], ["Not enough clothes"], [23.58], [189.87], [50]], "starter_code": "def how_much_water(water, clothes, load):", "canonical_solution": "def how_much_water(water, clothes, load):\n    if load > 2 * clothes:\n        return 'Too much clothes'\n    if load < clothes:\n        return 'Not enough clothes'\n    for i in range(load - clothes):\n        water *= 1.1\n    return round(water, 2)", "entry_point": "how_much_water", "task_id": "TACO_lite/208", "input_output_examples": [[[5, 10, 14], [10, 10, 21]], [[7.32], ["Too much clothes"]]]}
{"requirement": "def catch_sign_change(lst):\n\"\"\"Count how often sign changes in array.\n\n### result\nnumber from `0` to ... . Empty array returns `0`\n\n### example\n\"\"\"", "inputs": [[[-7, -7, 7, 0]], [[1, 5, 2, -4]], [[-8, 4, -1, 5, -3, -3, -2, -2]], [[-2, -2, -5, -4, 5, 2, 0, 6, 0]], [[2, 6, 3, 0, 5, -3]], [[-3, 3]], [[-1, 2, 2, 2, 2, -8, -1]], [[1, -2, -7, -4, 4, -2, 0, -3, 3]], [[3, 7, -6, 2, 3, 1, 1]], [[13, -7, -6, 2, -1, 1, -1]], [[]], [[0]], [[4, 1]], [[-1, -2, -3]]], "outputs": [[1], [1], [4], [1], [1], [1], [2], [6], [2], [5], [0], [0], [0], [0]], "starter_code": "def catch_sign_change(lst):", "canonical_solution": "def catch_sign_change(lst):\n    count = 0\n    for i in range(1, len(lst)):\n        if lst[i] < 0 and lst[i - 1] >= 0:\n            count += 1\n        if lst[i] >= 0 and lst[i - 1] < 0:\n            count += 1\n    return count", "entry_point": "catch_sign_change", "task_id": "TACO_lite/209", "input_output_examples": [[[[-7, -7, 7, 0]]], [[1]]]}
{"requirement": "def people_with_age_drink(age):\n\"\"\"- Kids drink toddy.\n- Teens drink coke.\n- Young adults drink beer.\n- Adults drink whisky.\n\nMake a function that receive age, and return what they drink.\n\n**Rules:**\n\n- Children under 14 old.\n- Teens under 18 old.\n- Young under 21 old.\n- Adults have 21 or more.\n\n**Examples:**\n\n```python\npeople_with_age_drink(13) == \"drink toddy\"\npeople_with_age_drink(17) == \"drink coke\"\npeople_with_age_drink(18) == \"drink beer\"\npeople_with_age_drink(20) == \"drink beer\"\npeople_with_age_drink(30) == \"drink whisky\"\n```\n\"\"\"", "inputs": [[13], [0], [17], [15], [14], [20], [18], [22], [21]], "outputs": [["drink toddy"], ["drink toddy"], ["drink coke"], ["drink coke"], ["drink coke"], ["drink beer"], ["drink beer"], ["drink whisky"], ["drink whisky"]], "starter_code": "def people_with_age_drink(age):", "canonical_solution": "def people_with_age_drink(age):\n    if age > 20:\n        return 'drink whisky'\n    if age > 17:\n        return 'drink beer'\n    if age > 13:\n        return 'drink coke'\n    return 'drink toddy'", "entry_point": "people_with_age_drink", "task_id": "TACO_lite/210", "input_output_examples": [[[13], [17], [18], [20], [30]], [["drink toddy"], ["drink coke"], ["drink beer"], ["drink beer"], ["drink whisky"]]]}
{"requirement": "def calc_tip(p, r):\n\"\"\"Dee is lazy but she's kind and she likes to eat out at all the nice restaurants and gastropubs in town. To make paying quick and easy she uses a simple mental algorithm she's called The Fair %20 Rule. She's gotten so good she can do this in a few seconds and it always impresses her dates but she's perplexingly still single. Like you probably. \n\nThis is how she does it:\n\n - She rounds the price `P` at the tens place e.g:\n   - 25 becomes 30\n   - 24 becomes 20\n   - 5 becomes 10\n   - 4 becomes 0\n - She figures out the base tip `T` by dropping the singles place digit e.g:\n   - when `P = 24` she rounds to 20 drops 0 `T = 2`\n   - `P = 115` rounds to 120 drops 0 `T = 12`\n   - `P = 25` rounds to 30 drops 0 `T = 3`\n   - `P = 5` rounds to 10 drops 0 `T = 1`\n   - `P = 4` rounds to 0 `T = 0`\n - She then applies a 3 point satisfaction rating `R` to `T` i.e:\n   - When she's satisfied: `R = 1` and she'll add 1 to `T`\n   - Unsatisfied: `R = 0` and she'll subtract 1 from `T`\n   - Appalled: `R = -1` she'll divide `T` by 2, **rounds down** and subtracts 1\n \n## Your Task\n\nImplement a method `calc_tip` that takes two integer arguments for price `p` \n\nwhere `1 <= p <= 1000` and a rating `r` which is one of `-1, 0, 1`.\n\nThe return value `T` should be a non negative integer.\n\n*Note: each step should be done in the order listed.*\n\nDee always politely smiles and says \"Thank you\" on her way out. Dee is nice. Be like Dee.\n\"\"\"", "inputs": [[4, 1], [4, 0], [4, -1], [5, 1], [5, 0], [5, -1], [14, 1], [14, 0], [14, -1], [15, 1], [15, 0], [15, -1], [24, 1], [24, 0], [24, -1], [25, 1], [25, 0], [25, -1], [125, 1], [125, 0], [125, -1], [144, 1], [144, 0], [144, -1]], "outputs": [[1], [0], [0], [2], [0], [0], [2], [0], [0], [3], [1], [0], [3], [1], [0], [4], [2], [0], [14], [12], [5], [15], [13], [6]], "starter_code": "def calc_tip(p, r):", "canonical_solution": "def calc_tip(p, r):\n    if p % 10 < 5:\n        p //= 10\n    else:\n        p = p // 10 + 1\n    if r == 1:\n        tip = p + 1\n    elif r == 0:\n        tip = p - 1\n    else:\n        tip = int(p / 2) - 1\n    return tip if tip >= 0 else 0", "entry_point": "calc_tip", "task_id": "TACO_lite/211", "input_output_examples": [[[25, 1], [24, 0], [115, -1], [5, 1], [4, 0], [4, 1]], [[3], [2], [5], [1], [0], [1]]]}
{"requirement": "def solve(s):\n\"\"\"The vowel substrings in the word `codewarriors` are `o,e,a,io`. The longest of these has a length of 2. Given a lowercase string that has alphabetic characters only (both vowels and consonants) and no spaces, return the length of the longest vowel substring.\nVowels are any of `aeiou`. \n\n\n```if:csharp\nDocumentation:\nKata.Solve Method (String)\n\nReturns the length of the greatest continuous vowel substring in a string.\n\nSyntax\n\n\npublic\nstatic\nint Solve(\nstring str\n    )\n  \n\n\nParameters\n\nstr\n\nType: System.String\nThe string to be processed.\n\nReturn Value\n\nType: System.Int32\n  The length of the greatest continuous vowel substring in str, or 0 if str contains no vowels.\n\n\nExceptions\n\n\n\nException\nCondition\n\nArgumentNullException\nstr is null.\n\n\n\n\n```\n\n\nGood luck!\n\nIf you like substring Katas, please try:\n\n[Non-even substrings](https://www.codewars.com/kata/59da47fa27ee00a8b90000b4)\n\n[Vowel-consonant lexicon](https://www.codewars.com/kata/59cf8bed1a68b75ffb000026)\n\"\"\"", "inputs": [["codewarriors"], ["suoidea"], ["ultrarevolutionariees"], ["strengthlessnesses"], ["cuboideonavicuare"], ["chrononhotonthuooaos"], ["iiihoovaeaaaoougjyaw"]], "outputs": [[2], [3], [3], [1], [2], [5], [8]], "starter_code": "def solve(s):", "canonical_solution": "def solve(s):\n    return max(map(len, ''.join((c if c in 'aeiou' else ' ' for c in s)).split()))", "entry_point": "solve", "task_id": "TACO_lite/212", "input_output_examples": [[["codewarriors"]], [[2]]]}
{"requirement": "def get_animals_count(legs, heads, horns):\n\"\"\"Farmer Bob have a big farm, where he growths chickens, rabbits and cows. It is very difficult to count the number of animals for each type manually, so he diceded to buy a system to do it. But he bought a cheap system that can count only total number of heads, total number of legs and total number of horns of animals on the farm.\nHelp Bob to figure out how many chickens, rabbits and cows does he have?\n\nAll chickens have 2 legs, 1 head and no horns; all rabbits have 4 legs, 1 head and no horns; all cows have 4 legs, 1 head and 2 horns.\n\nYour task is to write a function \n```Python\nget_animals_count(legs_number, heads_number, horns_number)\n```\n```Csharp\nDictionary get_animals_count(int legs_number, int heads_number, int horns_number)\n```\n, which returns a dictionary \n```python\n{\"rabbits\" : rabbits_count, \"chickens\" : chickens_count, \"cows\" : cows_count}\n``` \n```Csharp\nnew Dictionary(){{\"rabbits\", rabbits_count},{\"chickens\", chickens_count},{\"cows\", cows_count}}\n```\n\nParameters `legs_number, heads_number, horns_number` are integer, all tests have valid input.\n\nExample:\n\n```python\nget_animals_count(34, 11, 6); # Should return {\"rabbits\" : 3, \"chickens\" : 5, \"cows\" : 3}\nget_animals_count(154, 42, 10); # Should return {\"rabbits\" : 30, \"chickens\" : 7, \"cows\" : 5}\n```\n\n```Csharp\nget_animals_count(34, 11, 6); //Should return  Dictionary(){{\"rabbits\", 3},{\"chickens\", 5},{\"cows\", 3}}\nget_animals_count(154, 42, 10); //Should return Dictionary(){{\"rabbits\", 30},{\"chickens\", 7},{\"cows\", 5}}\n```\n\"\"\"", "inputs": [[34, 11, 6], [154, 42, 10], [74, 20, 34], [152, 38, 34], [56, 17, 0]], "outputs": [[{"rabbits": 3, "chickens": 5, "cows": 3}], [{"rabbits": 30, "chickens": 7, "cows": 5}], [{"rabbits": 0, "chickens": 3, "cows": 17}], [{"rabbits": 21, "chickens": 0, "cows": 17}], [{"rabbits": 11, "chickens": 6, "cows": 0}]], "starter_code": "def get_animals_count(legs, heads, horns):", "canonical_solution": "def get_animals_count(legs, heads, horns):\n    cows = horns // 2\n    rabbits = legs // 2 - cows - heads\n    chickens = heads - cows - rabbits\n    return dict(cows=cows, rabbits=rabbits, chickens=chickens)", "entry_point": "get_animals_count", "task_id": "TACO_lite/213", "input_output_examples": [[[34, 11, 6], [154, 42, 10]], [[{"rabbits": 3, "chickens": 5, "cows": 3}], [{"rabbits": 30, "chickens": 7, "cows": 5}]]]}
{"requirement": "def souls(character, build):\n\"\"\"In Dark Souls, players level up trading souls for stats. 8 stats are upgradable this way: vitality, attunement, endurance, strength, dexterity, resistance, intelligence, and faith. Each level corresponds to adding one point to a stat of the player's choice. Also, there are 10 possible classes each having their own starting level and stats:\n\n```\nWarrior     (Level 4):  11, 8, 12, 13, 13, 11, 9, 9\nKnight      (Level 5):  14, 10, 10, 11, 11, 10, 9, 11\nWanderer    (Level 3):  10, 11, 10, 10, 14, 12, 11, 8\nThief       (Level 5):  9, 11, 9, 9, 15, 10, 12, 11\nBandit      (Level 4):  12, 8, 14, 14, 9, 11, 8, 10\nHunter      (Level 4):  11, 9, 11, 12, 14, 11, 9, 9\nSorcerer    (Level 3):  8, 15, 8, 9, 11, 8, 15, 8\nPyromancer  (Level 1):  10, 12, 11, 12, 9, 12, 10, 8\nCleric      (Level 2):  11, 11, 9, 12, 8, 11, 8, 14\nDeprived    (Level 6):  11, 11, 11, 11, 11, 11, 11, 11\n```\n\nFrom level 1, the necessary souls to level up each time up to 11 are `673`, `690`, `707`, `724`, `741`, `758`, `775`, `793`, `811`, and `829`. Then from 11 to 12 and onwards the amount is defined by the expression `round(pow(x, 3) * 0.02 + pow(x, 2) * 3.06 + 105.6 * x - 895)` where `x` is the number corresponding to the next level.\n\nYour function will receive a string with the character class and a list of stats. It should calculate which level is required to get the desired character build and the amount of souls needed to do so. The result should be a string in the format: `'Starting as a [CLASS], level [N] will require [M] souls.'` where `[CLASS]` is your starting class, `[N]` is the required level, and `[M]` is the amount of souls needed respectively.\n\"\"\"", "inputs": [["deprived", [11, 11, 11, 11, 11, 11, 11, 11]], ["pyromancer", [10, 12, 11, 12, 9, 12, 11, 8]], ["pyromancer", [16, 12, 11, 12, 9, 12, 10, 8]], ["pyromancer", [16, 12, 11, 12, 9, 12, 13, 8]], ["pyromancer", [16, 12, 11, 12, 9, 12, 13, 10]]], "outputs": [["Starting as a deprived, level 6 will require 0 souls."], ["Starting as a pyromancer, level 2 will require 673 souls."], ["Starting as a pyromancer, level 7 will require 4293 souls."], ["Starting as a pyromancer, level 10 will require 6672 souls."], ["Starting as a pyromancer, level 12 will require 8348 souls."]], "starter_code": "def souls(character, build):", "canonical_solution": "from itertools import accumulate\nCHARACTERS = {'warrior': (4, [11, 8, 12, 13, 13, 11, 9, 9]), 'knight': (5, [14, 10, 10, 11, 11, 10, 9, 11]), 'wanderer': (3, [10, 11, 10, 10, 14, 12, 11, 8]), 'thief': (5, [9, 11, 9, 9, 15, 10, 12, 11]), 'bandit': (4, [12, 8, 14, 14, 9, 11, 8, 10]), 'hunter': (4, [11, 9, 11, 12, 14, 11, 9, 9]), 'sorcerer': (3, [8, 15, 8, 9, 11, 8, 15, 8]), 'pyromancer': (1, [10, 12, 11, 12, 9, 12, 10, 8]), 'cleric': (2, [11, 11, 9, 12, 8, 11, 8, 14]), 'deprived': (6, [11, 11, 11, 11, 11, 11, 11, 11])}\nREQUIRED_SOULS = list(accumulate([0, 0, 673, 690, 707, 724, 741, 758, 775, 793, 811, 829] + [round(pow(x, 3) * 0.02 + pow(x, 2) * 3.06 + 105.6 * x - 895) for x in range(12, 1000)]))\n\ndef souls(character, build):\n    starting_level, stats = CHARACTERS[character]\n    delta = sum((b - s for b, s in zip(build, stats)))\n    level = starting_level + delta\n    souls = REQUIRED_SOULS[level] - REQUIRED_SOULS[starting_level]\n    return f'Starting as a {character}, level {level} will require {souls} souls.'", "entry_point": "souls", "task_id": "TACO_lite/214", "input_output_examples": [[["deprived", [11, 11, 11, 11, 11, 11, 11, 11]]], [["Starting as a deprived, level 6 will require 0 souls."]]]}
{"requirement": "def bubble(l):\n\"\"\"#Bubbleing around\n\nSince everybody hates chaos and loves sorted lists we should implement some more sorting algorithms. Your task is to implement a Bubble sort (for some help look at https://en.wikipedia.org/wiki/Bubble_sort) and return a list of snapshots after **each change** of the initial list.\n\ne.g. \n\nIf the initial list would be l=[1,2,4,3] my algorithm rotates l[2] and l[3] and after that it adds [1,2,3,4] to the result, which is a list of snapshots.\n```\n[1,2,4,3] should return [ [1,2,3,4] ]\n[2,1,4,3] should return [ [1,2,4,3], [1,2,3,4] ]\n[1,2,3,4] should return []\n```\n\"\"\"", "inputs": [[[]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 3, 4, 7]]], "outputs": [[[]], [[]], [[[1, 3, 3, 4, 7, 2], [1, 3, 3, 4, 2, 7], [1, 3, 3, 2, 4, 7], [1, 3, 2, 3, 4, 7], [1, 2, 3, 3, 4, 7]]]], "starter_code": "def bubble(l):", "canonical_solution": "def bubble(l):\n    ret = []\n    for i in range(len(l) - 1, 0, -1):\n        for j in range(i):\n            if l[j] > l[j + 1]:\n                l[j], l[j + 1] = (l[j + 1], l[j])\n                ret.append(l[:])\n    return ret", "entry_point": "bubble", "task_id": "TACO_lite/215", "input_output_examples": [[[[1, 2, 4, 3]], [[2, 1, 4, 3]], [[1, 2, 3, 4]]], [[[1, 2, 3, 4]], [[1, 2, 4, 3], [1, 2, 3, 4]], []]]}
{"requirement": "def next_num(n):\n\"\"\"Given a non-negative number, return the next bigger polydivisible number, or an empty value like `null` or `Nothing`.\n\nA number is polydivisible if its first digit is cleanly divisible by `1`, its first two digits by `2`, its first three by `3`, and so on. There are finitely many polydivisible numbers.\n\"\"\"", "inputs": [[0], [10], [11], [1234], [123220], [998], [999], [1234567890], [3608528850368400786036724], [3608528850368400786036725]], "outputs": [[1], [12], [12], [1236], [123252], [1020], [1020], [1236004020], [3608528850368400786036725], [null]], "starter_code": "def next_num(n):", "canonical_solution": "d, polydivisible, arr = (1, [], list(range(1, 10)))\nwhile arr:\n    d += 1\n    polydivisible.extend(arr)\n    arr = [n for x in arr for n in range(-(-x * 10 // d) * d, (x + 1) * 10, d)]\n\ndef next_num(n):\n    from bisect import bisect\n    idx = bisect(polydivisible, n)\n    if idx < len(polydivisible):\n        return polydivisible[idx]", "entry_point": "next_num", "task_id": "TACO_lite/216", "input_output_examples": [[[0]], [[1]]]}
{"requirement": "def anagrams(word, words):\n\"\"\"What is an anagram? Well, two words are anagrams of each other if they both contain the same letters. For example:\n\n```\n'abba' & 'baab' == true\n\n'abba' & 'bbaa' == true\n\n'abba' & 'abbba' == false\n\n'abba' & 'abca' == false\n```\n\nWrite a function that will find all the anagrams of a word from a list. You will be given two inputs a word and an array with words. You should return an array of all the anagrams or an empty array if there are none. For example:\n\nanagrams('abba', ['aabb', 'abcd', 'bbaa', 'dada']) => ['aabb', 'bbaa']\n\nanagrams('racer', ['crazer', 'carer', 'racar', 'caers', 'racer']) => ['carer', 'racer']\n\nanagrams('laser', ['lazing', 'lazy',  'lacer']) => []\n\"\"\"", "inputs": [["abba", ["aabb", "abcd", "bbaa", "dada"]], ["racer", ["crazer", "carer", "racar", "caers", "racer"]], ["a", ["a", "b", "c", "d"]], ["ab", ["cc", "ac", "bc", "cd", "ab", "ba", "racar", "caers", "racer"]], ["abba", ["a", "b", "c", "d", "aabb", "bbaa", "abab", "baba", "baab", "abcd", "abbba", "baaab", "abbab", "abbaa", "babaa"]], ["big", ["gig", "dib", "bid", "biig"]]], "outputs": [[["aabb", "bbaa"]], [["carer", "racer"]], [["a"]], [["ab", "ba"]], [["aabb", "bbaa", "abab", "baba", "baab"]], [[]]], "starter_code": "def anagrams(word, words):", "canonical_solution": "def anagrams(word, words):\n    return [item for item in words if sorted(item) == sorted(word)]", "entry_point": "anagrams", "task_id": "TACO_lite/217", "input_output_examples": [[["abba", ["aabb", "abcd", "bbaa", "dada"]], ["racer", ["crazer", "carer", "racar", "caers", "racer"]], ["laser", ["lazing", "lazy", "lacer"]]], [["aabb", "bbaa"], ["carer", "racer"], []]]}
{"requirement": "def align_right(text, width):\n\"\"\"Your task in this Kata is to emulate text justify right in monospace font. You will be given a single-lined text and the expected justification width. The longest word will never be greater than this width.\n\nHere are the rules:\n\n- Use spaces to fill in the gaps on the left side of the words.\n- Each line should contain as many words as possible.\n- Use '\\n' to separate lines.\n- Gap between words can't differ by more than one space.\n- Lines should end with a word not a space.\n- '\\n' is not included in the length of a line.\n- Last line should not contain '\\n'\n\nExample with width=30:\n\n```\n        Bacon ipsum dolor amet\nexcepteur ut kevin burgdoggen,\n   shankle cupim dolor officia\n       ground round id ullamco\n   deserunt nisi. Commodo tail\n    qui salami, brisket boudin \ntri-tip. Labore flank laboris,\n  cow enim proident aliqua sed\n      hamburger consequat. Sed\n     consequat ut non bresaola\n   capicola shoulder excepteur\n veniam, bacon kevin. Pastrami\n   shank laborum est excepteur\n non eiusmod bresaola flank in\nnostrud. Corned beef ex pig do\n   kevin filet mignon in irure\n deserunt ipsum qui duis short\n        loin. Beef ribs dolore\n  meatball officia rump fugiat\n  in enim corned beef non est.\n```\n\nIf you enjoyed this one and want more of a challenge try https://www.codewars.com/kata/text-align-justify/python\n\nIf you like bacon ipsum https://baconipsum.com\n\"\"\"", "inputs": [["abc def", 10], ["I take up the whole line", 24], ["Two lines, I am", 10]], "outputs": [["   abc def"], ["I take up the whole line"], ["Two lines,\n      I am"]], "starter_code": "def align_right(text, width):", "canonical_solution": "import textwrap\n\ndef align_right(text, width):\n    return '\\n'.join([l.rjust(width, ' ') for l in textwrap.wrap(text, width)])", "entry_point": "align_right", "task_id": "TACO_lite/218", "input_output_examples": [[["abc def", 10]], [["   abc def"]]]}
{"requirement": "def longer(s):\n\"\"\"Create a function `longer` that accepts a string and sorts the words in it based on their respective lengths in an ascending order. If there are two words of the same lengths, sort them alphabetically. Look at the examples below for more details.\n\n```python\nlonger(\"Another Green World\") => Green World Another\nlonger(\"Darkness on the edge of Town\") => of on the Town edge Darkness\nlonger(\"Have you ever Seen the Rain\") => the you Have Rain Seen ever\n```\n\nAssume that only only Alphabets will be entered as the input.\nUppercase characters have priority over lowercase characters. That is,\n```python\nlonger(\"hello Hello\") => Hello hello\n```\n\nDon't forget to rate this kata and leave your feedback!! \nThanks\n\"\"\"", "inputs": [["Another Green World"], ["Darkness on the edge of Town"], ["Have you ever Seen the Rain"], ["Like a Rolling Stone"], ["This will be our Year"], ["hello Hello"]], "outputs": [["Green World Another"], ["of on the Town edge Darkness"], ["the you Have Rain Seen ever"], ["a Like Stone Rolling"], ["be our This Year will"], ["Hello hello"]], "starter_code": "def longer(s):", "canonical_solution": "def longer(s):\n    return ' '.join(sorted(s.split(), key=lambda w: (len(w), w)))", "entry_point": "longer", "task_id": "TACO_lite/219", "input_output_examples": [[["Another Green World"], ["Darkness on the edge of Town"], ["Have you ever Seen the Rain"], ["hello Hello"]], [["Green World Another"], ["of on the Town edge Darkness"], ["the you Have Rain Seen ever"], ["Hello hello"]]]}
{"requirement": "def fixed_points_perms(n, k):\n\"\"\"We have an integer array with unique elements and we want to do the permutations that have an element fixed, in other words, these permutations should have a certain element at the same position than the original.\n\nThese permutations will be called: **permutations with one fixed point**.\n\nLet's see an example with an array of four elements and we want the permutations that have a coincidence **only at  index 0**, so these permutations are (the permutations between parenthesis):\n``` \narr = [1, 2, 3, 4]\n      (1, 3, 4, 2)\n      (1, 4, 2, 3)\nTwo permutations matching with arr only at index 0\n``` \n\nLet's see the permutations of the same array with only one coincidence at index **1**:\n``` \narr = [1, 2, 3, 4]\n      (3, 2, 4, 1)\n      (4, 2, 1, 3)\nTwo permutations matching with arr only at index 1\n```\nOnce again, let's see the permutations of the same array with only one coincidence at index **2**:\n``` \narr = [1, 2, 3, 4]\n      (2, 4, 3, 1)\n      (4, 1, 3, 2)\nTwo permutations matching with arr only at index 2\n```\nFinally, let's see the permutations of the same array with only one coincidence at index **3**:\n``` \narr = [1, 2, 3, 4]\n      (2, 3, 1, 4)\n      (3, 1, 2, 4)\nTwo permutations matching with arr only at index 3\n```\nFor this array given above (arr) :\n\n- We conclude that we have 8 permutations with one fixed point (two at each index of arr).\n\n- We may do the same development for our array, `arr`, with two fixed points and we will get `6` permutations.\n\n- There are no permutations with coincidences only at three indexes.\n\n- It's good to know that the amount of permutations with no coincidences at all are `9`. See the kata Shuffle It Up!!\n\nIn general:\n\n- When the amount of fixed points is equal to the array length, there is only one permutation, the original array.\n\n- When the amount of fixed points surpasses the length of the array, obvously, there are no permutations at all.\n\nCreate a function that receives the length of the array and the number of fixed points and may output the total amount of permutations for these constraints.\n\nFeatures of the random tests:\n```\nlength of the array = l\nnumber of fixed points = k\n10 ≤ k ≤ l ≤ 9000\n```\nSee the example tests!\nEnjoy it!!\n\nRuby versin will be released soon.\n\n#Note: This kata was published previously but in a version not well optimized.\n\"\"\"", "inputs": [[4, 1], [4, 2], [4, 3], [10, 3], [10, 4], [20, 2], [4, 0], [4, 4], [4, 5]], "outputs": [[8], [6], [0], [222480], [55650], [447507315596451070], [9], [1], [0]], "starter_code": "def fixed_points_perms(n, k):", "canonical_solution": "def fixed_points_perms(n, k):\n    if k > n:\n        return 0\n    if k == n:\n        return 1\n    if k == 0:\n        subf = lambda n: 1 if n == 0 else n * subf(n - 1) + (-1) ** n\n        return subf(n)\n    return fixed_points_perms(n - 1, k - 1) * n // k", "entry_point": "fixed_points_perms", "task_id": "TACO_lite/220", "input_output_examples": [[[4, 1], [4, 2]], [[8], [6]]]}
{"requirement": "def doors(n):\n\"\"\"In the morning all the doors in the school are closed. The school is quite big: there are **N** doors. Then pupils start coming. It might be hard to believe, but all of them want to study! Also, there are exactly **N** children studying in this school, and they come one by one.\n\nWhen these strange children pass by some doors they change their status (i.e. Open -> Closed, Closed -> Open). Each student has their number, and each i-th student alters the status of every i-th door. For example: when the first child comes to the schools, he changes every first door (he opens all of them). The second one changes the status of every second door (he closes some doors: the 2nd, the 4th and so on). Finally, when the last one – the n-th – comes to the school, he changes the status of each n-th door (there's only one such door, though).\n\nYou need to count how many doors are left opened after all the students have come.\n\nExample:\n\n![](http://i.imgur.com/IqlOi2q.png)\n\n*Here you can see red squares – closed doors, green – opened ones.*\n\nInput:\n\n> n – the number of doors and students, n ∈ N, n ∈ [1, 100000]\n\nOutput:\n\n> o – the number of opened doors, o ∈ N\n\n--- \n\n```\ndoors(5)\n```\n\nShould return\n\n```\n2\n```\n\"\"\"", "inputs": [[5], [10], [100]], "outputs": [[2], [3], [10]], "starter_code": "def doors(n):", "canonical_solution": "def doors(n):\n    return int(n ** 0.5)", "entry_point": "doors", "task_id": "TACO_lite/221", "input_output_examples": [[[5]], [[2]]]}
{"requirement": "def reverse_bits(n):\n\"\"\"Write a function that reverses the bits in an integer.\n\nFor example, the number `417` is `110100001` in binary. Reversing the binary is `100001011` which is `267`.\n\nYou can assume that the number is not negative.\n\"\"\"", "inputs": [[417], [267], [0], [2017], [1023], [1024]], "outputs": [[267], [417], [0], [1087], [1023], [1]], "starter_code": "def reverse_bits(n):", "canonical_solution": "def reverse_bits(n):\n    return int(bin(n)[:1:-1], 2)", "entry_point": "reverse_bits", "task_id": "TACO_lite/222", "input_output_examples": [[[417]], [[267]]]}
{"requirement": "def calculate(n1, n2, o):\n\"\"\"In this kata you need to write a function that will receive two strings (```n1``` and ```n2```), each representing an integer as a binary number. A third parameter will be provided (```o```) as a string representing one of the following operators: add, subtract, multiply.\n\nYour task is to write the calculate function so that it will perform the arithmetic and the result returned should be a string representing the binary result.\n\nExamples:\n```\n1 + 1 === 10\n10 + 10 === 100\n```\n\nNegative binary numbers are usually preceded by several 1's. For this kata, negative numbers can be represented with the negative symbol at the beginning of the string.\n\nExamples of negatives:\n```\n1 - 10 === -1\n10 - 100 === -10\n```\n\"\"\"", "inputs": [["1", "1", "add"], ["1", "1", "subtract"], ["1", "1", "multiply"], ["10", "10", "multiply"], ["100", "10", "subtract"]], "outputs": [["10"], ["0"], ["1"], ["100"], ["10"]], "starter_code": "def calculate(n1, n2, o):", "canonical_solution": "def calculate(n1, n2, o):\n    operators = {'add': lambda x, y: x + y, 'subtract': lambda x, y: x - y, 'multiply': lambda x, y: x * y}\n    return '{:b}'.format(operators[o](int(n1, 2), int(n2, 2)))", "entry_point": "calculate", "task_id": "TACO_lite/223", "input_output_examples": [[["1", "1", "add"], ["10", "10", "add"], ["1", "10", "subtract"], ["10", "100", "subtract"]], [["10"], ["100"], ["-1"], ["-10"]]]}
{"requirement": "def happy_numbers(n):\n\"\"\"Math geeks and computer nerds love to anthropomorphize numbers and assign emotions and personalities to them. Thus there is defined the concept of a \"happy\" number. A happy number is defined as an integer in which the following sequence ends with the number 1.\n\n* Start with the number itself.\n* Calculate the sum of the square of each individual digit.\n* If the sum is equal to 1, then the number is happy. If the sum is not equal to 1, then repeat steps 1 and 2. A number is considered unhappy once the same number occurs multiple times in a sequence because this means there is a loop and it will never reach 1.\n\nFor example, the number 7 is a \"happy\" number:\n\n7^(2) = 49 --> 4^(2) + 9^(2) = 97 --> 9^(2) + 7^(2) = 130 --> 1^(2) + 3^(2) + 0^(2) = 10 --> 1^(2) + 0^(2) = 1\n\nOnce the sequence reaches the number 1, it will stay there forever since 1^(2) = 1\n\nOn the other hand, the number 6 is not a happy number as the sequence that is generated is the following: 6, 36, 45, 41, 17, 50, 25, 29, 85, 89, 145, 42, 20, 4, 16, 37, 58, 89\n\nOnce the same number occurs twice in the sequence, the sequence is\nguaranteed to go on infinitely, never hitting the number 1, since it repeat\nthis cycle.\n\nYour task is to write a program which will print a list of all happy numbers between 1 and x (both inclusive), where:\n```python\n2 <= x <= 5000\n```\n\n___\n\nDisclaimer: This Kata is an adaptation of a HW assignment I had for McGill University's COMP 208 (Computers in Engineering) class.\n\n___\n\nIf you're up for a challenge, you may want to try a [performance version of this kata](https://www.codewars.com/kata/happy-numbers-performance-edition) by FArekkusu.\n\"\"\"", "inputs": [[10], [50], [100]], "outputs": [[[1, 7, 10]], [[1, 7, 10, 13, 19, 23, 28, 31, 32, 44, 49]], [[1, 7, 10, 13, 19, 23, 28, 31, 32, 44, 49, 68, 70, 79, 82, 86, 91, 94, 97, 100]]], "starter_code": "def happy_numbers(n):", "canonical_solution": "def is_happy(n):\n    seen = set()\n    while n not in seen:\n        seen.add(n)\n        n = sum((int(d) ** 2 for d in str(n)))\n    return n == 1\n\ndef happy_numbers(n):\n    return [x for x in range(1, n + 1) if is_happy(x)]", "entry_point": "happy_numbers", "task_id": "TACO_lite/224", "input_output_examples": [[[10]], [[[1, 7, 10]]]]}
{"requirement": "def added_char(s1, s2):\n\"\"\"Given two strings, the first being a random string and the second being the same as the first, but with three added characters somewhere in the string (three same characters),\n\nWrite a function that returns the added character\n\n### E.g\n\n```\nstring1 = \"hello\"\nstring2 = \"aaahello\"\n\n// => 'a'\n```\n\nThe above is just an example; the characters could be anywhere in the string and string2 is actually **shuffled**.\n\n### Another example\n\n```\nstring1 = \"abcde\"\nstring2 = \"2db2a2ec\"\n\n// => '2'\n```\n\nNote that the added character could also exist in the original string\n\n\n```\nstring1 = \"aabbcc\"\nstring2 = \"aacccbbcc\"\n\n// => 'c'\n```\n\nYou can assume that string2 will aways be larger than string1, and there will always be three added characters in string2.\n\n```if:c\nWrite the function `added_char()` that takes two strings and return the added character as described above.\n```\n\n```if:javascript\nWrite the function `addedChar()` that takes two strings and return the added character as described above.\n```\n\"\"\"", "inputs": [["hello", "checlclo"], ["aabbcc", "aacccbbcc"], ["abcde", "2db2a2ec"]], "outputs": [["c"], ["c"], ["2"]], "starter_code": "def added_char(s1, s2):", "canonical_solution": "from collections import Counter\n\ndef added_char(s1, s2):\n    return next((Counter(s2) - Counter(s1)).elements())", "entry_point": "added_char", "task_id": "TACO_lite/225", "input_output_examples": [[["hello", "aaahello"], ["abcde", "2db2a2ec"], ["aabbcc", "aacccbbcc"]], [["a"], ["2"], ["c"]]]}
{"requirement": "def powers(n):\n\"\"\"# Description\n\nGiven a number `n`, you should find a set of numbers for which the sum equals `n`. This set must consist exclusively of values that are a power of `2` (eg: `2^0 => 1, 2^1 => 2, 2^2 => 4, ...`).\n\nThe function `powers` takes a single parameter, the number `n`, and should return an array of unique numbers.\n\n## Criteria\n\nThe function will always receive a valid input: any positive integer between `1` and the max integer value for your language (eg: for JavaScript this would be `9007199254740991` otherwise known as `Number.MAX_SAFE_INTEGER`).\n\nThe function should return an array of numbers that are a **power of 2** (`2^x = y`).\n\nEach member of the returned array should be **unique**. (eg: the valid answer for `powers(2)` is `[2]`, not `[1, 1]`)\n\nMembers should be sorted in **ascending order** (small -> large). (eg: the valid answer for `powers(6)` is `[2, 4]`, not `[4, 2]`)\n\"\"\"", "inputs": [[1], [2], [4], [32], [128], [512], [6], [14], [688], [8197], [1966], [9007199254740991]], "outputs": [[[1]], [[2]], [[4]], [[32]], [[128]], [[512]], [[2, 4]], [[2, 4, 8]], [[16, 32, 128, 512]], [[1, 4, 8192]], [[2, 4, 8, 32, 128, 256, 512, 1024]], [[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496]]], "starter_code": "def powers(n):", "canonical_solution": "def powers(n):\n    return [1 << i for i, x in enumerate(reversed(bin(n))) if x == '1']", "entry_point": "powers", "task_id": "TACO_lite/226", "input_output_examples": [[[1]], [[[1]]]]}
{"requirement": "def sequence_sum(a, b, step):\n\"\"\"As the title suggests, this is the hard-core version of  another neat kata.\n\nThe task is simple to explain: simply sum all the numbers from the first parameter being the beginning to the second parameter being the upper limit (possibly included), going in steps expressed by the third parameter:\n\n```python\nsequence_sum(2, 2, 2) # 2\nsequence_sum(2, 6, 2) # 12 (= 2 + 4 + 6)\nsequence_sum(1, 5, 1) # (= 1 + 2 + 3 + 4 + 5)\nsequence_sum(1, 5, 3) # 5 (= 1 + 4)\n```\n\nIf it is an impossible sequence (with the beginning being larger the end and a positive step or the other way around), just return `0`. See the provided test cases for further examples :)\n\n**Note:** differing from the other base kata, much larger ranges are going to be tested, so you should hope to get your algo optimized and to avoid brute-forcing your way through the solution.\n\"\"\"", "inputs": [[2, 6, 2], [1, 5, 1], [1, 5, 3], [-1, -5, -3], [16, 15, 3], [-24, -2, 22], [-2, 4, 658], [780, 6851543, 5], [9383, 71418, 2], [20, 673388797, 5]], "outputs": [[12], [15], [5], [-5], [0], [-26], [-2], [4694363402480], [1253127200], [45345247259849570]], "starter_code": "def sequence_sum(a, b, step):", "canonical_solution": "def sequence_sum(a, b, step):\n    n = (b - a) // step\n    return 0 if n < 0 else (n + 1) * (n * step + a + a) // 2", "entry_point": "sequence_sum", "task_id": "TACO_lite/227", "input_output_examples": [[[2, 2, 2], [2, 6, 2], [1, 5, 1], [1, 5, 3]], [[2], [12], [15], [5]]]}
{"requirement": "def debug(s):\n\"\"\"Take debugging to a whole new level:\n\nGiven a string, remove every *single* bug.\n\nThis means you must remove all instances of the word 'bug' from within a given string, *unless* the word is plural ('bugs').\n\nFor example, given 'obugobugobuoobugsoo', you should return 'ooobuoobugsoo'.\n\nAnother example: given 'obbugugo', you should return 'obugo'.\n\nNote that all characters will be lowercase.\n\nHappy squishing!\n\"\"\"", "inputs": [["obugobugobuoobugsoo"], ["obbugugo"], ["bugs bunny"], ["bugs buggy"], ["oaiwjefbugoijoijapsbugsdoibugbugjfoijasdfbugsbug"], ["bugbugbugiahweoifuhiaasnoidfhnbugbugs"], ["bugsbugswaoeifhiauwehfoiwubugshefjnviouah"], ["bugbugbugbug"], ["bugsbugsbugsbugs"], ["buggybugs"], ["oaisjdfowjefpoibugsjsofijeo oi bugs o bug f bug poaj sfd s"]], "outputs": [["ooobuoobugsoo"], ["obugo"], ["bugs bunny"], ["bugs gy"], ["oaiwjefoijoijapsbugsdoijfoijasdfbugs"], ["iahweoifuhiaasnoidfhnbugs"], ["bugsbugswaoeifhiauwehfoiwubugshefjnviouah"], [""], ["bugsbugsbugsbugs"], ["gybugs"], ["oaisjdfowjefpoibugsjsofijeo oi bugs o  f  poaj sfd s"]], "starter_code": "def debug(s):", "canonical_solution": "import re\n\ndef debug(s):\n    return re.sub('bug(?!s)', '', s)", "entry_point": "debug", "task_id": "TACO_lite/228", "input_output_examples": [[["obugobugobuoobugsoo"], ["obbugugo"]], [["ooobuoobugsoo"], ["obugo"]]]}
{"requirement": "def solve(n):\n\"\"\"Consider the following array:\n\n```\n[1, 12, 123, 1234, 12345, 123456, 1234567, 12345678, 123456789, 12345678910, 1234567891011...]\n```\n\nIf we join these blocks of numbers, we come up with an infinite sequence which starts with `112123123412345123456...`. The list is infinite.\n\nYou will be given an number (`n`) and your task will be to return the element at that index in the sequence, where `1 ≤ n ≤ 10^18`. Assume the indexes start with `1`, not `0`.  For example:\n\n```\nsolve(1) = 1, because the first character in the sequence is 1. There is no index 0. \nsolve(2) = 1, because the second character is also 1.\nsolve(3) = 2, because the third character is 2.\n```\n\nMore examples in the test cases. Good luck!\n\"\"\"", "inputs": [[1], [2], [3], [100], [2100], [31000], [55], [123456], [123456789], [999999999999999999], [1000000000000000000], [999999999999999993]], "outputs": [[1], [1], [2], [1], [2], [2], [1], [6], [3], [4], [1], [7]], "starter_code": "def solve(n):", "canonical_solution": "def solve(n):\n\n    def length(n):\n        s = 0\n        for i in range(20):\n            o = 10 ** i - 1\n            if o > n:\n                break\n            s += (n - o) * (n - o + 1) // 2\n        return s\n\n    def binary_search(k):\n        n = 0\n        for p in range(63, -1, -1):\n            if length(n + 2 ** p) < k:\n                n += 2 ** p\n        return n\n\n    def sequence(n):\n        if n < 10:\n            return n\n        for i in range(1, 19):\n            segment = i * 9 * 10 ** (i - 1)\n            if n <= segment:\n                return str(10 ** (i - 1) + (n - 1) // i)[(n - 1) % i]\n            else:\n                n -= segment\n    return int(sequence(n - length(binary_search(n))))", "entry_point": "solve", "task_id": "TACO_lite/229", "input_output_examples": [[[1], [2], [3]], [[1], [1], [2]]]}
{"requirement": "def quidditch_scoreboard(teams, actions):\n\"\"\"Your wizard cousin works at a Quidditch stadium and wants you to write a function that calculates the points for the Quidditch scoreboard! \n\n# Story\n\nQuidditch is a sport with two teams. The teams score goals by throwing the Quaffle through a hoop, each goal is worth **10 points**.\n\nThe referee also deducts 30 points (**- 30 points**) from the team who are guilty of carrying out any of these fouls: Blatching, Blurting, Bumphing, Haverstacking, Quaffle-pocking, Stooging \n\nThe match is concluded when the Snitch is caught, and catching the Snitch is worth **150 points**. Let's say a Quaffle goes through the hoop just seconds after the Snitch is caught, in that case the points of that goal should not end up on the scoreboard seeing as the match is already concluded. \n\nYou don't need any prior knowledge of how Quidditch works in order to complete this kata, but if you want to read up on what it is, here's a link: https://en.wikipedia.org/wiki/Quidditch\n\n# Task\n\nYou will be given a string with two arguments, the first argument will tell you which teams are playing and the second argument tells you what's happened in the match. Calculate the points and return a string containing the teams final scores, with the team names sorted in the same order as in the first argument. \n\n# Examples:\n\n# Given an input of:\n\n# The expected output would be:\n\nSeparate the team names from their respective points with a colon and separate the two teams with a comma. \n\nGood luck!\n\"\"\"", "inputs": [["Appleby Arrows vs Montrose Magpies", "Montrose Magpies: Quaffle goal, Montrose Magpies: Quaffle goal, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Montrose Magpies: Haverstacking foul, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Montrose Magpies: Caught Snitch"], ["Kenmare Kestrels vs Barnton", "Barnton: Quaffle goal, Kenmare Kestrels: Quaffle goal, Barnton: Quaffle goal, Barnton: Quaffle goal, Barnton: Quaffle goal, Barnton: Quaffle goal, Kenmare Kestrels: Blurting foul, Barnton: Quaffle goal, Barnton: Quaffle goal, Barnton: Quaffle goal, Barnton: Quaffle goal, Barnton: Quaffle goal, Kenmare Kestrels: Caught Snitch"], ["Puddlemere United vs Holyhead Harpies", "Puddlemere United: Quaffle goal, Holyhead Harpies: Quaffle goal, Holyhead Harpies: Quaffle goal, Puddlemere United: Quaffle goal, Puddlemere United: Quaffle goal, Puddlemere United: Bumphing foul, Holyhead Harpies: Quaffle goal, Holyhead Harpies: Quaffle goal, Puddlemere United: Caught Snitch"], ["Pride of Portree vs Banchory Bangers", "Pride of Portree: Quaffle goal, Pride of Portree: Caught Snitch"], ["Chudley Cannons vs Tutshill Tornados", "Chudley Cannons: Blatching foul, Tutshill Tornados: Quaffle goal, Tutshill Tornados: Quaffle goal, Tutshill Tornados: Quaffle goal, Tutshill Tornados: Quaffle goal, Tutshill Tornados: Quaffle goal, Tutshill Tornados: Quaffle goal, Tutshill Tornados: Caught Snitch"], ["Wimbourne Wasps vs Cork", "Cork: Quaffle goal, Cork: Quaffle-pocking foul, Cork: Quaffle goal, Wimbourne Wasps: Quaffle goal, Cork: Quaffle goal, Wimbourne Wasps: Quaffle goal, Wimbourne Wasps: Quaffle goal, Wimbourne Wasps: Quaffle goal, Cork: Quaffle goal, Wimbourne Wasps: Quaffle goal, Cork: Caught Snitch, Wimbourne Wasps: Quaffle goal"], ["Lancashire vs Ballycastle Bats", "Lancashire: Quaffle goal, Lancashire: Stooging foul, Lancashire: Quaffle goal, Lancashire: Quaffle goal, Lancashire: Quaffle goal, Lancashire: Quaffle goal, Ballycastle Bats: Quaffle goal, Ballycastle Bats: Quaffle goal, Lancashire: Quaffle goal, Ballycastle Bats: Quaffle goal, Ballycastle Bats: Quaffle goal, Ballycastle Bats: Quaffle goal, Ballycastle Bats: Quaffle goal, Ballycastle Bats: Quaffle goal, Ballycastle Bats: Quaffle goal, Ballycastle Bats: Quaffle goal, Lancashire: Caught Snitch, Ballycastle Bats: Blurting foul"], ["Caerphilly Catapults vs Wigtown Wanderers", "Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Wigtown Wanderers: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Caerphilly Catapults: Quaffle goal, Wigtown Wanderers: Caught Snitch"]], "outputs": [["Appleby Arrows: 60, Montrose Magpies: 140"], ["Kenmare Kestrels: 130, Barnton: 100"], ["Puddlemere United: 150, Holyhead Harpies: 40"], ["Pride of Portree: 160, Banchory Bangers: 0"], ["Chudley Cannons: -30, Tutshill Tornados: 210"], ["Wimbourne Wasps: 50, Cork: 160"], ["Lancashire: 180, Ballycastle Bats: 90"], ["Caerphilly Catapults: 170, Wigtown Wanderers: 160"]], "starter_code": "def quidditch_scoreboard(teams, actions):", "canonical_solution": "def quidditch_scoreboard(teams, actions):\n    teams = {i: 0 for i in teams.split(' vs ')}\n    for i in actions.split(', '):\n        team, action = i.split(': ')\n        if 'goal' in action:\n            teams[team] += 10\n        elif 'foul' in action:\n            teams[team] -= 30\n        elif 'Snitch' in action:\n            teams[team] += 150\n            break\n    return ', '.join(('{}: {}'.format(i, teams[i]) for i in teams))", "entry_point": "quidditch_scoreboard", "task_id": "TACO_lite/230", "input_output_examples": [[["Appleby Arrows vs Montrose Magpies", "Montrose Magpies: Quaffle goal, Montrose Magpies: Quaffle goal, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Montrose Magpies: Haverstacking foul, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Appleby Arrows: Quaffle goal, Montrose Magpies: Caught Snitch"]], [["Appleby Arrows: 60, Montrose Magpies: 140"]]]}
{"requirement": "def custom_christmas_tree(chars, n):\n\"\"\"# Task\n\nChristmas is coming, and your task is to build a custom Christmas tree with the specified characters and the specified height.\n\n# Inputs:\n- `chars`: the specified characters. \n- `n`: the specified height. A positive integer greater than 2.\n\n# Output:\n- A multiline string. Each line is separated by `\\n`. A tree contains two parts: leaves and trunks. \n\nThe leaves should be `n` rows. The first row fill in 1 char, the second row fill in 3 chars, and so on. A single space will be added between two adjust chars, and some of the necessary spaces will be added to the left side, to keep the shape of the tree. No space need to be added to the right side.\n\nThe trunk should be at least 1 unit height, it depends on the value of the `n`. The minimum value of n is 3, and the height of the tree trunk is 1 unit height. If `n` increased by 3, and the tree trunk increased by 1 unit. For example, when n is 3,4 or 5, trunk should be 1 row; when n is 6,7 or 8, trunk should be 2 row; and so on.\n\nStill not understand the task? Look at the following example ;-)\n\n# Examples\n\nFor `chars = \"*@o\" and n = 3`,the output should be:\n```\n  *\n @ o\n* @ o\n  |\n```\n\nFor `chars = \"*@o\" and n = 6`,the output should be:\n```\n     *\n    @ o\n   * @ o\n  * @ o *\n @ o * @ o\n* @ o * @ o\n     |\n     |\n```\n\nFor `chars = \"1234\" and n = 6`,the output should be:\n```\n     1\n    2 3\n   4 1 2\n  3 4 1 2\n 3 4 1 2 3\n4 1 2 3 4 1\n     |\n     |\n```\n\nFor `chars = \"123456789\" and n = 3`,the output should be:\n```\n  1\n 2 3\n4 5 6\n  |\n```\n\"\"\"", "inputs": [["*@o", 3], ["*@o", 6], ["1234", 6], ["123456789", 3]], "outputs": [["  *\n @ o\n* @ o\n  |"], ["     *\n    @ o\n   * @ o\n  * @ o *\n @ o * @ o\n* @ o * @ o\n     |\n     |"], ["     1\n    2 3\n   4 1 2\n  3 4 1 2\n 3 4 1 2 3\n4 1 2 3 4 1\n     |\n     |"], ["  1\n 2 3\n4 5 6\n  |"]], "starter_code": "def custom_christmas_tree(chars, n):", "canonical_solution": "def custom_christmas_tree(chars, n):\n    from itertools import cycle\n    it = cycle(chars)\n    tree = [' '.join((next(it) for j in range(i))).center(2 * n).rstrip() for i in range(1, n + 1)]\n    tree.extend(('|'.center(2 * n).rstrip() for _ in range(n // 3)))\n    return '\\n'.join(tree)", "entry_point": "custom_christmas_tree", "task_id": "TACO_lite/231", "input_output_examples": [[["*@o", 3], ["*@o", 6], ["1234", 6], ["123456789", 3]], [["  *\n @ o\n* @ o\n  |"], ["     *\n    @ o\n   * @ o\n  * @ o *\n @ o * @ o\n* @ o * @ o\n     |\n     |"], ["     1\n    2 3\n   4 1 2\n  3 4 1 2\n 3 4 1 2 3\n4 1 2 3 4 1\n     |\n     |"], ["  1\n 2 3\n4 5 6\n  |"]]]}
{"requirement": "def uniq(seq):\n\"\"\"Implement a function which behaves like the uniq command in UNIX.\n\nIt takes as input a sequence and returns a sequence in which all duplicate elements following each other have been reduced to one instance.\n\nExample:\n\n```\n[\"a\", \"a\", \"b\", \"b\", \"c\", \"a\", \"b\", \"c\"]  =>  [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]\n```\n\"\"\"", "inputs": [[["a", "a", "b", "b", "c", "a", "b", "c", "c"]], [["a", "a", "a", "b", "b", "b", "c", "c", "c"]], [[]], [["foo"]], [["bar"]], [[""]], [[null, "a", "a"]]], "outputs": [[["a", "b", "c", "a", "b", "c"]], [["a", "b", "c"]], [[]], [["foo"]], [["bar"]], [[""]], [[null, "a"]]], "starter_code": "def uniq(seq):", "canonical_solution": "from itertools import groupby\n\ndef uniq(seq):\n    return [k for k, _ in groupby(seq)]", "entry_point": "uniq", "task_id": "TACO_lite/232", "input_output_examples": [[[["a", "a", "b", "b", "c", "a", "b", "c"]]], [[["a", "b", "c", "a", "b", "c"]]]]}
{"requirement": "def fixed_xor(a, b):\n\"\"\"## Fixed xor\n\nWrite a function that takes two hex strings as input and XORs them against each other. If the strings are different lengths the output should be the length of the shortest string.\n\nHint: The strings would first need to be converted to binary to be XOR'd. \n\n## Note:\nIf the two strings are of different lengths, the output string should be the same length as the smallest string. This means that the longer string will be cut down to the same size as the smaller string, then xor'd\n\n### Further help\n\nMore information on the XOR operation can be found here https://www.khanacademy.org/computing/computer-science/cryptography/ciphers/a/xor-bitwise-operation\n\nMore information of the binary and hex bases can be found here https://www.khanacademy.org/math/algebra-home/alg-intro-to-algebra/algebra-alternate-number-bases/v/number-systems-introduction\n\nExamples:\n\n```python\nfixed_xor(\"ab3f\", \"ac\") == \"07\"\nfixed_xor(\"aadf\", \"bce2\") == \"163d\"\nfixed_xor(\"1c0111001f010100061a024b53535009181c\", \"686974207468652062756c6c277320657965\") == \"746865206b696420646f6e277420706c6179\"\n```\n\"\"\"", "inputs": [["1c0111001f010100061a024b53535009181c", "686974207468652062756c6c277320657965"], ["aadf", "bce2"], ["ab3f", "ac"], ["", ""], ["c611d9bdd9de38b9eb", "23a0745505d4d25494"], ["7d1e875da9d5e89b54c7eaf", "3541599be591709795cebd5"], ["785a6677b3e52f0e7", "a8d97da7441"], ["6cbd75511e7f750c6827", "1753547c813bfcd"]], "outputs": [["746865206b696420646f6e277420706c6179"], ["163d"], ["07"], [""], ["e5b1ade8dc0aeaed7f"], ["485fdec64c44980cc10957a"], ["d0831bd0f7f"], ["7bee212d9f4489d"]], "starter_code": "def fixed_xor(a, b):", "canonical_solution": "def fixed_xor(a, b):\n    return ''.join((f'{int(x, 16) ^ int(y, 16):x}' for x, y in zip(a, b)))", "entry_point": "fixed_xor", "task_id": "TACO_lite/233", "input_output_examples": [[["ab3f", "ac"], ["aadf", "bce2"], ["1c0111001f010100061a024b53535009181c", "686974207468652062756c6c277320657965"]], [["07"], ["163d"], ["746865206b696420646f6e277420706c6179"]]]}
{"requirement": "def series_sum(n):\n\"\"\"## Task:\n\nYour task is to write a function which returns the sum of following series upto nth term(parameter).\n\n    Series: 1 + 1/4 + 1/7 + 1/10 + 1/13 + 1/16 +...\n \n## Rules:\n \n* You need to round the answer to 2 decimal places and return it as String.\n\n* If the given value is 0 then it should return 0.00\n\n* You will only be given Natural Numbers as arguments.\n\n## Examples:\n\n    SeriesSum(1) => 1 = \"1.00\"\n    SeriesSum(2) => 1 + 1/4 = \"1.25\"\n    SeriesSum(5) => 1 + 1/4 + 1/7 + 1/10 + 1/13 = \"1.57\"\n    \n**NOTE**: In PHP the function is called `series_sum()`.\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6], [7], [8], [9], [15], [39], [58], [0]], "outputs": [["1.00"], ["1.25"], ["1.39"], ["1.49"], ["1.57"], ["1.63"], ["1.68"], ["1.73"], ["1.77"], ["1.94"], ["2.26"], ["2.40"], ["0.00"]], "starter_code": "def series_sum(n):", "canonical_solution": "def series_sum(n):\n    return '{:.2f}'.format(sum((1.0 / (3 * i + 1) for i in range(n))))", "entry_point": "series_sum", "task_id": "TACO_lite/234", "input_output_examples": [[[1], [2], [5]], [["1.00"], ["1.25"], ["1.57"]]]}
{"requirement": "def arithmetic_sequence_elements(a, r, n):\n\"\"\"In your class, you have started lessons about [arithmetic progression](https://en.wikipedia.org/wiki/Arithmetic_progression). Since you are also a programmer, you have decided to write a function that will return the first `n` elements of the sequence with the given common difference `d` and first element `a`. Note that the difference may be zero!\n\nThe result should be a string of numbers, separated by comma and space.\n\n## Example\n\n```python\n# first element: 1, difference: 2, how many: 5\narithmetic_sequence_elements(1, 2, 5) == \"1, 3, 5, 7, 9\"\n```\n\n~~~if:fortran\n*NOTE: In Fortran, your returned string is* **not** *permitted to contain redundant leading/trailing whitespace.*\n~~~\n\"\"\"", "inputs": [[1, 2, 5], [1, 0, 5], [1, -3, 10], [100, -10, 10]], "outputs": [["1, 3, 5, 7, 9"], ["1, 1, 1, 1, 1"], ["1, -2, -5, -8, -11, -14, -17, -20, -23, -26"], ["100, 90, 80, 70, 60, 50, 40, 30, 20, 10"]], "starter_code": "def arithmetic_sequence_elements(a, r, n):", "canonical_solution": "def arithmetic_sequence_elements(a, r, n):\n    return ', '.join((str(a + b * r) for b in range(n)))", "entry_point": "arithmetic_sequence_elements", "task_id": "TACO_lite/235", "input_output_examples": [[[1, 2, 5]], [["1, 3, 5, 7, 9"]]]}
{"requirement": "def no_repeat(s):\n\"\"\"**This Kata is intended as a small challenge for my students**\n\nAll Star Code Challenge #16\n\nCreate a function called noRepeat() that takes a string argument and returns a single letter string of the **first** not repeated character in the entire string.\n\n``` haskell\nnoRepeat \"aabbccdde\" `shouldBe` 'e'\nnoRepeat \"wxyz\"      `shouldBe` 'w'\nnoRepeat \"testing\"   `shouldBe` 'e'\n```\n\nNote:\nONLY letters from the english alphabet will be used as input\nThere will ALWAYS be at least one non-repeating letter in the input string\n\"\"\"", "inputs": [["aabbccdde"], ["wxyz"], ["testing"], ["codewars"], ["Testing"]], "outputs": [["e"], ["w"], ["e"], ["c"], ["T"]], "starter_code": "def no_repeat(s):", "canonical_solution": "def no_repeat(s):\n    return next((c for c in s if s.count(c) == 1))", "entry_point": "no_repeat", "task_id": "TACO_lite/236", "input_output_examples": [[["aabbccdde"], ["wxyz"], ["testing"]], [["e"], ["w"], ["e"]]]}
{"requirement": "def scf(lst):\n\"\"\"Given an array of integers, return the smallest common factors of all integers in the array.\n\nWhen i say **Smallest Common Factor** i mean the smallest number above 1 that can divide all numbers in the array without a remainder.\n\nIf there are no common factors above 1, return 1 (technically 1 is always a common factor).\n\"\"\"", "inputs": [[[200, 30, 18, 8, 64, 34]], [[21, 45, 51, 27, 33]], [[133, 147, 427, 266]], [[3, 5, 7]], [[]]], "outputs": [[2], [3], [7], [1], [1]], "starter_code": "def scf(lst):", "canonical_solution": "def scf(lst):\n    return next((k for k in range(2, 1 + min(lst, default=1)) if all((n % k == 0 for n in lst))), 1)", "entry_point": "scf", "task_id": "TACO_lite/237", "input_output_examples": [[[[200, 30, 18, 8, 64, 34]]], [[2]]]}
{"requirement": "def solution(number):\n\"\"\"## The galactic games have begun!\n\nIt's the galactic games! Beings of all worlds come together to compete in several interesting sports, like nroogring, fredling and buzzing (the beefolks love the last one). However, there's also the traditional marathon run.\n\nUnfortunately, there have been cheaters in the last years, and the committee decided to place sensors on the track. Committees being committees, they've come up with the following rule:\n\n> A sensor should be placed every 3 and 5 meters from the start, e.g.\n> at 3m, 5m, 6m, 9m, 10m, 12m, 15m, 18m….\n\nSince you're responsible for the track, you need to buy those sensors. Even worse, you don't know how long the track will be! And since there might be more than a single track, and you can't be bothered to do all of this by hand, you decide to write a program instead.\n\n## Task\nReturn the sum of the multiples of 3 and 5 __below__ a number. Being the _galactic_ games, the tracks can get rather large, so your solution should work for _really_ large numbers (greater than 1,000,000).\n\n### Examples\n```python\nsolution (10) # => 23 = 3 + 5 + 6 + 9\nsolution (20) # => 78 = 3 + 5 + 6 + 9 + 10 + 12 + 15 + 18\n```\n\"\"\"", "inputs": [[10], [100], [1000], [10000], [16], [20], [200], [1000000], [50000000], [50000000000000000000000000000000000000000]], "outputs": [[23], [2318], [233168], [23331668], [60], [78], [9168], [233333166668], [583333291666668], [583333333333333333333333333333333333333291666666666666666666666666666666666666668]], "starter_code": "def solution(number):", "canonical_solution": "def summ(number, d):\n    n = (number - 1) // d\n    return n * (n + 1) * d // 2\n\ndef solution(number):\n    return summ(number, 3) + summ(number, 5) - summ(number, 15)", "entry_point": "solution", "task_id": "TACO_lite/238", "input_output_examples": [[[10], [20]], [[23], [78]]]}
{"requirement": "def leo(oscar):\n\"\"\"You have to write a function that describe Leo:\n```python\ndef leo(oscar):\n  pass\n```\n\nif oscar was (integer) 88, you have to return \"Leo finally won the oscar! Leo is happy\".\nif oscar was 86, you have to return \"Not even for Wolf of wallstreet?!\"\nif it was not 88 or 86 (and below 88) you should return \"When will you give Leo an Oscar?\"\nif it was over 88 you should return \"Leo got one already!\"\n\"\"\"", "inputs": [[88], [87], [86]], "outputs": [["Leo finally won the oscar! Leo is happy"], ["When will you give Leo an Oscar?"], ["Not even for Wolf of wallstreet?!"]], "starter_code": "def leo(oscar):", "canonical_solution": "def leo(oscar):\n    if oscar == 88:\n        return 'Leo finally won the oscar! Leo is happy'\n    elif oscar == 86:\n        return 'Not even for Wolf of wallstreet?!'\n    elif oscar < 88:\n        return 'When will you give Leo an Oscar?'\n    elif oscar > 88:\n        return 'Leo got one already!'", "entry_point": "leo", "task_id": "TACO_lite/239", "input_output_examples": [[[88], [86], [87], [89]], [["Leo finally won the oscar! Leo is happy"], ["Not even for Wolf of wallstreet?!"], ["When will you give Leo an Oscar?"], ["Leo got one already!"]]]}
{"requirement": "def nth_smallest(arr, n):\n\"\"\"Given a list of integers, return the nth smallest integer in the list. **Only distinct elements should be considered** when calculating the answer. `n` will always be positive (`n > 0`)\n\nIf the nth small integer doesn't exist, return `-1` (C++) / `None` (Python) / `nil` (Ruby) / `null` (JavaScript).\n\nNotes:\n* \"indexing\" starts from 1\n* huge lists (of 1 million elements) will be tested\n\n## Examples\n\n```python\nnth_smallest([1, 3, 4, 5], 7)        ==> None  # n is more than the size of the list\nnth_smallest([4, 3, 4, 5], 4)        ==> None  # 4th smallest integer doesn't exist\nnth_smallest([45, -10, 4, 5, 4], 4)  ==> 45    # 4th smallest integer is 45\n```\n\nIf you get a timeout, just try to resubmit your solution. However, if you ***always*** get a timeout, review your code.\n\"\"\"", "inputs": [[[14, 12, 46, 34, 334], 3], [[4000], 1], [[14, 12, 46, 0, 334], 1]], "outputs": [[34], [4000], [0]], "starter_code": "def nth_smallest(arr, n):", "canonical_solution": "def nth_smallest(arr, n):\n    s = set(arr)\n    return sorted(s)[n - 1] if n <= len(s) else None", "entry_point": "nth_smallest", "task_id": "TACO_lite/240", "input_output_examples": [[[[1, 3, 4, 5], 7], [[4, 3, 4, 5], 4], [[45, -10, 4, 5, 4], 4]], [[null], [null], [45]]]}
{"requirement": "def repeat_str(repeat, string):\n\"\"\"```if-not:racket\nWrite a function called `repeat_str` which repeats the given string `src` exactly `count` times.\n```\n```if:racket\nWrite a function called `repeat-string` which repeats the given string `str` exactly `count` times.\n```\n\"\"\"", "inputs": [[4, "a"], [3, "hello "], [2, "abc"]], "outputs": [["aaaa"], ["hello hello hello "], ["abcabc"]], "starter_code": "def repeat_str(repeat, string):", "canonical_solution": "def repeat_str(repeat, string):\n    return repeat * string", "entry_point": "repeat_str", "task_id": "TACO_lite/241", "input_output_examples": [[[4, "a"]], [["aaaa"]]]}
{"requirement": "def segments(m, arr):\n\"\"\"You are given a set of `n` segments on the axis `Ox`, each segment has integer endpoints between `0` and `m` inclusive.\n Segments may intersect, overlap or even coincide with each other. Each segment is characterized by two integers li and ri — coordinates of the left and of the right endpoints.\n\n Consider all integer points between `0` and `m` inclusive. Your task is to print all such points that don't belong to any segment. The point x belongs to the segment `[l;r]` if and only if `l ≤ x ≤ r`.\n\n**Input:**\n `m` — the upper bound for coordinates;\n array of coordinates li and ri `0 ≤ li ≤ ri ≤ m` — the endpoints of the `i`-th segment. Segments may intersect, overlap or even coincide with each other.\n\n**Output:**\n All points from `0` to `m` that don't belong to any segment.\n\n**Examples:**\n```python\nsegments(5, [(2,2),(1,2),(5,5)]) => [0,3,4]\nsegments(7, [(0,7)]) => []\n```\n\"\"\"", "inputs": [[7, [[0, 7]]], [2, []], [0, []], [0, [[0, 0]]]], "outputs": [[[]], [[0, 1, 2]], [[0]], [[]]], "starter_code": "def segments(m, arr):", "canonical_solution": "def segments(m, arr):\n    return [i for i in range(m + 1) if not any((a <= i <= b for a, b in arr))]", "entry_point": "segments", "task_id": "TACO_lite/242", "input_output_examples": [[[5, [[2, 2], [1, 2], [5, 5]]], [7, [[0, 7]]]], [[0, 3, 4], []]]}
{"requirement": "def interweave(s1, s2):\n\"\"\"Your friend Rick is trying to send you a message, but he is concerned that it would get intercepted by his partner. He came up with a solution:\n\n1) Add digits in random places within the message.\n\n2) Split the resulting message in two. He wrote down every second character on one page, and the remaining ones on another. He then dispatched the two messages separately.\n\nWrite a function interweave(s1, s2) that reverses this operation to decode his message!\n\nExample 1: interweave(\"hlo\", \"el\") -> \"hello\"\nExample 2: interweave(\"h3lo\", \"el4\") -> \"hello\"\n\nRick's a bit peculiar about his formats. He would feel ashamed if he found out his message led to extra white spaces hanging around the edges of his message...\n\"\"\"", "inputs": [["", ""], ["hlo", "el"], ["h3lo", "el4"]], "outputs": [[""], ["hello"], ["hello"]], "starter_code": "def interweave(s1, s2):", "canonical_solution": "def interweave(s1, s2):\n    s = [''] * (len(s1) + len(s2))\n    s[::2], s[1::2] = (s1, s2)\n    return ''.join((c for c in s if not c.isdigit())).strip()", "entry_point": "interweave", "task_id": "TACO_lite/243", "input_output_examples": [[["hlo", "el"], ["h3lo", "el4"], ["", ""]], [["hello"], ["hello"], [""]]]}
{"requirement": "def odd_ones_out(numbers):\n\"\"\"The town sheriff dislikes odd numbers and wants all odd numbered families out of town! In town crowds can form and individuals are often mixed with other people and families. However you can distinguish the family they belong to by the number on the shirts they wear. As the sheriff's assistant it's your job to find all the odd numbered families and remove them from the town!\n~~~if-not:cpp\nChallenge: You are given a list of numbers. The numbers each repeat a certain number of times. Remove all numbers that repeat an odd number of times while keeping everything else the same.\n~~~\n~~~if:cpp\nChallenge: You are given a vector of numbers. The numbers each repeat a certain number of times. Remove all numbers that repeat an odd number of times while keeping everything else the same.\n~~~\n```python\nodd_ones_out([1, 2, 3, 1, 3, 3]) = [1, 1]\n```\nIn the above example:\n- the number 1 appears twice\n- the number 2 appears once\n- the number 3 appears three times\n\n`2` and `3` both appear an odd number of times, so they are removed from the list. The final result is: `[1,1]`\n\nHere are more examples:\n```python\nodd_ones_out([1, 1, 2, 2, 3, 3, 3]) = [1, 1, 2, 2]\nodd_ones_out([26, 23, 24, 17, 23, 24, 23, 26]) = [26, 24, 24, 26]\nodd_ones_out([1, 2, 3]) = []\nodd_ones_out([1]) = []\n```\n\nAre you up to the challenge?\n\"\"\"", "inputs": [[[1, 2, 3, 1, 3, 3]], [[75, 68, 75, 47, 68]], [[42, 72, 32, 4, 94, 82, 67, 67]], [[100, 100, 5, 5, 100, 50, 68, 50, 68, 50, 68, 5, 100]], [[82, 86, 71, 58, 44, 79, 50, 44, 79, 67, 82, 82, 55, 50]]], "outputs": [[[1, 1]], [[75, 68, 75, 68]], [[67, 67]], [[100, 100, 100, 100]], [[44, 79, 50, 44, 79, 50]]], "starter_code": "def odd_ones_out(numbers):", "canonical_solution": "def odd_ones_out(numbers):\n    return [i for i in numbers if numbers.count(i) % 2 == 0]", "entry_point": "odd_ones_out", "task_id": "TACO_lite/244", "input_output_examples": [[[[1, 2, 3, 1, 3, 3]], [[1, 1, 2, 2, 3, 3, 3]], [[26, 23, 24, 17, 23, 24, 23, 26]], [[1, 2, 3]], [[1]]], [[1, 1], [1, 1, 2, 2], [26, 24, 24, 26], [], []]]}
{"requirement": "def tax_calculator(total):\n\"\"\"Write a function to calculate compound tax using the following table:\n\nFor $10 and under, the tax rate should be 10%.\nFor $20 and under, the tax rate on the first $10 is %10, and the tax on the rest is 7%.\nFor $30 and under, the tax rate on the first $10 is still %10, the rate for the next $10 is still 7%, and everything else is 5%.\nTack on an additional 3% for the portion of the total above $30.\nReturn 0 for invalid input(anything that's not a positive real number).\n\n\nExamples:\n\nAn input of 10, should return 1 (1 is 10% of 10)\nAn input of 21, should return 1.75 (10% of 10 + 7% of 10 + 5% of 1)\n\n* Note that the returned value should be rounded to the nearest penny.\n\"\"\"", "inputs": [[1], [10], [11], [15], [18], [21], [26], [30], [30.49], [35], [100], [1000000], [0], [-3], [null], ["monkey"], [[]], [{}]], "outputs": [[0.1], [1], [1.07], [1.35], [1.56], [1.75], [2], [2.2], [2.21], [2.35], [4.3], [30001.3], [0], [0], [0], [0], [0], [0]], "starter_code": "def tax_calculator(total):", "canonical_solution": "def tax_calculator(total):\n    if not isinstance(total, (int, float)) or total < 0:\n        return 0\n    tax = 0\n    if total > 30:\n        tax = 2.2 + (total - 30) * 0.03\n    elif total > 20:\n        tax = 1.7 + (total - 20) * 0.05\n    elif total > 10:\n        tax = 1 + (total - 10) * 0.07\n    elif total > 0:\n        tax = total / 10.0\n    return round(tax, 2)", "entry_point": "tax_calculator", "task_id": "TACO_lite/245", "input_output_examples": [[[10], [21], [1]], [[1], [1.75], [0.1]]]}
{"requirement": "def get_note(pitch):\n\"\"\"In music, if you double (or halve) the pitch of any note you will get to the same note again.\n\n\"Concert A\" is fixed at 440 Hz, and every other note is defined based on that. 880 Hz is also an A, as is 1760 Hz, as is 220 Hz.\n\nThere are 12 notes in Western music: A, A#, B, C, C#, D, D#, E, F, F#, G, G#. You are given a preloaded dictionary with these 12 notes and one of the pitches that creates that note (starting at Concert A).\n\nNow, given a pitch (in Hz), return the corresponding note. (All inputs will be valid notes).\n\nFor reference, the notes dictionary looks like this:\n\n```python\nnotes_dictionary = {\n    440: \"A\",\n    466.16: \"A#\",\n    493.88: \"B\",\n    523.25: \"C\",\n    554.37: \"C#\", \n    587.33: \"D\", \n    622.25: \"D#\", \n    659.25: \"E\", \n    698.46: \"F\", \n    739.99: \"F#\", \n    783.99: \"G\", \n    830.61: \"G#\"\n}\n```\n\nMusicians: all pitches based on equal tempermanent, taken from [here](http://pages.mtu.edu/~suits/notefreqs.html).\n\"\"\"", "inputs": [[440], [220], [880], [523.25], [261.625], [1046.5]], "outputs": [["A"], ["A"], ["A"], ["C"], ["C"], ["C"]], "starter_code": "def get_note(pitch):", "canonical_solution": "notes = {440: 'A', 466.16: 'A#', 493.88: 'B', 523.25: 'C', 554.37: 'C#', 587.33: 'D', 622.25: 'D#', 659.25: 'E', 698.46: 'F', 739.99: 'F#', 783.99: 'G', 830.61: 'G#'}\n\ndef get_note(pitch):\n    for note in notes:\n        if note >= pitch and note % pitch == 0:\n            return notes[note]\n        elif note < pitch and pitch % note == 0:\n            return notes[note]", "entry_point": "get_note", "task_id": "TACO_lite/246", "input_output_examples": [[[440]], [["A"]]]}
{"requirement": "def reverse_fun(n):\n\"\"\"You are going to be given a string. Your job is to return that string in a certain order that I will explain below:\n\nLet's say you start with this: `012345`\n\nThe first thing you do is reverse it:`543210`  \nThen you will take the string from the 1st position and reverse it again:`501234`  \nThen you will take the string from the 2nd position and reverse it again:`504321`  \nThen you will take the string from the 3rd position and reverse it again:`504123`\n\nContinue this pattern until you have done every single position, and then you will return the string you have created. For this particular number, you would return:`504132`\n\n#Input:\nA string of length 1 - 1000\n\n#Output:\nA correctly reordered string.\n\"\"\"", "inputs": [["012"], ["012345"], ["0123456789"], ["Hello"]], "outputs": [["201"], ["504132"], ["9081726354"], ["oHlel"]], "starter_code": "def reverse_fun(n):", "canonical_solution": "def reverse_fun(n):\n    for i in range(len(n)):\n        n = n[:i] + n[i:][::-1]\n    return n", "entry_point": "reverse_fun", "task_id": "TACO_lite/247", "input_output_examples": [[["012345"], ["012"]], [["504132"], ["201"]]]}
{"requirement": "def is_square(n):\n\"\"\"## A square of squares\nYou like building blocks. You especially like building blocks that are squares. And what you even like more, is to arrange them into a square of square building blocks!\n\nHowever, sometimes, you can't arrange them into a square. Instead, you end up with an ordinary rectangle! Those blasted things! If you just had a way to know, whether you're currently working in vain… Wait! That's it! You just have to check if your number of building blocks is a _perfect square_.\n\n## Task\n\nGiven an integral number, determine if it's a [square number](https://en.wikipedia.org/wiki/Square_number):\n\n> In mathematics, a __square number__ or __perfect square__ is an integer that is the square of an integer; in other words, it is the product of some integer with itself.\n\nThe tests will _always_ use some integral number, so don't worry about that in dynamic typed languages.\n\n### Examples\n\n```\n-1  =>  false\n 0  =>  true\n 3  =>  false\n 4  =>  true\n25  =>  true\n26  =>  false\n```\n\"\"\"", "inputs": [[-1], [25], [26]], "outputs": [[false], [true], [false]], "starter_code": "def is_square(n):", "canonical_solution": "import math\n\ndef is_square(n):\n    return n > -1 and math.sqrt(n) % 1 == 0", "entry_point": "is_square", "task_id": "TACO_lite/248", "input_output_examples": [[[-1], [0], [3], [4], [25], [26]], [[false], [true], [false], [true], [true], [false]]]}
{"requirement": "def largest_pair_sum(numbers):\n\"\"\"Given a sequence of numbers, find the largest pair sum in the sequence.\n\nFor example\n```\n[10, 14, 2, 23, 19] -->  42 (= 23 + 19)\n[99, 2, 2, 23, 19]  --> 122 (= 99 + 23)\n```\n\nInput sequence contains minimum two elements and every element is an integer.\n\"\"\"", "inputs": [[[10, 14, 2, 23, 19]], [[-100, -29, -24, -19, 19]], [[1, 2, 3, 4, 6, -1, 2]], [[-10, -8, -16, -18, -19]]], "outputs": [[42], [0], [10], [-18]], "starter_code": "def largest_pair_sum(numbers):", "canonical_solution": "def largest_pair_sum(numbers):\n    return sum(sorted(numbers)[-2:])", "entry_point": "largest_pair_sum", "task_id": "TACO_lite/249", "input_output_examples": [[[[10, 14, 2, 23, 19]], [[99, 2, 2, 23, 19]]], [[42], [122]]]}
{"requirement": "def fight_resolve(d, a):\n\"\"\"You are making your very own boardgame. The game is played by two opposing players, featuring a 6 x 6 tile system, with the players taking turns to move their pieces (similar to chess). The design is finished, now it's time to actually write and implement the features. Being the good programmer you are, you carefully plan the procedure and break the program down into smaller managable sections. You decide to start coding the logic for resolving \"fights\" when two pieces engage in combat on a tile. \n\nYour boardgame features four unique pieces: \n\nSwordsman, Cavalry, Archer and Pikeman\n\nEach piece has unique movement and has advantages and weaknesses in combat against one of the other pieces. \n\nTask\n\nYou must write a function ```fightResolve``` that takes the attacking and defending piece as input parameters, and returns the winning piece. It may be the case that both the attacking and defending piece belong to the same player, after which you must return an error value to indicate an illegal move. \n\nIn C++ and C, the pieces will be represented as ```chars```. Values will be case-sensitive to display ownership. Let the following char values represent each piece from their respective player.\n\nPlayer 1:  ```p```= Pikeman, ```k```= Cavalry, ```a```= Archer, ```s```= Swordsman \n\nPlayer 2:  ```P```= Pikeman, ```K```= Cavalry, ```A```= Archer, ```S```= Swordsman \n\nThe outcome of the fight between two pieces depends on which piece attacks, the type of the attacking piece and the type of the defending piece. Archers always win against swordsmens, swordsmen always win against pikemen, pikemen always win against cavalry and cavalry always win against archers. If a matchup occurs that was not previously mentioned (for example Archers vs Pikemen) the attacker will always win. This table represents the winner of each possible engagement between an attacker and a defender.\n\n\n(Attacker→)\n    (Defender↓)\nArcher\nPikeman\nSwordsman\nKnight\n\n\nKnight\nDefender\nAttacker\nAttacker\nAttacker\n\n\nSwordsman\nAttacker\nDefender\nAttacker\nAttacker\n\n\nArcher\nAttacker\nAttacker\nDefender\nAttacker\n\n\nPikeman\nAttacker\nAttacker\nAttacker\nDefender\n\n\n\nIf two pieces from the same player engage in combat, i.e P vs S or k vs a, the function must return -1 to signify and illegal move. Otherwise assume that no other illegal values will be passed.\n\nExamples\n\nFunction prototype: fightResolve(defender, attacker)\n1. fightResolve('a', 'P') outputs 'P'. No interaction defined between Pikemen and Archer. Pikemen is the winner here because it is the attacking piece.\n\n2. fightResolve('k', 'A') outputs 'k'. Knights always defeat archers, even if Archer is the attacking piece here.\n\n3. fightResolve('S', 'A') outputs -1. Friendly units don't fight. Return -1 to indicate error.\n\"\"\"", "inputs": [["K", "A"], ["S", "A"], ["k", "s"], ["a", "a"], ["k", "A"], ["K", "a"]], "outputs": [[-1], [-1], [-1], [-1], ["k"], ["K"]], "starter_code": "def fight_resolve(d, a):", "canonical_solution": "def fight_resolve(d, a):\n    return -1 if d.islower() == a.islower() else d if d.lower() + a.lower() in 'ka sp as pk' else a", "entry_point": "fight_resolve", "task_id": "TACO_lite/250", "input_output_examples": [[["a", "P"], ["k", "A"], ["S", "A"]], [["P"], ["k"], [-1]]]}
{"requirement": "def spam(number):\n\"\"\"Here we have a function that help us spam our hearty laughter. But is not working! I need you to find out why...\n\nExpected results:\n\n```python\nspam(1)  ==> \"hue\"\nspam(6)  ==> \"huehuehuehuehuehue\"\nspam(14) ==> \"huehuehuehuehuehuehuehuehuehuehuehuehuehue\"\n```\n\"\"\"", "inputs": [[1], [6], [14]], "outputs": [["hue"], ["huehuehuehuehuehue"], ["huehuehuehuehuehuehuehuehuehuehuehuehuehue"]], "starter_code": "def spam(number):", "canonical_solution": "def spam(number):\n    return 'hue' * number", "entry_point": "spam", "task_id": "TACO_lite/251", "input_output_examples": [[[1], [6], [14]], [["hue"], ["huehuehuehuehuehue"], ["huehuehuehuehuehuehuehuehuehuehuehuehuehue"]]]}
{"requirement": "def digitize(n):\n\"\"\"# Convert number to reversed array of digits\n\nGiven a random non-negative number, you have to return the digits of this number within an array in reverse order.\n\n## Example:\n\n```\n348597 => [7,9,5,8,4,3]\n```\n\"\"\"", "inputs": [[35231], [23582357], [984764738], [45762893920], [548702838394]], "outputs": [[[1, 3, 2, 5, 3]], [[7, 5, 3, 2, 8, 5, 3, 2]], [[8, 3, 7, 4, 6, 7, 4, 8, 9]], [[0, 2, 9, 3, 9, 8, 2, 6, 7, 5, 4]], [[4, 9, 3, 8, 3, 8, 2, 0, 7, 8, 4, 5]]], "starter_code": "def digitize(n):", "canonical_solution": "def digitize(n):\n    return [int(x) for x in str(n)[::-1]]", "entry_point": "digitize", "task_id": "TACO_lite/252", "input_output_examples": [[[348597], [35231]], [[7, 9, 5, 8, 4, 3], [1, 3, 2, 5, 3]]]}
{"requirement": "def avoid_obstacles(arr):\n\"\"\"# Task\n You are given an array of integers `arr` that representing coordinates of obstacles situated on a straight line.\n\n Assume that you are jumping from the point with coordinate 0 to the right. You are allowed only to make jumps of the same length represented by some integer.\n\n Find the minimal length of the jump enough to avoid all the obstacles.\n\n# Example\n\n For `arr = [5, 3, 6, 7, 9]`, the output should be `4`.\n\n Check out the image below for better understanding:\n\n \n\n\n# Input/Output\n\n\n - `[input]` integer array `arr`\n\n    Non-empty array of positive integers.\n\n    Constraints: `1 ≤ inputArray[i] ≤ 100.`\n\n\n - `[output]` an integer\n\n    The desired length.\n\"\"\"", "inputs": [[[5, 3, 6, 7, 9]], [[2, 3]], [[1, 4, 10, 6, 2]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]]], "outputs": [[4], [4], [7], [101]], "starter_code": "def avoid_obstacles(arr):", "canonical_solution": "def avoid_obstacles(arr):\n    n = 2\n    while 1:\n        if all([x % n for x in arr]):\n            return n\n        n += 1", "entry_point": "avoid_obstacles", "task_id": "TACO_lite/253", "input_output_examples": [[[[5, 3, 6, 7, 9]]], [[4]]]}
{"requirement": "def powerset(a):\n\"\"\"# Task\nFor the given set `S` its powerset is the set of all possible subsets of `S`.\n\nGiven an array of integers nums, your task is to return the powerset of its elements.\n\nImplement an algorithm that does it in a depth-first search fashion. That is, for every integer in the set, we can either choose to take or not take it. At first, we choose `NOT` to take it, then we choose to take it(see more details in exampele).\n\n# Example\n\nFor `nums = [1, 2]`, the output should be `[[], [2], [1], [1, 2]].`\n\nHere's how the answer is obtained:\n```\ndon't take element 1\n----don't take element 2\n--------add []\n----take element 2\n--------add [2]\ntake element 1\n----don't take element 2\n--------add [1]\n----take element 2\n--------add [1, 2]```\n\nFor `nums = [1, 2, 3]`, the output should be \n\n`[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]]`.\n\n# Input/Output\n\n`[input]` integer array `nums`\n\nArray of positive integers, `1 ≤ nums.length ≤ 10`.\n\n[output] 2D integer array\n\nThe powerset of nums.\n\"\"\"", "inputs": [[[1, 2]], [[1, 2, 3]], [[1]], [[125, 15, 155, 15, 158]], [[1, 2, 3, 4]]], "outputs": [[[[], [2], [1], [1, 2]]], [[[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]]], [[[], [1]]], [[[], [158], [15], [15, 158], [155], [155, 158], [155, 15], [155, 15, 158], [15], [15, 158], [15, 15], [15, 15, 158], [15, 155], [15, 155, 158], [15, 155, 15], [15, 155, 15, 158], [125], [125, 158], [125, 15], [125, 15, 158], [125, 155], [125, 155, 158], [125, 155, 15], [125, 155, 15, 158], [125, 15], [125, 15, 158], [125, 15, 15], [125, 15, 15, 158], [125, 15, 155], [125, 15, 155, 158], [125, 15, 155, 15], [125, 15, 155, 15, 158]]], [[[], [4], [3], [3, 4], [2], [2, 4], [2, 3], [2, 3, 4], [1], [1, 4], [1, 3], [1, 3, 4], [1, 2], [1, 2, 4], [1, 2, 3], [1, 2, 3, 4]]]], "starter_code": "def powerset(a):", "canonical_solution": "from itertools import compress, product\n\ndef powerset(a):\n    return [list(compress(a, p)) for p in product((0, 1), repeat=len(a))]", "entry_point": "powerset", "task_id": "TACO_lite/254", "input_output_examples": [[[[1, 2]], [[1, 2, 3]]], [[[], [2], [1], [1, 2]], [[], [3], [2], [2, 3], [1], [1, 3], [1, 2], [1, 2, 3]]]]}
{"requirement": "def any_odd(x):\n\"\"\"~~~if-not:ruby,python\nReturn `1` when *any* odd bit of `x` equals 1; `0` otherwise.\n~~~\n~~~if:ruby,python\nReturn `true` when *any* odd bit of `x` equals 1; `false` otherwise.\n~~~\n\nAssume that:\n* `x` is an unsigned, 32-bit integer;\n* the bits are zero-indexed (the least significant bit is position 0)\n\n\n## Examples\n\n```\n  2  -->  1 (true) because at least one odd bit is 1 (2 = 0b10)\n  5  -->  0 (false) because none of the odd bits are 1 (5 = 0b101)\n170  -->  1 (true) because all of the odd bits are 1 (170 = 0b10101010)\n```\n\"\"\"", "inputs": [[2863311530], [128], [131], [2], [24082], [0], [85], [1024], [1], [1365]], "outputs": [[true], [true], [true], [true], [true], [false], [false], [false], [false], [false]], "starter_code": "def any_odd(x):", "canonical_solution": "MATCH = int('10' * 16, 2)\n\ndef any_odd(x):\n    return bool(MATCH & x)", "entry_point": "any_odd", "task_id": "TACO_lite/255", "input_output_examples": [[[2], [5], [170]], [[true], [false], [true]]]}
{"requirement": "def is_prime(p):\n\"\"\"Define a function that takes one integer argument and returns logical value `true` or `false` depending on if the integer is a prime.\n\nPer Wikipedia, a prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n## Requirements\n\n* You can assume you will be given an integer input.\n* You can not assume that the integer will be only positive. You may be given negative numbers as well (or `0`).\n* **NOTE on performance**: There are no fancy optimizations required, but still *the* most trivial solutions might time out. Numbers go up to 2^31 (or similar, depends on language version). Looping all the way up to `n`, or `n/2`, will be too slow.\n\n## Example\n```nasm    \nmov edi, 1\ncall is_prime    ; EAX <- 0 (false)\n\nmov edi, 2\ncall is_prime    ; EAX <- 1 (true)\n\nmov edi, -1\ncall is_prime    ; EAX <- 0 (false)\n```\n\"\"\"", "inputs": [[0], [1], [2], [73], [75], [-1]], "outputs": [[false], [false], [true], [true], [false], [false]], "starter_code": "def is_prime(p):", "canonical_solution": "import random\n\ndef even_odd(n):\n    s, d = (0, n)\n    while d % 2 == 0:\n        s += 1\n        d >>= 1\n    return (s, d)\n\ndef Miller_Rabin(a, p):\n    s, d = even_odd(p - 1)\n    a = pow(a, d, p)\n    if a == 1:\n        return True\n    for i in range(s):\n        if a == p - 1:\n            return True\n        a = pow(a, 2, p)\n    return False\n\ndef is_prime(p):\n    if p == 2:\n        return True\n    if p <= 1 or p % 2 == 0:\n        return False\n    return all((Miller_Rabin(random.randint(2, p - 1), p) for _ in range(40)))", "entry_point": "is_prime", "task_id": "TACO_lite/256", "input_output_examples": [[[1], [2], [-1]], [[false], [true], [false]]]}
{"requirement": "def stairs(n):\n\"\"\"Raj was to move up through a pattern of stairs of a given number **(n)**. Help him to get to the    top using the function **stairs**.\n\n##Keep in mind :\n  * If **n<1** then return ' ' .\n  * There are a lot of spaces before the stair starts except for **pattern(1)**\n\n\n##Examples :\n  pattern(1)\n\n          1 1\n\n  pattern(6)\n\n                          1 1\n                      1 2 2 1  \n                  1 2 3 3 2 1\n              1 2 3 4 4 3 2 1\n          1 2 3 4 5 5 4 3 2 1\n      1 2 3 4 5 6 6 5 4 3 2 1\n\npattern(12)\n\n                                                  1 1\n                                              1 2 2 1\n                                          1 2 3 3 2 1\n                                      1 2 3 4 4 3 2 1\n                                  1 2 3 4 5 5 4 3 2 1\n                              1 2 3 4 5 6 6 5 4 3 2 1\n                          1 2 3 4 5 6 7 7 6 5 4 3 2 1\n                      1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1\n                  1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\n              1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1\n          1 2 3 4 5 6 7 8 9 0 1 1 0 9 8 7 6 5 4 3 2 1\n      1 2 3 4 5 6 7 8 9 0 1 2 2 1 0 9 8 7 6 5 4 3 2 1\n\"\"\"", "inputs": [[3], [7], [10], [16]], "outputs": [["        1 1\n    1 2 2 1\n1 2 3 3 2 1"], ["                        1 1\n                    1 2 2 1\n                1 2 3 3 2 1\n            1 2 3 4 4 3 2 1\n        1 2 3 4 5 5 4 3 2 1\n    1 2 3 4 5 6 6 5 4 3 2 1\n1 2 3 4 5 6 7 7 6 5 4 3 2 1"], ["                                    1 1\n                                1 2 2 1\n                            1 2 3 3 2 1\n                        1 2 3 4 4 3 2 1\n                    1 2 3 4 5 5 4 3 2 1\n                1 2 3 4 5 6 6 5 4 3 2 1\n            1 2 3 4 5 6 7 7 6 5 4 3 2 1\n        1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1\n    1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1"], ["                                                            1 1\n                                                        1 2 2 1\n                                                    1 2 3 3 2 1\n                                                1 2 3 4 4 3 2 1\n                                            1 2 3 4 5 5 4 3 2 1\n                                        1 2 3 4 5 6 6 5 4 3 2 1\n                                    1 2 3 4 5 6 7 7 6 5 4 3 2 1\n                                1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1\n                            1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\n                        1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1\n                    1 2 3 4 5 6 7 8 9 0 1 1 0 9 8 7 6 5 4 3 2 1\n                1 2 3 4 5 6 7 8 9 0 1 2 2 1 0 9 8 7 6 5 4 3 2 1\n            1 2 3 4 5 6 7 8 9 0 1 2 3 3 2 1 0 9 8 7 6 5 4 3 2 1\n        1 2 3 4 5 6 7 8 9 0 1 2 3 4 4 3 2 1 0 9 8 7 6 5 4 3 2 1\n    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1"]], "starter_code": "def stairs(n):", "canonical_solution": "def stairs(n):\n    return '\\n'.join((step(i).rjust(4 * n - 1) for i in range(1, n + 1)))\n\ndef step(n):\n    h = ' '.join((str(i % 10) for i in range(1, n + 1)))\n    return f'{h} {h[::-1]}'", "entry_point": "stairs", "task_id": "TACO_lite/257", "input_output_examples": [[[1], [6], [12], [3]], [["          1 1"], ["                          1 1\n                      1 2 2 1  \n                  1 2 3 3 2 1\n              1 2 3 4 4 3 2 1\n          1 2 3 4 5 5 4 3 2 1\n      1 2 3 4 5 6 6 5 4 3 2 1"], ["                                                  1 1\n                                              1 2 2 1\n                                          1 2 3 3 2 1\n                                      1 2 3 4 4 3 2 1\n                                  1 2 3 4 5 5 4 3 2 1\n                              1 2 3 4 5 6 6 5 4 3 2 1\n                          1 2 3 4 5 6 7 7 6 5 4 3 2 1\n                      1 2 3 4 5 6 7 8 8 7 6 5 4 3 2 1\n                  1 2 3 4 5 6 7 8 9 9 8 7 6 5 4 3 2 1\n              1 2 3 4 5 6 7 8 9 0 0 9 8 7 6 5 4 3 2 1\n          1 2 3 4 5 6 7 8 9 0 1 1 0 9 8 7 6 5 4 3 2 1\n      1 2 3 4 5 6 7 8 9 0 1 2 2 1 0 9 8 7 6 5 4 3 2 1"], ["        1 1\n    1 2 2 1\n1 2 3 3 2 1"]]]}
{"requirement": "def possible_positions(p):\n\"\"\"# Description\n\nWrite a function that accepts the current position of a knight in a chess board, it returns the possible positions that it will end up after 1 move. The resulted should be sorted. \n\n## Example\n\n\"a1\" -> [\"b3\", \"c2\"]\n\"\"\"", "inputs": [["a1"], ["f7"], ["c3"]], "outputs": [[["b3", "c2"]], [["d6", "d8", "e5", "g5", "h6", "h8"]], [["a2", "a4", "b1", "b5", "d1", "d5", "e2", "e4"]]], "starter_code": "def possible_positions(p):", "canonical_solution": "def possible_positions(p):\n    r, c = (ord(p[0]) - 96, int(p[1]))\n    moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    return [''.join((chr(r + i + 96), str(c + j))) for i, j in moves if 1 <= r + i <= 8 and 1 <= c + j <= 8]", "entry_point": "possible_positions", "task_id": "TACO_lite/258", "input_output_examples": [[["a1"]], [[["b3", "c2"]]]]}
{"requirement": "def complete_binary_tree(a):\n\"\"\"__Definition:__ According to Wikipedia, a [complete binary tree](https://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees) is a binary tree _\"where every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible.\"_\n\nThe Wikipedia page referenced above also mentions that _\"Binary trees can also be stored in breadth-first order as an implicit data structure in arrays, and if the tree is a complete binary tree, this method wastes no space.\"_\n\nYour task is to write a method (or function) that takes an array (or list, depending on language) of integers and, assuming that the array is ordered according to an _in-order_ traversal of a complete binary tree, returns an array that contains the values of the tree in breadth-first order.\n\n__Example 1:__\nLet the input array be `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]`. This array contains the values of the following complete binary tree. \n\n\n```\n          _ 7_\n        /      \\\n       4        9\n     /   \\     / \\\n   2      6   8   10\n  / \\     /\n 1   3   5\n```\nIn this example, the input array happens to be sorted, but that is _not_ a requirement.\n\n__Output 1:__ The output of the function shall be an array containing the values of the nodes of the binary tree read top-to-bottom, left-to-right. In this example, the returned array should be:\n\n```[7, 4, 9, 2, 6, 8, 10, 1, 3, 5]```\n\n\n__Example 2:__\nLet the input array be `[1, 2, 2, 6, 7, 5]`. This array contains the values of the following complete binary tree. \n\n\n```\n        6\n      /   \\\n    2       5\n   / \\     /\n  1   2   7\n \n```\nNote that an in-order traversal of this tree produces the input array.\n\n__Output 2:__ The output of the function shall be an array containing the values of the nodes of the binary tree read top-to-bottom, left-to-right. In this example, the returned array should be:\n\n```[6, 2, 5, 1, 2, 7]```\n\"\"\"", "inputs": [[[1]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], "outputs": [[[1]], [[4, 2, 6, 1, 3, 5]], [[7, 4, 9, 2, 6, 8, 10, 1, 3, 5]]], "starter_code": "def complete_binary_tree(a):", "canonical_solution": "def complete_binary_tree(a):\n\n    def in_order(n=0):\n        if n < len(a):\n            yield from in_order(2 * n + 1)\n            yield n\n            yield from in_order(2 * n + 2)\n    result = [None] * len(a)\n    for i, x in zip(in_order(), a):\n        result[i] = x\n    return result", "entry_point": "complete_binary_tree", "task_id": "TACO_lite/259", "input_output_examples": [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 2, 6, 7, 5]]], [[7, 4, 9, 2, 6, 8, 10, 1, 3, 5], [6, 2, 5, 1, 2, 7]]]}
{"requirement": "def could_be(original, another):\n\"\"\"The objective is to disambiguate two given names: the original with another\n\nThis kata is slightly more evolved than the previous one: [Author Disambiguation: to the point!](https://www.codewars.com/kata/580a429e1cb4028481000019).\n\nThe function ```could_be``` is still given the original name and another one to test\nagainst. \n\n```python\n# should return True even with 'light' variations (more details in section below)\n> could_be(\"Chuck Norris\", u\"chück!\")\nTrue\n\n# should False otherwise (whatever you may personnaly think)\n> could_be(\"Chuck Norris\", \"superman\")\nFalse\n``` \n\n**Watch out**: When accents comes into the game, they will enter through **UTF-8 unicodes. **\n\nThe function should be tolerant with regards to:\n\n * upper and lower cases: ```could_be(A, a) : True```\n * accents: ```could_be(E, é) : True```\n * dots: ```could_be(E., E) : True```\n * same for other ending punctuations in [!,;:?]: ```could_be(A, A!) : True```\n\nOn the other hand, more consideration needs to be given to *composed names*...\nLet's be bold about it: if you have any, they will be considered as a whole :\n\n```python\n# We still have:\n> could_be(\"Carlos Ray Norris\", \"Carlos Ray Norris\")\nTrue\n> could_be(\"Carlos-Ray Norris\", \"Carlos-Ray Norris\")\nTrue\n\n# But:\n> could_be(\"Carlos Ray Norris\", \"Carlos-Ray Norris\")\nFalse\n> could_be(\"Carlos-Ray Norris\", \"Carlos Ray Norris\")\nFalse\n> could_be(\"Carlos-Ray Norris\", \"Carlos Ray-Norris\")\nFalse\n```\n \nAmong the valid combinaisons of the fullname \"Carlos Ray Norris\", you will find\n\n```python\ncould_be(\"Carlos Ray Norris\", \"carlos ray\") : True\ncould_be(\"Carlos Ray Norris\", \"Carlos. Ray, Norris;\") : True\ncould_be(\"Carlos Ray Norris\", u\"Carlòs! Norris\") : True\n```\n\nToo easy ? Try the next step: [Author Disambiguation: Signatures worth it](https://www.codewars.com/kata/author-disambiguation-signatures-worth-it)\n\"\"\"", "inputs": [["Carlos Ray Norris", "Carlos Ray Norris"], ["Carlos Ray Norris", "Carlos Ray"], ["Carlos Ray Norris", "Ray Norris"], ["Carlos Ray Norris", "Carlos Norris"], ["Carlos Ray Norris", "Norris"], ["Carlos Ray Norris", "Carlos"], ["Carlos Ray Norris", "Norris Carlos"], ["Carlos Ray Norris", "carlos ray norris"], ["Carlos Ray Norris", "Norris! ?ray"], ["Carlos Ray Norris", "Carlos. Ray; Norris,"], ["Carlos Ray Norris", "Carlos:Ray Norris"], ["Carlos-Ray Norris", "Carlos-Ray Norris:"], ["Carlos Ray-Norris", "Carlos? Ray-Norris"], ["Carlos Ray Norris", "Carlos Ray Norr"], ["Carlos Ray Norris", "Ra Norris"], ["", "C"], ["", ""], ["Carlos Ray Norris", " "], ["Carlos-Ray Norris", "Carlos Ray-Norris"], ["Carlos Ray Norris", "Carlos-Ray Norris"], ["Carlos Ray Norris", "Carlos Ray-Norris"], ["Carlos Ray", "Carlos Ray Norris"], ["Carlos", "Carlos Ray Norris"]], "outputs": [[true], [true], [true], [true], [true], [true], [true], [true], [true], [true], [true], [true], [true], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false]], "starter_code": "def could_be(original, another):", "canonical_solution": "import re\nimport unicodedata\nNAME = re.compile('[\\\\w-]+')\n\ndef decompose(name):\n    standarized = unicodedata.normalize('NFKD', name.lower()).encode('ascii', 'ignore') if type(name) != str else name.lower()\n    return re.findall(NAME, standarized)\n\ndef could_be(original, another):\n    if not another.strip():\n        return False\n    std_original = decompose(original)\n    std_another = decompose(another)\n    return all((name in std_original for name in std_another))", "entry_point": "could_be", "task_id": "TACO_lite/260", "input_output_examples": [[["Chuck Norris", "chück!"], ["Chuck Norris", "superman"], ["Carlos Ray Norris", "Carlos Ray Norris"], ["Carlos-Ray Norris", "Carlos-Ray Norris"], ["Carlos Ray Norris", "Carlos-Ray Norris"], ["Carlos-Ray Norris", "Carlos Ray Norris"], ["Carlos-Ray Norris", "Carlos Ray-Norris"], ["Carlos Ray Norris", "carlos ray"], ["Carlos Ray Norris", "Carlos. Ray, Norris;"], ["Carlos Ray Norris", "Carlòs! Norris"]], [[true], [false], [true], [true], [false], [false], [false], [true], [true], [true]]]}
{"requirement": "def green(n):\n\"\"\"This is a very simply formulated task. Let's call an integer number `N` 'green' if `N²` ends with all of the digits of `N`. Some examples:\n\n`5` is green, because `5² = 25` and `25` ends with `5`.\n\n`11` is not green, because `11² = 121` and `121` does not end with `11`.\n\n`376` is green, because `376² = 141376` and `141376` ends with `376`.\n\nYour task is to write a function `green` that returns `n`th green number, starting with `1` - `green (1) == 1`\n\n---\n\n## Data range\n\n```if:haskell\n`n <= 4000` for Haskell\n```\n```if:java\n`n <= 5000` for Java\n```\n```if:python\n`n <= 5000` for Python\n```\n```if:javascript\n`n <= 3000` for JavaScript\n\nReturn values should be `String`s, and should be exact. A BigNum library is recommended.\n```\n\"\"\"", "inputs": [[1], [2], [3], [4], [12], [13], [100], [110]], "outputs": [[1], [5], [6], [25], [2890625], [7109376], [6188999442576576769103890995893380022607743740081787109376], [9580863811000557423423230896109004106619977392256259918212890625]], "starter_code": "def green(n):", "canonical_solution": "out = [1, 5, 6]\n\ndef green(n):\n    f = 5\n    s = 6\n    q = 1\n    while n >= len(out):\n        q = 10 * q\n        f = f ** 2 % q\n        s = (1 - (s - 1) ** 2) % q\n        out.extend(sorted((j for j in [f, s] if j not in out)))\n    return out[n - 1]", "entry_point": "green", "task_id": "TACO_lite/261", "input_output_examples": [[[5], [11], [376], [1]], [[true], [false], [true], [1]]]}
{"requirement": "def amort(rate, bal, term, num_payments):\n\"\"\"The description is rather long but it tries to explain what a financing plan is. \n\nThe fixed monthly payment for a fixed rate mortgage is the amount paid by the borrower every month that ensures \nthat the loan is paid off in full with interest at the end of its term. \n\nThe monthly payment formula is based on the annuity formula. \nThe monthly payment `c` depends upon:\n\n- `rate` - the monthly interest rate is expressed as a decimal, not a percentage. \nThe monthly rate is simply the **given** yearly percentage rate divided by 100 and then by 12.\n\n- `term` - the number of monthly payments, called the loan's `term`.\n- `principal` - the amount borrowed, known as the loan's principal (or `balance`).\n\nFirst we have to determine `c`.\n\nWe have: `c = n /d` with `n = r * balance` and `d = 1 - (1 + r)**(-term)` where `**` is the `power` function (you can look at the reference below).\n\nThe payment `c` is composed of two parts. The first part pays the interest (let us call it `int`)\ndue for the balance of the given month, the second part repays the balance (let us call this part `princ`) hence for the following month we get a `new balance = old balance - princ` with `c = int + princ`. \n\nLoans are structured so that the amount of principal returned to the borrower starts out small and increases with each mortgage payment. \nWhile the mortgage payments in the first years consist primarily of interest payments, the payments in the final years consist primarily of principal repayment.\n\nA mortgage's amortization schedule provides a detailed look at precisely what portion of each mortgage payment is dedicated to each component.\n\nIn an example of a $100,000, 30-year mortgage with a rate of 6 percents the amortization schedule consists of 360 monthly payments.\nThe partial amortization schedule below shows with 2 decimal floats\nthe balance between principal and interest payments.\n\n--|num_payment|c          |princ      |int        |Balance    |\n--|-----------|-----------|-----------|-----------|-----------|\n--|1          |599.55     |99.55      |500.00     |99900.45   |\n--|...        |599.55     |...        |...        |...        |\n--|12         |599.55     |105.16     |494.39     |98,771.99  |\n--|...        |599.55     |...        |...        |...        |\n--|360        |599.55     |596.57     |2.98       |0.00       |\n\n# Task:\nGiven parameters \n```\nrate: annual rate as percent (don't forgent to divide by 100*12)\nbal: original balance (borrowed amount) \nterm: number of monthly payments\nnum_payment: rank of considered month (from 1 to term)\n```\nthe function `amort` will return a formatted string:\n\n`\"num_payment %d c %.0f princ %.0f int %.0f balance %.0f\" (with arguments num_payment, c, princ, int, balance`)\n\n# Examples:\n```\namort(6, 100000, 360, 1) ->\n\"num_payment 1 c 600 princ 100 int 500 balance 99900\"\n\namort(6, 100000, 360, 12) ->\n\"num_payment 12 c 600 princ 105 int 494 balance 98772\"\n\n```\n# Ref\n\"\"\"", "inputs": [[7.4, 10215, 24, 20], [7.9, 107090, 48, 41], [6.8, 105097, 36, 4], [3.8, 48603, 24, 10], [1.9, 182840, 48, 18], [1.9, 19121, 48, 2], [2.2, 112630, 60, 11], [5.6, 133555, 60, 53], [9.8, 67932, 60, 34], [3.7, 64760, 36, 24], [4.6, 85591, 36, 5], [7.0, 168742, 48, 16], [9.6, 17897, 60, 23], [5.2, 53521, 60, 51], [6.8, 139308, 60, 38], [5.0, 182075, 24, 9], [8.0, 128263, 36, 26], [7.8, 112414, 60, 37], [4.9, 93221, 36, 5], [1.2, 146157, 48, 20], [3.6, 168849, 24, 11], [9.3, 87820, 60, 14], [8.7, 155744, 36, 31], [6.4, 179023, 36, 11], [8.3, 38495, 36, 15], [9.6, 150614, 24, 19], [2.5, 159363, 48, 19], [4.7, 56245, 48, 11], [1.5, 142777, 36, 32], [9.6, 187340, 60, 28], [2.4, 57707, 24, 14], [3.0, 180678, 36, 31], [2.0, 139586, 24, 13], [5.3, 142498, 60, 46], [9.0, 150309, 48, 29], [7.1, 60232, 60, 56], [8.7, 172214, 36, 14], [9.0, 187174, 60, 12], [9.5, 119722, 60, 23], [9.2, 10536, 36, 15], [1.9, 70139, 24, 13], [4.5, 141454, 36, 23], [4.5, 154486, 24, 7], [2.2, 20254, 36, 35], [3.7, 114512, 36, 23], [8.6, 121685, 48, 24], [1.1, 171542, 48, 25], [1.1, 121991, 48, 20], [8.9, 162862, 60, 46], [1.9, 152921, 60, 19]], "outputs": [["num_payment 20 c 459 princ 445 int 14 balance 1809"], ["num_payment 41 c 2609 princ 2476 int 133 balance 17794"], ["num_payment 4 c 3235 princ 2685 int 550 balance 94447"], ["num_payment 10 c 2106 princ 2009 int 98 balance 28799"], ["num_payment 18 c 3959 princ 3769 int 189 balance 115897"], ["num_payment 2 c 414 princ 384 int 30 balance 18353"], ["num_payment 11 c 1984 princ 1810 int 174 balance 92897"], ["num_payment 53 c 2557 princ 2464 int 93 balance 17571"], ["num_payment 34 c 1437 princ 1153 int 283 balance 33532"], ["num_payment 24 c 1903 princ 1829 int 75 balance 22389"], ["num_payment 5 c 2550 princ 2256 int 294 balance 74397"], ["num_payment 16 c 4041 princ 3335 int 706 balance 117641"], ["num_payment 23 c 377 princ 278 int 98 balance 12025"], ["num_payment 51 c 1015 princ 972 int 43 balance 8939"], ["num_payment 38 c 2745 princ 2411 int 335 balance 56634"], ["num_payment 9 c 7988 princ 7474 int 514 balance 115917"], ["num_payment 26 c 4019 princ 3736 int 283 balance 38758"], ["num_payment 37 c 2269 princ 1942 int 327 balance 48320"], ["num_payment 5 c 2790 princ 2449 int 341 balance 81077"], ["num_payment 20 c 3120 princ 3031 int 89 balance 86109"], ["num_payment 11 c 7302 princ 7002 int 300 balance 92965"], ["num_payment 14 c 1836 princ 1277 int 559 balance 70807"], ["num_payment 31 c 4931 princ 4722 int 209 balance 24127"], ["num_payment 11 c 5479 princ 4771 int 708 balance 127911"], ["num_payment 15 c 1212 princ 1041 int 170 balance 23607"], ["num_payment 19 c 6922 princ 6599 int 323 balance 33796"], ["num_payment 19 c 3492 princ 3281 int 211 balance 98178"], ["num_payment 11 c 1288 princ 1110 int 178 balance 44271"], ["num_payment 32 c 4058 princ 4033 int 25 balance 16183"], ["num_payment 28 c 3944 princ 3032 int 912 balance 110949"], ["num_payment 14 c 2465 princ 2411 int 54 balance 24381"], ["num_payment 31 c 5254 princ 5176 int 78 balance 26076"], ["num_payment 13 c 5938 princ 5821 int 117 balance 64670"], ["num_payment 46 c 2709 princ 2535 int 173 balance 36695"], ["num_payment 29 c 3740 princ 3221 int 519 balance 66007"], ["num_payment 56 c 1196 princ 1161 int 35 balance 4712"], ["num_payment 14 c 5452 princ 4618 int 835 balance 110505"], ["num_payment 12 c 3885 princ 2694 int 1191 balance 156135"], ["num_payment 23 c 2514 princ 1863 int 651 balance 80372"], ["num_payment 15 c 336 princ 284 int 52 balance 6495"], ["num_payment 13 c 2981 princ 2925 int 56 balance 32478"], ["num_payment 23 c 4208 princ 3993 int 215 balance 53292"], ["num_payment 7 c 6743 princ 6304 int 439 balance 110852"], ["num_payment 35 c 582 princ 580 int 2 balance 581"], ["num_payment 23 c 3366 princ 3224 int 142 balance 42823"], ["num_payment 24 c 3005 princ 2514 int 491 balance 66044"], ["num_payment 25 c 3655 princ 3575 int 79 balance 83139"], ["num_payment 20 c 2599 princ 2531 int 68 balance 71813"], ["num_payment 46 c 3373 princ 3019 int 354 balance 44694"], ["num_payment 19 c 2674 princ 2502 int 172 balance 106057"]], "starter_code": "def amort(rate, bal, term, num_payments):", "canonical_solution": "def amort(rate, bal, term, num_payments):\n    monthlyRate = rate / (12 * 100)\n    c = bal * (monthlyRate * (1 + monthlyRate) ** term) / ((1 + monthlyRate) ** term - 1)\n    newBalance = bal\n    for i in range(num_payments):\n        interest = newBalance * monthlyRate\n        princ = c - interest\n        newBalance = newBalance - princ\n    return 'num_payment %s c %.0f princ %.0f int %.0f balance %.0f' % (num_payments, c, princ, interest, newBalance)", "entry_point": "amort", "task_id": "TACO_lite/262", "input_output_examples": [[[6, 100000, 360, 1], [6, 100000, 360, 12]], [["num_payment 1 c 600 princ 100 int 500 balance 99900"], ["num_payment 12 c 600 princ 105 int 494 balance 98772"]]]}
{"requirement": "def longest_palindrome(s):\n\"\"\"A palindrome is a series of characters that read the same forwards as backwards such as \"hannah\", \"racecar\" and \"lol\".\n\nFor this Kata you need to write a function that takes a string of characters and returns the length, as an integer value, of longest alphanumeric palindrome that could be made by combining the characters in any order but using each character only once. The function should not be case sensitive.\n\nFor example if passed \"Hannah\" it should return 6 and if passed \"aabbcc_yYx_\" it should return 9 because one possible palindrome would be \"abcyxycba\".\n\"\"\"", "inputs": [["A"], ["Hannah"], ["xyz__a_/b0110//a_zyx"], ["$aaabbbccddd_!jJpqlQx_.///yYabababhii_"], [""]], "outputs": [[1], [6], [13], [25], [0]], "starter_code": "def longest_palindrome(s):", "canonical_solution": "from collections import Counter\n\ndef longest_palindrome(s):\n    c = Counter(filter(str.isalnum, s.lower()))\n    return sum((v // 2 * 2 for v in c.values())) + any((v % 2 for v in c.values()))", "entry_point": "longest_palindrome", "task_id": "TACO_lite/263", "input_output_examples": [[["Hannah"], ["aabbcc_yYx_"], ["A"]], [[6], [9], [1]]]}
{"requirement": "def cog_rpm(cogs, n):\n\"\"\"# Kata Task\n\nYou are given a list of cogs in a gear train\n\nEach element represents the number of teeth of that cog\n\ne.g. `[100, 50, 25]` means \n* 1st cog has 100 teeth \n* 2nd cog has 50 teeth\n* 3rd cog has 25 teeth\n\nIf the ``nth`` cog rotates clockwise at 1 RPM what is the RPM of the cogs at each end of the gear train? \n\n**Notes**\n* no two cogs share the same shaft\n* return an array whose two elements are RPM of the first and last cogs respectively\n* use negative numbers for anti-clockwise rotation\n* for convenience `n` is zero-based\n* For C and NASM coders, the returned array will be `free`'d.\n\n---\n\nSeries:\n* Cogs\n* Cogs 2\n\"\"\"", "inputs": [[[100], 0], [[100, 100, 100, 100], 0], [[100, 100, 100, 100], 1], [[100, 100, 100, 100], 2], [[100, 100, 100, 100], 3]], "outputs": [[[1, 1]], [[1, -1]], [[-1, 1]], [[1, -1]], [[-1, 1]]], "starter_code": "def cog_rpm(cogs, n):", "canonical_solution": "def cog_rpm(cogs, n):\n    return [cogs[n] / cogs[0] * (-1 if n % 2 else 1), cogs[n] / cogs[-1] * (1 if (len(cogs) - n) % 2 else -1)]", "entry_point": "cog_rpm", "task_id": "TACO_lite/264", "input_output_examples": [[[[100], 0]], [[[1, 1]]]]}
{"requirement": "def reduce_pyramid(base):\n\"\"\"## Number pyramid\n\nNumber pyramid is a recursive structure where each next row is constructed by adding adjacent values of the current row. For example:\n\n```\nRow 1     [1     2     3     4]\nRow 2        [3     5     7]\nRow 3           [8    12]\nRow 4             [20]\n```\n\n___\n\n## Task\n\nGiven the first row of the number pyramid, find the value stored in its last row.\n\n___\n\n## Examples\n\n```python\nreduce_pyramid([1])        ==  1\nreduce_pyramid([3, 5])     ==  8\nreduce_pyramid([3, 9, 4])  ==  25\n```\n\n___\n\n## Performance tests\n\n```python\nNumber of tests: 10\nList size: 10,000\n```\n\"\"\"", "inputs": [[[1]], [[3, 5]], [[3, 9, 4]], [[5, 6, 7, 8]], [[13, 1, 21, 9]], [[13, 76, 21, 42, 63]]], "outputs": [[1], [8], [25], [52], [88], [674]], "starter_code": "def reduce_pyramid(base):", "canonical_solution": "from operator import mul\n\ndef reduce_pyramid(base):\n    return sum(map(mul, base, comb_n(len(base) - 1)))\n\ndef comb_n(n):\n    c = 1\n    for k in range(0, n + 1):\n        yield c\n        c = c * (n - k) // (k + 1)", "entry_point": "reduce_pyramid", "task_id": "TACO_lite/265", "input_output_examples": [[[[1]], [[3, 5]], [[3, 9, 4]]], [[1], [8], [25]]]}
{"requirement": "def simplify(p):\n\"\"\"# Story\n\nJohn found a path to a treasure, and while searching for its precise location he wrote a list of directions using symbols `\"^\"`, `\"v\"`, `\"<\"`, `\">\"` which mean `north`, `east`, `west`, and `east` accordingly. On his way John had to try many different paths, sometimes walking in circles, and even missing the treasure completely before finally noticing it.\n\n___\n\n## Task\n\nSimplify the list of directions written by John by eliminating any loops.\n\n**Note**: a loop is any sublist of directions which leads John to the coordinate he had already visited.\n\n___\n\n## Examples\n\n```\nsimplify(\"<>>\")        ==  \">\"\nsimplify(\"<^^>v<^^^\")  ==  \"<^^^^\"\nsimplify(\"\")           ==  \"\"\nsimplify(\"^< > v\n    ^   v\n> > C > D > >\n^   ^   v\n^ < B < <\n    ^\n    A\n```\n\nJohn visits points `A -> B -> C -> D -> B -> C -> D`, realizes that `-> C -> D -> B` steps are meaningless and removes them, getting this path: `A -> B -> (*removed*) -> C -> D`.\n\n```\n    ∙ ∙ ∙\n    ∙   ∙\n> > C > D > >\n^   ∙   ∙\n^ < B ∙ ∙\n    ^\n    A\n```\n\nFollowing the final, simplified route John visits points `C` and `D`, but for the first time, not the second (because we ignore the steps made on a hypothetical path), and he doesn't need to alter the directions list anymore.\n\"\"\"", "inputs": [["<>>"], [""], ["v>^<"], [">>>>"], ["^>>>>v"], ["<^^>v<^^^"], ["<^>>v<"], ["<^<<^^>>vv<<<>^^^v^"], ["v<<<<<^^^^^v>v>v>v>v>>"], [">^>^>^>^>^>^>v>v>v>v>v>v>v>v<"], ["^^^>>>>>>^^^<<<vvv<<<vvv"], ["^^^>>>>>>^^^<<<vvv<<<vv"], [">vv<<<^^^^>>>>>vvvvvv<<<<<<^^^^^^^^>>>>vv"], [">vv<<<^^^^>>>>>vvvvvv<<<<<<^^^^^^^^>>>>"], [">^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v"], ["<>>^<<v"]], "outputs": [[">"], [""], [""], [">>>>"], ["^>>>>v"], ["<^^^^"], [""], ["<^<<^^^"], ["v>"], [">^>^>^>^>^>^>v>v>v>v>v>v>v>v<"], [""], ["^"], [">vv<<<^^^^>>>"], [">vv<<<^^^^>>>>>vvvvvv<<<<<<^^^^^^^^>>>>"], [">^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v>^>v"], [">^<<v"]], "starter_code": "def simplify(p):", "canonical_solution": "def simplify(p):\n    new_p = [(0, 0)]\n    new_str = ''\n    x = 0\n    y = 0\n    for i in p:\n        if i == '<':\n            x -= 1\n        elif i == '>':\n            x += 1\n        elif i == '^':\n            y += 1\n        elif i == 'v':\n            y -= 1\n        if (x, y) not in new_p:\n            new_p.append((x, y))\n            new_str += i\n        else:\n            for j in new_p[::-1]:\n                if j != (x, y):\n                    new_p.pop()\n                    new_str = new_str[:-1]\n                else:\n                    break\n    return new_str", "entry_point": "simplify", "task_id": "TACO_lite/266", "input_output_examples": [[["<>>"], ["<^^>v<^^^"], [[]], ["^< > v\n    ^   v\n> > C > D > >\n^   ^   v\n^ < B < <\n    ^\n    A"]], [[">"], ["<^^^^"], [""], ["A -> B -> C -> D"]]]}
{"requirement": "def expression_matter(a, b, c):\n\"\"\"# Task\n\n* **_Given_** *three integers* `a` ,`b` ,`c`, **_return_** *the **_largest number_** obtained after inserting the following operators and brackets*: `+`, `*`, `()`\n* In other words , **_try every combination of a,b,c with [*+()] , and return the Maximum Obtained_**\n___\n# Consider an Example :\n\n**_With the numbers are 1, 2 and 3_** , *here are some ways of placing signs and brackets*:\n\n* `1 * (2 + 3) = 5`\n* `1 * 2 * 3 = 6`\n* `1 + 2 * 3 = 7`\n* `(1 + 2) * 3 = 9`\n\nSo **_the maximum value_** that you can obtain is  **_9_**.\n\n___\n# Notes \n\n* **_The numbers_** *are always* **_positive_**. \n* **_The numbers_** *are in the range* **_(1  ≤  a, b, c  ≤  10)_**.\n* *You can use the same operation* **_more than once_**.\n* **It's not necessary** *to place all the signs and brackets*.\n* **_Repetition_** *in numbers may occur* .\n* You **_cannot swap the operands_**. For instance, in the given example **_you cannot get expression_** `(1 + 3) * 2 = 8`.\n\n___\n# Input >> Output Examples:\n\n```\nexpressionsMatter(1,2,3)  ==>  return 9\n```\n## **_Explanation_**:\n*After placing signs and brackets, the **_Maximum value_** obtained from the expression* `(1+2) * 3 = 9`.\n___\n\n```\nexpressionsMatter(1,1,1)  ==>  return 3\n```\n## **_Explanation_**:\n*After placing signs, the **_Maximum value_** obtained from the expression is* `1 + 1 + 1 = 3`.\n___\n\n```\nexpressionsMatter(9,1,1)  ==>  return 18\n```\n## **_Explanation_**:\n*After placing signs and brackets, the **_Maximum value_** obtained from the expression is* `9 * (1+1) = 18`.\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[2, 1, 2], [2, 1, 1], [1, 1, 1], [1, 2, 3], [1, 3, 1], [2, 2, 2], [5, 1, 3], [3, 5, 7], [5, 6, 1], [1, 6, 1], [2, 6, 1], [6, 7, 1], [2, 10, 3], [1, 8, 3], [9, 7, 2], [1, 1, 10], [9, 1, 1], [10, 5, 6], [1, 10, 1]], "outputs": [[6], [4], [3], [9], [5], [8], [20], [105], [35], [8], [14], [48], [60], [27], [126], [20], [18], [300], [12]], "starter_code": "def expression_matter(a, b, c):", "canonical_solution": "def expression_matter(a, b, c):\n    return max(a * b * c, a + b + c, (a + b) * c, a * (b + c))", "entry_point": "expression_matter", "task_id": "TACO_lite/267", "input_output_examples": [[[1, 2, 3], [1, 1, 1], [9, 1, 1]], [[9], [3], [18]]]}
{"requirement": "def find_all(array, n):\n\"\"\"Given an array (a list in Python) of integers and an integer `n`, find all occurrences of `n` in the given array and return another array containing all the index positions of `n` in the given array.\n\nIf `n` is not in the given array, return an empty array `[]`.\n\nAssume that `n` and all values in the given array will always be integers.\n\nExample:\n```python\nfind_all([6, 9, 3, 4, 3, 82, 11], 3)\n> [2, 4]\n```\n\"\"\"", "inputs": [[[6, 9, 3, 4, 3, 82, 11], 3], [[6, 9, 3, 4, 3, 82, 11], 99], [[10, 16, 20, 6, 14, 11, 20, 2, 17, 16, 14], 16], [[20, 20, 10, 13, 15, 2, 7, 2, 20, 3, 18, 2, 3, 2, 16, 10, 9, 9, 7, 5, 15, 5], 20]], "outputs": [[[2, 4]], [[]], [[1, 9]], [[0, 1, 8]]], "starter_code": "def find_all(array, n):", "canonical_solution": "def find_all(array, n):\n    return [index for index, item in enumerate(array) if item == n]", "entry_point": "find_all", "task_id": "TACO_lite/268", "input_output_examples": [[[[6, 9, 3, 4, 3, 82, 11], 3]], [[[2, 4]]]]}
{"requirement": "def smaller(arr):\n\"\"\"Write\n```python\nsmaller(arr)\n```\nthat given an array ```arr```, you have to return the amount of numbers that are smaller than ```arr[i]``` to the right.\n\nFor example:\n```python\nsmaller([5, 4, 3, 2, 1]) == [4, 3, 2, 1, 0]\nsmaller([1, 2, 0]) == [1, 1, 0]\n```\n``` haskell\nsmaller [5,4,3,2,1]  `shouldBe` [4,3,2,1,0]\nsmaller [1,2,3]      `shouldBe` [0,0,0]\nsmaller [1, 2, 0]    `shouldBe` [1, 1, 0]\n```\nIf you've completed this one and you feel like testing your performance tuning of this same kata, head over to the much tougher version How many are smaller than me II?\n\"\"\"", "inputs": [[[5, 4, 3, 2, 1]], [[1, 2, 3]], [[1, 2, 0]], [[1, 2, 1]], [[1, 1, -1, 0, 0]], [[5, 4, 7, 9, 2, 4, 4, 5, 6]]], "outputs": [[[4, 3, 2, 1, 0]], [[0, 0, 0]], [[1, 1, 0]], [[0, 1, 0]], [[3, 3, 0, 0, 0]], [[4, 1, 5, 5, 0, 0, 0, 0, 0]]], "starter_code": "def smaller(arr):", "canonical_solution": "def smaller(arr):\n    return [len([a for a in arr[i:] if a < arr[i]]) for i in range(0, len(arr))]", "entry_point": "smaller", "task_id": "TACO_lite/269", "input_output_examples": [[[[5, 4, 3, 2, 1]], [[1, 2, 0]], [[1, 2, 3]]], [[[4, 3, 2, 1, 0]], [[1, 1, 0]], [[0, 0, 0]]]]}
{"requirement": "def reverse_fizzbuzz(s):\n\"\"\"FizzBuzz is often one of the first programming puzzles people learn. Now undo it with reverse FizzBuzz!\n\nWrite a function that accepts a string, which will always be a valid section of FizzBuzz. Your function must return an array that contains the numbers in order to generate the given section of FizzBuzz.\n\nNotes:\n- If the sequence can appear multiple times within FizzBuzz, return the numbers that generate the first instance of that sequence.\n- All numbers in the sequence will be greater than zero.\n- You will never receive an empty sequence.\n\n\n## Examples\n```\nreverse_fizzbuzz(\"1 2 Fizz 4 Buzz\")        -->  [1, 2, 3, 4, 5]\nreverse_fizzbuzz(\"Fizz 688 689 FizzBuzz\")  -->  [687, 688, 689, 690]\nreverse_fizzbuzz(\"Fizz Buzz\")              -->  [9, 10]\n```\n\"\"\"", "inputs": [["1 2 Fizz 4 Buzz"], ["Fizz 688 689 FizzBuzz"], ["Fizz Buzz"], ["Fizz"], ["Buzz"], ["Buzz Fizz"], ["FizzBuzz"]], "outputs": [[[1, 2, 3, 4, 5]], [[687, 688, 689, 690]], [[9, 10]], [[3]], [[5]], [[5, 6]], [[15]]], "starter_code": "def reverse_fizzbuzz(s):", "canonical_solution": "def reverse_fizzbuzz(s):\n    if s == 'Fizz':\n        return [3]\n    if s == 'Buzz':\n        return [5]\n    if s == 'Fizz Buzz':\n        return [9, 10]\n    if s == 'Buzz Fizz':\n        return [5, 6]\n    if s == 'FizzBuzz':\n        return [15]\n    s = s.split()\n    for i in range(len(s)):\n        if s[i].isdigit():\n            start = int(s[i]) - i\n            return list(range(start, start + len(s)))", "entry_point": "reverse_fizzbuzz", "task_id": "TACO_lite/270", "input_output_examples": [[["1 2 Fizz 4 Buzz"], ["Fizz 688 689 FizzBuzz"], ["Fizz Buzz"]], [[[1, 2, 3, 4, 5]], [[687, 688, 689, 690]], [[9, 10]]]]}
{"requirement": "def ldta(n):\n\"\"\"Looking at consecutive powers of `2`, starting with `2^1`:\n\n`2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, ...`\n\nNote that out of all the digits `0-9`, the last one ever to appear is `7`. It only shows up for the first time in the number `32768 (= 2^15)`.\n\nSo let us define LAST DIGIT TO APPEAR as the last digit to be written down when writing down all the powers of `n`, starting with `n^1`.\n\n\n## Your task\n\nYou'll be given a positive integer ```1 =< n <= 10000```, and must return the last digit to appear, as an integer.\n\nIf for any reason there are digits which never appear in the sequence of powers, return `None`/`nil`.\n\nPlease note: The Last digit to appear can be in the same number as the penultimate one. For example for `n = 8`, the last digit to appear is `7`, although `3` appears slightly before it, in the same number:\n`8, 64, 512, 4096, 32768, ...`\n\"\"\"", "inputs": [[100], [2], [3], [8], [1111], [3000]], "outputs": [[null], [7], [0], [7], [9], [5]], "starter_code": "def ldta(n):", "canonical_solution": "digits = lambda x: set(str(x))\n\ndef ldta(n):\n    if digits(n) == digits(n * n):\n        return None\n    seen = []\n    x = n\n    while len(seen) < 10:\n        for d in str(x):\n            if d not in seen:\n                seen.append(d)\n        x *= n\n    return int(seen[-1])", "entry_point": "ldta", "task_id": "TACO_lite/271", "input_output_examples": [[[100]], [[null]]]}
{"requirement": "def transpose(matrix):\n\"\"\"Write a function that outputs the transpose of a matrix - a new matrix\nwhere the columns and rows of the original are swapped.\n\nFor example, the transpose of:\n  \n    | 1 2 3 |\n    | 4 5 6 |\n\nis\n\n    | 1 4 |\n    | 2 5 |\n    | 3 6 |\n\nThe input to your function will be an array of matrix rows. You can\nassume that each row has the same length, and that the height and\nwidth of the matrix are both positive.\n\"\"\"", "inputs": [[[[1]]], [[[1, 2, 3]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0]]]], "outputs": [[[[1]]], [[[1], [2], [3]]], [[[1, 4, 7], [2, 5, 8], [3, 6, 9]]], [[[1, 0, 0, 0, 1], [0, 1, 0, 1, 0], [0, 0, 1, 0, 0]]]], "starter_code": "def transpose(matrix):", "canonical_solution": "def transpose(matrix):\n    return list(map(list, zip(*matrix)))", "entry_point": "transpose", "task_id": "TACO_lite/272", "input_output_examples": [[[[1, 2, 3], [4, 5, 6]]], [[[1, 4], [2, 5], [3, 6]]]]}
{"requirement": "def greet(language):\n\"\"\"Your start-up's BA has told marketing that your website has a large audience in Scandinavia and surrounding countries. Marketing thinks it would be great to welcome visitors to the site in their own language. Luckily you already use an API that detects the user's location, so this is an easy win. \n\n### The Task\n- Think of a way to store the languages as a database (eg an object). The languages are listed below so you can copy and paste!\n- Write a 'welcome' function that takes a parameter 'language' (always a string), and returns a greeting - if you have it in your database. It should default to English if the language is not in the database, or in the event of an invalid input.\n\n### The Database\n\n```python\n'english': 'Welcome',\n'czech': 'Vitejte',\n'danish': 'Velkomst',\n'dutch': 'Welkom',\n'estonian': 'Tere tulemast',\n'finnish': 'Tervetuloa',\n'flemish': 'Welgekomen',\n'french': 'Bienvenue',\n'german': 'Willkommen',\n'irish': 'Failte',\n'italian': 'Benvenuto',\n'latvian': 'Gaidits',\n'lithuanian': 'Laukiamas',\n'polish': 'Witamy',\n'spanish': 'Bienvenido',\n'swedish': 'Valkommen',\n'welsh': 'Croeso'\n```\n``` java\nenglish: \"Welcome\",\nczech: \"Vitejte\",\ndanish: \"Velkomst\",\ndutch: \"Welkom\",\nestonian: \"Tere tulemast\",\nfinnish: \"Tervetuloa\",\nflemish: \"Welgekomen\",\nfrench: \"Bienvenue\",\ngerman: \"Willkommen\",\nirish: \"Failte\",\nitalian: \"Benvenuto\",\nlatvian: \"Gaidits\",\nlithuanian: \"Laukiamas\",\npolish: \"Witamy\",\nspanish: \"Bienvenido\",\nswedish: \"Valkommen\",\nwelsh: \"Croeso\"\n```\n\nPossible invalid inputs include:\n~~~~\nIP_ADDRESS_INVALID - not a valid ipv4 or ipv6 ip address\nIP_ADDRESS_NOT_FOUND - ip address not in the database\nIP_ADDRESS_REQUIRED - no ip address was supplied\n~~~~\n\"\"\"", "inputs": [["english"], ["dutch"], ["IP_ADDRESS_INVALID"], [""], [2]], "outputs": [["Welcome"], ["Welkom"], ["Welcome"], ["Welcome"], ["Welcome"]], "starter_code": "def greet(language):", "canonical_solution": "def greet(language):\n    return {'czech': 'Vitejte', 'danish': 'Velkomst', 'dutch': 'Welkom', 'english': 'Welcome', 'estonian': 'Tere tulemast', 'finnish': 'Tervetuloa', 'flemish': 'Welgekomen', 'french': 'Bienvenue', 'german': 'Willkommen', 'irish': 'Failte', 'italian': 'Benvenuto', 'latvian': 'Gaidits', 'lithuanian': 'Laukiamas', 'polish': 'Witamy', 'spanish': 'Bienvenido', 'swedish': 'Valkommen', 'welsh': 'Croeso'}.get(language, 'Welcome')", "entry_point": "greet", "task_id": "TACO_lite/273", "input_output_examples": [[["english"], ["czech"], ["unknown_language"]], [["Welcome"], ["Vitejte"], ["Welcome"]]]}
{"requirement": "def bar_triang(a, b, c):\n\"\"\"The medians of a triangle are the segments that unit the vertices with the midpoint of their opposite sides.\nThe three medians of a triangle intersect at the same point, called the barycenter or the centroid.\nGiven a triangle, defined by the cartesian coordinates of its vertices we need to localize its barycenter or centroid.\n\nThe function ```bar_triang() or barTriang or bar-triang```, receives the coordinates of the three vertices ```A, B and C ``` as three different arguments and outputs the coordinates of the barycenter ```O``` in an array ```[xO, yO]```\n\nThis is how our asked function should work:\nthe result of the coordinates should be expressed up to four decimals, (rounded result).\n\nYou know that the coordinates of the barycenter are given by the following formulas.\n\n\n\nFor additional information about this important point of a triangle see at: (https://en.wikipedia.org/wiki/Centroid)\n\nLet's see some cases:\n```python\nbar_triang([4, 6], [12, 4], [10, 10]) ------> [8.6667, 6.6667]\n\nbar_triang([4, 2], [12, 2], [6, 10] ------> [7.3333, 4.6667]\n```\nThe given points form a real or a degenerate triangle but in each case the above formulas can be used.\n\nEnjoy it and happy coding!!\n\"\"\"", "inputs": [[[4, 6], [12, 4], [10, 10]], [[4, 2], [12, 2], [6, 10]], [[4, 8], [8, 2], [16, 6]]], "outputs": [[[8.6667, 6.6667]], [[7.3333, 4.6667]], [[9.3333, 5.3333]]], "starter_code": "def bar_triang(a, b, c):", "canonical_solution": "def bar_triang(a, b, c):\n    return [round(sum(x) / 3.0, 4) for x in zip(a, b, c)]", "entry_point": "bar_triang", "task_id": "TACO_lite/274", "input_output_examples": [[[[4, 6], [12, 4], [10, 10]], [[4, 2], [12, 2], [6, 10]]], [[8.6667, 6.6667], [7.3333, 4.6667]]]}
{"requirement": "def decode(string_):\n\"\"\"You're hanging out with your friends in a bar, when suddenly one of them is so drunk, that he can't speak, and when he wants to say something, he writes it down on a paper. However, none of the words he writes make sense to you. He wants to help you, so he points at a beer and writes \"yvvi\". You start to understand what he's trying to say, and you write a script, that decodes his words.\n\nKeep in mind that numbers, as well as other characters, can be part of the input, and you should keep them like they are. You should also test if the input is a string. If it is not, return \"Input is not a string\".\n\"\"\"", "inputs": [["yvvi"], ["Blf zoivzwb szw 10 yvvih"], ["Ovg'h hdrn rm gsv ulfmgzrm!"], [{"brand": "Starobrno"}], ["Tl slnv, blf'iv wifmp"], ["Hfiv r xzm wzmxv lm xlk'h xzi, slow nb yvvi"], [true], ["Hvv? R'n mlg gszg wifmp, r xzm hgroo gzpv nb xolgsvh luu"], [123], [["Beer"]]], "outputs": [["beer"], ["You already had 10 beers"], ["Let's swim in the fountain!"], ["Input is not a string"], ["Go home, you're drunk"], ["Sure i can dance on cop's car, hold my beer"], ["Input is not a string"], ["See? I'm not that drunk, i can still take my clothes off"], ["Input is not a string"], ["Input is not a string"]], "starter_code": "def decode(string_):", "canonical_solution": "def parse_character(char):\n    if 65 <= ord(char) <= 90:\n        return chr(155 - ord(char))\n    elif 97 <= ord(char) <= 122:\n        return chr(219 - ord(char))\n    else:\n        return char\n\ndef decode(string_):\n    if not isinstance(string_, str):\n        return 'Input is not a string'\n    return ''.join(map(parse_character, string_))", "entry_point": "decode", "task_id": "TACO_lite/275", "input_output_examples": [[["yvvi"]], [["beer"]]]}
{"requirement": "def issumofconsecutive(N):\n\"\"\"Given a number N, find whether N can be expressed as sum of two or more consecutive positive numbers. \n \nExample 1:\nInput:\nN = 10\nOutput:\nYes\nExplanation:\n10 can be expressesd as 1+2+3+4.\nExample 2:\nInput:\nN = 8\nOutput:\nNo\nExplanation:\n8 can't be expressesd sum of two or\nmore consecutive numbers.\nExample 3:\nInput:\nN = 24\nOutput:\nYes\nExplanation:\n24 can be expressesd as 7+8+9.\n \nYour Task:\nYou don't need to read input or print anything. Your task is to complete the function issumofconsecutive() which takes an Integer N as input and returns \"Yes\" and \"No\" accordingly.\n \nExpected Time Complexity: O(1)\nExpected Auxiliary Space: O(1)\n \nConstraints:\n1 <= N <= 10^{5}\n\"\"\"", "inputs": [[10], [8], [24]], "outputs": [["Yes"], ["No"], ["Yes"]], "starter_code": "def issumofconsecutive(N):", "canonical_solution": "def issumofconsecutive(N):\n    if N & N - 1:\n        return 'Yes'\n    else:\n        return 'No'", "entry_point": "issumofconsecutive", "task_id": "TACO_lite/276", "input_output_examples": [[[10], [8], [24]], [["Yes"], ["No"], ["Yes"]]]}
{"requirement": "def has_subpattern(string):\n\"\"\"Similar to the [previous kata](https://www.codewars.com/kata/string-subpattern-recognition-ii/), but this time you need to operate with shuffled strings to identify if they are composed repeating a subpattern\n\nSince there is no deterministic way to tell which pattern was really the original one among all the possible permutations of a fitting subpattern, return a subpattern with sorted characters, otherwise return the base string with sorted characters (you might consider this case as an edge case, with the subpattern being repeated only once and thus equalling the original input string).\n\nFor example:\n\n```python\nhas_subpattern(\"a\") == \"a\"; #no repeated pattern, just one character\nhas_subpattern(\"aaaa\") == \"a\" #just one character repeated\nhas_subpattern(\"abcd\") == \"abcd\" #base pattern equals the string itself, no repetitions\nhas_subpattern(\"babababababababa\") == \"ab\" #remember to return the base string sorted\"\nhas_subpattern(\"bbabbaaabbaaaabb\") == \"ab\" #same as above, just shuffled\n```\n\nIf you liked it, go for either the [previous kata](https://www.codewars.com/kata/string-subpattern-recognition-ii/) or the [next kata](https://www.codewars.com/kata/string-subpattern-recognition-iv/) of the series!\n\"\"\"", "inputs": [["a"], ["aaaa"], ["abcd"], ["babababababababa"], ["bbabbaaabbaaaabb"], ["123a123a123a"], ["123A123a123a"], ["12aa13a21233"], ["12aa13a21233A"], ["abcdabcaccd"]], "outputs": [["a"], ["a"], ["abcd"], ["ab"], ["ab"], ["123a"], ["111222333Aaa"], ["123a"], ["111222333Aaaa"], ["aaabbccccdd"]], "starter_code": "def has_subpattern(string):", "canonical_solution": "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\n\ndef has_subpattern(string):\n    count = Counter(string)\n    n = reduce(gcd, count.values())\n    return ''.join(sorted((c * (i // n) for c, i in count.items())))", "entry_point": "has_subpattern", "task_id": "TACO_lite/277", "input_output_examples": [[["a"], ["aaaa"], ["abcd"], ["babababababababa"], ["bbabbaaabbaaaabb"]], [["a"], ["a"], ["abcd"], ["ab"], ["ab"]]]}
{"requirement": "def rank_of_element(arr, i):\n\"\"\"# Task\n Given an array `arr`, find the rank of the element at the ith position.\n\n The `rank` of the arr[i] is a value equal to the number of elements `less than or equal to` arr[i] standing before arr[i], plus the number of elements `less than` arr[i] standing after arr[i].\n\n# Example\n\n For `arr = [2,1,2,1,2], i = 2`, the result should be `3`.\n \n There are 2 elements `less than or equal to` arr[2] standing before arr[2]: \n \n `arr[0] <= arr[2]`\n \n `arr[1] <= arr[2]`\n \n There is only 1 element `less than` arr[2] standing after arr[2]: \n \n `arr[3] < arr[2]`\n \n So the result is `2 + 1 = 3`.\n \n# Input/Output\n\n\n - `[input]` integer array `arr`\n\n  An array of integers.\n\n  `3 <= arr.length <= 50.`\n\n\n - `[input]` integer `i`\n\n  Index of the element whose rank is to be found.\n\n  \n - `[output]` an integer\n\n  Rank of the element at the ith position.\n\"\"\"", "inputs": [[[2, 1, 2, 1, 2], 2], [[2, 1, 2, 2, 2], 2], [[3, 2, 3, 4, 1], 0], [[3, 2, 3, 4, 1], 1], [[3, 2, 3, 4, 1], 2]], "outputs": [[3], [2], [2], [1], [3]], "starter_code": "def rank_of_element(arr, i):", "canonical_solution": "def rank_of_element(arr, i):\n    return sum((x <= arr[i] if n < i else x < arr[i] for n, x in enumerate(arr)))", "entry_point": "rank_of_element", "task_id": "TACO_lite/278", "input_output_examples": [[[[2, 1, 2, 1, 2], 2]], [[3]]]}
{"requirement": "def are_similar(a, b):\n\"\"\"# Task\nTwo arrays are called similar if one can be obtained from another by swapping at most one pair of elements.\n\nGiven two arrays, check whether they are similar.\n\n# Example\n\nFor `A = [1, 2, 3]` and `B = [1, 2, 3]`, the output should be `true;`\n\nFor `A = [1, 2, 3]` and `B = [2, 1, 3]`, the output should be `true;`\n\nFor `A = [1, 2, 2]` and `B = [2, 1, 1]`, the output should be `false.`\n\n# Input/Output\n\n- `[input]` integer array `A`\n\nArray of integers.\n\nConstraints: `3 ≤ A.length ≤ 10000, 1 ≤ A[i] ≤ 1000.`\n\n- `[input]` integer array `B`\n\nArray of integers of the same length as `A`.\n\nConstraints: `B.length = A.length, 1 ≤ B[i] ≤ 1000.`\n\n- `[output]` a boolean value\n\n`true` if `A` and `B` are similar, `false` otherwise.\n\"\"\"", "inputs": [[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [2, 1, 3]], [[1, 2, 2], [2, 1, 1]], [[1, 2, 3], [1, 10, 2]], [[2, 3, 1], [1, 3, 2]], [[1, 1, 2], [1, 2, 2]]], "outputs": [[true], [true], [false], [false], [true], [false]], "starter_code": "def are_similar(a, b):", "canonical_solution": "def are_similar(a, b):\n    return sorted(a) == sorted(b) and sum((i != j for i, j in zip(a, b))) in [0, 2]", "entry_point": "are_similar", "task_id": "TACO_lite/279", "input_output_examples": [[[[1, 2, 3], [1, 2, 3]], [[1, 2, 3], [2, 1, 3]], [[1, 2, 2], [2, 1, 1]]], [[true], [true], [false]]]}
{"requirement": "def tv_remote(words):\n\"\"\"---\n\n# Hint\n\n\nThis Kata is an extension of the earlier ones in this series. Completing those first will make this task easier.\n\n# Background\n\nMy TV remote control has arrow buttons and an `OK` button.\n\nI can use these to move a \"cursor\" on a logical screen keyboard to type words...\n\n# Keyboard\n\nThe screen \"keyboard\" layouts look like this\n\n\n  #tvkb {\n    width : 400px;\n    border: 5px solid gray; border-collapse: collapse;\n  }\n  #tvkb td {\n    color : orange;\n    background-color : black;\n    text-align : center;\n    border: 3px solid gray; border-collapse: collapse;\n  }\n  #legend {\n    width : 400px;\n    border: 1px solid gray; border-collapse: collapse;\n  }\n  #legend td {\n    text-align : center;\n    border: 1px solid gray; border-collapse: collapse;\n  }\n\n\n\nKeypad Mode 1 = alpha-numeric (lowercase)\nKeypad Mode 3 = symbols\n\n\n\n\nabcde123\nfghij456\nklmno789\npqrst.@0\nuvwxyz_/\naA#SP\n\n\n\n\n^~?!'\"()\n-:;+&%*=\n<>€£$¥¤\\\n[]{},.@§\n#¿¡_/\naA#SP\n\n\n\n\n\n\n* `aA#` is the SHIFT key. Pressing this key cycles through THREE keypad modes.\n * **Mode 1** = alpha-numeric keypad with lowercase alpha (as depicted above)\n * **Mode 2** = alpha-numeric keypad with UPPERCASE alpha\n * **Mode 3** = symbolic keypad (as depicted above)\n \n \n* `SP` is the space character\n* The other (solid fill) keys in the bottom row have no function\n\n## Special Symbols\n\nFor your convenience, here are Unicode values for the less obvious symbols of the **Mode 3** keypad\n\n\n¡ = U-00A1£ = U-00A3¤ = U-00A4¥ = U-00A5\n§ = U-00A7¿ = U-00BF€ = U-20AC\n\n\n# Kata task\n\nHow many button presses on my remote are required to type the given `words`?\n\n## Notes\n\n* The cursor always starts on the letter `a` (top left)\n* The inital keypad layout is **Mode 1**\n* Remember to also press `OK` to \"accept\" each letter\n* Take the shortest route from one letter to the next\n* The cursor wraps, so as it moves off one edge it will reappear on the opposite edge\n* Although the blank keys have no function, you may navigate through them if you want to\n* Spaces may occur anywhere in the `words` string\n* Do not press the SHIFT key until you need to. For example, with the word `e.Z`, the SHIFT change happens **after** the `.` is pressed (not before). In other words, do not try to optimize total key presses by pressing SHIFT early.\n\n```if:c,cpp\n## C/C++ warriors\nThe standard I/O libraries choke on wide characters beyond the value 255. This kata includes the Euro € (U-20AC). So the function `ws2utf8()` has been preloaded for converting wchar_t strings to UTF-8 for printing.\n```\n\n# Example\n\nwords = `Too Easy?`\n\n* T => `a`-`aA#`-OK-`U`-`V`-`W`-`X`-`Y`-`T`-OK = 9\n* o => `T`-`Y`-`X`-`W`-`V`-`U`-`aA#`-OK-OK-`a`-`b`-`c`-`d`-`e`-`j`-`o`-OK = 16\n* o => `o`-OK = 1\n* space => `o`-`n`-`m`-`l`-`q`-`v`-`SP`-OK = 7\n* E => `SP`-`aA#`-OK-`A`-`3`-`2`-`1`-`-E`-OK = 8\n* a => `E`-`1`-`2`-`3`-`A`-`aA`-OK-OK-`a`-OK = 9\n* s => `a`-`b`-`c`-`d`-`i`-`n`-`s`-OK = 7\n* y => `s`-`x`-`y`-OK = 3\n* ? => `y`-`x`-`w`-`v`-`u`-`aA#`-OK-OK-`^`-`~`-`?`-OK = 11\n\nAnswer = 9 + 16 + 1 + 7 + 8 + 9 + 7 + 3 + 11 = 71\n\n\n\n*Good Luck!\nDM.*\n\n\n\nSeries\n* TV Remote\n* TV Remote (shift and space)\n* TV Remote (wrap)\n* TV Remote (symbols)\n\"\"\"", "inputs": [["Too Easy?"], ["does"], ["your"], ["solution"], ["work"], ["for"], ["these"], ["words"], ["DOES"], ["YOUR"], ["SOLUTION"], ["WORK"], ["FOR"], ["THESE"], ["WORDS"], ["^does^"], ["$your$"], ["#solution#"], ["¿work¿"], ["{for}"], ["£these£"], ["?symbols?"], ["a"], ["aadvarks"], ["a/a/a/a/"], ["1234567890"], ["mississippi"], ["A"], ["AADVARKS"], ["A/A/A/A/"], ["MISSISSIPPI"], ["^"], ["^,@/_"], ["m¡$$¡$$¡pp¡"], ["abcde123fghij456klmno789pqrst.@0uvwxyz_/ "], ["ABCDE123FGHIJ456KLMNO789PQRST.@0UVWXYZ_/ "], ["^~?!'\"()-:;+&%*=<>€£$¥¤\\[]{},.@§#¿¡_/ "], ["Does"], ["Your"], ["Solution"], ["Work"], ["For"], ["These"], ["Words"], ["Xoo ooo ooo"], ["oXo ooo ooo"], ["ooX ooo ooo"], ["ooo Xoo ooo"], ["ooo oXo ooo"], ["ooo ooX ooo"], ["ooo ooo Xoo"], ["ooo ooo oXo"], ["ooo ooo ooX"], ["The Quick Brown Fox Jumps Over A Lazy Dog."], ["Pack My Box With Five Dozen Liquor Jugs."], [""], [" "], ["   "], ["    x   X    "]], "outputs": [[71], [16], [21], [33], [18], [12], [27], [23], [19], [22], [34], [19], [15], [28], [24], [33], [53], [49], [34], [38], [57], [54], [1], [30], [29], [26], [35], [4], [33], [32], [38], [5], [21], [54], [87], [90], [88], [29], [34], [46], [27], [21], [36], [32], [54], [66], [54], [54], [66], [54], [54], [66], [53], [262], [250], [0], [3], [5], [30]], "starter_code": "def tv_remote(words):", "canonical_solution": "H, W = (6, 8)\nKEYBOARD = ['abcde123fghij456klmno789pqrst.@0uvwxyz_/\\x0e ', 'ABCDE123FGHIJ456KLMNO789PQRST.@0UVWXYZ_/\\x0e ', '^~?!\\'\"()-:;+&%*=<>€£$¥¤\\\\[]{},.@§#¿¡\\x0e\\x0e\\x0e_/\\x0e ']\nMAP = [{c: (i // W, i % W) for i, c in enumerate(KEYBOARD[x])} for x in range(len(KEYBOARD))]\n\ndef manhattan(*pts):\n    dxy = [abs(z2 - z1) for z1, z2 in zip(*pts)]\n    return 1 + sum((min(dz, Z - dz) for dz, Z in zip(dxy, (H, W))))\n\ndef tv_remote(words):\n    cnt, mod, was = (0, 0, 'a')\n    for c in words:\n        while c not in KEYBOARD[mod]:\n            cnt += manhattan(MAP[mod][was], MAP[mod]['\\x0e'])\n            was = '\\x0e'\n            mod = (mod + 1) % 3\n        cnt += manhattan(MAP[mod][was], MAP[mod][c])\n        was = c\n    return cnt", "entry_point": "tv_remote", "task_id": "TACO_lite/280", "input_output_examples": [[["Too Easy?"]], [[71]]]}
{"requirement": "def shift_left(a, b):\n\"\"\"You are given two strings. In a single move, you can choose any of them, and delete the first (i.e. leftmost) character.\n\nFor Example:\n\n* By applying a move to the string `\"where\"`, the result is the string `\"here\"`.\n* By applying a move to the string `\"a\"`, the result is an empty string `\"\"`.\n\nImplement a function that calculates the minimum number of moves that should be performed to make the given strings equal.\n\n## Notes\n\n* Both strings consist of lowercase latin letters.\n* If the string is already empty, you cannot perform any more delete operations.\n\"\"\"", "inputs": [["test", "west"], ["test", "yes"], ["b", "ab"], ["abacabadabacaba", "abacabadacaba"], ["aaabc", "bc"], ["dark", "d"], ["dadc", "dddc"], ["nogkvcdldfpvlbkpedsecl", "nogkvcdldfpvlbkpedsecl"]], "outputs": [[2], [7], [1], [18], [3], [5], [4], [0]], "starter_code": "def shift_left(a, b):", "canonical_solution": "def shift_left(a, b):\n    r = len(a) + len(b)\n    for i in range(-1, -min(len(a), len(b)) - 1, -1):\n        if a[i] != b[i]:\n            break\n        r -= 2\n    return r", "entry_point": "shift_left", "task_id": "TACO_lite/281", "input_output_examples": [[["where"], ["a"], ["test", "west"]], [["here"], [""], [2]]]}
{"requirement": "def is_palindrome(string):\n\"\"\"# Palindrome strings\n\nA palindrome is a word, phrase, number, or other sequence of characters which reads the same backward or forward. This includes capital letters, punctuation, and word dividers.\n\nImplement a function that checks if something is a palindrome.\n\n## Examples\n```\nisPalindrome(\"anna\")   ==> true\nisPalindrome(\"walter\") ==> false\nisPalindrome(12321)    ==> true\nisPalindrome(123456)   ==> false\n```\n\"\"\"", "inputs": [["anna"], ["walter"], [12321], [123456]], "outputs": [[true], [false], [true], [false]], "starter_code": "def is_palindrome(string):", "canonical_solution": "def is_palindrome(string):\n    return str(string)[::-1] == str(string)", "entry_point": "is_palindrome", "task_id": "TACO_lite/282", "input_output_examples": [[["anna"], ["walter"], [12321], [123456]], [[true], [false], [true], [false]]]}
{"requirement": "def bubblesort_once(l):\n\"\"\"# Bubblesort Algorithm\n\n## Overview\n\nThe Bubblesort Algorithm is one of many algorithms used to sort a list of similar items (e.g. all numbers or all letters) into either ascending order or descending order.  Given a list (e.g.):\n\n```python\n[9, 7, 5, 3, 1, 2, 4, 6, 8]\n```\n\nTo sort this list in ascending order using Bubblesort, you first have to compare the first two terms of the list.  If the first term is larger than the second term, you perform a swap.  The list then becomes:\n\n```python\n[7, 9, 5, 3, 1, 2, 4, 6, 8] # The \"9\" and \"7\" have been swapped because 9 is larger than 7 and thus 9 should be after 7\n```\n\nYou then proceed by comparing the 2nd and 3rd terms, performing a swap *when necessary*, and then the 3rd and 4th term, then the 4th and 5th term, etc. etc.  When you reach the end of the list, it is said that you have completed **1 complete pass**.\n\n## Task\n\nGiven an array of integers, your function `bubblesortOnce`/`bubblesort_once`/`BubblesortOnce` (or equivalent, depending on your language's naming conventions) should return a *new* array equivalent to performing exactly **1 complete pass** on the original array.  Your function should be pure, i.e. it should **not** mutate the input array.\n\"\"\"", "inputs": [[[9, 7, 5, 3, 1, 2, 4, 6, 8]], [[1, 2]], [[2, 1]], [[1, 3]], [[3, 1]], [[24, 57]], [[89, 36]], [[1, 2, 3]], [[2, 4, 1]], [[17, 5, 11]], [[25, 16, 9]], [[103, 87, 113]], [[1032, 3192, 2864]], [[1, 2, 3, 4]], [[2, 3, 4, 1]], [[3, 4, 1, 2]], [[4, 1, 2, 3]], [[7, 5, 3, 1]], [[5, 3, 7, 7]], [[3, 1, 8, 5]], [[1, 9, 5, 5]], [[6, 3, 4, 9, 1, 2, 7, 8, 5]], [[6, 3, 4, 15, 14, 9, 1, 2, 7, 8, 5, 14, 11, 15, 17, 19]], [[42]], [[]]], "outputs": [[[7, 5, 3, 1, 2, 4, 6, 8, 9]], [[1, 2]], [[1, 2]], [[1, 3]], [[1, 3]], [[24, 57]], [[36, 89]], [[1, 2, 3]], [[2, 1, 4]], [[5, 11, 17]], [[16, 9, 25]], [[87, 103, 113]], [[1032, 2864, 3192]], [[1, 2, 3, 4]], [[2, 3, 1, 4]], [[3, 1, 2, 4]], [[1, 2, 3, 4]], [[5, 3, 1, 7]], [[3, 5, 7, 7]], [[1, 3, 5, 8]], [[1, 5, 5, 9]], [[3, 4, 6, 1, 2, 7, 8, 5, 9]], [[3, 4, 6, 14, 9, 1, 2, 7, 8, 5, 14, 11, 15, 15, 17, 19]], [[42]], [[]]], "starter_code": "def bubblesort_once(l):", "canonical_solution": "def bubblesort_once(l):\n    l = l[:]\n    for i in range(len(l) - 1):\n        if l[i] > l[i + 1]:\n            l[i], l[i + 1] = (l[i + 1], l[i])\n    return l", "entry_point": "bubblesort_once", "task_id": "TACO_lite/283", "input_output_examples": [[[[9, 7, 5, 3, 1, 2, 4, 6, 8]]], [[[7, 9, 5, 3, 1, 2, 4, 6, 8]]]]}
{"requirement": "def productfib(prod):\n\"\"\"The Fibonacci numbers are the numbers in the following integer sequence (Fn):\n>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, ...\n\nsuch as \n>F(n) = F(n-1) + F(n-2) with F(0) = 0 and F(1) = 1.\n\nGiven a number, say prod (for product), we search two Fibonacci numbers F(n) and F(n+1) verifying \n>F(n) * F(n+1) = prod.\n\nYour function productfib takes an integer (prod) and returns\nan array: \n```\n[F(n), F(n+1), true] or {F(n), F(n+1), 1} or (F(n), F(n+1), True)\n```\ndepending on the language if F(n) * F(n+1) = prod.\n\nIf you don't find two consecutive F(m) verifying `F(m) * F(m+1) = prod`you will return\n```\n[F(m), F(m+1), false] or {F(n), F(n+1), 0} or (F(n), F(n+1), False)\n```\nF(m) being the smallest one such as `F(m) * F(m+1) > prod`.\n\n\n### Some Examples of Return:\n(depend on the language)\n\n```\nproductfib(714) # should return (21, 34, true), \n                # since F(8) = 21, F(9) = 34 and 714 = 21 * 34\n\nproductfib(800) # should return (34, 55, false), \n                # since F(8) = 21, F(9) = 34, F(10) = 55 and 21 * 34 < 800 < 34 * 55\n-----\nproductfib(714) # should return [21, 34, true], \nproductfib(800) # should return [34, 55, false], \n-----\nproductfib(714) # should return {21, 34, 1}, \nproductfib(800) # should return {34, 55, 0},        \n-----\nproductfib(714) # should return {21, 34, true}, \nproductfib(800) # should return {34, 55, false}, \n```\n\n### Note:\n\n- You can see examples for your language in \"Sample Tests\".\n\"\"\"", "inputs": [[4895], [5895], [74049690], [84049690], [193864606], [447577], [602070], [602070602070], [1120149658760], [256319508074468182850], [203023208030065646654504166904697594722575], [203023208030065646654504166904697594722576], [0], [1], [2], [3], [4], [5], [6], [7], [105]], "outputs": [[[55, 89, true]], [[89, 144, false]], [[6765, 10946, true]], [[10946, 17711, false]], [[10946, 17711, true]], [[610, 987, false]], [[610, 987, true]], [[832040, 1346269, false]], [[832040, 1346269, true]], [[12586269025, 20365011074, true]], [[354224848179261915075, 573147844013817084101, true]], [[573147844013817084101, 927372692193078999176, false]], [[0, 1, true]], [[1, 1, true]], [[1, 2, true]], [[2, 3, false]], [[2, 3, false]], [[2, 3, false]], [[2, 3, true]], [[3, 5, false]], [[13, 21, false]]], "starter_code": "def productfib(prod):", "canonical_solution": "def productfib(prod):\n    a, b = (0, 1)\n    while prod > a * b:\n        a, b = (b, a + b)\n    return [a, b, prod == a * b]", "entry_point": "productfib", "task_id": "TACO_lite/284", "input_output_examples": [[[714], [800]], [[21, 34, true], [34, 55, false]]]}
{"requirement": "def direction_in_grid(n, m):\n\"\"\"# Task\n You're standing at the top left corner of an `n × m` grid and facing towards the `right`. \n \n Then you start walking one square at a time in the direction you are facing. \n \n If you reach the border of the grid or if the next square you are about to visit has already been visited, you turn right. \n \n You stop when all the squares in the grid are visited. What direction will you be facing when you stop?\n\n You can see the example of your long walk in the image below. The numbers denote the order in which you visit the cells.\n\n ![](https://i.gyazo.com/2fc5884d2c227a0ddeca503e6a0261be.png)\n\n Given two integers n and m, denoting the number of rows and columns respectively, find out the direction you will be facing at the end. \n \n Output `\"L\"` for left, `\"R\"` for right, `\"U\"` for up, and `\"D\"` for down.\n\n# Example:\n\n For `n = 3, m = 3`, the output should be `\"R\"`.\n\n This example refers to the picture given in the description. At the end of your walk you will be standing in the middle of the grid facing right.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n \n number of rows.\n\n `1 <= n <= 1000`\n\n\n - `[input]` integer `m`\n \n number of columns.\n\n `1 <= m <= 1000`\n \n \n - `[output]` a string\n\n The final direction.\n\"\"\"", "inputs": [[1, 1], [2, 2], [2, 3], [2, 4], [3, 1], [3, 2], [3, 3], [3, 4], [3, 5], [4, 2], [4, 3], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6], [100, 100]], "outputs": [["R"], ["L"], ["L"], ["L"], ["D"], ["U"], ["R"], ["R"], ["R"], ["U"], ["D"], ["L"], ["L"], ["L"], ["U"], ["R"], ["R"], ["L"]], "starter_code": "def direction_in_grid(n, m):", "canonical_solution": "def direction_in_grid(n, m):\n    return 'LR'[n % 2] if m >= n else 'UD'[m % 2]", "entry_point": "direction_in_grid", "task_id": "TACO_lite/285", "input_output_examples": [[[3, 3], [1, 1]], [["R"], ["R"]]]}
{"requirement": "def calc(expr):\n\"\"\"Your job is to create a calculator which evaluates expressions in [Reverse Polish notation](http://en.wikipedia.org/wiki/Reverse_Polish_notation).\n\nFor example expression `5 1 2 + 4 * + 3 -` (which is equivalent to `5 + ((1 + 2) * 4) - 3` in normal notation) should evaluate to `14`.\n\nFor your convenience, the input is formatted such that a space is provided between every token.\n\nEmpty expression should evaluate to `0`.\n\nValid operations are `+`, `-`, `*`, `/`.\n\nYou may assume that there won't be exceptional situations (like stack underflow or division by zero).\n\"\"\"", "inputs": [[""], ["3"], ["3.5"], ["1 3 +"], ["1 3 *"], ["1 3 -"], ["4 2 /"], ["10000 123 +"], ["5 1 2 + 4 * + 3 -"]], "outputs": [[0], [3], [3.5], [4], [3], [-2], [2], [10123], [14]], "starter_code": "def calc(expr):", "canonical_solution": "import operator\n\ndef calc(expr):\n    OPERATORS = {'+': operator.add, '-': operator.sub, '*': operator.mul, '/': operator.truediv}\n    stack = [0]\n    for token in expr.split(' '):\n        if token in OPERATORS:\n            op2, op1 = (stack.pop(), stack.pop())\n            stack.append(OPERATORS[token](op1, op2))\n        elif token:\n            stack.append(float(token))\n    return stack.pop()", "entry_point": "calc", "task_id": "TACO_lite/286", "input_output_examples": [[["5 1 2 + 4 * + 3 -"], [""]], [[14], [0]]]}
{"requirement": "def hex_word_sum(s):\n\"\"\"### Description\nAs hex values can include letters `A` through to `F`, certain English words can be spelled out, such as `CAFE`, `BEEF`, or `FACADE`.\nThis vocabulary can be extended by using numbers to represent other letters, such as `5EAF00D`, or `DEC0DE5`.\n\nGiven a string, your task is to return the decimal sum of all words in the string that can be interpreted as such hex values.\n\n\n### Example\n\nWorking with the string `BAG OF BEES`:  \n* `BAG` ==> `0` as it is not a valid hex value  \n* `OF` ==> `0F` ==> `15`  \n* `BEES` ==> `BEE5` ==> `48869`\n\nSo `hex_word_sum('BAG OF BEES')` returns the sum of these, `48884`.\n\n\n### Notes\n* Inputs are all uppercase and contain no punctuation\n* `0` can be substituted for `O`\n* `5` can be substituted for `S`\n\"\"\"", "inputs": [["DEFACE"], ["SAFE"], ["CODE"], ["BUGS"], [""], ["DO YOU SEE THAT BEE DRINKING DECAF COFFEE"], ["ASSESS ANY BAD CODE AND TRY AGAIN"]], "outputs": [[14613198], [23294], [49374], [0], [0], [13565769], [10889952]], "starter_code": "def hex_word_sum(s):", "canonical_solution": "def hex_word_sum(s):\n    return sum((int(w, 16) for w in s.translate(str.maketrans('OS', '05')).split() if set(w) <= set('0123456789ABCDEF')))", "entry_point": "hex_word_sum", "task_id": "TACO_lite/287", "input_output_examples": [[["BAG OF BEES"], ["DEFACE"]], [[48884], [14613198]]]}
{"requirement": "def encrypter(strng):\n\"\"\"You have been recruited by an unknown organization for your cipher encrypting/decrypting skills.  \nBeing new to the organization they decide to test your skills.  \nYour first test is to write an algorithm that encrypts the given string in the following steps.\n\n1. The first step of the encryption is a standard ROT13 cipher.\nThis is a special case of the caesar cipher where the letter is encrypted with its key that is thirteen letters down the alphabet,  \ni.e. `A => N, B => O, C => P, etc..`\n\n1. Part two of the encryption is to take the ROT13 output and replace each letter with its exact opposite. `A => Z, B => Y, C => X`.  \nThe return value of this should be the encrypted message.\n\n\nDo not worry about capitalization or punctuation. All encrypted messages should be lower case and punctuation free.  \nAs an example, the string `\"welcome to our organization\"` should return `\"qibkyai ty ysv yvgmzenmteyz\"`.\n\nGood luck, and congratulations on the new position.\n\"\"\"", "inputs": [["amz"], ["welcome to the organization"], ["hello"], ["my name is"], ["goodbye"]], "outputs": [["man"], ["qibkyai ty tfi yvgmzenmteyz"], ["fibby"], ["ao zmai eu"], ["gyyjloi"]], "starter_code": "def encrypter(strng):", "canonical_solution": "def encrypter(strng):\n    return ''.join((c if c == ' ' else chr(122 - (ord(c) - 97 + 13) % 26) for c in strng))", "entry_point": "encrypter", "task_id": "TACO_lite/288", "input_output_examples": [[["welcome to our organization"], ["amz"]], [["qibkyai ty ysv yvgmzenmteyz"], ["man"]]]}
{"requirement": "def calculate_probability(n):\n\"\"\"Given n number of people in a room, calculate the probability that any two people in that room have the same birthday (assume 365 days every year = ignore leap year). Answers should be two decimals unless whole (0 or 1) eg 0.05\n\"\"\"", "inputs": [[5], [15], [1], [365], [366]], "outputs": [[0.03], [0.25], [0], [1], [1]], "starter_code": "def calculate_probability(n):", "canonical_solution": "def calculate_probability(n):\n    return round(1 - (364 / 365) ** (n * (n - 1) / 2), 2)", "entry_point": "calculate_probability", "task_id": "TACO_lite/289", "input_output_examples": [[[5]], [[0.03]]]}
{"requirement": "def decode(s):\n\"\"\"Fans of The Wire will appreciate this one. \nFor those that haven't seen the show, the Barksdale Organization has a simple method for encoding telephone numbers exchanged via pagers: \"Jump to the other side of the 5 on the keypad, and swap 5's and 0's.\"\n\nHere's a keypad for visualization.\n```\n┌───┬───┬───┐\n│ 1 │ 2 │ 3 │\n├───┼───┼───┤\n│ 4 │ 5 │ 6 │\n├───┼───┼───┤\n│ 7 │ 8 │ 9 │\n└───┼───┼───┘\n    │ 0 │\n    └───┘\n```\n\nDetective, we're hot on their trail! We have a big pile of encoded messages here to use as evidence, but it would take way too long to decode by hand. Could you write a program to do this for us?\n\n\nWrite a funciton called decode(). Given an encoded string, return the actual phone number in string form. Don't worry about input validation, parenthesies, or hyphens.\n\"\"\"", "inputs": [["4103432323"], ["4103438970"], ["4104305768"], ["4102204351"], ["4107056043"]], "outputs": [["6957678787"], ["6957672135"], ["6956750342"], ["6958856709"], ["6953504567"]], "starter_code": "def decode(s):", "canonical_solution": "def decode(s):\n    return s.translate(str.maketrans('1234567890', '9876043215'))", "entry_point": "decode", "task_id": "TACO_lite/290", "input_output_examples": [[["4103432323"]], [["6957678787"]]]}
{"requirement": "def explode(arr):\n\"\"\"You are given an initial 2-value array (x). You will use this to calculate a score.\n\nIf both values in (x) are numbers, the score is the sum of the two. If only one is a number, the score is that number. If neither is a number, return 'Void!'.\n\n\nOnce you have your score, you must return an array of arrays. Each sub array will be the same as (x) and the number of sub arrays should be equal to the score.\n\nFor example:\n\nif (x) == ['a', 3]  you should return [['a', 3], ['a', 3], ['a', 3]].\n\"\"\"", "inputs": [[[9, 3]], [["a", 3]], [[6, "c"]], [["a", "b"]], [[1, 0]]], "outputs": [[[[9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3]]], [[["a", 3], ["a", 3], ["a", 3]]], [[[6, "c"], [6, "c"], [6, "c"], [6, "c"], [6, "c"], [6, "c"]]], ["Void!"], [[[1, 0]]]], "starter_code": "def explode(arr):", "canonical_solution": "def explode(arr):\n    return [arr] * sum((v for v in arr if isinstance(v, int))) or 'Void!'", "entry_point": "explode", "task_id": "TACO_lite/291", "input_output_examples": [[[["a", 3]], [[9, 3]]], [[["a", 3], ["a", 3], ["a", 3]], [[[9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3], [9, 3]]]]]}
{"requirement": "def vaccine_list(*args):\n\"\"\"### Vaccinations for children under 5\nYou have been put in charge of administrating vaccinations for children in your local area. Write a function that will generate a list of vaccines for each child presented for vaccination, based on the child's age and vaccination history, and the month of the year.\n#### The function takes three parameters: age, status and month\n- The parameter 'age' will be given in weeks up to 16 weeks, and thereafter in months. You can assume that children presented will be scheduled for vaccination (eg '16 weeks', '12 months' etc).\n- The parameter 'status' indicates if the child has missed a scheduled vaccination, and the argument will be a string that says 'up-to-date', or a scheduled stage (eg '8 weeks') that has been missed, in which case you need to add any missing shots to the list. Only one missed vaccination stage will be passed in per function call.\n- If the month is 'september', 'october' or 'november' add 'offer fluVaccine' to the list.\n- Make sure there are no duplicates in the returned list, and sort it alphabetically.\n\n#### Example input and output\n~~~~\ninput     ('12 weeks', 'up-to-date', 'december')\noutput    ['fiveInOne', 'rotavirus']\n\ninput     ('12 months', '16 weeks', 'june')\noutput     ['fiveInOne', 'hibMenC', 'measlesMumpsRubella', 'meningitisB', 'pneumococcal']\n\ninput     ('40 months', '12 months', 'october') \noutput    ['hibMenC', 'measlesMumpsRubella', 'meningitisB', 'offer fluVaccine', 'preSchoolBooster']\n~~~~\n\n#### To save you typing it up, here is the vaccinations list\n~~~~\nfiveInOne : ['8 weeks', '12 weeks', '16 weeks'],\n//Protects against: diphtheria, tetanus, whooping cough, polio and Hib (Haemophilus influenzae type b)\npneumococcal : ['8 weeks', '16 weeks'],\n//Protects against: some types of pneumococcal infection\nrotavirus : ['8 weeks', '12 weeks'],\n//Protects against: rotavirus infection, a common cause of childhood diarrhoea and sickness\nmeningitisB : ['8 weeks', '16 weeks', '12 months'],\n//Protects against: meningitis caused by meningococcal type B bacteria\nhibMenC : ['12 months'],\n//Protects against: Haemophilus influenzae type b (Hib), meningitis caused by meningococcal group C bacteria    \nmeaslesMumpsRubella : ['12 months', '40 months'],\n//Protects against: measles, mumps and rubella\nfluVaccine : ['september','october','november'],\n//Given at: annually in Sept/Oct\npreSchoolBooster : ['40 months']\n//Protects against: diphtheria, tetanus, whooping cough and polio\n~~~~\n\"\"\"", "inputs": [["12 weeks", "up-to-date", "december"], ["12 months", "16 weeks", "june"], ["40 months", "12 months", "october"]], "outputs": [[["fiveInOne", "rotavirus"]], [["fiveInOne", "hibMenC", "measlesMumpsRubella", "meningitisB", "pneumococcal"]], [["hibMenC", "measlesMumpsRubella", "meningitisB", "offer fluVaccine", "preSchoolBooster"]]], "starter_code": "def vaccine_list(*args):", "canonical_solution": "from itertools import chain\nTOME = {'8 weeks': ['fiveInOne', 'pneumococcal', 'rotavirus', 'meningitisB'], '12 weeks': ['fiveInOne', 'rotavirus'], '16 weeks': ['fiveInOne', 'pneumococcal', 'meningitisB'], '12 months': ['meningitisB', 'hibMenC', 'measlesMumpsRubella'], '40 months': ['measlesMumpsRubella', 'preSchoolBooster'], 'september': ['offer fluVaccine'], 'october': ['offer fluVaccine'], 'november': ['offer fluVaccine']}\n\ndef vaccine_list(*args):\n    return sorted(set(chain.from_iterable((TOME.get(s, ()) for s in args))))", "entry_point": "vaccine_list", "task_id": "TACO_lite/292", "input_output_examples": [[["12 weeks", "up-to-date", "december"], ["12 months", "16 weeks", "june"], ["40 months", "12 months", "october"]], [["fiveInOne", "rotavirus"], ["fiveInOne", "hibMenC", "measlesMumpsRubella", "meningitisB", "pneumococcal"], ["hibMenC", "measlesMumpsRubella", "meningitisB", "offer fluVaccine", "preSchoolBooster"]]]}
{"requirement": "def step(g, m, n):\n\"\"\"The prime numbers are not regularly spaced. For example from `2` to `3` the step is `1`.\nFrom `3` to `5` the step is `2`. From `7` to `11` it is `4`.\nBetween 2 and 50 we have the following pairs of 2-steps primes:\n\n`3, 5 - 5, 7, - 11, 13, - 17, 19, - 29, 31, - 41, 43`\n\nWe will write a function `step` with parameters:\n\n- `g` (integer >= 2) which indicates the step we are looking for,\n\n- `m` (integer >= 2) which gives the start of the search (m inclusive),\n\n- `n` (integer >= m) which gives the end of the search (n inclusive)\n\nIn the example above `step(2, 2, 50)` will return `[3, 5]` which is the first pair between 2 and 50 with a 2-steps.\n\nSo this function should return the **first** pair of the two prime numbers spaced with a step of `g`\nbetween the limits `m`, `n` if these g-steps prime numbers exist otherwise `nil` or `null` or `None` or `Nothing` or `[]` or `\"0, 0\"` or `{0, 0}` or `0 0`(depending on the language). \n\n\n#Examples:\n\n- \n\n\n`step(2, 5, 7) --> [5, 7] or (5, 7) or {5, 7} or \"5 7\"`\n\n`step(2, 5, 5) --> nil or ... or [] in Ocaml or {0, 0} in C++`\n\n`step(4, 130, 200) --> [163, 167] or (163, 167) or {163, 167}`\n\n- **See more examples for your language in \"RUN\"**\n\n\n- Remarks:\n\n([193, 197] is also such a 4-steps primes between 130 and 200 but it's not the first pair).\n\n`step(6, 100, 110) --> [101, 107]` though there is a prime between 101 and 107 which is 103; the pair 101-103 is a 2-step.\n\n\n#Notes: \nThe idea of \"step\" is close to that of \"gap\" but it is not exactly the same. For those interested they can have a look\nat . \n\nA \"gap\" is more restrictive: there must be no primes in between \n(101-107 is a \"step\" but not a \"gap\". Next kata will be about \"gaps\":-).\n\nFor Go: nil slice is expected when there are no `step` between m and n.\nExample: step(2,4900,4919) --> nil\n\"\"\"", "inputs": [[2, 100, 110], [4, 100, 110], [6, 100, 110], [8, 300, 400], [10, 300, 400], [4, 30000, 100000], [6, 30000, 100000], [8, 30000, 100000], [11, 30000, 100000], [16, 5, 20], [2, 10000000, 11000000], [52, 1300, 15000], [10, 4900, 5000], [30, 4900, 5000], [2, 4900, 5000], [2, 104000, 105000], [2, 4900, 4919], [7, 4900, 4919], [4, 30115, 100000], [4, 30140, 100000], [4, 30000, 30325]], "outputs": [[[101, 103]], [[103, 107]], [[101, 107]], [[359, 367]], [[307, 317]], [[30109, 30113]], [[30091, 30097]], [[30089, 30097]], [null], [null], [[10000139, 10000141]], [[1321, 1373]], [[4909, 4919]], [[4903, 4933]], [[4931, 4933]], [[104087, 104089]], [null], [null], [[30133, 30137]], [[30319, 30323]], [[30109, 30113]]], "starter_code": "def step(g, m, n):", "canonical_solution": "import math\n\ndef isPrime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n\ndef step(g, m, n):\n    if m >= n:\n        return []\n    else:\n        for i in range(m, n + 1 - g):\n            if isPrime(i) and isPrime(i + g):\n                return [i, i + g]", "entry_point": "step", "task_id": "TACO_lite/293", "input_output_examples": [[[2, 5, 7], [2, 5, 5], [4, 130, 200], [6, 100, 110], [2, 4900, 4919]], [[5, 7], [], [163, 167], [101, 107], []]]}
{"requirement": "def work_on_strings(a, b):\n\"\"\"Your task is to Combine two Strings. But consider the rule...\n\nBy the way you don't have to check errors or incorrect input values, everything is ok without bad tricks, only two input strings and as result one output string;-)...\n\nAnd here's the rule:  \nInput Strings `a` and `b`: For every character in string `a` swap the casing of every occurrence of the same character in string `b`. Then do the same casing swap with the inputs reversed. Return a single string consisting of the changed version of `a` followed by the changed version of `b`. A char of `a` is in `b` regardless if it's in upper or lower case - see the testcases too.  \nI think that's all;-)...\n\nSome easy examples:\n\n````\nInput: \"abc\" and \"cde\"      => Output: \"abCCde\" \nInput: \"ab\" and \"aba\"       => Output: \"aBABA\"\nInput: \"abab\" and \"bababa\"  => Output: \"ABABbababa\"\n````\n\nOnce again for the last example - description from `KenKamau`, see discourse;-):\n\na) swap the case of characters in string `b` for every occurrence of that character in string `a`  \nchar `'a'` occurs twice in string `a`, so we swap all `'a'` in string `b` twice. This means we start with `\"bababa\"` then `\"bAbAbA\"` => `\"bababa\"`  \nchar `'b'` occurs twice in string `a` and so string `b` moves as follows: start with `\"bababa\"` then `\"BaBaBa\"` => `\"bababa\"`\n\nb) then, swap the case of characters in string `a` for every occurrence in string `b`  \nchar `'a'` occurs `3` times in string `b`. So string `a` swaps cases as follows: start with `\"abab\"` then => `\"AbAb\"` => `\"abab\"` => `\"AbAb\"`  \nchar `'b'` occurs `3` times in string `b`. So string `a` swaps as follow: start with `\"AbAb\"` then => `\"ABAB\"` => `\"AbAb\"` => `\"ABAB\"`.\n\nc) merge new strings `a` and `b`  \nreturn `\"ABABbababa\"`\n\nThere are some static tests at the beginning and many random tests if you submit your solution.\n\nHope you have fun:-)!\n\"\"\"", "inputs": [["abc", "cde"], ["abcdeFgtrzw", "defgGgfhjkwqe"], ["abcdeFg", "defgG"], ["abab", "bababa"]], "outputs": [["abCCde"], ["abcDeFGtrzWDEFGgGFhjkWqE"], ["abcDEfgDEFGg"], ["ABABbababa"]], "starter_code": "def work_on_strings(a, b):", "canonical_solution": "def work_on_strings(a, b):\n    new_a = [letter if b.lower().count(letter.lower()) % 2 == 0 else letter.swapcase() for letter in a]\n    new_b = [letter if a.lower().count(letter.lower()) % 2 == 0 else letter.swapcase() for letter in b]\n    return ''.join(new_a) + ''.join(new_b)", "entry_point": "work_on_strings", "task_id": "TACO_lite/294", "input_output_examples": [[["abc", "cde"], ["ab", "aba"], ["abab", "bababa"]], [["abCCde"], ["aBABA"], ["ABABbababa"]]]}
{"requirement": "def duck_shoot(ammo, aim, ducks):\n\"\"\"You've arrived at a carnival and head straight for the duck shooting tent. Why wouldn't you?\n\nYou will be given a set amount of ammo, and an aim rating of between 1 and 0. No your aim is not always perfect - hey maybe someone fiddled with the sights on the gun...\n\nAnyway your task is to calculate how many successful shots you will be able to make given the available ammo and your aim score, then return a string representing the pool of ducks, with those ducks shot marked with 'X' and those that survived left unchanged. You will always shoot left to right.\n\nExample of start and end duck string with two successful shots:\n\nStart ---> |~~~~~22~2~~~~~|\n\n**Bang!! Bang!!**\n\nEnd  --->  |~~~~~XX~2~~~~~|\n\nAll inputs will be correct type and never empty.\n\"\"\"", "inputs": [[4, 0.64, "|~~2~~~22~2~~22~2~~~~2~~~|"], [9, 0.22, "|~~~~~~~2~2~~~|"], [6, 0.41, "|~~~~~22~2~~~~~|"], [8, 0.05, "|2~~~~|"], [8, 0.92, "|~~~~2~2~~~~~22~~2~~~~2~~~2|"]], "outputs": [["|~~X~~~X2~2~~22~2~~~~2~~~|"], ["|~~~~~~~X~2~~~|"], ["|~~~~~XX~2~~~~~|"], ["|2~~~~|"], ["|~~~~X~X~~~~~XX~~X~~~~X~~~X|"]], "starter_code": "def duck_shoot(ammo, aim, ducks):", "canonical_solution": "def duck_shoot(ammo, aim, ducks):\n    return ducks.replace('2', 'X', int(ammo * aim))", "entry_point": "duck_shoot", "task_id": "TACO_lite/295", "input_output_examples": [[[4, 0.64, "|~~2~~~22~2~~22~2~~~~2~~~|"], [2, 1.0, "|~~~~~22~2~~~~~|"]], [["|~~X~~~X2~2~~22~2~~~~2~~~|"], ["|~~~~~XX~2~~~~~|"]]]}
{"requirement": "def solve(arr):\n\"\"\"In this Kata, you will be given a list of strings and your task will be to find the strings that have the same characters and return the sum of their positions as follows: \n\n```Haskell\nsolve([\"abc\",\"abbc\", \"ab\", \"xyz\", \"xy\", \"zzyx\"]) = [1,8]\n-- we see that the elements at indices 0 and 1 have the same characters, as do those at indices 3 and 5.\n-- we therefore return [1,8] because [0+1,3+5] = [1,8]. This result is sorted. \n-- ignore those that don't have at least one matching partner, such as \"ab\" and \"xy\".\n\nAnother example...\nsolve([\"wkskkkkkk\",\"fokoo\",\"wkskk\",\"uizzzz\",\"fokooff\",\"wkskkkk\",\"uizzzzzzz\"]),[5,7,9]);\n--The element at index 0 is similar to those at indices 2 and 5; so 0 + 2 + 5 = 7.\n--The element at index 1 is similar to that at index 4; so 1 + 4 = 5. \n--The element at index 3 is similar to that at index 6; so 3 + 6 = 9.\n--The result must be sorted. We get [5,7,9].\n```\nMore examples in the test cases. \n\nGood luck!\n\"\"\"", "inputs": [[["abc", "abbc", "ab", "xyz", "xy", "zzyx"]], [["wkskkkkkk", "fokoo", "wkskk", "uizzzz", "fokooff", "wkskkkk", "uizzzzzzz"]], [["xhuhhh", "dghgg", "dghgghh", "mrerrrrrr", "xhuhhhhhh", "mrerrr"]], [["uczcccccc", "idffffiii", "pnjjjjjjj", "pnjjjj", "idffff", "uczcccc", "uczcc"]], [["rvjvvvv", "mihhhh", "mihhhhmmm", "rvjvv", "wsnssww", "wsnss"]], [["ayqqqq", "epqqqqqqq", "epqqqqqqqqqq", "rdsddss", "ayqqqqqqq", "epqqqq", "rdsdd"]], [["gkeeekkgggg", "gkeeekkgg", "bzfffffff", "uoboooooo", "gkeeekk", "uobooo", "bzffff", "gkeee"]]], "outputs": [[[1, 8]], [[5, 7, 9]], [[3, 4, 8]], [[5, 5, 11]], [[3, 3, 9]], [[4, 8, 9]], [[8, 8, 12]]], "starter_code": "def solve(arr):", "canonical_solution": "from collections import defaultdict\n\ndef solve(arr):\n    dct = defaultdict(list)\n    for i, fs in enumerate(map(frozenset, arr)):\n        dct[fs].append(i)\n    return sorted((sum(lst) for lst in dct.values() if len(lst) > 1))", "entry_point": "solve", "task_id": "TACO_lite/296", "input_output_examples": [[[["abc", "abbc", "ab", "xyz", "xy", "zzyx"]], [["wkskkkkkk", "fokoo", "wkskk", "uizzzz", "fokooff", "wkskkkk", "uizzzzzzz"]]], [[1, 8], [5, 7, 9]]]}
{"requirement": "def colour_association(arr):\n\"\"\"Colour plays an important role in our lifes. Most of us like this colour better then another. User experience specialists believe that certain colours have certain psychological meanings for us.\n\nYou are given a 2D array, composed of a colour and its 'common' association in each array element. The function you will write needs to return the colour as 'key' and association as its 'value'.\n\nFor example:\n```python\nvar array = [[\"white\", \"goodness\"], ...] returns [{'white': 'goodness'}, ...]\n```\n\"\"\"", "inputs": [[[["white", "goodness"], ["blue", "tranquility"]]], [[["red", "energy"], ["yellow", "creativity"], ["brown", "friendly"], ["green", "growth"]]], [[["pink", "compassion"], ["purple", "ambition"]]], [[["gray", "intelligence"], ["black", "classy"]]], [[["white", "goodness"], ["blue", "goodness"]]]], "outputs": [[[{"white": "goodness"}, {"blue": "tranquility"}]], [[{"red": "energy"}, {"yellow": "creativity"}, {"brown": "friendly"}, {"green": "growth"}]], [[{"pink": "compassion"}, {"purple": "ambition"}]], [[{"gray": "intelligence"}, {"black": "classy"}]], [[{"white": "goodness"}, {"blue": "goodness"}]]], "starter_code": "def colour_association(arr):", "canonical_solution": "def colour_association(arr):\n    return [{k: v} for k, v in arr]", "entry_point": "colour_association", "task_id": "TACO_lite/297", "input_output_examples": [[[["white", "goodness"], ["blue", "tranquility"]]], [[{"white": "goodness"}, {"blue": "tranquility"}]]]}
{"requirement": "def points(games):\n\"\"\"Our football team finished the championship.\nThe result of each match look like \"x:y\". Results of all matches are recorded in the collection.\n\nFor example:\n```[\"3:1\", \"2:2\", \"0:1\", ...]```\n\nWrite a function that takes such collection and counts the points of our team in the championship.\nRules for counting points for each match:\n- if x>y - 3 points\n- if x<y - 0 point\n- if x=y - 1 point\n\nNotes:\n- there are 10 matches in the championship\n- 0 <= x <= 4\n- 0 <= y <= 4\n\"\"\"", "inputs": [[["1:0", "2:0", "3:0", "4:0", "2:1", "3:1", "4:1", "3:2", "4:2", "4:3"]], [["1:1", "2:2", "3:3", "4:4", "2:2", "3:3", "4:4", "3:3", "4:4", "4:4"]], [["0:1", "0:2", "0:3", "0:4", "1:2", "1:3", "1:4", "2:3", "2:4", "3:4"]], [["1:0", "2:0", "3:0", "4:0", "2:1", "1:3", "1:4", "2:3", "2:4", "3:4"]], [["1:0", "2:0", "3:0", "4:4", "2:2", "3:3", "1:4", "2:3", "2:4", "3:4"]]], "outputs": [[30], [10], [0], [15], [12]], "starter_code": "def points(games):", "canonical_solution": "def points(games):\n    count = 0\n    for score in games:\n        res = score.split(':')\n        if res[0] > res[1]:\n            count += 3\n        elif res[0] == res[1]:\n            count += 1\n    return count", "entry_point": "points", "task_id": "TACO_lite/298", "input_output_examples": [[[["1:0", "2:0", "3:0", "4:0", "2:1", "3:1", "4:1", "3:2", "4:2", "4:3"]]], [[30]]]}
{"requirement": "def gap(g, m, n):\n\"\"\"The prime numbers are not regularly spaced. For example from `2` to `3` the gap is `1`.\nFrom `3` to `5` the gap is `2`. From `7` to `11` it is `4`.\nBetween 2 and 50 we have the following pairs of 2-gaps primes:\n`3-5, 5-7, 11-13, 17-19, 29-31, 41-43`\n\nA prime gap of length n is a run of n-1 consecutive composite numbers between two **successive** primes (see: http://mathworld.wolfram.com/PrimeGaps.html).\n\nWe will write a function gap with parameters:\n\n`g` (integer >= 2) which indicates the gap we are looking for\n\n`m` (integer > 2) which gives the start of the search (m inclusive)\n\n`n` (integer >= m) which gives the end of the search (n inclusive)\n\nIn the example above `gap(2, 3, 50)` will return `[3, 5] or (3, 5) or {3, 5}` which is the first pair between 3 and 50 with a 2-gap.\n\nSo this function should return the **first** pair of two prime numbers spaced with a gap of `g`\nbetween the limits `m`, `n` if these numbers exist otherwise `nil or null or None or Nothing` (depending on the language). \n\nIn C++ return in such a case `{0, 0}`. In F# return `[||]`. In Kotlin return `[]`\n\n#Examples:\n`gap(2, 5, 7) --> [5, 7] or (5, 7) or {5, 7}`\n\n`gap(2, 5, 5) --> nil. In C++ {0, 0}. In F# [||]. In Kotlin return `[]`\n\n`gap(4, 130, 200) --> [163, 167] or (163, 167) or {163, 167}`\n\n([193, 197] is also such a 4-gap primes between 130 and 200 but it's not the first pair)\n\n`gap(6,100,110) --> nil or {0, 0}` : between 100 and 110 we have `101, 103, 107, 109` but `101-107`is not a\n6-gap because there is `103`in between and `103-109`is not a 6-gap because there is `107`in between.\n\n# Note for Go\nFor Go: nil slice is expected when there are no gap between m and n.\nExample: gap(11,30000,100000) --> nil\n\n#Ref\nhttps://en.wikipedia.org/wiki/Prime_gap\n\"\"\"", "inputs": [[2, 3, 10], [3, 3, 10], [2, 100, 110], [4, 100, 110], [6, 100, 110], [8, 300, 400], [10, 300, 400], [4, 30000, 100000], [6, 30000, 100000], [8, 30000, 100000], [11, 30000, 100000], [2, 10000000, 11000000]], "outputs": [[[3, 5]], [null], [[101, 103]], [[103, 107]], [null], [[359, 367]], [[337, 347]], [[30109, 30113]], [[30091, 30097]], [[30161, 30169]], [null], [[10000139, 10000141]]], "starter_code": "def gap(g, m, n):", "canonical_solution": "def gap(g, m, n):\n    previous_prime = n\n    for i in range(m, n + 1):\n        if is_prime(i):\n            if i - previous_prime == g:\n                return [previous_prime, i]\n            previous_prime = i\n    return None\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5 + 1)):\n        if n % i == 0:\n            return False\n    return True", "entry_point": "gap", "task_id": "TACO_lite/299", "input_output_examples": [[[2, 5, 7], [2, 5, 5], [4, 130, 200], [6, 100, 110], [11, 30000, 100000]], [[5, 7], null, [163, 167], null, null]]}
{"requirement": "def alternatecase(s):\n\"\"\"Write function alternatecase which switch every letter in string from upper to lower and from lower to upper.\nE.g: Hello World -> hELLO wORLD\n\"\"\"", "inputs": [["ABC"], [""], [" "], ["Hello World"], ["cODEwARS"], ["i LIKE MAKING KATAS VERY MUCH"], ["HuMpTy DuMpTy SaT On A WaLl"], ["aBracaDabRa"], ["Hickory DICKORY dock"], ["Jack JUMPED over THE CaNdLeStIcK"]], "outputs": [["abc"], [""], [" "], ["hELLO wORLD"], ["CodeWars"], ["I like making katas very much"], ["hUmPtY dUmPtY sAt oN a wAlL"], ["AbRACAdABrA"], ["hICKORY dickory DOCK"], ["jACK jumped OVER the cAnDlEsTiCk"]], "starter_code": "def alternatecase(s):", "canonical_solution": "def alternatecase(s):\n    return s.swapcase()", "entry_point": "alternatecase", "task_id": "TACO_lite/300", "input_output_examples": [[["Hello World"], ["ABC"]], [["hELLO wORLD"], ["abc"]]]}
{"requirement": "def simplify(n):\n\"\"\"## Task\n\nGiven a positive integer as input, return the output as a string in the following format: \n\nEach element, corresponding to a digit of the number, multiplied by a power of 10 in such a way that with the sum of these elements you can obtain the original number.\n\n## Examples\n\nInput | Output\n---   | ---\n0     | \"\"\n56    | \"5\\*10+6\"\n60    | \"6\\*10\"\n999   | \"9\\*100+9\\*10+9\"\n10004 | \"1\\*10000+4\"\n\nNote: `input >= 0`\n\"\"\"", "inputs": [[8964631], [56], [999], [11], [991], [47], [234], [196587], [660], [600], [9090], [10104], [80008], [90000], [0]], "outputs": [["8*1000000+9*100000+6*10000+4*1000+6*100+3*10+1"], ["5*10+6"], ["9*100+9*10+9"], ["1*10+1"], ["9*100+9*10+1"], ["4*10+7"], ["2*100+3*10+4"], ["1*100000+9*10000+6*1000+5*100+8*10+7"], ["6*100+6*10"], ["6*100"], ["9*1000+9*10"], ["1*10000+1*100+4"], ["8*10000+8"], ["9*10000"], [""]], "starter_code": "def simplify(n):", "canonical_solution": "def simplify(n):\n    output = []\n    exp = 0\n    while n:\n        n, r = divmod(n, 10)\n        if r:\n            output.append(f'{r}*{10 ** exp}' if exp else f'{r}')\n        exp += 1\n    return '+'.join(output[::-1])", "entry_point": "simplify", "task_id": "TACO_lite/301", "input_output_examples": [[[0], [56], [60], [999], [10004], [8964631]], [[""], ["5*10+6"], ["6*10"], ["9*100+9*10+9"], ["1*10000+4"], ["8*1000000+9*100000+6*10000+4*1000+6*100+3*10+1"]]]}
{"requirement": "def friends(n):\n\"\"\"Andrzej was given a task:\nThere are n jars with pills. In every jar there is a different type of pill and the amount of pills in each jar is infinite. One type of pill makes a person glow about 30 minutes after taking and none of the other types has any effect.\nHis job is to determine, in which jar are the pills that make a person glow.\nBut there is one catch, he only has 35 minutes to do so.(so he can't take a pill, wait for the results and then take another one, because he wouldn't be able to see the results)\nFortunetely, he can take any number of friends he needs with him.\nOn completing the task Andrzej receives one million dollars. You know that Andrzej is very honest, so he will split the money equally with his friends.\nYour job is to determine how many friends does Andrzej need to complete the task.(He also wants to make the highest amount of money.)\nFor example for n = 2\nThe answer is 0 because he doesn't need any friends, he just needs to take a pill from the first jar and wait for the effects.\nFor another example for n = 4\nThe answer is 1 because having pills A B C D Andrzej can take pills A B and the friend can take pills B C\n\"\"\"", "inputs": [[0], [1], [2], [4], [3], [16]], "outputs": [[0], [0], [0], [1], [1], [3]], "starter_code": "def friends(n):", "canonical_solution": "def friends(n):\n    return len(str(bin(n - 1))) - 3 if n > 1 else 0", "entry_point": "friends", "task_id": "TACO_lite/302", "input_output_examples": [[[2], [4]], [[0], [1]]]}
{"requirement": "def product(s):\n\"\"\"# Description:\n\n Count the number of exclamation marks and question marks, return the product.\n\n# Examples\n\n```\nProduct(\"\") == 0\nproduct(\"!\") == 0\nProduct(\"!ab? ?\") == 2\nProduct(\"!!\") == 0\nProduct(\"!??\") == 2\nProduct(\"!???\") == 3\nProduct(\"!!!??\") == 6\nProduct(\"!!!???\") == 9\nProduct(\"!???!!\") == 9\nProduct(\"!????!!!?\") == 20\n```\n\"\"\"", "inputs": [[""], ["!"], ["!!??!!"]], "outputs": [[0], [0], [8]], "starter_code": "def product(s):", "canonical_solution": "def product(s):\n    return s.count('?') * s.count('!')", "entry_point": "product", "task_id": "TACO_lite/303", "input_output_examples": [[[""], ["!"], ["!ab? ?"], ["!!"], ["!??"], ["!???"], ["!!!??"], ["!!!???"], ["!???!!"], ["!????!!!?"]], [[0], [0], [2], [0], [2], [3], [6], [9], [9], [20]]]}
{"requirement": "def christmas_tree(h):\n\"\"\"Here your task is to Create a (nice) Christmas Tree.\nYou don't have to check errors or incorrect input values, every thing is ok without bad tricks, only one int parameter as input and a string to return;-)...\nSo what to do?First three easy examples:\n\n````\nInput: 3 and Output:\n  *\n ***\n*****\n ###\n \n Input 9 and Output:\n    *\n   ***\n  *****\n   ***\n  *****\n *******\n  *****\n *******\n*********\n   ###\n   \n Input 17 and Output:\n      *\n     ***\n    *****\n     ***\n    *****\n   *******\n    *****\n   *******\n  *********\n   *******\n  *********\n ***********\n  *********\n ***********\n*************\n     ###\n     \nReally nice trees, or what???! So merry Christmas;-)\n````\n\nYou can see, always a root, always steps of hight 3, tree never smaller than 3 (return \"\") and no difference for input values like 15 or 17 (because (int) 15/3 = (int) 17/3). That's valid for every input and every tree.\nI think there's nothing more to say - perhaps look at the testcases too;-)!\n\nThere are some static tests at the beginning and many random tests if you submit your solution. \nHope you have fun:-)!\n\"\"\"", "inputs": [[5], [10], [8], [2]], "outputs": [["  *\r\n ***\r\n*****\r\n ###"], ["    *\r\n   ***\r\n  *****\r\n   ***\r\n  *****\r\n *******\r\n  *****\r\n *******\r\n*********\r\n   ###"], ["   *\r\n  ***\r\n *****\r\n  ***\r\n *****\r\n*******\r\n  ###"], [""]], "starter_code": "def christmas_tree(h):", "canonical_solution": "def christmas_tree(h):\n    return '' if h < 3 else '\\r\\n'.join(['\\r\\n'.join([' ' * ((5 - y) // 2 + h // 3 - i - 1) + '*' * (y + i * 2) for y in [1, 3, 5]]) for i in range(h // 3)]) + '\\r\\n' + ' ' * (h // 3) + '###'", "entry_point": "christmas_tree", "task_id": "TACO_lite/304", "input_output_examples": [[[3], [9], [17]], [["  *\r\n ***\r\n*****\r\n ###"], ["    *\r\n   ***\r\n  *****\r\n   ***\r\n  *****\r\n *******\r\n  *****\r\n *******\r\n*********\r\n   ###"], ["      *\r\n     ***\r\n    *****\r\n     ***\r\n    *****\r\n   *******\r\n    *****\r\n   *******\r\n  *********\r\n   *******\r\n  *********\r\n ***********\r\n  *********\r\n ***********\r\n*************\r\n     ###"]]]}
{"requirement": "def createdict(keys, values):\n\"\"\"There are two lists of different length. The first one consists of keys, the second one consists of values. Write a function ```createdict(keys, values)``` that returns a dictionary created from keys and values. If there are not enough values, the rest of keys should have a ```None``` value. If there not enough keys, just ignore the rest of values.\n\nExample 1:\n```python\nkeys = ['a', 'b', 'c', 'd']\nvalues = [1, 2, 3]\ncreatedict(keys, values) # returns {'a': 1, 'b': 2, 'c': 3, 'd': None}\n```\n\nExample 2:\n```python\nkeys = ['a', 'b', 'c']\nvalues = [1, 2, 3, 4]\ncreatedict(keys, values) # returns {'a': 1, 'b': 2, 'c': 3}\n```\n\"\"\"", "inputs": [[[], []], [[], [1]], [["a"], [null]], [["a", "b", "c"], [1, 2, 3]], [["a", "b", "c", "d", "e"], [1, 2, null, null, null]], [["a", "b"], [1, 2, 3, 4]]], "outputs": [[{}], [{}], [{"a": null}], [{"a": 1, "b": 2, "c": 3}], [{"a": 1, "b": 2, "c": null, "d": null, "e": null}], [{"a": 1, "b": 2}]], "starter_code": "def createdict(keys, values):", "canonical_solution": "def createdict(keys, values):\n    while len(keys) > len(values):\n        values.append(None)\n    dictionary = dict(list(zip(keys, values)))\n    return dictionary", "entry_point": "createdict", "task_id": "TACO_lite/305", "input_output_examples": [[[["a", "b", "c", "d"], [1, 2, 3]], [["a", "b", "c"], [1, 2, 3, 4]]], [[{"a": 1, "b": 2, "c": 3, "d": null}], [{"a": 1, "b": 2, "c": 3}]]]}
{"requirement": "def kangaroo(k1, r1, k2, r2):\n\"\"\"Adapted from here, with less terrible instructions and a couple tweaks.\n\nTwo kangaroos are jumping on a line. They start out at different points on the line, and jump in the same direction at different speeds. Your task is to determine whether or not they'll ever land in the same spot at the same time (you'll just have to suspend disbelief for a moment and accept that two kangaroos, for the purpose of this kata, can occupy the same space at the same time :)\n\nYour function is given four arguments `(kanga1, rate1, kanga2, rate2)`; the first kangaroo's starting point, the first kangaroo's speed, the second kangaroo's starting point, and the second kangaroo's speed.\n\nReturn `true` if the above conditions are met, else `false`. Starting location and speed may vary wildly. The first kangaroo will _usually_ start behind the second one and travel faster, but not always. Starting locations may be negative, but speeds will always be > 0.\n\n**Example:**\n![kangaroo](https://i.imgur.com/hXRgSVg.jpg)\n\n**Other examples:**\n\nBrute force solutions are possible (and not discouraged), but you'll save yourself a lot of waiting time if you don't go that route :)\n\nGood luck!\n\"\"\"", "inputs": [[0, 3, 4, 2], [0, 9, 16, 4], [-1, 3, 0, 2], [-1571, 4240, 9023, 4234], [-7855, 4240, 9023, 4234], [43, 5, 49, 3], [9023, 4240, 1571, 4234], [129, 15, 147, 9], [129, 15, 147, 90], [0, 2, 100000, 1], [72893, 11125, 24432, 4202], [13613, 299, 65130, 73]], "outputs": [[true], [false], [true], [false], [true], [true], [false], [true], [false], [true], [false], [false]], "starter_code": "def kangaroo(k1, r1, k2, r2):", "canonical_solution": "def kangaroo(k1, r1, k2, r2):\n    if r1 == r2:\n        return k1 == k2\n    cross, r = divmod(k1 - k2, r2 - r1)\n    return cross >= 0 and (not r)", "entry_point": "kangaroo", "task_id": "TACO_lite/306", "input_output_examples": [[[0, 3, 4, 2]], [[true]]]}
{"requirement": "def middle_permutation(string):\n\"\"\"# Task\n You are given a string `s`. Every letter in `s` appears once. \n \n Consider all strings formed by rearranging the letters in `s`. After ordering these strings in dictionary order, return the middle term. (If the sequence has a even length `n`, define its middle term to be the `(n/2)`th term.)\n\n# Example\n\n For `s = \"abc\"`, the result should be `\"bac\"`.\n```\nThe permutations in order are:\n\"abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"\nSo, The middle term is \"bac\".```\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  unique letters (`2 <= length <= 26`)\n\n - `[output]` a string\n\n  middle permutation.\n\"\"\"", "inputs": [["abc"], ["abcd"], ["abcdx"], ["abcdxg"], ["abcdxgz"]], "outputs": [["bac"], ["bdca"], ["cbxda"], ["cxgdba"], ["dczxgba"]], "starter_code": "def middle_permutation(string):", "canonical_solution": "def middle_permutation(string):\n    s = sorted(string)\n    if len(s) % 2 == 0:\n        return s.pop(len(s) // 2 - 1) + ''.join(s[::-1])\n    else:\n        return s.pop(len(s) // 2) + middle_permutation(s)", "entry_point": "middle_permutation", "task_id": "TACO_lite/307", "input_output_examples": [[["abc"]], [["bac"]]]}
{"requirement": "def solve(a, b):\n\"\"\"The sum of divisors of `6` is `12` and the sum of divisors of `28` is `56`. You will notice that `12/6 = 2` and `56/28 = 2`. We shall say that `(6,28)` is a pair with a ratio of `2`.  Similarly, `(30,140)` is also a pair but with a ratio of `2.4`. These ratios are simply decimal representations of fractions.\n\n`(6,28)` and `(30,140)` are the only pairs in which `every member of a pair is 0 <= n < 200`. The sum of the lowest members of each pair is `6 + 30 = 36`. \n\nYou will be given a `range(a,b)`, and your task is to group the numbers into pairs with the same ratios. You will return the sum of the lowest member of each pair in the range. If there are no pairs. return `nil` in Ruby, `0` in python. Upper limit is `2000`.\n\n```Haskell\nsolve(0,200) = 36\n```\n\nGood luck!\n\nif you like this Kata, please try:\n\n[Simple division](https://www.codewars.com/kata/59ec2d112332430ce9000005)\n\n[Sub-array division](https://www.codewars.com/kata/59eb64cba954273cd4000099)\n\"\"\"", "inputs": [[1, 100], [1, 200], [1, 300], [200, 1000], [1, 1000], [100, 1000], [800, 2000]], "outputs": [[6], [36], [252], [1104], [2619], [2223], [2352]], "starter_code": "def solve(a, b):", "canonical_solution": "from collections import defaultdict\nfrom fractions import Fraction\nfrom bisect import bisect_left as bisect\nharmonic = [0] + [Fraction(sum({y for x in range(1, int(n ** 0.5) + 1) for y in [x, n // x] if not n % x}), n) for n in range(1, 7001)]\nharmonicity = defaultdict(set)\nfor n, h in enumerate(harmonic):\n    harmonicity[h].add(n)\nHARMO_GROUPS = {h: sorted(s) for h, s in harmonicity.items() if len(s) > 1}\nHARMO_RATIOS = {n: h for h, lst in HARMO_GROUPS.items() for n in lst}\nHARMO_NUM = sorted(HARMO_RATIOS.keys())\n\ndef solve(a, b):\n    seens, s = (set(), 0)\n    n1, n2 = (bisect(HARMO_NUM, a), bisect(HARMO_NUM, b))\n    for n in HARMO_NUM[n1:n2]:\n        if n not in seens:\n            grp = [x for x in HARMO_GROUPS[HARMO_RATIOS[n]] if a <= x < b]\n            if len(grp) > 1:\n                seens |= set(grp)\n                s += grp[0]\n    return s", "entry_point": "solve", "task_id": "TACO_lite/308", "input_output_examples": [[[0, 200]], [[36]]]}
{"requirement": "def narcissistic(value):\n\"\"\"A [Narcissistic Number](https://en.wikipedia.org/wiki/Narcissistic_number) is a positive number which is the sum of its own digits, each raised to the power of the number of digits in a given base. In this Kata, we will restrict ourselves to decimal (base 10).\n\nFor example, take 153 (3 digits):\n```\n    1^3 + 5^3 + 3^3 = 1 + 125 + 27 = 153\n```\nand 1634 (4 digits):\n```\n    1^4 + 6^4 + 3^4 + 4^4 = 1 + 1296 + 81 + 256 = 1634\n```\n\nThe Challenge:\n\nYour code must return **true or false** depending upon whether the given number is a Narcissistic number in base 10.\n\nError checking for text strings or other invalid inputs is not required, only valid positive non-zero integers will be passed into the function.\n\"\"\"", "inputs": [[1], [5], [7], [153], [370], [371], [1634]], "outputs": [[true], [true], [true], [true], [true], [true], [true]], "starter_code": "def narcissistic(value):", "canonical_solution": "def narcissistic(value):\n    return value == sum((int(x) ** len(str(value)) for x in str(value)))", "entry_point": "narcissistic", "task_id": "TACO_lite/309", "input_output_examples": [[[153], [1634]], [[true], [true]]]}
{"requirement": "def greet_jedi(first, last):\n\"\"\"You just took a contract with the Jedi council. They need you to write a function, `greet_jedi()`, which takes two arguments (a first name and a last name), works out the corresponding *Jedi name*, and returns a string greeting the Jedi.\n\nA person's *Jedi name* is the first three letters of their last name followed by the first two letters of their first name. For example:\n```python\n>>> greet_jedi('Beyonce', 'Knowles')\n'Greetings, master KnoBe'\n```\nNote the capitalization: the first letter of each name is capitalized. Your input may or may not be capitalized. Your function should handle it and return the Jedi name in the correct case no matter what case the input is in:\n```python\n>>> greet_jedi('grae', 'drake')\n'Greetings, master DraGr'\n```\nYou can trust that your input names will always be at least three characters long.\n\nIf you're stuck, check out the [python.org tutorial](https://docs.python.org/3/tutorial/introduction.html#strings) section on strings and search \"slice\".\n\"\"\"", "inputs": [["Beyonce", "Knowles"], ["Chris", "Angelico"], ["grae", "drake"]], "outputs": [["Greetings, master KnoBe"], ["Greetings, master AngCh"], ["Greetings, master DraGr"]], "starter_code": "def greet_jedi(first, last):", "canonical_solution": "def greet_jedi(first, last):\n    return 'Greetings, master {}{}'.format(last[:3].capitalize(), first[:2].capitalize())", "entry_point": "greet_jedi", "task_id": "TACO_lite/310", "input_output_examples": [[["Beyonce", "Knowles"], ["grae", "drake"]], [["Greetings, master KnoBe"], ["Greetings, master DraGr"]]]}
{"requirement": "def solve(arr):\n\"\"\"In this Kata, you will be given an array of unique elements, and your task is to rerrange the values so that the first max value is followed by the first minimum, followed by second max value then second min value, etc. \n\nFor example:\nThe first max is `15` and the first min is `7`. The second max is `12` and the second min is `10` and so on. \n\nMore examples in the test cases. \n\nGood luck!\n\"\"\"", "inputs": [[[15, 11, 10, 7, 12]], [[91, 75, 86, 14, 82]], [[84, 79, 76, 61, 78]], [[52, 77, 72, 44, 74, 76, 40]], [[1, 6, 9, 4, 3, 7, 8, 2]], [[78, 79, 52, 87, 16, 74, 31, 63, 80]]], "outputs": [[[15, 7, 12, 10, 11]], [[91, 14, 86, 75, 82]], [[84, 61, 79, 76, 78]], [[77, 40, 76, 44, 74, 52, 72]], [[9, 1, 8, 2, 7, 3, 6, 4]], [[87, 16, 80, 31, 79, 52, 78, 63, 74]]], "starter_code": "def solve(arr):", "canonical_solution": "def solve(arr):\n    arr = sorted(arr, reverse=True)\n    res = []\n    while len(arr):\n        res.append(arr.pop(0))\n        if len(arr):\n            res.append(arr.pop())\n    return res", "entry_point": "solve", "task_id": "TACO_lite/311", "input_output_examples": [[[[15, 11, 10, 7, 12]]], [[[15, 7, 12, 10, 11]]]]}
{"requirement": "def find_a(lst, n):\n\"\"\"In an infinite array with two rows, the numbers in the top row are denoted\n\n`. . . , A[−2], A[−1], A[0], A[1], A[2], . . .`\n\nand the numbers in the bottom row are denoted\n\n`. . . , B[−2], B[−1], B[0], B[1], B[2], . . .`\n\nFor each integer `k`, the entry `A[k]` is directly above\nthe entry `B[k]` in the array, as shown:\n\n\n...|A[-2]|A[-1]|A[0]|A[1]|A[2]|...\n...|B[-2]|B[-1]|B[0]|B[1]|B[2]|...\n\n\n\nFor each integer `k`, `A[k]` is the average of the entry to its left, the entry to its right,\nand the entry below it; similarly, each entry `B[k]` is the average of the entry to its\nleft, the entry to its right, and the entry above it.\n\n\nGiven `A[0], A[1], A[2] and A[3]`, determine the value of `A[n]`. (Where range of n is -1000 Inputs and Outputs in BigInt!** \n\nAdapted from 2018 Euclid Mathematics Contest.\nhttps://www.cemc.uwaterloo.ca/contests/past_contests/2018/2018EuclidContest.pdf\n\"\"\"", "inputs": [[[1, 2, 3, 4], 2], [[38, 200, -18, 45], 1], [[1, 0, 0, 1], 5], [[0, 2, 0, 3], -2], [[-20, 1, -3, 14], -5], [[1, 2, 3, 5], 100], [[0, 4, 6, 13], 100]], "outputs": [[3], [200], [20], [-126], [-44402], [60560100487003612846322657690093088848428068520476594299], [335254562473098582210532865941148591672699700764231400858]], "starter_code": "def find_a(lst, n):", "canonical_solution": "def find_a(lst, n):\n    if n < 0:\n        return find_a(lst[::-1], 3 - n)\n    if n < 4:\n        return lst[n]\n    a, b, c, d = lst\n    for _ in range(n - 3):\n        a, b, c, d = (b, c, d, 6 * d - 10 * c + 6 * b - a)\n    return d", "entry_point": "find_a", "task_id": "TACO_lite/312", "input_output_examples": [[[[1, 2, 3, 4], 2]], [[3]]]}
{"requirement": "def string_transformer(s):\n\"\"\"Given a string, return a new string that has transformed based on the input:\n\n* Change case of every character, ie. lower case to upper case, upper case to lower case.\n* Reverse the order of words from the input.\n\n**Note:** You will have to handle multiple spaces, and leading/trailing spaces.\n\nFor example:\n\n```\n\"Example Input\" ==> \"iNPUT eXAMPLE\"\n```\n\nYou may assume the input only contain English alphabet and spaces.\n\"\"\"", "inputs": [["Example string"], ["Example Input"], ["To be OR not to be That is the Question"], [""], ["You Know When  THAT  Hotline Bling"], [" A b C d E f G "]], "outputs": [["STRING eXAMPLE"], ["iNPUT eXAMPLE"], ["qUESTION THE IS tHAT BE TO NOT or BE tO"], [""], ["bLING hOTLINE  that  wHEN kNOW yOU"], [" g F e D c B a "]], "starter_code": "def string_transformer(s):", "canonical_solution": "def string_transformer(s):\n    return ' '.join(s.swapcase().split(' ')[::-1])", "entry_point": "string_transformer", "task_id": "TACO_lite/313", "input_output_examples": [[["Example Input"], ["Example string"]], [["iNPUT eXAMPLE"], ["STRING eXAMPLE"]]]}
{"requirement": "def get_planet_name(id):\n\"\"\"The function is not returning the correct values. Can you figure out why?\n\n```python\nget_planet_name(3) # should return 'Earth'\n```\n\"\"\"", "inputs": [[2], [5], [3], [4], [8], [1]], "outputs": [["Venus"], ["Jupiter"], ["Earth"], ["Mars"], ["Neptune"], ["Mercury"]], "starter_code": "def get_planet_name(id):", "canonical_solution": "def get_planet_name(id):\n    return {1: 'Mercury', 2: 'Venus', 3: 'Earth', 4: 'Mars', 5: 'Jupiter', 6: 'Saturn', 7: 'Uranus', 8: 'Neptune'}.get(id, None)", "entry_point": "get_planet_name", "task_id": "TACO_lite/314", "input_output_examples": [[[3], [2]], [["Earth"], ["Venus"]]]}
{"requirement": "def press_button(n):\n\"\"\"# Task\n A lock has `n` buttons in it, numbered from `1 to n`. To open the lock, you have to press all buttons in some order, i.e. a key to the lock is a permutation of the first `n` integers. If you push the right button in the right order, it will be pressed into the lock. Otherwise all pressed buttons will pop out. When all buttons are pressed into the lock, it opens.\n \n Your task is to calculate the number of times you've got to push buttons in order to open the lock in the `worst-case scenario`.\n\n# Example\n\n For `n = 3`, the result should be `7`.\n ```\n Let's assume the right order is 3-2-1.\n In the worst-case scenario, we press the buttons:\n Press 1, wrong, button 1 pop out\n Press 2, wrong, button 2 pop out\n Press 3, right, button 3 pressed in\n Press 1, wrong, button 1,3 pop out\n Press 3, right, button 3 pressed in\n Press 2, right, button 2 pressed in\n Press 1, right, button 1 pressed in\n We pressed button total 7 times.``` \n \n For `n = 4`, the result should be `14`.\n ```\n Let's assume the right order is 4-3-2-1.\n In the worst-case scenario, we press the buttons:\n Press 1, wrong, button 1 pop out\n Press 2, wrong, button 2 pop out\n Press 3, wrong, button 3 pop out\n Press 4, right, button 4 pressed in\n Press 1, wrong, button 1,4 pop out\n Press 4, right, button 4 pressed in\n Press 2, wrong, button 2,4 pop out\n Press 4, right, button 4 pressed in\n Press 3, right, button 3 pressed in\n Press 1, wrong, button 1,3,4 pop out\n Press 4, right, button 4 pressed in\n Press 3, right, button 3 pressed in\n Press 2, right, button 2 pressed in\n Press 1, right, button 1 pressed in\n We pressed button total 14 times.``` \n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of buttons in the lock.\n  \n  `0 < n ≤ 2000`\n\n\n - `[output]` an integer\n\n The number of times you've got to push buttons in the `worst-case scenario`.\n\"\"\"", "inputs": [[1], [3], [4], [10], [2000]], "outputs": [[1], [7], [14], [175], [1333335000]], "starter_code": "def press_button(n):", "canonical_solution": "def press_button(n):\n    return (n * n + 5) * n / 6", "entry_point": "press_button", "task_id": "TACO_lite/315", "input_output_examples": [[[3], [4]], [[7], [14]]]}
{"requirement": "def solve(arr):\n\"\"\"In this Kata, you will be given an array of integers and your task is to return the number of arithmetic progressions of size `3` that are possible from that list. In each progression, the differences between the elements must be the same.\n\n```\n[1, 2, 3, 5, 7, 9] ==> 5\n// [1, 2, 3], [1, 3, 5], [1, 5, 9], [3, 5, 7], and [5, 7, 9]\n```\n\nAll inputs will be sorted. More examples in test cases. \n\nGood luck!\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 5, 7, 9]], [[0, 5, 8, 9, 11, 13, 14, 16, 17, 19]], [[0, 1, 2, 3, 5, 6, 7, 11, 13, 15, 17, 19]], [[0, 1, 4, 5, 7, 9, 10, 13, 15, 16, 18, 19]], [[0, 1, 2, 3, 5, 8, 11, 13, 14, 16, 18, 19]]], "outputs": [[4], [5], [10], [17], [15], [13]], "starter_code": "def solve(arr):", "canonical_solution": "def solve(arr):\n    return sum((y - x == z - y for i, x in enumerate(arr[:-2]) for j, y in enumerate(arr[i + 1:-1]) for _, z in enumerate(arr[j + 1:])))", "entry_point": "solve", "task_id": "TACO_lite/316", "input_output_examples": [[[[1, 2, 3, 5, 7, 9]]], [[5]]]}
{"requirement": "def find_the_missing_tree(trees):\n\"\"\"# Task\nAfter a long night (work, play, study) you find yourself sleeping on a bench in a park. As you wake up and try to figure out what happened you start counting trees.\n\nYou notice there are different tree sizes but there's always one size which is unbalanced. For example there are 2 size 2, 2 size 1 and 1 size 3. (then the size 3 is unbalanced)\n\nGiven an array representing different tree sizes. Which one is the unbalanced size.\n\nNotes:\n```\nThere can be any number of sizes but one is always unbalanced\nThe unbalanced size is always one less than the other sizes\nThe array is not ordered (nor the trees)```\n\n# Examples\n\nFor `trees = [1,1,2,2,3]`, the result should be `3`.\n\nFor `trees = [2,2,2,56,56,56,8,8]`, the result should be `8`.\n\nFor `trees = [34,76,12,99,64,99,76,12,34]`, the result should be `64`.\n\n# Input/Output\n\n\n- `[input]` integer array `trees`\n\nArray representing different tree sizes\n\n\n- `[output]` an integer\n\nThe size of the missing tree.\n\"\"\"", "inputs": [[[1, 2, 2, 3, 3]], [[11, 2, 3, 3, 3, 11, 2, 2]], [[234, 76, 45, 99, 99, 99, 99, 45, 234, 234, 45, 45, 76, 234, 76]], [[1, 1, 1, 1, 1, 1, 1, 22, 22, 22, 22, 22, 22, 22, 3, 3, 3, 3, 3, 3]], [[10, 205, 3000, 3000, 10]], [[50, 408, 50, 50, 50, 50, 408, 408, 408, 680, 408, 680, 50, 408, 680, 50, 50, 680, 408, 680, 50, 680, 680, 408, 408, 50, 50, 408, 50, 50, 50, 50, 680, 408, 680, 50, 680, 408, 680, 408, 680, 50, 50, 50, 680, 50, 680, 408, 680, 680, 680, 408, 408, 408, 408, 680, 680, 50, 408, 408, 408, 50, 408, 408, 50, 680, 680, 680, 50, 680, 680, 680, 50, 680, 408, 50, 50, 408, 50, 408, 680, 408, 50, 680, 680, 408, 408, 680, 408]]], "outputs": [[1], [11], [76], [3], [205], [50]], "starter_code": "def find_the_missing_tree(trees):", "canonical_solution": "def find_the_missing_tree(trees):\n    return sorted(trees, key=trees.count)[0]", "entry_point": "find_the_missing_tree", "task_id": "TACO_lite/317", "input_output_examples": [[[[1, 1, 2, 2, 3]], [[2, 2, 2, 56, 56, 56, 8, 8]], [[34, 76, 12, 99, 64, 99, 76, 12, 34]]], [[3], [8], [64]]]}
{"requirement": "def luck_check(string):\n\"\"\"In some countries of former Soviet Union there was a belief about lucky tickets. A transport ticket of any sort was believed to posess luck if sum of digits on the left half of its number was equal to the sum of digits on the right half. Here are examples of such numbers:\n```\n003111    #             3 = 1 + 1 + 1\n813372    #     8 + 1 + 3 = 3 + 7 + 2\n17935     #         1 + 7 = 3 + 5  // if the length is odd, you should ignore the middle number when adding the halves.\n56328116  # 5 + 6 + 3 + 2 = 8 + 1 + 1 + 6\n```\nSuch tickets were either eaten after being used or collected for bragging rights.\n\nYour task is to write a funtion ```luck_check(str)```, which returns ```true/True``` if argument is string decimal representation of a lucky ticket number, or ```false/False``` for all other numbers. It should throw errors for empty strings or strings which don't represent a decimal number.\n\"\"\"", "inputs": [["5555"], ["003111"], ["543970707"], ["439924"], ["943294329932"], ["000000"], ["454319"], ["1233499943"], ["935336"]], "outputs": [[true], [true], [false], [false], [false], [true], [true], [false], [false]], "starter_code": "def luck_check(string):", "canonical_solution": "def luck_check(string):\n    e0, b1 = (len(string) // 2, (len(string) + 1) // 2)\n    return sum(map(int, string[:e0])) == sum(map(int, string[b1:]))", "entry_point": "luck_check", "task_id": "TACO_lite/318", "input_output_examples": [[["003111"], ["813372"], ["17935"], ["56328116"]], [[true], [true], [true], [true]]]}
{"requirement": "def revamp(s):\n\"\"\"# Task\n Consider a string of lowercase Latin letters and space characters (\" \"). \n \n First, rearrange the letters in each word `alphabetically`. \n \n And then rearrange the words in ascending order of the sum of their characters' `ASCII` values. \n \n If two or more words have the same `ASCII` value, rearrange them by their length in ascending order; If their length still equals to each other, rearrange them `alphabetically`.\n \n Finally, return the result.\n\n# Example\n\n For `s = \"batman is bruce wayne\"`, the result should be `\"is bceru aenwy aamntb\"`.\n``` \nAfter rearranging the letters the string turns into\n\"aamntb is bceru aenwy\".\nThe ASCII values of each word are: [627, 220, 529, 548].\nAfter sorting the words the following string is obtained:\n\"is bceru aenwy aamntb\" (with ASCII values of [220, 529, 548, 627]).```\n\n For `s = \"peter parker is spiderman\"`, the result should be `\"is eeprt aekprr adeimnprs\"`\n\n `(ASCII values: [220, 554, 645, 963])`\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n  A string of lowercase words. Each word is separated by exactly one space character.\n\n\n - `[output]` a string\n\"\"\"", "inputs": [["batman is bruce wayne"], ["peter parker is spiderman"], ["codewars is great"], ["airplanes in the night sky"]], "outputs": [["is bceru aenwy aabmnt"], ["is eeprt aekprr adeimnprs"], ["is aegrt acdeorsw"], ["in eht ksy ghint aaeilnprs"]], "starter_code": "def revamp(s):", "canonical_solution": "def revamp(s):\n    words = [''.join(sorted(word)) for word in s.split()]\n    words.sort(key=lambda word: (sum(map(ord, word)), len(word), word))\n    return ' '.join(words)", "entry_point": "revamp", "task_id": "TACO_lite/319", "input_output_examples": [[["batman is bruce wayne"], ["peter parker is spiderman"]], [["is bceru aenwy aamntb"], ["is eeprt aekprr adeimnprs"]]]}
{"requirement": "def decrypt(encrypted_text):\n\"\"\"For encrypting strings this region of chars is given (in this order!):\n\n* all letters (ascending, first all UpperCase, then all LowerCase)\n* all digits (ascending)\n* the following chars: `.,:;-?! '()$%&\"` \n\nThese are 77 chars! (This region is zero-based.)\n\nWrite two methods: \n```python\ndef encrypt(text)\ndef decrypt(encrypted_text)\n```\n\nPrechecks:\n1. If the input-string has chars, that are not in the region, throw an Exception(C#, Python) or Error(JavaScript).\n2. If the input-string is null or empty return exactly this value!\n\nFor building the encrypted string:\n1. For every second char do a switch of the case.\n2. For every char take the index from the region. Take the difference from the region-index of the char before (from the input text! Not from the fresh encrypted char before!). (Char2 = Char1-Char2)\nReplace the original char by the char of the difference-value from the region. In this step the first letter of the text is unchanged.\n3. Replace the first char by the mirror in the given region. (`'A' -> '\"'`, `'B' -> '&'`, ...)\n\nSimple example:\n\n* Input:  `\"Business\"`\n* Step 1: `\"BUsInEsS\"`\n* Step 2: `\"B61kujla\"`\n  * `B -> U`\n    * `B (1) - U (20) = -19`\n    * `-19 + 77 = 58`\n    * `Region[58] = \"6\"`\n  * `U -> s`\n    * `U (20) - s (44) = -24`\n    * `-24 + 77 = 53`\n    * `Region[53] = \"1\"`\n* Step 3: `\"&61kujla\"`\n\nThis kata is part of the Simple Encryption Series:\nSimple Encryption #1 - Alternating Split\nSimple Encryption #2 - Index-Difference\nSimple Encryption #3 - Turn The Bits Around\nSimple Encryption #4 - Qwerty\n\nHave fun coding it and please don't forget to vote and rank this kata! :-)\n\"\"\"", "inputs": [["$-Wy,dM79H'i'o$n0C&I.ZTcMJw5vPlZc Hn!krhlaa:khV mkL;gvtP-S7Rt1Vp2RV:wV9VuhO Iz3dqb.U0w"], ["5MyQa9p0riYplZc"], ["5MyQa79H'ijQaw!Ns6jVtpmnlZ.V6p"], [""], [null]], "outputs": [["Do the kata \"Kobayashi-Maru-Test!\" Endless fun and excitement when finding a solution!"], ["This is a test!"], ["This kata is very interesting!"], [""], [null]], "starter_code": "def decrypt(encrypted_text):", "canonical_solution": "region = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,:;-?! '()$%&\" + '\"'\n\ndef decrypt(encrypted_text):\n    if not encrypted_text:\n        return encrypted_text\n    letters = list(encrypted_text)\n    letters[0] = region[-(region.index(letters[0]) + 1)]\n    for i in range(1, len(letters)):\n        letters[i] = region[region.index(letters[i - 1]) - region.index(letters[i])]\n    for i in range(1, len(letters), 2):\n        letters[i] = letters[i].swapcase()\n    return ''.join(letters)\n\ndef encrypt(text):\n    if not text:\n        return text\n    letters = list(text)\n    for i in range(1, len(letters), 2):\n        letters[i] = text[i].swapcase()\n    swapped = letters[:]\n    for i in range(1, len(letters)):\n        letters[i] = region[region.index(swapped[i - 1]) - region.index(swapped[i])]\n    letters[0] = region[-(region.index(swapped[0]) + 1)]\n    return ''.join(letters)", "entry_point": "decrypt", "task_id": "TACO_lite/320", "input_output_examples": [[["&61kujla"]], [["Business"]]]}
{"requirement": "def morse_converter(s):\n\"\"\"The Earth has been invaded by aliens. They demand our beer and threaten to destroy the Earth if we do not supply the exact number of beers demanded.\n\nUnfortunately, the aliens only speak Morse code. Write a program to convert morse code into numbers using the following convention:\n\n1 .----\n2 ..---\n3 ...--\n4 ....-\n5 .....\n6 -....\n7 --...\n8 ---..\n9 ----.\n0 -----\n\"\"\"", "inputs": [[".----.----.----.----.----"], ["..----------...-....----------"], ["---------------"], ["..---.--------....--"], [".----..---...--....-.....-....--...---..----.-----"]], "outputs": [[11111], [207600], [0], [2193], [1234567890]], "starter_code": "def morse_converter(s):", "canonical_solution": "MORSE_TO_NUM = {'.----': '1', '..---': '2', '...--': '3', '....-': '4', '.....': '5', '-....': '6', '--...': '7', '---..': '8', '----.': '9', '-----': '0'}\n\ndef morse_converter(s):\n    return int(''.join((MORSE_TO_NUM[s[i:i + 5]] for i in range(0, len(s), 5))))", "entry_point": "morse_converter", "task_id": "TACO_lite/321", "input_output_examples": [[[".----.----.----.----.----"]], [[11111]]]}
{"requirement": "def tiaosheng(a):\n\"\"\"# Task\nSome children are playing rope skipping game. Children skip the rope at roughly the same speed: `once per second`. If the child fails during the jump, he needs to tidy up the rope and continue. This will take `3 seconds`.\n\nYou are given an array `failedCount`, where each element is the jump count at the failed. ie. `[12,23,45]` means the child failed 3 times in the game process. The 1st mistake occurred when he jumped 12 times; The 2nd mistake occurred when he jumped 23 times; The 3rd mistake occurred when he jumped 45 times.\n\nYour task is to calculate how many times the child jumped in 60 seconds.\n\nNote: Each child persisted at least 60 jumps, which meant it could have been over 60 seconds, but the child continued to skip rope.\n\n# Input/Output\n\n`[input]` integer array `failedCount`\n\n`0 ≤ failedCount.length ≤ 60`\n\n`1 ≤ failedCount[i] ≤ 60`\n\n`[output]` an integer\n\nhow many times the child jumped in 60 seconds.\n\n\n# Example\n\nFor `failedCount = []`, the output should be `60`.\n\nThere is no mistake in the game process. So the child jumped 60 times in 60 seconds.\n\nFor `failedCount = [12, 23, 45]`, the output should be `51`.\n```\nThe 1st mistake occurred when he jumped 12 times. --> 12 seconds past.\nTidy up the rope and continue.                    --> 15 seconds past.\nThe 2nd mistake occurred when he jumped 23 times. --> 26 seconds past.\nTidy up the rope and continue.                    --> 29 seconds past.\nThe 3rd mistake occurred when he jumped 45 times. --> 51 seconds past.\nTidy up the rope and continue.                    --> 54 seconds past.\nWhen he jumped 51 times                           --> 60 seconds past.\n```\n\"\"\"", "inputs": [[[]], [[12, 23, 45]], [[17]], [[10, 20, 30, 40]], [[10, 20, 30, 40, 58]], [[10, 20, 30, 40, 47, 60]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], "outputs": [[60], [51], [57], [48], [48], [47], [30]], "starter_code": "def tiaosheng(a):", "canonical_solution": "def tiaosheng(a):\n    j, t = (0, 0)\n    for j in a:\n        t += 3\n        if j + t > 60:\n            return min(j, 60 - t + 3)\n    return 60 - t", "entry_point": "tiaosheng", "task_id": "TACO_lite/322", "input_output_examples": [[[], [12, 23, 45]], [[60], [51]]]}
{"requirement": "def is_lucky(ticket):\n\"\"\"In Russia regular bus tickets usually consist of 6 digits. The ticket is called lucky when the sum of the first three digits equals to the sum of the last three digits. Write a function to find out whether the ticket is lucky or not. Return true if so, otherwise return false. Consider that input is always a string. Watch examples below.\n\"\"\"", "inputs": [["123321"], ["12341234"], ["100001"], ["100200"], ["912435"], ["12a12a"], ["999999"], ["1111"], ["000000"], [""]], "outputs": [[true], [false], [true], [false], [true], [false], [true], [false], [true], [false]], "starter_code": "def is_lucky(ticket):", "canonical_solution": "def is_lucky(ticket):\n    if len(ticket) == 6 and ticket.isdigit():\n        t = list(map(int, ticket))\n        return sum(t[:3]) == sum(t[3:])\n    return False", "entry_point": "is_lucky", "task_id": "TACO_lite/323", "input_output_examples": [[["123321"]], [[true]]]}
{"requirement": "def poohbear(s):\n\"\"\"Create a function that interprets code in the esoteric language **Poohbear**\n\n## The Language\n\nPoohbear is a stack-based language largely inspired by Brainfuck. It has a maximum integer value of 255, and 30,000 cells. The original intention of Poohbear was to be able to send messages that would, to most, be completely indecipherable: \nPoohbear Wiki\n\n* For the purposes of this kata, you will make a version of Poohbear that has **infinite** memory cells in **both directions** (so you do not need to limit cells to 30,000)\n* Cells have a default value of 0\n* Each cell can hold one byte of data.  Once a cell's value goes above 255, it wraps around to 0.  If a cell's value goes below 0, it wraps to 255.\n* If the result of an operation isn't an int, round the result down to the nearest one.\n* Your interpreter should ignore any non-command characters in the code.\n* If you come to a `W` in the code and the current cell is equal to 0, jump to the corresponding `E`.\n* If you come to an `E` in the code and the current cell is **not** 0, jump back to the corresponding `W`.\n\nHere are the Poohbear commands: \n\n| Command | Definition\n|---| -------------------------\n| + | Add 1 to the current cell\n| - | Subtract 1 from the current cell\n| > | Move the cell pointer 1 space to the right\n| < | Move the cell pointer 1 space to the left\n| c | \"Copy\" the current cell\n| p | Paste the \"copied\" cell into the current cell\n| W | While loop - While the current cell is not equal to 0\n| E | Closing character for loops\n| P | Output the current cell's value as ascii\n| N | Output the current cell's value as an integer\n| T | Multiply the current cell by 2\n| Q | Square the current cell\n| U | Square root the current cell's value\n| L | Add 2 to the current cell\n| I | Subtract 2 from the current cell\n| V | Divide the current cell by 2\n| A | Add the copied value to the current cell's value\n| B | Subtract the copied value from the current cell's value\n| Y | Multiply the current cell's value by the copied value\n| D | Divide the current cell's value by the copied value.\n\"\"\"", "inputs": [["LQTcQAP>pQBBTAI-PA-PPL+P<BVPAL+T+P>PL+PBLPBP<DLLLT+P"], ["LLQT+P >LLLc+QIT-P AAAP P"], ["LLQT>+WN+<P>E"], ["cW>LQQT+P<pE"], ["+W>LQQT+P<-E"], ["+LTQII>+WN<P>+E"], ["+LTQIITTIWP-E"], ["LILcABNBpYDYYYYLLL+P-+W-EQNW-ELLQUTTTT+P"], ["++W-NE"], ["W>UQLIPNPPP45vSDFJLLIPNPqwVMT<E"], ["LLILQQLcYYD"], ["NNN++-NTTTTT+PN"], ["LQQT+P+P+P+P+P+P"], ["+-<>LcIpIL+TQYDABANPAPIIIITUNNQV+++P"], ["+c BANANA BANANA BANANA BANANA BANANA"], ["L       sfdg           ghjk                         kl                                LQTT++++P                        tt                                W                  w                    -                                      E           wewewe                N"]], "outputs": [["Hello World!"], ["!]oo"], ["1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 "], [""], ["!"], ["1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 "], ["~}|{zyxwvutsrqponmlkjihgfedcba`_^]\\[ZYXWVUTSRQPONMLKJIHGFEDCBA@?>=<;:9876543210/.-,+*)('&%$#\"! \u001f\u001e\u001d\u001c\u001b\u001a\u0019\u0018\u0017\u0016\u0015\u0014\u0013\u0012\u0011\u0010\u000f\u000e\r\f\u000b\n\t\b\u0007\u0006\u0005\u0004\u0003\u0002\u0001"], ["2'0A"], ["10"], [""], [""], ["0001!33"], ["!\"#$%&"], ["38&(88#"], ["12345678910"], ["D0"]], "starter_code": "def poohbear(s):", "canonical_solution": "from operator import add, mul, floordiv as fdiv, pow\n\ndef poohbear(s):\n\n    def updateMem(func, v):\n        mem[p] = func(mem.get(p, 0), v) % 256\n    braces, stack = ({}, [])\n    for i, c in enumerate(s):\n        if c == 'W':\n            stack.append(i)\n        if c == 'E':\n            braces[i] = stack[-1]\n            braces[stack.pop()] = i\n    mem, copy, output = ({}, 0, [])\n    p, i = (0, 0)\n    while i < len(s):\n        cmd = s[i]\n        if cmd == '>':\n            p += 1\n        elif cmd == '<':\n            p -= 1\n        elif cmd == 'p':\n            mem[p] = copy\n        elif cmd == 'c':\n            copy = mem.get(p, 0)\n        elif cmd == 'W':\n            i = i if bool(mem.get(p, 0)) else braces[i]\n        elif cmd == 'E':\n            i = braces[i] if mem.get(p, 0) else i\n        elif cmd == 'P':\n            output.append(chr(mem.get(p, 0)))\n        elif cmd == 'N':\n            output.append(str(mem.get(p, 0)))\n        elif cmd == '+':\n            updateMem(add, 1)\n        elif cmd == '-':\n            updateMem(add, -1)\n        elif cmd == 'L':\n            updateMem(add, 2)\n        elif cmd == 'I':\n            updateMem(add, -2)\n        elif cmd == 'T':\n            updateMem(mul, 2)\n        elif cmd == 'V':\n            updateMem(fdiv, 2)\n        elif cmd == 'Q':\n            updateMem(pow, 2)\n        elif cmd == 'U':\n            updateMem(lambda a, b: int(pow(a, b)), 0.5)\n        elif cmd == 'A':\n            updateMem(add, copy)\n        elif cmd == 'B':\n            updateMem(add, -copy)\n        elif cmd == 'Y':\n            updateMem(mul, copy)\n        elif cmd == 'D':\n            updateMem(fdiv, copy)\n        i += 1\n    return ''.join(output)", "entry_point": "poohbear", "task_id": "TACO_lite/324", "input_output_examples": [[["LQTcQAP>pQBBTAI-PA-PPL+P<BVPAL+T+P>PL+PBLPBP<DLLLT+P"]], [["Hello World!"]]]}
{"requirement": "def check_alive(health: int):\n\"\"\"## If/else syntax debug\n\nWhile making a game, your partner, Greg, decided to create a function to check if the user is still alive called `checkAlive`/`CheckAlive`/`check_alive`. Unfortunately, Greg made some errors while creating the function.\n\n`checkAlive`/`CheckAlive`/`check_alive` should return true if the player's health is greater than 0 or false if it is 0 or below. \n\n```if-not:csharp\nThe function receives one parameter `health` which will always be a whole number between -10 and 10.\n```\n\"\"\"", "inputs": [[5], [0], [-5]], "outputs": [[true], [false], [false]], "starter_code": "def check_alive(health: int):", "canonical_solution": "def check_alive(health: int):\n    return health > 0", "entry_point": "check_alive", "task_id": "TACO_lite/325", "input_output_examples": [[[5], [0], [-1]], [[true], [false], [false]]]}
{"requirement": "def reverse(lst):\n\"\"\"If this challenge is too easy for you, check out: \nhttps://www.codewars.com/kata/5cc89c182777b00001b3e6a2\n\n___\n\nUpside-Down Pyramid Addition is the process of taking a list of numbers and consecutively adding them together until you reach one number.\n\nWhen given the numbers `2, 1, 1` the following process occurs:\n```\n 2   1   1\n   3   2 \n     5\n```\n\nThis ends in the number `5`.\n\n___\n\n### YOUR TASK\n\nGiven the right side of an Upside-Down Pyramid (Ascending), write a function that will return the original list.\n\n### EXAMPLE\n\n```python\nreverse([5, 2, 1]) == [2, 1, 1]\n```\n\nNOTE: The Upside-Down Pyramid will never be empty and will always consist of positive integers ONLY.\n\"\"\"", "inputs": [[[5, 2, 1]], [[84, 42, 21, 10, 2]], [[83, 47, 28, 16, 7]], [[101, 57, 29, 13, 6]], [[66, 39, 25, 15, 7]], [[45, 25, 14, 8, 6]], [[60, 32, 16, 7, 4]], [[84, 44, 21, 8, 2]], [[51, 26, 13, 6, 2]], [[78, 42, 22, 11, 6]]], "outputs": [[[2, 1, 1]], [[4, 7, 3, 8, 2]], [[6, 4, 3, 9, 7]], [[1, 3, 9, 7, 6]], [[7, 2, 2, 8, 7]], [[3, 1, 4, 2, 6]], [[4, 1, 6, 3, 4]], [[4, 3, 7, 6, 2]], [[3, 3, 3, 4, 2]], [[4, 3, 6, 5, 6]]], "starter_code": "def reverse(lst):", "canonical_solution": "def reverse(lst):\n    ret = []\n    while lst:\n        ret.append(lst[-1])\n        lst = [a - b for a, b in zip(lst, lst[1:])]\n    return ret[::-1]", "entry_point": "reverse", "task_id": "TACO_lite/326", "input_output_examples": [[[[5, 2, 1]]], [[2, 1, 1]]]}
{"requirement": "def validate_pin(pin):\n\"\"\"ATM machines allow 4 or 6 digit PIN codes and PIN codes cannot contain anything but **exactly** 4 digits or exactly 6 digits. \n\nIf the function is passed a valid PIN string, return `true`, else return `false`.\n\n## Examples \n```\n\"1234\"   -->  true\n\"12345\"  -->  false\n\"a234\"   -->  false\n```\n\"\"\"", "inputs": [["1"], ["12"], ["123"], ["12345"], ["1234567"], ["-1234"], ["-12345"], ["1.234"], ["00000000"], ["a234"], [".234"], ["1234"], ["0000"], ["1111"], ["123456"], ["098765"], ["000000"], ["090909"]], "outputs": [[false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [true], [true], [true], [true], [true], [true], [true]], "starter_code": "def validate_pin(pin):", "canonical_solution": "def validate_pin(pin):\n    return len(pin) in (4, 6) and pin.isdigit()", "entry_point": "validate_pin", "task_id": "TACO_lite/327", "input_output_examples": [[["1234"], ["12345"], ["a234"]], [[true], [false], [false]]]}
{"requirement": "def solve(n):\n\"\"\"In this Kata, you will be given an integer `n` and your task will be to return `the largest integer that is <= n and has the highest digit sum`.\n\nFor example:\n```\nsolve(100) = 99. Digit Sum for 99 = 9 + 9 = 18. No other number <= 100 has a higher digit sum.\nsolve(10) = 9\nsolve(48) = 48. Note that 39 is also an option, but 48 is larger.\n```\n\nInput range is `0 < n < 1e11`\n\nMore examples in the test cases.\n\nGood luck!\n\"\"\"", "inputs": [[79320], [99004], [99088], [99737], [29652], [100], [48], [521], [1], [2], [3], [39188], [5], [10], [1000], [10000], [999999999992], [59195], [19930], [110], [1199], [120], [18], [2090], [72694]], "outputs": [[78999], [98999], [98999], [98999], [28999], [99], [48], [499], [1], [2], [3], [38999], [5], [9], [999], [9999], [999999999989], [58999], [19899], [99], [999], [99], [18], [1999], [69999]], "starter_code": "def solve(n):", "canonical_solution": "def solve(n):\n    x = str(n)\n    res = [x] + [str(int(x[:i]) - 1) + '9' * (len(x) - i) for i in range(1, len(x))]\n    return int(max(res, key=lambda x: (sum(map(int, x)), int(x))))", "entry_point": "solve", "task_id": "TACO_lite/328", "input_output_examples": [[[100], [10], [48], [79320]], [[99], [9], [48], [78999]]]}
{"requirement": "def create_anagram(s, t):\n\"\"\"# Task\n You are given two strings s and t of the same length, consisting of uppercase English letters. Your task is to find the minimum number of \"replacement operations\" needed to get some `anagram` of the string t from the string s. A replacement operation is performed by picking exactly one character from the string s and replacing it by some other character.\n\n About `anagram`: А string x is an anagram of a string y if one can get y by rearranging the letters of x. For example, the strings \"MITE\" and \"TIME\" are anagrams, so are \"BABA\" and \"AABB\", but \"ABBAC\" and \"CAABA\" are not.\n\n# Example\n\n For s = \"AABAA\" and t = \"BBAAA\", the output should be 1;\n \n For s = \"OVGHK\" and t = \"RPGUC\", the output should be 4.\n \n# Input/Output\n\n\n - `[input]` string `s`\n\n    Constraints: `5 ≤ s.length ≤ 35`.\n\n\n - `[input]` string `t`\n\n    Constraints: `t.length = s.length`.\n\n\n - `[output]` an integer\n\n    The minimum number of replacement operations needed to get an anagram of the string t from the string s.\n\"\"\"", "inputs": [["AABAA", "BBAAA"], ["OVGHK", "RPGUC"], ["AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAC"]], "outputs": [[1], [4], [1]], "starter_code": "def create_anagram(s, t):", "canonical_solution": "from collections import Counter\n\ndef create_anagram(s, t):\n    return sum((Counter(s) - Counter(t)).values())", "entry_point": "create_anagram", "task_id": "TACO_lite/329", "input_output_examples": [[["AABAA", "BBAAA"], ["OVGHK", "RPGUC"]], [[1], [4]]]}
{"requirement": "def whoiswinner(moves, con, sz):\n\"\"\"Based on [this kata, Connect Four.](https://www.codewars.com/kata/connect-four-1)\n\nIn this kata we play a modified game of connect four. It's connect X, and there can be multiple players.\n\nWrite the function ```whoiswinner(moves,connect,size)```.\n\n```2 <= connect <= 10```\n\n```2 <= size <= 52```\n\nEach column is identified by a character, A-Z a-z:  \n``` ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz ```\n\n\nMoves come in the form:\n\n```\n['C_R','p_Y','s_S','I_R','Z_Y','d_S']\n```\n* Player R puts on C\n* Player Y puts on p\n* Player S puts on s\n* Player R puts on I\n* ...\n\nThe moves are in the order that they are played. \n\nThe first player who connect ``` connect ``` items in same color is the winner. \n\nNote that a player can win before all moves are done. You should return the first winner.\n\nIf no winner is found, return \"Draw\".\n\nA board with size 7, where yellow has connected 4:\n\nAll inputs are valid, no illegal moves are made.\n\n![alt text](https://i.imgur.com/xnJEsIx.png)\n\"\"\"", "inputs": [[["A_R", "B_Y", "A_R"], 2, 2], [["B_R", "A_Y", "A_R", "D_Y", "B_R", "D_Y", "B_R", "D_Y", "C_R", "D_Y"], 4, 4], [["A_R", "C_Y", "C_R", "B_Y", "A_R", "C_Y", "B_R", "B_Y", "D_R", "A_Y", "D_R", "A_Y"], 2, 4], [["H_R", "A_Y", "A_R", "C_Y", "H_R", "E_Y", "G_R", "C_Y", "D_R", "F_Y", "E_R", "D_Y", "D_R", "D_Y", "C_R", "C_Y", "D_R", "A_Y", "G_R", "E_Y", "C_R", "H_Y", "A_R", "G_Y", "B_R", "G_Y", "A_R", "G_Y", "H_R", "G_Y", "E_R", "F_Y", "A_R", "E_Y", "H_R", "D_Y", "H_R", "H_Y", "A_R", "E_Y", "C_R", "B_Y", "C_R", "E_Y", "G_R", "G_Y"], 2, 8], [["F_R", "B_Y", "E_R", "F_Y", "A_R", "E_Y", "C_R", "E_Y", "C_R", "B_Y", "A_R", "F_Y", "C_R", "E_Y", "D_R", "A_Y", "D_R", "E_Y", "C_R", "A_Y", "A_R", "D_Y", "D_R", "E_Y"], 4, 6], [["A_R", "E_Y", "E_R", "D_Y", "A_R", "A_Y", "D_R", "B_Y", "E_R", "E_Y", "D_R", "E_Y"], 4, 5], [["E_R", "E_Y", "E_R", "A_Y", "B_R", "C_Y", "B_R", "F_Y", "F_R", "C_Y", "B_R", "D_Y", "D_R", "A_Y", "C_R", "E_Y", "B_R", "D_Y", "D_R", "A_Y", "A_R", "D_Y", "D_R"], 3, 6], [["G_R", "E_Y", "A_R", "G_Y", "C_R", "H_Y", "E_R", "G_Y", "E_R", "A_Y", "C_R", "E_Y", "A_R", "D_Y", "B_R", "F_Y", "C_R", "C_Y", "F_R", "A_Y", "G_R", "D_Y", "C_R", "E_Y", "B_R", "B_Y", "B_R", "C_Y", "G_R", "B_Y", "D_R", "F_Y", "A_R", "G_Y", "D_R", "H_Y", "G_R", "H_Y", "B_R", "G_Y"], 4, 8], [["B_R", "A_Y", "B_R"], 3, 2], [["C_R", "F_Y", "c_R", "E_Y", "h_R", "E_Y", "P_R", "E_Y", "H_R", "S_Y", "b_R", "B_Y", "X_R", "U_Y", "M_R", "N_Y", "W_R", "E_Y", "R_R", "T_Y", "L_R", "A_Y", "N_R", "h_Y", "d_R", "X_Y", "D_R", "g_Y", "d_R", "X_Y", "b_R", "I_Y", "Y_R", "J_Y", "P_R", "g_Y", "Y_R", "B_Y", "a_R", "S_Y", "C_R", "a_Y", "i_R", "a_Y", "N_R", "J_Y", "g_R", "b_Y", "X_R", "R_Y", "I_R", "W_Y", "G_R", "Y_Y", "I_R", "N_Y", "R_R", "a_Y", "a_R", "J_Y", "E_R", "X_Y", "Y_R", "J_Y", "e_R", "T_Y", "h_R", "W_Y", "b_R", "X_Y", "g_R", "O_Y", "b_R", "U_Y", "G_R", "h_Y", "H_R", "h_Y", "K_R", "L_Y", "T_R", "L_Y", "c_R", "L_Y", "O_R", "H_Y", "K_R", "P_Y", "D_R", "S_Y", "A_R", "T_Y", "G_R", "K_Y", "J_R", "G_Y", "h_R", "F_Y", "W_R", "K_Y", "C_R", "G_Y", "I_R", "W_Y", "h_R", "f_Y", "b_R", "h_Y", "U_R", "a_Y", "e_R", "M_Y", "D_R", "F_Y", "N_R", "Q_Y", "Z_R", "c_Y", "J_R", "S_Y", "J_R", "M_Y", "F_R", "b_Y", "L_R", "I_Y", "L_R", "J_Y", "U_R", "S_Y", "H_R", "C_Y", "i_R", "U_Y", "D_R", "J_Y", "c_R", "h_Y", "R_R", "H_Y", "O_R", "i_Y", "B_R", "i_Y", "G_R", "Y_Y", "M_R", "d_Y", "F_R", "T_Y", "P_R", "b_Y", "U_R", "I_Y", "J_R", "E_Y", "d_R", "V_Y", "E_R", "f_Y", "b_R", "L_Y", "b_R", "g_Y", "F_R", "V_Y", "b_R", "J_Y", "L_R", "S_Y", "U_R", "W_Y", "f_R", "B_Y", "e_R", "M_Y", "T_R", "D_Y", "F_R", "L_Y", "V_R", "L_Y", "f_R", "C_Y", "L_R", "A_Y", "D_R", "S_Y", "g_R", "A_Y", "h_R", "c_Y", "V_R", "M_Y", "S_R", "T_Y", "c_R", "Z_Y", "c_R", "c_Y", "V_R", "P_Y", "e_R", "P_Y", "I_R", "e_Y", "M_R", "B_Y", "S_R", "g_Y", "H_R", "c_Y", "N_R", "I_Y", "T_R", "O_Y", "f_R", "T_Y", "F_R", "M_Y", "H_R", "a_Y", "f_R", "d_Y", "a_R", "H_Y", "c_R", "a_Y", "a_R", "S_Y", "C_R", "a_Y", "c_R", "Z_Y", "K_R", "b_Y", "B_R", "h_Y", "E_R", "X_Y", "R_R", "Q_Y", "A_R", "V_Y", "H_R", "V_Y", "D_R", "N_Y", "D_R", "K_Y", "K_R", "e_Y", "X_R", "H_Y", "Y_R", "g_Y", "X_R", "G_Y", "V_R", "M_Y", "a_R", "O_Y", "K_R", "a_Y", "R_R", "M_Y", "g_R", "Q_Y", "S_R", "b_Y", "f_R", "h_Y", "U_R", "P_Y", "J_R", "W_Y", "d_R", "J_Y", "X_R", "V_Y", "Q_R", "W_Y", "I_R", "W_Y", "D_R", "J_Y", "X_R", "Y_Y", "C_R", "f_Y", "a_R", "W_Y", "C_R", "L_Y", "C_R", "F_Y", "a_R", "E_Y", "a_R", "W_Y", "R_R", "V_Y", "b_R", "C_Y", "c_R", "h_Y", "A_R", "K_Y", "Z_R", "d_Y", "U_R", "K_Y", "Q_R", "U_Y", "S_R", "J_Y", "F_R", "E_Y", "G_R", "P_Y", "W_R", "H_Y", "S_R", "P_Y", "E_R", "M_Y", "S_R", "h_Y", "L_R", "L_Y", "e_R", "Q_Y", "L_R", "e_Y", "c_R", "E_Y", "i_R", "h_Y", "X_R", "Q_Y", "I_R", "c_Y", "L_R", "P_Y", "H_R", "a_Y", "N_R", "S_Y", "a_R", "h_Y", "D_R", "e_Y", "h_R", "S_Y", "S_R", "O_Y", "i_R", "U_Y", "K_R", "V_Y", "O_R", "L_Y", "h_R", "c_Y", "f_R", "V_Y", "H_R", "N_Y", "B_R", "R_Y", "T_R", "H_Y", "J_R", "I_Y", "P_R", "J_Y", "T_R", "E_Y", "h_R", "H_Y", "h_R", "a_Y", "Z_R", "O_Y", "K_R", "U_Y", "U_R", "O_Y", "b_R", "L_Y", "J_R", "U_Y", "h_R", "b_Y", "d_R", "C_Y", "U_R", "H_Y", "X_R", "c_Y", "Y_R", "Z_Y", "g_R", "K_Y", "P_R", "F_Y", "R_R", "C_Y", "D_R", "P_Y", "g_R", "O_Y", "d_R", "J_Y", "e_R", "Y_Y", "M_R", "G_Y", "f_R", "g_Y", "J_R", "U_Y", "E_R", "L_Y", "B_R", "f_Y", "i_R", "M_Y", "U_R", "d_Y", "M_R", "X_Y", "I_R", "P_Y", "D_R", "h_Y", "V_R", "V_Y", "M_R", "J_Y", "h_R", "X_Y", "d_R", "a_Y", "X_R", "e_Y", "g_R", "O_Y", "a_R", "b_Y", "X_R", "g_Y", "g_R", "N_Y", "K_R", "M_Y", "O_R", "d_Y", "A_R", "B_Y", "G_R", "I_Y", "D_R", "K_Y", "H_R", "i_Y", "V_R", "e_Y", "L_R", "H_Y", "h_R", "W_Y", "E_R", "G_Y", "i_R", "F_Y", "Q_R", "Y_Y", "U_R", "D_Y", "Y_R", "Z_Y", "K_R", "H_Y", "R_R", "X_Y", "V_R", "X_Y", "W_R", "Z_Y", "C_R", "O_Y", "I_R", "i_Y", "S_R", "G_Y", "Z_R", "G_Y", "h_R", "L_Y", "X_R", "c_Y", "b_R", "h_Y", "A_R", "Z_Y", "i_R", "I_Y", "A_R", "T_Y", "h_R", "I_Y", "E_R", "S_Y", "U_R", "S_Y", "S_R", "S_Y", "h_R", "h_Y", "a_R", "d_Y", "V_R", "L_Y", "b_R", "e_Y", "Y_R", "T_Y", "J_R", "U_Y", "C_R", "G_Y", "A_R", "g_Y", "h_R", "J_Y", "f_R", "K_Y", "D_R", "E_Y", "U_R", "M_Y", "M_R", "V_Y", "f_R", "i_Y", "K_R", "Z_Y", "h_R", "U_Y", "e_R", "i_Y", "R_R", "c_Y", "E_R", "J_Y", "I_R", "b_Y", "B_R", "S_Y", "U_R", "F_Y", "B_R", "b_Y", "B_R", "a_Y", "g_R", "D_Y", "Y_R", "E_Y", "N_R", "B_Y", "M_R", "i_Y", "D_R", "Q_Y", "a_R", "U_Y", "N_R", "h_Y", "A_R", "O_Y", "R_R", "Y_Y", "i_R", "g_Y", "f_R", "V_Y", "L_R", "c_Y", "A_R", "S_Y", "B_R", "I_Y", "Y_R", "V_Y", "O_R", "K_Y", "d_R", "T_Y", "I_R", "c_Y", "R_R", "V_Y", "i_R", "J_Y", "V_R", "d_Y", "Z_R", "E_Y", "h_R", "I_Y", "L_R", "L_Y", "S_R", "W_Y", "B_R", "T_Y", "Q_R", "W_Y", "a_R", "Y_Y", "c_R", "E_Y", "H_R", "B_Y", "h_R", "E_Y", "Q_R", "D_Y", "A_R", "S_Y", "N_R", "U_Y", "O_R", "B_Y", "F_R", "N_Y", "d_R", "L_Y", "B_R", "e_Y", "C_R", "Q_Y", "B_R", "Y_Y", "K_R", "g_Y", "Z_R", "O_Y", "R_R", "C_Y", "a_R", "Z_Y", "b_R", "E_Y", "D_R", "F_Y", "S_R", "D_Y", "O_R", "J_Y", "N_R", "N_Y", "d_R", "M_Y", "Q_R", "J_Y", "a_R", "C_Y", "f_R", "B_Y", "V_R", "Q_Y", "e_R", "J_Y", "G_R", "f_Y", "b_R", "Q_Y", "D_R", "D_Y", "E_R", "O_Y", "X_R", "X_Y", "Z_R", "H_Y", "O_R", "Y_Y", "g_R", "W_Y", "Q_R", "g_Y", "g_R", "B_Y", "A_R", "O_Y", "P_R", "I_Y", "K_R", "Z_Y", "O_R", "S_Y", "B_R", "e_Y", "A_R", "H_Y", "A_R", "Z_Y", "P_R", "h_Y"], 8, 35]], "outputs": [["R"], ["Y"], ["Y"], ["R"], ["R"], ["Draw"], ["R"], ["Y"], ["Draw"], ["R"]], "starter_code": "def whoiswinner(moves, con, sz):", "canonical_solution": "from itertools import compress\nfrom string import ascii_uppercase, ascii_lowercase\nD = {c: i for i, c in enumerate(ascii_uppercase + ascii_lowercase)}\n\ndef whoiswinner(moves, con, sz):\n\n    def gen(i, j):\n        for x in range(1, con):\n            yield ((i, j - x), (i - x, j), (i + x, j), (i - x, j - x), (i + x, j + x), (i + x, j - x), (i - x, j + x))\n\n    def check(i, j, p):\n        memo, count = ([True] * 7, [0] * 7)\n        for L in gen(i, j):\n            for x, (k, l) in enumerate(L):\n                memo[x] = memo[x] and 0 <= k < sz and (0 <= l < sz) and (grid[k][l] == p)\n                count[x] += memo[x]\n            if not any(memo):\n                return max(count[0], count[1] + count[2], count[3] + count[4], count[5] + count[6]) + 1 >= con\n        return True\n    if sz >= con <= len(moves):\n        grid = [[None] * sz for _ in range(sz)]\n        for move in moves:\n            i, p = (D[move[0]], move[-1])\n            j = next((j for j, x in enumerate(grid[i]) if x is None))\n            if check(i, j, p):\n                return p\n            grid[i][j] = p\n    return 'Draw'", "entry_point": "whoiswinner", "task_id": "TACO_lite/330", "input_output_examples": [[[["A_R", "B_Y", "A_R"], 2, 2]], [["R"]]]}
{"requirement": "def summy(string_of_ints):\n\"\"\"Write a function that takes a string which has integers inside it separated by spaces, and your task is to convert each integer in the string into an integer and return their sum.\n\n### Example\n```python\nsummy(\"1 2 3\")  ==> 6\n```\n\nGood luck!\n\"\"\"", "inputs": [["1 2 3"], ["1 2 3 4"], ["1 2 3 4 5"], ["10 10"], ["0 0"]], "outputs": [[6], [10], [15], [20], [0]], "starter_code": "def summy(string_of_ints):", "canonical_solution": "def summy(string_of_ints):\n    return sum(map(int, string_of_ints.split()))", "entry_point": "summy", "task_id": "TACO_lite/331", "input_output_examples": [[["1 2 3"]], [[6]]]}
{"requirement": "def conjugate(verb):\n\"\"\"In Spanish, the conjugated verb changes by adding suffixes and according to the person we're talking about. There's something similar in English when we talk about \"She\", \"He\"or \"It\" (3rd person singular):\n\nWith the verb \"run\":\n\n**He / She / It runS**\n\n\nAs you can see, the rule (at least with regular verbs) is to add the suffix  \"-s\" in the 3rd person singular. In Spanish it works the same way but we need to remove the **infinitive suffix** and add a specific suffix to all the others persons (I, You, He/She/It, We, You, They).\n\nVerbs in Spanish and the infinitive suffix.\n--\n\nIn Spanish we assume a verb is on its infitive form when it has one of the infinitives suffixes (**AR**, **ER** or **IR**) at the end:\n\n- Com**er** -> to eat\n\n- Camin**ar** -> to walk\n\n- Viv**ir** -> to live\n\n## How to conjugate\n\n\nFor conjugating in Spanish, we need to remove the infinitive suffix (**ar**, **er** *or* **ir**) and add the personal suffixes corresponding to the person we're talking to. In this kata we'll conjugate the verbs to its **presente indicativo** (simple present) form.\n\nPersonal suffixes\n--\nThe personal suffixes changes depending of the **Infinitive suffix**.\n\nIf the infinitive suffix is **AR** the personal suffixes are:\n\n- first person singular (Yo / I): -**o**\n- second person singular (Tú / You): -**as**\n- third person singular (Él, Ella / He, She): -**a**\n- first person plural (Nosotros / We): -**amos**\n- second person plural (Vosotros / You): -**áis**\n- third person plural (Ellos / They): -**an**\n\nIf the infinitive suffix is **ER**:\n- first person singular (Yo / I): -**o**\n- second person singular (Tú / You): -**es**\n- third person singular (Él, Ella / He, She): -**e**\n- first person plural (Nosotros / We): -**emos**\n- second person plural (Vosotros / You): -**éis**\n- third person plural (Ellos / They): -**en**\n\nIf the infinitive suffix is **IR**:\n- first person singular (Yo / I): -**o**\n- second person singular (Tú / You): -**es**\n- third person singular (Él, Ella / He, She): -**e**\n- first person plural (Nosotros / We): -**imos**\n- second person plural (Vosotros / You): -**ís**\n- third person plural (Ellos / They): -**en**\n\n## Conjugating \nSteps for conjugating:\n1. Remove the infinitive suffix (ar, er, ir)\n2. And add the personal suffixes\n- Example: verb **Caminar** (to walk)\n  - Camin**o** (I walk)\n  - Camin**as** (You walk)\n  - Camin**a** (He walks)\n  - Camin**amos** (We walk)\n  - Camin**áis** (You guys walk)\n  - Camin**an** (They walk)\n- Example: verb **Comer** (to eat):\n  - Com**o** (I eat)\n  - Com**es** (You eat)\n  - Com**e** (He, She eats)\n  - Com**emos** (We eat)\n  - Com**éis** (You guys eat)\n  - Com**en** (They eat)\n- Example: verb **Vivir** (to live):\n  - Viv**o** (I live)\n  - Viv**es** (You live)\n  - Viv**e** (He, She lives)\n  - Viv**imos** (We live)\n  - Viv**ís** (You guys live)\n  - Viv**en** (They live)\n  \n## Your Task\n\nYou need to write a function called **conjugate** which will return an object with a spanish verb conjugated. The object must look like this:\n\n```\n{\n  \"comer\": [\n    \"como\",\n    \"comes\",\n    \"come\",\n    \"comemos\",\n    \"coméis\",\n    \"comen\"\n  ]\n}\n\n```\n\nWhere the key is the verb in its original form (infinitive form) and its value will be an array with the conjugations.\n\nAnother example:\n```\n{\n  \"vivir\": [\n    \"vivo\",\n    \"vives\",\n    \"vive\",\n    \"vivimos\",\n    \"vivís\",\n    \"viven\"\n  ]\n}\n\n```\n\n## Notes:\n1. The conjugations must be in this order:\n```\n{\n    verb: [\n      \"first person singular\",\n      \"second person singular\",\n      \"third person singular\",\n      \"first person plural\",\n      \"second person plural\",\n      \"third person plural\"\n    ]\n}\n```\n2.Don't use `JSON.stringify(obj, null, 2)` because the \"presentation\" of the object isn't important.\n\n3.Don't use accents in Python version\n\n\n **Buena suerte!**\n---\n\"\"\"", "inputs": [["caminar"], ["comer"], ["vivir"]], "outputs": [[{"caminar": ["camino", "caminas", "camina", "caminamos", "caminais", "caminan"]}], [{"comer": ["como", "comes", "come", "comemos", "comeis", "comen"]}], [{"vivir": ["vivo", "vives", "vive", "vivimos", "vivis", "viven"]}]], "starter_code": "def conjugate(verb):", "canonical_solution": "SUFFIXES = {'a': ['o', 'as', 'a', 'amos', 'ais', 'an'], 'e': ['o', 'es', 'e', 'emos', 'eis', 'en'], 'i': ['o', 'es', 'e', 'imos', 'is', 'en']}\n\ndef conjugate(verb):\n    return {verb: [verb[:-2] + s for s in SUFFIXES[verb[-2]]]}", "entry_point": "conjugate", "task_id": "TACO_lite/332", "input_output_examples": [[["caminar"], ["comer"], ["vivir"]], [[{"caminar": ["camino", "caminas", "camina", "caminamos", "camináis", "caminan"]}], [{"comer": ["como", "comes", "come", "comemos", "coméis", "comen"]}], [{"vivir": ["vivo", "vives", "vive", "vivimos", "vivís", "viven"]}]]]}
{"requirement": "def replace_dots(string):\n\"\"\"The code provided is supposed replace all the dots `.` in the specified String `str` with dashes `-`\n\nBut it's not working properly.\n\n# Task\n\nFix the bug so we can all go home early.\n\n# Notes\n\nString `str` will never be null.\n\"\"\"", "inputs": [[""], ["no dots"], ["one.two.three"], ["........"]], "outputs": [[""], ["no dots"], ["one-two-three"], ["--------"]], "starter_code": "def replace_dots(string):", "canonical_solution": "def replace_dots(string):\n    return string.replace('.', '-')", "entry_point": "replace_dots", "task_id": "TACO_lite/333", "input_output_examples": [[[""]], [["-"]]]}
{"requirement": "def folding(a, b):\n\"\"\"# Task\nJohn was in math class and got bored, so he decided to fold some origami from a rectangular `a × b` sheet of paper (`a > b`). His first step is to make a square piece of paper from the initial rectangular piece of paper by folding the sheet along the bisector of the right angle and cutting off the excess part.\n\n\n\nAfter moving the square piece of paper aside, John wanted to make even more squares! He took the remaining (`a-b`) × `b` strip of paper and went on with the process until he was left with a square piece of paper.\n\n Your task is to determine how many square pieces of paper John can make.\n\n# Example:\n\n For: `a = 2, b = 1`, the output should be `2`.\n \n Given `a = 2` and `b = 1`, John can fold a `1 × 1` then another `1 × 1`. \n \n So the answer is `2`.\n \n For: `a = 10, b = 7`, the output should be `6`.\n \n We are given `a = 10` and `b = 7`. The following is the order of squares John folds: `7 × 7, 3 × 3, 3 × 3, 1 × 1, 1 × 1, and 1 × 1`.\n \n Here are pictures for the example cases.\n\n\n\n# Input/Output\n\n\n - `[input]` integer `a`\n\n  `2 ≤ a ≤ 1000`\n\n\n - `[input]` integer `b`\n\n  `1 ≤ b < a ≤ 1000`\n\n\n - `[output]` an integer\n\n  The maximum number of squares.\n\"\"\"", "inputs": [[2, 1], [10, 7], [3, 1], [4, 1], [3, 2], [4, 2], [1000, 700], [1000, 999]], "outputs": [[2], [6], [3], [4], [3], [2], [6], [1000]], "starter_code": "def folding(a, b):", "canonical_solution": "def folding(a, b):\n    squares = 1\n    while a != b:\n        squares += 1\n        b, a = sorted((a - b, b))\n    return squares", "entry_point": "folding", "task_id": "TACO_lite/334", "input_output_examples": [[[2, 1], [10, 7]], [[2], [6]]]}
{"requirement": "def duplicates(arr):\n\"\"\"You are given array of integers, your task will be to count all pairs in that array and return their count.\n\n**Notes:**\n   \n* Array can be empty or contain only one value; in this case return `0` \n* If there are more pairs of a certain number, count each pair only once. E.g.: for `[0, 0, 0, 0]` the return value is `2` (= 2 pairs of `0`s)\n* Random tests: maximum array length is 1000, range of values in array is between 0 and 1000\n\n\n## Examples\n\n```\n[1, 2, 5, 6, 5, 2]  -->  2\n```\n...because there are 2 pairs: `2` and `5`\n\n\n```\n[1, 2, 2, 20, 6, 20, 2, 6, 2]  -->  4\n```\n\n...because there are 4 pairs: `2`, `20`, `6` and `2` (again)\n\"\"\"", "inputs": [[[1, 2, 2, 20, 6, 20, 2, 6, 2]], [[1000, 1000]], [[]], [[54]]], "outputs": [[4], [1], [0], [0]], "starter_code": "def duplicates(arr):", "canonical_solution": "def duplicates(arr):\n    return sum((arr.count(i) // 2 for i in set(arr)))", "entry_point": "duplicates", "task_id": "TACO_lite/335", "input_output_examples": [[[[1, 2, 5, 6, 5, 2]], [[1, 2, 2, 20, 6, 20, 2, 6, 2]]], [[2], [4]]]}
{"requirement": "def solve(s):\n\"\"\"Given a string of integers, return the number of odd-numbered substrings that can be formed. \n\nFor example, in the case of `\"1341\"`, they are `1, 1, 3, 13, 41, 341, 1341`, a total of `7` numbers. \n\n`solve(\"1341\") = 7`.  See test cases for more examples.\n\nGood luck!\n\nIf you like substring Katas, please try \n\n[Longest vowel chain](https://www.codewars.com/kata/59c5f4e9d751df43cf000035)\n\n[Alphabet symmetry](https://www.codewars.com/kata/59d9ff9f7905dfeed50000b0)\n\"\"\"", "inputs": [["1341"], ["1357"], ["13471"], ["134721"], ["1347231"], ["13472315"]], "outputs": [[7], [10], [12], [13], [20], [28]], "starter_code": "def solve(s):", "canonical_solution": "def solve(s):\n    return sum((i + 1 for i, d in enumerate(list(s)) if d in '13579'))", "entry_point": "solve", "task_id": "TACO_lite/336", "input_output_examples": [[["1341"]], [[7]]]}
{"requirement": "def palindrome_rearranging(s):\n\"\"\"# Task\n Given a string `s`, find out if its characters can be rearranged to form a palindrome.\n\n# Example\n\n For `s = \"aabb\"`, the output should be `true`.\n\n We can rearrange `\"aabb\"` to make `\"abba\"`, which is a palindrome.\n\n# Input/Output\n\n\n - `[input]` string `s`\n\n    A string consisting of lowercase English letters.\n\n    Constraints:\n\n    `4 ≤ inputString.length ≤ 50.`\n\n\n - `[output]` a boolean value\n\n    `true` if the characters of the inputString can be rearranged to form a palindrome, `false` otherwise.\n\"\"\"", "inputs": [["aabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabc"], ["abbcabb"], ["zyyzzzzz"], ["aaabbb"]], "outputs": [[true], [false], [true], [true], [false]], "starter_code": "def palindrome_rearranging(s):", "canonical_solution": "def palindrome_rearranging(s):\n    return sum((s.count(c) % 2 for c in set(s))) < 2", "entry_point": "palindrome_rearranging", "task_id": "TACO_lite/337", "input_output_examples": [[["aabb"]], [[true]]]}
{"requirement": "def is_substitution_cipher(s1, s2):\n\"\"\"# Task\n A ciphertext alphabet is obtained from the plaintext alphabet by means of rearranging some characters. For example \"bacdef...xyz\" will be a simple ciphertext alphabet where a and b are rearranged.\n\n A substitution cipher is a method of encoding where each letter of the plaintext alphabet is replaced with the corresponding (i.e. having the same index) letter of some ciphertext alphabet.\n\n Given two strings, check whether it is possible to obtain them from each other using some (possibly, different) substitution ciphers.\n\n# Example\n\n For `string1 = \"aacb\" and string2 = \"aabc\"`, the output should be `true`\n\n Any ciphertext alphabet that starts with acb... would make this transformation possible.\n\n For `string1 = \"aa\" and string2 = \"bc\"`, the output should be `false`\n\n# Input/Output\n\n\n - `[input]` string `string1`\n\n    A string consisting of lowercase characters.\n\n    Constraints: `1 ≤ string1.length ≤ 10`.\n\n\n - `[input]` string `string2`\n\n    A string consisting of lowercase characters of the same length as string1.\n\n    Constraints: `string2.length = string1.length`.\n\n\n - `[output]` a boolean value\n\"\"\"", "inputs": [["aacb", "aabc"], ["aa", "bc"], ["aaxxaaz", "aazzaay"], ["aaxyaa", "aazzaa"], ["aazzaa", "aaxyaa"], ["jpeuizmi", "mxxcwriq"]], "outputs": [[true], [false], [true], [false], [false], [false]], "starter_code": "def is_substitution_cipher(s1, s2):", "canonical_solution": "def is_substitution_cipher(s1, s2):\n    return len(set(s1)) == len(set(s2)) == len(set(zip(s1, s2)))", "entry_point": "is_substitution_cipher", "task_id": "TACO_lite/338", "input_output_examples": [[["aacb", "aabc"], ["aa", "bc"]], [[true], [false]]]}
{"requirement": "def solution(n):\n\"\"\"Round any given number to the closest 0.5 step\n\nI.E.\n```\nsolution(4.2) = 4\nsolution(4.3) = 4.5\nsolution(4.6) = 4.5\nsolution(4.8) = 5\n```\n\nRound **up** if number is as close to previous and next 0.5 steps.\n\n```\nsolution(4.75) == 5\n```\n\"\"\"", "inputs": [[4.2], [4.25], [4.4], [4.6], [4.75], [4.8], [4.5], [4.55], [4.74], [4.74999999999], [4.74999999991]], "outputs": [[4], [4.5], [4.5], [4.5], [5], [5], [4.5], [4.5], [4.5], [4.5], [4.5]], "starter_code": "def solution(n):", "canonical_solution": "import math\n\ndef solution(n):\n    d = 0\n    if n - 0.25 < math.floor(n):\n        d = math.floor(n)\n    elif n - 0.75 < math.floor(n):\n        d = math.floor(n) + 0.5\n    else:\n        d = math.ceil(n)\n    return d", "entry_point": "solution", "task_id": "TACO_lite/339", "input_output_examples": [[[4.2], [4.3], [4.6], [4.8], [4.75]], [[4], [4.5], [4.5], [5], [5]]]}
{"requirement": "def pop_shift(s):\n\"\"\"You will be given a string. \n\nYou need to return an array of three strings by gradually pulling apart the string.\n\nYou should repeat the following steps until the string length is 1:\n\na) remove the final character from the original string, add to solution string 1.\nb) remove the first character from the original string, add to solution string 2.\n\nThe final solution string value is made up of the remaining character from the original string, once originalstring.length == 1.\n\nExample:\n\n\"exampletesthere\"\nbecomes:\n[\"erehtse\",\"example\",\"t\"]\n\nThe Kata title gives a hint of one technique to solve.\n\"\"\"", "inputs": [["reusetestcasesbitcointakeovertheworldmaybewhoknowsperhaps"], ["turnsoutrandomtestcasesareeasierthanwritingoutbasicones"], ["exampletesthere"], ["letstalkaboutjavascriptthebestlanguage"], ["iwanttotraveltheworldwritingcodeoneday"], ["letsallgoonholidaysomewhereverycold"]], "outputs": [[["spahrepswonkohwebyamdlroweht", "reusetestcasesbitcointakeove", "r"]], [["senocisabtuognitirwnahtreis", "turnsoutrandomtestcasesaree", "a"]], [["erehtse", "example", "t"]], [["egaugnaltsebehttpir", "letstalkaboutjavasc", ""]], [["yadenoedocgnitirwdl", "iwanttotravelthewor", ""]], [["dlocyreverehwemos", "letsallgoonholida", "y"]]], "starter_code": "def pop_shift(s):", "canonical_solution": "def pop_shift(s):\n    l1 = list(s)\n    l2 = []\n    l3 = []\n    while len(l1) > 1:\n        l2.append(l1.pop())\n        l3.append(l1.pop(0))\n    return [''.join(l2), ''.join(l3), ''.join(l1)]", "entry_point": "pop_shift", "task_id": "TACO_lite/340", "input_output_examples": [[["exampletesthere"], ["reusetestcasesbitcointakeovertheworldmaybewhoknowsperhaps"]], [[["erehtse", "example", "t"]], [["spahrepswonkohwebyamdlroweht", "reusetestcasesbitcointakeove", "r"]]]]}
{"requirement": "def arr_check(arr):\n\"\"\"Is every value in the array an array?\n\nThis should only test the second array dimension of the array. The values of the nested arrays don't have to be arrays. \n\nExamples:\n\n```python\n[[1],[2]] => true\n['1','2'] => false\n[{1:1},{2:2}] => false\n```\n\"\"\"", "inputs": [[[]], [[["string"]]], [[[], {}]], [[[1], [2], [3]]], [["A", "R", "R", "A", "Y"]]], "outputs": [[true], [true], [false], [true], [false]], "starter_code": "def arr_check(arr):", "canonical_solution": "def arr_check(arr):\n    return all((isinstance(el, list) for el in arr))", "entry_point": "arr_check", "task_id": "TACO_lite/341", "input_output_examples": [[[[[1], [2]]], [["1", "2"]], [[{"1": 1}, {"2": 2}]]], [[true], [false], [false]]]}
{"requirement": "def base64_to_base10(string):\n\"\"\"# Base64 Numeric Translator\n\nOur standard numbering system is (Base 10). That includes 0 through 9. Binary is (Base 2), only 1’s and 0’s.  And Hexadecimal is (Base 16) (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F). A hexadecimal “F” has a (Base 10) value of 15. (Base 64) has 64 individual characters which translate in value in (Base 10) from between 0 to 63.\n\n####Write a method that will convert a string from (Base 64) to it's (Base 10) integer value.\n\nThe (Base 64) characters from least to greatest will be\n```\nABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\n```\nWhere 'A' is equal to 0 and '/' is equal to 63.\n\nJust as in standard (Base 10) when you get to the highest individual integer 9 the next number adds an additional place and starts at the beginning 10; so also (Base 64) when you get to the 63rd digit '/' and the next number adds an additional place and starts at the beginning \"BA\".\n\nExample:\n```\nbase64_to_base10(\"/\") # => 63\nbase64_to_base10(\"BA\") # => 64\nbase64_to_base10(\"BB\") # => 65\nbase64_to_base10(\"BC\") # => 66\n```\n\nWrite a method `base64_to_base10` that will take a string (Base 64) number and output it's (Base 10) value as an integer.\n\"\"\"", "inputs": [["WIN"], ["b64"], ["B64"], ["/+/"], ["HelloWorld"]], "outputs": [[90637], [114360], [7864], [262079], [134710352538679645]], "starter_code": "def base64_to_base10(string):", "canonical_solution": "DIGITS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\ndef base64_to_base10(string):\n    return sum((DIGITS.index(digit) * 64 ** i for i, digit in enumerate(string[::-1])))", "entry_point": "base64_to_base10", "task_id": "TACO_lite/342", "input_output_examples": [[["/"], ["BA"], ["BB"], ["BC"], ["WIN"]], [[63], [64], [65], [66], [90637]]]}
{"requirement": "def transpose_two_strings(arr):\n\"\"\"You will be given an array that contains two strings. Your job is to create a function that will take those two strings and transpose them, so that the strings go from top to bottom instead of left to right.\nA few things to note:\n\n1. There should be one space in between the two characters\n2. You don't have to modify the case (i.e. no need to change to upper or lower)\n3. If one string is longer than the other, there should be a space where the character would be\n\"\"\"", "inputs": [[["Hello", "World"]], [["joey", "louise"]], [["a", "cat"]], [["cat", ""]], [["!a!a!", "?b?b"]]], "outputs": [["H W\ne o\nl r\nl l\no d"], ["j l\no o\ne u\ny i\n  s\n  e"], ["a c\n  a\n  t"], ["c  \na  \nt  "], ["! ?\na b\n! ?\na b\n!  "]], "starter_code": "def transpose_two_strings(arr):", "canonical_solution": "import itertools\n\ndef transpose_two_strings(arr):\n    return '\\n'.join((' '.join(elt) for elt in itertools.zip_longest(arr[0], arr[1], fillvalue=' ')))", "entry_point": "transpose_two_strings", "task_id": "TACO_lite/343", "input_output_examples": [[[["Hello", "World"]]], [["H W\ne o\nl r\nl l\no d"]]]}
{"requirement": "def is_divisible_by_6(s):\n\"\"\"Same as [the original](https://www.codewars.com/kata/simple-fun-number-258-is-divisible-by-6) (same rules, really, go there for example and I strongly recommend completing it first), but with more than one asterisk (but always at least one).\n\nFor example, `\"*2\"` should return `[\"12\", \"42\", \"72\"]`.\n\nSimilarly, `\"*2*\"` should return `[\"024\", \"120\", \"126\", \"222\", \"228\", \"324\", \"420\", \"426\", \"522\", \"528\", \"624\", \"720\", \"726\", \"822\", \"828\", \"924\"]`. Order matters and returning the right one is part of the challenge itself, yep!\n\nMore examples in the test codes and, of course, if you cannot generate any number divisible by 6, just return `[]` (or `[] of String` in Crystal).\n\"\"\"", "inputs": [["*2"], ["*21"], ["**1"], ["*2*"], ["***"]], "outputs": [[["12", "42", "72"]], [[]], [[]], [["024", "120", "126", "222", "228", "324", "420", "426", "522", "528", "624", "720", "726", "822", "828", "924"]], [["000", "006", "012", "018", "024", "030", "036", "042", "048", "054", "060", "066", "072", "078", "084", "090", "096", "102", "108", "114", "120", "126", "132", "138", "144", "150", "156", "162", "168", "174", "180", "186", "192", "198", "204", "210", "216", "222", "228", "234", "240", "246", "252", "258", "264", "270", "276", "282", "288", "294", "300", "306", "312", "318", "324", "330", "336", "342", "348", "354", "360", "366", "372", "378", "384", "390", "396", "402", "408", "414", "420", "426", "432", "438", "444", "450", "456", "462", "468", "474", "480", "486", "492", "498", "504", "510", "516", "522", "528", "534", "540", "546", "552", "558", "564", "570", "576", "582", "588", "594", "600", "606", "612", "618", "624", "630", "636", "642", "648", "654", "660", "666", "672", "678", "684", "690", "696", "702", "708", "714", "720", "726", "732", "738", "744", "750", "756", "762", "768", "774", "780", "786", "792", "798", "804", "810", "816", "822", "828", "834", "840", "846", "852", "858", "864", "870", "876", "882", "888", "894", "900", "906", "912", "918", "924", "930", "936", "942", "948", "954", "960", "966", "972", "978", "984", "990", "996"]]], "starter_code": "def is_divisible_by_6(s):", "canonical_solution": "from itertools import product\n\ndef is_divisible_by_6(s):\n    if s[-1] in '13579':\n        return []\n    ss = s.replace('*', '{}')\n    return [v for v in (ss.format(*p) for p in product(*['0123456789'] * s.count('*'))) if not int(v) % 6]", "entry_point": "is_divisible_by_6", "task_id": "TACO_lite/344", "input_output_examples": [[["*2"], ["*2*"]], [[["12", "42", "72"]], [["024", "120", "126", "222", "228", "324", "420", "426", "522", "528", "624", "720", "726", "822", "828", "924"]]]]}
{"requirement": "def solve(xs):\n\"\"\"In this Kata, we will calculate the **minumum positive number that is not a possible sum** from a list of positive integers. \n\n```\nsolve([1,2,8,7]) = 4 => we can get 1, 2, 3 (from 1+2), but we cannot get 4. 4 is the minimum number not possible from the list. \nsolve([4,1,2,3,12]) = 11. We can get 1, 2, 3, 4, 4+1=5, 4+2=6,4+3=7,4+3+1=8,4+3+2=9,4+3+2+1=10. But not 11. \nsolve([2,3,2,3,4,2,12,3]) = 1. We cannot get 1.\n```\nMore examples in test cases. \n\nGood luck!\n\"\"\"", "inputs": [[[1, 2, 8, 7]], [[2, 12, 3, 1]], [[4, 2, 8, 3, 1]], [[4, 2, 7, 3, 1]], [[4, 2, 12, 3]]], "outputs": [[4], [7], [19], [18], [1]], "starter_code": "def solve(xs):", "canonical_solution": "def solve(xs):\n    m = 0\n    for x in sorted(xs):\n        if x > m + 1:\n            break\n        m += x\n    return m + 1", "entry_point": "solve", "task_id": "TACO_lite/345", "input_output_examples": [[[[1, 2, 8, 7]], [[4, 1, 2, 3, 12]], [[2, 3, 2, 3, 4, 2, 12, 3]]], [[4], [11], [1]]]}
{"requirement": "def counting_valleys(s):\n\"\"\"You need count how many valleys you will pass.\n\nStart is always from zero level.\n\nEvery time you go down below 0 level counts as an entry of a valley, and as you go up to 0 level from valley counts as an exit of a valley.\n\nOne passed valley is equal one entry and one exit of a valley.\n```\ns='FUFFDDFDUDFUFUF'\nU=UP\nF=FORWARD\nD=DOWN\n```\n\nTo represent string above\n```\n(level 1)  __\n(level 0)_/  \\         _(exit we are again on level 0)\n(entry-1)     \\_     _/\n(level-2)       \\/\\_/\n```\nSo here we passed one valley\n\"\"\"", "inputs": [["UFFFD"], ["DFFFD"], ["UFFFU"], ["DFFFU"], ["UFFDDFDUDFUFU"], ["UFFDDFDUDFUFUUFFDDFDUDFUFU"], ["UFFDDFDUDFUFUUFFDDUFFDDUFFDDUDUDUDUDUDUUUUUUUUU"], ["UFFDDFDUDFUFUUFFDDFDUDFUFUUFFDDFDUDFUFUUFFDDFDUDFUFU"], ["UFFDDFDUDFUFUUFFDDFDUDFUFUUFFDDFDUDFUFUUFFDDFDUDFUFUUFFDDFDUDFUFUUFFDDFDUDFUFU"]], "outputs": [[0], [0], [0], [1], [1], [2], [3], [4], [6]], "starter_code": "def counting_valleys(s):", "canonical_solution": "def counting_valleys(s):\n    level = 0\n    in_valley = False\n    count = 0\n    for c in s:\n        if c == 'U':\n            level += 1\n        elif c == 'D':\n            level -= 1\n        if level >= 0 and in_valley:\n            count += 1\n        in_valley = level < 0\n    return count", "entry_point": "counting_valleys", "task_id": "TACO_lite/346", "input_output_examples": [[["UFFFD"], ["FUFFDDFDUDFUFUF"]], [[0], [1]]]}
{"requirement": "def reverse_in_parentheses(s):\n\"\"\"In this kata, you will be given a string of text and valid parentheses, such as `\"h(el)lo\"`. You must return the string, with only the text inside parentheses reversed, so `\"h(el)lo\"` becomes `\"h(le)lo\"`. However, if said parenthesized text contains parenthesized text itself, then that too must reversed back, so it faces the original direction. When parentheses are reversed, they should switch directions, so they remain syntactically correct (i.e. `\"h((el)l)o\"` becomes `\"h(l(el))o\"`). This pattern should repeat for however many layers of parentheses. There may be multiple groups of parentheses at any level (i.e. `\"(1) (2 (3) (4))\"`), so be sure to account for these.\n\nFor example:\n```python\nreverse_in_parentheses(\"h(el)lo\") == \"h(le)lo\"\nreverse_in_parentheses(\"a ((d e) c b)\") == \"a (b c (d e))\"\nreverse_in_parentheses(\"one (two (three) four)\") == \"one (ruof (three) owt)\"\nreverse_in_parentheses(\"one (ruof ((rht)ee) owt)\") == \"one (two ((thr)ee) four)\"\n```\n\nInput parentheses will always be valid (i.e. you will never get \"(()\").\n\"\"\"", "inputs": [["h(el)lo"], ["a ((d e) c b)"], ["one (two (three) four)"], ["one (ruof ((rht)ee) owt)"], [""], ["many (parens) on (top)"], ["( ( ) (()) )"]], "outputs": [["h(le)lo"], ["a (b c (d e))"], ["one (ruof (three) owt)"], ["one (two ((thr)ee) four)"], [""], ["many (snerap) on (pot)"], ["( (()) ( ) )"]], "starter_code": "def reverse_in_parentheses(s):", "canonical_solution": "def reverse_in_parentheses(s):\n    stack = []\n    for i in s:\n        stack.append(i)\n        if i == ')':\n            opening = len(stack) - stack[::-1].index('(') - 1\n            stack.append(''.join([i[::-1].translate(str.maketrans('()', ')(')) for i in stack[opening:][::-1]]))\n            del stack[opening:-1]\n    return ''.join(stack)", "entry_point": "reverse_in_parentheses", "task_id": "TACO_lite/347", "input_output_examples": [[["h(el)lo"], ["a ((d e) c b)"], ["one (two (three) four)"], ["one (ruof ((rht)ee) owt)"]], [["h(le)lo"], ["a (b c (d e))"], ["one (ruof (three) owt)"], ["one (two ((thr)ee) four)"]]]}
{"requirement": "def is_divisible(n, x, y):\n\"\"\"Create a function that checks if a number `n` is divisible by two numbers `x` **AND** `y`. All inputs are positive, non-zero digits.\n\n```JS\nExamples:\n1) n =   3, x = 1, y = 3 =>  true because   3 is divisible by 1 and 3\n2) n =  12, x = 2, y = 6 =>  true because  12 is divisible by 2 and 6\n3) n = 100, x = 5, y = 3 => false because 100 is not divisible by 3\n4) n =  12, x = 7, y = 5 => false because  12 is neither divisible by 7 nor 5\n```\n\"\"\"", "inputs": [[3, 2, 2], [3, 3, 4], [12, 3, 4], [8, 3, 4], [48, 3, 4], [100, 5, 10], [100, 5, 3], [4, 4, 2], [5, 2, 3], [17, 17, 17], [17, 1, 17]], "outputs": [[false], [false], [true], [false], [true], [true], [false], [true], [false], [true], [true]], "starter_code": "def is_divisible(n, x, y):", "canonical_solution": "def is_divisible(n, x, y):\n    return n % x == 0 and n % y == 0", "entry_point": "is_divisible", "task_id": "TACO_lite/348", "input_output_examples": [[[3, 1, 3], [12, 2, 6], [100, 5, 3], [12, 7, 5]], [[true], [true], [false], [false]]]}
{"requirement": "def order_weight(_str):\n\"\"\"My friend John and I are members of the \"Fat to Fit Club (FFC)\". John is worried because\neach month a list with the weights of members is published and each month he is the last on the list\nwhich means he is the heaviest. \n\nI am the one who establishes the list so I told him:\n\"Don't worry any more, I will modify the order of the list\".\nIt was decided to attribute a \"weight\" to numbers. The weight of a number will be from now on\nthe sum of its digits. \n\nFor example `99` will have \"weight\" `18`, `100` will have \"weight\"\n`1` so in the list `100` will come before `99`.\nGiven a string with the weights of FFC members in normal order can you give this string ordered by \"weights\" of these numbers?\n\n# Example:\n\n`\"56 65 74 100 99 68 86 180 90\"` ordered by numbers weights becomes: \n`\"100 180 90 56 65 74 68 86 99\"`\n\nWhen two numbers have the same \"weight\", let us class them as if they were strings (alphabetical ordering) and not numbers:\n`100` is before `180` because its \"weight\" (1) is less than the one of `180` (9)\nand `180` is before `90` since, having the same \"weight\" (9),  it comes before as a *string*.\n\nAll numbers in the list are positive numbers and the list can be empty.\n\n# Notes\n\n- it may happen that the input string have leading, trailing whitespaces and more than a unique whitespace between two consecutive numbers\n- Don't modify the input\n- For C: The result is freed.\n\"\"\"", "inputs": [["103 123 4444 99 2000"], ["2000 10003 1234000 44444444 9999 11 11 22 123"], [""], ["10003 1234000 44444444 9999 2000 123456789"], ["3 16 9 38 95 1131268 49455 347464 59544965313 496636983114762 85246814996697"], ["71899703 200 6 91 425 4 67407 7 96488 6 4 2 7 31064 9 7920 1 34608557 27 72 18 81"], ["387087 176 351832 100 430372 8 58052 54 175432 120 269974 147 309754 91 404858 67 271476 164 295747 111 40"]], "outputs": [["2000 103 123 4444 99"], ["11 11 2000 10003 22 123 1234000 44444444 9999"], [""], ["2000 10003 1234000 44444444 9999 123456789"], ["3 16 9 38 95 1131268 49455 347464 59544965313 496636983114762 85246814996697"], ["1 2 200 4 4 6 6 7 7 18 27 72 81 9 91 425 31064 7920 67407 96488 34608557 71899703"], ["100 111 120 40 8 54 91 164 147 67 176 430372 58052 175432 351832 271476 309754 404858 387087 295747 269974"]], "starter_code": "def order_weight(_str):", "canonical_solution": "def order_weight(_str):\n    return ' '.join(sorted(sorted(_str.split(' ')), key=lambda x: sum((int(c) for c in x))))", "entry_point": "order_weight", "task_id": "TACO_lite/349", "input_output_examples": [[["56 65 74 100 99 68 86 180 90"], ["103 123 4444 99 2000"]], [["100 180 90 56 65 74 68 86 99"], ["2000 103 123 4444 99"]]]}
{"requirement": "def pascal(p):\n\"\"\"Here you will create the classic [Pascal's triangle](https://en.wikipedia.org/wiki/Pascal%27s_triangle).\nYour function will be passed the depth of the triangle and you code has to return the corresponding pascal triangle up to that depth.\n\nThe triangle should be returned as a nested array.\n\nfor example:\n```python\npascal(5) # should return [[1], [1,1], [1,2,1], [1,3,3,1], [1,4,6,4,1]]\n```\n\nTo build the triangle, start with a single 1 at the top, for each number in the next row you just take the two numbers above it and add them together (except for the edges, which are all `1`), e.g.:\n```\n              [1]\n            [1   1]\n          [1   2   1]\n        [1   3   3   1]\n```\n\"\"\"", "inputs": [[1], [5], [10]], "outputs": [[[[1]]], [[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]], [[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 15, 6, 1], [1, 7, 21, 35, 35, 21, 7, 1], [1, 8, 28, 56, 70, 56, 28, 8, 1], [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]]]], "starter_code": "def pascal(p):", "canonical_solution": "def pascal(p):\n    triangle = [[1]]\n    for _ in range(p - 1):\n        to_sum = list(zip([0] + triangle[-1], triangle[-1] + [0]))\n        triangle.append(list(map(sum, to_sum)))\n    return triangle", "entry_point": "pascal", "task_id": "TACO_lite/350", "input_output_examples": [[[5]], [[[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]]]]}
{"requirement": "def letter_check(arr):\n\"\"\"Write a function that checks if all the letters in the second string are present in the first one at least once, regardless of how many times they appear:\n\n```\n[\"ab\", \"aaa\"]    =>  true\n[\"trances\", \"nectar\"]    =>  true\n[\"compadres\", \"DRAPES\"]  =>  true\n[\"parses\", \"parsecs\"]    =>  false\n```\n\nFunction should not be case sensitive, as indicated in example #2. Note: both strings are presented as a **single argument** in the form of an array.\n\"\"\"", "inputs": [[["abcd", "aaa"]], [["trances", "nectar"]], [["THE EYES", "they see"]], [["assert", "staring"]], [["arches", "later"]], [["dale", "caller"]], [["parses", "parsecs"]], [["replays", "adam"]], [["mastering", "streaming"]], [["drapes", "compadres"]], [["deltas", "slated"]], [["deltas", ""]], [["", "slated"]]], "outputs": [[true], [true], [true], [false], [false], [false], [false], [false], [true], [false], [true], [true], [false]], "starter_code": "def letter_check(arr):", "canonical_solution": "def letter_check(arr):\n    return set(arr[1].lower()) <= set(arr[0].lower())", "entry_point": "letter_check", "task_id": "TACO_lite/351", "input_output_examples": [[[["ab", "aaa"]], [["trances", "nectar"]], [["compadres", "DRAPES"]], [["parses", "parsecs"]]], [[true], [true], [true], [false]]]}
{"requirement": "def word_square(ls):\n\"\"\"A [Word Square](https://en.wikipedia.org/wiki/Word_square) is a set of words written out in a square grid, such that the same words can be read both horizontally and vertically. The number of words, equal to the number of letters in each word, is known as the *order* of the square.\n\nFor example, this is an *order* `5` square found in the ruins of Herculaneum:\n\n![](https://i.gyazo.com/e226262e3ada421d4323369fb6cf66a6.jpg)\n\nGiven a string of various uppercase `letters`, check whether a *Word Square* can be formed from it. \n\nNote that you should use each letter from `letters` the exact number of times it occurs in the string. If a *Word Square* can be formed, return `true`, otherwise return `false`.\n\n__Example__\n\n  * For `letters = \"SATORAREPOTENETOPERAROTAS\"`, the output should be\n  `WordSquare(letters) = true`.\n    It is possible to form a *word square* in the example above.\n\n  * For `letters = \"AAAAEEEENOOOOPPRRRRSSTTTT\"`, (which is sorted form of `\"SATORAREPOTENETOPERAROTAS\"`), the output should also be\n  `WordSquare(letters) = true`.\n\n  * For `letters = \"NOTSQUARE\"`, the output should be\n  `WordSquare(letters) = false`.\n  \n__Input/Output__\n\n* [input] string letters\n\n  A string of uppercase English letters.\n  \n  Constraints: `3 ≤ letters.length ≤ 100`.\n\n\n* [output] boolean\n\n  `true`, if a Word Square can be formed;\n  \n  `false`, if a Word Square cannot be formed.\n\"\"\"", "inputs": [["SATORAREPOTENETOPERAROTAS"], ["NOTSQUARE"], ["BITICETEN"], ["CARDAREAREARDART"], ["CODEWARS"], ["AAAAACEEELLRRRTT"], ["AAACCEEEEHHHMMTT"], ["AAACCEEEEHHHMMTTXXX"], ["ABCD"], ["GHBEAEFGCIIDFHGG"], ["AAHHFDKIHHFCXZBFDERRRTXXAA"], ["AABBCCDDEEFFGGGG"], ["ABCABCABC"], ["FRACTUREOUTLINEDBLOOMINGSEPTETTE"], ["GLASSESRELAPSEIMITATESMEAREDTANNERY"], ["LIMBAREACORKKNEE"], ["DESCENDANTECHENEIDAESHORTCOATSCERBERULUSENTEROMERENECROLATERDIOUMABANAADALETABATNATURENAMETESSERATED"], ["CONGRATUALATIONS"], ["HEARTEMBERABUSERESINTREND"], ["OHLOLWHAT"]], "outputs": [[true], [false], [true], [true], [false], [true], [true], [false], [false], [true], [false], [true], [true], [false], [false], [false], [true], [false], [true], [true]], "starter_code": "def word_square(ls):", "canonical_solution": "from collections import Counter\n\ndef word_square(ls):\n    n = int(len(ls) ** 0.5)\n    return n * n == len(ls) and sum((i % 2 for i in list(Counter(ls).values()))) <= n", "entry_point": "word_square", "task_id": "TACO_lite/352", "input_output_examples": [[["SATORAREPOTENETOPERAROTAS"], ["AAAAEEEENOOOOPPRRRRSSTTTT"], ["NOTSQUARE"]], [[true], [true], [false]]]}
{"requirement": "def permute_a_palindrome(input):\n\"\"\"Write a function that will check whether the permutation of an input string is a palindrome. Bonus points for a solution that is efficient and/or that uses _only_ built-in language functions. Deem yourself **brilliant** if you can come up with a version that does not use _any_ function whatsoever.\n\n# Example \n\n  `madam` -> True   \n  `adamm` -> True   \n  `junk`  -> False  \n  \n## Hint \nThe brute force approach would be to generate _all_ the permutations of the string and check each one of them whether it is a palindrome. However, an optimized approach will not require this at all.\n\"\"\"", "inputs": [["a"], ["aa"], ["baa"], ["aab"], ["baabcd"], ["racecars"], ["abcdefghba"], [""]], "outputs": [[true], [true], [true], [true], [false], [false], [false], [true]], "starter_code": "def permute_a_palindrome(input):", "canonical_solution": "def permute_a_palindrome(input):\n    return sum((input.count(c) % 2 for c in set(input))) < 2", "entry_point": "permute_a_palindrome", "task_id": "TACO_lite/353", "input_output_examples": [[["madam"], ["adamm"], ["junk"]], [[true], [true], [false]]]}
{"requirement": "def most_frequent_item_count(collection):\n\"\"\"Complete the function to find the count of the most frequent item of an array. You can assume that input is an array of integers. For an empty array return `0`\n\n## Example\n```python\ninput array: [3, -1, -1, -1, 2, 3, -1, 3, -1, 2, 4, 9, 3]\nouptut: 5 \n```\nThe most frequent number in the array is `-1` and it occurs `5` times.\n\"\"\"", "inputs": [[[3, -1, -1]], [[3, -1, -1, -1, 2, 3, -1, 3, -1, 2, 4, 9, 3]], [[]], [[9]]], "outputs": [[2], [5], [0], [1]], "starter_code": "def most_frequent_item_count(collection):", "canonical_solution": "def most_frequent_item_count(collection):\n    if collection:\n        return max([collection.count(item) for item in collection])\n    return 0", "entry_point": "most_frequent_item_count", "task_id": "TACO_lite/354", "input_output_examples": [[[[3, -1, -1, -1, 2, 3, -1, 3, -1, 2, 4, 9, 3]]], [[5]]]}
{"requirement": "def calculate(a, o, b):\n\"\"\"**Debug** a function called calculate that takes 3 values. The first and third values are numbers. The second value is a character. If the character is \"+\" , \"-\", \"\\*\", or \"/\", the function will return the result of the corresponding mathematical function on the two numbers. If the string is not one of the specified characters, the function should return null.\n\n```\ncalculate(2,\"+\", 4); //Should return 6\ncalculate(6,\"-\", 1.5); //Should return 4.5\ncalculate(-4,\"*\", 8); //Should return -32\ncalculate(49,\"/\", -7); //Should return -7\ncalculate(8,\"m\", 2); //Should return null\ncalculate(4,\"/\",0) //should return null\n```\n\nKind of a fork (not steal :)) of [Basic Calculator][1] kata by [TheDoctor][2]. \n\n[1]: http://www.codewars.com/kata/basic-calculator/javascript\n[2]: http://www.codewars.com/users/528c45adbd9daa384300068d\n\"\"\"", "inputs": [[2, "+", 4], [6, "-", 1.5], [-4, "*", 8], [49, "/", -7], [8, "m", 2], [4, "/", 0], [3.2, "+", 8], [3.2, "-", 8], [3.2, "/", 8], [3.2, "*", 8], [-3, "+", 0], [-3, "-", 0], [-3, "/", 0], [-2, "/", -2], [-2, "codewars", -2], [-3, "*", 0], [0, "*", 0], [0, "**", 0], [-3, "w", 0], [0, "/", 0]], "outputs": [[6], [4.5], [-32], [-7], [null], [null], [11.2], [-4.8], [0.4], [25.6], [-3], [-3], [null], [1], [null], [0], [0], [null], [null], [null]], "starter_code": "def calculate(a, o, b):", "canonical_solution": "from operator import add, sub, mul, truediv\nD = {'+': add, '-': sub, '*': mul, '/': truediv}\n\ndef calculate(a, o, b):\n    try:\n        return D[o](a, b)\n    except:\n        pass", "entry_point": "calculate", "task_id": "TACO_lite/355", "input_output_examples": [[], []]}
{"requirement": "def drop_cap(str_):\n\"\"\"DropCaps means that the first letter of the starting word of the paragraph should be in caps and the remaining lowercase, just like you see in the newspaper. \n\nBut for a change, let's do that for each and every word of the given String. Your task is to capitalize every word that has length greater than 2, leaving smaller words as they are.\n\n*should work also on Leading and Trailing Spaces and caps.\n\n```python\ndrop_cap('apple') => \"Apple\"\ndrop_cap('apple of banana'); => \"Apple of Banana\"\ndrop_cap('one   space'); => \"One   Space\" \ndrop_cap('   space WALK   '); => \"   Space Walk   \" \n```\n\n**Note:** you will be provided atleast one word and should take string as input and return string as output.\n\"\"\"", "inputs": [["Apple Banana"], ["Apple"], [""], ["of"], ["Revelation of the contents outraged American public opinion, and helped generate"], ["more  than    one space between words"], ["  leading spaces"], ["trailing spaces   "], ["ALL CAPS CRAZINESS"], ["rAnDoM CaPs CrAzInEsS"]], "outputs": [["Apple Banana"], ["Apple"], [""], ["of"], ["Revelation of The Contents Outraged American Public Opinion, And Helped Generate"], ["More  Than    One Space Between Words"], ["  Leading Spaces"], ["Trailing Spaces   "], ["All Caps Craziness"], ["Random Caps Craziness"]], "starter_code": "def drop_cap(str_):", "canonical_solution": "def drop_cap(str_):\n    return ' '.join((w.capitalize() if len(w) > 2 else w for w in str_.split(' ')))", "entry_point": "drop_cap", "task_id": "TACO_lite/356", "input_output_examples": [[["apple"], ["apple of banana"], ["one   space"], ["   space WALK   "]], [["Apple"], ["Apple of Banana"], ["One   Space"], ["   Space Walk   "]]]}
{"requirement": "def black_or_white_key(key_press_count):\n\"\"\"## Your Story\n\"A *piano* in the home meant something.\" - *Fried Green Tomatoes at the Whistle Stop Cafe*\n\nYou've just realized a childhood dream by getting a beautiful and beautiful-sounding upright piano from a friend who was leaving the country. You immediately started doing things like playing \"Heart and Soul\" over and over again, using one finger to pick out any melody that came into your head, requesting some sheet music books from the library, signing up for some MOOCs like Developing Your Musicianship, and wondering if you will think of any good ideas for writing piano-related katas and apps. \n\nNow you're doing an exercise where you play the very first (leftmost, lowest in pitch) key on the 88-key keyboard, which (as shown below) is white, with the little finger on your left hand, then the second key, which is black, with the ring finger on your left hand, then the third key, which is white, with the middle finger on your left hand, then the fourth key, also white, with your left index finger, and then the fifth key, which is black, with your left thumb. Then you play the sixth key, which is white, with your right thumb, and continue on playing the seventh, eighth, ninth, and tenth keys with the other four fingers of your right hand. Then for the eleventh key you go back to your left little finger, and so on. Once you get to the rightmost/highest, 88th, key, you start all over again with your left little finger on the first key. Your thought is that this will help you to learn to move smoothly and with uniform pressure on the keys from each finger to the next and back and forth between hands.\n\n\n\nYou're not saying the names of the notes while you're doing this, but instead just counting each key press out loud (not starting again at 1 after 88, but continuing on to 89 and so forth) to try to keep a steady rhythm going and to see how far you can get before messing up. You move gracefully and with flourishes, and between screwups you hear, see, and feel that you are part of some great repeating progression between low and high notes and black and white keys. \n\n## Your Function\nThe function you are going to write is not actually going to help you with your piano playing, but just explore one of the patterns you're experiencing: Given the number you stopped on, was it on a black key or a white key? For example, in the description of your piano exercise above, if you stopped at 5, your left thumb would be on the fifth key of the piano, which is black. Or if you stopped at 92, you would have gone all the way from keys 1 to 88 and then wrapped around, so that you would be on the fourth key, which is white.\n\nYour function will receive an integer between 1 and 10000 (maybe you think that in principle it would be cool to count up to, say, a billion, but considering how many years it would take it is just not possible) and return the string \"black\" or \"white\" -- here are a few more examples:\n```\n1     \"white\"\n12    \"black\"\n42    \"white\"\n100   \"black\"\n2017  \"white\"\n```\nHave fun! And if you enjoy this kata, check out the sequel: Piano Kata, Part 2\n\"\"\"", "inputs": [[1], [5], [12], [42], [88], [89], [92], [100], [111], [200], [2017]], "outputs": [["white"], ["black"], ["black"], ["white"], ["white"], ["white"], ["white"], ["black"], ["white"], ["black"], ["white"]], "starter_code": "def black_or_white_key(key_press_count):", "canonical_solution": "def black_or_white_key(key_press_count):\n    return 'black' if (key_press_count - 1) % 88 % 12 in [1, 4, 6, 9, 11] else 'white'", "entry_point": "black_or_white_key", "task_id": "TACO_lite/357", "input_output_examples": [[[5], [92], [1], [12], [42], [100], [2017]], [["black"], ["white"], ["white"], ["black"], ["white"], ["black"], ["white"]]]}
{"requirement": "def capitalize(s, ind):\n\"\"\"Given a string and an array of integers representing indices, capitalize all letters at the given indices. \n\nFor example:\n\n* `capitalize(\"abcdef\",[1,2,5]) = \"aBCdeF\"`\n* `capitalize(\"abcdef\",[1,2,5,100]) = \"aBCdeF\"`. There is no index 100.\n\nThe input will be a lowercase string with no spaces and an array of digits.\n\nGood luck!\n\nBe sure to also try: \n\n[Alternate capitalization](https://www.codewars.com/kata/59cfc000aeb2844d16000075)\n\n[String array revisal](https://www.codewars.com/kata/59f08f89a5e129c543000069)\n\"\"\"", "inputs": [["abcdef", [1, 2, 5]], ["abcdef", [1, 2, 5, 100]], ["codewars", [1, 3, 5, 50]], ["abracadabra", [2, 6, 9, 10]], ["codewarriors", [5]], ["indexinglessons", [0]]], "outputs": [["aBCdeF"], ["aBCdeF"], ["cOdEwArs"], ["abRacaDabRA"], ["codewArriors"], ["Indexinglessons"]], "starter_code": "def capitalize(s, ind):", "canonical_solution": "def capitalize(s, ind):\n    ind = set(ind)\n    return ''.join((c.upper() if i in ind else c for i, c in enumerate(s)))", "entry_point": "capitalize", "task_id": "TACO_lite/358", "input_output_examples": [[["abcdef", [1, 2, 5]], ["abcdef", [1, 2, 5, 100]]], [["aBCdeF"], ["aBCdeF"]]]}
{"requirement": "def exchange_sort(sequence):\n\"\"\"# Task\n Sorting is one of the most basic computational devices used in Computer Science. \n \n Given a sequence (length ≤ 1000) of 3 different key values (7, 8, 9), your task is to find the minimum number of exchange operations necessary to make the sequence sorted. \n\n One operation is the switching of 2 key values in the sequence.\n\n# Example\n\n For `sequence = [7, 7, 8, 8, 9, 9]`, the result should be `0`.\n \n It's already a sorted sequence.\n\n For `sequence = [9, 7, 8, 8, 9, 7]`, the result should be `1`.\n \n We can switching `sequence[0]` and `sequence[5]`.\n \n For `sequence = [8, 8, 7, 9, 9, 9, 8, 9, 7]`, the result should be `4`.\n \n We can:\n```\n [8, 8, 7, 9, 9, 9, 8, 9, 7] \n switching sequence[0] and sequence[3]\n --> [9, 8, 7, 8, 9, 9, 8, 9, 7]\n switching sequence[0] and sequence[8]\n --> [7, 8, 7, 8, 9, 9, 8, 9, 9]\n switching sequence[1] and sequence[2]\n --> [7, 7, 8, 8, 9, 9, 8, 9, 9]\n switching sequence[5] and sequence[7]\n --> [7, 7, 8, 8, 8, 9, 9, 9, 9] \n```\nSo `4` is the minimum number of operations for the sequence to become sorted.\n\n# Input/Output\n\n\n - `[input]` integer array `sequence`\n\n  The Sequence.\n\n\n - `[output]` an integer\n\n  the minimum number of operations.\n\"\"\"", "inputs": [[[7, 7, 8, 8, 9, 9]], [[9, 7, 8, 8, 9, 7]], [[8, 8, 7, 9, 9, 9, 8, 9, 7]], [[9, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 7, 7]], [[9, 9, 9, 7, 7, 8, 9, 7, 8, 9, 7, 9]], [[9, 9, 7, 7, 8, 8]], [[9, 7, 9]], [[8, 7, 8]], [[7, 8, 7, 8]], [[8, 8, 7, 8]], [[8, 8, 7, 7, 8]]], "outputs": [[0], [1], [4], [6], [4], [4], [1], [1], [1], [1], [2]], "starter_code": "def exchange_sort(sequence):", "canonical_solution": "from collections import Counter\n\ndef exchange_sort(sequence):\n    swaps, cnt = (0, Counter())\n    for a, b in zip(sequence, sorted(sequence)):\n        if cnt[b, a] > 0:\n            cnt[b, a] -= 1\n            swaps += 1\n        elif a != b:\n            cnt[a, b] += 1\n    return swaps + sum(cnt.values()) // 3 * 2", "entry_point": "exchange_sort", "task_id": "TACO_lite/359", "input_output_examples": [[[7, 7, 8, 8, 9, 9], [9, 7, 8, 8, 9, 7], [8, 8, 7, 9, 9, 9, 8, 9, 7]], [[0], [1], 4]]}
{"requirement": "def presentation_agenda(friend_list):\n\"\"\"A group of friends (n >= 2) have reunited for a get-together after \na very long time. \n\nThey agree that they will make presentations on holiday destinations \nor expeditions they have been to only if it satisfies **one simple rule**: \n> the holiday/journey being presented must have been visited _only_ by the presenter and no one else from the audience.\n\nWrite a program to output the presentation agenda, including the\npresenter and their respective presentation titles. \n\n---\n### EXAMPLES\n\n```python\npresentation_agenda([\n    {'person': 'Abe', 'dest': ['London', 'Dubai']},\n    {'person': 'Bond', 'dest': ['Melbourne', 'Dubai']}\n]) == [{'person': 'Abe', 'dest': ['London']},\n       {'person': 'Bond', 'dest': ['Melbourne']}]\n\npresentation_agenda([\n    {'person': 'Abe', 'dest': ['Dubai']},\n    {'person': 'Brad', 'dest': ['Dubai']}\n]) == []\n\npresentation_agenda([\n    {'person': 'Abe', 'dest': ['London', 'Dubai']},\n    {'person': 'Bond', 'dest': ['Melbourne', 'Dubai']},\n    {'person': 'Carrie', 'dest': ['Melbourne']},\n    {'person': 'Damu', 'dest': ['Melbourne', 'Dubai', 'Paris']}\n]) == [{'person': 'Abe',  'dest': ['London']},\n       {'person': 'Damu', 'dest': ['Paris']}]\n\n```\n\"\"\"", "inputs": [[[{"person": "Abe", "dest": ["London", "Dubai"]}, {"person": "Bond", "dest": ["Melbourne", "Dubai"]}]], [[{"person": "Abe", "dest": ["Dubai"]}, {"person": "Brad", "dest": ["Dubai"]}]], [[{"person": "Abe", "dest": ["London", "Dubai"]}, {"person": "Bond", "dest": ["Melbourne", "Dubai"]}, {"person": "Carrie", "dest": ["Melbourne"]}, {"person": "Damu", "dest": ["Melbourne", "Dubai", "Paris"]}]], [[{"person": "John", "dest": ["Ahmedabad", "Baghdad", "Delhi", "Dhaka"]}, {"person": "Mickeal Angelo", "dest": ["Ahmedabad", "Baghdad", "Delhi", "Hong Kong", "Istanbul", "Jakarta", "Mumbai", "Santiago", "Singapore"]}, {"person": "Gandalf", "dest": ["Chennai", "Hong Kong"]}]]], "outputs": [[[{"person": "Abe", "dest": ["London"]}, {"person": "Bond", "dest": ["Melbourne"]}]], [[]], [[{"person": "Abe", "dest": ["London"]}, {"person": "Damu", "dest": ["Paris"]}]], [[{"person": "John", "dest": ["Dhaka"]}, {"person": "Mickeal Angelo", "dest": ["Istanbul", "Jakarta", "Mumbai", "Santiago", "Singapore"]}, {"person": "Gandalf", "dest": ["Chennai"]}]]], "starter_code": "def presentation_agenda(friend_list):", "canonical_solution": "from collections import Counter\n\ndef presentation_agenda(friend_list):\n    uniqueDest = {d for d, c in Counter((d for p in friend_list for d in p['dest'])).items() if c == 1}\n    pFilteredDest = tuple(((p['person'], [d for d in p['dest'] if d in uniqueDest]) for p in friend_list))\n    return [{'person': name, 'dest': lst} for name, lst in pFilteredDest if lst]", "entry_point": "presentation_agenda", "task_id": "TACO_lite/360", "input_output_examples": [[[{"person": "Abe", "dest": ["London", "Dubai"]}, {"person": "Bond", "dest": ["Melbourne", "Dubai"]}], [{"person": "Abe", "dest": ["Dubai"]}, {"person": "Brad", "dest": ["Dubai"]}], [{"person": "Abe", "dest": ["London", "Dubai"]}, {"person": "Bond", "dest": ["Melbourne", "Dubai"]}, {"person": "Carrie", "dest": ["Melbourne"]}, {"person": "Damu", "dest": ["Melbourne", "Dubai", "Paris"]}]], [[{"person": "Abe", "dest": ["London"]}, {"person": "Bond", "dest": ["Melbourne"]}], [], [{"person": "Abe", "dest": ["London"]}, {"person": "Damu", "dest": ["Paris"]}]]]}
{"requirement": "def interpreter(code, tape):\n\"\"\"# Esolang Interpreters #2 - Custom Smallfuck Interpreter\n\n## About this Kata Series\n\n\"Esolang Interpreters\" is a Kata Series that originally began as three separate, independent esolang interpreter Kata authored by [@donaldsebleung](http://codewars.com/users/donaldsebleung) which all shared a similar format and were all somewhat inter-related.  Under the influence of [a fellow Codewarrior](https://www.codewars.com/users/nickkwest), these three high-level inter-related Kata gradually evolved into what is known today as the \"Esolang Interpreters\" series.\n\nThis series is a high-level Kata Series designed to challenge the minds of bright and daring programmers by implementing interpreters for various [esoteric programming languages/Esolangs](http://esolangs.org), mainly [Brainfuck](http://esolangs.org/wiki/Brainfuck) derivatives but not limited to them, given a certain specification for a certain Esolang.  Perhaps the only exception to this rule is the very first Kata in this Series which is intended as an introduction/taster to the world of esoteric programming languages and writing interpreters for them.\n\n## The Language\n\nSmallfuck is an [esoteric programming language/Esolang](http://esolangs.org) invented in 2002 which is a sized-down variant of the famous [Brainfuck](http://esolangs.org/wiki/Brainfuck) Esolang.  Key differences include:\n\n- Smallfuck operates only on bits as opposed to bytes\n- It has a limited data storage which varies from implementation to implementation depending on the size of the tape\n- It does not define input or output - the \"input\" is encoded in the initial state of the data storage (tape) and the \"output\" should be decoded in the final state of the data storage (tape)\n\nHere are a list of commands in Smallfuck:\n\n- `>` - Move pointer to the right (by 1 cell)\n- `<` - Move pointer to the left (by 1 cell)\n- `*` - Flip the bit at the current cell\n- `[` - Jump past matching `]` if value at current cell is `0`\n- `]` - Jump back to matching `[` (if value at current cell is nonzero)\n\nAs opposed to Brainfuck where a program terminates only when all of the commands in the program have been considered (left to right), Smallfuck terminates when any of the two conditions mentioned below become true:\n\n- All commands have been considered from left to right\n- The pointer goes out-of-bounds (i.e. if it moves to the left of the first cell or to the right of the last cell of the tape)\n\nSmallfuck is considered to be Turing-complete **if and only if** it had a tape of infinite length; however, since the length of the tape is always defined as finite (as the interpreter cannot return a tape of infinite length), its computational class is of bounded-storage machines with bounded input.\n\nMore information on this Esolang can be found [here](http://esolangs.org/wiki/Smallfuck).\n\n## The Task\n\nImplement a custom Smallfuck interpreter `interpreter()` (`interpreter` in Haskell and F#, `Interpreter` in C#, `custom_small_fuck:interpreter/2` in Erlang) which accepts the following arguments:\n\n1. `code` - **Required**.  The Smallfuck program to be executed, passed in as a string.  May contain non-command characters.  Your interpreter should simply ignore any non-command characters.\n2. `tape` - **Required**.  The initial state of the data storage (tape), passed in **as a string**.  For example, if the string `\"00101100\"` is passed in then it should translate to something of this form within your interpreter: `[0, 0, 1, 0, 1, 1, 0, 0]`.  You may assume that all input strings for `tape` will be non-empty and will only contain `\"0\"`s and `\"1\"`s.\n\nYour interpreter should return the final state of the data storage (tape) **as a string** in the same format that it was passed in.  For example, if the tape in your interpreter ends up being `[1, 1, 1, 1, 1]` then return the string `\"11111\"`.\n\n*NOTE: The pointer of the interpreter always starts from the first (leftmost) cell of the tape, same as in Brainfuck.*\n\nGood luck :D\n\n## Kata in this Series\n\n1. [Esolang Interpreters #1 - Introduction to Esolangs and My First Interpreter (MiniStringFuck)](https://www.codewars.com/kata/esolang-interpreters-number-1-introduction-to-esolangs-and-my-first-interpreter-ministringfuck)\n2. **Esolang Interpreters #2 - Custom Smallfuck Interpreter**\n3. [Esolang Interpreters #3 - Custom Paintfuck Interpreter](http://codewars.com/kata/esolang-interpreters-number-3-custom-paintf-star-star-k-interpreter)\n4. [Esolang Interpreters #4 - Boolfuck Interpreter](http://codewars.com/kata/esolang-interpreters-number-4-boolfuck-interpreter)\n\"\"\"", "inputs": [["*", "00101100"], [">*>*", "00101100"], ["*>*>*>*>*>*>*>*", "00101100"], ["*>*>>*>>>*>*", "00101100"], [">>>>>*<*<<*", "00101100"], ["iwmlis *!BOSS 333 ^v$#@", "00101100"], [">*>*;;;.!.,+-++--!!-!!!-", "00101100"], ["    *  >*           >*>*lskdfjsdklfj>*;;+--+--+++--+-+-  lskjfiom,x>*sdfsdf>sdfsfsdfsdfwervbnbvn*,.,.,,.,.  >*", "00101100"], ["*,,...,..,..++-->++++-*>--+>*>+++->>..,+-,*>*", "00101100"], [">>nssewww>>wwess>*<nnn*<<ee*", "00101100"], ["*>>>*>*>>*>>>>>>>*>*>*>*>>>**>>**", "0000000000000000"], ["<<<*>*>*>*>*>>>*>>>>>*>*", "0000000000000000"], ["*>*>*>>>*>>>>>*<<<<<<<<<<<<<<<<<<<<<*>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>*>*>*", "11111111111111111111111111111111"], [">>*>*>*<<*<*<<*>*", "1101"], ["*[>*]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["[>*]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["*>*>>>*>*>>>>>*>[>*]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["*>*>>>*>*>>>>>*[>*]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["*[>[*]]", "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"], ["*[>[*]]", "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"], ["[[]*>*>*>]", "000"], ["*>[[]*>]<*", "100"], ["[*>[>*>]>]", "11001"], ["[>[*>*>*>]>]", "10110"]], "outputsstarter_code": "def interpreter(code, tape):", "canonical_solution": "def interpreter(code, tape):\n    tape = list(map(int, tape))\n    ptr = step = loop = 0\n    while 0 <= ptr < len(tape) and step < len(code):\n        command = code[step]\n        if loop:\n            if command == '[':\n                loop += 1\n            elif command == ']':\n                loop -= 1\n        elif command == '>':\n            ptr += 1\n        elif command == '<':\n            ptr -= 1\n        elif command == '*':\n            tape[ptr] ^= 1\n        elif command == '[' and tape[ptr] == 0:\n            loop += 1\n        elif command == ']' and tape[ptr] == 1:\n            loop -= 1\n        step += 1 if not loop else loop // abs(loop)\n    return ''.join(map(str, tape))", "entry_point": "interpreter", "task_id": "TACO_lite/361", "input_output_examples": [[["*", "00101100"]], [["10101100"]]]}
{"requirement": "def crashing_weights(weights):\n\"\"\"You are stacking some boxes containing gold weights on top of each other. If a box contains more weight than the box below it, it will crash downwards and combine their weights. e.g. If we stack [2] on top of [1], it will crash downwards and become a single box of weight [3]\n```\n[2]\n[1] --> [3]\n```\nGiven an array of arrays, return the bottom row (i.e. the last array) after all crashings are complete.\n```\ncrashing_weights([[1, 2, 3],  --> [[1, 2,  ],      [[1,  ,  ]],\n                  [2, 3, 1],  -->  [2, 3, 4],  -->  [2, 2,  ],\n                  [3, 1, 2]])      [3, 1, 2]]  -->  [3, 4, 6]]\n\ntherefore return [3, 4, 6]\n```\n\n## More details\n\nboxes can be stacked to any height, and the crashing effect can snowball:\n```\n[3]\n[2]     [5]\n[4] --> [4] --> [9]\n```\nCrashing should always start from as high up as possible -- this can alter the outcome! e.g.\n```\n[3]                      [3]\n[2]     [5]              [2]     [3]\n[1] --> [1] --> [6], not [1] --> [3] \n```\nWeights will always be integers. The matrix (array of arrays) may have any height or width > 1, and may not be square, but it will always be \"nice\" (all rows will have the same number of columns, etc).\n\"\"\"", "inputs": [[[[1]]], [[[1, 2]]], [[[2], [1]]]], "outputs": [[[1]], [[1, 2]], [[3]]], "starter_code": "def crashing_weights(weights):", "canonical_solution": "from functools import reduce\n\ndef crashing_weights(weights):\n    return reduce(lambda a, b: [a1 + b1 if a1 > b1 else b1 for a1, b1 in zip(a, b)], weights)", "entry_point": "crashing_weights", "task_id": "TACO_lite/362", "input_output_examples": [[[[1, 2, 3], [2, 3, 1], [3, 1, 2]], [[3], [2], [4]], [[3], [2], [1]]], [[3, 4, 6], [9], [6]]]}
{"requirement": "def circle_slash(n):\n\"\"\"# Task\n Suppose there are `n` people standing in a circle and they are numbered 1 through n in order. \n \n Person 1 starts off with a sword and kills person 2. He then passes the sword to the next person still standing, in this case person 3. Person 3 then uses the sword to kill person 4, and passes it to person 5. This pattern continues around and around the circle until just one person remains.\n\n What is the number of this person? \n\n# Example: \n\n For `n = 5`, the result should be `3`.\n```\n1 kills 2, passes to 3.\n3 kills 4, passes to 5.\n5 kills 1, passes to 3.\n3 kills 5 and wins.```\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of people. 1 through n standing in a circle.\n  \n  `1 <= n <= 1e9`\n  \n  \n - `[output]` an integer\n\n  The index of the last person standing.\n\"\"\"", "inputs": [[5], [11], [1], [2], [3], [4], [8], [16], [15], [31]], "outputs": [[3], [7], [1], [1], [3], [1], [1], [1], [15], [31]], "starter_code": "def circle_slash(n):", "canonical_solution": "def circle_slash(n):\n    return int(bin(n)[3:] + '1', 2)", "entry_point": "circle_slash", "task_id": "TACO_lite/363", "input_output_examples": [[[5]], [[3]]]}
{"requirement": "def tankvol(h, d, vt):\n\"\"\"To introduce the problem think to my neighbor who drives a tanker truck. \nThe level indicator is down and he is worried\nbecause he does not know if he will be able to make deliveries. \nWe put the truck on a horizontal ground and measured the height of the liquid in the tank.\n\nFortunately the tank is a perfect cylinder and the vertical walls on each end are flat.\nThe height of the remaining liquid is `h`, the diameter of the cylinder is `d`,\nthe total volume is `vt` (h, d, vt are positive or null integers). \nYou can assume that `h` <= `d`.\n\nCould you calculate the remaining volume of the liquid?\nYour function `tankvol(h, d, vt)` returns an integer which is the truncated result (e.g floor)\nof your float calculation.\n\nExamples:\n\n```\ntankvol(40,120,3500) should return 1021 (calculation gives about: 1021.26992027)\n\ntankvol(60,120,3500) should return 1750\n\ntankvol(80,120,3500) should return 2478 (calculation gives about: 2478.73007973)\n```\n\nTank vertical section:\n\n![alternative text](http://i.imgur.com/wmt0U43.png)\n\"\"\"", "inputs": [[5, 7, 3848], [2, 7, 3848], [2, 8, 5026], [4, 9, 6361], [3, 10, 7853], [3, 5, 1963], [4, 7, 3848], [0, 7, 3848], [7, 7, 3848], [2, 5, 1963], [2, 4, 1256], [4, 10, 7853], [3, 9, 6361], [2, 10, 7853], [5, 9, 6361], [5, 6, 2827], [1, 4, 1256]], "outputs": [[2940], [907], [982], [2731], [1981], [1229], [2272], [0], [3848], [733], [628], [2933], [1856], [1118], [3629], [2517], [245]], "starter_code": "def tankvol(h, d, vt):", "canonical_solution": "import math\n\ndef tankvol(h, d, vt):\n    r = d / 2.0\n    if h == r:\n        return vt / 2\n    half = h > r\n    h = d - h if half else h\n    a = r - h\n    b = math.sqrt(r ** 2 - a ** 2)\n    t = 2 * math.asin(b / r)\n    A = r ** 2 * t / 2 - b * a\n    v = vt * A / (math.pi * r ** 2)\n    return int(vt - v) if half else int(v)", "entry_point": "tankvol", "task_id": "TACO_lite/364", "input_output_examples": [[[40, 120, 3500], [60, 120, 3500], [80, 120, 3500]], [[1021], [1750], [2478]]]}
{"requirement": "def domino_reaction(s):\n\"\"\"You're given a string of dominos. For each slot, there are 3 options:\n\n  * \"|\" represents a standing domino\n\n  * \"/\" represents a knocked over domino\n\n  * \" \" represents a space where there is no domino\n\nFor example: \n\n```python\n\"||| ||||//| |/\"\n```\n\nWhat you must do is find the resulting string if the first domino is pushed over. Now, tipping a domino will cause the next domino to its right to fall over as well, but if a domino is already tipped over, or there is a domino missing, the reaction will stop.\n\nSo in out example above, the result would be:\n\n\"/// ||||//| |/\"\n\nsince the reaction would stop as soon as it gets to a space.\n\"\"\"", "inputs": [["||| ||||//| |/"], ["|||||"], [" ///"], [""], [" "], [" |"], ["||||| |||"], ["|||||/|||"]], "outputs": [["/// ||||//| |/"], ["/////"], [" ///"], [""], [" "], [" |"], ["///// |||"], ["//////|||"]], "starter_code": "def domino_reaction(s):", "canonical_solution": "def domino_reaction(s):\n    ds = ''\n    for i, d in enumerate(s):\n        if d == '|':\n            ds += '/'\n        else:\n            return ds + s[i:]\n    return ds", "entry_point": "domino_reaction", "task_id": "TACO_lite/365", "input_output_examples": [[["||| ||||//| |/"]], [["/// ||||//| |/"]]]}
{"requirement": "def digits_product(product):\n\"\"\"# Task\n Given an integer `product`, find the smallest positive integer the product of whose digits is equal to product. If there is no such integer, return -1 instead.\n\n# Example\n\n For `product = 1`, the output should be `11`;\n \n `1 x 1 = 1` (1 is not a valid result, because it has only 1 digit)\n \n For `product = 12`, the output should be `26`;\n \n `2 x 6 = 12`\n \n For `product = 19`, the output should be `-1`.\n \n No valid result found.\n \n For `product = 450`, the output should be `2559`.\n \n `2 x 5 x 5 x 9 = 450`\n \n For `product = 581`, the output should be `-1`.\n \n No valid result found. \n \n Someone says the output should be `783`, because `7 x 83 = 581`.\n \n Please note: `83` is not a **DIGIT**.\n \n# Input/Output\n\n\n - `[input]` integer `product`\n\n    Constraints: `0 ≤ product ≤ 600`.\n\n\n - `[output]` a positive integer\n\"\"\"", "inputs": [[12], [19], [450], [0], [13], [1], [5], [10]], "outputs": [[26], [-1], [2559], [10], [-1], [11], [15], [25]], "starter_code": "def digits_product(product):", "canonical_solution": "def digits_product(product):\n    if product < 10:\n        return 10 + product\n    n = ''\n    for d in range(9, 1, -1):\n        while not product % d:\n            n += str(d)\n            product //= d\n    return int(n[::-1]) if product == 1 else -1", "entry_point": "digits_product", "task_id": "TACO_lite/366", "input_output_examples": [[[1], [12], [19], [450], [581]], [[11], [26], [-1], [2559], [-1]]]}
{"requirement": "def prod2sum(a, b, c, d):\n\"\"\"We are still with squared integers.\n\nGiven 4 integers `a, b, c, d` we form the sum of the squares of `a` and `b`\nand then the sum of the squares of `c` and `d`. We multiply the two sums hence a number `n` and we try to\ndecompose `n` in a sum of two squares `e` and `f` (e and f integers >= 0) so that `n = e² + f²`. \n\nMore: `e` and `f` must result only from sums (or differences) of products between on the one hand `(a, b)` and on the other `(c, d)` each of `a, b, c, d` taken only once. \nFor example, \nprod2sum(1, 2, 1, 3) should return [[1, 7], [5, 5]]) \nbecause \n```\n1==1*3-1*2\n7==2*3+1*1\n5==1*2+1*3\n```\nSuppose we have `a = 1, b = 2, c = 1, d = 3`. First we calculate the sums \n`1² + 2² = 5 and 1² + 3² = 10` hence `n = 50`.\n\n\n\n`50 = 1² + 7² or 50 = 7² + 1²` (we'll consider that these two solutions are the same)\nor `50 = 5² + 5²`. \n\nThe return of our function will be an array of subarrays (in C an array of Pairs) sorted on the first elements of the subarrays. In each subarray the lower element should be the first.\n\n`prod2sum(1, 2, 1, 3) should return [[1, 7], [5, 5]]`\n\n`prod2sum(2, 3, 4, 5) should return  [[2, 23], [7, 22]]`\n\nbecause `(2² + 3²) * (4² + 5²) = 533 = (7² + 22²) = (23² + 2²)`\n\n`prod2sum(1, 2, 2, 3) should return  [[1, 8], [4, 7]]`\n\n`prod2sum(1, 1, 3, 5) should return  [[2, 8]]` (there are not always 2 solutions).\n\n##Hint\nTake a sheet of paper and with a bit of algebra try to write the product of squared numbers in another way.\n\"\"\"", "inputs": [[1, 2, 1, 3], [2, 3, 4, 5], [1, 2, 2, 3], [1, 1, 3, 5], [10, 11, 12, 13], [1, 20, -4, -5], [100, 100, 100, 100], [0, 0, 0, 0], [-14, 12, -10, 8], [7, 96, -1, 81], [112, 0, 0, 1]], "outputs": [[[[1, 7], [5, 5]]], [[[2, 23], [7, 22]]], [[[1, 8], [4, 7]]], [[[2, 8]]], [[[2, 263], [23, 262]]], [[[75, 104], [85, 96]]], [[[0, 20000]]], [[[0, 0]]], [[[8, 236], [44, 232]]], [[[471, 7783], [663, 7769]]], [[[0, 112]]]], "starter_code": "def prod2sum(a, b, c, d):", "canonical_solution": "def prod2sum(a, b, c, d):\n    e = sorted([abs(a * d - b * c), abs(a * c + b * d)])\n    f = sorted([abs(a * c - b * d), abs(a * d + b * c)])\n    if e == f:\n        return [e]\n    else:\n        return sorted([e, f])", "entry_point": "prod2sum", "task_id": "TACO_lite/367", "input_output_examples": [[[1, 2, 1, 3], [2, 3, 4, 5], [1, 2, 2, 3], [1, 1, 3, 5]], [[[[1, 7], [5, 5]]], [[[2, 23], [7, 22]]], [[[1, 8], [4, 7]]], [[[2, 8]]]]]}
{"requirement": "def solution(string, markers):\n\"\"\"Complete the solution so that it strips all text that follows any of a set of comment markers passed in. Any whitespace at the end of the line should also be stripped out. \n\n**Example:**\n\nGiven an input string of:\n```\napples, pears # and bananas\ngrapes\nbananas !apples\n```\n\nThe output expected would be:\n```\napples, pears\ngrapes\nbananas\n```\n\nThe code would be called like so:\n\n```python\nresult = solution(\"apples, pears # and bananas\\ngrapes\\nbananas !apples\", [\"#\", \"!\"])\n# result should == \"apples, pears\\ngrapes\\nbananas\"\n\n```\n\"\"\"", "inputs": [["apples, pears # and bananas\ngrapes\nbananas !apples", ["#", "!"]], ["a #b\nc\nd $e f g", ["#", "$"]], ["apples, pears # and bananas\ngrapes\nbananas !#apples", ["#", "!"]], ["apples, pears # and bananas\ngrapes\nbananas #!apples", ["#", "!"]], ["apples, pears # and bananas\ngrapes\navocado @apples", ["@", "!"]], ["apples, pears § and bananas\ngrapes\navocado *apples", ["*", "§"]], ["", ["#", "!"]], ["#", ["#", "!"]], ["\n§", ["#", "§"]], ["apples, pears # and bananas\ngrapes\nbananas !apples", []]], "outputs": [["apples, pears\ngrapes\nbananas"], ["a\nc\nd"], ["apples, pears\ngrapes\nbananas"], ["apples, pears\ngrapes\nbananas"], ["apples, pears # and bananas\ngrapes\navocado"], ["apples, pears\ngrapes\navocado"], [""], [""], ["\n"], ["apples, pears # and bananas\ngrapes\nbananas !apples"]], "starter_code": "def solution(string, markers):", "canonical_solution": "def solution(string, markers):\n    parts = string.split('\\n')\n    for s in markers:\n        parts = [v.split(s)[0].rstrip() for v in parts]\n    return '\\n'.join(parts)", "entry_point": "solution", "task_id": "TACO_lite/368", "input_output_examples": [[["apples, pears # and bananas\ngrapes\nbananas !apples", ["#", "!"]]], [["apples, pears\ngrapes\nbananas"]]]}
{"requirement": "def length_of_line(array):\n\"\"\"Find the length between 2 co-ordinates.  The co-ordinates are made of integers between -20 and 20 and will be given in the form of a 2D array:\n\n(0,0) and (5,-7) would be [ [ 0 , 0 ] , [ 5, -7 ] ]\n\nThe function must return the answer rounded to 2 decimal places in the form of a string.\n\n```python\nlength_of_line([[0, 0], [5, -7]]) => \"8.60\"\n```\n\nIf the 2 given co-ordinates are the same, the returned length should be \"0.00\"\n\"\"\"", "inputs": [[[[0, 0], [1, 1]]], [[[0, 0], [-5, -6]]], [[[0, 0], [10, 15]]], [[[0, 0], [5, 1]]], [[[0, 0], [5, 4]]], [[[0, 0], [-7, 4]]], [[[0, 0], [0, 0]]], [[[-3, 4], [10, 5]]]], "outputs": [["1.41"], ["7.81"], ["18.03"], ["5.10"], ["6.40"], ["8.06"], ["0.00"], ["13.04"]], "starter_code": "def length_of_line(array):", "canonical_solution": "from math import sqrt\n\ndef length_of_line(array):\n    x1, y1, x2, y2 = (array[0][0], array[0][1], array[1][0], array[1][1])\n    return '{:.2f}'.format(sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2))", "entry_point": "length_of_line", "task_id": "TACO_lite/369", "input_output_examples": [[[[0, 0], [5, -7]], [[0, 0], [1, 1]], [[0, 0], [0, 0]]], [["8.60"], ["1.41"], ["0.00"]]]}
{"requirement": "def divisors(num):\n\"\"\"Create a function named `divisors`/`Divisors` that takes an integer `n > 1` and returns an array with all of the integer's divisors(except for 1 and the number itself), from smallest to largest. If the number is prime return the string '(integer) is prime' (`null` in C#) (use `Either String a` in Haskell and `Result, String>` in Rust).\n\n#### Example:\n\n```python\ndivisors(12); #should return [2,3,4,6]\ndivisors(25); #should return [5]\ndivisors(13); #should return \"13 is prime\"\n```\n\"\"\"", "inputs": [[15], [253], [24], [13], [3], [29]], "outputs": [[[3, 5]], [[11, 23]], [[2, 3, 4, 6, 8, 12]], ["13 is prime"], ["3 is prime"], ["29 is prime"]], "starter_code": "def divisors(num):", "canonical_solution": "def divisors(num):\n    l = [a for a in range(2, num) if num % a == 0]\n    if len(l) == 0:\n        return str(num) + ' is prime'\n    return l", "entry_point": "divisors", "task_id": "TACO_lite/370", "input_output_examples": [[[12], [25], [13], [15]], [[2, 3, 4, 6], [5], ["13 is prime"], [3, 5]]]}
{"requirement": "def ips_between(start, end):\n\"\"\"```if-not:sql\nImplement a function that receives two IPv4 addresses, and returns the number of addresses between them (including the first one, excluding the last one).\n```\n\n```if:sql\nGiven a database of first and last IPv4 addresses, calculate the number of addresses between them (including the first one, excluding the last one).\n\n## Input\n\n~~~\n---------------------------------\n|     Table    | Column | Type  |\n|--------------+--------+-------|\n| ip_addresses | id     | int   |\n|              | first  | text  |\n|              | last   | text  |\n---------------------------------\n~~~\n\n## Output\n\n~~~\n----------------------\n|   Column    | Type |\n|-------------+------|\n| id          | int  |\n| ips_between | int  |\n----------------------\n~~~\n```\n\nAll inputs will be valid IPv4 addresses in the form of strings. The last address will always be greater than the first one.\n\n___\n\n## Examples\n\n```python\nips_between(\"10.0.0.0\", \"10.0.0.50\")  ==   50 \nips_between(\"10.0.0.0\", \"10.0.1.0\")   ==  256 \nips_between(\"20.0.0.10\", \"20.0.1.0\")  ==  246\n```\n\"\"\"", "inputs": [["150.0.0.0", "150.0.0.1"], ["10.0.0.0", "10.0.0.50"], ["20.0.0.10", "20.0.1.0"], ["10.11.12.13", "10.11.13.0"], ["160.0.0.0", "160.0.1.0"], ["170.0.0.0", "170.1.0.0"], ["50.0.0.0", "50.1.1.1"], ["180.0.0.0", "181.0.0.0"], ["1.2.3.4", "5.6.7.8"]], "outputs": [[1], [50], [246], [243], [256], [65536], [65793], [16777216], [67372036]], "starter_code": "def ips_between(start, end):", "canonical_solution": "from ipaddress import ip_address\n\ndef ips_between(start, end):\n    return int(ip_address(end)) - int(ip_address(start))", "entry_point": "ips_between", "task_id": "TACO_lite/371", "input_output_examples": [[["10.0.0.0", "10.0.0.50"], ["10.0.0.0", "10.0.1.0"], ["20.0.0.10", "20.0.1.0"], ["150.0.0.0", "150.0.0.1"]], [[50], [256], [246], [1]]]}
{"requirement": "def is_vowel(s):\n\"\"\"Implement the function which should return `true` if given object is a vowel (meaning `a, e, i, o, u`), and `false` otherwise.\n\"\"\"", "inputs": [[""], ["a"], ["E"], ["ou"], ["z"], ["lol"]], "outputs": [[false], [true], [true], [false], [false], [false]], "starter_code": "def is_vowel(s):", "canonical_solution": "def is_vowel(s):\n    return s.lower() in set('aeiou')", "entry_point": "is_vowel", "task_id": "TACO_lite/372", "input_output_examples": [[[""]], [[false]]]}
{"requirement": "def descriptions(arr):\n\"\"\"# Task\n A range-collapse representation of an array of integers looks like this: `\"1,3-6,8\"`, where `3-6` denotes the range from `3-6`, i.e. `[3,4,5,6]`. \n \n Hence `\"1,3-6,8\"` = `[1,3,4,5,6,8]`. Some other range-collapse representations of `[1,3,4,5,6,8]` include `\"1,3-5,6,8\", \"1,3,4,5,6,8\", etc`.\n\n Each range is written in the following format `\"a-b\"`, where `a < b`, and the whole range must belong to the array in an increasing order.\n\n You are given an array `arr`. Your task is to find the number of different range-collapse representations of the given array.\n\n# Example\n \n For `arr = [1,3,4,5,6,8]`, the result should be `8`.\n ```\n \"1,3-4,5,6,8\"\n \"1,3-4,5-6,8\"\n \"1,3-5,6,8\"\n \"1,3-6,8\"\n \"1,3,4-5,6,8\"\n \"1,3,4-6,8\"\n \"1,3,4,5-6,8\"\n \"1,3,4,5,6,8\"```\n\n# Input/OutPut\n\n\n - `[input]` integer array `arr`\n\n  sorted array of different positive integers.\n\n\n - `[output]` an integer\n\n  the number of different range-collapse representations of the given array.\n\"\"\"", "inputs": [[[1, 3, 4, 5, 6, 8]], [[1, 2, 3]], [[11, 43, 66, 123]], [[3, 4, 5, 8, 9, 10, 11, 23, 43, 66, 67]]], "outputs": [[8], [4], [1], [64]], "starter_code": "def descriptions(arr):", "canonical_solution": "def descriptions(arr):\n    return 2 ** sum((a + 1 == b for a, b in zip(arr, arr[1:])))", "entry_point": "descriptions", "task_id": "TACO_lite/373", "input_output_examples": [[[[1, 3, 4, 5, 6, 8]]], [[8]]]}
{"requirement": "def split_exp(n):\n\"\"\"# Task\n You are given a decimal number `n` as a **string**. Transform it into an array of numbers (given as **strings** again), such that each number has only one nonzero digit and their sum equals n.\n\n Each number in the output array should be written without any leading and trailing zeros.\n\n# Input/Output\n\n\n - `[input]` string `n`\n\n A non-negative number.\n \n `1 ≤ n.length ≤ 30.`\n\n\n - `[output]` a string array\n\n  Elements in the array should be sorted in descending order.\n\n\n# Example\n\n For `n = \"7970521.5544\"` the output should be:\n ```\n [\"7000000\", \n \"900000\", \n \"70000\", \n \"500\", \n \"20\", \n \"1\", \n \".5\",\n \".05\",\n \".004\",\n \".0004\"]\n  ```\n For `n = \"7496314\"`, the output should be:\n ```\n [\"7000000\", \n \"400000\", \n \"90000\", \n \"6000\", \n \"300\", \n \"10\", \n \"4\"]\n```\n\n For `n = \"0\"`, the output should be `[]`\n\"\"\"", "inputs": [["7970521.5544"], ["7496314"], ["0"], ["6"], ["1.0000000000"], ["0000000000.1"], ["1010101"], ["1234567890.1234567890"]], "outputs": [[["7000000", "900000", "70000", "500", "20", "1", ".5", ".05", ".004", ".0004"]], [["7000000", "400000", "90000", "6000", "300", "10", "4"]], [[]], [["6"]], [["1"]], [[".1"]], [["1000000", "10000", "100", "1"]], [["1000000000", "200000000", "30000000", "4000000", "500000", "60000", "7000", "800", "90", ".1", ".02", ".003", ".0004", ".00005", ".000006", ".0000007", ".00000008", ".000000009"]]], "starter_code": "def split_exp(n):", "canonical_solution": "def split_exp(n):\n    dot = n.find('.')\n    if dot == -1:\n        dot = len(n)\n    return [d + '0' * (dot - i - 1) if i < dot else '.{}{}'.format('0' * (i - dot - 1), d) for i, d in enumerate(n) if i != dot and d != '0']", "entry_point": "split_exp", "task_id": "TACO_lite/374", "input_output_examples": [[["7970521.5544"], ["7496314"], ["0"]], [[["7000000", "900000", "70000", "500", "20", "1", ".5", ".05", ".004", ".0004"]], [["7000000", "400000", "90000", "6000", "300", "10", "4"]], [[]]]]}
{"requirement": "def solve(n):\n\"\"\"In this Kata, you will be given a number `n` (`n > 0`) and your task will be to return the smallest square number `N` (`N > 0`) such that `n + N` is also a perfect square. If there is no answer, return `-1` (`nil` in Clojure, `Nothing` in Haskell, `None` in Rust). \n\n```clojure \nsolve 13 = 36\n; because 36 is the smallest perfect square that can be added to 13 to form a perfect square => 13 + 36 = 49\n\nsolve 3 = 1 ; 3 + 1 = 4, a perfect square\nsolve 12 = 4 ; 12 + 4 = 16, a perfect square\nsolve 9 = 16 \nsolve 4 = nil\n```\n\n```csharp \nsolve(13) = 36\n//because 36 is the smallest perfect square that can be added to 13 to form a perfect square => 13 + 36 = 49\n\nsolve(3) = 1 // 3 + 1 = 4, a perfect square\nsolve(12) = 4 // 12 + 4 = 16, a perfect square\nsolve(9) = 16 \nsolve(4) = -1\n```\n\n```haskell \nsolve 13 = Just 36\n-- because 36 is the smallest perfect square that can be added to 13 to form a perfect square => 13 + 36 = 49\n\nsolve 3 = Just 1 -- 3 + 1 = 4, a perfect square\nsolve 12 = Just 4 -- 12 + 4 = 16, a perfect square\nsolve 9 = Just 16 \nsolve 4 = Nothing\n```\n\n```python\nsolve(13) = 36\n# because 36 is the smallest perfect square that can be added to 13 to form a perfect square => 13 + 36 = 49\n\nsolve(3) = 1 # 3 + 1 = 4, a perfect square\nsolve(12) = 4 # 12 + 4 = 16, a perfect square\nsolve(9) = 16 \nsolve(4) = -1\n```\n\nMore examples in test cases. \n\nGood luck!\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [7], [8], [9], [10], [11], [13], [17], [88901], [290101]], "outputs": [[-1], [-1], [1], [-1], [4], [9], [1], [16], [-1], [25], [36], [64], [5428900], [429235524]], "starter_code": "def solve(n):", "canonical_solution": "def solve(n):\n    for i in range(int(n ** 0.5), 0, -1):\n        x = n - i ** 2\n        if x > 0 and x % (2 * i) == 0:\n            return ((n - i ** 2) // (2 * i)) ** 2\n    return -1", "entry_point": "solve", "task_id": "TACO_lite/375", "input_output_examples": [[[13], [3], [12], [9], [4]], [[36], [1], [4], [16], [-1]]]}
{"requirement": "def array_center(lst):\n\"\"\"# Task\nConsider an array of integers `a`. Let `min(a)` be its minimal element, and let `avg(a)` be its mean.\n\nDefine the center of the array `a` as array `b` such that:\n\n```\n- b is formed from a by erasing some of its elements.\n- For each i, |b[i] - avg(a)| < min(a).\n- b has the maximum number of elements among all the arrays\n  satisfying the above requirements.\n```\n\nGiven an array of integers, return its center.\n\n\n\n# Input/Output\n\n\n`[input]` integer array `a`\n\n Unsorted non-empty array of integers.\n\n`2 ≤ a.length ≤ 50,`\n\n`1 ≤ a[i] ≤ 350.`\n\n`[output]` an integer array\n\n\n# Example\n\nFor `a = [8, 3, 4, 5, 2, 8]`, the output should be `[4, 5]`.\n\nHere `min(a) = 2, avg(a) = 5`.\n\nFor `a = [1, 3, 2, 1]`, the output should be `[1, 2, 1]`.\n\nHere `min(a) = 1, avg(a) = 1.75`.\n\"\"\"", "inputs": [[[8, 3, 4, 5, 2, 8]], [[1, 3, 2, 1]], [[10, 11, 12, 13, 14]]], "outputs": [[[4, 5]], [[1, 2, 1]], [[10, 11, 12, 13, 14]]], "starter_code": "def array_center(lst):", "canonical_solution": "def array_center(lst):\n    return [i for i in lst if abs(i - sum(lst) * 1.0 / len(lst)) < min(lst)]", "entry_point": "array_center", "task_id": "TACO_lite/376", "input_output_examples": [[[[8, 3, 4, 5, 2, 8]], [[1, 3, 2, 1]]], [[[4, 5]], [[1, 2, 1]]]]}
{"requirement": "A lot of goods have an  International Article Number (formerly known as \"European Article Number\") abbreviated \"EAN\". EAN is a 13-digits barcode consisting of 12-digits data followed by a single-digit checksum (EAN-8 is not considered in this kata).\n\n\nThe single-digit checksum is calculated as followed (based upon the 12-digit data):\n\nThe digit at the first, third, fifth, etc. position (i.e. at the odd position) has to be multiplied with \"1\". \nThe digit at the second, fourth, sixth, etc. position (i.e. at the even position) has to be multiplied with \"3\".\nSum these results. \n\nIf this sum is dividable by 10, the checksum is 0. Otherwise the checksum has the following formula:\n\n  checksum = 10 - (sum mod 10)\n\nFor example, calculate the checksum for \"400330101839\" (= 12-digits data):\n\n4·1 + 0·3 + 0·1 + 3·3 + 3·1 + 0·3 + 1·1 + 0·3 + 1·1 + 8·3 + 3·1 + 9·3\n= 4 + 0 + 0 + 9 + 3 + 0 + 1 + 0 + 1 + 24 + 3 + 27 \n= 72\n10 - (72 mod 10) = 8 ⇒ Checksum: 8\n\nThus, the EAN-Code is 4003301018398 (= 12-digits data followed by single-digit checksum).\n \nYour Task\nValidate a given EAN-Code. Return true if the given EAN-Code is valid, otherwise false.\n\nAssumption\nYou can assume the given code is syntactically valid, i.e. it only consists of numbers and it exactly has a length of 13 characters.\n\nExamples\n\n```python\nvalidate_ean(\"4003301018398\") # => True\nvalidate_ean(\"4003301018392\") # => False\n```\n\nGood Luck and have fun.", "inputs": [["9783815820865"], ["9783815820864"], ["9783827317100"]], "outputs": [[true], [false], [true]], "starter_code": "def validate_ean(code):\n\t", "canonical_solution": "validate_ean = lambda code: (sum(map(int, code[0::2])) + sum(map(int, code[1::2])) * 3) % 10 == 0", "entry_point": "validate_ean", "task_id": "TACO_lite/377", "input_output_examples": [[["4003301018398"], ["4003301018392"]], [[true], [false]]]}
{"requirement": "def is_kiss(words):\n\"\"\"KISS stands for Keep It Simple Stupid.\nIt is a design principle for keeping things simple rather than complex.\n\nYou are the boss of Joe.\n\nJoe is submitting words to you to publish to a blog. He likes to complicate things.\n\nDefine a function that determines if Joe's work is simple or complex.\n\nInput will be non emtpy strings with no punctuation.\n\nIt is simple if:\n``` the length of each word does not exceed the amount of words in the string ```\n(See example test cases)\n\nOtherwise it is complex.\n\nIf complex:\n```python\nreturn \"Keep It Simple Stupid\"\n```\nor if it was kept simple:\n```python\nreturn \"Good work Joe!\"\n```\n\nNote: Random test are random and nonsensical. Here is a silly example of a random test:\n```python\n\"jump always mostly is touchy dancing choice is pineapples mostly\"\n```\n\"\"\"", "inputs": [["Joe had a bad day"], ["Joe had some bad days"], ["Joe is having no fun"], ["Sometimes joe cries for hours"], ["Joe is having lots of fun"], ["Joe is working hard a lot"], ["Joe listened to the noise and it was an onamonapia"], ["Joe listened to the noises and there were some onamonapias"]], "outputs": [["Good work Joe!"], ["Good work Joe!"], ["Keep It Simple Stupid"], ["Keep It Simple Stupid"], ["Good work Joe!"], ["Keep It Simple Stupid"], ["Good work Joe!"], ["Keep It Simple Stupid"]], "starter_code": "def is_kiss(words):", "canonical_solution": "def is_kiss(words):\n    wordsL = words.split(' ')\n    l = len(wordsL)\n    for word in wordsL:\n        if len(word) > l:\n            return 'Keep It Simple Stupid'\n    return 'Good work Joe!'", "entry_point": "is_kiss", "task_id": "TACO_lite/378", "input_output_examples": [[["Joe had a bad day"]], [["Good work Joe!"]]]}
{"requirement": "def find_uniq(arr):\n\"\"\"There is an array with some numbers. All numbers are equal except for one. Try to find it!\n\n```python\nfind_uniq([ 1, 1, 1, 2, 1, 1 ]) == 2\nfind_uniq([ 0, 0, 0.55, 0, 0 ]) == 0.55\n```\n\nIt’s guaranteed that array contains at least 3 numbers.\n\nThe tests contain some very huge arrays, so think about performance.\n\nThis is the first kata in series:\n\n1. Find the unique number (this kata)\n2. [Find the unique string](https://www.codewars.com/kata/585d8c8a28bc7403ea0000c3)\n3. [Find The Unique](https://www.codewars.com/kata/5862e0db4f7ab47bed0000e5)\n\"\"\"", "inputs": [[[1, 1, 1, 2, 1, 1]], [[0, 0, 0.55, 0, 0]], [[4, 4, 4, 3, 4, 4, 4, 4]], [[5, 5, 5, 5, 4, 5, 5, 5]], [[6, 6, 6, 6, 6, 5, 6, 6]], [[7, 7, 7, 7, 7, 7, 6, 7]], [[8, 8, 8, 8, 8, 8, 8, 7]], [[3, 3, 3, 3, 3, 3, 3, 2]], [[2, 2, 2, 2, 2, 2, 2, 1]], [[0, 1, 1, 1, 1, 1, 1, 1]]], "outputs": [[2], [0.55], [3], [4], [5], [6], [7], [2], [1], [0]], "starter_code": "def find_uniq(arr):", "canonical_solution": "def find_uniq(arr):\n    a, b = set(arr)\n    return a if arr.count(a) == 1 else b", "entry_point": "find_uniq", "task_id": "TACO_lite/379", "input_output_examples": [[[[1, 1, 1, 2, 1, 1]], [[0, 0, 0.55, 0, 0]]], [[2], [0.55]]]}
{"requirement": "def solve(s):\n\"\"\"In this Kata, we are going to reverse a string while maintaining the spaces (if any) in their original place.\n\nFor example:\n```\nsolve(\"our code\") = \"edo cruo\"\n-- Normal reversal without spaces is \"edocruo\". \n-- However, there is a space at index 3, so the string becomes \"edo cruo\"\n\nsolve(\"your code rocks\") = \"skco redo cruoy\". \nsolve(\"codewars\") = \"srawedoc\"\n```\nMore examples in the test cases. All input will be lower case letters and in some cases spaces.\n\nGood luck!\n\nPlease also try:\n\n[Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\n\n[Simple remove duplicates](https://www.codewars.com/kata/5ba38ba180824a86850000f7)\n\"\"\"", "inputs": [["codewars"], ["your code"], ["your code rocks"], ["i love codewars"]], "outputs": [["srawedoc"], ["edoc ruoy"], ["skco redo cruoy"], ["s rawe docevoli"]], "starter_code": "def solve(s):", "canonical_solution": "def solve(s):\n    it = reversed(s.replace(' ', ''))\n    return ''.join((c if c == ' ' else next(it) for c in s))", "entry_point": "solve", "task_id": "TACO_lite/380", "input_output_examples": [[["our code"], ["your code rocks"], ["codewars"]], [["edo cruo"], ["skco redo cruoy"], ["srawedoc"]]]}
{"requirement": "def filter_homogenous(arrays):\n\"\"\"Challenge:\n\nGiven a two-dimensional array, return a new array which carries over only those arrays from the original, which were not empty and whose items are all of the same type (i.e. homogenous). For simplicity, the arrays inside the array will only contain characters and integers.\n\nExample:\n\nGiven [[1, 5, 4], ['a', 3, 5], ['b'], [], ['1', 2, 3]], your function should return [[1, 5, 4], ['b']].\n\nAddendum:\n\nPlease keep in mind that for this kata, we assume that empty arrays are not homogenous.\n\nThe resultant arrays should be in the order they were originally in and should not have its values changed.\n\nNo implicit type casting is allowed. A subarray [1, '2'] would be considered illegal and should be filtered out.\n\"\"\"", "inputs": [[[[1, 5, 4], ["a", 3, 5], ["b"], [], ["1", 2, 3]]], [[[123, 234, 432], ["", "abc"], [""], ["", 1], ["", "1"], []]], [[[1, 2, 3], ["1", "2", "3"], ["1", 2, 3]]]], "outputs": [[[[1, 5, 4], ["b"]]], [[[123, 234, 432], ["", "abc"], [""], ["", "1"]]], [[[1, 2, 3], ["1", "2", "3"]]]], "starter_code": "def filter_homogenous(arrays):", "canonical_solution": "def filter_homogenous(arrays):\n    return [a for a in arrays if len(set(map(type, a))) == 1]", "entry_point": "filter_homogenous", "task_id": "TACO_lite/381", "input_output_examples": [[[[[1, 5, 4], ["a", 3, 5], ["b"], [], ["1", 2, 3]]]], [[[[1, 5, 4], ["b"]]]]]}
{"requirement": "def get_mean(arr, x, y):\n\"\"\"Write a function getMean that takes as parameters an array (arr) and 2 integers (x and y). The function should return the mean between the mean of the the first x elements of the array and the mean of the last y elements of the array.\n\nThe mean should be computed if both x and y have values higher than 1 but less or equal to the array's length. Otherwise the function should return -1.\n\ngetMean([1,3,2,4], 2, 3) should return 2.5 because: the mean of the the first 2 elements of the array is (1+3)/2=2 and the mean of the last 3 elements of the array is (4+2+3)/3=3 so the mean of those 2 means is (2+3)/2=2.5.\n\ngetMean([1,3,2,4], 1, 2) should return -1 because x is not higher than 1.\n\ngetMean([1,3,2,4], 2, 8) should return -1 because 8 is higher than the array's length.\n\"\"\"", "inputs": [[[1, 3, 2, 4], 2, 3], [[1, 3, 2], 2, 2], [[1, 3, 2, 4], 1, 2], [[1, 3, 2, 4], 2, 8], [[1, -1, 2, -1], 2, 3]], "outputs": [[2.5], [2.25], [-1], [-1], [0]], "starter_code": "def get_mean(arr, x, y):", "canonical_solution": "def get_mean(arr, x, y):\n    if 1 < x <= len(arr) and 1 < y <= len(arr):\n        return (sum(arr[:x]) / x + sum(arr[-y:]) / y) / 2\n    return -1", "entry_point": "get_mean", "task_id": "TACO_lite/382", "input_output_examples": [[[[1, 3, 2, 4], 2, 3], [[1, 3, 2, 4], 1, 2], [[1, 3, 2, 4], 2, 8]], [[2.5], [-1], [-1]]]}
{"requirement": "def remove_rotten(bag_of_fruits):\n\"\"\"Our fruit guy has a bag of fruit (represented as an array of strings) where some fruits are rotten. He wants to replace all the rotten pieces of fruit with fresh ones. For example, given `[\"apple\",\"rottenBanana\",\"apple\"]` the replaced array should be `[\"apple\",\"banana\",\"apple\"]`. Your task is to implement a method that accepts an array of strings containing fruits should returns an array of strings where all the rotten fruits are replaced by good ones. \n\n### Notes\n\n- If the array is null/nil/None or empty you should return empty array (`[]`).\n- The rotten fruit name will be in this camelcase (`rottenFruit`).\n- The returned array should be in lowercase.\n\"\"\"", "inputs": [[["apple", "banana", "kiwi", "melone", "orange"]], [["rottenApple", "rottenBanana", "rottenApple", "rottenPineapple", "rottenKiwi"]], [[]], [null], [["apple", "rottenBanana", "rottenApple", "pineapple", "kiwi"]]], "outputs": [[["apple", "banana", "kiwi", "melone", "orange"]], [["apple", "banana", "apple", "pineapple", "kiwi"]], [[]], [[]], [["apple", "banana", "apple", "pineapple", "kiwi"]]], "starter_code": "def remove_rotten(bag_of_fruits):", "canonical_solution": "def remove_rotten(bag_of_fruits):\n    return [x.replace('rotten', '').lower() for x in bag_of_fruits] if bag_of_fruits else []", "entry_point": "remove_rotten", "task_id": "TACO_lite/383", "input_output_examples": [[[["apple", "rottenBanana", "apple"]], [[]], [null]], [["apple", "banana", "apple"], [], []]]}
{"requirement": "def reverse_invert(lst):\n\"\"\"Reverse and invert all integer values in a given list. \n\nPython:\n\n    reverse_invert([1,12,'a',3.4,87,99.9,-42,50,5.6]) = [-1,-21,-78,24,-5]\n    \nIgnore all other types than integer.\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[-10]], [[-9, -18, 99]], [[1, 12, "a", 3.4, 87, 99.9, -42, 50, 5.6]], [[]]], "outputs": [[[-1, -2, -3, -4, -5]], [[1]], [[9, 81, -99]], [[-1, -21, -78, 24, -5]], [[]]], "starter_code": "def reverse_invert(lst):", "canonical_solution": "from math import copysign as sign\n\ndef reverse_invert(lst):\n    return [-int(sign(int(str(abs(x))[::-1]), x)) for x in lst if isinstance(x, int)]", "entry_point": "reverse_invert", "task_id": "TACO_lite/384", "input_output_examples": [[[[1, 12, "a", 3.4, 87, 99.9, -42, 50, 5.6]]], [[-1, -21, -87, 42, -50]]]}
{"requirement": "def expanded_form(num):\n\"\"\"# Write Number in Expanded Form\n\nYou will be given a number and you will need to return it as a string in [Expanded Form](https://www.mathplacementreview.com/arithmetic/whole-numbers.php#expanded-form). For example:\n\n```python\nexpanded_form(12) # Should return '10 + 2'\nexpanded_form(42) # Should return '40 + 2'\nexpanded_form(70304) # Should return '70000 + 300 + 4'\n```\n\nNOTE: All numbers will be whole numbers greater than 0.\n\nIf you liked this kata, check out [part 2](https://www.codewars.com/kata/write-number-in-expanded-form-part-2)!!\n\"\"\"", "inputs": [[2], [12], [42], [70304], [4982342]], "outputs": [["2"], ["10 + 2"], ["40 + 2"], ["70000 + 300 + 4"], ["4000000 + 900000 + 80000 + 2000 + 300 + 40 + 2"]], "starter_code": "def expanded_form(num):", "canonical_solution": "def expanded_form(num):\n    num = list(str(num))\n    return ' + '.join((x + '0' * (len(num) - y - 1) for y, x in enumerate(num) if x != '0'))", "entry_point": "expanded_form", "task_id": "TACO_lite/385", "input_output_examples": [[[12], [42], [70304]], [["10 + 2"], ["40 + 2"], ["70000 + 300 + 4"]]]}
{"requirement": "def ranks(a):\n\"\"\"Given an array (or list) of scores, return the array of _ranks_ for each value in the array.  The largest value has rank 1, the second largest value has rank 2, and so on. Ties should be handled by assigning the same rank to all tied values. For example:\n\n    ranks([9,3,6,10]) = [2,4,3,1]\n\nand\n\n    ranks([3,3,3,3,3,5,1]) = [2,2,2,2,2,1,7]\n    \nbecause there is one 1st place value, a five-way tie for 2nd place, and one in 7th place.\n\"\"\"", "inputs": [[[]], [[2]], [[2, 2]], [[1, 2, 3]], [[-5, -10, 3, 1]], [[-1, 3, 3, 3, 5, 5]], [[1, 10, 4]], [[5, 2, 3, 5, 5, 4, 9, 8, 0]]], "outputs": [[[]], [[1]], [[1, 1]], [[3, 2, 1]], [[3, 4, 1, 2]], [[6, 3, 3, 3, 1, 1]], [[3, 1, 2]], [[3, 8, 7, 3, 3, 6, 1, 2, 9]]], "starter_code": "def ranks(a):", "canonical_solution": "def ranks(a):\n    sortA = sorted(a, reverse=True)\n    return [sortA.index(s) + 1 for s in a]", "entry_point": "ranks", "task_id": "TACO_lite/386", "input_output_examples": [[[[9, 3, 6, 10]], [[3, 3, 3, 3, 3, 5, 1]]], [[2, 4, 3, 1], [2, 2, 2, 2, 2, 1, 7]]]}
{"requirement": "def int_diff(arr, n):\n\"\"\"Write a function that accepts two arguments: an array/list of integers and another integer (`n`). \n\nDetermine the number of times where two integers in the array have a difference of `n`.\n\nFor example:\n```\n[1, 1, 5, 6, 9, 16, 27], n=4  -->  3  # (1,5), (1,5), (5,9)\n[1, 1, 3, 3], n=2             -->  4  # (1,3), (1,3), (1,3), (1,3)\n```\n\"\"\"", "inputs": [[[1, 1, 5, 6, 9, 16, 27], 4], [[1, 1, 3, 3], 2], [[4, 8, 12, 12, 3, 6, 2], 6], [[1, 2, 3, 4, 5, 6, 7], 7], [[1, 6, 2, 3, 7, 8, 7], 0], [[1, 2, 3, 4], 0], [[1, 1, 1, 1], 0], [[], 3]], "outputs": [[3], [4], [3], [0], [1], [0], [6], [0]], "starter_code": "def int_diff(arr, n):", "canonical_solution": "def int_diff(arr, n):\n    num = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == n:\n                num += 1\n    return num", "entry_point": "int_diff", "task_id": "TACO_lite/387", "input_output_examples": [[[[1, 1, 5, 6, 9, 16, 27], 4], [[1, 1, 3, 3], 2]], [[3], [4]]]}
{"requirement": "def generate_number(squad, n):\n\"\"\"At the start of each season, every player in a football team is assigned their own unique squad number. Due to superstition or their history certain numbers are more desirable than others.\n\nWrite a function generateNumber() that takes two arguments, an array of the current squad numbers (squad) and the new player's desired number (n). If the new player's desired number is not already taken, return n, else if the desired number can be formed by adding two digits between 1 and 9, return the number formed by joining these two digits together. E.g. If 2 is taken, return 11 because 1 + 1 = 2. Otherwise return null. \n\nNote: Often there will be several different ways to form a replacement number. In these cases the number with lowest first digit should be given priority. E.g. If n = 15, but squad already contains 15, return 69, not 78.\n\"\"\"", "inputs": [[[1, 2, 3, 4, 6, 9, 10, 15, 69], 11], [[1, 2, 3, 4, 6, 9, 10, 11, 15, 69], 11], [[1, 2, 3, 4, 6, 9, 10, 11, 15, 29, 69], 11], [[1, 2, 3, 4, 6, 9, 10, 11, 15, 29, 38, 47, 56, 65, 69, 74, 83, 92], 11], [[1, 2, 3, 4, 6, 9, 10, 11, 15, 18, 23, 69], 18], [[1, 2, 3, 4, 6, 9, 10, 15, 69], 34], [[1, 2, 3, 4, 6, 9, 10, 11, 15, 29, 34, 38, 47, 56, 65, 69, 74, 83, 92], 34], [[1, 2, 3, 4, 6, 9, 10, 11, 15, 18, 27, 29, 34, 36, 38, 45, 47, 54, 56, 63, 65, 69, 72, 74, 81, 83, 92], 9], [[1, 2, 3, 4, 6, 9, 10, 11, 15, 18, 27, 29, 34, 36, 38, 45, 47, 54, 56, 63, 65, 69, 72, 74, 81, 83, 90, 92], 9]], "outputs": [[11], [29], [38], [null], [99], [34], [null], [null], [null]], "starter_code": "def generate_number(squad, n):", "canonical_solution": "def generate_number(squad, n):\n    if n not in squad:\n        return n\n    for i in range(1, 10):\n        for j in range(1, 10):\n            if i + j == n and i * 10 + j not in squad:\n                return i * 10 + j", "entry_point": "generate_number", "task_id": "TACO_lite/388", "input_output_examples": [[[[1, 2, 3, 4, 6, 9, 10, 15, 69], 11]], [[11]]]}
{"requirement": "def cheapest_quote(n):\n\"\"\"You and your best friend Stripes have just landed your first high school jobs! You'll be delivering newspapers to your neighbourhood on weekends. For your services you'll be charging a set price depending on the quantity of the newspaper bundles.\n\nThe cost of deliveries is:\n\n- $3.85 for 40 newspapers\n- $1.93 for 20\n- $0.97 for 10 \n- $0.49 for 5 \n- $0.10 for 1 \n\nStripes is taking care of the footwork doing door-to-door drops and your job is to take care of the finances. What you'll be doing is providing the cheapest possible quotes for your services.\n\nWrite a function that's passed an integer representing the amount of newspapers and returns the cheapest price. The returned number must be rounded to two decimal places.\n\n![Paperboy](http://mametesters.org/file_download.php?file_id=1016&type=bug)\n\"\"\"", "inputs": [[1], [5], [10], [20], [40], [41], [80], [26], [0], [499]], "outputs": [[0.1], [0.49], [0.97], [1.93], [3.85], [3.95], [7.7], [2.52], [0.0], [48.06]], "starter_code": "def cheapest_quote(n):", "canonical_solution": "def cheapest_quote(n):\n    prices = [(40, 3.85), (20, 1.93), (10, 0.97), (5, 0.49), (1, 0.1)]\n    result = 0\n    for q, c in prices:\n        result += n // q * c\n        n = n % q\n    return round(result, 2)", "entry_point": "cheapest_quote", "task_id": "TACO_lite/389", "input_output_examples": [[[1]], [[0.1]]]}
{"requirement": "def race(v1, v2, g):\n\"\"\"Two tortoises named ***A*** and ***B*** must run a race. ***A*** starts with an average speed of ```720 feet per hour```.\nYoung ***B*** knows she runs faster than ***A***, and furthermore has not finished her cabbage.\n\nWhen she starts, at last, she can see that ***A*** has a `70 feet lead` but ***B***'s speed is `850 feet per hour`.\nHow long will it take ***B*** to catch ***A***?\n\nMore generally:\ngiven two speeds `v1` (***A***'s speed, integer > 0) and `v2` (***B***'s speed, integer > 0) and a lead `g` (integer > 0)\nhow long will it take ***B*** to catch ***A***? \n\nThe result will be an array ```[hour, min, sec]``` which is the time needed in hours, minutes and seconds (round down to the nearest second)\nor a string in some languages.\n\nIf `v1 >= v2` then return `nil`, `nothing`, `null`, `None` or `{-1, -1, -1}` for C++, C, Go, Nim, `[]` for Kotlin or \"-1 -1 -1\".\n\n## Examples:\n(form of the result depends on the language)\n```\nrace(720, 850, 70) => [0, 32, 18] or \"0 32 18\"\nrace(80, 91, 37)   => [3, 21, 49] or \"3 21 49\"\n```\n\n** Note: \n\n- See other examples in \"Your test cases\".\n\n- In Fortran - as in any other language - the returned string is not permitted to contain any redundant trailing whitespace: you can use dynamically allocated character strings.\n\n** Hints for people who don't know how to convert to hours, minutes, seconds:\n\n- Tortoises don't care about fractions of seconds\n\n- Think of calculation by hand using only integers (in your code use or simulate integer division)\n\n- or Google: \"convert decimal time to hours minutes seconds\"\n\"\"\"", "inputs": [[720, 850, 70], [80, 91, 37], [80, 100, 40], [720, 850, 37], [720, 850, 370], [120, 850, 37], [820, 850, 550], [820, 81, 550]], "outputs": [[[0, 32, 18]], [[3, 21, 49]], [[2, 0, 0]], [[0, 17, 4]], [[2, 50, 46]], [[0, 3, 2]], [[18, 20, 0]], [null]], "starter_code": "def race(v1, v2, g):", "canonical_solution": "import math\n\ndef race(v1, v2, g):\n    if v2 < v1:\n        return None\n    seconds = 0.1\n    while v1 / 3600 * seconds + g >= v2 / 3600 * seconds:\n        seconds += 0.05\n    hours = seconds / 3600\n    hoursRest = seconds % 3600\n    minutes = hoursRest / 60\n    seconds = hoursRest % 60\n    return [math.floor(hours), math.floor(minutes), math.floor(seconds)]", "entry_point": "race", "task_id": "TACO_lite/390", "input_output_examples": [[[720, 850, 70], [80, 91, 37]], [[[0, 32, 18]], [[3, 21, 49]]]]}
{"requirement": "def combat(health, damage):\n\"\"\"Create a combat function that takes the player's current health and the amount of damage recieved, and returns the player's new health.\nHealth can't be less than 0.\n\"\"\"", "inputs": [[100, 5], [83, 16], [20, 30]], "outputs": [[95], [67], [0]], "starter_code": "def combat(health, damage):", "canonical_solution": "def combat(health, damage):\n    return max(0, health - damage)", "entry_point": "combat", "task_id": "TACO_lite/391", "input_output_examples": [[[100, 5]], [[95]]]}
{"requirement": "def starting_mark(height):\n\"\"\"For a pole vaulter, it is very important to begin the approach run at the best possible starting mark. This is affected by numerous factors and requires fine-tuning in practice. But there is a guideline that will help a beginning vaulter start at approximately the right location for the so-called \"three-step approach,\" based on the vaulter's body height.\n\nThis guideline was taught to me in feet and inches, but due to the international nature of Codewars, I am creating this kata to use metric units instead.\n\nYou are given the following two guidelines to begin with:\n(1) A vaulter with a height of 1.52 meters should start at 9.45 meters on the runway.\n(2) A vaulter with a height of 1.83 meters should start at 10.67 meters on the runway.\n\nYou will receive a vaulter's height in meters (which will always lie in a range between a minimum of 1.22 meters and a maximum of 2.13 meters). Your job is to return the best starting mark in meters, rounded to two decimal places.\n\nHint: Based on the two guidelines given above, you will want to account for the change in starting mark per change in body height. This involves a linear relationship. But there is also a constant offset involved. If you can determine the rate of change described above, you should be able to determine that constant offset.\n\"\"\"", "inputs": [[1.52], [1.83], [1.22], [2.13], [1.75]], "outputs": [[9.45], [10.67], [8.27], [11.85], [10.36]], "starter_code": "def starting_mark(height):", "canonical_solution": "def starting_mark(height):\n    return round(9.45 + (10.67 - 9.45) / (1.83 - 1.52) * (height - 1.52), 2)", "entry_point": "starting_mark", "task_id": "TACO_lite/392", "input_output_examples": [[[1.52], [1.83]], [[9.45], [10.67]]]}
{"requirement": "def make_change(n):\n\"\"\"# Making Change\n\nComplete the method that will determine the minimum number of coins needed to make change for a given amount in American currency.\n\nCoins used will be half-dollars, quarters, dimes, nickels, and pennies, worth 50¢, 25¢, 10¢, 5¢ and 1¢, respectively. They'll be represented by the symbols `H`, `Q`, `D`, `N` and `P` (symbols in Ruby, strings in in other languages)\n\nThe argument passed in will be an integer representing the value in cents. The return value should be a hash/dictionary/object with the symbols as keys, and the numbers of coins as values. Coins that are not used should not be included in the hash. If the argument passed in is 0, then the method should return an empty hash.\n\n## Examples\n\n```python\nmake_change(0)   #-->  {}\nmake_change(1)   #-->  {\"P\":1}\nmake_change(43)  #-->  {\"Q\":1, \"D\":1, \"N\":1, \"P\":3}\nmake_change(91)  #-->  {\"H\":1, \"Q\":1, \"D\":1, \"N\":1, \"P\":1}\n```\n\n#### **If you liked this kata, check out [Part 2](https://www.codewars.com/kata/making-change-part-2/ruby).**\n\"\"\"", "inputs": [[0], [1], [5], [43], [91], [101], [239]], "outputs": [[{}], [{"P": 1}], [{"N": 1}], [{"Q": 1, "D": 1, "N": 1, "P": 3}], [{"H": 1, "Q": 1, "D": 1, "N": 1, "P": 1}], [{"H": 2, "P": 1}], [{"H": 4, "Q": 1, "D": 1, "P": 4}]], "starter_code": "def make_change(n):", "canonical_solution": "BASE = {'H': 50, 'Q': 25, 'D': 10, 'N': 5, 'P': 1}\n\ndef make_change(n):\n    r = {}\n    for x, y in BASE.items():\n        if n >= y:\n            r[x], n = divmod(n, y)\n    return r", "entry_point": "make_change", "task_id": "TACO_lite/393", "input_output_examples": [[[0], [1], [43], [91]], [[{}], [{"P": 1}], [{"Q": 1, "D": 1, "N": 1, "P": 3}], [{"H": 1, "Q": 1, "D": 1, "N": 1, "P": 1}]]]}
{"requirement": "Introduction\n\nIt's been more than 20 minutes since the negligent waiter has taken your order for the house special prime tofu steak with a side of chili fries.\n\nOut of boredom, you start fiddling around with the condiments tray. To be efficient, you want to be familiar with the choice of sauces and spices before your order is finally served.\n\nYou also examine the toothpick holder and try to analyze its inner workings when - yikes - the holder's lid falls off and all 23 picks lay scattered on the table.\n\nBeing a good and hygiene oriented citizen, you decide not to just put them back in the holder. Instead of letting all the good wood go to waste, you start playing around with the picks.\n\nIn the first \"round\", you lay down one toothpick vertically. You've used a total of one toothpick.\n\nIn the second \"round\", at each end of the first toothpick, you add a perpendicular toothpick at its center point. You added two additional toothpicks for a total of three toothpicks.\n\nIn the next rounds, you continue to add perpendicular toothpicks to each free end of toothpicks already on the table.\n\nWith your 23 toothpicks, you can complete a total of six rounds:\n\n\nYou wonder if you'd be able to implement this sequence in your favorite programming language. Because your food still hasn't arrived, you decide to take out your laptop and start implementing...\n\nChallenge\nImplement a script that returns the amount of toothpicks needed to complete n amount of rounds of the toothpick sequence.\n\n```\n0 <= n <= 5000\n```\n\nHint\nYou can attempt this brute force or get some inspiration from the math department.", "inputs": [[0], [3], [16], [32], [49], [89], [327], [363], [366], [512], [656], [1038], [1052], [1222], [1235], [1302], [1735], [1757], [1974], [2048]], "outputs": [[0], [7], [171], [683], [1215], [3715], [52239], [60195], [62063], [174763], [209095], [699451], [700379], [757295], [762019], [832559], [1398915], [1443119], [2038207], [2796203]], "starter_code": "def toothpick(n):\n\t", "canonical_solution": "from math import log2\n\ndef t(n):\n    if n == 0:\n        return 0\n    k = int(log2(n))\n    i = n - 2 ** k\n    if i == 0:\n        return (2 ** (2 * k + 1) + 1) // 3\n    else:\n        return t(2 ** k) + 2 * t(i) + t(i + 1) - 1\ntoothpick = t", "entry_point": "toothpick", "task_id": "TACO_lite/394", "input_output_examples": [[[0]], [[0]]]}
{"requirement": "def special_number(n):\n\"\"\"# Definition \n\nA number is a **_Special Number_** *if it’s digits only consist 0, 1, 2, 3, 4 or 5*\n\n**_Given_** a number *determine if it special number or not* .  \n\n\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_The number_** passed will be **_positive_** (N > 0) .\n\n* All **single-digit numbers** with in the interval **_[0:5]_** are considered as **_special number_**. \n___\n\n# Input >> Output Examples\n\n```\nspecialNumber(2) ==> return \"Special!!\"\n```\n## Explanation: \n\nIt's **_a single-digit number_** within the interval **_[0:5]_** . \n\n```\nspecialNumber(9) ==> return \"NOT!!\"\n```\n## Explanation:\n\nAlthough, it's a single-digit number but **_Outside the interval [0:5]_** .\n\n```\nspecialNumber(23) ==> return \"Special!!\"\n```\n## Explanation: \n\nAll **_the number's digits_** formed from the interval **_[0:5]_** digits .\n\n```\nspecialNumber(39) ==> return \"NOT!!\"\n```\n## Explanation: \n\nAlthough, *there is a digit (3) Within the interval* **_But_** **_the second digit is not (Must be ALL The Number's Digits )_** .\n\n```\nspecialNumber(59) ==> return \"NOT!!\"\n```\n## Explanation:  \n\nAlthough, *there is a digit (5) Within the interval* **_But_** **_the second digit is not (Must be ALL The Number's Digits )_** .\n\n```\nspecialNumber(513) ==> return \"Special!!\"\n```\n___\n```\nspecialNumber(709) ==> return \"NOT!!\"\n```\n___\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)          \n\n### ALL translation are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[2], [3], [5], [9], [7], [23], [79], [32], [39], [55], [11350224]], "outputs": [["Special!!"], ["Special!!"], ["Special!!"], ["NOT!!"], ["NOT!!"], ["Special!!"], ["NOT!!"], ["Special!!"], ["NOT!!"], ["Special!!"], ["Special!!"]], "starter_code": "def special_number(n):", "canonical_solution": "def special_number(n):\n    return 'Special!!' if max(str(n)) <= '5' else 'NOT!!'", "entry_point": "special_number", "task_id": "TACO_lite/395", "input_output_examples": [[[2], [9], [23], [39], [59], [513], [709]], [["Special!!"], ["NOT!!"], ["Special!!"], ["NOT!!"], ["NOT!!"], ["Special!!"], ["NOT!!"]]]}
{"requirement": "def encode(str, key):\n\"\"\"Introduction \n\nThe GADERYPOLUKI is a simple substitution cypher used in scouting to encrypt messages. The encryption is based on short, easy to remember key. The key is written as paired letters, which are in the cipher simple replacement.\n\nThe most frequently used key is \"GA-DE-RY-PO-LU-KI\".\n\n```\n G => A\n g => a\n a => g\n A => G\n D => E\n  etc.\n```\n\nThe letters, which are not on the list of substitutes, stays in the encrypted text without changes.\n\nOther keys often used by Scouts:\n\n```\nPO-LI-TY-KA-RE-NU\nKA-CE-MI-NU-TO-WY\nKO-NI-EC-MA-TU-RY\nZA-RE-WY-BU-HO-KI\nBA-WO-LE-TY-KI-JU\nRE-GU-LA-MI-NO-WY\n```\n\nTask\n\nYour task is to help scouts to encrypt and decrypt thier messages.\nWrite the `Encode` and `Decode` functions. \n\nInput/Output\n\nThe function should have two parameters. \nThe `message` input string consists of lowercase and uperrcase characters and whitespace character.\nThe `key` input string consists of only lowercase characters.\nThe substitution has to be case-sensitive. \n\nExample\n\n \n # GADERYPOLUKI collection\n\n\n\nGADERYPOLUKI cypher vol 1\n\n\nGADERYPOLUKI cypher vol 2\n\n\nGADERYPOLUKI cypher vol 3 - Missing Key\n\n\nGADERYPOLUKI cypher vol 4 - Missing key madness\n\"\"\"", "inputs": [["Gug hgs g cgt", "gaderypoluki"], ["Dkucr pu yhr ykbir", "politykarenu"], ["ABCD", "gaderypoluki"], ["Ala has a cat", "gaderypoluki"]], "outputs": [["Ala has a cat"], ["Dance on the table"], ["GBCE"], ["Gug hgs g cgt"]], "starter_code": "def encode(str, key):", "canonical_solution": "def encode(str, key):\n    key = key.lower() + key.upper()\n    dict = {char: key[i - 1] if i % 2 else key[i + 1] for i, char in enumerate(key)}\n    return ''.join((dict.get(char, char) for char in str))\ndecode = encode", "entry_point": "encode", "task_id": "TACO_lite/396", "input_output_examples": [[["Gug hgs g cgt", "gaderypoluki"]], [["Ala has a cat"]]]}
{"requirement": "def spot_diff(s1, s2):\n\"\"\"This kata is part of the collection [Mary's Puzzle Books](https://www.codewars.com/collections/marys-puzzle-books).\n\nMary brought home a \"spot the differences\" book. The book is full of a bunch of problems, and each problem consists of two strings that are similar. However, in each string there are a few characters that are different. An example puzzle from her book is:\n```\nString 1: \"abcdefg\"\nString 2: \"abcqetg\"\n```\nNotice how the \"d\" from String 1 has become a \"q\" in String 2, and \"f\" from String 1 has become a \"t\" in String 2.\n\nIt's your job to help Mary solve the puzzles. Write a program `spot_diff`/`Spot` that will compare the two strings and return a list with the positions where the two strings differ. In the example above, your program should return `[3, 5]` because String 1 is different from String 2 at positions 3 and 5.\n\nNOTES:\n\n```if-not:csharp\n• If both strings are the same, return `[]`\n```\n```if:csharp\n• If both strings are the same, return `new List()`\n```\n\n• Both strings will always be the same length\n\n• Capitalization and punctuation matter\n\"\"\"", "inputs": [["abcdefg", "abcqetg"], ["Hello World!", "hello world."], ["FixedGrey", "FixedGrey"], ["HACKER", "H4CK3R"], ["This is a really long sentence.", "That is a_really long sentence,"], ["", ""], ["abcdefghijklmnopqrstuvwxyz", "zyxwvutsrqponmlkjihgfedcba"], ["YOLO lol", "ROLO mom"], ["www.youtube.com/zedaphplays", "www.twitter.com/zedaphplays"], ["Congratulations! You did it!", "Conglaturations! U did this!"]], "outputs": [[[3, 5]], [[0, 6, 11]], [[]], [[1, 4]], [[2, 3, 9, 30]], [[]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]], [[0, 5, 7]], [[4, 5, 6, 8, 9, 10]], [[4, 8, 17, 18, 19, 20, 22, 23, 24, 26]]], "starter_code": "def spot_diff(s1, s2):", "canonical_solution": "def spot_diff(s1, s2):\n    return [i for i in range(len(s1)) if s1[i] != s2[i]]", "entry_point": "spot_diff", "task_id": "TACO_lite/397", "input_output_examples": [[["abcdefg", "abcqetg"], ["abcdefg", "abcdefg"]], [[3, 5], []]]}
{"requirement": "def summationofprimes(n):\n\"\"\"# Summation Of Primes\n\nThe sum of the primes below or equal to 10 is **2 + 3 + 5 + 7 = 17**. Find the sum of all the primes **_below or equal to the number passed in_**.\n\nFrom Project Euler's [Problem #10](https://projecteuler.net/problem=10 \"Project Euler - Problem 10\").\n\"\"\"", "inputs": [[5], [6], [7], [8], [9], [10], [20], [30], [40], [50], [100], [200], [300], [400], [500], [1000], [2000], [3000], [4000], [5000], [25000]], "outputs": [[10], [10], [17], [17], [17], [17], [77], [129], [197], [328], [1060], [4227], [8275], [13887], [21536], [76127], [277050], [593823], [1013507], [1548136], [32405717]], "starter_code": "def summationofprimes(n):", "canonical_solution": "from bisect import bisect\n\ndef sieve(n):\n    sieve, primes = ([0] * (n + 1), [])\n    for i in range(2, n + 1):\n        if not sieve[i]:\n            primes.append(i)\n            for j in range(i ** 2, n + 1, i):\n                sieve[j] = 1\n    return primes\nPRIMES = sieve(1000000)\n\ndef summationofprimes(n):\n    return sum(PRIMES[:bisect(PRIMES, n)])", "entry_point": "summationofprimes", "task_id": "TACO_lite/398", "input_output_examples": [[[10], [5]], [[17], [10]]]}
{"requirement": "def even_numbers(arr, n):\n\"\"\"Given an `array` of digital numbers, return a new array of length `number` containing the last even numbers from the original array (in the same order). The original array will be not empty and will contain at least \"number\" even numbers.\n\nFor example:\n```\n([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) => [4, 6, 8]\n([-22, 5, 3, 11, 26, -6, -7, -8, -9, -8, 26], 2) => [-8, 26]\n([6, -25, 3, 7, 5, 5, 7, -3, 23], 1) => [6]\n\n```\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5, 6, 7, 8, 9], 3], [[-22, 5, 3, 11, 26, -6, -7, -8, -9, -8, 26], 2], [[6, -25, 3, 7, 5, 5, 7, -3, 23], 1]], "outputs": [[[4, 6, 8]], [[-8, 26]], [[6]]], "starter_code": "def even_numbers(arr, n):", "canonical_solution": "def even_numbers(arr, n):\n    return [i for i in arr if i % 2 == 0][-n:]", "entry_point": "even_numbers", "task_id": "TACO_lite/399", "input_output_examples": [[[[1, 2, 3, 4, 5, 6, 7, 8, 9], 3], [[-22, 5, 3, 11, 26, -6, -7, -8, -9, -8, 26], 2], [[6, -25, 3, 7, 5, 5, 7, -3, 23], 1]], [[4, 6, 8], [-8, 26], [6]]]}
{"requirement": "def get_candy_position(n, r, c, candy):\n\"\"\"# Task\n Mr.Nam has `n` candies, he wants to put one candy in each cell of a table-box. The table-box has `r` rows and `c` columns.\n\n Each candy was labeled by its cell number. The cell numbers are in range from 1 to N and the direction begins from right to left and from bottom to top.\n\n Nam wants to know the position of a specific `candy` and which box is holding it.\n\n The result should be an array and contain exactly 3 elements. The first element is the `label` of the table; The second element is the `row` of the candy; The third element is the `column` of the candy.\n \n If there is no candy with the given number, return `[-1, -1, -1]`.\n\n Note: \n \n When the current box is filled up, Nam buys another one. \n \n The boxes are labeled from `1`.\n\n Rows and columns are `0`-based numbered from left to right and from top to bottom.\n \n# Example\n\n For `n=6,r=2,c=2,candy=3`, the result should be `[1,0,1]`\n \n the candies will be allocated like this:\n```\nBox 1\n+-----+-----+\n|  4  | (3) | --> box 1,row 0, col 1\n+-----+-----+\n|  2  |  1  |\n+-----+-----+\nBox 2\n+-----+-----+\n|  x  |  x  |\n+-----+-----+\n|  6  | (5) | --> box 2,row 1, col 1\n+-----+-----+```\n For `candy = 5(n,r,c same as above)`, the output should be `[2,1,1]`.\n \n For `candy = 7(n,r,c same as above)`, the output should be `[-1,-1,-1]`.\n \n For `n=8,r=4,c=2,candy=3`, the result should be `[1,2,1]` \n```\nBox 1\n+-----+-----+\n|  8  |  7  |\n+-----+-----+\n|  6  |  5  |\n+-----+-----+\n|  4  | (3) |--> box 1,row 2, col 1\n+-----+-----+\n|  2  |  1  |\n+-----+-----+\n```\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  The number of candies. \n  \n  `0 < n <= 100`\n\n\n - `[input]` integer `r`\n\n  The number of rows. \n  \n  `0 < r <= 100`\n\n\n - `[input]` integer `c`\n\n The number of columns.\n\n `0 < c <= 100`\n\n\n - `[input]` integer `candy`\n\n The label of the candy Nam wants to get position of.\n \n `0 < c <= 120`\n\n - `[output]` an integer array\n\n  Array of 3 elements: a label, a row and a column.\n\"\"\"", "inputs": [[6, 2, 2, 3], [6, 2, 2, 5], [6, 2, 2, 7], [8, 4, 2, 3], [15, 3, 3, 1], [15, 3, 3, 5], [15, 3, 3, 7], [15, 3, 3, 14], [15, 3, 3, 18]], "outputs": [[[1, 0, 1]], [[2, 1, 1]], [[-1, -1, -1]], [[1, 2, 1]], [[1, 2, 2]], [[1, 1, 1]], [[1, 0, 2]], [[2, 1, 1]], [[-1, -1, -1]]], "starter_code": "def get_candy_position(n, r, c, candy):", "canonical_solution": "def get_candy_position(n, r, c, candy):\n    if candy > n:\n        return [-1, -1, -1]\n    linIdx = r * c - ((candy - 1) % (r * c) + 1)\n    return [(candy - 1) // (r * c) + 1, linIdx // c, linIdx % c]", "entry_point": "get_candy_position", "task_id": "TACO_lite/400", "input_output_examples": [[[6, 2, 2, 3], [6, 2, 2, 5], [6, 2, 2, 7], [8, 4, 2, 3]], [[1, 0, 1], [2, 1, 1], [-1, -1, -1], [1, 2, 1]]]}
{"requirement": "def is_letter(s):\n\"\"\"Complete the code which should return `true` if the given object is a single ASCII letter (lower or upper case), `false` otherwise.\n\"\"\"", "inputs": [[""], ["a"], ["X"], ["7"], ["_"], ["ab"], ["a\n"]], "outputs": [[false], [true], [true], [false], [false], [false], [false]], "starter_code": "def is_letter(s):", "canonical_solution": "def is_letter(s):\n    return len(s) == 1 and s.isalpha()", "entry_point": "is_letter", "task_id": "TACO_lite/401", "input_output_examples": [[[""]], [[false]]]}
{"requirement": "def remove_char(s):\n\"\"\"It's pretty straightforward. Your goal is to create a function that removes the first and last characters of a string. You're given one parameter, the original string.  You don't have to worry with strings with less than two characters.\n\"\"\"", "inputs": [["eloquent"], ["country"], ["person"], ["place"], ["ok"], ["ooopsss"]], "outputs": [["loquen"], ["ountr"], ["erso"], ["lac"], [""], ["oopss"]], "starter_code": "def remove_char(s):", "canonical_solution": "def remove_char(s):\n    return s[1:-1]", "entry_point": "remove_char", "task_id": "TACO_lite/402", "input_output_examples": [[["eloquent"]], [["loquen"]]]}
{"requirement": "def well(x):\n\"\"\"For every good kata idea there seem to be quite a few bad ones!\n\nIn this kata you need to check the provided array (x) for good ideas 'good' and bad ideas 'bad'. If there are one or two good ideas, return 'Publish!', if there are more than 2 return 'I smell a series!'. If there are no good ideas, as is often the case, return 'Fail!'.\n\n~~~if:c\nFor C: do not dynamically allocate memory,\n      instead return a string literal\n~~~\n\"\"\"", "inputs": [[["bad", "bad", "bad"]], [["good", "bad", "bad", "bad", "bad"]], [["good", "bad", "bad", "bad", "bad", "good", "bad", "bad", "good"]]], "outputs": [["Fail!"], ["Publish!"], ["I smell a series!"]], "starter_code": "def well(x):", "canonical_solution": "def well(x):\n    c = x.count('good')\n    return 'I smell a series!' if c > 2 else 'Publish!' if c else 'Fail!'", "entry_point": "well", "task_id": "TACO_lite/403", "input_output_examples": [[[["bad", "bad", "bad"]]], [["Fail!"]]]}
{"requirement": "def sort_two_arrays(arr1, arr2):\n\"\"\">When no more interesting kata can be resolved, I just choose to create the new kata, to solve their own, to enjoy the process  --myjinxin2015 said\n\n# Description:\n \n Give you two arrays `arr1` and `arr2`. They have the same length(length>=2). The elements of two arrays always be integer.\n \n Sort `arr1` according to the ascending order of arr2; Sort `arr2` according to the ascending order of arr1. Description is not easy to understand, for example:\n ```\n arr1=[5,4,3,2,1], \n arr2=[6,5,7,8,9]\n ```\n Let us try to sorting arr1. \n First, we need know the ascending order of arr2:\n ```\n [5,6,7,8,9]\n ```\n We can see, after sort arr2 to ascending order, some elements' index are changed:\n ```\n unsort arr2      ascending order arr2\n [6,5,7,8,9]--->      [5,6,7,8,9]\n \n index0(6)  --->      index1\n index1(5)  --->      index0\n index2(7)            index2(no change)\n index3(8)            index3(no change)\n index4(9)            index4(no change)\n ```\n So, wo need according to these changes to sorting arr1:\n ```\n unsort arr1          sorted arr1\n [5,4,3,2,1]--->      [4,5,3,2,1]\n \n index0(5)  --->      index1\n index1(4)  --->      index0\n index2(3)            index2(no change)\n index3(2)            index3(no change)\n index4(1)            index4(no change)\n \n So: sorted arr1= [4,5,3,2,1]\n ```\n And then, we sorting arr2 with the same process:\n ```\n unsort arr1      ascending order arr1\n [5,4,3,2,1]--->      [1,2,3,4,5]\n \n index0(5)  --->      index4\n index1(4)  --->      index3\n index2(3)            index2(no change)\n index3(2)  --->      index1\n index4(1)  --->      index0\n \n unsort arr2          sorted arr2\n [6,5,7,8,9]--->      [9,8,7,5,6]\n \n index0(6)  --->      index4\n index1(5)  --->      index3\n index2(7)            index2(no change)\n index3(8)  --->      index1\n index4(9)  --->      index0\n \n So: sorted arr2= [9,8,7,5,6]\n \n ```\n Finally, returns the sorted arrays by a 2D array: `[sorted arr1, sorted arr2]`\n \n Note: In ascending order sorting process(not the final sort), if some elements have same value, sort them according to their index; You can modify the original array, but I advise you not to do that. ;-)\n\n```if:haskell\n Note: In Haskell, you are expected to return a tuple of arrays, and good luck trying to modifiy the original array. :]\n```\n\n# Some Examples and explain\n\n```\nsortArrays([5,4,3,2,1],[6,5,7,8,9]) should return\n[[4,5,3,2,1],[9,8,7,5,6]]\n\nsortArrays([2,1,3,4,5],[5,6,7,8,9]) should return\n[[2,1,3,4,5],[6,5,7,8,9]]\n\nsortArrays([5,6,9,2,6,5],[3,6,7,4,8,1]) should return\n[[5,5,2,6,9,6],[4,3,1,6,8,7]]\n```\n\"\"\"", "inputs": [[[5, 4, 3, 2, 1], [6, 5, 7, 8, 9]], [[2, 1, 3, 4, 5], [5, 6, 7, 8, 9]], [[5, 6, 9, 2, 6, 5], [3, 6, 7, 4, 8, 1]]], "outputs": [[[[4, 5, 3, 2, 1], [9, 8, 7, 5, 6]]], [[[2, 1, 3, 4, 5], [6, 5, 7, 8, 9]]], [[[5, 5, 2, 6, 9, 6], [4, 3, 1, 6, 8, 7]]]], "starter_code": "def sort_two_arrays(arr1, arr2):", "canonical_solution": "import numpy as np\n\ndef sort_two_arrays(arr1, arr2):\n    idx2 = np.argsort(arr2, kind='mergesort')\n    idx1 = np.argsort(arr1, kind='mergesort')\n    return [[arr1[i] for i in idx2], [arr2[i] for i in idx1]]", "entry_point": "sort_two_arrays", "task_id": "TACO_lite/404", "input_output_examples": [[[[5, 4, 3, 2, 1], [6, 5, 7, 8, 9]], [[2, 1, 3, 4, 5], [5, 6, 7, 8, 9]], [[5, 6, 9, 2, 6, 5], [3, 6, 7, 4, 8, 1]]], [[[[4, 5, 3, 2, 1], [9, 8, 7, 5, 6]]], [[[2, 1, 3, 4, 5], [6, 5, 7, 8, 9]]], [[[5, 5, 2, 6, 9, 6], [4, 3, 1, 6, 8, 7]]]]]}
{"requirement": "def highest_value(a, b):\n\"\"\"You will be given two ASCII strings, `a` and `b`. Your task is write a function to determine which one of these strings is \"worth\" more, and return it.\n\nA string's worth is determined by the sum of its ASCII codepoint indexes. So, for example, the string `HELLO` has a value of 372: H is codepoint 72, E 69, L 76, and O is 79. The sum of these values is 372.\n\nIn the event of a tie, you should return the first string, i.e. `a`.\n\"\"\"", "inputs": [["AaBbCcXxYyZz0189", "KkLlMmNnOoPp4567"], ["ABcd", "0123"], ["!\"?$%^&*()", "{}[]@~'#:;"], ["ABCD", "DCBA"]], "outputs": [["KkLlMmNnOoPp4567"], ["ABcd"], ["{}[]@~'#:;"], ["ABCD"]], "starter_code": "def highest_value(a, b):", "canonical_solution": "def highest_value(a, b):\n    return max(a, b, key=lambda s: sum(map(ord, s)))", "entry_point": "highest_value", "task_id": "TACO_lite/405", "input_output_examples": [[["HELLO", "WORLD"], ["AaBbCcXxYyZz0189", "KkLlMmNnOoPp4567"]], [["WORLD"], ["KkLlMmNnOoPp4567"]]]}
{"requirement": "def riders(stations, lost):\n\"\"\"# A History Lesson\n\nThe Pony Express was a mail service operating in the US in 1859-60.\n\n\n\n\n\nIt reduced the time for messages to travel between the Atlantic and Pacific coasts to about 10 days, before it was made obsolete by the transcontinental telegraph.\n\n# How it worked\n\nThere were a number of *stations*, where:\n\n\n* The rider switched to a fresh horse and carried on, or\n\n* The mail bag was handed over to the next rider\n\n\n# Kata Task\n\n\n`stations` is a list/array of distances (miles) from one station to the next along the Pony Express route.\n\nImplement the `riders` method/function, to return how many riders are necessary to get the mail from one end to the other.\n\n##  Missing rider\n\nIn this version of the Kata a rider may go missing. In practice, this could be for a number of reasons - a lame horse, an accidental fall, foul play... \n\nAfter some time, the rider's absence would be noticed at the **next** station, so the next designated rider from there would have to back-track the mail route to look for his missing colleague. The missing rider is then safely escorted back to the station he last came from, and the mail bags are handed to his rescuer (or another substitute rider if necessary). \n\n`stationX` is the number (2..N) of the station where the rider's absence was noticed.\n\n# Notes\n\n* Each rider travels as far as he can, but never more than 100 miles.\n\n# Example\n\nGIven\n\n* `stations = [43, 23, 40, 13]`\n\n* `stationX = 4`\n\nSo\n\n`S1` ...  ... 43 ...  ... `S2` ...  ... 23 ...  ... `S3` ...  ... 40 ...  ... `S4` ...  ... 13 ...  ... `S5`\n\n* Rider 1 gets as far as Station S3\n* Rider 2 (at station S3) takes mail bags from Rider 1\n* Rider 2 never arrives at station S4\n* Rider 3 goes back to find what happened to Rider 2\n* Rider 2 and Rider 3 return together back to Station S3\n* Rider 3 takes mail bags from Rider 2\n* Rider 3 completes the journey to Station S5\n\n**Answer:** \n3 riders\n\n\n\n\n*Good Luck.\nDM.*\n\n---\n\nSee also\n* The Pony Express\n* The Pony Express (missing rider)\n\"\"\"", "inputs": [[[43, 23, 40, 13], 4], [[18, 15], 2], [[43, 23, 40, 13], 3], [[33, 8, 16, 47, 30, 30, 46], 5], [[6, 24, 6, 8, 28, 8, 23, 47, 17, 29, 37, 18, 40, 49], 2], [[50, 50], 2], [[50, 50, 25, 50, 24], 3], [[50, 51, 25, 50, 25], 3], [[50, 100, 25, 50, 26], 3], [[100], 2], [[50, 50], 3], [[50, 51], 3]], "outputs": [[3], [2], [2], [5], [5], [3], [3], [5], [6], [3], [2], [4]], "starter_code": "def riders(stations, lost):", "canonical_solution": "def riders(stations, lost):\n    stations = stations[:lost - 1] + stations[lost - 2:]\n    rider, dist = (1, 0)\n    for i, d in enumerate(stations):\n        rider += (dist + d > 100) + (i == lost - 2)\n        dist = dist * (dist + d <= 100 and i != lost - 2) + d\n    return rider", "entry_point": "riders", "task_id": "TACO_lite/406", "input_output_examples": [[[[43, 23, 40, 13], 4]], [[3]]]}
{"requirement": "def solution(*args):\n\"\"\"Complete the solution so that it returns true if it contains any duplicate argument values. Any number of arguments may be passed into the function.\n\nThe array values passed in will only be strings or numbers. The only valid return values are `true` and `false`.\n\nExamples:\n```\nsolution(1, 2, 3)             -->  false\nsolution(1, 2, 3, 2)          -->  true\nsolution('1', '2', '3', '2')  -->  true\n```\n\"\"\"", "inputs": [[1, 2, 3, 1, 2], [1, 1], [1, 0], ["a", "b"], ["a", "b", "a"], [1, 2, 42, 3, 4, 5, 42], ["a", "b", "c", "d"], ["a", "b", "c", "c"], ["a", "b", "c", "d", "e", "f", "f", "b"]], "outputs": [[true], [true], [false], [false], [true], [true], [false], [true], [true]], "starter_code": "def solution(*args):", "canonical_solution": "def solution(*args):\n    return len(args) != len(set(args))", "entry_point": "solution", "task_id": "TACO_lite/407", "input_output_examples": [[[1, 2, 3], [1, 2, 3, 2], ["1", "2", "3", "2"]], [[false], [true], [true]]]}
{"requirement": "def solution(a):\n\"\"\"## Description\n\nGiven an array X of positive integers, its elements are to be transformed by running the following operation on them as many times as required:\n\n```if X[i] > X[j] then X[i] = X[i] - X[j]```\n\nWhen no more transformations are possible, return its sum (\"smallest possible sum\").\n\nFor instance, the successive transformation of the elements of input X = [6, 9, 21] is detailed below:\n```\nX_1 = [6, 9, 12] # -> X_1[2] = X[2] - X[1] = 21 - 9\nX_2 = [6, 9, 6]  # -> X_2[2] = X_1[2] - X_1[0] = 12 - 6\nX_3 = [6, 3, 6]  # -> X_3[1] = X_2[1] - X_2[0] = 9 - 6\nX_4 = [6, 3, 3]  # -> X_4[2] = X_3[2] - X_3[1] = 6 - 3\nX_5 = [3, 3, 3]  # -> X_5[1] = X_4[0] - X_4[1] = 6 - 3\n```\nThe returning output is the sum of the final transformation (here 9).\n\n## Example\n\n## Solution steps:\n\n## Additional notes:\n\nThere are performance tests consisted of very big numbers and arrays of size at least 30000. Please write an efficient algorithm to prevent timeout.\n\"\"\"", "inputs": [[[6, 9, 21]], [[9]], [[30, 12]], [[11, 22]], [[1, 21, 55]], [[4, 16, 24]], [[3, 13, 23, 7, 83]], [[60, 12, 96, 48, 60, 24, 72, 36, 72, 72, 48]], [[71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71]]], "outputs": [[9], [9], [12], [22], [3], [12], [5], [132], [923]], "starter_code": "def solution(a):", "canonical_solution": "def solution(a):\n    a_len = len(a)\n    a = set(a)\n    while len(a) != 1:\n        b = max(a)\n        a.remove(b)\n        a.add(b - max(a))\n    return max(a) * a_len", "entry_point": "solution", "task_id": "TACO_lite/408", "input_output_examples": [[[[6, 9, 21]]], [[9]]]}
{"requirement": "def vowel_indices(word):\n\"\"\"We want to know the index of the vowels in a given word, for example, there are two vowels in the word super (the second and fourth letters). \n\nSo given a string \"super\", we should return a list of [2, 4].\n\n        Some examples:\n        Mmmm  => []\n        Super => [2,4]\n        Apple => [1,5]\n        YoMama -> [1,2,4,6]\n\n**NOTES:**\n\n* Vowels in this context refers to: a e i o u y (including upper case)\n* This is indexed from `[1..n]` (not zero indexed!)\n\"\"\"", "inputs": [["mmm"], ["apple"], ["super"], ["orange"], ["grapes"], ["supercalifragilisticexpialidocious"], ["123456"], ["crIssUm"], ["Implied"], ["rIc"], ["UNDISARMED"], ["bialy"], ["stumpknocker"], ["narboonnee"], ["carlstadt"], ["ephodee"], ["spicery"], ["oftenness"], ["bewept"], ["capsized"]], "outputs": [[[]], [[1, 5]], [[2, 4]], [[1, 3, 6]], [[3, 5]], [[2, 4, 7, 9, 12, 14, 16, 19, 21, 24, 25, 27, 29, 31, 32, 33]], [[]], [[3, 6]], [[1, 5, 6]], [[2]], [[1, 4, 6, 9]], [[2, 3, 5]], [[3, 8, 11]], [[2, 5, 6, 9, 10]], [[2, 7]], [[1, 4, 6, 7]], [[3, 5, 7]], [[1, 4, 7]], [[2, 4]], [[2, 5, 7]]], "starter_code": "def vowel_indices(word):", "canonical_solution": "def vowel_indices(word):\n    return [i for i, x in enumerate(word, 1) if x.lower() in 'aeiouy']", "entry_point": "vowel_indices", "task_id": "TACO_lite/409", "input_output_examples": [[["Mmmm"], ["Super"], ["Apple"], ["YoMama"]], [[[]], [[2, 4]], [[1, 5]], [[1, 2, 4, 6]]]]}
{"requirement": "def prod_int_partii(n, s, min_=2):\n\"\"\"You should have done Product Partitions I to do this second part.\nIf you solved it, you should have notice that we try to obtain the multiplicative partitions with ```n ≤ 100 ```.\n\nIn this kata we will have more challenging values, our ```n ≤  10000```. So, we need a more optimized a faster code.\n\nWe need the function ```prod_int_partii()``` that will give all the amount of different products, excepting the number itself multiplied by one.\n\nThe function ```prod_int_partii()``` will receive two arguments, the number ```n``` for the one we have to obtain all the multiplicative partitions, and an integer s that determines the products that have an amount of factors equals to ```s```.\n\nThe function will output a list with this structure:\n```python\n[(1), (2), [(3)]]\n\n(1) Total amount of different products we can obtain, using the factors of n. (We do not consider the product n . 1)\n\n(2) Total amount of products that have an amount of factors equals to s.\n\n[(3)] A list of lists with each product represented with by a sorted list of the factors. All the product- lists should be sorted also.\nIf we have only one product-list as a result, the function will give only the list \nand will not use the list of lists\n```\nLet's see some cases:\n```python\nprod_int_partii(36, 3) == [8, 3, [[2, 2, 9], [2, 3, 6], [3, 3, 4]]]\n\n/// (1) ----> 8 # Amount of different products, they are: [2, 2, 3, 3], [2, 2, 9], \n[2, 3, 6], [2, 18], [3, 3, 4], [3, 12], [4, 9], [6, 6] (8 products)\n    \n    (2) ----> 3 # Amount of products with three factors (see them bellow)\n\n    (3) ----> [[2, 2, 9], [2, 3, 6], [3, 3, 4]] # These are the products with 3 factors\n```\n```python\nprod_int_partii(48, 5) == [11, 1, [2, 2, 2, 2, 3]] # Only one list.\n```\nAgain consider that some numbers will not have multiplicative partitions.\n```python\nprod_int_partii(37, 2) == [0, 0, []]\n```\nHappy coding!!\n\n(Recursion is advisable)\n\"\"\"", "inputs": [[36, 3], [48, 5], [37, 2], [96, 5], [96, 6]], "outputs": [[[8, 3, [[2, 2, 9], [2, 3, 6], [3, 3, 4]]]], [[11, 1, [2, 2, 2, 2, 3]]], [[0, 0, []]], [[18, 2, [[2, 2, 2, 2, 6], [2, 2, 2, 3, 4]]]], [[18, 1, [2, 2, 2, 2, 2, 3]]]], "starter_code": "def prod_int_partii(n, s, min_=2):", "canonical_solution": "def prod_int_partii(n, s, min_=2):\n    total, fac = (0, [])\n    for d in range(min_, int(n ** 0.5) + 1):\n        if not n % d:\n            count, l, sub = prod_int_partii(n // d, s - 1, d)\n            if l == 1:\n                sub = [sub]\n            total += count + 1\n            fac.extend(([d] + x for x in sub))\n    if s == 1:\n        fac = [[n]]\n    return [total, len(fac), fac[0] if len(fac) == 1 else fac]", "entry_point": "prod_int_partii", "task_id": "TACO_lite/410", "input_output_examples": [[[36, 3], [48, 5], [37, 2]], [[8, 3, [[2, 2, 9], [2, 3, 6], [3, 3, 4]]], [11, 1, [2, 2, 2, 2, 3]], [0, 0, []]]]}
{"requirement": "def word_count(s):\n\"\"\"Kate likes to count words in text blocks. By words she means continuous sequences of English alphabetic characters (from a to z ). Here are examples:\n\n`Hello there, little user5453 374 ())$. I’d been using my sphere as a stool. Slow-moving target 839342 was hit by OMGd-63 or K4mp.` contains \"words\" `['Hello', 'there', 'little', 'user', 'I', 'd', 'been', 'using', 'my','sphere', 'as', 'a', 'stool', 'Slow', 'moving', 'target', 'was', 'hit', 'by', 'OMGd', 'or', 'K', 'mp']`\n\nKate doesn't like some of words and doesn't count them. Words to be excluded are \"a\", \"the\", \"on\", \"at\", \"of\", \"upon\", \"in\" and \"as\", case-insensitive.\n\nToday Kate's too lazy and have decided to teach her computer to count \"words\" for her.\n\n\nExample Input 1\n-------------\nHello there, little user5453 374 ())$.\n\nExample Output 1\n-------------\n4\n\nExample Input 2\n-------------\n\n  I’d been using my sphere as a stool. I traced counterclockwise circles on it with my fingertips and it shrank until I could palm it. My bolt had shifted while I’d been sitting. I pulled it up and yanked the pleats straight as I careered around tables, chairs, globes, and slow-moving fraas. I passed under a stone arch into the Scriptorium. The place smelled richly of ink. Maybe it was because an ancient fraa and his two fids were copying out books there. But I wondered how long it would take to stop smelling that way if no one ever used it at all; a lot of ink had been spent there, and the wet smell of it must be deep into everything.\n\nExample Output 2\n--------------\n\n112\n\"\"\"", "inputs": [["hello there"], ["hello there and a hi"], ["I'd like to say goodbye"], ["Slow-moving user6463 has been here"], ["%^&abc!@# wer45tre"], ["abc123abc123abc"], ["Really2374239847 long ^&#$&(*@# sequence"], ["Hello there, little user5453 374 ())$."]], "outputs": [[2], [4], [6], [6], [3], [3], [3], [4]], "starter_code": "def word_count(s):", "canonical_solution": "from re import compile, finditer\nOMIT = {'a', 'the', 'on', 'at', 'of', 'upon', 'in', 'as'}\nREGEX = compile('[a-z]+')\n\ndef word_count(s):\n    return sum((a.group() not in OMIT for a in finditer(REGEX, s.lower())))", "entry_point": "word_count", "task_id": "TACO_lite/411", "input_output_examples": [[["Hello there, little user5453 374 ())$."], ["I’d been using my sphere as a stool. I traced counterclockwise circles on it with my fingertips and it shrank until I could palm it. My bolt had shifted while I’d been sitting. I pulled it up and yanked the pleats straight as I careered around tables, chairs, globes, and slow-moving fraas. I passed under a stone arch into the Scriptorium. The place smelled richly of ink. Maybe it was because an ancient fraa and his two fids were copying out books there. But I wondered how long it would take to stop smelling that way if no one ever used it at all; a lot of ink had been spent there, and the wet smell of it must be deep into everything."]], [[4], [112]]]}
{"requirement": "def min_sum(arr):\n\"\"\"# Introduction and Warm-up (Highly recommended)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n___\n\n# Task\n\n**_Given_** an **_array of integers_** , **_Find the minimum sum_** which is obtained *from summing each Two integers product* .\n___\n\n# Notes \n\n* **_Array/list_** *will contain* **_positives only_** . \n* **_Array/list_** *will always has* **_even size_**\n___\n\n# Input >> Output Examples\n\n```\nminSum({5,4,2,3}) ==> return (22) \n```\n\n## **_Explanation_**:\n\n* **_The minimum sum_** *obtained from summing each two integers product* ,  ` 5*2 + 3*4 = 22`\n___\n\n```\nminSum({12,6,10,26,3,24}) ==> return (342)\n```\n\n## **_Explanation_**:\n\n* **_The minimum sum_** *obtained from summing each two integers product* ,  ` 26*3 + 24*6 + 12*10 = 342`\n\n___\n\n```\nminSum({9,2,8,7,5,4,0,6}) ==> return (74)\n```\n\n## **_Explanation_**:\n\n* **_The minimum sum_** *obtained from summing each two integers product* ,  ` 9*0 + 8*2 +7*4 +6*5 = 74`\n\n___\n\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[5, 4, 2, 3]], [[12, 6, 10, 26, 3, 24]], [[9, 2, 8, 7, 5, 4, 0, 6]]], "outputs": [[22], [342], [74]], "starter_code": "def min_sum(arr):", "canonical_solution": "def min_sum(arr):\n    arr = sorted(arr)\n    return sum((arr[i] * arr[-i - 1] for i in range(len(arr) // 2)))", "entry_point": "min_sum", "task_id": "TACO_lite/412", "input_output_examples": [[[[5, 4, 2, 3]], [[12, 6, 10, 26, 3, 24]], [[9, 2, 8, 7, 5, 4, 0, 6]]], [[22], [342], [74]]]}
{"requirement": "def get_last_digit(index):\n\"\"\"As you probably know, Fibonacci sequence are the numbers in the following integer sequence:\n1, 1, 2, 3, 5, 8, 13...\nWrite a method that takes the index as an argument and returns last digit from fibonacci number. Example:\n  getLastDigit(15) - 610. Your method must return 0 because the last digit of 610 is 0.\nFibonacci sequence grows very fast and value can take very big numbers (bigger than integer type can contain), so, please, be careful with overflow.\n\n[Hardcore version of this kata](http://www.codewars.com/kata/find-last-fibonacci-digit-hardcore-version), no bruteforce will work here ;)\n\"\"\"", "inputs": [[193150], [300], [20001], [800], [1001], [100], [260], [1111], [1234], [99999], [10], [234], [193241], [79], [270]], "outputs": [[5], [0], [6], [5], [1], [5], [5], [9], [7], [6], [5], [2], [1], [1], [0]], "starter_code": "def get_last_digit(index):", "canonical_solution": "def get_last_digit(index):\n    a, b = (0, 1)\n    for _ in range(index):\n        a, b = (b, (a + b) % 10)\n    return a", "entry_point": "get_last_digit", "task_id": "TACO_lite/413", "input_output_examples": [[[15], [193150]], [[0], [5]]]}
{"requirement": "def time_correct(t):\n\"\"\"A new task for you!\n\nYou have to create a method, that corrects a given time string.\nThere was a problem in addition, so many of the time strings are broken.\nTime-Format is european. So from \"00:00:00\" to \"23:59:59\".\n\n\nSome examples:\n\n\"09:10:01\" -> \"09:10:01\"\n\"11:70:10\" -> \"12:10:10\"\n\"19:99:99\" -> \"20:40:39\"\n\"24:01:01\" -> \"00:01:01\"\n\nIf the input-string is null or empty return exactly this value! (empty string for C++)\nIf the time-string-format is invalid, return null. (empty string for C++)\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have created other katas. Have a look if you like coding and challenges.\n\"\"\"", "inputs": [[null], [""], ["001122"], ["00;11;22"], ["0a:1c:22"], ["09:10:01"], ["11:70:10"], ["19:99:99"], ["24:01:01"], ["52:01:01"], ["14:59:94"]], "outputs": [[null], [""], [null], [null], [null], ["09:10:01"], ["12:10:10"], ["20:40:39"], ["00:01:01"], ["04:01:01"], ["15:00:34"]], "starter_code": "def time_correct(t):", "canonical_solution": "def time_correct(t):\n    if not t:\n        return t\n    try:\n        h, m, s = map(int, t.split(':'))\n        if s >= 60:\n            s -= 60\n            m += 1\n        if m >= 60:\n            m -= 60\n            h += 1\n        return '%02d:%02d:%02d' % (h % 24, m, s)\n    except:\n        pass", "entry_point": "time_correct", "task_id": "TACO_lite/414", "input_output_examples": [[["09:10:01"], ["11:70:10"], ["19:99:99"], ["24:01:01"], [null]], [["09:10:01"], ["12:10:10"], ["20:40:39"], ["00:01:01"], [null]]]}
{"requirement": "def pre_fizz(n):\n\"\"\"This is the first step to understanding FizzBuzz.  \n\nYour inputs:\na positive integer, n, greater than or equal to one.\nn is provided, you have NO CONTROL over its value.\n\nYour expected output is an array of positive integers from 1 to n (inclusive).\n\nYour job is to write an algorithm that gets you from the input to the output.\n\"\"\"", "inputs": [[1], [2], [3], [4], [5]], "outputs": [[[1]], [[1, 2]], [[1, 2, 3]], [[1, 2, 3, 4]], [[1, 2, 3, 4, 5]]], "starter_code": "def pre_fizz(n):", "canonical_solution": "def pre_fizz(n):\n    return list(range(1, n + 1))", "entry_point": "pre_fizz", "task_id": "TACO_lite/415", "input_output_examples": [[[1]], [[[1]]]]}
{"requirement": "def get_strings(city):\n\"\"\"You receive the name of a city as a string, and you need to return a string that shows how many times each letter shows up in the string by using an asterisk (`*`).\n\nFor example:\n\n```\n\"Chicago\"  -->  \"c:**,h:*,i:*,a:*,g:*,o:*\"\n```\n\nAs you can see, the letter `c` is shown only once, but with 2 asterisks.\n\nThe return string should include **only the letters** (not the dashes, spaces, apostrophes, etc). There should be no spaces in the output, and the different letters are separated by a comma (`,`) as seen in the example above.\n\nNote that the return string must list the letters in order of their first appearence in the original string.\n\nMore examples:\n```\n\"Bangkok\"    -->  \"b:*,a:*,n:*,g:*,k:**,o:*\"\n\"Las Vegas\"  -->  \"l:*,a:**,s:**,v:*,e:*,g:*\"\n```\n\nHave fun! ;)\n\"\"\"", "inputs": [["Chicago"], ["Bangkok"], ["Las Vegas"], ["Llanfairpwllgwyngyllgogerychwyrndrobwllllantysiliogogogoch"]], "outputs": [["c:**,h:*,i:*,a:*,g:*,o:*"], ["b:*,a:*,n:*,g:*,k:**,o:*"], ["l:*,a:**,s:**,v:*,e:*,g:*"], ["l:***********,a:***,n:****,f:*,i:***,r:****,p:*,w:****,g:*******,y:*****,o:******,e:*,c:**,h:**,d:*,b:*,t:*,s:*"]], "starter_code": "def get_strings(city):", "canonical_solution": "from collections import Counter\n\ndef get_strings(city):\n    return ','.join((f'{char}:{'*' * count}' for char, count in Counter(city.replace(' ', '').lower()).items()))", "entry_point": "get_strings", "task_id": "TACO_lite/416", "input_output_examples": [[["Chicago"], ["Bangkok"], ["Las Vegas"]], [["c:**,h:*,i:*,a:*,g:*,o:*"], ["b:*,a:*,n:*,g:*,k:**,o:*"], ["l:*,a:**,s:**,v:*,e:*,g:*"]]]}
{"requirement": "def prod_int_part(n, min_=2):\n\"\"\"Given a natural number n, we want to know in how many ways we may express these numbers as product of other numbers.\n\nFor example the number\n```python\n 18 = 2 x 9 = 3 x 6 = 2 x 3 x 3 # (we do not consider the product 18 x 1), (3 ways) \n```\n\nSee this example a bit more complicated,\n```python\n60 = 2 x 30 = 3 x 20 =  4 x 15 = 5 x 12 = 6 x 10 = 2 x 2 x 15 = 2 x 3 x 10 = 2 x 5 x 6 =  3 x 4 x 5 = 2 x 2 x 3 x 5 (10 ways)\n```\nWe need the function ```prod_int_part()```, that receives a number n, and ouputs the amount of total different products with all the products of max length sorted in this way:\n\n1) each product will be expressed in a list of its factors in incresing order from left to right\n\n2) if there is more than one list-product, these lists should be ordered by the value of the first term, if two lists have the same term equal thay should be ordered by the value of the second term.\n\nLet's see some cases:\n```python\nprod_int_part(18) == [3, [2, 3, 3]]\n\nprod_int_part(60) == [10, [2, 2, 3, 5]\n```\n\nIf we have only one list-product with the maximum length, there is no use to have it with two nested braces, so the result will be like this case:\n```python\nprod_int_part(54) == [6, [2, 3, 3, 3]]\n```\n\nNow, let's see examples when ```n``` cannot be partitioned:\n```python\nprod_int_part(37) == [0, []]\n\nprod_int_part(61) == [0, []]\n```\nEnjoy it!!\n\"\"\"", "inputs": [[18], [60], [54], [37], [61]], "outputs": [[[3, [2, 3, 3]]], [[10, [2, 2, 3, 5]]], [[6, [2, 3, 3, 3]]], [[0, []]], [[0, []]]], "starter_code": "def prod_int_part(n, min_=2):", "canonical_solution": "def prod_int_part(n, min_=2):\n    total, fac = (0, [])\n    for d in range(min_, int(n ** 0.5) + 1):\n        if not n % d:\n            count, sub = prod_int_part(n // d, d)\n            total += count + 1\n            if not count:\n                sub = [n // d]\n            if not fac:\n                fac = [d] + sub\n    return [total, fac]", "entry_point": "prod_int_part", "task_id": "TACO_lite/417", "input_output_examples": [[[18], [60], [54], [37], [61]], [[3, [2, 3, 3]], [10, [2, 2, 3, 5]], [6, [2, 3, 3, 3]], [0, []], [0, []]]]}
{"requirement": "def spinning_rings(inner_max, outer_max):\n\"\"\"Imagine two rings with numbers on them. The inner ring spins clockwise (decreasing by 1 each spin) and the outer ring spins counter clockwise (increasing by 1 each spin). We start with both rings aligned on 0 at the top, and on each move we spin each ring one increment. How many moves will it take before both rings show the same number at the top again?\n\nThe inner ring has integers from 0 to innerMax and the outer ring has integers from 0 to outerMax, where innerMax and outerMax are integers >= 1.\n\n```\ne.g. if innerMax is 2 and outerMax is 3 then after\n1 move: inner = 2, outer = 1\n2 moves: inner = 1, outer = 2\n3 moves: inner = 0, outer = 3\n4 moves: inner = 2, outer = 0\n5 moves: inner = 1, outer = 1\nTherefore it takes 5 moves for the two rings to reach the same number\nTherefore spinningRings(2, 3) = 5\n```\n```\ne.g. if innerMax is 3 and outerMax is 2 then after\n1 move: inner = 3, outer = 1\n2 moves: inner = 2, outer = 2\nTherefore it takes 2 moves for the two rings to reach the same number\nspinningRings(3, 2) = 2\n```\n\n---\n\nfor a bigger challenge, check out the [Performance Version](https://www.codewars.com/kata/59b0b7cd2a00d219ab0000c5) of this kata by @Voile\n\"\"\"", "inputs": [[2, 3], [3, 2], [1, 1], [2, 2], [3, 3]], "outputs": [[5], [2], [1], [3], [2]], "starter_code": "def spinning_rings(inner_max, outer_max):", "canonical_solution": "from itertools import count\n\ndef spinning_rings(inner_max, outer_max):\n    return next((i for i in count(1) if i % (outer_max + 1) == -i % (inner_max + 1)))", "entry_point": "spinning_rings", "task_id": "TACO_lite/418", "input_output_examples": [[[2, 3], [3, 2]], [[5], [2]]]}
{"requirement": "def execute(code):\n\"\"\"# RoboScript #3 - Implement the RS2 Specification\n\n## Disclaimer\n\nThe story presented in this Kata Series is purely fictional; any resemblance to actual programming languages, products, organisations or people should be treated as purely coincidental.\n\n## About this Kata Series\n\nThis Kata Series is based on a fictional story about a computer scientist and engineer who owns a firm that sells a toy robot called MyRobot which can interpret its own (esoteric) programming language called RoboScript.  Naturally, this Kata Series deals with the software side of things (I'm afraid Codewars cannot test your ability to build a physical robot!).\n\n## Story\n\nLast time, you implemented the RS1 specification which allowed your customers to write more concise scripts for their robots by allowing them to simplify consecutive repeated commands by postfixing a non-negative integer onto the selected command.  For example, if your customers wanted to make their robot move 20 steps to the right, instead of typing `FFFFFFFFFFFFFFFFFFFF`, they could simply type `F20` which made their scripts more concise.  However, you later realised that this simplification wasn't enough.  What if a set of commands/moves were to be repeated?  The code would still appear cumbersome.  Take the program that makes the robot move in a snake-like manner, for example.  The shortened code for it was `F4LF4RF4RF4LF4LF4RF4RF4LF4LF4RF4RF4` which still contained a lot of repeated commands.\n\n## Task\n\nYour task is to allow your customers to further shorten their scripts and make them even more concise by implementing the newest specification of RoboScript (at the time of writing) that is RS2.  RS2 syntax is a superset of RS1 syntax which means that all valid RS1 code from the previous Kata of this Series should still work with your RS2 interpreter.  The only main addition in RS2 is that the customer should be able to group certain sets of commands using round brackets.  For example, the last example used in the previous Kata in this Series:\n\n\nLF5RF3RF3RF7\n \n\n... can be expressed in RS2 as:\n\n\nLF5(RF3)(RF3R)F7\n\n\nOr ... \n\n\n(L(F5(RF3))(((R(F3R)F7))))\n\n\nSimply put, your interpreter should be able to deal with nested brackets of any level.\n\nAnd of course, brackets are useless if you cannot use them to repeat a sequence of movements!  Similar to how individual commands can be postfixed by a non-negative integer to specify how many times to repeat that command, a sequence of commands grouped by round brackets `()` should also be repeated `n` times provided a non-negative integer is postfixed onto the brackets, like such:\n\n\n(SEQUENCE_OF_COMMANDS)n\n\n\n... is equivalent to ... \n\n\nSEQUENCE_OF_COMMANDS...SEQUENCE_OF_COMMANDS (repeatedly executed \"n\" times)\n\n\nFor example, this RS1 program:\n\n\nF4LF4RF4RF4LF4LF4RF4RF4LF4LF4RF4RF4\n\n\n... can be rewritten in RS2 as:\n\n\nF4L(F4RF4RF4LF4L)2F4RF4RF4\n\n\nOr:\n\n\nF4L((F4R)2(F4L)2)2(F4R)2F4\n\n\nAll 4 example tests have been included for you.  Good luck :D\n\n## Kata in this Series\n\n1. [RoboScript #1 - Implement Syntax Highlighting](https://www.codewars.com/kata/roboscript-number-1-implement-syntax-highlighting)\n2. [RoboScript #2 - Implement the RS1 Specification](https://www.codewars.com/kata/roboscript-number-2-implement-the-rs1-specification)\n3. **RoboScript #3 - Implement the RS2 Specification**\n4. [RoboScript #4 - RS3 Patterns to the Rescue](https://www.codewars.com/kata/594b898169c1d644f900002e)\n5. [RoboScript #5 - The Final Obstacle (Implement RSU)](https://www.codewars.com/kata/5a12755832b8b956a9000133)\n\"\"\"", "inputs": [["LF5(RF3)(RF3R)F7"], ["(L(F5(RF3))(((R(F3R)F7))))"], ["F4L(F4RF4RF4LF4L)2F4RF4RF4"], ["F4L((F4R)2(F4L)2)2(F4R)2F4"], ["F2LF3L(F2)2LF5L(F3)2LF7L((F2)2)2L(F3)3L(F5)2"], ["F2LF3L(F2)2LF5L(F3)2LF7L(F4)2L((F3)1)3L(F5)2"], ["(F5RF5R(F3R)2)3"], ["((F5R)2(F3R)2)3"], ["((F3LF3R)2FRF6L)2"], ["(F12)3"], ["(F4)13"], ["((F3)10(F2)11)10"], ["FFF0F0LFL0FF((F5R0R)2(F3R)2)0RFR0FFF0FF0F0F0"], ["F0L0F0((F3R0LF3R0R0R)0FL0L0RF6F0L)2F0F0F0F0F0"]], "outputs": [["    ****\r\n    *  *\r\n    *  *\r\n********\r\n    *   \r\n    *   "], ["    ****\r\n    *  *\r\n    *  *\r\n********\r\n    *   \r\n    *   "], ["    *****   *****   *****\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n*****   *****   *****   *"], ["    *****   *****   *****\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n    *   *   *   *   *   *\r\n*****   *****   *****   *"], ["*********  \r\n*       *  \r\n* ***** *  \r\n* *   * *  \r\n* *   * *  \r\n* * *** *  \r\n* *     *  \r\n* *******  \r\n*          \r\n***********"], ["*********  \r\n*       *  \r\n* ***** *  \r\n* *   * *  \r\n* *   * *  \r\n* * *** *  \r\n* *     *  \r\n* *******  \r\n*          \r\n***********"], ["******    \r\n     *    \r\n  ******  \r\n  *  * *  \r\n  * ******\r\n  **** * *\r\n    * ** *\r\n    **** *\r\n      *  *\r\n      ****"], ["******    \r\n     *    \r\n  ******  \r\n  *  * *  \r\n  * ******\r\n  **** * *\r\n    * ** *\r\n    **** *\r\n      *  *\r\n      ****"], ["      **     **\r\n      **     **\r\n      **     **\r\n   *****  *****\r\n   *   *  *   *\r\n   *   *  *   *\r\nr\n  *    \r\n  *    \r\n***    "], ["** \r\n * \r\n * \r\n * \r\n * \r\n * \r\n **\r\n  *\r\n  *\r\n  *\r\n  *\r\n  *\r\n  *"]], "starter_code": "def execute(code):", "canonical_solution": "from collections import deque\nimport re\nTOKENIZER = re.compile('(R+|F+|L+|\\\\)|\\\\()(\\\\d*)')\n\ndef parseCode(code):\n    cmds = [[]]\n    for cmd, n in TOKENIZER.findall(code):\n        s, r = (cmd[0], int(n or '1') + len(cmd) - 1)\n        if cmd == '(':\n            cmds.append([])\n        elif cmd == ')':\n            lst = cmds.pop()\n            cmds[-1].extend(lst * r)\n        else:\n            cmds[-1] += [(s, r)]\n    return cmds[0]\n\ndef execute(code):\n    pos, dirs = ((0, 0), deque([(0, 1), (1, 0), (0, -1), (-1, 0)]))\n    seens = {pos}\n    for s, r in parseCode(code):\n        if s == 'F':\n            for _ in range(r):\n                pos = tuple((z + dz for z, dz in zip(pos, dirs[0])))\n                seens.add(pos)\n        else:\n            dirs.rotate(r % 4 * (-1) ** (s == 'R'))\n    miX, maX = (min((x for x, y in seens)), max((x for x, y in seens)))\n    miY, maY = (min((y for x, y in seens)), max((y for x, y in seens)))\n    return '\\r\\n'.join((''.join(('*' if (x, y) in seens else ' ' for y in range(miY, maY + 1))) for x in range(miX, maX + 1)))", "entry_point": "execute", "task_id": "TACO_lite/419", "input_output_examples": [[["F4LF4RF4RF4LF4LF4RF4RF4LF4LF4RF4RF4"], ["LF5(RF3)(RF3R)F7"], ["F4L((F4R)2(F4L)2)2(F4R)2F4"]], [["F4L(F4RF4RF4LF4L)2F4RF4RF4"], ["    ****\r\n    *  *\r\n    *  *\r\n********\r\n    *   \r\n    *   "], ["F4L(F4RF4RF4LF4L)2F4RF4RF4"]]]}
{"requirement": "def optimum_location(students, locations):\n\"\"\"### Preface\nYou are currently working together with a local community to build a school teaching children how to code. First plans have been made and the community wants to decide on the best location for the coding school.\nIn order to make this decision data about the location of students and potential locations is collected. \n\n### Problem\nIn order to be able to attract and teach as many students as possible we want to minimize the total traveling distance for potential students. The streets system is organized in a traditional grid system and students can only travel horizontally or vertically (not diagonal).\n\nThe locations of interested students is given as an array with the first value of each entry presenting the x coordinate and the second value presenting the y coordinate:\n```python\nstudents = [[3,7],[2,2],[14,1], ...];\n```\nPotential locations are passed as an array of objects with an unique id, a x and y coordinate:\n```python\nlocations = [{\"id\": 1, \"x\": 3, \"y\": 4}, {\"id\": 2, \"x\": 8, \"y\": 2}, ...];\n```\n\nYour task is now to evaluate which of the school locations would be best to minimize the distance for all potential students to the school.\n\nThe desired output should consist of a string indicating the ID of the best suitable location and the x and y coordinates in the following form:\n\n```\n\"The best location is number 1 with the coordinates x = 3 and y = 4\"\n```\n\"\"\"", "inputs": [[[[3, 7], [2, 2], [14, 1]], [{"id": 1, "x": 3, "y": 4}, {"id": 2, "x": 8, "y": 2}]], [[[54, 7], [1, 211], [14, 44], [12, 5], [14, 7]], [{"id": 1, "x": 44, "y": 55}, {"id": 2, "x": 12, "y": 57}, {"id": 3, "x": 23, "y": 66}]], [[[152, 7], [1, 211], [14, 56], [12, 4], [142, 7]], [{"id": 1, "x": 63, "y": 55}, {"id": 2, "x": 55, "y": 21}, {"id": 3, "x": 144, "y": 12}]], [[[152, 742], [466, 2211], [1412, 564], [142, 444], [142, 744]], [{"id": 1, "x": 1263, "y": 525}, {"id": 2, "x": 55, "y": 21}, {"id": 3, "x": 537, "y": 1244}]], [[[7, 66], [71, 7], [0, 94], [16, 93], [33, 49], [49, 81], [17, 2], [95, 71], [32, 14], [31, 41], [92, 72], [12, 79]], [{"y": 38, "x": 32, "id": 1}, {"y": 49, "x": 73, "id": 2}, {"y": 85, "x": 50, "id": 3}, {"y": 2, "x": 79, "id": 4}, {"y": 20, "x": 44, "id": 5}, {"y": 56, "x": 17, "id": 6}, {"y": 43, "x": 26, "id": 7}, {"y": 61, "x": 89, "id": 8}, {"y": 18, "x": 15, "id": 9}, {"y": 34, "x": 41, "id": 10}, {"y": 27, "x": 99, "id": 11}]]], "outputs": [["The best location is number 1 with the coordinates x = 3 and y = 4"], ["The best location is number 2 with the coordinates x = 12 and y = 57"], ["The best location is number 2 with the coordinates x = 55 and y = 21"], ["The best location is number 3 with the coordinates x = 537 and y = 1244"], ["The best location is number 6 with the coordinates x = 17 and y = 56"]], "starter_code": "def optimum_location(students, locations):", "canonical_solution": "def optimum_location(students, locations):\n    m = min(locations, key=lambda loc: sum((abs(loc['x'] - s[0]) + abs(loc['y'] - s[1]) for s in students)))\n    return 'The best location is number %d with the coordinates x = %d and y = %d' % (m['id'], m['x'], m['y'])", "entry_point": "optimum_location", "task_id": "TACO_lite/420", "input_output_examples": [[[[[3, 7], [2, 2], [14, 1]], [{"id": 1, "x": 3, "y": 4}, {"id": 2, "x": 8, "y": 2}]]], [["The best location is number 1 with the coordinates x = 3 and y = 4"]]]}
{"requirement": "def calculate(s):\n\"\"\"In this kata, you will do addition and subtraction on a given string. The return value must be also a string.\n\n**Note:** the input will not be empty.\n\n## Examples\n\n```\n\"1plus2plus3plus4\"  --> \"10\"\n\"1plus2plus3minus4\" -->  \"2\"\n```\n\"\"\"", "inputs": [["1plus2plus3plus4"], ["1minus2minus3minus4"], ["1plus2plus3minus4"], ["1minus2plus3minus4"], ["1plus2minus3plus4minus5"]], "outputs": [["10"], ["-8"], ["2"], ["-2"], ["-1"]], "starter_code": "def calculate(s):", "canonical_solution": "def calculate(s):\n    return str(sum((int(n) for n in s.replace('minus', 'plus-').split('plus'))))", "entry_point": "calculate", "task_id": "TACO_lite/421", "input_output_examples": [[["1plus2plus3plus4"], ["1plus2plus3minus4"]], [["10"], ["2"]]]}
{"requirement": "def mul_power(n, k):\n\"\"\"## Task\n\nLet's say we have a positive integer, `$n$`. You have to find the smallest possible positive integer that when multiplied by `$n$`, becomes a perfect power of integer `$k$`. A perfect power of `$k$` is any positive integer that can be represented as `$a^k$`. For example if `$k = 2$`, then `$36$` is a perfect power of `$k$`, but `$27$` isn't.\n\n## Examples\n\n```python\nn, k = 100, 3  return  10, #because 10*100 becomes 1000, and 1000 = 10**3\nn, k = 36, 2   return   1, #because 36 is already a perfect square 6**2\nn, k = 72, 4   return  18, #because 18*72 = 1296 = 6**4\n```\n\n**Notes:** \n+ `$k, n \\in \\mathbb{N} $` and `$ 1 \\lt n \\lt 10^6,\\text{ } 1 \\lt k \\lt 10 $`\n+ However, the output may be way larger than `$10^6$`.\n\nIf you have trouble seeing the numbers, refresh your page ;-) Please rate this kata. All translations are welcome.\n\nABOVE: [If you see this:](https://imgur.com/TKY59S4), refresh your page.\n\"\"\"", "inputs": [[100, 3], [36, 2], [72, 4], [5, 2], [1152, 3]], "outputs": [[10], [1], [18], [5], [12]], "starter_code": "def mul_power(n, k):", "canonical_solution": "from collections import Counter\nfrom math import ceil\nPRIMES = [2] + [n for n in range(3, 1000, 2) if all((n % d for d in range(3, int(n ** 0.5) + 1, 2)))]\n\ndef get_factors(n):\n    factors = []\n    for p in PRIMES:\n        if p > n:\n            break\n        while n % p == 0:\n            factors.append(p)\n            n //= p\n    if n > 1:\n        factors.append(n)\n    return Counter(factors)\n\ndef mul_power(n, k):\n    factors, lcm = (get_factors(n), 1)\n    for p, e in factors.items():\n        lcm *= p ** (ceil(e / k) * k)\n    return lcm // n", "entry_point": "mul_power", "task_id": "TACO_lite/422", "input_output_examples": [[[100, 3], [36, 2], [72, 4]], [[10], [1], [18]]]}
{"requirement": "def select(memory):\n\"\"\"_A mad sociopath scientist just came out with a brilliant invention! He extracted his own memories to forget all the people he hates! Now there's a lot of information in there, so he needs your talent as a developer to automatize that task for him._\n\n> You are given the memories as a string containing people's surname and name (comma separated). The scientist marked one occurrence of each of the people he hates by putting a '!' right before their name.\n\n**Your task is to destroy all the occurrences of the marked people.\nOne more thing ! Hate is contagious, so you also need to erase any memory of the person that comes after any marked name!**\n\n---\nExamples\n---\n---\nInput:\n```\n\"Albert Einstein, !Sarah Connor, Marilyn Monroe, Abraham Lincoln, Sarah Connor, Sean Connery, Marilyn Monroe, Bjarne Stroustrup, Manson Marilyn, Monroe Mary\"\n```\nOutput:\n```\n\"Albert Einstein, Abraham Lincoln, Sean Connery, Bjarne Stroustrup, Manson Marilyn, Monroe Mary\"\n```\n=> We must remove every memories of Sarah Connor because she's marked, but as a side-effect we must also remove all the memories about Marilyn Monroe that comes right after her! Note that we can't destroy the memories of Manson Marilyn or Monroe Mary, so be careful!\n\"\"\"", "inputs": [["Bryan Joubert"], ["Jesse Cox, !Selena Gomez"], ["!Eleena Daru, Obi-Wan Kenobi, Eleena Daru, Jar-Jar Binks"], ["Digital Daggers, !Kiny Nimaj, Rack Istley, Digital Daggers, Digital Daggers"], ["Albert Einstein, !Sarah Connor, Marilyn Monroe, Abraham Lincoln, Sarah Connor, Sean Connery, Marilyn Monroe, Bjarne Stroustrup, Manson Marilyn, Monroe Mary"], ["!Partha Ashanti, !Mindaugas Burton, Stacy Thompson, Amor Hadrien, !Ahtahkakoop Sothy, Partha Ashanti, Uzi Griffin, Partha Ashanti, !Serhan Eutimio, Amor Hadrien, Noor Konstantin"], ["!Code Wars, !Doug Smith, !Cyril Lemaire, !Codin Game"]], "outputs": [["Bryan Joubert"], ["Jesse Cox"], ["Jar-Jar Binks"], ["Digital Daggers, Digital Daggers, Digital Daggers"], ["Albert Einstein, Abraham Lincoln, Sean Connery, Bjarne Stroustrup, Manson Marilyn, Monroe Mary"], ["Uzi Griffin, Noor Konstantin"], [""]], "starter_code": "def select(memory):", "canonical_solution": "def select(memory):\n    lst = memory.split(', ')\n    bad = {who.strip('!') for prev, who in zip([''] + lst, lst + ['']) if who.startswith('!') or prev.startswith('!')}\n    return ', '.join((who for who in map(lambda s: s.strip('!'), lst) if who not in bad))", "entry_point": "select", "task_id": "TACO_lite/423", "input_output_examples": [[["Albert Einstein, !Sarah Connor, Marilyn Monroe, Abraham Lincoln, Sarah Connor, Sean Connery, Marilyn Monroe, Bjarne Stroustrup, Manson Marilyn, Monroe Mary"]], [["Albert Einstein, Abraham Lincoln, Sean Connery, Bjarne Stroustrup, Manson Marilyn, Monroe Mary"]]]}
{"requirement": "def conference_picker(cities_visited, cities_offered):\n\"\"\"Lucy loves to travel. Luckily she is a renowned computer scientist and gets to travel to international conferences using her department's budget.\n\nEach year, Society for Exciting Computer Science Research (SECSR) organizes several conferences around the world. Lucy always picks one conference from that list that is hosted in a city she hasn't been to before, and if that leaves her with more than one option, she picks the conference that she thinks would be most relevant for her field of research.\n\nWrite a function `conferencePicker` that takes in two arguments:\n\n- `citiesVisited`, a list of cities that Lucy has visited before, given as an array of strings.\n- `citiesOffered`, a list of cities that will host SECSR conferences this year, given as an array of strings. `citiesOffered` will already be ordered in terms of the relevance of the conferences for Lucy's research (from the most to the least relevant).\n\nThe function should return the city that Lucy should visit, as a string.\n\nAlso note:\n\n- You should allow for the possibility that Lucy hasn't visited any city before.\n- SECSR organizes at least two conferences each year.\n- If all of the offered conferences are hosted in cities that Lucy has visited before, the function should return `'No worthwhile conferences this year!'` (`Nothing` in Haskell)\n\nExample:\n\"\"\"", "inputs": [[[], ["Philadelphia", "Osaka", "Tokyo", "Melbourne"]], [[], ["Brussels", "Madrid", "London"]], [[], ["Sydney", "Tokyo"]], [["London", "Berlin", "Mexico City", "Melbourne", "Buenos Aires", "Hong Kong", "Madrid", "Paris"], ["Berlin", "Melbourne"]], [["Beijing", "Johannesburg", "Sydney", "Philadelphia", "Hong Kong", "Stockholm", "Chicago", "Seoul", "Mexico City", "Berlin"], ["Stockholm", "Berlin", "Chicago"]], [["Rome"], ["Rome"]], [["Milan"], ["London"]], [["Mexico City", "Dubai", "Philadelphia", "Madrid", "Houston", "Chicago", "Delhi", "Seoul", "Mumbai", "Lisbon", "Hong Kong", "Brisbane", "Stockholm", "Tokyo", "San Francisco", "Rio De Janeiro"], ["Lisbon", "Mexico City"]], [["Gatlantis", "Baldur's Gate", "Gotham City", "Mystara", "Washinkyo", "Central City"], ["Mystara", "Gatlantis", "MegaTokyo", "Genosha", "Central City", "Washinkyo", "Gotham City", "King's Landing", "Waterdeep"]], [["Thay", "Camelot"], ["Waterdeep", "Washinkyo"]]], "outputs": [["Philadelphia"], ["Brussels"], ["Sydney"], ["No worthwhile conferences this year!"], ["No worthwhile conferences this year!"], ["No worthwhile conferences this year!"], ["London"], ["No worthwhile conferences this year!"], ["MegaTokyo"], ["Waterdeep"]], "starter_code": "def conference_picker(cities_visited, cities_offered):", "canonical_solution": "def conference_picker(cities_visited, cities_offered):\n    for city in cities_offered:\n        if city not in cities_visited:\n            return city\n    return 'No worthwhile conferences this year!'", "entry_point": "conference_picker", "task_id": "TACO_lite/424", "input_output_examples": [[[[], ["Philadelphia", "Osaka", "Tokyo", "Melbourne"]]], [["Philadelphia"]]]}
{"requirement": "def blocks_to_collect(level):\n\"\"\"Just another day in the world of Minecraft, Steve is working on his new project -- building a beacon pyramid in front of his house.\n\n![Beacon pyramid](http://www.minecraft101.net/reference/images/beacon_pyramid_thb.jpg)\n\nSteve has already obtained the beacon (the glass wrapped blue thingy on the top), he just needs to build the pyramid. Each level of the pyramid is built using one of the following four kinds of block: gold, diamond, emerald, and iron. Since these four kinds of blocks are relatively hard to collect, Steve needs to know exactly how many of each kind is required to build a pyramid of level N.\n\nAssume that the top level of the pyramid uses gold blocks, the second level uses diamond blocks, the third level uses emerald blocks, the fourth level uses iron blocks, and the fifth level uses gold blocks, etc. (if you are a Minecraft player, you know it's not neccessary the right way to build the pyramid. Let's just assume it is for the sake of this kata ;-))\n\nImplement a function that takes one argument which is the number of levels of the pyramid, and returns an object of the form: `{total: 9, gold: 9, diamond: 0, emerald: 0, iron: 0}`.\n\n---\n\nTo all the Minecraft players out there: \nfeel free to expand this series or let me know if you have any ideas related to Minecraft that can be turned into codewars puzzles. Some ideas I have that might potentially be turned into katas:\n\n* distance traveled in real world vs. in Nether\n* shortest path problems related to mining diamonds/gold/goodies that appears in different levels under ground\n* growth of animal population from breeding\n* redstone stuff?!\n\nIf you do end up expanding this series, please send me a link of your kata so I can check it out and include a link to your kata here :-)\n\n* [Minecraft Series #2: Minimum amount of fuel needed to get some iron ingots](https://www.codewars.com/kata/minecraft-series-number-2-minimum-amount-of-fuel-needed-to-get-some-iron-ingots/ruby)\n* [Minecraft Series #3: Lava is amazing! ](https://www.codewars.com/kata/583a23d40cf946ec380002c2)\n* [Minecraft Series #4: Lava is amazing, however...](https://www.codewars.com/kata/583a6b0b171f3a3c3f0003e3)\n\"\"\"", "inputs": [[1], [2], [3]], "outputs": [[{"total": 9, "gold": 9, "diamond": 0, "emerald": 0, "iron": 0}], [{"total": 34, "gold": 9, "diamond": 25, "emerald": 0, "iron": 0}], [{"total": 83, "gold": 9, "diamond": 25, "emerald": 49, "iron": 0}]], "starter_code": "def blocks_to_collect(level):", "canonical_solution": "def blocks_to_collect(level):\n    answer = {'total': sum([(i + 3 + i) ** 2 for i in range(level)]), 'gold': sum([(i + 3 + i) ** 2 for i in range(0, level, 4)]), 'diamond': sum([(i + 3 + i) ** 2 for i in range(1, level, 4)]), 'emerald': sum([(i + 3 + i) ** 2 for i in range(2, level, 4)]), 'iron': sum([(i + 3 + i) ** 2 for i in range(3, level, 4)])}\n    return answer", "entry_point": "blocks_to_collect", "task_id": "TACO_lite/425", "input_output_examples": [[[1]], [[{"total": 9, "gold": 9, "diamond": 0, "emerald": 0, "iron": 0}]]]}
{"requirement": "def reverse(st):\n\"\"\"You need to write a function that reverses the words in a given string. A word can also fit an empty string. If this is not clear enough, here are some examples:\n\nAs the input may have trailing spaces, you will also need to ignore unneccesary whitespace.\n\n```python\nreverse('Hello World') == 'World Hello'\nreverse('Hi There.') == 'There. Hi'\n```\n\nHappy coding!\n\"\"\"", "inputs": [["I am an expert at this"], ["This is so easy"], ["no one cares"]], "outputs": [["this at expert an am I"], ["easy so is This"], ["cares one no"]], "starter_code": "def reverse(st):", "canonical_solution": "def reverse(st):\n    return ' '.join(reversed(st.split())).strip()", "entry_point": "reverse", "task_id": "TACO_lite/426", "input_output_examples": [[["Hello World"], ["Hi There."], ["I am an expert at this"]], [["World Hello"], ["There. Hi"], ["this at expert an am I"]]]}
{"requirement": "def is_divide_by(number, a, b):\n\"\"\"Your task is to create function```isDivideBy``` (or ```is_divide_by```) to check if an integer number is divisible by each out of two arguments.\n\nA few cases:\n\n```\n\n(-12, 2, -6)  ->  true\n(-12, 2, -5)  ->  false\n\n(45, 1, 6)    ->  false\n(45, 5, 15)   ->  true\n\n(4, 1, 4)     ->  true\n(15, -5, 3)   ->  true\n\n```\n\"\"\"", "inputs": [[8, 2, 4], [12, -3, 4], [8, 3, 4], [48, 2, -5], [-100, -25, 10], [10000, 5, -3], [4, 4, 2], [5, 2, 3], [-96, 25, 17], [33, 1, 33]], "outputs": [[true], [true], [false], [false], [true], [false], [true], [false], [false], [true]], "starter_code": "def is_divide_by(number, a, b):", "canonical_solution": "def is_divide_by(number, a, b):\n    return number % a == 0 and number % b == 0", "entry_point": "is_divide_by", "task_id": "TACO_lite/427", "input_output_examples": [[[-12, 2, -6], [-12, 2, -5], [45, 1, 6], [45, 5, 15], [4, 1, 4], [15, -5, 3]], [[true], [false], [false], [true], [true], [true]]]}
{"requirement": "def gcd_matrix(a, b):\n\"\"\"You are given two positive integer lists with a random number of elements (1 <= n <= 100). Create a [GCD](https://en.wikipedia.org/wiki/Greatest_common_divisor) matrix and calculate the average of all values. \n\nReturn a float value rounded to 3 decimal places. \n\n\n## Example\n\n```\na = [1, 2, 3]\nb = [4, 5, 6]\n\n#       a =    1  2  3     b =\ngcd(a, b) = [ [1, 2, 1],   # 4\n              [1, 1, 1],   # 5\n              [1, 2, 3] ]  # 6\n\naverage(gcd(a, b)) = 1.444\n```\n\"\"\"", "inputs": [[[1, 2, 3], [4, 5, 6]], [[5, 5, 5], [10, 10, 10]], [[4, 7, 2, 10, 99, 4], [55, 32, 1, 344, 35234, 3]]], "outputs": [[1.444], [5.0], [2.0]], "starter_code": "def gcd_matrix(a, b):", "canonical_solution": "from math import gcd\n\ndef gcd_matrix(a, b):\n    return round(sum((gcd(m, n) for m in a for n in b)) / (len(a) * len(b)), 3)", "entry_point": "gcd_matrix", "task_id": "TACO_lite/428", "input_output_examples": [[[[1, 2, 3], [4, 5, 6]]], [[1.444]]]}
{"requirement": "def cost(mins):\n\"\"\"Fast & Furious Driving School's (F&F) charges for lessons are as below: \n\n\n\nTime\nCost\n\n\nUp to 1st hour\n$30\n\n\nEvery subsequent half hour**\n$10\n\n\n** Subsequent charges are calculated by rounding up to nearest half hour.\n\n\nFor example, if student X has a lesson for 1hr 20 minutes, he will be charged $40 (30+10) for 1 hr 30 mins and if he has a lesson for 5 minutes, he will be charged $30 for the full hour. \n\nOut of the kindness of its heart, F&F also provides a 5 minutes grace period. So, if student X were to have a lesson for 65 minutes or 1 hr 35 mins, he will only have to pay for an hour or 1hr 30 minutes respectively. \n\nFor a given lesson time in minutes (min) , write a function price to calculate how much the lesson costs.\n\"\"\"", "inputs": [[45], [63], [84], [102], [273]], "outputs": [[30], [30], [40], [50], [100]], "starter_code": "def cost(mins):", "canonical_solution": "import math\n\ndef cost(mins):\n    return 30 + 10 * math.ceil(max(0, mins - 60 - 5) / 30)", "entry_point": "cost", "task_id": "TACO_lite/429", "input_output_examples": [[[80], [5], [65], [95], [45]], [[40], [30], [30], [40], [30]]]}
{"requirement": "def int_rac(n, guess):\n\"\"\"One of the first algorithm used for approximating the integer square root of a positive integer `n` is known as \"Hero's method\", \nnamed after the first-century Greek mathematician Hero of Alexandria who gave the first description\nof the method. Hero's method can be obtained from Newton's method which came 16 centuries after. \n\nWe approximate the square root of a number `n` by taking an initial guess `x`, an error `e` and repeatedly calculating a new approximate *integer* value `x` using: `(x + n / x) / 2`; we are finished when the previous `x` and the `new x` have an absolute difference less than `e`.\n\nWe supply to a function (int_rac) a number `n` (positive integer) and a parameter `guess` (positive integer) which will be our initial `x`. For this kata the parameter 'e' is set to `1`.\n\nHero's algorithm is not always going to come to an exactly correct result! For instance: if n = 25 we get 5 but for n = 26 we also get 5. Nevertheless `5` is the *integer* square root of `26`.\n\nThe kata is to return the count of the progression of integer approximations that the algorithm makes.\n\nReference:\n\n\n\nSome examples:\n```\nint_rac(25,1): follows a progression of [1,13,7,5] so our function should return 4.\n\nint_rac(125348,300): has a progression of [300,358,354] so our function should return 3.\n\nint_rac(125348981764,356243): has a progression of [356243,354053,354046] so our function should return 3.\n```\n\n#\n\nYou can use Math.floor (or similar) for each integer approximation.\n \n#\n\nNote for JavaScript, Coffescript, Typescript:\n\nDon't use the double bitwise NOT ~~ at each iteration if you want to have the same results as in the tests and the other languages.\n\"\"\"", "inputs": [[25, 1], [125348, 300], [125348981764, 356243], [236, 12], [48981764, 8000], [6999, 700], [16000, 400], [16000, 100], [2500, 60], [250000, 600], [95367431640625, 1], [9094947017729282379150390625, 1], [835871232077058, 1], [246391990316004, 1], [403832254158749, 1], [217414278071071, 1], [639593178334873, 1], [646895994940989, 1], [346147532294375, 1], [871397668454373, 1], [711652869429165, 1], [828061341209011, 1]], "outputs": [[4], [3], [3], [2], [3], [6], [5], [3], [2], [3], [28], [52], [30], [29], [29], [29], [29], [29], [29], [30], [29], [30]], "starter_code": "def int_rac(n, guess):", "canonical_solution": "def int_rac(n, guess):\n    x = guess\n    cnt = 1\n    while True:\n        newx = (x + n // x) // 2\n        if abs(x - newx) < 1:\n            return cnt\n        x = newx\n        cnt += 1", "entry_point": "int_rac", "task_id": "TACO_lite/430", "input_output_examples": [[[25, 1], [125348, 300], [125348981764, 356243]], [[4], [3], [3]]]}
{"requirement": "def make_upper_case(s):\n\"\"\"Write a function which converts the input string to uppercase.\n\n~~~if:bf\nFor BF all inputs end with \\0, all inputs are lowercases and there is no space between. \n~~~\n\"\"\"", "inputs": [["hello"], ["hello world"], ["hello world !"], ["heLlO wORLd !"], ["1,2,3 hello world!"]], "outputs": [["HELLO"], ["HELLO WORLD"], ["HELLO WORLD !"], ["HELLO WORLD !"], ["1,2,3 HELLO WORLD!"]], "starter_code": "def make_upper_case(s):", "canonical_solution": "def make_upper_case(s):\n    return s.upper()", "entry_point": "make_upper_case", "task_id": "TACO_lite/431", "input_output_examples": [[["hello"]], [["HELLO"]]]}
{"requirement": "def mysterious_pattern(m, n):\n\"\"\"> When no more interesting kata can be resolved, I just choose to create the new kata, to solve their own, to enjoy the process  --myjinxin2015 said\n\n# Description:\n\nIn this Kata, we have to try to create a mysterious pattern.\n\nGiven a positive integer `m`, you can generate a Fibonacci sequence with a length of `m`:\n```\n1 1 2 3 5 8 13 21 34 ...\n```\n\nGiven a positive integer `n`, you need to execute `%` operation on each element of the Fibonacci sequence:\n \n```\nm = 9, n = 3\nFibonacci sequence: 1 1 2 3 5 8 13 21 34\n               ---> 1%3 1%3 2%3 3%3 5%3 8%3 13%3 21%3 34%3\n               --->  1   1   2   0   2   2    1    0    1\n```\nFinally, make `n` rows string to show the pattern:\n\n```\n112022101\n|||||||||\n   o   o\noo    o o\n  o oo\n```\n\nPlease note:\n* Each row is separated by `\"\\n\"`;\n* You should trim the end of each row;\n* If there are some empty rows at the start or end of string, you should trim them too. But, if the empty row is in the middle(see the last example), you should not trim it.\n\n\n\n# Examples:\n\n\nFor m = 5, n = 5, the output should be:\n```\n    o \noo\n  o\n   o\n```\nFor m = 12, n = 4, the output should be:\n```\n     o     o\noo  o oo  o\n  o     o\n   o     o\n```\nFor m = 1, n = 1, the output should be:`\"o\"`\n\nFor: m = 6, n = 15, the output should be:\n```\noo\n  o\n   o\n\n    o\n\n\n     o\n```\n\"\"\"", "inputs": [[5, 5], [12, 4], [4, 5], [10, 1]], "outputs": [["    o\noo\n  o\n   o"], ["     o     o\noo  o oo  o\n  o     o\n   o     o"], ["oo\n  o\n   o"], ["oooooooooo"]], "starter_code": "def mysterious_pattern(m, n):", "canonical_solution": "def mysterious_pattern(m, n):\n    rows = [[' '] * m for _ in range(n)]\n    a, b = (1, 1)\n    for i in range(m):\n        rows[a % n][i] = 'o'\n        a, b = (b, a + b)\n    rows = [''.join(r).rstrip() for r in rows]\n    return '\\n'.join(rows).strip('\\n')", "entry_point": "mysterious_pattern", "task_id": "TACO_lite/432", "input_output_examples": [[[5, 5], [12, 4], [1, 1], [6, 15]], [["    o\noo\n  o\n   o"], ["     o     o\noo  o oo  o\n  o     o\n   o     o"], ["o"], ["oo\n  o\n   o\n\n    o\n\n     o"]]]}
{"requirement": "def is_narcissistic(*values):\n\"\"\"Well, those numbers were right and we're going to feed their ego.\n\nWrite a function, isNarcissistic, that takes in any amount of numbers and returns true if all the numbers are narcissistic. Return false for invalid arguments (numbers passed in as strings are ok).\n\nFor more information about narcissistic numbers (and believe me, they love it when you read about them) follow this link: https://en.wikipedia.org/wiki/Narcissistic_number\n\"\"\"", "inputs": [[11], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 1, 2, 3, 4, 5, 6, 7, 22, 9], ["4"], ["4", 7, "9"], ["words"], [[1, 2]], [407, 8208], [-1], [""], ["", 407], [407, ""], [5, "", 407], [9474], [{}]], "outputs": [[false], [true], [false], [true], [true], [false], [false], [true], [false], [false], [false], [false], [false], [true], [false]], "starter_code": "def is_narcissistic(*values):", "canonical_solution": "def get_digits(n):\n    return [int(x) for x in list(str(n))]\n\ndef is_narc(n):\n    return n == sum([x ** len(get_digits(n)) for x in get_digits(n)])\n\ndef is_narcissistic(*values):\n    try:\n        return all((type(n) in [int, str] and is_narc(int(n)) for n in values))\n    except ValueError:\n        return False", "entry_point": "is_narcissistic", "task_id": "TACO_lite/433", "input_output_examples": [[[11]], [[false]]]}
{"requirement": "def find_spaceship(astromap):\n\"\"\"Late last night in the Tanner household, ALF was repairing his spaceship so he might get back to Melmac. Unfortunately for him, he forgot to put on the parking brake, and the spaceship took off during repair. Now it's hovering in space.\n\nALF has the technology to bring the spaceship home if he can lock on to its location.\n\nGiven a map:\n\n````\n..........\n..........\n..........\n.......X..\n..........\n..........\n````\n\nThe map will be given in the form of a string with \\n separating new lines. The bottom left of the map is [0, 0]. X is ALF's spaceship.\n\nIn this example:\n\nIf you cannot find the spaceship, the result should be\n\n```\n\"Spaceship lost forever.\"\n```\n\nCan you help ALF?\n\n\nCheck out my other 80's Kids Katas:\n\n\n80's Kids #1: How Many Licks Does It Take\n80's Kids #2: Help Alf Find His Spaceship\n80's Kids #3: Punky Brewster's Socks\n80's Kids #4: Legends of the Hidden Temple\n80's Kids #5: You Can't Do That on Television\n80's Kids #6: Rock 'Em, Sock 'Em Robots\n80's Kids #7: She's a Small Wonder\n80's Kids #8: The Secret World of Alex Mack\n80's Kids #9: Down in Fraggle Rock \n80's Kids #10: Captain Planet\n\"\"\"", "inputs": [["X"], ["X\n."], [".X\n.."], ["..\n.X"], ["..\nX."], [".......\nX......."], ["..........\n..........\n.......X..\n..........\n.........."], ["..........\n..........\n..........\n........X.\n.........."], ["........................"], ["\n\n\n\n"]], "outputs": [[[0, 0]], [[0, 1]], [[1, 1]], [[1, 0]], [[0, 0]], [[0, 0]], [[7, 2]], [[8, 1]], ["Spaceship lost forever."], ["Spaceship lost forever."]], "starter_code": "def find_spaceship(astromap):", "canonical_solution": "def find_spaceship(astromap):\n    lines = astromap.splitlines()\n    for y, line in enumerate(lines):\n        x = line.find('X')\n        if x != -1:\n            return [x, len(lines) - 1 - y]\n    return 'Spaceship lost forever.'", "entry_point": "find_spaceship", "task_id": "TACO_lite/434", "input_output_examples": [[["..........\n..........\n..........\n.......X..\n..........\n.........."], [".........\n.........\n.........\n.........\n.........\n........."]], [[[3, 7]], ["Spaceship lost forever."]]]}
{"requirement": "def center_of(chars):\n\"\"\"# Task\n\nChristmas is coming. In the [previous kata](https://www.codewars.com/kata/5a405ba4e1ce0e1d7800012e), we build a custom Christmas tree with the specified characters and the specified height.\n\nNow, we are interested in the center of the Christmas tree. \n\nPlease imagine that we build a Christmas tree with `chars = \"abc\" and n = Infinity`, we got:\n```\n          a\n         b c\n        a b c\n       a b c a\n      b c a b c\n     a b c a b c\n    a b c a b c a\n   b c a b c a b c\n  a b c a b c a b a\n b c a b c a b a b c\na b c a b a b c a b c\n. . . . . . . . . . .\n. . . . . . . . . . .\n. . . . . . . . . . .\n. . . . . . . . . . .\n          |\n          |\n          .\n          .\n```\nIf we keep only the center part of leaves, we will got:\n```\n          a\n            \n          b  \n              \n          a    \n                \n          a        \n                    \n          b        \n                    \n          a          \n          .\n          \n          .\n          \n          .\n```\nAs you can see, it's a infinite string, but it has a repeat substring \"aba\"(spaces will be removed). If we join them together, it looks like:`\"abaabaabaabaaba......\"`.\n\nSo, your task is to find the repeat substring of the center part of leaves.\n\n# Inputs:\n\n- `chars`: the specified characters. In this kata, they always be lowercase letters.\n\n# Output:\n\n- The repeat substring that satisfy the above conditions.\n\nStill not understand the task? Look at the following example ;-)\n\n# Examples\n\n\nFor `chars = \"abc\"`,the output should be `\"aba\"`\n```\ncenter leaves sequence: \"abaabaabaabaabaaba.....\"\n```\nFor `chars = \"abab\"`,the output should be `a`\n```\ncenter leaves sequence: \"aaaaaaaaaa.....\"\n```\nFor `chars = \"abcde\"`,the output should be `aecea`\n```\ncenter leaves sequence: \"aeceaaeceaaecea.....\"\n```\nFor `chars = \"aaaaaaaaaaaaaa\"`,the output should be `a`\n```\ncenter leaves sequence: \"aaaaaaaaaaaaaa.....\"\n```\nFor `chars = \"abaabaaab\"`,the output should be `aba`\n```\ncenter leaves sequence: \"abaabaabaaba.....\"\n```\n\"\"\"", "inputs": [[""], ["a"], ["ab"], ["abc"], ["abab"], ["abcde"], ["aaaaaaaaaaaaaa"], ["abaabaaab"], ["dbdbebedbddbedededeeddbbdeddbeddeebdeddeebbbb"], ["vttussvutvuvvtustsvsvtvu"]], "outputs": [[""], ["a"], ["a"], ["aba"], ["a"], ["aecea"], ["a"], ["aba"], ["deededebddeebeddeddeddbddeddeddebeeddbededeed"], ["vsvvtvvtvvsv"]], "starter_code": "def center_of(chars):", "canonical_solution": "def center_of(chars):\n    if not chars:\n        return ''\n    total = 0\n    res = []\n    for i in range(1, len(chars) * 2 + 1):\n        if i % 2 == 1:\n            res.append((i + 1) // 2 + total)\n            res[-1] = chars[(res[-1] - 1) % len(chars)]\n        total += i\n    res = ''.join(res)\n    for i in range(len(res) // 2 + 1):\n        if len(res) % len(res[:i + 1]) != 0:\n            continue\n        if res[:i + 1] * (len(res) // len(res[:i + 1])) == res:\n            return res[:i + 1]\n    return res", "entry_point": "center_of", "task_id": "TACO_lite/435", "input_output_examples": [[["abc"], ["abab"], ["abcde"], ["aaaaaaaaaaaaaa"], ["abaabaaab"]], [["aba"], ["a"], ["aecea"], ["a"], ["aba"]]]}
{"requirement": "def how_many_measurements(n):\n\"\"\"I found this interesting interview question just today:\n\n> *8 coins are given where all the coins have equal weight, except one. The odd one weights less than the others, not being of pure gold. In the worst case, how many iterations are actually needed to find the odd one out on a two plates scale*.\n\nI am asking you then to tell me what is the *minimum* amount of weighings it will take to measure `n` coins in every possible occurrence (including worst case scenario, ie: without relying on luck at all).\n\n`n` is guaranteed to be a positive integer.\n\n***Tip:*** being able to think *recursively* might help here :p\n\n***Note:*** albeit this is more clearly a logical than a coding problem, do not underestimate (or under-rank) the kata for requiring not necessarily wizard-class coding skills: a good coder is a master of pattern recognition and subsequent optimization ;)\n\"\"\"", "inputs": [[1], [2], [3], [8], [100]], "outputs": [[0], [1], [1], [2], [5]], "starter_code": "def how_many_measurements(n):", "canonical_solution": "from math import ceil, log\n\ndef how_many_measurements(n):\n    return ceil(log(n, 3))", "entry_point": "how_many_measurements", "task_id": "TACO_lite/436", "input_output_examples": [[[1]], [[0]]]}
{"requirement": "def is_even(n):\n\"\"\"In this Kata we are passing a number (n) into a function. \n\nYour code will determine if the number passed is even (or not). \n\nThe function needs to return either a true or false. \n\nNumbers may be positive or negative, integers or floats.\n\nFloats are considered UNeven for this kata.\n\"\"\"", "inputs": [[0], [0.5], [1], [2], [-4], [15], [20], [220], [222222221], [500000000]], "outputs": [[true], [false], [false], [true], [true], [false], [true], [true], [false], [true]], "starter_code": "def is_even(n):", "canonical_solution": "def is_even(n):\n    return n % 2 == 0", "entry_point": "is_even", "task_id": "TACO_lite/437", "input_output_examples": [[[0]], [[true]]]}
{"requirement": "def repeats(arr):\n\"\"\"In this Kata, you will be given an array of numbers in which two numbers occur once and the rest occur only twice. Your task will be to return the sum of the numbers that occur only once. \n\nFor example, `repeats([4,5,7,5,4,8]) = 15` because only the numbers `7` and `8` occur once, and their sum is `15`.\n\nMore examples in the test cases. \n\n\n```if:csharp\nDocumentation:\nKata.Repeats Method (List<Int32>)\n\nTakes a list where all ints are repeated twice, except two ints, and returns the sum of the ints of a list where those ints only occur once.\n\nSyntax\n\n\npublic\nstatic\nint Repeats(\nList<int> source\n    )\n  \n\n\n\nParameters\n\nsource\n\nType: System.Collections.Generic.List<Int32>\nThe list to process.\n\nReturn Value\n\nType: System.Int32\n  The sum of the elements of the list where those elements have no duplicates.\n\n```\n\n\nGood luck!\n\nIf you like this Kata, please try: \n\n[Sum of prime-indexed elements](https://www.codewars.com/kata/59f38b033640ce9fc700015b)\n\n[Sum of integer combinations](https://www.codewars.com/kata/59f3178e3640cef6d90000d5)\n\"\"\"", "inputs": [[[4, 5, 7, 5, 4, 8]], [[9, 10, 19, 13, 19, 13]], [[16, 0, 11, 4, 8, 16, 0, 11]], [[5, 17, 18, 11, 13, 18, 11, 13]], [[5, 10, 19, 13, 10, 13]]], "outputs": [[15], [19], [12], [22], [24]], "starter_code": "def repeats(arr):", "canonical_solution": "def repeats(arr):\n    return sum([x for x in arr if arr.count(x) == 1])", "entry_point": "repeats", "task_id": "TACO_lite/438", "input_output_examples": [[[[4, 5, 7, 5, 4, 8]]], [[15]]]}
{"requirement": "def solve(st):\n\"\"\"In this Kata, we will check if a string contains consecutive letters as they appear in the English alphabet and if each letter occurs only once. \n\n```Haskell\nRules are: (1) the letters are adjacent in the English alphabet, and (2) each letter occurs only once.\n\nFor example: \nsolve(\"abc\") = True, because it contains a,b,c\nsolve(\"abd\") = False, because a, b, d are not consecutive/adjacent in the alphabet, and c is missing.\nsolve(\"dabc\") = True, because it contains a, b, c, d\nsolve(\"abbc\") = False, because b does not occur once.\nsolve(\"v\") = True\n```\nAll inputs will be lowercase letters. \n\nMore examples in test cases. Good luck!\n\"\"\"", "inputs": [["abc"], ["abd"], ["dabc"], ["abbc"]], "outputs": [[true], [false], [true], [false]], "starter_code": "def solve(st):", "canonical_solution": "import string\n\ndef solve(st):\n    return ''.join(sorted(st)) in string.ascii_letters", "entry_point": "solve", "task_id": "TACO_lite/439", "input_output_examples": [[["abc"], ["abd"], ["dabc"], ["abbc"], ["v"]], [[true], [false], [true], [false], [true]]]}
{"requirement": "def multiple(x):\n\"\"\"Make a program that takes a value (x) and returns \"Bang\" if the number is divisible by 3, \"Boom\" if it is divisible by 5, \"BangBoom\" if it divisible by 3 and 5, and \"Miss\" if it isn't divisible by any of them.\nNote: Your program should only return one value\n\nEx: Input: 105 --> Output: \"BangBoom\"\nEx: Input: 9 --> Output: \"Bang\"\nEx:Input: 25 --> Output: \"Boom\"\n\"\"\"", "inputs": [[30], [3], [98], [65], [23], [15], [4], [2], [45], [90], [21], [7], [6], [10003823], [41535], [712], [985], [164523]], "outputs": [["BangBoom"], ["Bang"], ["Miss"], ["Boom"], ["Miss"], ["BangBoom"], ["Miss"], ["Miss"], ["BangBoom"], ["BangBoom"], ["Bang"], ["Miss"], ["Bang"], ["Miss"], ["BangBoom"], ["Miss"], ["Boom"], ["Bang"]], "starter_code": "def multiple(x):", "canonical_solution": "def multiple(x):\n    return 'Bang' * (x % 3 == 0) + 'Boom' * (x % 5 == 0) or 'Miss'", "entry_point": "multiple", "task_id": "TACO_lite/440", "input_output_examples": [[[105], [9], [25], [30]], [["BangBoom"], ["Bang"], ["Boom"], ["BangBoom"]]]}
{"requirement": "def lcm_cardinality(n):\n\"\"\"A pair of numbers has a unique LCM but a single number can be the LCM of more than one possible\npairs. For example `12` is the LCM of `(1, 12), (2, 12), (3,4)` etc. For a given positive integer N, the number of different integer pairs with LCM is equal to N can be called the LCM cardinality of that number N. In this kata your job is to find out the LCM cardinality of a number.\n\"\"\"", "inputs": [[1], [12], [24], [25], [101101291], [12345676], [1251562], [625], [9801], [30858025]], "outputs": [[1], [8], [11], [3], [5], [68], [41], [5], [23], [63]], "starter_code": "def lcm_cardinality(n):", "canonical_solution": "from itertools import combinations\nfrom math import gcd\n\ndef lcm_cardinality(n):\n    return 1 + sum((1 for a, b in combinations(divisors(n), 2) if lcm(a, b) == n))\n\ndef divisors(n):\n    d = {1, n}\n    for k in range(2, int(n ** 0.5) + 1):\n        if n % k == 0:\n            d.add(k)\n            d.add(n // k)\n    return sorted(d)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)", "entry_point": "lcm_cardinality", "task_id": "TACO_lite/441", "input_output_examples": [[[1]], [[1]]]}
{"requirement": "def odd_not_prime(n):\n\"\"\"For \"x\", determine how many positive integers less than or equal to \"x\" are odd but not prime. Assume \"x\" is an integer between 1 and 10000.\n\nExample: 5 has three odd numbers (1,3,5) and only the number 1 is not prime, so the answer is 1\n\nExample: 10 has five odd numbers (1,3,5,7,9) and only 1 and 9 are not prime, so the answer is 2\n\"\"\"", "inputs": [[5], [10], [99]], "outputs": [[1], [2], [26]], "starter_code": "def odd_not_prime(n):", "canonical_solution": "def not_prime(x):\n    if x == 1:\n        return True\n    for y in range(2, int(x ** 0.5) + 1):\n        if x % y == 0:\n            return True\n    return False\n\ndef odd_not_prime(n):\n    return sum((not_prime(x) for x in range(1, n + 1, 2)))", "entry_point": "odd_not_prime", "task_id": "TACO_lite/442", "input_output_examples": [[[5], [10]], [[1], [2]]]}
{"requirement": "def reverse_words(str):\n\"\"\"Complete the function that accepts a string parameter, and reverses each word in the string. **All** spaces in the string should be retained.\n\n## Examples\n```\n\"This is an example!\" ==> \"sihT si na !elpmaxe\"\n\"double  spaces\"      ==> \"elbuod  secaps\"\n```\n\"\"\"", "inputs": [["The quick brown fox jumps over the lazy dog."], ["apple"], ["a b c d"], ["double  spaced  words"], ["stressed desserts"], ["hello hello"]], "outputs": [["ehT kciuq nworb xof spmuj revo eht yzal .god"], ["elppa"], ["a b c d"], ["elbuod  decaps  sdrow"], ["desserts stressed"], ["olleh olleh"]], "starter_code": "def reverse_words(str):", "canonical_solution": "def reverse_words(str):\n    return ' '.join((s[::-1] for s in str.split(' ')))", "entry_point": "reverse_words", "task_id": "TACO_lite/443", "input_output_examples": [[["This is an example!"], ["double  spaces"]], [["sihT si na !elpmaxe"], ["elbuod  secaps"]]]}
{"requirement": "def top3(*args):\n\"\"\"You work in the best consumer electronics corporation, and your boss wants to find out which three products generate the most revenue.\nGiven 3 lists of the same length like these:\n\n* products: `[\"Computer\", \"Cell Phones\", \"Vacuum Cleaner\"]`\n* amounts: `[3, 24, 8]`\n* prices: `[199, 299, 399]`\n\n\nreturn the three product names with the highest revenue (`amount * price`).\n\n**Note**: if multiple products have the same revenue, order them according to their original positions in the input list.\n\"\"\"", "inputs": [[["Computer", "Cell Phones", "Vacuum Cleaner"], [3, 24, 8], [199, 299, 399]], [["Cell Phones", "Vacuum Cleaner", "Computer", "Autos", "Gold", "Fishing Rods", "Lego", " Speakers"], [5, 25, 2, 7, 10, 3, 2, 24], [51, 225, 22, 47, 510, 83, 82, 124]], [["Cell Phones", "Vacuum Cleaner", "Computer", "Autos", "Gold", "Fishing Rods", "Lego", " Speakers"], [0, 12, 24, 17, 19, 23, 120, 8], [9, 24, 29, 31, 51, 8, 120, 14]], [["Speakers", "Games", "Radios", "Drones", "Scooter"], [1, 1, 1, 1, 1], [10, 10, 10, 10, 10]]], "outputs": [[["Cell Phones", "Vacuum Cleaner", "Computer"]], [["Vacuum Cleaner", "Gold", " Speakers"]], [["Lego", "Gold", "Computer"]], [["Speakers", "Games", "Radios"]]], "starter_code": "def top3(*args):", "canonical_solution": "def top3(*args):\n    return [item[0] for item in sorted(zip(*args), key=lambda x: x[1] * x[2], reverse=True)[:3]]", "entry_point": "top3", "task_id": "TACO_lite/444", "input_output_examples": [[[["Computer", "Cell Phones", "Vacuum Cleaner"], [3, 24, 8], [199, 299, 399]]], [[["Cell Phones", "Vacuum Cleaner", "Computer"]]]]}
{"requirement": "def solve(x, y):\n\"\"\"A special type of prime is generated by the formula `p = 2^m * 3^n + 1` where `m` and `n` can be any non-negative integer.\n\nThe first `5` of these primes are `2, 3, 5, 7, 13`, and are generated as follows: \n```Haskell\n2 = 2^0 * 3^0 + 1\n3 = 2^1 * 3^0 + 1\n5 = 2^2 * 3^0 + 1\n7 = 2^1 * 3^1 + 1\n13 = 2^2 * 3^1 + 1\n..and so on\n```\nYou will be given a range and your task is to return the number of primes that have this property. For example, `solve(0,15) = 5`, because there are only `5` such primes `>= 0 and < 15`; they are `2,3,5,7,13`. The upper limit of the tests will not exceed `1,500,000`.\n\nMore examples in the test cases. \n\nGood luck!\n\nIf you like Prime Katas, you will enjoy this Kata: [Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\"\"\"", "inputs": [[0, 10], [0, 15], [0, 100], [100, 1000], [340, 500], [3400, 5000], [20000, 60000], [750000, 1000000], [300000, 900000], [100, 1000000], [500000, 1000000], [1000000, 1500000], [0, 1500000]], "outputs": [[4], [5], [10], [8], [2], [2], [2], [3], [6], [32], [5], [2], [44]], "starter_code": "def solve(x, y):", "canonical_solution": "sb_primes = [2, 3, 5, 7, 13, 17, 19, 37, 73, 97, 109, 163, 193, 257, 433, 487, 577, 769, 1153, 1297, 1459, 2593, 2917, 3457, 3889, 10369, 12289, 17497, 18433, 39367, 52489, 65537, 139969, 147457, 209953, 331777, 472393, 629857, 746497, 786433, 839809, 995329, 1179649, 1492993]\n\ndef solve(x, y):\n    return sum((x <= p < y for p in sb_primes))", "entry_point": "solve", "task_id": "TACO_lite/445", "input_output_examples": [[[0, 15]], [[5]]]}
{"requirement": "def findcontentchildren(g, s):\n\"\"\"Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child i has a greed factor gi, which is the minimum size of a cookie that the child will be content with; and each cookie j has a size sj. If sj >= gi, we can assign the cookie j to the child i, and the child i will be content. Your goal is to maximize the number of your content children and output the maximum number.\n\n\nNote:\nYou may assume the greed factor is always positive. \nYou cannot assign more than one cookie to one child.\n\n\nExample 1:\n\nInput: [1,2,3], [1,1]\n\nOutput: 1\n\nExplanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \nAnd even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\nYou need to output 1.\n\n\n\nExample 2:\n\nInput: [1,2], [1,2,3]\n\nOutput: 2\n\nExplanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \nYou have 3 cookies and their sizes are big enough to gratify all of the children, \nYou need to output 2.\n\"\"\"", "inputs": [[[2, 3], [1, 1]], [[1, 2, 3], [1, 1]], [[1, 2], [1, 2, 3]]], "outputs": [[0], [1], [2]], "starter_code": "def findcontentchildren(g, s):", "canonical_solution": "def findcontentchildren(g, s):\n    g.sort()\n    s.sort()\n    res = 0\n    Lg, Ls = (len(g), len(s))\n    i = j = 0\n    while i < Lg and j < Ls:\n        if s[j] >= g[i]:\n            res += 1\n            j += 1\n            i += 1\n        else:\n            j += 1\n    return res", "entry_point": "findcontentchildren", "task_id": "TACO_lite/446", "input_output_examples": [[[[1, 2, 3], [1, 1]], [[1, 2], [1, 2, 3]]], [[1], [2]]]}
{"requirement": "def change_count(change):\n\"\"\"You've been collecting change all day, and it's starting to pile up in your pocket, but you're too lazy to see how much you've found.\n\nGood thing you can code!\n\nCreate ```change_count()``` to return a dollar amount of how much change you have!\n\nValid types of change include:\n```\npenny: 0.01\nnickel: 0.05\ndime: 0.10\nquarter: 0.25\ndollar: 1.00\n```\n\n```if:python\nThese amounts are already preloaded as floats into the `CHANGE` dictionary for you to use!\n```\n```if:ruby\nThese amounts are already preloaded as floats into the `CHANGE` hash for you to use!\n```\n```if:javascript\nThese amounts are already preloaded as floats into the `CHANGE` object for you to use!\n```\n```if:php\nThese amounts are already preloaded as floats into the `CHANGE` (a constant) associative array for you to use!\n```\n\nYou should return the total in the format ```$x.xx```.\n\nExamples:\n\n```python\nchange_count('nickel penny dime dollar') == '$1.16'\nchange_count('dollar dollar quarter dime dime') == '$2.45'\nchange_count('penny') == '$0.01'\nchange_count('dime') == '$0.10'\n```\n\nWarning, some change may amount to over ```$10.00```!\n\"\"\"", "inputs": [["dime penny dollar"], ["dime penny nickel"], ["quarter quarter"], ["dollar penny dollar"], ["dollar dollar dollar dollar dollar dollar dollar dollar dollar dollar penny"]], "outputs": [["$1.11"], ["$0.16"], ["$0.50"], ["$2.01"], ["$10.01"]], "starter_code": "def change_count(change):", "canonical_solution": "def change_count(change):\n    money = {'penny': 0.01, 'nickel': 0.05, 'dime': 0.1, 'quarter': 0.25, 'dollar': 1.0}\n    count = 0\n    for coin in change.split():\n        count += money[coin]\n    result = '%.2f' % count\n    return '$' + result", "entry_point": "change_count", "task_id": "TACO_lite/447", "input_output_examples": [[["nickel penny dime dollar"], ["dollar dollar quarter dime dime"], ["penny"], ["dime"]], [["$1.16"], ["$2.45"], ["$0.01"], ["$0.10"]]]}
{"requirement": "def words_to_marks(s):\n\"\"\"If　`a = 1, b = 2, c = 3 ... z = 26`\n\nThen `l + o + v + e = 54`\n\nand `f + r + i + e + n + d + s + h + i + p = 108`\n\nSo `friendship` is twice stronger than `love` :-)\n\nThe input will always be in lowercase and never be empty.\n\"\"\"", "inputs": [["attitude"], ["friends"], ["family"], ["selfness"], ["knowledge"]], "outputs": [[100], [75], [66], [99], [96]], "starter_code": "def words_to_marks(s):", "canonical_solution": "def words_to_marks(s):\n    return sum((ord(c) - 96 for c in s))", "entry_point": "words_to_marks", "task_id": "TACO_lite/448", "input_output_examples": [[["love"], ["friendship"], ["attitude"]], [[54], [108], [100]]]}
{"requirement": "def draw(waves):\n\"\"\"# # Task:\n  * #### Complete the pattern, using the special character ```■   □```\n  * #### In this kata, we draw some histogram of the sound performance of ups and downs.\n\n# # Rules:\n  -  parameter ```waves```  The value of sound waves, an array of number, all number in array >=0.\n  -  return a string, ```■``` represents the sound waves, and ```□``` represents the blank part, draw the histogram from bottom to top.\n\n# # Example:\n\n```\ndraw([1,2,3,4])\n\n□□□■\n□□■■\n□■■■\n■■■■\n\ndraw([1,2,3,3,2,1])\n\n□□■■□□\n□■■■■□\n■■■■■■\n\ndraw([1,2,3,3,2,1,1,2,3,4,5,6,7])\n\n□□□□□□□□□□□□■\n□□□□□□□□□□□■■\n□□□□□□□□□□■■■\n□□□□□□□□□■■■■\n□□■■□□□□■■■■■\n□■■■■□□■■■■■■\n■■■■■■■■■■■■■\n\n\ndraw([5,3,1,2,4,6,5,4,2,3,5,2,1])\n\n□□□□□■□□□□□□□\n■□□□□■■□□□■□□\n■□□□■■■■□□■□□\n■■□□■■■■□■■□□\n■■□■■■■■■■■■□\n■■■■■■■■■■■■■\n\ndraw([1,0,1,0,1,0,1,0])\n\n■□■□■□■□\n```\n\"\"\"", "inputs": [[[1, 2, 3, 4]], [[1, 2, 3, 3, 2, 1]], [[1, 2, 3, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7]], [[5, 3, 1, 2, 4, 6, 5, 4, 2, 3, 5, 2, 1]], [[1, 0, 1, 0, 1, 0, 1, 0]]], "outputs": [["□□□■\n□□■■\n□■■■\n■■■■"], ["□□■■□□\n□■■■■□\n■■■■■■"], ["□□□□□□□□□□□□■\n□□□□□□□□□□□■■\n□□□□□□□□□□■■■\n□□□□□□□□□■■■■\n□□■■□□□□■■■■■\n□■■■■□□■■■■■■\n■■■■■■■■■■■■■"], ["□□□□□■□□□□□□□\n■□□□□■■□□□■□□\n■□□□■■■■□□■□□\n■■□□■■■■□■■□□\n■■□■■■■■■■■■□\n■■■■■■■■■■■■■"], ["■□■□■□■□"]], "starter_code": "def draw(waves):", "canonical_solution": "def draw(waves):\n    m = max(waves)\n    rotHist = [('■' * v).rjust(m, '□') for v in waves]\n    return '\\n'.join(map(''.join, zip(*rotHist)))", "entry_point": "draw", "task_id": "TACO_lite/449", "input_output_examples": [[[[1, 2, 3, 4]], [[1, 2, 3, 3, 2, 1]], [[1, 2, 3, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7]], [[5, 3, 1, 2, 4, 6, 5, 4, 2, 3, 5, 2, 1]], [[1, 0, 1, 0, 1, 0, 1, 0]]], [["□□□■\n□□■■\n□■■■\n■■■■"], ["□□■■□□\n□■■■■□\n■■■■■■"], ["□□□□□□□□□□□□■\n□□□□□□□□□□□■■\n□□□□□□□□□□■■■\n□□□□□□□□□■■■■\n□□■■□□□□■■■■■\n□■■■■□□■■■■■■\n■■■■■■■■■■■■■"], ["□□□□□■□□□□□□□\n■□□□□■■□□□■□□\n■□□□■■■■□□■□□\n■■□□■■■■□■■□□\n■■□■■■■■■■■■□\n■■■■■■■■■■■■■"], ["■□■□■□■□"]]]}
{"requirement": "def add(a, b):\n\"\"\"##Task:\nYou have to write a function `add` which takes two binary numbers as strings and returns their sum as a string.\n\n##Note:\n* You are `not allowed to convert binary to decimal & vice versa`.\n* The sum should contain `No leading zeroes`.\n\n##Examples:\n```\nadd('111','10'); => '1001'\nadd('1101','101'); => '10010'\nadd('1101','10111') => '100100'\n```\n\"\"\"", "inputs": [["111", "10"], ["1101", "101"], ["1101", "10111"], ["10111", "001010101"], ["00", "0"]], "outputs": [["1001"], ["10010"], ["100100"], ["1101100"], ["0"]], "starter_code": "def add(a, b):", "canonical_solution": "def binary_string_to_int(string):\n    return sum(((d == '1') * 2 ** i for i, d in enumerate(string[::-1])))\n\ndef add(a, b):\n    return '{:b}'.format(binary_string_to_int(a) + binary_string_to_int(b))", "entry_point": "add", "task_id": "TACO_lite/450", "input_output_examples": [[["111", "10"], ["1101", "101"], ["1101", "10111"]], [["1001"], ["10010"], ["100100"]]]}
{"requirement": "def last(*args):\n\"\"\"Find the last element of the given argument(s).\n\n## Examples\n\n```python\nlast([1, 2, 3, 4]) ==>  4\nlast(\"xyz\")        ==> \"z\"\nlast(1, 2, 3, 4)   ==>  4\n```\nIn **javascript** and **CoffeeScript** a **list** will be an `array`, a `string` or the list of `arguments`.\n\n(courtesy of [haskell.org](http://www.haskell.org/haskellwiki/99_questions/1_to_10))\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [["a", "b", "c", "k", "x", "y", "z"]], ["abckxyz"], ["a", "b", "c", "z"]], "outputs": [[10], [10], ["z"], ["z"], ["z"]], "starter_code": "def last(*args):", "canonical_solution": "def last(*args):\n    return args[-1] if not hasattr(args[-1], '__getitem__') else args[-1][-1]", "entry_point": "last", "task_id": "TACO_lite/451", "input_output_examples": [[[[1, 2, 3, 4]], ["xyz"], [1, 2, 3, 4]], [[4], ["z"], [4]]]}
{"requirement": "def string_hash(s):\n\"\"\"Implement a function which takes a string, and returns its hash value.\n\nAlgorithm steps:\n\n* `a` := sum of the ascii values of the input characters\n* `b` := sum of every difference between the consecutive characters of the input (second char minus first char, third minus second, ...)\n* `c` := (`a` OR `b`) AND ((NOT `a`) shift left by 2 bits)\n* `d` := `c` XOR (32 * (`total_number_of_spaces` + 1))\n* return `d`\n\n**Note**: OR, AND, NOT, XOR are bitwise operations.\n\n___\n\n### Examples\n\n```\ninput = \"a\"\na = 97\nb = 0\nresult = 64\n\ninput = \"ca\"\na = 196\nb = -2\nresult = -820\n```\n\n___\n\nGive an example why this hashing algorithm is bad?\n\"\"\"", "inputs": [["int main(int argc, char *argv[]) { return 0; }"], [" Yo - What's Good?! "], [" df af asd "], ["global hash"], ["section .text"], ["hash:"], ["    xor eax, eax"], ["    ret"], ["; -----> end of hash <-----"], ["int hash(const char *str);"], [""], [" "], ["  "], ["   "], ["    "]], "outputs": [[188], [460], [744], [1120], [328], [-1884], [1080], [112], [-7136], [-9232], [32], [96], [32], [224], [32]], "starter_code": "def string_hash(s):", "canonical_solution": "def string_hash(s):\n    a = sum((ord(c) for c in s))\n    b = sum((ord(b) - ord(a) for a, b in zip(s, s[1:])))\n    c = (a | b) & ~a << 2\n    return c ^ 32 * (s.count(' ') + 1)", "entry_point": "string_hash", "task_id": "TACO_lite/452", "input_output_examples": [[["a"], ["ca"]], [[64], [-820]]]}
{"requirement": "def interest(principal, interest, periods):\n\"\"\"Simple interest on a loan is calculated by simply taking the initial amount (the principal, p) and multiplying it by a rate of interest (r) and the number of time periods (n). \n\nCompound interest is calculated by adding the interest after each time period to the amount owed, then calculating the next interest payment based on the principal PLUS the interest from all previous periods.\n\nGiven a principal *p*, interest rate *r*, and a number of periods *n*, return an array [total owed under simple interest, total owed under compound interest]. \n\n```\nEXAMPLES:\n\ninterest(100,0.1,1) = [110,110]\ninterest(100,0.1,2) = [120,121]\ninterest(100,0.1,10) = [200,259]\n```\n \nRound all answers to the nearest integer. Principal will always be an integer between 0 and 9999; interest rate will be a decimal between 0 and 1; number of time periods will be an integer between 0 and 49. \n \n---\n\nMore on [Simple interest, compound interest and continuous interest](https://betterexplained.com/articles/a-visual-guide-to-simple-compound-and-continuous-interest-rates/)\n\"\"\"", "inputs": [[100, 0.1, 1], [100, 0.1, 2], [100, 0.1, 10], [100, 0, 10], [0, 0.1, 10], [100, 0.1, 0]], "outputs": [[[110, 110]], [[120, 121]], [[200, 259]], [[100, 100]], [[0, 0]], [[100, 100]]], "starter_code": "def interest(principal, interest, periods):", "canonical_solution": "def interest(principal, interest, periods):\n    return [round(principal * (1 + interest * periods)), round(principal * (1 + interest) ** periods)]", "entry_point": "interest", "task_id": "TACO_lite/453", "input_output_examples": [[[100, 0.1, 1], [100, 0.1, 2], [100, 0.1, 10]], [[110, 110], [120, 121], [200, 259]]]}
{"requirement": "def per(n):\n\"\"\"*Based on this Numberphile video: https://www.youtube.com/watch?v=Wim9WJeDTHQ*\n\n---\n\nMultiply all the digits of a nonnegative integer `n` by each other, repeating with the product until a single digit is obtained. The number of steps required is known as the **multiplicative persistence**.\n\nCreate a function that calculates the individual results of each step, not including the original number, but including the single digit, and outputs the result as a list/array. If the input is a single digit, return an empty list/array.\n\n## Examples\n```\nper(1)  = []\n\nper(10) = [0]\n// 1*0 = 0\n\nper(69) = [54, 20, 0]\n// 6*9 = 54 --> 5*4 = 20 --> 2*0 = 0\n\nper(277777788888899) = [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]\n// 2*7*7*7*7*7*7*8*8*8*8*8*8*9*9 = 4996238671872 --> 4*9*9*6*2*3*8*6*7*1*8*7*2 = 4478976 --> ...\n```\n\"\"\"", "inputs": [[1234567890], [123456789], [12345678], [1234567], [123456], [12345], [2379], [777], [25], [277777788888899], [3778888999]], "outputs": [[[0]], [[362880, 0]], [[40320, 0]], [[5040, 0]], [[720, 0]], [[120, 0]], [[378, 168, 48, 32, 6]], [[343, 36, 18, 8]], [[10, 0]], [[4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]], [[438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]]], "starter_code": "def per(n):", "canonical_solution": "def per(n):\n    r = []\n    while n >= 10:\n        p = 1\n        for i in str(n):\n            p = p * int(i)\n        r.append(p)\n        n = p\n    return r", "entry_point": "per", "task_id": "TACO_lite/454", "input_output_examples": [[[1], [10], [69], [277777788888899]], [[], [0], [54, 20, 0], [4996238671872, 438939648, 4478976, 338688, 27648, 2688, 768, 336, 54, 20, 0]]]}
{"requirement": "def sum_of_a_beach(beach):\n\"\"\"Beaches are filled with sand, water, fish, and sun. Given a string, calculate how many times the words `\"Sand\"`, `\"Water\"`, `\"Fish\"`, and `\"Sun\"` appear without overlapping (regardless of the case).\n\n## Examples\n\n```python\nsum_of_a_beach(\"WAtErSlIde\")                    ==>  1\nsum_of_a_beach(\"GolDeNSanDyWateRyBeaChSuNN\")    ==>  3\nsum_of_a_beach(\"gOfIshsunesunFiSh\")             ==>  4\nsum_of_a_beach(\"cItYTowNcARShoW\")               ==>  0\n```\n\"\"\"", "inputs": [["SanD"], ["sunshine"], ["sunsunsunsun"], ["123FISH321"], ["weoqipurpoqwuirpousandiupqwoieurioweuwateruierqpoiweurpouifiShqowieuqpwoeuisUn"], ["sAnDsandwaTerwatErfishFishsunsunsandwater"], ["joifjepiojfoiejfoajoijawoeifjowejfjoiwaefjiaowefjaofjwoj fawojef "], ["jwefjwjfsandsandwaterwaterfishfishsunsunsandwateriojwhefa;jawof;jawio;f"], ["saNdsandwaterwAterfishfishsunsunsandwatersandsandwaterwaterfishfishsunsunsandwatersandsandwaterwaterfishfishsunsunsandwatersandsandwaterwaterfishfishsunsunsandwatersandsandwaterwaterfishfishsunsunsandwatersandsandwaterwaterfishfishsunsunsandwatersandsandwaterwaterfishfishsunsunsandwatersandsandwaterwaterfishfishsunsunsandwatersandsandwaterwaterfishfishsunsunsandwatersandsandwaterwaterfishfishsunsunsandwater"], ["sununsu"], ["sandandndsansa"], ["wateratertererwatewatwa"], ["fishishshfisfi"]], "outputs": [[1], [1], [4], [1], [4], [10], [0], [10], [100], [1], [1], [1], [1]], "starter_code": "def sum_of_a_beach(beach):", "canonical_solution": "import re\n\ndef sum_of_a_beach(beach):\n    return len(re.findall('Sand|Water|Fish|Sun', beach, re.IGNORECASE))", "entry_point": "sum_of_a_beach", "task_id": "TACO_lite/455", "input_output_examples": [[["WAtErSlIde"], ["GolDeNSanDyWateRyBeaChSuNN"], ["gOfIshsunesunFiSh"], ["cItYTowNcARShoW"]], [[1], [3], [4], [0]]]}
{"requirement": "def coin(n):\n\"\"\"In this kata you will be given an **integer n**, which is the number of times that is thown a coin. You will have to return an array of string for all the possibilities (heads[H] and tails[T]). Examples:\n```coin(1) should return {\"H\", \"T\"}```\n```coin(2) should return {\"HH\", \"HT\", \"TH\", \"TT\"}```\n```coin(3) should return {\"HHH\", \"HHT\", \"HTH\", \"HTT\", \"THH\", \"THT\", \"TTH\", \"TTT\"}```\nWhen finished sort them alphabetically.\n\nIn C and C++ just return a ```char*``` with all elements separated by```,``` (without space):\n```coin(2) should return \"HH,HT,TH,TT\"```\nINPUT:\n```0 < n < 18```\nCareful with performance!! You'll have to pass 3 basic test (n = 1, n = 2, n = 3), many medium tests (3 < n <= 10) and many large tests (10 < n < 18)\n\"\"\"", "inputs": [[1], [2], [3]], "outputs": [[["H", "T"]], [["HH", "HT", "TH", "TT"]], [["HHH", "HHT", "HTH", "HTT", "THH", "THT", "TTH", "TTT"]]], "starter_code": "def coin(n):", "canonical_solution": "from itertools import product\n\ndef coin(n):\n    return list(map(''.join, product(*['HT'] * n)))", "entry_point": "coin", "task_id": "TACO_lite/456", "input_output_examples": [[[1], [2], [3]], [["H", "T"], ["HH", "HT", "TH", "TT"], ["HHH", "HHT", "HTH", "HTT", "THH", "THT", "TTH", "TTT"]]]}
{"requirement": "def bits_war(numbers):\n\"\"\"Variation of this nice kata, the war has expanded and become dirtier and meaner; both even and odd numbers will fight with their pointy `1`s. And negative integers are coming into play as well, with, ça va sans dire, a negative contribution (think of them as spies or saboteurs).\n\nAgain, three possible outcomes: `odds win`, `evens win` and `tie`.\n\nExamples:\n\n```python\nbits_war([1,5,12]) => \"odds win\" #1+101 vs 1100, 3 vs 2\nbits_war([7,-3,20]) => \"evens win\" #111-11 vs 10100, 3-2 vs 2\nbits_war([7,-3,-2,6]) => \"tie\" #111-11 vs -1+110, 3-2 vs -1+2\n```\n\"\"\"", "inputs": [[[1, 5, 12]], [[7, -3, 20]], [[7, -3, -2, 6]], [[-3, -5]], [[]]], "outputs": [["odds win"], ["evens win"], ["tie"], ["evens win"], ["tie"]], "starter_code": "def bits_war(numbers):", "canonical_solution": "def bits_war(numbers):\n    odd, even = (0, 0)\n    for number in numbers:\n        if number % 2 == 0:\n            if number > 0:\n                even += bin(number).count('1')\n            else:\n                even -= bin(number).count('1')\n        elif number > 0:\n            odd += bin(number).count('1')\n        else:\n            odd -= bin(number).count('1')\n    return 'odds win' if odd > even else 'evens win' if even > odd else 'tie'", "entry_point": "bits_war", "task_id": "TACO_lite/457", "input_output_examples": [[[[1, 5, 12]], [[7, -3, 20]], [[7, -3, -2, 6]]], [["odds win"], ["evens win"], ["tie"]]]}
{"requirement": "def looper(start, stop, number):\n\"\"\"In this kata we are focusing on the Numpy python package. You must write a function called `looper` which takes three integers `start, stop and number` as input and returns a list from `start` to `stop` with `number` total values in the list.  Five examples are shown below:\n\n```\nlooper(1, 5, 1) = [1.0]\nlooper(1, 5, 2) = [1.0, 5.0]\nlooper(1, 5, 3) = [1.0, 3.0, 5.0]\nlooper(1, 5, 4) = [1.0, 2.333333333333333, 3.6666666666666665, 5.0]\nlooper(1, 5, 5) = [1.0, 2.0, 3.0, 4.0, 5.0]\n```\n\"\"\"", "inputs": [[1, 5, 1], [1, 5, 2], [1, 5, 3], [1, 5, 4], [1, 5, 5]], "outputs": [[[1.0]], [[1.0, 5.0]], [[1.0, 3.0, 5.0]], [[1.0, 2.333333333333333, 3.6666666666666665, 5.0]], [[1.0, 2.0, 3.0, 4.0, 5.0]]], "starter_code": "def looper(start, stop, number):", "canonical_solution": "from numpy import linspace\n\ndef looper(start, stop, number):\n    return list(linspace(start, stop, number))", "entry_point": "looper", "task_id": "TACO_lite/458", "input_output_examples": [[[1, 5, 1], [1, 5, 2], [1, 5, 3], [1, 5, 4], [1, 5, 5]], [[[1.0]], [[1.0, 5.0]], [[1.0, 3.0, 5.0]], [[1.0, 2.333333333333333, 3.6666666666666665, 5.0]], [[1.0, 2.0, 3.0, 4.0, 5.0]]]]}
{"requirement": "def has_unique_chars(s):\n\"\"\"Write a program to determine if a string contains only unique characters.\nReturn true if it does and false otherwise.\n\nThe string may contain any of the 128 ASCII characters.\nCharacters are case-sensitive, e.g. 'a' and 'A' are considered different characters.\n\"\"\"", "inputs": [["  nAa"], ["abcdef"], ["++-"]], "outputs": [[false], [true], [false]], "starter_code": "def has_unique_chars(s):", "canonical_solution": "def has_unique_chars(s):\n    return len(s) == len(set(s))", "entry_point": "has_unique_chars", "task_id": "TACO_lite/459", "input_output_examples": [[["  nAa"]], [[false]]]}
{"requirement": "def is_even(n):\n\"\"\"Is the number even?\n\nIf the numbers is even return `true`. If it's odd, return `false`. \n\n\nOh yeah... the following symbols/commands have been disabled!\n\n use of ```%```\n use of ```.even?``` in Ruby\n use of ```mod``` in Python\n\"\"\"", "inputs": [[2], [3], [14], [15], [26], [27]], "outputs": [[true], [false], [true], [false], [true], [false]], "starter_code": "def is_even(n):", "canonical_solution": "def is_even(n):\n    return not n & 1", "entry_point": "is_even", "task_id": "TACO_lite/460", "input_output_examples": [[[2]], [[true]]]}
{"requirement": "def sum_from_string(string):\n\"\"\"Given a random string consisting of numbers, letters, symbols, you need to sum up the numbers in the string. \n\nNote:\n\n- Consecutive integers should be treated as a single number. eg, `2015` should be treated as a single number `2015`, NOT four numbers\n- All the numbers should be treaded as positive integer. eg, `11-14` should be treated as two numbers `11` and `14`. Same as `3.14`, should be treated as two numbers `3` and `14`\n- If no number was given in the string, it should return `0`\n\n\nExample:\n\n```\nstr = \"In 2015, I want to know how much does iPhone 6+ cost?\"\n```\n\n The numbers are `2015`, `6`\n\nSum is `2021`.\n\"\"\"", "inputs": [["In 2015, I want to know how much does iPhone 6+ cost?"], ["1+1=2"], ["e=mc^2"], ["aHR0cDovL3d3dy5jb2Rld2Fycy5jb20va2F0YS9uZXcvamF2YXNjcmlwdA=="], ["a30561ff4fb19170aa598b1431b52edad1fcc3e0"], ["x1KT   CmZ__\rYouOY8Uqu-ETtz"], ["x1KT-8&*@\"CmZ__\rYouO  __Y8Uq\\u-ETtz"], [""], ["Hello World"]], "outputs": [[2021], [4], [2], [53], [51820], [9], [17], [0], [0]], "starter_code": "def sum_from_string(string):", "canonical_solution": "import re\n\ndef sum_from_string(string):\n    d = re.findall('\\\\d+', string)\n    return sum((int(i) for i in d))", "entry_point": "sum_from_string", "task_id": "TACO_lite/461", "input_output_examples": [[["In 2015, I want to know how much does iPhone 6+ cost?"]], [[2021]]]}
{"requirement": "def convert_num(number, base):\n\"\"\"Poor Cade has got his number conversions mixed up again!\n\nFix his ```convert_num()``` function so it correctly converts a base-10 ```int```eger, \nto the selected of ```bin```ary or ```hex```adecimal.\n\n```#The output should be a string at all times```\n\n```python\nconvert_num(number, base):\n    if 'base' = hex:\n        return int(number, 16)\n    if 'base' = bin:\n        return int(number, 2)\n    return (Incorrect base input)\n```\nPlease note, invalid ```number``` or ```base``` inputs will be tested.\nIn the event of an invalid ```number/base``` you should return:\n```python\n\"Invalid number input\"\nor\n\"Invalid base input\"\n```\nFor each respectively.\n\nGood luck coding! :D\n\"\"\"", "inputs": [[122, "bin"], ["dog", "bin"], [0, "hex"], [123, "lol"]], "outputs": [["0b1111010"], ["Invalid number input"], ["0x0"], ["Invalid base input"]], "starter_code": "def convert_num(number, base):", "canonical_solution": "def convert_num(number, base):\n    try:\n        if base == 'hex':\n            return hex(number)\n        if base == 'bin':\n            return bin(number)\n    except:\n        return 'Invalid number input'\n    return 'Invalid base input'", "entry_point": "convert_num", "task_id": "TACO_lite/462", "input_output_examples": [[[122, "bin"]], [["0b1111010"]]]}
{"requirement": "def string_merge(string1, string2, letter):\n\"\"\"Given two words and a letter, return a single word that's a combination of both words, merged at the point where the given letter first appears in each word. The returned word should have the beginning of the first word and the ending of the second, with the dividing letter in the middle. You can assume both words will contain the dividing letter.\n\n## Examples\n\n```python\nstring_merge(\"hello\", \"world\", \"l\")      ==>  \"held\"\nstring_merge(\"coding\", \"anywhere\", \"n\")  ==>  \"codinywhere\"\nstring_merge(\"jason\", \"samson\", \"s\")     ==>  \"jasamson\"\nstring_merge(\"wonderful\", \"people\", \"e\") ==>  \"wondeople\"\n```\n\"\"\"", "inputs": [["hello", "world", "l"], ["coding", "anywhere", "n"], ["jason", "samson", "s"], ["wonderful", "people", "e"], ["person", "here", "e"], ["apowiejfoiajsf", "iwahfeijouh", "j"], ["abcdefxxxyzz", "abcxxxyyyxyzz", "x"], ["12345654321", "123456789", "6"], ["JiOdIdA4", "oopopopoodddasdfdfsd", "d"], ["incredible", "people", "e"]], "outputs": [["held"], ["codinywhere"], ["jasamson"], ["wondeople"], ["pere"], ["apowiejouh"], ["abcdefxxxyyyxyzz"], ["123456789"], ["JiOdddasdfdfsd"], ["increople"]], "starter_code": "def string_merge(string1, string2, letter):", "canonical_solution": "def string_merge(string1, string2, letter):\n    return string1[:string1.index(letter)] + string2[string2.index(letter):]", "entry_point": "string_merge", "task_id": "TACO_lite/463", "input_output_examples": [[["hello", "world", "l"], ["coding", "anywhere", "n"], ["jason", "samson", "s"], ["wonderful", "people", "e"]], [["held"], ["codinywhere"], ["jasamson"], ["wondeople"]]]}
{"requirement": "def color_2_grey(colors):\n\"\"\"An array of size N x M represents pixels of an image.\nEach cell of this array contains an array of size 3 with the pixel's color information: `[R,G,B]`\n\nConvert the color image, into an *average* greyscale image. \n\nThe `[R,G,B]` array contains integers between 0 and 255 for each color. \n\nTo transform a color pixel into a greyscale pixel, average the values of that pixel:\n```\np = [R,G,B] => [(R+G+B)/3, (R+G+B)/3, (R+G+B)/3]\n```\n\n**Note:** the values for the pixel must be integers, therefore you should round floats to the nearest integer.\n\n## Example\n\nHere's an example of a 2x2 image: \n \nHere's the expected image after transformation:\n\n\nYou are always welcome to check out some of my other katas:\n\nVery Easy (Kyu 8)\nAdd Numbers\nEasy (Kyu 7-6)\nConvert Color image to greyscale\nArray Transformations\nBasic Compression\nFind Primes in Range\nNo Ifs No Buts\nMedium (Kyu 5-4)\nIdentify Frames In An Image\nPhotoshop Like - Magic Wand\nScientific Notation\nVending Machine - FSA\nFind Matching Parenthesis\nHard (Kyu 3-2)\nAscii Art Generator\n\"\"\"", "inputs": [[[[[48, 36, 124], [201, 23, 247], [150, 162, 177]]]], [[[[49, 106, 224], [95, 150, 206]], [[88, 57, 134], [40, 183, 144]], [[36, 134, 174], [125, 27, 51]], [[33, 89, 186], [160, 39, 244]], [[249, 127, 245], [201, 233, 72]], [[78, 247, 124], [79, 245, 145]]]], [[[[181, 215, 243], [162, 0, 15], [114, 38, 243], [129, 118, 177]], [[248, 118, 87], [253, 154, 175], [158, 213, 168], [34, 96, 50]], [[184, 220, 48], [72, 248, 221], [65, 74, 53], [121, 70, 113]], [[213, 63, 33], [243, 180, 114], [137, 50, 11], [232, 87, 139]], [[222, 135, 77], [15, 116, 51], [143, 193, 238], [231, 187, 198]], [[50, 145, 56], [10, 145, 240], [185, 219, 179], [217, 104, 82]], [[233, 44, 86], [207, 232, 43], [90, 225, 221], [212, 81, 244]], [[31, 72, 228], [217, 212, 112], [225, 38, 94], [245, 161, 59]]]], [[[[64, 145, 158], [242, 117, 31], [44, 176, 104], [154, 72, 201], [170, 58, 146]], [[173, 12, 177], [59, 160, 180], [100, 11, 96], [179, 115, 51], [46, 149, 252]], [[227, 211, 100], [87, 135, 185], [49, 57, 239], [150, 67, 55], [156, 13, 217]], [[178, 173, 59], [84, 107, 34], [182, 41, 93], [205, 16, 51], [30, 129, 216]], [[217, 107, 112], [31, 240, 11], [166, 211, 106], [91, 107, 89], [187, 23, 141]], [[194, 191, 242], [27, 59, 121], [138, 191, 129], [75, 70, 148], [163, 244, 150]], [[171, 9, 2], [70, 17, 255], [80, 134, 104], [150, 215, 59], [232, 177, 212]]]], [[[[230, 26, 161], [30, 123, 138], [83, 90, 173], [114, 36, 186], [109, 215, 130]], [[23, 25, 149], [60, 134, 191], [220, 120, 113], [85, 94, 3], [85, 137, 249]], [[124, 159, 226], [248, 32, 241], [130, 111, 112], [155, 178, 200], [19, 65, 115]], [[195, 83, 134], [202, 178, 248], [138, 144, 232], [84, 182, 33], [106, 101, 249]], [[227, 59, 3], [101, 237, 48], [70, 98, 73], [78, 133, 234], [124, 117, 98]], [[251, 255, 230], [229, 205, 48], [0, 28, 126], [87, 28, 92], [187, 124, 43]]]]], "outputs": [[[[[69, 69, 69], [157, 157, 157], [163, 163, 163]]]], [[[[126, 126, 126], [150, 150, 150]], [[93, 93, 93], [122, 122, 122]], [[115, 115, 115], [68, 68, 68]], [[103, 103, 103], [148, 148, 148]], [[207, 207, 207], [169, 169, 169]], [[150, 150, 150], [156, 156, 156]]]], [[[[213, 213, 213], [59, 59, 59], [132, 132, 132], [141, 141, 141]], [[151, 151, 151], [194, 194, 194], [180, 180, 180], [60, 60, 60]], [[151, 151, 151], [180, 180, 180], [64, 64, 64], [101, 101, 101]], [[103, 103, 103], [179, 179, 179], [66, 66, 66], [153, 153, 153]], [[145, 145, 145], [61, 61, 61], [191, 191, 191], [205, 205, 205]], [[84, 84, 84], [132, 132, 132], [194, 194, 194], [134, 134, 134]], [[121, 121, 121], [161, 161, 161], [179, 179, 179], [179, 179, 179]], [[110, 110, 110], [180, 180, 180], [119, 119, 119], [155, 155, 155]]]], [[[[122, 122, 122], [130, 130, 130], [108, 108, 108], [142, 142, 142], [125, 125, 125]], [[121, 121, 121], [133, 133, 133], [69, 69, 69], [115, 115, 115], [149, 149, 149]], [[179, 179, 179], [136, 136, 136], [115, 115, 115], [91, 91, 91], [129, 129, 129]], [[137, 137, 137], [75, 75, 75], [105, 105, 105], [91, 91, 91], [125, 125, 125]], [[145, 145, 145], [94, 94, 94], [161, 161, 161], [96, 96, 96], [117, 117, 117]], [[209, 209, 209], [69, 69, 69], [153, 153, 153], [98, 98, 98], [186, 186, 186]], [[61, 61, 61], [114, 114, 114], [106, 106, 106], [141, 141, 141], [207, 207, 207]]]], [[[[139, 139, 139], [97, 97, 97], [115, 115, 115], [112, 112, 112], [151, 151, 151]], [[66, 66, 66], [128, 128, 128], [151, 151, 151], [61, 61, 61], [157, 157, 157]], [[170, 170, 170], [174, 174, 174], [118, 118, 118], [178, 178, 178], [66, 66, 66]], [[137, 137, 137], [209, 209, 209], [171, 171, 171], [100, 100, 100], [152, 152, 152]], [[96, 96, 96], [129, 129, 129], [80, 80, 80], [148, 148, 148], [113, 113, 113]], [[245, 245, 245], [161, 161, 161], [51, 51, 51], [69, 69, 69], [118, 118, 118]]]]], "starter_code": "def color_2_grey(colors):", "canonical_solution": "from statistics import mean\n\ndef grey(rgb):\n    return [int(round(mean(rgb)))] * 3\n\ndef color_2_grey(colors):\n    return [[grey(pixel) for pixel in row] for row in colors]", "entry_point": "color_2_grey", "task_id": "TACO_lite/464", "input_output_examples": [[[[[48, 36, 124], [201, 23, 247], [150, 162, 177]]]], [[[[69, 69, 69], [157, 157, 157], [163, 163, 163]]]]]}
{"requirement": "def share_price(invested, changes):\n\"\"\"Share price\n===========\n\nYou spent all your saved money to buy some shares.\n\nYou bought it for `invested`, and want to know how much it's worth, but all the info you can quickly get are just the change the shares price made in percentages.\n\nYour task:\n----------\nWrite the function `sharePrice()` that calculates, and returns the current price of your share, given the following two arguments:\n\n- `invested`(number), the amount of money you initially invested in the given share\n\n- `changes`(array of numbers), contains your shares daily movement percentages\n\nThe returned number, should be in string format, and it's precision should be fixed at 2 decimal numbers.\n\nHave fun!\n\n>**Hint:** Try to write the function in a functional manner!\n\"\"\"", "inputs": [[100, []], [100, [-50, 50]], [100, [-50, 100]], [100, [-20, 30]], [1000, [0, 2, 3, 6]]], "outputs": [["100.00"], ["75.00"], ["100.00"], ["104.00"], ["1113.64"]], "starter_code": "def share_price(invested, changes):", "canonical_solution": "def share_price(invested, changes):\n    for change in changes:\n        invested = invested * (100 + change) / 100.0\n    return format(invested, '.2f')", "entry_point": "share_price", "task_id": "TACO_lite/465", "input_output_examples": [[[100, []]], [["100.00"]]]}
{"requirement": "def reverse_alternate(string):\n\"\"\"Reverse every other word in a given string, then return the string. Throw away any leading or trailing whitespace, while ensuring there is exactly one space between each word. Punctuation marks should be treated as if they are a part of the word in this kata.\n\"\"\"", "inputs": [["Did it work?"], ["I really hope it works this time..."], ["Reverse this string, please!"], ["Have a beer"], ["   "], ["This is not a test "], ["This       is a  test "]], "outputs": [["Did ti work?"], ["I yllaer hope ti works siht time..."], ["Reverse siht string, !esaelp"], ["Have a beer"], [""], ["This si not a test"], ["This si a tset"]], "starter_code": "def reverse_alternate(string):", "canonical_solution": "def reverse_alternate(string):\n    return ' '.join((y[::-1] if x % 2 else y for x, y in enumerate(string.split())))", "entry_point": "reverse_alternate", "task_id": "TACO_lite/466", "input_output_examples": [[["Did it work?"]], [["Did ti work?"]]]}
{"requirement": "def count_me(data):\n\"\"\"Given a string of integers, count how many times that integer repeats itself, then return a string showing the count and the integer.\n\n\nExample: `countMe('1123')` (`count_me` in Ruby)\n\n- Here 1 comes twice so `` will be `\"21\"`\n- then 2 comes once so `` will be `\"12\"`\n- then 3 comes once so `` will be `\"13\"`\n\nhence output string will be `\"211213\"`.\n\n\nSimilarly `countMe('211213')` will return `'1221121113'`\n(1 time 2, 2 times 1, 1 time 2, 1 time 1, 1 time 3)\n\n\nReturn `\"\"` for empty, nil or non numeric strings\n\"\"\"", "inputs": [["1123"], ["1"], ["11"], ["a"], ["a123"], ["21"], ["1211"], ["12322212223443"], [""], ["123a"]], "outputs": [["211213"], ["11"], ["21"], [""], [""], ["1211"], ["111221"], ["111213321132132413"], [""], [""]], "starter_code": "def count_me(data):", "canonical_solution": "def count_me(data):\n    if not data.isdigit():\n        return ''\n    result = []\n    count = 1\n    last = data[0]\n    for char in data[1:]:\n        if char == last:\n            count += 1\n        else:\n            result.append(str(count) + last)\n            last = char\n            count = 1\n    result.append(str(count) + last)\n    return ''.join(result)", "entry_point": "count_me", "task_id": "TACO_lite/467", "input_output_examples": [[["1123"], ["211213"], [""]], [["211213"], ["1221121113"], [""]]]}
{"requirement": "def is_centered(arr, n):\n\"\"\"An array is called `centered-N` if some `consecutive sequence` of elements of the array sum to `N` and this sequence is preceded and followed by the same number of elements. \n\nExample:\n```\n[3,2,10,4,1,6,9] is centered-15\nbecause the sequence 10,4,1 sums to 15 and the sequence \nis preceded by two elements [3,2] and followed by two elements [6,9]\n\n```\n\nWrite a method called `isCenteredN` that returns :\n\n- `true` if its array argument is `not empty` and `centered-N` or empty and centered-0\n- otherwise returns `false`.\n\"\"\"", "inputs": [[[0, 0, 0], 0], [[3, 2, 10, 4, 1, 6, 9], 15], [[2, 10, 4, 1, 6, 9], 15], [[3, 2, 10, 4, 1, 6], 15], [[1, 1, 8, 3, 1, 1], 15], [[1, 1, 8, 3, 1, 1], 11], [[1, 1, 8, 3, 1, 1], 13], [[9, 0, 6], 0], [[], 25], [[25], 25], [[25, 26, 23, 24], 0], [[2, 1, 2], 0], [[1, 1, 15, -1, -1], 15], [[1, 1, 15, -1, -1], 6], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 0], [[0, 0, 0, -1, 1, 1, -1, 0, 0, 0], 0]], "outputs": [[true], [true], [false], [false], [true], [true], [true], [true], [false], [true], [true], [false], [true], [false], [true], [true]], "starter_code": "def is_centered(arr, n):", "canonical_solution": "def is_centered(arr, n):\n    l = int(len(arr) / 2) if len(arr) % 2 == 0 else int((len(arr) - 1) / 2)\n    return any((sum(arr[i:-i]) == n for i in range(1, l + 1))) or sum(arr) == n", "entry_point": "is_centered", "task_id": "TACO_lite/468", "input_output_examples": [[[[3, 2, 10, 4, 1, 6, 9], 15], [[0, 0, 0], 0]], [[true], [true]]]}
{"requirement": "def format_poem(poem):\n\"\"\"You have a collection of lovely poems. Unfortuantely they aren't formatted very well. They're all on one line, like this:\n\n```\nBeautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated.\n```\nWhat you want is to present each sentence on a new line, so that it looks like this:\n```\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\n```\nWrite a function, `format_poem()` that takes a string like the one line example as an argument and returns a new string that is formatted across multiple lines with each new sentence starting on a new line when you print it out.\n\nTry to solve this challenge with the [str.split()](https://docs.python.org/3/library/stdtypes.html#str.split) and the [str.join()](https://docs.python.org/3/library/stdtypes.html#str.join) string methods.\n\nEvery sentence will end with a period, and every new sentence will have one space before the previous period. Be careful about trailing whitespace in your solution.\n\"\"\"", "inputs": [["Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated."], ["Flat is better than nested. Sparse is better than dense. Readability counts. Special cases aren't special enough to break the rules."], ["Although practicality beats purity. Errors should never pass silently. Unless explicitly silenced. In the face of ambiguity, refuse the temptation to guess."], ["There should be one-- and preferably only one --obvious way to do it. Although that way may not be obvious at first unless you're Dutch. Now is better than never. Although never is often better than *right* now."], ["If the implementation is hard to explain, it's a bad idea. If the implementation is easy to explain, it may be a good idea. Namespaces are one honking great idea -- let's do more of those!"]], "outputs": [["Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated."], ["Flat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules."], ["Although practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess."], ["There should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now."], ["If the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!"]], "starter_code": "def format_poem(poem):", "canonical_solution": "def format_poem(poem):\n    return '.\\n'.join(poem.split('. '))", "entry_point": "format_poem", "task_id": "TACO_lite/469", "input_output_examples": [[["Beautiful is better than ugly. Explicit is better than implicit. Simple is better than complex. Complex is better than complicated."]], [["Beautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated."]]]}
{"requirement": "def encrypt(text, key):\n\"\"\"### Background\nIn classical cryptography, the Hill cipher is a polygraphic substitution cipher based on linear algebra. It was invented by Lester S. Hill in 1929.\n\n\n\n### Task\n\n\nThis cipher involves a text key which has to be turned into a matrix and text which needs to be encoded. The text key can be of any perfect square length but for the sake of this kata we will focus on keys of length 4 forming a 2x2 matrix.\n\nTo encrypt a message using the hill cipher, first of all you need to convert the text key into a key matrix. To do that you will convert the key row wise into a 2x2 matrix. Then you will substitute the letters with their respective positions on the alphabet: A=0, B=1,C=2 and so on till Z=25. So for example if we get the key text as ```cats```, the key matrix will be:\n    \n    [[ 2  0]\n     [19 18]]\n     \nNow the next step is to break the text into pairs of two and convert those pairs into 2x1 matrices. If your text has an odd number of letters then just add a Z next to your last letter. Now again convert those letters into their respective position in the alphabet as above. So for example the text ```Hi``` would be converted into:\n\n    [[7]\n     [8]]\n     \nNow we need to [multiply](https://www.mathsisfun.com/algebra/matrix-multiplying.html) the key matrix by the text matrix to get our encrypted matrix and then find out the encrypted matrix [modulo](https://en.wikipedia.org/wiki/Modulo_operation) 26:\n\n    [[ 2  0]  *  [[7]  =  [[14]   =  [[14]  mod 26\n     [19 18]]     [8]]     [277]]     [17]]\n     \nFor the final step we just find out the letters at the alphabet position of 14 and 17 which are ```O``` and ```R```. So ```OR``` is our encrypted message for the message ```Hi```\n\n\nIn this kata you will be given a function named ```encrypt``` with the parameters ```text``` and ```key``` and you have to return the encrypted message in all uppercase letters\n\n``` python\nencrypt('','azyb') → ''\nencrypt('Hi','cats') → 'OR'\nencrypt('This is a good day','bbaa') → 'AAAAAAGACAGAYA'\n```\n\nNote:\n- The text to encrypt will contain characters other than the alphabets, its your job to clean them before converting text to matrices. Spaces also need to be removed\n- The text may contain both uppercase and lowercase alphabets. Its your job to standardize them, the encrypted text however should be returned in uppercase letters.\n- The key will always contain 4 lowercase alphabet.\n\"\"\"", "inputs": [["", "azyb"], ["hello", "hill"], ["This is a good day", "bbaa"], ["CODEWARS IS GREAT", "wxyz"], ["Five + Seven = Twelve", "math"], ["+-*/ &*%^$", "azyb"]], "outputs": [[""], ["DRJIMN"], ["AAAAAAGACAGAYA"], ["CICQQIIASSDXKSFP"], ["IVSLIGSLAQEECSWR"], [""]], "starter_code": "def encrypt(text, key):", "canonical_solution": "import numpy as np\nfrom itertools import zip_longest\nfrom string import ascii_lowercase as lower, ascii_uppercase as upper\nD = {c: i % 26 for i, c in enumerate(lower + upper)}\n\ndef encrypt(text, key):\n    result = []\n    text = ''.join(filter(str.isalpha, text))\n    key = np.array(([D[key[0]], D[key[1]]], [D[key[2]], D[key[3]]]))\n    for c1, c2 in zip_longest(text[::2], text[1::2], fillvalue='Z'):\n        x, y = key @ ([D[c1]], [D[c2]])\n        result.append(upper[x[0] % 26] + upper[y[0] % 26])\n    return ''.join(result)", "entry_point": "encrypt", "task_id": "TACO_lite/470", "input_output_examples": [[["", "azyb"], ["Hi", "cats"], ["This is a good day", "bbaa"]], [[""], ["OR"], ["AAAAAAGACAGAYA"]]]}
{"requirement": "def matrixfy(s):\n\"\"\"Given a name, turn that name into a perfect square matrix (nested array with the amount of arrays equivalent to the length of each array). \n\nYou will need to add periods (`.`) to the end of the name if necessary, to turn it into a matrix. \n\nIf the name has a length of 0, return `\"name must be at least one letter\"`\n\n## Examples\n\n\"Bill\" ==> [ [\"B\", \"i\"],\n             [\"l\", \"l\"] ]\n\n\"Frank\" ==> [ [\"F\", \"r\", \"a\"],\n              [\"n\", \"k\", \".\"],\n              [\".\", \".\", \".\"] ]\n\"\"\"", "inputs": [[""], ["G"], ["Beyonce"], ["Franklin"], ["Bill"], ["Frank"]], "outputs": [["name must be at least one letter"], [[["G"]]], [[["B", "e", "y"], ["o", "n", "c"], ["e", ".", "."]]], [[["F", "r", "a"], ["n", "k", "l"], ["i", "n", "."]]], [[["B", "i"], ["l", "l"]]], [[["F", "r", "a"], ["n", "k", "."], [".", ".", "."]]]], "starter_code": "def matrixfy(s):", "canonical_solution": "from math import ceil\n\ndef matrixfy(s):\n    if not s:\n        return 'name must be at least one letter'\n    x = ceil(len(s) ** 0.5)\n    it = iter(s.ljust(x * x, '.'))\n    return [[next(it) for _ in range(x)] for _ in range(x)]", "entry_point": "matrixfy", "task_id": "TACO_lite/471", "input_output_examples": [[["Bill"], ["Frank"], [""]], [[[["B", "i"], ["l", "l"]]], [[["F", "r", "a"], ["n", "k", "."], [".", ".", "."]]], ["name must be at least one letter"]]]}
{"requirement": "def dad_filter(strng):\n\"\"\"Your dad doesn't really *get* punctuation, and he's always putting extra commas in when he posts. You can tolerate the run-on sentences, as he does actually talk like that, but those extra commas have to go!\n\nWrite a function called ```dadFilter``` that takes a string as argument and returns a string with the extraneous commas removed. The returned string should not end with a comma or any trailing whitespace.\n\"\"\"", "inputs": [["all this,,,, used to be trees,,,,,,"], ["Listen,,,, kid,,,,,,"], ["Luke,,,,,,,,, I am your father,,,,,,,,,  "], ["i,, don't believe this round earth,,, show me evadence!!"], ["Dead or alive,,,, you're coming with me,,,   "]], "outputs": [["all this, used to be trees"], ["Listen, kid"], ["Luke, I am your father"], ["i, don't believe this round earth, show me evadence!!"], ["Dead or alive, you're coming with me"]], "starter_code": "def dad_filter(strng):", "canonical_solution": "from re import compile, sub\nREGEX = compile(',+')\n\ndef dad_filter(strng):\n    return sub(REGEX, ',', strng).rstrip(' ,')", "entry_point": "dad_filter", "task_id": "TACO_lite/472", "input_output_examples": [[["all this,,,, used to be trees,,,,,,"]], [["all this, used to be trees"]]]}
{"requirement": "def palindrome_chain_length(n):\n\"\"\"Number is a palindrome if it is equal to the number with digits in reversed order.\nFor example, 5, 44, 171, 4884 are palindromes and 43, 194, 4773 are not palindromes.\n\nWrite a method `palindrome_chain_length` which takes a positive number and returns the number of special steps needed to obtain a palindrome. The special step is: \"reverse the digits, and add to the original number\". If the resulting number is not a  palindrome, repeat the procedure with the sum until the resulting number is a palindrome.\n\nIf the input number is already a palindrome, the number of steps is 0.\n\nInput will always be a positive integer.\n\nFor example, start with 87:\n\n87 + 78 = 165;\n165 + 561 = 726;\n 726 + 627 = 1353;\n1353 + 3531 = 4884\n\n4884 is a palindrome and we needed 4 steps to obtain it, so `palindrome_chain_length(87) == 4`\n\"\"\"", "inputs": [[87], [1], [88], [89], [10]], "outputs": [[4], [0], [0], [24], [1]], "starter_code": "def palindrome_chain_length(n):", "canonical_solution": "def palindrome_chain_length(n):\n    steps = 0\n    while str(n) != str(n)[::-1]:\n        n = n + int(str(n)[::-1])\n        steps += 1\n    return steps", "entry_point": "palindrome_chain_length", "task_id": "TACO_lite/473", "input_output_examples": [[[87]], [[4]]]}
{"requirement": "def well(arr):\n\"\"\"For every good kata idea there seem to be quite a few bad ones!\n\nIn this kata you need to check the provided 2 dimensional array (x) for good ideas 'good' and bad ideas 'bad'. If there are one or two good ideas, return 'Publish!', if there are more than 2 return 'I smell a series!'. If there are no good ideas, as is often the case, return 'Fail!'.\n\nThe sub arrays may not be the same length.\n\nThe solution should be case insensitive (ie good, GOOD and gOOd all count as a good idea). All inputs may not be strings.\n\"\"\"", "inputs": [[[["bad", "bAd", "bad"], ["bad", "bAd", "bad"], ["bad", "bAd", "bad"]]], [[["gOOd", "bad", "BAD", "bad", "bad"], ["bad", "bAd", "bad"], ["GOOD", "bad", "bad", "bAd"]]], [[["gOOd", "bAd", "BAD", "bad", "bad", "GOOD"], ["bad"], ["gOOd", "BAD"]]]], "outputs": [["Fail!"], ["Publish!"], ["I smell a series!"]], "starter_code": "def well(arr):", "canonical_solution": "from itertools import chain\n\ndef well(arr):\n    c = sum((isinstance(x, str) and x.lower() == 'good' for x in chain.from_iterable(arr)))\n    return 'I smell a series!' if c > 2 else 'Publish!' if c > 0 else 'Fail!'", "entry_point": "well", "task_id": "TACO_lite/474", "input_output_examples": [[[[["bad", "bAd", "bad"], ["bad", "bAd", "bad"], ["bad", "bAd", "bad"]]]], [["Fail!"]]]}
{"requirement": "def numericals(s):\n\"\"\"You are given an input string.\n\nFor each symbol in the string if it's the first character occurrence, replace it with a '1', else replace it with the amount of times you've already seen it...\n      \nBut will your code be **performant enough**?\n\n___\n\n## Examples:\n\n```\ninput   =  \"Hello, World!\"\nresult  =  \"1112111121311\"\n\ninput   =  \"aaaaaaaaaaaa\"\nresult  =  \"123456789101112\"\n```\n\nThere might be some non-ascii characters in the string.\n\n~~~if:java\nNote: there will be no int domain overflow (character occurrences will be less than 2 billion).\n~~~\n~~~if:c\n(this does not apply to the C language translation)\n~~~\n\"\"\"", "inputs": [["Hello, World!"], ["Hello, World! It's me, JomoPipi!"], ["hello hello"], ["Hello"], ["11111"], ["hope you 123456789 expected numbers in the string"], ["In this string, I'll make sure the amounts of a character go over 9"]], "outputs": [["1112111121311"], ["11121111213112111131224132411122"], ["11121122342"], ["11121"], ["12345"], ["1111112121111111113212311414121151151262267232231"], ["11111112221221132112411115312263237221234482193101343525441123124155131"]], "starter_code": "def numericals(s):", "canonical_solution": "def numericals(s):\n    dictio = {}\n    t = ''\n    for i in s:\n        dictio[i] = dictio.get(i, 0) + 1\n        t += str(dictio[i])\n    return t", "entry_point": "numericals", "task_id": "TACO_lite/475", "input_output_examples": [[["Hello, World!"], ["aaaaaaaaaaaa"]], [["1112111121311"], ["123456789101112"]]]}
{"requirement": "def duplicate_encode(word):\n\"\"\"The goal of this exercise is to convert a string to a new string where each character in the new string is `\"(\"` if that character appears only once in the original string, or `\")\"` if that character appears more than once in the original string. Ignore capitalization when determining if a character is a duplicate.\n\n## Examples\n```\n\"din\"      =>  \"(((\"\n\"recede\"   =>  \"()()()\"\n\"Success\"  =>  \")())())\"\n\"(( @\"     =>  \"))((\" \n```\n\n**Notes**\n\nAssertion messages may be unclear about what they display in some languages. If you read `\"...It Should encode XXX\"`, the `\"XXX\"` is the expected result, not the input!\n\"\"\"", "inputs": [["din"], ["recede"], ["Success"], ["CodeWarrior"], ["Supralapsarian"], ["iiiiii"], ["(( @"], [" ( ( )"]], "outputs": [["((("], ["()()()"], [")())())"], ["()(((())())"], [")()))()))))()("], ["))))))"], ["))(("], [")))))("]], "starter_code": "def duplicate_encode(word):", "canonical_solution": "def duplicate_encode(word):\n    return ''.join(['(' if word.lower().count(c) == 1 else ')' for c in word.lower()])", "entry_point": "duplicate_encode", "task_id": "TACO_lite/476", "input_output_examples": [[["din"], ["recede"], ["Success"], ["(( @"]], [["((("], ["()()()"], ["())())"], ["))(("]]]}
{"requirement": "def diagonal(m):\n\"\"\"**Principal Diagonal** -- The principal diagonal in a matrix identifies those elements of the matrix running from North-West to South-East.\n\n**Secondary Diagonal** -- the secondary diagonal of a matrix identifies those elements of the matrix running from North-East to South-West.\n\nFor example:\n```\nmatrix:             [1, 2, 3]\n                    [4, 5, 6]\n                    [7, 8, 9]\n\nprincipal diagonal: [1, 5, 9]\nsecondary diagonal: [3, 5, 7]\n\n```\n\n## Task\nYour task is to find which diagonal is \"larger\": which diagonal has a bigger sum of their elements.\n\n* If the principal diagonal is larger, return `\"Principal Diagonal win!\"`\n* If the secondary diagonal is larger, return `\"Secondary Diagonal win!\"`\n* If they are equal, return `\"Draw!\"`\n\n**Note:** You will always receive matrices of the same dimension.\n\"\"\"", "inputs": [[[[2, 2, 2], [4, 2, 6], [8, 8, 2]]], [[[7, 2, 2], [4, 2, 6], [1, 8, 1]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 2, 2, 5, 1], [4, 1, 6, 1, 1], [1, 8, 5, 6, 2], [1, 5, 2, 1, 2], [1, 8, 2, 6, 1]]], [[[88, 2, 2, 5, 1, 1, 2, 2, 5, 1], [4, 1, 6, 1, 1, 1, 2, 2, 7, 1], [1, 8, 1, 6, 2, 1, 2, 1, 5, 1], [1, 5, 2, 7, 2, 1, 1, 2, 5, 1], [1, 8, 2, 6, 1, 1, 2, 2, 5, 1], [1, 2, 2, 5, 1, 1, 2, 2, 5, 1], [1, 2, 2, 1, 1, 1, 1, 2, 5, 1], [1, 2, 1, 5, 1, 1, 2, 1, 5, 1], [1, 1, 2, 5, 1, 1, 2, 2, 1, 1], [88, 2, 2, 5, 1, 1, 2, 2, 5, 1]]], [[[2, 2, 2], [4, 2, 6], [1, 8, 5]]], [[[1, 2, 2, 5, 104], [4, 1, 6, 4, 1], [1, 8, 5, 6, 2], [1, 1, 2, 1, 2], [1, 8, 2, 6, 1]]], [[[1, 2, 2, 5, 1, 1, 2, 2, 5, 15], [4, 1, 6, 1, 1, 1, 2, 2, 1, 1], [1, 8, 1, 6, 2, 1, 2, 1, 5, 1], [1, 5, 2, 1, 2, 1, 1, 2, 5, 1], [1, 8, 2, 6, 1, 1, 2, 2, 5, 1], [1, 2, 2, 5, 1, 1, 2, 2, 5, 1], [1, 2, 2, 1, 1, 1, 1, 2, 5, 1], [1, 2, 1, 5, 1, 1, 2, 1, 5, 1], [1, 1, 2, 5, 1, 1, 2, 2, 1, 1], [1, 2, 2, 5, 1, 1, 2, 2, 5, 15]]], [[[0, 2, 2, 5, 1], [4, 0, 6, 1, 1], [1, 8, 5, 6, 2], [1, 7, 2, 1, 2], [1, 8, 2, 6, 1]]], [[[1, 2, 2, 5, 1, 1, 2, 2, 5, 1], [4, 8, 6, 1, 1, 1, 2, 2, 1, 1], [1, 8, 1, 6, 2, 1, 2, 6, 5, 1], [1, 5, 2, 1, 2, 1, 1, 2, 5, 1], [1, 8, 2, 6, 1, 1, 2, 2, 5, 1], [1, 2, 2, 5, 1, 1, 2, 2, 5, 1], [1, 2, 2, 1, 1, 1, 1, 2, 5, 1], [1, 2, 8, 5, 1, 1, 2, 6, 5, 1], [1, 1, 2, 5, 1, 1, 2, 2, 1, 1], [1, 2, 2, 5, 1, 1, 2, 2, 5, 1]]]], "outputs": [["Secondary Diagonal win!"], ["Principal Diagonal win!"], ["Draw!"], ["Secondary Diagonal win!"], ["Draw!"], ["Principal Diagonal win!"], ["Secondary Diagonal win!"], ["Draw!"], ["Secondary Diagonal win!"], ["Draw!"]], "starter_code": "def diagonal(m):", "canonical_solution": "def diagonal(m):\n    P = sum((m[i][i] for i in range(len(m))))\n    S = sum((m[i][-i - 1] for i in range(len(m))))\n    if P > S:\n        return 'Principal Diagonal win!'\n    elif S > P:\n        return 'Secondary Diagonal win!'\n    else:\n        return 'Draw!'", "entry_point": "diagonal", "task_id": "TACO_lite/477", "input_output_examples": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[2, 2, 2], [4, 2, 6], [8, 8, 2]]], [["Principal Diagonal win!"], ["Secondary Diagonal win!"]]]}
{"requirement": "def reverse_factorial(num):\n\"\"\"I'm sure you're familiar with factorials – that is, the product of an integer and all the integers below it. \n\nFor example, `5! = 120`, as `5 * 4 * 3 * 2 * 1 = 120`\n\nYour challenge is to create a function that takes any number and returns the number that it is a factorial of. So, if your function receives `120`, it should return `\"5!\"` (as a string).\n\nOf course, not every number is a factorial of another. In this case, your function would return `\"None\"` (as a string).\n\n### Examples\n\n* `120` will return `\"5!\"`\n* `24` will return `\"4!\"`\n* `150` will return `\"None\"`\n\"\"\"", "inputs": [[120], [3628800], [150]], "outputs": [["5!"], ["10!"], ["None"]], "starter_code": "def reverse_factorial(num):", "canonical_solution": "def reverse_factorial(num):\n    c = f = 1\n    while f < num:\n        c += 1\n        f *= c\n    return 'None' if f > num else '%d!' % c", "entry_point": "reverse_factorial", "task_id": "TACO_lite/478", "input_output_examples": [[[120], [24], [150]], [["5!"], ["4!"], ["None"]]]}
{"requirement": "def smallest(n):\n\"\"\"2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.\nTask:\nWrite\n```\nsmallest(n)\n```\nthat will find the smallest positive number that is evenly divisible by all of the numbers from 1 to n (n <= 40). \nE.g\n```python\nsmallest(5) == 60 # 1 to 5 can all divide evenly into 60\nsmallest(10) == 2520\n```\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20]], "outputs": [[1], [2], [6], [12], [60], [60], [420], [840], [2520], [2520], [27720], [27720], [360360], [360360], [360360], [720720], [12252240], [12252240], [232792560], [232792560]], "starter_code": "def smallest(n):", "canonical_solution": "def smallest(n):\n    x, y, m = (1, 1, 1)\n    while m <= n:\n        if x % m == 0:\n            m += 1\n            y = int(x)\n        else:\n            x += y\n    return x", "entry_point": "smallest", "task_id": "TACO_lite/479", "input_output_examples": [[[5], [10]], [[60], [2520]]]}
{"requirement": "def peak(arr):\n\"\"\"Given an array of ints, return the index such that the sum of the elements to the right of that index equals the sum of the elements to the left of that index. If there is no such index, return `-1`. If there is more than one such index, return the left-most index.\n\nFor example: \n```\npeak([1,2,3,5,3,2,1]) = 3, because the sum of the elements at indexes 0,1,2 == sum of elements at indexes 4,5,6. We don't sum index 3.\npeak([1,12,3,3,6,3,1]) = 2\npeak([10,20,30,40]) = -1\n```\n\nThe special case of an array of zeros (for instance `[0,0,0,0]`) will not be tested. \n\nMore examples in the test cases. \n\nGood luck!\n\nPlease also try [Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\n\"\"\"", "inputs": [[[1, 2, 3, 5, 3, 2, 1]], [[1, 12, 3, 3, 6, 3, 1]], [[10, 20, 30, 40]]], "outputs": [[3], [2], [-1]], "starter_code": "def peak(arr):", "canonical_solution": "def peak(arr):\n    for i, val in enumerate(arr):\n        if sum(arr[:i]) == sum(arr[i + 1:]):\n            return i\n    return -1", "entry_point": "peak", "task_id": "TACO_lite/480", "input_output_examples": [[[[1, 2, 3, 5, 3, 2, 1]], [[1, 12, 3, 3, 6, 3, 1]], [[10, 20, 30, 40]]], [[3], [2], [-1]]]}
{"requirement": "def multiply(n, k):\n\"\"\"## Task\n\nGiven a positive integer, `n`, return the number of possible ways such that `k` positive integers multiply to `n`. Order matters.\n\n**Examples**\n```\nn = 24\nk = 2\n(1, 24), (2, 12), (3, 8), (4, 6), (6, 4), (8, 3), (12, 2), (24, 1) -> 8\n\nn = 100\nk = 1\n100 -> 1\n\nn = 20\nk = 3\n(1, 1, 20), (1, 2, 10), (1, 4, 5), (1, 5, 4), (1, 10, 2), (1, 20, 1),\n(2, 1, 10), (2, 2, 5), (2, 5, 2), (2, 10, 1), (4, 1, 5), (4, 5, 1),\n(5, 1, 4), (5, 2, 2), (5, 4, 1), (10, 1, 2), (10, 2, 1), (20, 1, 1) -> 18\n```\n**Constraints**\n`1 <= n <= 500_000_000`\nand `1 <= k <= 1000`\n\"\"\"", "inputs": [[24, 2], [100, 1], [20, 3], [1, 2], [1000000, 3], [10, 2], [36, 4]], "outputs": [[8], [1], [18], [1], [784], [4], [100]], "starter_code": "def multiply(n, k):", "canonical_solution": "from scipy.special import comb\n\ndef multiply(n, k):\n    r, d = (1, 2)\n    while d * d <= n:\n        i = 0\n        while n % d == 0:\n            i += 1\n            n //= d\n        r *= comb(i + k - 1, k - 1, exact=True)\n        d += 1\n    if n > 1:\n        r *= k\n    return r", "entry_point": "multiply", "task_id": "TACO_lite/481", "input_output_examples": [[[24, 2], [100, 1], [20, 3]], [[8], [1], [18]]]}
{"requirement": "def jumping_number(number):\n\"\"\"# Definition\n\n**_Jumping number_** is the number that *All adjacent digits in it differ by 1*.\n\n____\n\n# Task\n\n**_Given_** a number, **_Find if it is Jumping or not_** . \n____\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n* **_Number_** *passed is always*  **_Positive_** .\n\n* **_Return_** *the result as* **_String_** . \n\n* **_The difference between_** *‘9’ and ‘0’* is **_not considered as 1_** . \n\n* **_All single digit numbers_** are considered as **_Jumping numbers_**. \n___\n\n# Input >> Output Examples\n\n```\njumpingNumber(9) ==> return \"Jumping!!\"\n```\n## **_Explanation_**:\n\n* It's  **_single-digit number_** \n___\n\n```\njumpingNumber(79) ==> return \"Not!!\"\n```\n\n## **_Explanation_**:\n\n* *Adjacent digits* **_don't differ by 1_**\n___\n\n```\njumpingNumber(23) ==> return \"Jumping!!\"\n```\n\n## **_Explanation_**:\n\n* *Adjacent digits* **_differ by 1_**\n___\n\n```\njumpingNumber(556847) ==> return \"Not!!\"\n```\n\n## **_Explanation_**:\n\n* *Adjacent digits* **_don't differ by 1_**\n___\n\n```\njumpingNumber(4343456) ==> return \"Jumping!!\"\n```\n\n## **_Explanation_**:\n\n* *Adjacent digits* **_differ by 1_**\n___\n\n```\njumpingNumber(89098) ==> return \"Not!!\"\n```\n\n## **_Explanation_**:\n\n* *Adjacent digits* **_don't differ by 1_**\n___\n\n```\njumpingNumber(32) ==> return \"Jumping!!\"\n```\n\n## **_Explanation_**:\n\n* *Adjacent digits* **_differ by 1_**\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[1], [7], [9], [23], [32], [79], [98], [987654322]], "outputs": [["Jumping!!"], ["Jumping!!"], ["Jumping!!"], ["Jumping!!"], ["Jumping!!"], ["Not!!"], ["Jumping!!"], ["Not!!"]], "starter_code": "def jumping_number(number):", "canonical_solution": "def jumping_number(number):\n    arr = list(map(int, str(number)))\n    return ('Not!!', 'Jumping!!')[all(map(lambda a, b: abs(a - b) == 1, arr, arr[1:]))]", "entry_point": "jumping_number", "task_id": "TACO_lite/482", "input_output_examples": [[[9], [79], [23], [556847], [4343456], [89098], [32]], [["Jumping!!"], ["Not!!"], ["Jumping!!"], ["Not!!"], ["Jumping!!"], ["Not!!"], ["Jumping!!"]]]}
{"requirement": "def sumdig_nthterm(initVal, patternL, nthTerm):\n\"\"\"We have the first value of a certain sequence, we will name it ```initVal```.\nWe define  pattern list, ```patternL```, an array that has the differences between contiguous terms of the sequence.\n``` E.g: patternL = [k1, k2, k3, k4]``` \n\nThe terms of the sequence will be such values that:\n```python\nterm1 = initVal\nterm2 - term1 = k1\nterm3 - term2 = k2\nterm4 - term3 = k3\nterm5 - term4 = k4\nterm6 - term5 = k1\nterm7 - term6 = k2\nterm8 - term7 = k3\nterm9 - term8 = k4\n....  - ..... = ...\n....  - ..... = ...\n ``` \nSo the values of the differences between contiguous terms are cyclical and are  repeated as the differences values of the pattern list stablishes.\n\nLet's see an example with numbers:\n```python\ninitVal = 10\npatternL = [2, 1, 3]\nterm1 = 10\nterm2 = 12\nterm3 = 13\nterm4 = 16\nterm5 = 18\nterm6 = 19\nterm7 = 22  # and so on...\n```\nWe can easily obtain the next terms of the sequence following the values in the pattern list.\nWe see that the sixth term of the sequence, ```19```, has the sum of its digits ```10```.\n\nMake a function ```sumdig_nthterm()```, that receives three arguments in this order \n\n ```sumdig_nthterm(initVal, patternL, nthTerm(ordinal number of the term in the sequence)) ```\n\nThis function will output the sum of the digits of the n-th term of the sequence.\n\nLet's see some cases for this function:\n```python\nsumdig_nthterm(10, [2, 1, 3], 6) -----> 10 # because the sixth term is 19 sum of Dig = 1 + 9 = 10. The sequence up to the sixth-Term is: 10, 12, 13, 16, 18, 19\n\nsumdig_nthterm(10, [1, 2, 3], 15) ----> 10 # 37 is the 15-th term, and 3 + 7 = 10\n```\nEnjoy it and happy coding!!\n\"\"\"", "inputs": [[10, [2, 1, 3], 6], [10, [2, 1, 3], 15], [10, [2, 1, 3], 50], [10, [2, 1, 3], 78], [10, [2, 1, 3], 157], [10, [2, 2, 5, 8], 6], [10, [2, 2, 5, 8], 15], [10, [2, 2, 5, 8], 50], [10, [2, 2, 5, 8], 78], [10, [2, 2, 5, 8], 157], [100, [2, 2, 5, 8], 6], [100, [2, 2, 5, 8], 15], [100, [2, 2, 5, 8], 50], [100, [2, 2, 5, 8], 78], [100, [2, 2, 5, 8], 157], [1000, [2, 2, 5, 8], 2550], [1000, [2, 2, 5, 8], 25500]], "outputs": [[10], [10], [9], [10], [7], [11], [11], [9], [11], [16], [11], [11], [9], [11], [16], [14], [26]], "starter_code": "def sumdig_nthterm(initVal, patternL, nthTerm):", "canonical_solution": "from itertools import cycle\n\ndef sumdig_nthterm(initVal, patternL, nthTerm):\n    for c, i in enumerate(cycle(patternL), 2):\n        initVal += i\n        if c == nthTerm:\n            return sum((int(v) for v in str(initVal)))", "entry_point": "sumdig_nthterm", "task_id": "TACO_lite/483", "input_output_examples": [[[10, [2, 1, 3], 6], [10, [1, 2, 3], 15]], [[10], [10]]]}
{"requirement": "def kebabize(s):\n\"\"\"Modify the `kebabize` function so that it converts a camel case string into a kebab case.\n\nNotes:\n  - the returned string should only contain lowercase letters\n\"\"\"", "inputs": [["myCamelCasedString"], ["myCamelHas3Humps"], ["SOS"], ["42"], ["CodeWars"]], "outputs": [["my-camel-cased-string"], ["my-camel-has-humps"], ["s-o-s"], [""], ["code-wars"]], "starter_code": "def kebabize(s):", "canonical_solution": "def kebabize(s):\n    return ''.join((c if c.islower() else '-' + c.lower() for c in s if c.isalpha())).strip('-')", "entry_point": "kebabize", "task_id": "TACO_lite/484", "input_output_examples": [[["myCamelCasedString"]], [["my-camel-cased-string"]]]}
{"requirement": "def sum_times_tables(table, a, b):\n\"\"\"Write a function `sumTimesTables` which sums the result of the sums of the elements specified in `tables` multiplied by all the numbers in between `min` and `max` including themselves.\n\nFor example, for `sumTimesTables([2,5],1,3)` the result should be the same as\n```\n2*1 + 2*2 + 2*3 +\n5*1 + 5*2 + 5*3\n```\ni.e. the table of two from 1 to 3 plus the table of five from 1 to 3\n\nAll the numbers are integers but you must take in account:\n\n* `tables` could be empty.\n* `min` could be negative.\n* `max` could be really big.\n\"\"\"", "inputs": [[[2, 3], 1, 3], [[1, 3, 5], 1, 1], [[1, 3, 5], 1, 10], [[], 1, 10], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1, 10], [[5, 4, 7, 8, 9, 6, 3, 2, 10, 1], 1, 10], [[-2], -1, 3], [[-2, 2], -1, 3], [[-2, 3], -1, 3], [[2, -3], -1, 3], [[2, 4, 7], -100, 100], [[2, 4, 7], 1, 100], [[2, 4, 7], 1, 101]], "outputs": [[30], [9], [495], [0], [3025], [3025], [3025], [-10], [0], [5], [-5], [0], [65650], [66963]], "starter_code": "def sum_times_tables(table, a, b):", "canonical_solution": "def sum_times_tables(table, a, b):\n    return sum(table) * (a + b) * (b - a + 1) // 2", "entry_point": "sum_times_tables", "task_id": "TACO_lite/485", "input_output_examples": [[[[2, 5], 1, 3]], [[24]]]}
{"requirement": "def is_lock_ness_monster(s):\n\"\"\"You're on your way to the market when you hear beautiful music coming from a nearby street performer. The notes come together like you wouln't believe as the musician puts together patterns of tunes. As you wonder what kind of algorithm you could use to shift octaves by 8 pitches or something silly like that, it dawns on you that you have been watching the musician for some 10 odd minutes. You ask, \"How much do people normally tip for something like this?\" The artist looks up. \"Its always gonna be about tree fiddy.\"\n\nIt was then that you realize the musician was a 400 foot tall beast from the paleolithic era. The Loch Ness Monster almost tricked you!\n\n\nThere are only 2 guaranteed ways to tell if you are speaking to The Loch Ness Monster: A.) It is a 400 foot tall beast from the paleolithic era B.) It will ask you for tree fiddy\n\nSince Nessie is a master of disguise, the only way accurately tell is to look for the phrase \"tree fiddy\". Since you are tired of being grifted by this monster, the time has come to code a solution for finding The Loch Ness Monster.\nNote: It can also be written as 3.50 or three fifty.\n\"\"\"", "inputs": [["Your girlscout cookies are ready to ship. Your total comes to tree fiddy"], ["Howdy Pardner. Name's Pete Lexington. I reckon you're the kinda stiff who carries about tree fiddy?"], ["I'm from Scottland. I moved here to be with my family sir. Please, $3.50 would go a long way to help me find them"], ["Yo, I heard you were on the lookout for Nessie. Let me know if you need assistance."], ["I will absolutely, positively, never give that darn Lock Ness Monster any of my three dollars and fifty cents"], ["Did I ever tell you about my run with that paleolithic beast? He tried all sorts of ways to get at my three dolla and fitty cent? I told him 'this is MY 4 dolla!'. He just wouldn't listen."], ["Hello, I come from the year 3150 to bring you good news!"], ["By 'tree fiddy' I mean 'three fifty'"], ["I will be at the office by 3:50 or maybe a bit earlier, but definitely not before 3, to discuss with 50 clients"], [""]], "outputs": [[true], [true], [true], [false], [false], [false], [false], [true], [false], [false]], "starter_code": "def is_lock_ness_monster(s):", "canonical_solution": "def is_lock_ness_monster(s):\n    return any((i in s for i in ('tree fiddy', 'three fifty', '3.50')))", "entry_point": "is_lock_ness_monster", "task_id": "TACO_lite/486", "input_output_examples": [[["Your girlscout cookies are ready to ship. Your total comes to tree fiddy"]], [[true]]]}
{"requirement": "def valid_card(card):\n\"\"\"# Description\nWrite a function that checks whether a credit card number is correct or not, using the Luhn algorithm.\n\nThe algorithm is as follows:\n\n* From the rightmost digit, which is the check digit, moving left, double the value of every second digit; if the product of this doubling operation is greater than 9 (e.g., 8 × 2 = 16), then sum the digits of the products (e.g., 16: 1 + 6 = 7, 18: 1 + 8 = 9) or alternatively subtract 9 from the product (e.g., 16: 16 - 9 = 7, 18: 18 - 9 = 9).\n* Take the sum of all the digits.\n* If the total modulo 10 is equal to 0 (if the total ends in zero) then the number is valid according to the Luhn formula; else it is not valid.\n\nThe input is a string with the full credit card number, in groups of 4 digits separated by spaces, i.e. \"1234 5678 9012 3456\"  \nDon´t worry about wrong inputs, they will always be a string with 4 groups of 4 digits each separated by space.\n\n# Examples\n\n`valid_card?(\"5457 6238 9823 4311\") # True`\n\n`valid_card?(\"5457 6238 9323 4311\") # False`\n\nfor reference check: https://en.wikipedia.org/wiki/Luhn_algorithm\n\"\"\"", "inputs": [["5457 6238 9823 4311"], ["8895 6238 9323 4311"], ["5457 6238 5568 4311"], ["5457 6238 9323 4311"], ["2222 2222 2222 2224"], ["5457 1125 9323 4311"], ["1252 6238 9323 4311"], ["9999 9999 9999 9995"], ["0000 0300 0000 0000"], ["4444 4444 4444 4448"], ["5457 6238 9323 1252"], ["5457 6238 1251 4311"], ["3333 3333 3333 3331"], ["6666 6666 6666 6664"], ["5457 6238 0254 4311"], ["0000 0000 0000 0000"], ["5457 1111 9323 4311"], ["1145 6238 9323 4311"], ["8888 8888 8888 8888"], ["0025 2521 9323 4311"], ["1111 1111 1111 1117"], ["1234 5678 9012 3452"], ["5458 4444 9323 4311"], ["5457 6238 3333 4311"], ["0123 4567 8901 2345"], ["5555 5555 5555 5557"]], "outputs": [[true], [false], [false], [false], [true], [false], [false], [true], [false], [true], [false], [false], [true], [true], [false], [true], [false], [false], [true], [false], [true], [true], [false], [false], [false], [true]], "starter_code": "def valid_card(card):", "canonical_solution": "def valid_card(card):\n    s = list(map(int, str(card.replace(' ', ''))))\n    s[0::2] = [d * 2 - 9 if d * 2 > 9 else d * 2 for d in s[0::2]]\n    return sum(s) % 10 == 0", "entry_point": "valid_card", "task_id": "TACO_lite/487", "input_output_examples": [[["5457 6238 9823 4311"], ["5457 6238 9323 4311"]], [[true], [false]]]}
{"requirement": "def rounding(n, m):\n\"\"\"# Task\n Round the given number `n` to the nearest multiple of `m`.\n\n If `n` is exactly in the middle of 2 multiples of m, return `n` instead.\n\n# Example\n\n For `n = 20, m = 3`, the output should be `21`.\n\n For `n = 19, m = 3`, the output should be `18`.\n\n For `n = 50, m = 100`, the output should be `50`.\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n `1 ≤ n < 10^9.`\n\n\n - `[input]` integer `m`\n\n `3 ≤ m < 109`.\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[20, 3], [19, 3], [1, 10], [50, 100], [123, 456]], "outputs": [[21], [18], [0], [50], [0]], "starter_code": "def rounding(n, m):", "canonical_solution": "def rounding(n, m):\n    return n if n % m == m / 2 else m * round(n / m)", "entry_point": "rounding", "task_id": "TACO_lite/488", "input_output_examples": [[[20, 3], [19, 3], [50, 100]], [[21], [18], [50]]]}
{"requirement": "def extra_perfect(n):\n\"\"\"# Definition\n\n**_Extra perfect number_** *is the number that* **_first_** and **_last_** *bits* are **_set bits_**.\n\n____\n\n# Task\n\n**_Given_**  *a positive integer*   `N` ,  **_Return_** the **_extra perfect numbers_** *in range from*  `1`  to  `N` .\n____\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n\n* **_Number_** *passed is always*  **_Positive_** .\n\n* **_Returned array/list_** should *contain the extra perfect numbers in ascending order*  **from lowest to highest**\n___\n\n# Input >> Output Examples\n\n```\nextraPerfect(3)  ==>  return {1,3}\n```\n## **_Explanation_**:\n\n# (1)10 =(1)2\n\n**First** and **last** bits as **_set bits_**.\n\n# (3)10 = (11)2\n\n**First** and **last** bits as **_set bits_**.\n___\n\n```\nextraPerfect(7)  ==>  return {1,3,5,7}\n```\n\n## **_Explanation_**:\n\n# (5)10 = (101)2\n\n**First** and **last** bits as **_set bits_**.\n\n# (7)10 = (111)2\n\n**First** and **last** bits as **_set bits_**.\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[3], [5], [7], [28], [39]], "outputs": [[[1, 3]], [[1, 3, 5]], [[1, 3, 5, 7]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]]], "starter_code": "def extra_perfect(n):", "canonical_solution": "def extra_perfect(n):\n    return list(range(1, n + 1, 2))", "entry_point": "extra_perfect", "task_id": "TACO_lite/489", "input_output_examples": [[[3], [7]], [[1, 3], [1, 3, 5, 7]]]}
{"requirement": "def sum_prod(strexpression):\n\"\"\"Write a function that solves an algebraic expression given as a string. \n\n* The expression can include only sums and products. \n\n* The numbers in the expression are in standard notation (NOT scientific).\n\n* In contrast, the function should return a string with the calculated value given in scientific notation with 5 decimal digits. \n\n# Example:\n```python\nstrexpression = \"5 * 4 + 6\"\nsum_prod(strexpression) = \"2.60000e+01\"\n```\n\"\"\"", "inputs": [["5*4+6"], ["5+4*6"], ["3*8+6*5"], ["5*8+6*3*2"], ["5.4*4.0+6.2+8.0"], ["0.5*1.2*56+9.6*5*81+1"], ["1"], ["1.333333333*1.23456789+0.003*0.002"]], "outputs": [["2.60000e+01"], ["2.90000e+01"], ["5.40000e+01"], ["7.60000e+01"], ["3.58000e+01"], ["3.92260e+03"], ["1.00000e+00"], ["1.64610e+00"]], "starter_code": "def sum_prod(strexpression):", "canonical_solution": "def sum_prod(strexpression):\n    return '%.5e' % eval(strexpression)", "entry_point": "sum_prod", "task_id": "TACO_lite/490", "input_output_examples": [[["5 * 4 + 6"]], [["2.60000e+01"]]]}
{"requirement": "def totient(n):\n\"\"\"In number theory, Euler's totient is an arithmetic function, introduced in 1763 by Euler, that counts the positive integers less than or equal to `n` that are relatively prime to `n`. Thus, if `n` is a positive integer, then `φ(n)`, notation introduced by Gauss in 1801, is the number of positive integers `k ≤ n` for which `gcd(n, k) = 1`.  \nThe totient function is important in number theory, mainly because it gives the order of the multiplicative group of integers modulo `n`. The totient function also plays a key role in the definition of the RSA encryption system.\n\nFor example `let n = 9`.  \nThen `gcd(9, 3) = gcd(9, 6) = 3` and `gcd(9, 9) = 9`.  \nThe other six numbers in the range `1 ≤ k ≤ 9` i.e. `1, 2, 4, 5, 7, 8` are relatively prime to `9`.  \nTherefore, `φ(9) = 6`.  \nAs another example, `φ(1) = 1` since `gcd(1, 1) = 1`.\n\nThere are generally two approaches to this function:\n\n* Iteratively counting the numbers `k ≤ n` such that `gcd(n,k) = 1`.\n\n* Using the Euler product formula.  \n  This is an explicit formula for calculating `φ(n)` depending on the prime divisor of `n`:  \n  `φ(n) = n * Product (1 - 1/p)` where the product is taken over the primes `p ≤ n` that divide `n`.  \n  For example: `φ(36) = 36 * (1 - 1/2) * (1 - 1/3) = 36 * 1/2 * 2/3 = 12`.  \n  This second method seems more complex and not likely to be faster, but in practice we will often look for `φ(n)` with `n` prime. It correctly gives `φ(n) = n - 1` if `n` is prime. \n\nYou have to code the Euler totient function, that takes an integer `1 ≤ n` as input and returns `φ(n)`.\n\n```if:javascript\nYou do have to check if `n` is a number, is an integer and that `1 ≤ n`; if that is not the case, the function should return `0`.\n```\n\n```if:python\nYou do have to check if `n` is a number, is an integer and that `1 ≤ n`; if that is not the case, the function should return `0`.\n```\n\n```if:racket\n`n` is always a positive integer.\n```\n\nInput range: `1 ≤ n ≤ 1e10`\n\"\"\"", "inputs": [[15], [18], [19], [false], ["wow doge"], [0.0435]], "outputs": [[8], [6], [18], [0], [0], [0]], "starter_code": "def totient(n):", "canonical_solution": "def totient(n):\n    if not isinstance(n, int) or n < 1:\n        return 0\n    phi = n >= 1 and n\n    for p in range(2, int(n ** 0.5) + 1):\n        if not n % p:\n            phi -= phi // p\n            while not n % p:\n                n //= p\n    if n > 1:\n        phi -= phi // n\n    return phi", "entry_point": "totient", "task_id": "TACO_lite/491", "input_output_examples": [[[9], [1], [36], [15]], [[6], [1], [12], [8]]]}
{"requirement": "def is_orthogonal(u, v):\n\"\"\"Suppose I have two vectors: `(a1, a2, a3, ..., aN)` and `(b1, b2, b3, ..., bN)`. The dot product between these two vectors is defined as:\n\n```\na1*b1 + a2*b2 + a3*b3 + ... + aN*bN\n```\n\nThe vectors are classified as orthogonal if the dot product equals zero.\n\n\nComplete the function that accepts two sequences as inputs and returns `true` if the vectors are orthogonal, and `false` if they are not. The sequences will always be correctly formatted and of the same length, so there is no need to check them first.\n\n\n## Examples\n```\n[1, 1, 1], [2, 5, 7]        --> false\n[1, 0, 0, 1], [0, 1, 1, 0]  --> true\n```\n\"\"\"", "inputs": [[[1, 2], [2, 1]], [[1, -2], [2, 1]], [[7, 8], [7, -6]], [[-13, -26], [-8, 4]], [[1, 2, 3], [0, -3, 2]], [[3, 4, 5], [6, 7, -8]], [[3, -4, -5], [-4, -3, 0]], [[1, -2, 3, -4], [-4, 3, 2, -1]], [[2, 4, 5, 6, 7], [-14, -12, 0, 8, 4]], [[5, 10, 1, 20, 2], [-2, -20, -1, 10, 5]]], "outputs": [[false], [true], [false], [true], [true], [false], [true], [true], [true], [false]], "starter_code": "def is_orthogonal(u, v):", "canonical_solution": "def is_orthogonal(u, v):\n    return sum((i * j for i, j in zip(u, v))) == 0", "entry_point": "is_orthogonal", "task_id": "TACO_lite/492", "input_output_examples": [[[[1, 1, 1], [2, 5, 7]], [[1, 0, 0, 1], [0, 1, 1, 0]]], [[false], [true]]]}
{"requirement": "def sum_even_numbers(seq):\n\"\"\"# Task\n\nWrite a function named `sumEvenNumbers`, taking a sequence of numbers as single parameter. Your function must return the sum of **the even values** of this sequence.\n\nOnly numbers without decimals like `4` or `4.0` can be even. \n\n## Input\n* sequence of numbers: those numbers could be integers and/or floats. \n\n\nFor example, considering this input value : `[4,3,1,2,5,10,6,7,9,8]`, then your function should return `30` (because `4 + 2 + 10 + 6 + 8 = 30`).\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[]], [[1337, 374, 849, 22.5, 19, 16, 0, 0, 16, 32]], [[-16, -32, 20, 21, 41, 42]], [[15397, 12422, 10495, 22729, 23921, 18326, 27955, 24073, 23690, 15002, 11615, 15682, 24346, 16725, 17252, 20467, 20493, 17807, 13041, 25861, 22471, 22747, 24082, 18979, 28543, 26488, 10002, 24740, 17950, 26573, 25851, 19446, 22584, 14857, 17387, 29310, 28265, 19497, 11394, 28111, 20957, 17201, 26647, 26885, 27297, 17252, 25961, 12409, 22858, 27869, 19832, 13906, 11256, 11304, 24186, 28783, 16647, 23073, 11105, 13327, 17102, 10172, 21104, 23001, 24108, 16166, 21690, 14218, 11903, 10286, 19116, 18585, 25511, 18273, 11862, 17166, 13456, 28562, 16262, 11100, 22806, 14748, 17362, 11633, 17165, 16390, 24580, 22498, 26121, 16170, 18917, 26963, 17605, 20839, 22487, 12187, 23752, 12444, 14392, 28313]]], "outputs": [[30], [0], [438], [14], [870822]], "starter_code": "def sum_even_numbers(seq):", "canonical_solution": "def sum_even_numbers(seq):\n    return sum((n for n in seq if not n % 2))", "entry_point": "sum_even_numbers", "task_id": "TACO_lite/493", "input_output_examples": [[[[4, 3, 1, 2, 5, 10, 6, 7, 9, 8]]], [[30]]]}
{"requirement": "def max_collatz_length(limit):\n\"\"\"The Collatz conjecture is one of the most famous one. Take any positive integer n, if it is even divide it by 2, if it is odd multiply it by 3 and add 1 and continue indefinitely.The conjecture is that whatever is n the sequence will reach 1. There is many ways to approach this problem, each one of them had given beautifull graphs and impressive display of calculation power. The simplest approach can be found in this kata: http://www.codewars.com/kata/5286b2e162056fd0cb000c20\nYou look at the Collatz sequence of a number and see when it reaches 1.\n\nIn this kata we will take a look at the length of collatz sequences. And how they evolve. Write a function that take a positive integer n and return the number between 1 and n that has the maximum Collatz sequence length and the maximum length. The output has to take the form of an array [number, maxLength] For exemple the Collatz sequence of 4 is [4,2,1], 3 is [3,10,5,16,8,4,2,1], 2 is [2,1], 1 is [1], so `MaxCollatzLength(4)` should return `[3,8]`. If n is not a positive integer, the function have to return [].\n\n* As you can see, numbers in Collatz sequences may exceed n.\n\nThe last tests use random big numbers so you may consider some optimisation in your code:\n\n* You may get very unlucky and get only hard numbers: try submitting 2-3 times if it times out; if it still does, probably you need to optimize your code more;\n\n* Optimisation 1: when calculating the length of a sequence, if n is odd, what 3n+1 will be ?\n\n* Optimisation 2: when looping through 1 to n, take i such that i<n/2, what will be the lenght of the sequence for 2i ?\n\"\"\"", "inputs": [[0], [1], [4], [30], [1000], [1000000], ["a"], [-1], [["a"]]], "outputs": [[[]], [[1, 1]], [[3, 8]], [[27, 112]], [[871, 179]], [[837799, 525]], [[]], [[]], [[]]], "starter_code": "def max_collatz_length(limit):", "canonical_solution": "def max_collatz_length(limit):\n    if type(limit) != int or limit < 1:\n        return []\n    results = {1: 1}\n    for n in range(2, limit + 1):\n        count = 0\n        x = n\n        while x not in results:\n            x = x * 3 + 1 if x % 2 else x // 2\n            count += 1\n        count += results[x]\n        results[n] = count\n    sol = max(results, key=results.get)\n    return [sol, results[sol]]", "entry_point": "max_collatz_length", "task_id": "TACO_lite/494", "input_output_examples": [[[4]], [[3, 8]]]}
{"requirement": "def next_higher(value):\n\"\"\"Your task is to ___find the next higher number (int) with same '1'- Bits___.\n\nI.e. as much `1` bits as before and output next higher than input. Input is always an int in between 1 and 1<<30 (inclusive). No bad cases or special tricks... \n\n### Some easy examples:\n\n```\nInput: 129  => Output: 130 (10000001 => 10000010)\nInput: 127 => Output: 191 (01111111 => 10111111)\nInput: 1 => Output: 2 (01 => 10)\nInput: 323423 => Output: 323439 (1001110111101011111 => 1001110111101101111)\n```\n\nFirst some static tests, later on many random tests too;-)!\n\n### Hope you have fun! :-)\n\"\"\"", "inputs": [[128], [1], [1022], [127], [1253343]], "outputs": [[256], [2], [1279], [191], [1253359]], "starter_code": "def next_higher(value):", "canonical_solution": "def next_higher(value):\n    s = f'0{value:b}'\n    i = s.rfind('01')\n    s = s[:i] + '10' + ''.join(sorted(s[i + 2:]))\n    return int(s, 2)", "entry_point": "next_higher", "task_id": "TACO_lite/495", "input_output_examples": [[[129], [127], [1], [323423]], [[130], [191], [2], [323439]]]}
{"requirement": "def get_issuer(number):\n\"\"\"Given a credit card number we can determine who the issuer/vendor is with a few basic knowns.\n\n```if:python\nComplete the function `get_issuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if-not:python\nComplete the function `getIssuer()` that will use the values shown below to determine the card issuer for a given card number. If the number cannot be matched then the function should return the string `Unknown`.\n```\n```if:typescript\nWhere `Issuer` is defined with the following enum type.\n~~~typescript\nenum Issuer {\n  VISA = 'VISA',\n  AMEX = 'AMEX',\n  Mastercard = 'Mastercard',\n  Discover = 'Discover',\n  Unknown = 'Unknown',\n}\n~~~\n```\n\n```markdown\n| Card Type  | Begins With          | Number Length |\n|------------|----------------------|---------------|\n| AMEX       | 34 or 37             | 15            |\n| Discover   | 6011                 | 16            |\n| Mastercard | 51, 52, 53, 54 or 55 | 16            |\n| VISA       | 4                    | 13 or 16      |\n```\n\n```if:c,cpp\n**C/C++ note:** The return value in C is not freed.\n```\n\n## Examples\n\n```if-not:python\n~~~js\ngetIssuer(4111111111111111) == \"VISA\"\ngetIssuer(4111111111111) == \"VISA\"\ngetIssuer(4012888888881881) == \"VISA\"\ngetIssuer(378282246310005) == \"AMEX\"\ngetIssuer(6011111111111117) == \"Discover\"\ngetIssuer(5105105105105100) == \"Mastercard\"\ngetIssuer(5105105105105106) == \"Mastercard\"\ngetIssuer(9111111111111111) == \"Unknown\"\n~~~\n```\n```if:python\n~~~py\nget_issuer(4111111111111111) == \"VISA\"\nget_issuer(4111111111111) == \"VISA\"\nget_issuer(4012888888881881) == \"VISA\"\nget_issuer(378282246310005) == \"AMEX\"\nget_issuer(6011111111111117) == \"Discover\"\nget_issuer(5105105105105100) == \"Mastercard\"\nget_issuer(5105105105105106) == \"Mastercard\"\nget_issuer(9111111111111111) == \"Unknown\"\n~~~\n```\n\"\"\"", "inputs": [[4111111111111111], [4111111111111], [4012888888881881], [41111111111111], [411111111111111], [378282246310005], [348282246310005], [6011111111111117], [5105105105105100], [5105105105105106], [5205105105105106], [5305105105105106], [5405105105105106], [5505105105105106], [9111111111111111], [5605105105105106]], "outputs": [["VISA"], ["VISA"], ["VISA"], ["Unknown"], ["Unknown"], ["AMEX"], ["AMEX"], ["Discover"], ["Mastercard"], ["Mastercard"], ["Mastercard"], ["Mastercard"], ["Mastercard"], ["Mastercard"], ["Unknown"], ["Unknown"]], "starter_code": "def get_issuer(number):", "canonical_solution": "def get_issuer(number):\n    s = str(number)\n    return 'AMEX' if len(s) == 15 and s[:2] in ('34', '37') else 'Discover' if len(s) == 16 and s.startswith('6011') else 'Mastercard' if len(s) == 16 and s[0] == '5' and (s[1] in '12345') else 'VISA' if len(s) in [13, 16] and s[0] == '4' else 'Unknown'", "entry_point": "get_issuer", "task_id": "TACO_lite/496", "input_output_examples": [[[4111111111111111], [4111111111111], [4012888888881881], [378282246310005], [6011111111111117], [5105105105105100], [5105105105105106], [9111111111111111]], [["VISA"], ["VISA"], ["VISA"], ["AMEX"], ["Discover"], ["Mastercard"], ["Mastercard"], ["Unknown"]]]}
{"requirement": "def circular_prime(n):\n\"\"\"_Based on [Project Euler problem 35](https://projecteuler.net/problem=35)_\n\nA circular prime is a prime in which every circular permutation of that number is also prime. Circular permutations are created by rotating the digits of the number, for example: `197, 971, 719`. One-digit primes are circular primes by definition.\n\nComplete the function that dertermines if a number is a circular prime.\n\nThere are 100 random tests for numbers up to 10000.\n\"\"\"", "inputs": [[197], [179], [971], [222], [9377], [7], [213], [35], [1]], "outputs": [[true], [false], [true], [false], [true], [true], [false], [false], [false]], "starter_code": "def circular_prime(n):", "canonical_solution": "def circular_permutations(n):\n    n = str(n)\n    return [int(n[i:] + n[:i]) for i in range(len(n))]\n\ndef is_prime(n):\n    return n > 1 and all((n % i != 0 for i in range(2, int(n ** 0.5) + 1)))\n\ndef circular_prime(n):\n    return all((is_prime(x) for x in circular_permutations(n)))", "entry_point": "circular_prime", "task_id": "TACO_lite/497", "input_output_examples": [[[197]], [[true]]]}
{"requirement": "def day_and_time(mins):\n\"\"\"###Instructions\n\nWrite a function that takes a negative or positive integer, which represents the number of minutes before (-) or after (+) Sunday midnight, and returns the current day of the week and the current time in 24hr format ('hh:mm') as a string. \n\n```python\nday_and_time(0)       should return 'Sunday 00:00'\nday_and_time(-3)      should return 'Saturday 23:57'\nday_and_time(45)      should return 'Sunday 00:45'\nday_and_time(759)     should return 'Sunday 12:39'\nday_and_time(1236)    should return 'Sunday 20:36'\nday_and_time(1447)    should return 'Monday 00:07'\nday_and_time(7832)    should return 'Friday 10:32'\nday_and_time(18876)   should return 'Saturday 02:36'\nday_and_time(259180)  should return 'Thursday 23:40' \nday_and_time(-349000) should return 'Tuesday 15:20'\n```\n\"\"\"", "inputs": [[0], [-3], [45], [759], [1236], [1447], [7832], [18876], [259180], [-349000]], "outputs": [["Sunday 00:00"], ["Saturday 23:57"], ["Sunday 00:45"], ["Sunday 12:39"], ["Sunday 20:36"], ["Monday 00:07"], ["Friday 10:32"], ["Saturday 02:36"], ["Thursday 23:40"], ["Tuesday 15:20"]], "starter_code": "def day_and_time(mins):", "canonical_solution": "from datetime import timedelta, datetime\n\ndef day_and_time(mins):\n    return '{:%A %H:%M}'.format(datetime(2017, 1, 1) + timedelta(minutes=mins))", "entry_point": "day_and_time", "task_id": "TACO_lite/498", "input_output_examples": [[[0], [-3], [45], [759], [1236], [1447], [7832], [18876], [259180], [-349000]], [["Sunday 00:00"], ["Saturday 23:57"], ["Sunday 00:45"], ["Sunday 12:39"], ["Sunday 20:36"], ["Monday 00:07"], ["Friday 10:32"], ["Saturday 02:36"], ["Thursday 23:40"], ["Tuesday 15:20"]]]}
{"requirement": "def high(x):\n\"\"\"Given a string of words, you need to find the highest scoring word.\n\nEach letter of a word scores points according to its position in the alphabet: `a = 1, b = 2, c = 3` etc.\n\nYou need to return the highest scoring word as a string.\n\nIf two words score the same, return the word that appears earliest in the original string.\n\nAll letters will be lowercase and all inputs will be valid.\n\"\"\"", "inputs": [["man i need a taxi up to ubud"], ["what time are we climbing up the volcano"], ["take me to semynak"], ["massage yes massage yes massage"], ["take two bintang and a dance please"]], "outputs": [["taxi"], ["volcano"], ["semynak"], ["massage"], ["bintang"]], "starter_code": "def high(x):", "canonical_solution": "def high(x):\n    return max(x.split(), key=lambda k: sum((ord(c) - 96 for c in k)))", "entry_point": "high", "task_id": "TACO_lite/499", "input_output_examples": [[["man i need a taxi up to ubud"]], [["taxi"]]]}
{"requirement": "def next_happy_year(year):\n\"\"\"# Scenario \n\n*You're saying good-bye your best friend* , **_See you next happy year_** . \n\n**_Happy Year_** *is the year with only distinct digits* , (e.g) **_2018_**\n\n___\n# Task\n\n**_Given_** a year, **_Find_** **_The next happy year_** or **_The closest year You'll see your best friend_**      ![!alt](https://i.imgur.com/mdX8dJP.png) ![!alt](https://i.imgur.com/mdX8dJP.png)\n\n___\n# Notes\n\n* **_Year_** Of Course always **_Positive_** .\n* **_Have no fear_** , *It is guaranteed that the answer exists* . \n* **_It's not necessary_** *that the year passed to the function is Happy one* .   \n* **_Input Year with in range_** *(1000  ≤  y  ≤  9000)*\n\n____\n# Input >> Output Examples:\n\n```\nnextHappyYear (7712) ==> return (7801)\n```\n\n## **_Explanation_**:\n\nAs the **_Next closest year with only distinct digits is_**  *7801* . \n___\n\n```\nnextHappyYear (8989) ==> return (9012)\n```\n\n## **_Explanation_**:\n\nAs the **_Next closest year with only distinct digits is_**  *9012* . \n___\n\n```\nnextHappyYear (1001) ==> return (1023)\n```\n\n## **_Explanation_**:\n\nAs the **_Next closest year with only distinct digits is_**  *1023* .\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[1001], [1123], [2001], [2334], [3331], [1987], [5555], [7712], [8088], [8999]], "outputs": [[1023], [1203], [2013], [2340], [3401], [2013], [5601], [7801], [8091], [9012]], "starter_code": "def next_happy_year(year):", "canonical_solution": "def next_happy_year(year):\n    year += 1\n    while len(set(str(year))) != 4:\n        year += 1\n    return year", "entry_point": "next_happy_year", "task_id": "TACO_lite/500", "input_output_examples": [[[7712], [8989], [1001]], [[7801], [9012], [1023]]]}
{"requirement": "def mobius(n):\n\"\"\"# Task\n Mobius function - an important function in number theory. For each given n, it only has 3 values:\n```\n0  -- if n divisible by square of a prime. Such as: 4, 8, 9\n1  -- if n not divisible by any square of a prime \n        and have even number of prime factor. Such as: 6, 10, 21\n-1 -- otherwise. Such as: 3, 5, 7, 30```\nYour task is to find mobius(`n`)\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n\n `2 <= n <= 1e12`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[10], [9], [8], [100000000001], [7], [5]], "outputs": [[1], [0], [0], [0], [-1], [-1]], "starter_code": "def mobius(n):", "canonical_solution": "def mobius(n):\n    sP, p = (set(), 2)\n    while n > 1 and p <= n ** 0.5:\n        while not n % p:\n            if p in sP:\n                return 0\n            sP.add(p)\n            n //= p\n        p += 1 + (p != 2)\n    return (-1) ** ((len(sP) + (n != 1)) % 2)", "entry_point": "mobius", "task_id": "TACO_lite/501", "input_output_examples": [[[10]], [[1]]]}
{"requirement": "def best_match(goals1, goals2):\n\"\"\"# Task\n \"AL-AHLY\" and \"Zamalek\" are the best teams in Egypt, but \"AL-AHLY\" always wins the matches between them. \"Zamalek\" managers want to know what is the best match they've played so far.\n \n The best match is the match they lost with the minimum goal difference. If there is more than one match with the same difference, choose the one \"Zamalek\" scored more goals in.\n \n Given the information about all matches they played, return the `index` of the best match (`0-based`). If more than one valid result, return the smallest index.\n\n# Example\n\n For `ALAHLYGoals = [6,4] and zamalekGoals = [1,2]`, the output should be 1.\n \n Because `4 - 2` is less than `6 - 1`\n \n For `ALAHLYGoals = [1,2,3,4,5] and zamalekGoals = [0,1,2,3,4]`, the output should be 4.\n \n The goal difference of all matches are 1, but at 4th match \"Zamalek\" scored more goals in. So the result is `4`.\n \n# Input/Output\n\n\n -  `[input]` integer array `ALAHLYGoals`\n\n  The number of goals \"AL-AHLY\" scored in each match.\n\n\n - `[input]` integer array `zamalekGoals`\n\n  The number of goals \"Zamalek\" scored in each match. It is guaranteed that zamalekGoals[i] < ALAHLYGoals[i] for each element.\n\n\n - `[output]` an integer\n\n  Index of the best match.\n\"\"\"", "inputs": [[[6, 4], [1, 2]], [[1], [0]], [[1, 2, 3, 4, 5], [0, 1, 2, 3, 4]], [[3, 4, 3], [1, 1, 2]], [[4, 3, 4], [1, 1, 1]]], "outputs": [[1], [0], [4], [2], [1]], "starter_code": "def best_match(goals1, goals2):", "canonical_solution": "def best_match(goals1, goals2):\n    return min(((a - b, -b, i) for i, (a, b) in enumerate(zip(goals1, goals2))))[2]", "entry_point": "best_match", "task_id": "TACO_lite/502", "input_output_examples": [[[[6, 4], [1, 2]], [[1, 2, 3, 4, 5], [0, 1, 2, 3, 4]]], [[1], [4]]]}
{"requirement": "def get_average(marks):\n\"\"\"It's the academic year's end, fateful moment of your school report.\nThe averages must be calculated. All the students come to you and entreat you to calculate their average for them.\nEasy ! You just need to write a script.\n\nReturn the average of the given array rounded **down** to its nearest integer.\n\nThe array will never be empty.\n\"\"\"", "inputs": [[[2, 2, 2, 2]], [[1, 5, 87, 45, 8, 8]], [[2, 5, 13, 20, 16, 16, 10]], [[1, 2, 15, 15, 17, 11, 12, 17, 17, 14, 13, 15, 6, 11, 8, 7]]], "outputs": [[2], [25], [11], [11]], "starter_code": "def get_average(marks):", "canonical_solution": "def get_average(marks):\n    return sum(marks) // len(marks)", "entry_point": "get_average", "task_id": "TACO_lite/503", "input_output_examples": [[[[2, 2, 2, 2]]], [[2]]]}
{"requirement": "def matrix_mult(a, b):\n\"\"\"Write a function that accepts two square (`NxN`) matrices (two dimensional arrays), and returns the product of the two. Only square matrices will be given.\n\nHow to multiply two square matrices: \n\nWe are given two matrices, A and B, of size 2x2 (note: tests are not limited to 2x2). Matrix C, the solution, will be equal to the product of A and B. To fill in cell `[0][0]` of matrix C, you need to compute: `A[0][0] * B[0][0] + A[0][1] * B[1][0]`.\n\nMore general: To fill in cell `[n][m]` of matrix C, you need to first multiply the elements in the nth row of matrix A by the elements in the mth column of matrix B, then take the sum of all those products. This will give you the value for cell `[m][n]` in matrix C. \n\n## Example\n```\n  A         B          C\n|1 2|  x  |3 2|  =  | 5 4|\n|3 2|     |1 1|     |11 8|\n```\n\nDetailed calculation:\n```\nC[0][0] = A[0][0] * B[0][0] + A[0][1] * B[1][0] = 1*3 + 2*1 =  5\nC[0][1] = A[0][0] * B[0][1] + A[0][1] * B[1][1] = 1*2 + 2*1 =  4\nC[1][0] = A[1][0] * B[0][0] + A[1][1] * B[1][0] = 3*3 + 2*1 = 11\nC[1][1] = A[1][0] * B[0][1] + A[1][1] * B[1][1] = 3*2 + 2*1 =  8\n```\nLink to Wikipedia explaining matrix multiplication (look at the square matrix example): \nhttp://en.wikipedia.org/wiki/Matrix_multiplication\n\nA more visual explanation of matrix multiplication: http://matrixmultiplication.xyz\n\n~~~if:c\n**Note:** In **C**, the dimensions of both square matrices `n` will be passed into your function.  However, since the dimensions of your returned \"matrix\" is expected to be the same as that of the inputs, you will not need to keep track of the dimensions of your matrix in another variable.\n~~~\n\"\"\"", "inputs": [[[[1, 2], [3, 2]], [[3, 2], [1, 1]]], [[[9, 7], [0, 1]], [[1, 1], [4, 12]]], [[[1, 2, 3], [3, 2, 1], [2, 1, 3]], [[4, 5, 6], [6, 5, 4], [4, 6, 5]]]], "outputs": [[[[5, 4], [11, 8]]], [[[37, 93], [4, 12]]], [[[28, 33, 29], [28, 31, 31], [26, 33, 31]]]], "starter_code": "def matrix_mult(a, b):", "canonical_solution": "from numpy import matrix\n\ndef matrix_mult(a, b):\n    return (matrix(a) * matrix(b)).tolist()", "entry_point": "matrix_mult", "task_id": "TACO_lite/504", "input_output_examples": [[[[[1, 2], [3, 2]], [[3, 2], [1, 1]]]], [[[[5, 4], [11, 8]]]]]}
{"requirement": "def to_leet_speak(str):\n\"\"\"```if-not:rust\nYour task is to write a function `toLeetSpeak` that converts a regular english sentence to Leetspeak.\n```\n```if:rust\nYour task is to write a function `to_leet_speak` that converts a regular english sentence to Leetspeak.\n```\n\nMore about LeetSpeak You can read at wiki -> https://en.wikipedia.org/wiki/Leet\n\nConsider only uppercase letters (no lowercase letters, no numbers) and spaces.\n\nFor example:\n\n```if-not:rust\n~~~\ntoLeetSpeak(\"LEET\") returns \"1337\"\n~~~\n```\n```if:rust\n~~~\nto_leet_speak(\"LEET\") returns \"1337\"\n~~~\n```\n\nIn this kata we use a simple LeetSpeak dialect. Use this alphabet:\n\n```\n{\n  A : '@',\n  B : '8',\n  C : '(',\n  D : 'D',\n  E : '3',\n  F : 'F',\n  G : '6',\n  H : '#',\n  I : '!',\n  J : 'J',\n  K : 'K',\n  L : '1',\n  M : 'M',\n  N : 'N',\n  O : '0',\n  P : 'P',\n  Q : 'Q',\n  R : 'R',\n  S : '$',\n  T : '7',\n  U : 'U',\n  V : 'V',\n  W : 'W',\n  X : 'X',\n  Y : 'Y',\n  Z : '2'\n}\n```\n\"\"\"", "inputs": [["LEET"], ["CODEWARS"], ["HELLO WORLD"], ["LOREM IPSUM DOLOR SIT AMET"], ["THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG"]], "outputs": [["1337"], ["(0D3W@R$"], ["#3110 W0R1D"], ["10R3M !P$UM D010R $!7 @M37"], ["7#3 QU!(K 8R0WN F0X JUMP$ 0V3R 7#3 1@2Y D06"]], "starter_code": "def to_leet_speak(str):", "canonical_solution": "def to_leet_speak(str):\n    return str.translate(str.maketrans('ABCEGHILOSTZ', '@8(36#!10$72'))", "entry_point": "to_leet_speak", "task_id": "TACO_lite/505", "input_output_examples": [[["LEET"]], [["1337"]]]}
{"requirement": "def nth_fib(n):\n\"\"\"I love Fibonacci numbers in general, but I must admit I love some more than others. \n\nI would like for you to write me a function that when given a number (n)  returns the n-th number in the Fibonacci Sequence.\n\nFor example:\n\n```python\n   nth_fib(4) == 2\n```\n\nBecause 2 is the 4th number in the Fibonacci Sequence.\n\nFor reference, the first two numbers in the Fibonacci sequence are 0 and 1, and each subsequent number is the sum of the previous two.\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [13], [14], [15], [16], [17], [18], [19], [20], [21], [22], [23], [24], [25]], "outputs": [[0], [1], [1], [2], [3], [5], [8], [13], [21], [34], [55], [89], [144], [233], [377], [610], [987], [1597], [2584], [4181], [6765], [10946], [17711], [28657], [46368]], "starter_code": "def nth_fib(n):", "canonical_solution": "def nth_fib(n):\n    a, b = (0, 1)\n    for i in range(n - 1):\n        a, b = (b, a + b)\n    return a", "entry_point": "nth_fib", "task_id": "TACO_lite/506", "input_output_examples": [[[4], [1]], [[2], [0]]]}
{"requirement": "def penaltyshots(shots, score):\n\"\"\"# Task\nYou are a lifelong fan of your local football club, and proud to say you rarely miss a game. Even though you're a superfan, you still hate boring games. Luckily, boring games often end in a draw, at which point the winner is determined by a penalty shoot-out, which brings some excitement to the viewing experience. Once, in the middle of a penalty shoot-out, you decided to count the lowest total number of shots required to determine the winner. So, given the number of shots each team has already made and the current score, `how soon` can the game end?\n\nIf you are not familiar with penalty shoot-out rules, here they are:\n\n`Teams take turns to kick from the penalty mark until each has taken five kicks. However, if one side has scored more successful kicks than the other could possibly reach with all of its remaining kicks, the shoot-out immediately ends regardless of the number of kicks remaining.`\n\n`If at the end of these five rounds of kicks the teams have scored an equal number of successful kicks, additional rounds of one kick each will be used until the tie is broken.`\n\n\n\n# Input/Output\n\n\n`[input]` integer `shots`\n\nAn integer, the number of shots each team has made thus far.\n\n`0 ≤ shots ≤ 100.`\n\n`[input]` integer array `score`\n\nAn array of two integers, where score[0] is the current score of the first team and score[1] - of the second team.\n\n`score.length = 2,`\n\n`0 ≤ score[i] ≤ shots.`\n\n`[output]` an integer\n\nThe minimal possible total number of shots required to determine the winner.\n\n\n# Example\n\nFor `shots = 2 and score = [1, 2]`, the output should be `3`.\n\nThe possible 3 shots can be: \n```\nshot1: the first team misses the penalty\nshot2: the second team scores\nshot3: the first one misses again```\n\nthen, score will be [1, 3]. As the first team can't get 2 more points in the last remaining shot until the end of the initial five rounds, the winner is determined.\n\nFor `shots = 10 and score = [10, 10]`, the output should be `2`.\n\nIf one of the teams misses the penalty and the other one scores, the game ends.\n\"\"\"", "inputs": [[2, [1, 2]], [10, [10, 10]], [5, [5, 5]], [0, [0, 0]], [1, [0, 0]], [1, [0, 1]], [1, [1, 1]], [3, [3, 3]], [3, [1, 3]], [100, [100, 100]]], "outputs": [[3], [2], [2], [6], [5], [4], [5], [3], [1], [2]], "starter_code": "def penaltyshots(shots, score):", "canonical_solution": "def penaltyshots(shots, score):\n    return (2 if shots > 4 else 5 - shots + 1) - abs(score[0] - score[1])", "entry_point": "penaltyshots", "task_id": "TACO_lite/507", "input_output_examples": [[[2, [1, 2]], [10, [10, 10]]], [[3], [2]]]}
{"requirement": "def create_octahedron(size):\n\"\"\"# YOUR MISSION\n\nAn [octahedron](https://en.wikipedia.org/wiki/Octahedron) is an 8-sided polyhedron whose faces are triangles. \n\nCreate a method that outputs a 3-dimensional array of an octahedron in which the height, width, and depth are equal to the provided integer `size`, which is equal to the length from one vertex to the opposite vertex on the octahedron.\n\n## EXAMPLE\n\n```python\ncreate_octahedron(7)\n\n[\n    [[0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0]],\n    \n    [[0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0]],\n     \n    [[0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 1, 1, 1, 1, 1, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0]],\n    \n    [[0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 1, 1, 1, 1, 1, 0],\n     [1, 1, 1, 1, 1, 1, 1],\n     [0, 1, 1, 1, 1, 1, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0]],\n     \n    [[0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 1, 1, 1, 1, 1, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0]],\n     \n    [[0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 1, 1, 1, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0]],\n     \n    [[0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 1, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 0, 0]]\n]\n```\n\nwhere each 1 represents a cubic unit that the octahedron takes up and where 0 is a cubic unit of empty space.\n\n# NOTES\n\n - The method should return an empty array/list if either \n  - The input size is even (because then it wouldn't be an octahedron. It'd be an irregular polyhedron with 26 sides)\n  - if the input size is 0 or less\n  - if input size is 1 (that's called a cube).\n - If there's any problems with this kata (*COUGH* [my last Kata](https://www.codewars.com/kata/5bf76f953efcee37e2000061) *COUGH*), I'll try to get them fixed in the evenings before 10pm.\n\"\"\"", "inputs": [[7], [0], [-7]], "outputs": [[[[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]]], [[]], [[]]], "starter_code": "def create_octahedron(size):", "canonical_solution": "def create_octahedron(size):\n    if size <= 1 or size % 2 == 0:\n        return []\n    m = size // 2\n    return [[[int(abs(x - m) + abs(y - m) + abs(z - m) <= m) for z in range(size)] for y in range(size)] for x in range(size)]", "entry_point": "create_octahedron", "task_id": "TACO_lite/508", "input_output_examples": [[[7], [7], [7], [7], [7], [7], [7], [7], [7]], [[[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]], [[[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]]]]]}
{"requirement": "def ellipse(a, b):\n\"\"\"# Task:\n\nBased on the received dimensions, `a` and `b`, of an ellipse, calculare its area and perimeter.\n\n## Example:\n```python\nInput: ellipse(5,2)\n\nOutput: \"Area: 31.4, perimeter: 23.1\"\n```\n\n**Note:** The perimeter approximation formula you should use: `π * (3/2(a+b) - sqrt(ab))`\n\n___\n\n## Have fun :)\n\"\"\"", "inputs": [[5, 2], [6, 8], [13, 1]], "outputs": [["Area: 31.4, perimeter: 23.1"], ["Area: 150.8, perimeter: 44.2"], ["Area: 40.8, perimeter: 54.6"]], "starter_code": "def ellipse(a, b):", "canonical_solution": "from math import pi\n\ndef ellipse(a, b):\n    return f'Area: {pi * a * b:.1f}, perimeter: {pi * (1.5 * (a + b) - (a * b) ** 0.5):.1f}'", "entry_point": "ellipse", "task_id": "TACO_lite/509", "input_output_examples": [[[5, 2]], [["Area: 31.4, perimeter: 23.1"]]]}
{"requirement": "def find_the_ball(start, swaps):\n\"\"\"\"The Shell Game\" involves cups upturned on a playing surface, with a ball placed underneath one of them.  The index of the cups are swapped around multiple times. After that the players will try to find which cup contains the ball.\n\nYour task is as follows.  Given the cup that the ball starts under, and list of swaps, return the location of the ball at the end.  Cups are given like array/list indices.\n\nFor example, given the starting position `0` and the swaps `[(0, 1), (1, 2), (1, 0)]`:\n\n * The first swap moves the ball from `0` to `1`\n * The second swap moves the ball from `1` to `2`\n * The final swap doesn't affect the position of the ball.\n \n So\n\n```python\nfind_the_ball(0, [(0, 1), (2, 1), (0, 1)]) == 2\n```\n\nThere aren't necessarily only three cups in this game, but there will be at least two.  You can assume all swaps are valid, and involve two distinct indices.\n\"\"\"", "inputs": [[5, []], [0, []], [9, []], [0, [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [9, 10], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39], [39, 40], [40, 41], [41, 42], [42, 43], [43, 44], [44, 45], [45, 46], [46, 47], [47, 48], [48, 49], [49, 50], [50, 51], [51, 52], [52, 53], [53, 54], [54, 55], [55, 56], [56, 57], [57, 58], [58, 59], [59, 60], [60, 61], [61, 62], [62, 63], [63, 64], [64, 65], [65, 66], [66, 67], [67, 68], [68, 69], [69, 70], [70, 71], [71, 72], [72, 73], [73, 74], [74, 75], [75, 76], [76, 77], [77, 78], [78, 79], [79, 80], [80, 81], [81, 82], [82, 83], [83, 84], [84, 85], [85, 86], [86, 87], [87, 88], [88, 89], [89, 90], [90, 91], [91, 92], [92, 93], [93, 94], [94, 95], [95, 96], [96, 97], [97, 98], [98, 99], [99, 100], [100, 101]]], [0, [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], [12, 11], [13, 12], [14, 13], [15, 14], [16, 15], [17, 16], [18, 17], [19, 18], [20, 19], [21, 20], [22, 21], [23, 22], [24, 23], [25, 24], [26, 25], [27, 26], [28, 27], [29, 28], [30, 29], [31, 30], [32, 31], [33, 32], [34, 33], [35, 34], [36, 35], [37, 36], [38, 37], [39, 38], [40, 39], [41, 40], [42, 41], [43, 42], [44, 43], [45, 44], [46, 45], [47, 46], [48, 47], [49, 48], [50, 49], [51, 50], [52, 51], [53, 52], [54, 53], [55, 54], [56, 55], [57, 56], [58, 57], [59, 58], [60, 59], [61, 60], [62, 61], [63, 62], [64, 63], [65, 64], [66, 65], [67, 66], [68, 67], [69, 68], [70, 69], [71, 70], [72, 71], [73, 72], [74, 73], [75, 74], [76, 75], [77, 76], [78, 77], [79, 78], [80, 79], [81, 80], [82, 81], [83, 82], [84, 83], [85, 84], [86, 85], [87, 86], [88, 87], [89, 88], [90, 89], [91, 90], [92, 91], [93, 92], [94, 93], [95, 94], [96, 95], [97, 96], [98, 97], [99, 98], [100, 99], [101, 100]]]], "outputs": [[5], [0], [9], [101], [101]], "starter_code": "def find_the_ball(start, swaps):", "canonical_solution": "def find_the_ball(start, swaps):\n    pos = start\n    for a, b in swaps:\n        if a == pos:\n            pos = b\n        elif b == pos:\n            pos = a\n    return pos", "entry_point": "find_the_ball", "task_id": "TACO_lite/510", "input_output_examples": [[[0, [[0, 1], [2, 1], [0, 1]]]], [[2]]]}
{"requirement": "def covered_pawns(pawns):\n\"\"\"Given a list of white pawns on a chessboard (any number of them, meaning from 0 to 64 and with the possibility to be positioned everywhere), determine how many of them have their backs covered by another. \nPawns attacking upwards since we have only white ones.\n\nPlease remember that a pawn attack(and defend as well) only the 2 square on the sides in front of him. https://en.wikipedia.org/wiki/Pawn_(chess)#/media/File:Pawn_(chess)_movements.gif\n\nThis is how the chess board coordinates are defined:\nABCDEFGH8♜♞♝♛♚♝♞♜7♟♟♟♟♟♟♟♟65432♙♙♙♙♙♙♙♙1♖♘♗♕♔♗♘♖\n\"\"\"", "inputs": [[["f7", "b1", "h1", "c7", "h7"]], [["e5", "b2", "b4", "g4", "a1", "a5"]], [["a2", "b1", "c2"]], [["a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "g1", "g2", "g3", "g4", "g5", "g6", "g7", "g8", "h1", "h2", "h3", "h4", "h5", "h6", "h7", "h8"]], [[]]], "outputs": [[0], [2], [2], [56], [0]], "starter_code": "def covered_pawns(pawns):", "canonical_solution": "def covered_pawns(pawns):\n    pawns = set(pawns)\n    return len({p for p in pawns for x, y in [map(ord, p)] if {chr(x - 1) + chr(y - 1), chr(x + 1) + chr(y - 1)} & pawns})", "entry_point": "covered_pawns", "task_id": "TACO_lite/511", "input_output_examples": [[[["f7", "b1", "h1", "c7", "h7"]]], [[0]]]}
{"requirement": "def oddity(n):\n\"\"\"Given an integer `n` return `\"odd\"` if the number of its divisors is odd. Otherwise return `\"even\"`.\n\n**Note**: big inputs will be tested.\n\n## Examples:\n\nAll prime numbers have exactly two divisors (hence `\"even\"`).\n\nFor `n = 12` the divisors are `[1, 2, 3, 4, 6, 12]` – `\"even\"`.\n\nFor `n = 4` the divisors are `[1, 2, 4]` – `\"odd\"`.\n\"\"\"", "inputs": [[1], [5], [16], [27], [121]], "outputs": [["odd"], ["even"], ["odd"], ["even"], ["odd"]], "starter_code": "def oddity(n):", "canonical_solution": "def oddity(n):\n    return 'odd' if n ** 0.5 == int(n ** 0.5) else 'even'", "entry_point": "oddity", "task_id": "TACO_lite/512", "input_output_examples": [[[12], [4]], [["even"], ["odd"]]]}
{"requirement": "def get_percentage(sent, limit=1000):\n\"\"\"Every day we can send from the server a certain limit of e-mails.\n\nTask:\nWrite a function that will return the integer number of e-mails sent in the percentage of the limit.\n\nExample:\n```\nlimit       - 1000;\nemails sent - 101;\nreturn      - 10%; // becouse integer from 10,1 = 10\n```\n\nArguments:\n\nInteger, limit;\nInteger, number of e-mails sent today;\n\nWhen:\n\nthe argument ```$sent = 0```, then return the message: \"No e-mails sent\";\nthe argument ```$sent >= $limit```, then return the message: \"Daily limit is reached\";\nthe argument ```$limit is empty```, then default ```$limit = 1000``` emails;\n\nGood luck!\n\"\"\"", "inputs": [[101, 1000], [256, 500], [259], [0], [1000, 1000]], "outputs": [["10%"], ["51%"], ["25%"], ["No e-mails sent"], ["Daily limit is reached"]], "starter_code": "def get_percentage(sent, limit=1000):", "canonical_solution": "def get_percentage(sent, limit=1000):\n    if not sent:\n        return 'No e-mails sent'\n    elif sent >= limit:\n        return 'Daily limit is reached'\n    return '{}%'.format(int(sent * 100 / limit))", "entry_point": "get_percentage", "task_id": "TACO_lite/513", "input_output_examples": [[[101, 1000], [0, 1000], [1000, 1000], [1200, 1000], [500]], [["10%"], ["No e-mails sent"], ["Daily limit is reached"], ["Daily limit is reached"], ["50%"]]]}
{"requirement": "def binary_pyramid(m, n):\n\"\"\"Given two numbers (m and n) :\n\n- convert all numbers from m to n to binary\n- sum them as if they were in base 10 \n- convert the result to binary\n- return as string\n\nEg: with the numbers 1 and 4\n\n\n   1 // 1 to binary is 1\n+ 10 // 2 to binary is 10\n+ 11 // 3 to binary is 11\n+100 // 4 to binary is 100\n----\n 122 // 122 in Base 10 to Binary is 1111010\n\n\n\nSo BinaryPyramid ( 1 , 4 ) should return \"1111010\" \n\nrange should be ascending in order\n\"\"\"", "inputs": [[1, 4], [1, 6], [6, 20], [21, 60], [100, 100], [1, 1], [0, 1], [0, 0], [1, 100], [100, 1000]], "outputs": [["1111010"], ["101001101"], ["1110010110100011"], ["1100000100010001010100"], ["100001100100101000100"], ["1"], ["1"], ["0"], ["10011101010010110000101010"], ["111111001111110110011011000101110101110"]], "starter_code": "def binary_pyramid(m, n):", "canonical_solution": "def binary_pyramid(m, n):\n    return bin(sum((int(bin(i)[2:]) for i in range(m, n + 1))))[2:]", "entry_point": "binary_pyramid", "task_id": "TACO_lite/514", "input_output_examples": [[[1, 4]], [["1111010"]]]}
{"requirement": "def strings_crossover(arr, result):\n\"\"\"# Task\n Define crossover operation over two equal-length strings A and B as follows:\n\n the result of that operation is a string of the same length as the input strings result[i] is chosen at random between A[i] and B[i]. \n \n Given array of strings `arr` and a string result, find for how many pairs of strings from `arr` the result of the crossover operation over them may be equal to result.\n\n Note that (A, B) and (B, A) are the same pair. Also note that the pair cannot include the same element of the array twice (however, if there are two equal elements in the array, they can form a pair).\n\n# Example\n\n For `arr = [\"abc\", \"aaa\", \"aba\", \"bab\"]` and `result = \"bbb\"`, the output should be `2`.\n\n ```\n\"abc\" and \"bab\" can crossover to \"bbb\"\n\"aba\" and \"bab\" can crossover to \"bbb\"\n```\n# Input/Output\n\n\n - `[input]` string array `arr`\n\n   A non-empty array of equal-length strings.\n\n   Constraints: `2 ≤ arr.length ≤ 10, 1 ≤ arr[i].length ≤ 10.`\n\n\n - `[input]` string `result`\n\n   A string of the same length as each of the arr elements.\n\n   Constraints: `result.length = arr[i].length.`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[["abc", "aaa", "aba", "bab"], "bbb"], [["aacccc", "bbcccc"], "abdddd"], [["a", "b", "c", "d", "e"], "c"], [["aa", "ab", "ba"], "bb"], [["a", "b", "c", "d", "e"], "f"], [["aaa", "aaa"], "aaa"]], "outputs": [[2], [0], [4], [1], [0], [1]], "starter_code": "def strings_crossover(arr, result):", "canonical_solution": "from itertools import combinations\n\ndef strings_crossover(arr, result):\n    return sum((1 for s1, s2 in combinations(arr, 2) if all((r in (x, y) for x, y, r in zip(s1, s2, result)))))", "entry_point": "strings_crossover", "task_id": "TACO_lite/515", "input_output_examples": [[[["abc", "aaa", "aba", "bab"], "bbb"]], [[2]]]}
{"requirement": "def clean_string(s):\n\"\"\"Assume `\"#\"` is like a backspace in string. This means that string `\"a#bc#d\"` actually is `\"bd\"`\n\nYour task is to process a string with `\"#\"` symbols.\n\n\n## Examples\n\n```\n\"abc#d##c\"      ==>  \"ac\"\n\"abc##d######\"  ==>  \"\"\n\"#######\"       ==>  \"\"\n\"\"              ==>  \"\"\n```\n\"\"\"", "inputs": [["abjd####jfk#"], ["gfh#jds###d#dsd####dasdaskhj###dhkjs####df##s##d##"], ["831####jns###s#cas/*####-5##s##6+yqw87e##hfklsd-=-28##fds##"], ["######831###dhkj####jd#dsfsdnjkf###d####dasns"], [""], ["#######"], ["####gfdsgf##hhs#dg####fjhsd###dbs########afns#######sdanfl##db#####s#a"], ["#hskjdf#gd"], ["hsk48hjjdfgd"]], "outputs": [["jf"], ["gdasda"], ["6+yqw8hfklsd-=-f"], ["jdsfdasns"], [""], [""], ["sa"], ["hskjdgd"], ["hsk48hjjdfgd"]], "starter_code": "def clean_string(s):", "canonical_solution": "def clean_string(s):\n    stk = []\n    for c in s:\n        if c == '#' and stk:\n            stk.pop()\n        elif c != '#':\n            stk.append(c)\n    return ''.join(stk)", "entry_point": "clean_string", "task_id": "TACO_lite/516", "input_output_examples": [[["abc#d##c"], ["abc##d######"], ["#######"], [[""]], ["abjd####jfk#"]], [["ac"], [""], [""], [""], ["jf"]]]}
{"requirement": "def evil(n):\n\"\"\"The number n is Evil if it has an even number of 1's in its binary representation.\nThe first few Evil numbers: 3, 5, 6, 9, 10, 12, 15, 17, 18, 20\nThe number n is Odious if it has an odd number of 1's in its binary representation.\nThe first few Odious numbers: 1, 2, 4, 7, 8, 11, 13, 14, 16, 19\nYou have to write a function that determine if a number is Evil of Odious, function should return \"It's Evil!\" in case of evil number and \"It's Odious!\" in case of odious number.\n\ngood luck :)\n\"\"\"", "inputs": [[1], [2], [3]], "outputs": [["It's Odious!"], ["It's Odious!"], ["It's Evil!"]], "starter_code": "def evil(n):", "canonical_solution": "def evil(n):\n    return \"It's %s!\" % ['Evil', 'Odious'][bin(n).count('1') % 2]", "entry_point": "evil", "task_id": "TACO_lite/517", "input_output_examples": [[[1]], [["It's Odious!"]]]}
{"requirement": "def how_many_times(annual_price, individual_price):\n\"\"\"Lot of museum allow you to be a member, for a certain amount `amount_by_year` you can have unlimitted acces to the museum. \n\nIn this kata you should complete a function in order to know after how many visit it will be better to take an annual pass. The function take 2 arguments `annual_price` and `individual_price`.\n\"\"\"", "inputs": [[40, 15], [30, 10], [80, 15]], "outputs": [[3], [3], [6]], "starter_code": "def how_many_times(annual_price, individual_price):", "canonical_solution": "from math import ceil\nfrom operator import truediv\n\ndef how_many_times(annual_price, individual_price):\n    return int(ceil(truediv(annual_price, individual_price)))", "entry_point": "how_many_times", "task_id": "TACO_lite/518", "input_output_examples": [[[40, 15]], [[3]]]}
{"requirement": "def min_value(digits):\n\"\"\"# Task\n\n**_Given_** a **_list of digits_**, *return the **_smallest number_** that could be formed from these digits, using the digits only once (ignore duplicates).* \n___\n\n# Notes:\n\n* Only **_positive integers_** *will be passed to the function (> 0 ), no negatives or zeros.*\n___\n# Input >> Output Examples \n\n```\nminValue ({1, 3, 1})  ==> return (13)\n```\n## Explanation:\n**_(13)_** *is the minimum number could be formed from* **_{1, 3, 1}_** , *Without duplications*  \n___\n```\nminValue({5, 7, 5, 9, 7})  ==> return (579)\n```\n## Explanation:\n**_(579)_** *is the minimum number could be formed from* **_{5, 7, 5, 9, 7}_** , *Without duplications* \n___\n\n```\nminValue({1, 9, 3, 1, 7, 4, 6, 6, 7}) return  ==> (134679)\n```\n## Explanation:\n**_(134679)_** *is the minimum number could be formed from* **_{1, 9, 3, 1, 7, 4, 6, 6, 7}_** , *Without duplications* \n___\n___\n\n## [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [Bizarre Sorting-katas](https://www.codewars.com/collections/bizarre-sorting-katas)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[1, 3, 1]], [[4, 7, 5, 7]], [[4, 8, 1, 4]], [[5, 7, 9, 5, 7]], [[6, 7, 8, 7, 6, 6]], [[5, 6, 9, 9, 7, 6, 4]], [[1, 9, 1, 3, 7, 4, 6, 6, 7]], [[3, 6, 5, 5, 9, 8, 7, 6, 3, 5, 9]]], "outputs": [[13], [457], [148], [579], [678], [45679], [134679], [356789]], "starter_code": "def min_value(digits):", "canonical_solution": "def min_value(digits):\n    return int(''.join(map(str, sorted(set(digits)))))", "entry_point": "min_value", "task_id": "TACO_lite/519", "input_output_examples": [[[[1, 3, 1]], [[5, 7, 5, 9, 7]], [[1, 9, 3, 1, 7, 4, 6, 6, 7]]], [[13], [579], [134679]]]}
{"requirement": "def eq_dice(set):\n\"\"\"With one die of 6 sides we will have six different possible results:```  1, 2, 3, 4, 5, 6``` .\n\nWith 2 dice of six sides, we will have 36 different possible results:\n``` \n(1,1),(1,2),(2,1),(1,3),(3,1),(1,4),(4,1),(1,5),\n(5,1), (1,6),(6,1),(2,2),(2,3),(3,2),(2,4),(4,2),\n(2,5),(5,2)(2,6),(6,2),(3,3),(3,4),(4,3),(3,5),(5,3),\n(3,6),(6,3),(4,4),(4,5),(5,4),(4,6),(6,4),(5,5),\n(5,6),(6,5),(6,6)\n``` \nSo, with 2 dice of 6 sides we get 36 different events.\n``` \n([6,6] ---> 36)\n``` \nBut with 2 different dice we can get for this case, the same number of events.\nOne die of ```4 sides```  and another of ```9 sides```  will produce the exact amount of events.\n``` \n([4,9] ---> 36)\n``` \nWe say that the dice set ```[4,9]``` is equivalent to ```[6,6]``` because both produce the same number of events.\n\nAlso we may have an amount of three dice producing the same amount of events. It will be for:\n``` \n[4,3,3] ---> 36\n``` \n(One die of 4 sides and two dice of 3 sides each)\n\nPerhaps you may think that the following set is equivalent: ```[6,3,2]``` but unfortunately dice have a **minimum of three sides** (well, really a \ntetrahedron with one empty side)\n\nThe task for this kata is to get the amount of equivalent dice sets, having **2 dice at least**,for a given set.\n\nFor example, for the previous case: [6,6] we will have 3 equivalent sets that are: ``` [4, 3, 3], [12, 3], [9, 4]``` .\n\nYou may assume that dice are available from 3 and above for any value up to an icosahedral die (20 sides).\n``` \n[5,6,4] ---> 5 (they are [10, 4, 3], [8, 5, 3], [20, 6], [15, 8], [12, 10])\n``` \nFor the cases we cannot get any equivalent set the result will be `0`.\nFor example for the set `[3,3]` we will not have equivalent dice.\n\nRange of inputs for Random Tests:\n``` \n3 <= sides <= 15\n2 <= dices <= 7\n``` \nSee examples in the corresponding box.\n\nEnjoy it!!\n\"\"\"", "inputs": [[[6, 6]], [[5, 6, 4]], [[3, 15, 8, 20]], [[6]], [[3, 3]], [[20]], [[3, 6]]], "outputs": [[3], [5], [44], [0], [0], [1], [0]], "starter_code": "def eq_dice(set):", "canonical_solution": "import numpy as np\n\ndef products(n, min_divisor, max_divisor):\n    if n == 1:\n        yield []\n    for divisor in range(min_divisor, max_divisor + 1):\n        if n % divisor == 0:\n            for product in products(n // divisor, divisor, max_divisor):\n                yield (product + [divisor])\n\ndef eq_dice(set):\n    product = np.prod(set)\n    lista = list(products(product, 3, min(product - 1, 20)))\n    return len(lista) - 1 if len(set) > 1 else len(lista)", "entry_point": "eq_dice", "task_id": "TACO_lite/520", "input_output_examples": [[[[6, 6]], [[5, 6, 4]], [[3, 3]]], [[3], [5], [0]]]}
{"requirement": "Ho ho! So you think you know integers, do you? Well then, young wizard, tell us what the Nth digit of the [Champernowne constant](https://en.wikipedia.org/wiki/Champernowne_constant) is!\n\nThe constant proceeds like this: `0.12345678910111213141516...`\n\nI hope you see the pattern!\n\nConjure a function that will accept an integer, `n`, and return the (one-indexed) `n`th digit of Champernowne's constant. Can you get it to run in _constant_ time?\n\nFor example:\n\n`n = 1` should return `0` (the very first digit)\n\n`n = 2` should return `1` (we ignore the period character since it's not a digit!)\n\n`n = 20` should return `4` (that's the `4` in the number `14`, 20th in sequence)\n\nFor any invalid values, such as `0` and below, or non-integers, return... `NaN`!\n\nI hope (for your sake) that you've been practicing your mathemagical spells, because a naïve solution will _not_ be fast enough to compete in this championship!\n\nInvoke with _precision_, and be wary of rounding errors in the realms of enormity!\n\nMay the best integer win!", "inputs": [[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [20], [35], [36], [37], [100], [101], [102], [103], [104], [105], [190], [2890], [38890], [488890], [5888890], [3678608], [3678609], [3678610], [3678611], [3678612], [3678613], [3678614], [3897249], [3897189], [3897309], [3897369], [3898749], [3898809], [3898869], [3898929], [3898989], [3899049], [3899109], [999999999], [1000599563], [1000599564], [1000599565], [1000599566], [1000599567], [1000599568], [101800813569], [77199254740991], [501337501337101]], "outputs": [[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [1], [0], [4], [2], [2], [2], [4], [5], [5], [5], [6], [5], [9], [9], [9], [9], [9], [6], [1], [9], [6], [3], [1], [6], [5], [4], [6], [7], [0], [1], [2], [3], [4], [5], [6], [8], [1], [2], [3], [5], [2], [3], [6], [7], [3]], "starter_code": "def champernowneDigit(n):\n\t", "canonical_solution": "def champernowne_digit(n):\n    if not type(n) is int or n < 1:\n        return float('NaN')\n    i, l = (1, 11)\n    while l <= n:\n        i, l = (i + 1, l + 9 * (i + 1) * 10 ** i)\n    return (n - l) // (i * 10 ** (i - 1 - (n - l) % i)) % 10\nchampernownedigit = champernowne_digit", "entry_point": "champernownedigit", "task_id": "TACO_lite/521", "input_output_examples": [[[1], [2], [20], [0]], [[0], [1], [4], ["NaN"]]]}
{"requirement": "def warn_the_sheep(queue):\n\"\"\"# A wolf in sheep's clothing\n\nWolves have been reintroduced to Great Britain. You are a sheep farmer, and are now plagued by wolves which pretend to be sheep. Fortunately, you are good at spotting them. \n\nWarn the sheep in front of the wolf that it is about to be eaten. Remember that you are standing **at the front of the queue** which is at the end of the array:\n\n```\n[sheep, sheep, sheep, sheep, sheep, wolf, sheep, sheep]      (YOU ARE HERE AT THE FRONT OF THE QUEUE)\n   7      6      5      4      3            2      1\n```\n\nIf the wolf is the closest animal to you, return `\"Pls go away and stop eating my sheep\"`. Otherwise, return `\"Oi! Sheep number N! You are about to be eaten by a wolf!\"` where `N` is the sheep's position in the queue.\n\n**Note:** there will always be exactly one wolf in the array.\n\n## Examples\n\n```python\nwarn_the_sheep([\"sheep\", \"sheep\", \"sheep\", \"wolf\", \"sheep\"]) == 'Oi! Sheep number 1! You are about to be eaten by a wolf!'\n\nwarn_the_sheep(['sheep', 'sheep', 'wolf']) == 'Pls go away and stop eating my sheep'\n```\n\"\"\"", "inputs": [[["sheep", "sheep", "sheep", "sheep", "sheep", "wolf", "sheep", "sheep"]], [["sheep", "wolf", "sheep", "sheep", "sheep", "sheep", "sheep"]], [["wolf", "sheep", "sheep", "sheep", "sheep", "sheep", "sheep"]], [["sheep", "wolf", "sheep"]], [["sheep", "sheep", "wolf"]]], "outputs": [["Oi! Sheep number 2! You are about to be eaten by a wolf!"], ["Oi! Sheep number 5! You are about to be eaten by a wolf!"], ["Oi! Sheep number 6! You are about to be eaten by a wolf!"], ["Oi! Sheep number 1! You are about to be eaten by a wolf!"], ["Pls go away and stop eating my sheep"]], "starter_code": "def warn_the_sheep(queue):", "canonical_solution": "def warn_the_sheep(queue):\n    n = len(queue) - queue.index('wolf') - 1\n    return f'Oi! Sheep number {n}! You are about to be eaten by a wolf!' if n else 'Pls go away and stop eating my sheep'", "entry_point": "warn_the_sheep", "task_id": "TACO_lite/522", "input_output_examples": [[[["sheep", "sheep", "sheep", "wolf", "sheep"]], [["sheep", "sheep", "wolf"]]], [["Oi! Sheep number 1! You are about to be eaten by a wolf!"], ["Pls go away and stop eating my sheep"]]]}
{"requirement": "def solve(time):\n\"\"\"Given time in 24-hour format, convert it to words. \n\n```\nFor example:\n13:00 = one o'clock \n13:09 = nine minutes past one \n13:15 = quarter past one \n13:29 = twenty nine minutes past one\n13:30 = half past one \n13:31 = twenty nine minutes to two\n13:45 = quarter to two \n00:48 = twelve minutes to one\n00:08 = eight minutes past midnight\n12:00 = twelve o'clock\n00:00 = midnight\n\nNote: If minutes == 0, use 'o'clock'. If minutes <= 30, use 'past', and for minutes > 30, use 'to'. \n\n```\n\nMore examples in test cases. Good luck!\n\"\"\"", "inputs": [["13:00"], ["13:09"], ["13:15"], ["13:29"], ["13:30"], ["13:31"], ["13:45"], ["13:59"], ["00:48"], ["00:08"], ["12:00"], ["00:00"], ["19:01"], ["07:01"], ["01:59"], ["12:01"], ["00:01"], ["11:31"], ["23:31"], ["11:45"], ["11:59"], ["23:45"], ["23:59"], ["01:45"]], "outputs": [["one o'clock"], ["nine minutes past one"], ["quarter past one"], ["twenty nine minutes past one"], ["half past one"], ["twenty nine minutes to two"], ["quarter to two"], ["one minute to two"], ["twelve minutes to one"], ["eight minutes past midnight"], ["twelve o'clock"], ["midnight"], ["one minute past seven"], ["one minute past seven"], ["one minute to two"], ["one minute past twelve"], ["one minute past midnight"], ["twenty nine minutes to twelve"], ["twenty nine minutes to midnight"], ["quarter to twelve"], ["one minute to twelve"], ["quarter to midnight"], ["one minute to midnight"], ["quarter to two"]], "starter_code": "def solve(time):", "canonical_solution": "def solve(time):\n\n    def number(n):\n        if n > 20:\n            return 'twenty {}'.format(number(n - 20))\n        return [None, 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen', 'twenty'][n]\n    hours, minutes = (int(s) for s in time.split(':'))\n    if minutes <= 30:\n        direction = 'past'\n    else:\n        hours = (hours + 1) % 24\n        direction = 'to'\n        minutes = 60 - minutes\n    hour = number((hours + 11) % 12 + 1) if hours else 'midnight'\n    if minutes == 0:\n        return \"{} o'clock\".format(hour) if hours else hour\n    if minutes == 15:\n        return 'quarter {} {}'.format(direction, hour)\n    if minutes == 30:\n        return 'half past {}'.format(hour)\n    return '{} minute{} {} {}'.format(number(minutes), '' if minutes == 1 else 's', direction, hour)", "entry_point": "solve", "task_id": "TACO_lite/523", "input_output_examples": [[["13:00"], ["13:09"], ["13:15"], ["13:29"], ["13:30"], ["13:31"], ["13:45"], ["00:48"], ["00:08"], ["12:00"], ["00:00"]], [["one o'clock"], ["nine minutes past one"], ["quarter past one"], ["twenty nine minutes past one"], ["half past one"], ["twenty nine minutes to two"], ["quarter to two"], ["twelve minutes to one"], ["eight minutes past midnight"], ["twelve o'clock"], ["midnight"]]]}
{"requirement": "def decipher_message(message):\n\"\"\"Student A and student B are giving each other test answers during a test.  \nThey don't want to be caught so they are sending each other coded messages.\n\nStudent A is sending student B the message: `Answer to Number 5 Part b`.  \nHe starts of with a square grid (in this example the grid = 5x5).  \nHe writes the message down (with spaces):\n\n```\nAnswe\nr to \nNumbe\nr 5 P\nart b\n```\n\nHe then starts writing the message down one column at a time (from the top to the bottom).  \nThe new message is now: `ArNran u rstm5twob  e ePb`\n\nYou are the teacher of this class.  \nYour job is to decipher this message and bust the students.\n\n# Task\n\nWrite a function `decipher_message`.  \nThis function will take one parameter (`message`).  \nThis function will return the original message.  \n*** Note: The length of the string is always going to be a prefect square ***\n\nHint: You should probably decipher the example message first before you start coding\n\nHave fun !!!\n\"\"\"", "inputs": [["ArNran u rstm5twob  e ePb"], ["ArNran u rstm8twob  e ePc"], ["92287a76 585a2y0"], [" a29068686a275y5"], ["8a 55y0y0y5a7 78"], ["9y98a877a95976a758726a89a5659957ya y"], ["aa297625 88a02670997 86ya880 00a9067"], ["826a976a508a9a 687600a2800 895055y a"], ["  a702a067629y022ay865y9yy92a60226 9869y0 y88y077"], ["y0y 62 27059y ya6568588a956aa0 960969a52   5 2680"], ["662 y768867 9 765y9696a5980 5 7228562965597766y29"], ["2y0y7250 69222a98780 0 2769a0y5 8y9a5y0796 6259 y"], ["86a6yy776a87y  027 a5229 9678 60695656aa82550687y"], ["aa68y6 5 y9595a 9y6272727y7yaa6a7y9a06 7529y9 a 5"], ["y2y59087y9a627yy7995a668890  8y990a6027006668y a2"], ["796820 2 "], ["7a05y8 52"], ["a 57529a9"], ["aya960700"], ["y0 60 2685822260yaa98 500 yy67082 6628y2y9y567095ay859y5 8y999297 y0229 60a 95y80"], ["6y 70a5y6y5 a 7820y8ay58y852y055y6207ay6028958508y 9a 5 a a026626787 805a50 y0 9a"], ["a8y7067y7yyya 982672a006850 86yy 7988 y8a90 66y6y82a9  a6692y5670a552765 2a  5 78"], ["5 20a0 076705 5yy756 a88y26a6262a05059 a y09  829y885a6yy568877966565 yy6962y0055"], ["09y286 90 y  y68y055908 068 500ay27 89522a 6a 529yy295a5y6628y96"], ["92752y9555 982887y6yy70 8292 0y9767  925y8a785929a69y25y5yy0a0a7"], [" 7569520897207a0y056yy79a88 5880886 8 a7592a5 595 9  270795a29 9"], ["5aa 0y06 86 y725 ay5768269 0 2808a277 0ay2628592077y62y627y92a98"], ["57067 y27 a8y7 8022059  0565yy2y9aaya6626y0   6227a6 880y72762y9"], [""], ["8 d9dx0962x8067d x 760x272690 d852757d59  d552820d52dx767d 0dxxxd995x0676x59d6x7760x0d7 02dd7558770x2d0760x85d8x709d0x590"], ["5 9xx2788d0x207  9x85 008xx5 852056985508662x8 75 x92d0 8088585d882d 52967 d  292987d97695x59d52x505 5678082x98552625888 "]], "outputs": [["Answer to Number 5 Part b"], ["Answer to Number 8 Part c"], ["97 a2a52278y8650"], [" 087a66528ay9625"], ["8507ayy  0575ya8"], ["9777a5y762579aa66y897a5aa5589 89899y"], ["a209a0a5278a2 6 899878007806 66a9y07"], ["8696002aa00565 0 5a06a8y98829 7a785a"], [" 005a9y 62y688a72906876ay29y02yy2y02989607ay62  7"], ["y2y8a6 07a8095y06a a  55995269656262y860 8  5a9 0"], ["6876567686a 272655796 7y9266y 9825y79608526 9 599"], ["20a00a y 9 y5606825y2y977 0572868792209y9 52 a96y"], ["87 28656602 55aa29660687 0a6y7 96a8yya69877 5752y"], ["a5a2aa9a  7a0y6y9266989y7a  y56y77a6927y5  57y925"], ["y7y6 662yy6806y978y285a9897y969990 025000a87a a62"], ["78 92260 "], ["75 ay5082"], ["a79 5a529"], ["a97y60a00"], ["y5ay27y96089680570 287y9  a62 0258y 0258yay09 6029y925200 y892y6y 6559988ay6692 0"], ["6yy27852ay58ya5 65  a0y0a707ay568 8 0 550ya7ya78y2 0 058y68928 y2829a60960505 65a"], ["ay7 86 7 8y28 ya02yya6y66aa7a0y8y65 0 0ya895 696 9222578870ay7 y259 956776086 658"], ["565a5 696 76698y6920 2 2y6605a6a9552a 82 y66y058ay8850 yy0088 00y25957y57760 a7y5"], ["00y0y29y9 062ay6yy587 y62 5  6228 958a986y009 5y 68055a998 a2256"], ["95787y9525y268ay7 697a6y59y2 79028y  8yay2709520980y295a58 952y7"], [" 8ya8557790889 957586295626  a a90y585 257y8  292a78a57 00907909"], ["5  68y02a8a9a277a6y 267y  5072y90y7 7862y762 52a028809y96520a268"], ["5700962y7 25ay770a26a0a26805y 677y5ya  6 79y6 82y  2668y28 y2209"], [""], ["88x256960x8 027275x22xd6758dx7dd797272 07d00dd6d0066779x 95dd7056d0x095x6x5009   2xx08xx67d dx5d785268dxd97759x05579d 0d0"], ["5x05x 2 958 20688d25 59089 0 9x55x7x87852562x x558299762 55 598d8279 0x8675058x88957d28888562d 9x28d526d8d75x80 0208 609 "]], "starter_code": "def decipher_message(message):", "canonical_solution": "def decipher_message(message):\n    n = int(len(message) ** 0.5)\n    return ''.join((message[i::n] for i in range(n)))", "entry_point": "decipher_message", "task_id": "TACO_lite/524", "input_output_examples": [[["ArNran u rstm5twob  e ePb"]], [["Answer to Number 5 Part b"]]]}
{"requirement": "def solve(a, b):\n\"\"\"An eviternity number is a number which:\n* contains only digits 8, 5 and 3, and \n* the count of the digit `8` >= count of digit `5` >= count of digit `3`. \n\nThe first few eviternity numbers are as follows. \n```Haskell\n[8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]\n```\nYou will be given two integers, `a` and `b`, and your task is to return the number of eviternity numbers in the range `>= a and < b`.\n```Haskell\nFor example:\nsolve(0,1000) = 14, because they are [8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888]\n```\n\nThe upper bound will not exceed `500,000`.\n\nMore examples in test cases. Good luck!\n\"\"\"", "inputs": [[0, 100], [0, 1000], [0, 10000], [0, 100000], [0, 500000], [90, 139701], [61, 56976]], "outputs": [[4], [14], [37], [103], [148], [99], [53]], "starter_code": "def solve(a, b):", "canonical_solution": "u = [8, 58, 85, 88, 358, 385, 538, 583, 588, 835, 853, 858, 885, 888, 3588, 3858, 3885, 5388, 5588, 5838, 5858, 5883, 5885, 5888, 8358, 8385, 8538, 8558, 8583, 8585, 8588, 8835, 8853, 8855, 8858, 8885, 8888, 35588, 35858, 35885, 35888, 38558, 38585, 38588, 38855, 38858, 38885, 53588, 53858, 53885, 53888, 55388, 55838, 55883, 55888, 58358, 58385, 58388, 58538, 58583, 58588, 58835, 58838, 58853, 58858, 58883, 58885, 58888, 83558, 83585, 83588, 83855, 83858, 83885, 85358, 85385, 85388, 85538, 85583, 85588, 85835, 85838, 85853, 85858, 85883, 85885, 85888, 88355, 88358, 88385, 88535, 88538, 88553, 88558, 88583, 88585, 88588, 88835, 88853, 88855, 88858, 88885, 88888, 335588, 335858, 335885, 338558, 338585, 338855, 353588, 353858, 353885, 355388, 355838, 355883, 355888, 358358, 358385, 358538, 358583, 358588, 358835, 358853, 358858, 358885, 358888, 383558, 383585, 383855, 385358, 385385, 385538, 385583, 385588, 385835, 385853, 385858, 385885, 385888, 388355, 388535, 388553, 388558, 388585, 388588, 388855, 388858, 388885]\n\ndef solve(a, b):\n    return sum((a <= x < b for x in u))", "entry_point": "solve", "task_id": "TACO_lite/525", "input_output_examples": [[[0, 1000]], [[14]]]}
{"requirement": "Challenge:\nGiven two null-terminated strings in the arguments \"string\" and \"prefix\", determine if \"string\" starts with the \"prefix\" string. Return 1 (or any other \"truthy\" value) if true, 0 if false.\n\nExample:\n```\nstartsWith(\"hello world!\", \"hello\"); // should return 1.\nstartsWith(\"hello world!\", \"HELLO\"); // should return 0.\nstartsWith(\"nowai\", \"nowaisir\"); // should return 0.\n```\n\nAddendum:\nFor this problem, an empty \"prefix\" string should always return 1 (true) for any value of \"string\".\n\nIf the length of the \"prefix\" string is greater than the length of the \"string\", return 0.\n\nThe check should be case-sensitive, i.e. startsWith(\"hello\", \"HE\") should return 0, whereas startsWith(\"hello\", \"he\") should return 1.\n\nThe length of the \"string\" as well as the \"prefix\" can be defined by the formula: 0 <= length < +Infinity\n\nNo characters should be ignored and/or omitted during the test, e.g. whitespace characters should not be ignored.", "inputs": [["hello world!", "hello"], ["hello world!", "HELLO"], ["nowai", "nowaisir"], ["", ""], ["abc", ""], ["", "abc"]], "outputs": [[true], [false], [false], [true], [true], [false]], "starter_code": "def starts_with(st, prefix):\n\t", "canonical_solution": "starts_with = str.startswith", "entry_point": "starts_with", "task_id": "TACO_lite/526", "input_output_examples": [[["hello world!", "hello"], ["hello world!", "HELLO"], ["nowai", "nowaisir"], ["hello", "HE"], ["hello", "he"], ["any string", ""]], [[1], [0], [0], [0], [1], [1]]]}
{"requirement": "def triangle_type(a, b, c):\n\"\"\"In this kata, you should calculate type of triangle with three given sides ``a``, ``b`` and ``c`` (given in any order).\n\nIf all angles are less than ``90°``, this triangle is ``acute`` and function should return ``1``.\n\nIf one angle is strictly ``90°``, this triangle is ``right`` and function should return ``2``.\n\nIf one angle more than ``90°``, this triangle is ``obtuse`` and function should return ``3``.\n\nIf three sides cannot form triangle, or one angle is ``180°`` (which turns triangle into segment) - function should return ``0``.\n\nInput parameters are ``sides`` of given triangle. All input values are non-negative floating point or integer numbers (or both).\n\n\n\n\nAcute\n\n\nRight\n\n\nObtuse\n\n\n\n\n### Examples:\n```python\ntriangle_type(2, 4, 6) # return 0 (Not triangle)\ntriangle_type(8, 5, 7) # return 1 (Acute, angles are approx. 82°, 38° and 60°)\ntriangle_type(3, 4, 5) # return 2 (Right, angles are approx. 37°, 53° and exactly 90°)\ntriangle_type(7, 12, 8) # return 3 (Obtuse, angles are approx. 34°, 106° and 40°)\n```\n\nIf you stuck, this can help you: http://en.wikipedia.org/wiki/Law_of_cosines. But you can solve this kata even without angle calculation.\n\nThere is very small chance of random test to fail due to round-off error, in such case resubmit your solution.\n\"\"\"", "inputs": [[1, 2, 3], [5.5, 4.5, 10], [7, 3, 2], [5, 10, 5], [3, 3, 0], [3, 3, 1], [5, 5, 5], [122.14, 222.11, 250], [8, 5, 7], [100000, 100005, 111111], [3, 4, 5], [21, 220, 221], [8.625, 33.625, 32.5], [65, 56, 33], [68000, 285000, 293000], [2, 4, 5], [105, 100, 6], [102, 200, 250], [65, 55, 33], [7, 8, 12], [7.99999, 4, 4]], "outputs": [[0], [0], [0], [0], [0], [1], [1], [1], [1], [1], [2], [2], [2], [2], [2], [3], [3], [3], [3], [3], [3]], "starter_code": "def triangle_type(a, b, c):", "canonical_solution": "def triangle_type(a, b, c):\n    x, y, z = sorted([a, b, c])\n    if z >= x + y:\n        return 0\n    if z * z == x * x + y * y:\n        return 2\n    return 1 if z * z < x * x + y * y else 3", "entry_point": "triangle_type", "task_id": "TACO_lite/527", "input_output_examples": [[[2, 4, 6], [8, 5, 7], [3, 4, 5], [7, 12, 8]], [[0], [1], [2], [3]]]}
{"requirement": "def convert_to_mixed_numeral(parm):\n\"\"\"In Math, an improper fraction is a fraction where the numerator (the top number) is greater than or equal to the denominator (the bottom number) For example: ```5/3``` (five third).\n\nA mixed numeral is a whole number and a fraction combined into one \"mixed\" number. For example: ```1 1/2``` (one and a half) is a mixed numeral.\n\n## Task\n\nWrite a function `convertToMixedNumeral` to convert the improper fraction into a mixed numeral.\n\nThe input will be given as a ```string``` (e.g. ```'4/3'```).\n\nThe output should be a ```string```, with a space in between the whole number and the fraction (e.g. ```'1 1/3'```).  You do not need to reduce the result to its simplest form.\n\nFor the purpose of this exercise, there will be no ```0```, ```empty string``` or ```null``` input value. However, the input can be:\n\n- a negative fraction\n- a fraction that does not require conversion\n- a fraction that can be converted into a whole number\n\n## Example\n\"\"\"", "inputs": [["74/3"], ["9999/24"], ["74/30"], ["13/5"], ["5/3"], ["1/1"], ["10/10"], ["900/10"], ["9920/124"], ["6/2"], ["9/77"], ["96/100"], ["12/18"], ["6/36"], ["1/18"], ["-64/8"], ["-6/8"], ["-9/78"], ["-504/26"], ["-47/2"], ["-21511/21"]], "outputs": [["24 2/3"], ["416 15/24"], ["2 14/30"], ["2 3/5"], ["1 2/3"], ["1"], ["1"], ["90"], ["80"], ["3"], ["9/77"], ["96/100"], ["12/18"], ["6/36"], ["1/18"], ["-8"], ["-6/8"], ["-9/78"], ["-19 10/26"], ["-23 1/2"], ["-1024 7/21"]], "starter_code": "def convert_to_mixed_numeral(parm):", "canonical_solution": "def convert_to_mixed_numeral(parm):\n    a, b = list(map(int, parm.split('/')))\n    d, r = divmod(abs(a), b)\n    s = (0 < a) - (a < 0)\n    return parm if d == 0 else ('{}' + ' {}/{}' * (r != 0)).format(d * s, r, b)", "entry_point": "convert_to_mixed_numeral", "task_id": "TACO_lite/528", "input_output_examples": [[["74/3"]], [["24 2/3"]]]}
{"requirement": "def cake_slice(n):\n\"\"\"# Task\nA cake is sliced with `n` straight lines. Your task is to calculate the maximum number of pieces the cake can have.\n\n# Example\n\n For `n = 0`, the output should be `1`.\n \n For `n = 1`, the output should be `2`.\n \n For `n = 2`, the output should be `4`.\n \n For `n = 3`, the output should be `7`.\n \n See the following image to understand it:\n \n ![](https://cdn2.scratch.mit.edu/get_image/project/92275349_500x400.png?v=1450672809.79)\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  `0 ≤ n ≤ 10000`\n\n\n - `[output]` an integer\n\n  The maximum number of pieces the sliced cake can have.\n\"\"\"", "inputs": [[0], [1], [2], [3], [10]], "outputs": [[1], [2], [4], [7], [56]], "starter_code": "def cake_slice(n):", "canonical_solution": "def cake_slice(n):\n    return (n ** 2 + n + 2) // 2", "entry_point": "cake_slice", "task_id": "TACO_lite/529", "input_output_examples": [[[0], [1], [2], [3]], [[1], [2], [4], [7]]]}
{"requirement": "def tetris(arr):\n\"\"\"# Fun fact\nTetris was the first video game played in outer space\n\nIn 1993, Russian cosmonaut Aleksandr A. Serebrov spent 196 days on the Mir space station with a very special distraction: a gray Game Boy loaded with Tetris. During that time the game orbited the Earth 3,000 times and became the first video game played in space. The Game Boy was sold in a Bonhams auction for $1,220 during the Space History Sale in 2011.\n\n# Task\nParse the game log and determine how many lines have been cleared through the game. The game ends if all commands from input were interpreted or the maximum field height (30 units) is reached.\n\nA horizontal line, according to the rules of classic Tetris, is considered cleared if it represents a solid line without gaps formed by falling blocks.\nWhen such a line is formed, it disappears and any blocks above it fall down to fill the space.\n\n# Input\n```python\n['4L2', '3R4', '4L3', '3L4', '4R0', '1L2'] # example\n```\nAs an argument, you are given gamelog - an array of commands which you need to interpret.\n\nEach command has the same form:\n* The first character - the type of block (integer from 1 to 4, as in this kata we have only 4 types of blocks). Block types are described below.\n* The second - the direction of movement (`\"R\"` or `\"L\"` - right or left).\n* The third is an offset (integer from 0 to 4, as width of our field 9 units and new block always appears at the center of the field) relative to the starting position. Thus, `L4` means the leftmost position, and `R4` the rightmost, and `L0` is equivalent to `R0`.\n\n# Output\nThe total number of cleaned horizontal lines (`int`) to the end of the game. Note, if the field height is exceeded, then the game ends immediately.\n\n# Blocks\nIn this kata we have only 4 types of blocks. Yes, this is not a classic set of shapes, but this is only for simplicity.\n```\n# and their graphical representation:\n             ■\n         ■   ■\n     ■   ■   ■\n ■   ■   ■   ■\n---+---+---+---\n#1  #2  #3  #4\n```\n# Field\nGamefield (a rectangular vertical shaft) has width 9 units and height 30 units.\n\n\ntable, th, td {\n  border: 1px solid;\n}\n\n\nIndices can be represented as:\n\n\nL4\nL3\nL2\nL1\nL0/R0\nR1\nR2\nR3\nR4\n\n\n\n# Example 1\n```python\n>>> gamelog = ['1R4', '2L3', '3L2', '4L1', '1L0', '2R1', '3R2', '4R3', '1L4']\n>>> tetris(gamelog)\n1\n```\nGamefield before last command (_ means empty space):\n```\n___■___■_\n__■■__■■_\n_■■■_■■■_\n_■■■■■■■■\n```\nGamefield after all commands:\n```\n___■___■_\n__■■__■■_\n_■■■_■■■_\n```\nAs you can see, one solid line was cleared. So, answer is 1.\n\n# Example 2\n```python\n>>> gamelog = ['1L2', '4R2', '3L3', '3L1', '1L4', '1R4']\n>>> tetris(gamelog)\n0\n```\nGamefield after all commands:\n```\n _____■__\n_■_■__■__\n_■_■__■__\n■■■■__■_■\n```\nAs you can see, there is no solid lines, so nothing to clear. Our answer is 0, zero cleaned lines.\n\n# Note\n\nSince there is no rotation of blocks in our model and all blocks are very simple, do not overthink the task.\n\n# Other  \n\nIf you like the idea: leave feedback, and there will be more katas in the Tetris series.\n\n* 7 kyuTetris Series #1 — Scoring System\n* 6 kyuTetris Series #2 — Primitive Gameplay\n* 6 kyuTetris Series #3 — Adding Rotation (TBA)\n* 5 kyuTetris Series #4 — New Block Types (TBA)\n* 4 kyuTetris Series #5 — Complex Block Types (TBA?)\n\"\"\"", "inputs": [[["1R4", "2L3", "3L2", "4L1", "1L0", "2R1", "3R2", "4R3", "1L4"]], [["1L2", "4R2", "3L3", "3L1", "1L4", "1R4"]], [["4R4", "4L3", "4L2", "4L1", "4L0", "4R1", "4R2", "4R3", "3L4"]]], "outputs": [[1], [0], [3]], "starter_code": "def tetris(arr):", "canonical_solution": "pos = {'L4': 0, 'L3': 1, 'L2': 2, 'L1': 3, 'L0': 4, 'R0': 4, 'R1': 5, 'R2': 6, 'R3': 7, 'R4': 8}\n\ndef tetris(arr):\n    current, res = ([0] * 9, 0)\n    for x in arr:\n        p = pos[x[1:]]\n        current[p] += int(x[0])\n        if current[p] >= 30:\n            break\n        y = min(current)\n        if y:\n            current, res = ([v - y for v in current], res + y)\n    return res", "entry_point": "tetris", "task_id": "TACO_lite/530", "input_output_examples": [[[["1R4", "2L3", "3L2", "4L1", "1L0", "2R1", "3R2", "4R3", "1L4"]], [["1L2", "4R2", "3L3", "3L1", "1L4", "1R4"]]], [[1], [0]]]}
{"requirement": "def switch_endian(n, bits):\n\"\"\"In computing, there are two primary byte order formats: big-endian and little-endian. Big-endian is used primarily for networking (e.g., IP addresses are transmitted in big-endian) whereas little-endian is used mainly by computers with microprocessors.\n\nHere is an example (using 32-bit integers in hex format):\n\nLittle-Endian: 00 6D F4 C9 = 7,206,089\n\nBig-Endian:    C9 F4 6D 00 = 3,388,239,104\n\nYour job is to write a function that switches the byte order of a given integer. The function should take an integer n for the first argument, and the bit-size of the integer for the second argument. The bit size must be a power of 2 greater than or equal to 8. Your function should return a None value if the integer is negative, if the specified bit size is not a power of 2 that is 8 or larger, or if the integer is larger than the specified bit size can handle. In this kata, assume that all integers are unsigned (non-negative) and that all input arguments are integers (no floats, strings, None/nil values, etc.). Remember that you will need to account for padding of null (00) bytes.\n\nHint: bitwise operators are very helpful! :)\n\"\"\"", "inputs": [[153, 8], [255, 8], [256, 8], [1534, 32], [364334, 32], [2, 64], [164345, 64], [23, 128], [256245645346, 128], [6423, 256], [988847589347589798345, 256], [98, 512], [9827498275894278943758934789347, 512], [111, 1024], [859983475894789589772983457982345896389458937589738945435, 1024], [98345873489734895, 16], [893458278957389257892374587, 32], [3457892758927985892347589273895789, 64], [5315, 9], [9999, 124], [1355, 2], [5425, 4], [1111, 1], [24626, 666]], "outputs": [[153], [255], [null], [4261740544], [781124864], [144115188075855872], [17978653386462986240], [30572243903053065076787562386447925248], [45528303328508850820834438375932952576], [10447366694034586540826038121892877184087912282225534899373057468243260735488], [91242511062515682511683596760355486395666889244852199999154981214322488770560], [5132676473181150452180681444625675470675694728195525589909800865174737792762529702056967504767017718412590320712014191342452658263948296307619131260141568], [11930836310133384514326160681165088053924843877461649523769728440666263776393580347680430230979602503027248413303643954184674561174505233796513849034145792], [77946850769420728811700342256867869309216970571326574052151324251985652400041433233322816339012642571657549377600486963672365876321875957409008065628834483616922797539687769006521665530227798622106610186255607970082166897421927265014079512773561809863796510492144840252477126168637689491549705283548003434496], [109358791181702534675750459978375317655425491983637702648061053285141449541556750052943705607891736023254034131895692863702552970350431938079186312678981100327891943154445619222027830694165819898582344009910545707293292608754474937152496600707613861415524072325452544924390687309129714181920077788312386928640], [null], [null], [null], [null], [null], [null], [null], [null], [null]], "starter_code": "def switch_endian(n, bits):", "canonical_solution": "def switch_endian(n, bits):\n    out = 0\n    while bits > 7:\n        bits -= 8\n        out <<= 8\n        out |= n & 255\n        n >>= 8\n    return None if n or bits else out", "entry_point": "switch_endian", "task_id": "TACO_lite/531", "input_output_examples": [[[7206089, 32], [3388239104, 32], [153, 8]], [[3388239104], [7206089], [153]]]}
{"requirement": "def roll(desc, verbose=False):\n\"\"\"# The die is cast!\n\nYour task in this kata is to write a \"dice roller\" that interprets a subset of [dice notation](http://en.wikipedia.org/wiki/Dice_notation).\n\n# Description\n\nIn most role-playing games, die rolls required by the system are given in the form `AdX`. `A` and `X` are variables, separated by the letter **d**, which stands for *die* or *dice*.\n\n - `A` is the number of dice to be rolled (usually omitted if 1).\n - `X` is the number of faces of each die.\n\nHere are some examples of input:\n\n# Modifiers\n\nAs an addition to the above rules the input may also contain modifiers in the form `+N` or `-N` where `N` is an integer.\n\nHere are some examples of input containing modifiers:\n\n*Modifiers must be applied **after** all dice has been summed up.*\n\n# Output\n\nYour function must support two types of output depending on the second argument; *verbose* and *summed*.\n\n## Summed output\nIf the verbose flag isn't set your function should sum up all the dice and modifiers and return the result as an integer.\n\n## Verbose output\nWith the verbose flag your function should return an object/hash containing an array (`dice`) with all the dice rolls, and a integer (`modifier`) containing the sum of the modifiers which defaults to zero.\n\nExample of verbose output:\n\n# Invalid input\nHere are some examples of invalid inputs:\n\n# Additional information\n\n - Your solution should ignore all whitespace.\n - `roll` should return `false` for invalid input.\n\"\"\"", "inputs": [[""], [{}], ["abc"], ["2d6+3 abc"], ["abc 2d6+3"], ["2d6++4"]], "outputs": [[false], [false], [false], [false], [false], [false]], "starter_code": "def roll(desc, verbose=False):", "canonical_solution": "import re, random\n\ndef roll(desc, verbose=False):\n    if not isinstance(desc, str):\n        return False\n    ans = re.findall('^(\\\\d*)d(\\\\d+)(([+\\\\-]\\\\d+)*)$', desc.replace(' ', ''))\n    if len(ans) == 0:\n        return False\n    dct = {i: eval(v) for i, v in enumerate(ans[0]) if v}\n    dices = {'dice': [1 + random.randrange(dct[1]) for i in range(dct.get(0, 1))], 'modifier': dct.get(2, 0)}\n    return dices if verbose else sum(dices['dice']) + dices['modifier']", "entry_point": "roll", "task_id": "TACO_lite/532", "input_output_examples": [[], []]}
{"requirement": "def solve(a, b):\n\"\"\"In this Kata, you will be given two strings `a` and `b` and your task will be to return the characters that are not common in the two strings. \n\nFor example:\n```Haskell\nsolve(\"xyab\",\"xzca\") = \"ybzc\" \n--The first string has 'yb' which is not in the second string. \n--The second string has 'zc' which is not in the first string. \n```\nNotice also that you return the characters from the first string concatenated with those from the second string.\n\nMore examples in the tests cases. \n\nGood luck!\n\nPlease also try [Simple remove duplicates](https://www.codewars.com/kata/5ba38ba180824a86850000f7)\n\"\"\"", "inputs": [["xyab", "xzca"], ["xyabb", "xzca"], ["abcd", "xyz"], ["xxx", "xzca"]], "outputs": [["ybzc"], ["ybbzc"], ["abcdxyz"], ["zca"]], "starter_code": "def solve(a, b):", "canonical_solution": "def solve(a, b):\n    s = set(a) & set(b)\n    return ''.join((c for c in a + b if c not in s))", "entry_point": "solve", "task_id": "TACO_lite/533", "input_output_examples": [[["xyab", "xzca"]], [["ybzc"]]]}
{"requirement": "def calculate_total(team1, team2):\n\"\"\"Reducing Problems - Bug Fixing #8\n\nOh no! Timmy's reduce is causing problems, Timmy's goal is to calculate the two teams scores and return the winner but timmy has gotten confused and sometimes teams don't enter their scores, total the scores out of 3! Help timmy fix his program!\n\nReturn true if team 1 wins or false if team 2 wins!\n\"\"\"", "inputs": [[[1, 2, 2], [1, 0, 0]], [[6, 45, 1], [1, 55, 0]], [[57, 2, 1], []], [[], [3, 4, 3]], [[], []]], "outputs": [[true], [false], [true], [false], [false]], "starter_code": "def calculate_total(team1, team2):", "canonical_solution": "def calculate_total(team1, team2):\n    return sum(team1) > sum(team2)", "entry_point": "calculate_total", "task_id": "TACO_lite/534", "input_output_examples": [[[[1, 2, 2], [1, 0, 0]]], [[true]]]}
{"requirement": "def shortest_steps_to_num(num):\n\"\"\"# Summary:\nGiven a number, `num`, return the shortest amount of `steps` it would take from 1, to land exactly on that number.\n\n# Description:\nA `step` is defined as either:\n- Adding 1 to the number: `num += 1`\n- Doubling the number: `num *= 2`\n\nYou will always start from the number `1` and you will have to return the shortest count of steps it would take to land exactly on that number.\n\n`1 <= num <= 10000`\n\nExamples:\n\n`num == 3` would return `2` steps:\n\n```\n1 -- +1 --> 2:        1 step\n2 -- +1 --> 3:        2 steps\n\n2 steps\n```\n\n`num == 12` would return `4` steps:\n\n```\n1 -- +1 --> 2:        1 step\n2 -- +1 --> 3:        2 steps\n3 -- x2 --> 6:        3 steps\n6 -- x2 --> 12:       4 steps\n\n4 steps\n```\n\n`num == 16` would return `4` steps:\n\n```\n1 -- +1 --> 2:        1 step\n2 -- x2 --> 4:        2 steps\n4 -- x2 --> 8:        3 steps\n8 -- x2 --> 16:       4 steps\n\n4 steps\n```\n\"\"\"", "inputs": [[2], [3], [4], [5], [6], [7], [8], [9], [10], [20], [30], [40], [50], [11], [24], [37], [19], [48], [59], [65], [73], [83], [64], [99], [100], [10000], [1500], [1534], [1978], [2763], [9999], [2673], [4578], [9876], [2659], [7777], [9364], [7280], [4998], [9283], [8234], [7622], [800], [782], [674], [4467], [1233], [3678], [7892], [5672]], "outputs": [[1], [2], [2], [3], [3], [4], [3], [4], [4], [5], [7], [6], [7], [5], [5], [7], [6], [6], [9], [7], [8], [9], [6], [9], [8], [17], [16], [18], [17], [17], [20], [16], [17], [18], [16], [18], [17], [17], [17], [17], [16], [19], [11], [13], [12], [18], [14], [18], [19], [16]], "starter_code": "def shortest_steps_to_num(num):", "canonical_solution": "def shortest_steps_to_num(num):\n    steps = 0\n    while num != 1:\n        if num % 2:\n            num -= 1\n        else:\n            num //= 2\n        steps += 1\n    return steps", "entry_point": "shortest_steps_to_num", "task_id": "TACO_lite/535", "input_output_examples": [[[3], [12], [16]], [[2], [4], [4]]]}
{"requirement": "def year_days(year):\n\"\"\"A variation of determining leap years, assuming only integers are used and years can be negative and positive.\n\nWrite a function which will return the days in the year and the year entered in a string.  For example 2000, entered as an integer, will return as a string 2000 has 366 days\n\nThere are a few assumptions we will accept the year 0, even though there is no year 0 in the Gregorian Calendar.\n\nAlso the basic rule for validating a leap year are as follows\n\nMost years that can be divided evenly by 4 are leap years. \n\nException: Century years are NOT leap years UNLESS they can be evenly divided by 400.\n\nSo the years 0, -64 and 2016 will return 366 days.\nWhilst 1974, -10 and 666 will return 365 days.\n\"\"\"", "inputs": [[0], [-64], [2016], [1974], [-10], [666], [1857], [2000], [-300], [-1]], "outputs": [["0 has 366 days"], ["-64 has 366 days"], ["2016 has 366 days"], ["1974 has 365 days"], ["-10 has 365 days"], ["666 has 365 days"], ["1857 has 365 days"], ["2000 has 366 days"], ["-300 has 365 days"], ["-1 has 365 days"]], "starter_code": "def year_days(year):", "canonical_solution": "def year_days(year):\n    days = 365\n    if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:\n        days += 1\n    return '%d has %d days' % (year, days)", "entry_point": "year_days", "task_id": "TACO_lite/536", "input_output_examples": [[[2000], [0], [-64], [2016], [1974], [-10], [666]], [["2000 has 366 days"], ["0 has 366 days"], ["-64 has 366 days"], ["2016 has 366 days"], ["1974 has 365 days"], ["-10 has 365 days"], ["666 has 365 days"]]]}
{"requirement": "def fit_in(a, b, m, n):\n\"\"\"Mr. Square is going on a holiday. He wants to bring 2 of his favorite squares with him, so he put them in his rectangle suitcase.\n\nWrite a function that, given the size of the squares and the suitcase, return whether the squares can fit inside the suitcase.\n```Python\nfit_in(a,b,m,n)\na,b are the sizes of the 2 squares\nm,n are the sizes of the suitcase\n```\n\n# Example\n```Python\nfit_in(1,2,3,2) should return True\nfit_in(1,2,2,1) should return False\nfit_in(3,2,3,2) should return False\nfit_in(1,2,1,2) should return False\n```\n\"\"\"", "inputs": [[1, 2, 3, 2], [1, 2, 2, 1], [3, 2, 3, 2], [1, 2, 1, 2], [6, 5, 8, 7], [6, 6, 12, 6], [7, 1, 7, 8], [10, 10, 11, 11], [7, 2, 9, 7], [7, 2, 8, 7], [4, 1, 5, 3], [1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 2, 1, 4], [3, 2, 4, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 4, 2, 1], [3, 4, 1, 2], [4, 2, 3, 1], [4, 2, 1, 3], [4, 3, 2, 1], [4, 3, 1, 2], [4, 1, 2, 3], [4, 1, 3, 2]], "outputs": [[true], [false], [false], [false], [false], [true], [true], [false], [true], [false], [false], [true], [true], [false], [false], [false], [false], [true], [true], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false]], "starter_code": "def fit_in(a, b, m, n):", "canonical_solution": "def fit_in(a, b, m, n):\n    return max(a, b) <= min(m, n) and a + b <= max(m, n)", "entry_point": "fit_in", "task_id": "TACO_lite/537", "input_output_examples": [[[1, 2, 3, 2], [1, 2, 2, 1], [3, 2, 3, 2], [1, 2, 1, 2]], [[true], [false], [false], [false]]]}
{"requirement": "def insert_dash(num):\n\"\"\"Write a function `insertDash(num)`/`InsertDash(int num)` that will insert dashes ('-') between each two odd numbers in num. For example: if num is 454793 the output should be 4547-9-3. Don't count zero as an odd number.\n\nNote that the number will always be non-negative (>= 0).\n\"\"\"", "inputs": [[454793], [123456], [1003567], [24680], [13579]], "outputs": [["4547-9-3"], ["123456"], ["1003-567"], ["24680"], ["1-3-5-7-9"]], "starter_code": "def insert_dash(num):", "canonical_solution": "import re\n\ndef insert_dash(num):\n    return re.sub('([13579])(?=[13579])', '\\\\1-', str(num))", "entry_point": "insert_dash", "task_id": "TACO_lite/538", "input_output_examples": [[[454793]], [["4547-9-3"]]]}
{"requirement": "def shades_of_grey(n):\n\"\"\"Why would we want to stop to only 50 shades of grey? Let's see to how many we can go. \n\nWrite a function that takes a number n as a parameter and return an array containing n shades of grey in hexadecimal code (`#aaaaaa` for example). The array should be sorted in ascending order starting with `#010101`, `#020202`, etc. (using lower case letters).\n\n```python\ndef shades_of_grey(n):\n  return '''n shades of grey in an array'''\n```\n\nAs a reminder, the grey color is composed by the same number of red, green and blue: `#010101`, `#aeaeae`, `#555555`, etc. Also, `#000000` and `#ffffff` are not accepted values.\n\nWhen n is negative, just return an empty array.\nIf n is higher than 254, just return an array of 254 elements.\n\nHave fun\n\"\"\"", "inputs": [[-1], [0], [1], [254], [5000]], "outputs": [[[]], [[]], [["#010101"]], [["#010101", "#020202", "#030303", "#040404", "#050505", "#060606", "#070707", "#080808", "#090909", "#0a0a0a", "#0b0b0b", "#0c0c0c", "#0d0d0d", "#0e0e0e", "#0f0f0f", "#101010", "#111111", "#121212", "#131313", "#141414", "#151515", "#161616", "#171717", "#181818", "#191919", "#1a1a1a", "#1b1b1b", "#1c1c1c", "#1d1d1d", "#1e1e1e", "#1f1f1f", "#202020", "#212121", "#222222", "#232323", "#242424", "#252525", "#262626", "#272727", "#282828", "#292929", "#2a2a2a", "#2b2b2b", "#2c2c2c", "#2d2d2d", "#2e2e2e", "#2f2f2f", "#303030", "#313131", "#323232", "#333333", "#343434", "#353535", "#363636", "#373737", "#383838", "#393939", "#3a3a3a", "#3b3b3b", "#3c3c3c", "#3d3d3d", "#3e3e3e", "#3f3f3f", "#404040", "#414141", "#424242", "#434343", "#444444", "#454545", "#464646", "#474747", "#484848", "#494949", "#4a4a4a", "#4b4b4b", "#4c4c4c", "#4d4d4d", "#4e4e4e", "#4f4f4f", "#505050", "#515151", "#525252", "#535353", "#545454", "#555555", "#565656", "#575757", "#585858", "#595959", "#5a5a5a", "#5b5b5b", "#5c5c5c", "#5d5d5d", "#5e5e5e", "#5f5f5f", "#606060", "#616161", "#626262", "#636363", "#646464", "#656565", "#666666", "#676767", "#686868", "#696969", "#6a6a6a", "#6b6b6b", "#6c6c6c", "#6d6d6d", "#6e6e6e", "#6f6f6f", "#707070", "#717171", "#727272", "#737373", "#747474", "#757575", "#767676", "#777777", "#787878", "#797979", "#7a7a7a", "#7b7b7b", "#7c7c7c", "#7d7d7d", "#7e7e7e", "#7f7f7f", "#808080", "#818181", "#828282", "#838383", "#848484", "#858585", "#868686", "#878787", "#888888", "#898989", "#8a8a8a", "#8b8b8b", "#8c8c8c", "#8d8d8d", "#8e8e8e", "#8f8f8f", "#909090", "#919191", "#929292", "#939393", "#949494", "#959595", "#969696", "#979797", "#989898", "#999999", "#9a9a9a", "#9b9b9b", "#9c9c9c", "#9d9d9d", "#9e9e9e", "#9f9f9f", "#a0a0a0", "#a1a1a1", "#a2a2a2", "#a3a3a3", "#a4a4a4", "#a5a5a5", "#a6a6a6", "#a7a7a7", "#a8a8a8", "#a9a9a9", "#aaaaaa", "#ababab", "#acacac", "#adadad", "#aeaeae", "#afafaf", "#b0b0b0", "#b1b1b1", "#b2b2b2", "#b3b3b3", "#b4b4b4", "#b5b5b5", "#b6b6b6", "#b7b7b7", "#b8b8b8", "#b9b9b9", "#bababa", "#bbbbbb", "#bcbcbc", "#bdbdbd", "#bebebe", "#bfbfbf", "#c0c0c0", "#c1c1c1", "#c2c2c2", "#c3c3c3", "#c4c4c4", "#c5c5c5", "#c6c6c6", "#c7c7c7", "#c8c8c8", "#c9c9c9", "#cacaca", "#cbcbcb", "#cccccc", "#cdcdcd", "#cecece", "#cfcfcf", "#d0d0d0", "#d1d1d1", "#d2d2d2", "#d3d3d3", "#d4d4d4", "#d5d5d5", "#d6d6d6", "#d7d7d7", "#d8d8d8", "#d9d9d9", "#dadada", "#dbdbdb", "#dcdcdc", "#dddddd", "#dedede", "#dfdfdf", "#e0e0e0", "#e1e1e1", "#e2e2e2", "#e3e3e3", "#e4e4e4", "#e5e5e5", "#e6e6e6", "#e7e7e7", "#e8e8e8", "#e9e9e9", "#eaeaea", "#ebebeb", "#ececec", "#ededed", "#eeeeee", "#efefef", "#f0f0f0", "#f1f1f1", "#f2f2f2", "#f3f3f3", "#f4f4f4", "#f5f5f5", "#f6f6f6", "#f7f7f7", "#f8f8f8", "#f9f9f9", "#fafafa", "#fbfbfb", "#fcfcfc", "#fdfdfd", "#fefefe"]], [["#010101", "#020202", "#030303", "#040404", "#050505", "#060606", "#070707", "#080808", "#090909", "#0a0a0a", "#0b0b0b", "#0c0c0c", "#0d0d0d", "#0e0e0e", "#0f0f0f", "#101010", "#111111", "#121212", "#131313", "#141414", "#151515", "#161616", "#171717", "#181818", "#191919", "#1a1a1a", "#1b1b1b", "#1c1c1c", "#1d1d1d", "#1e1e1e", "#1f1f1f", "#202020", "#212121", "#222222", "#232323", "#242424", "#252525", "#262626", "#272727", "#282828", "#292929", "#2a2a2a", "#2b2b2b", "#2c2c2c", "#2d2d2d", "#2e2e2e", "#2f2f2f", "#303030", "#313131", "#323232", "#333333", "#343434", "#353535", "#363636", "#373737", "#383838", "#393939", "#3a3a3a", "#3b3b3b", "#3c3c3c", "#3d3d3d", "#3e3e3e", "#3f3f3f", "#404040", "#414141", "#424242", "#434343", "#444444", "#454545", "#464646", "#474747", "#484848", "#494949", "#4a4a4a", "#4b4b4b", "#4c4c4c", "#4d4d4d", "#4e4e4e", "#4f4f4f", "#505050", "#515151", "#525252", "#535353", "#545454", "#555555", "#565656", "#575757", "#585858", "#595959", "#5a5a5a", "#5b5b5b", "#5c5c5c", "#5d5d5d", "#5e5e5e", "#5f5f5f", "#606060", "#616161", "#626262", "#636363", "#646464", "#656565", "#666666", "#676767", "#686868", "#696969", "#6a6a6a", "#6b6b6b", "#6c6c6c", "#6d6d6d", "#6e6e6e", "#6f6f6f", "#707070", "#717171", "#727272", "#737373", "#747474", "#757575", "#767676", "#777777", "#787878", "#797979", "#7a7a7a", "#7b7b7b", "#7c7c7c", "#7d7d7d", "#7e7e7e", "#7f7f7f", "#808080", "#818181", "#828282", "#838383", "#848484", "#858585", "#868686", "#878787", "#888888", "#898989", "#8a8a8a", "#8b8b8b", "#8c8c8c", "#8d8d8d", "#8e8e8e", "#8f8f8f", "#909090", "#919191", "#929292", "#939393", "#949494", "#959595", "#969696", "#979797", "#989898", "#999999", "#9a9a9a", "#9b9b9b", "#9c9c9c", "#9d9d9d", "#9e9e9e", "#9f9f9f", "#a0a0a0", "#a1a1a1", "#a2a2a2", "#a3a3a3", "#a4a4a4", "#a5a5a5", "#a6a6a6", "#a7a7a7", "#a8a8a8", "#a9a9a9", "#aaaaaa", "#ababab", "#acacac", "#adadad", "#aeaeae", "#afafaf", "#b0b0b0", "#b1b1b1", "#b2b2b2", "#b3b3b3", "#b4b4b4", "#b5b5b5", "#b6b6b6", "#b7b7b7", "#b8b8b8", "#b9b9b9", "#bababa", "#bbbbbb", "#bcbcbc", "#bdbdbd", "#bebebe", "#bfbfbf", "#c0c0c0", "#c1c1c1", "#c2c2c2", "#c3c3c3", "#c4c4c4", "#c5c5c5", "#c6c6c6", "#c7c7c7", "#c8c8c8", "#c9c9c9", "#cacaca", "#cbcbcb", "#cccccc", "#cdcdcd", "#cecece", "#cfcfcf", "#d0d0d0", "#d1d1d1", "#d2d2d2", "#d3d3d3", "#d4d4d4", "#d5d5d5", "#d6d6d6", "#d7d7d7", "#d8d8d8", "#d9d9d9", "#dadada", "#dbdbdb", "#dcdcdc", "#dddddd", "#dedede", "#dfdfdf", "#e0e0e0", "#e1e1e1", "#e2e2e2", "#e3e3e3", "#e4e4e4", "#e5e5e5", "#e6e6e6", "#e7e7e7", "#e8e8e8", "#e9e9e9", "#eaeaea", "#ebebeb", "#ececec", "#ededed", "#eeeeee", "#efefef", "#f0f0f0", "#f1f1f1", "#f2f2f2", "#f3f3f3", "#f4f4f4", "#f5f5f5", "#f6f6f6", "#f7f7f7", "#f8f8f8", "#f9f9f9", "#fafafa", "#fbfbfb", "#fcfcfc", "#fdfdfd", "#fefefe"]]], "starter_code": "def shades_of_grey(n):", "canonical_solution": "def shades_of_grey(n):\n    if n > 254:\n        n = 254\n    return ['#%02x%02x%02x' % (i, i, i) for i in range(1, n + 1)]", "entry_point": "shades_of_grey", "task_id": "TACO_lite/539", "input_output_examples": [[[-1]], [[[]]]]}
{"requirement": "def vowel_shift(text, n):\n\"\"\"You get a \"text\" and have to shift the vowels by \"n\" positions to the right.\n(Negative value for n should shift to the left.)\n\"Position\" means the vowel's position if taken as one item in a list of all vowels within the string.\nA shift by 1 would mean, that every vowel shifts to the place of the next vowel.\nShifting over the edges of the text should continue at the other edge.\n\nExample:\n\ntext = \"This is a test!\"\nn = 1\noutput = \"Thes is i tast!\"\n\ntext = \"This is a test!\"\nn = 3\noutput = \"This as e tist!\"\n\nIf text is null or empty return exactly this value.\nVowels are \"a,e,i,o,u\".\n\n\n\nHave fun coding it and please don't forget to vote and rank this kata! :-)\n\nI have created other katas. Have a look if you like coding and challenges.\n\"\"\"", "inputs": [[null, 0], ["", 0], ["This is a test!", 0], ["This is a test!", 1], ["This is a test!", 3], ["This is a test!", 4], ["This is a test!", -1], ["This is a test!", -5], ["Brrrr", 99], ["AEIOUaeiou", 1]], "outputs": [[null], [""], ["This is a test!"], ["Thes is i tast!"], ["This as e tist!"], ["This is a test!"], ["This as e tist!"], ["This as e tist!"], ["Brrrr"], ["uAEIOUaeio"]], "starter_code": "def vowel_shift(text, n):", "canonical_solution": "import re\nfrom collections import deque\n\ndef vowel_shift(text, n):\n    try:\n        tokens = re.split('([aeiouAEIOU])', text)\n        if len(tokens) > 1:\n            vowels = deque(tokens[1::2])\n            vowels.rotate(n)\n            tokens[1::2] = vowels\n        return ''.join(tokens)\n    except TypeError:\n        return None", "entry_point": "vowel_shift", "task_id": "TACO_lite/540", "input_output_examples": [[["This is a test!", 1], ["This is a test!", 3], ["", 0]], [["Thes is i tast!"], ["This as e tist!"], [""]]]}
{"requirement": "def factor_sum(n):\n\"\"\"# Task\n Consider the following operation:\n \n We take a positive integer `n` and replace it with the sum of its `prime factors` (if a prime number is presented multiple times in the factorization of `n`, then it's counted the same number of times in the sum). \n \n This operation is applied sequentially first to the given number, then to the first result, then to the second result and so on.., until the result remains the same.\n\n  Given number `n`, find the final result of the operation.\n\n# Example\n\n  For `n = 24`, the output should be `5`.\n```\n24 -> (2 + 2 + 2 + 3) = 9 -> (3 + 3) = 6 -> (2 + 3) = 5 -> 5.\nSo the answer for n = 24 is 5.```\n\n# Input/Output\n\n\n - `[input]` integer `n`\n\n  Constraints: `2 ≤ n ≤ 10000.`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[24], [35], [156], [4], [31]], "outputs": [[5], [7], [5], [4], [31]], "starter_code": "def factor_sum(n):", "canonical_solution": "def factor_sum(n):\n    while True:\n        i = 2\n        s = 0\n        a = n\n        while i <= n:\n            if n % i == 0:\n                s += i\n                n /= i\n                if n == 1:\n                    break\n            else:\n                i += 1\n        if a != s:\n            n = s\n        else:\n            return s", "entry_point": "factor_sum", "task_id": "TACO_lite/541", "input_output_examples": [[[24]], [[5]]]}
{"requirement": "def palin(length, pos):\n\"\"\"Four-digit palindromes start with `[1001,1111,1221,1331,1441,1551,1551,...]` and the number at position `2` is `1111`.  \n\nYou will be given two numbers `a` and `b`. Your task is to return the `a-digit` palindrome at position `b` if the palindromes were arranged in increasing order. \n\nTherefore, `palin(4,2) = 1111`, because that is the second element of the `4-digit` palindrome series.\n\nMore examples in the test cases. Good luck!\n\nIf you like palindrome Katas, please try:\n\n[Palindrome integer composition](https://www.codewars.com/kata/599b1a4a3c5292b4cc0000d5)\n\n[Life without primes](https://www.codewars.com/kata/59f8750ac374cba8f0000033)\n\"\"\"", "inputs": [[2, 2], [3, 10], [4, 5], [5, 19], [6, 3], [6, 20], [7, 3]], "outputs": [[22], [191], [1441], [11811], [102201], [119911], [1002001]], "starter_code": "def palin(length, pos):", "canonical_solution": "def palin(length, pos):\n    left = str(10 ** ((length - 1) // 2) + (pos - 1))\n    right = left[::-1][length % 2:]\n    return int(left + right)", "entry_point": "palin", "task_id": "TACO_lite/542", "input_output_examples": [[[4, 2], [2, 2]], [[1111], [22]]]}
{"requirement": "def split_without_loss(s, split_p):\n\"\"\"Most languages have a `split` function that lets you turn a string like `“hello world”` into an array like`[“hello”, “world”]`. But what if we don't want to lose the separator? Something like `[“hello”, “ world”]`.\n\n#### Task:\n\nYour job is to implement a function, (`split_without_loss` in Ruby/Crystal, and `splitWithoutLoss` in JavaScript/CoffeeScript), that takes two arguments, `str` (`s` in Python), and `split_p`, and returns the string, split by `split_p`, but with the separator intact. There will be one '|' marker in `split_p`. `str` or `s` will never have a '|' in it. All the text before the marker is moved to the first string of the split, while all the text that is after it is moved to the second one. **Empty strings must be removed from the output, and the input should NOT be modified.**\n\nWhen tests such as `(str = \"aaaa\", split_p = \"|aa\")` are entered, do not split the string on overlapping regions. For this example, return `[\"aa\", \"aa\"]`, not `[\"aa\", \"aa\", \"aa\"]`.\n\n#### Examples (see example test cases for more):\n\n```python\nsplit_without_loss(\"hello world!\", \" |\") #=> [\"hello \", \"world!\"]\nsplit_without_loss(\"hello world!\", \"o|rl\") #=> [\"hello wo\", \"rld!\"]\nsplit_without_loss(\"hello world!\", \"h|ello world!\") #=> [\"h\", \"ello world!\"]\nsplit_without_loss(\"hello world! hello world!\", \" |\")\n                  #=> [\"hello \", \"world! \", \"hello \", \"world!\"]\nsplit_without_loss(\"hello world! hello world!\", \"o|rl\")\n                  #=> [\"hello wo\", \"rld! hello wo\", \"rld!\"]\nsplit_without_loss(\"hello  hello  hello\", \" | \")\n                  #=> [\"hello \", \" hello \", \" hello\"]\nsplit_without_loss(\" hello world\", \" |\")\n                  #=> [\" \", \"hello \", \"world\"]\nsplit_without_loss(\"  hello hello hello\", \" |\")\n                  #=> [\" \", \" \", \"hello \", \"hello \", \"hello\"]\nsplit_without_loss(\"  hello hello hello  \", \" |\")\n                  #=> [\" \", \" \", \"hello \", \"hello \", \"hello \", \" \"]\nsplit_without_loss(\"  hello hello hello\", \"| \")\n                  #=> [\" \", \" hello\", \" hello\", \" hello\"]\n```\n\nAlso check out my other creations — [Identify Case](https://www.codewars.com/kata/identify-case), [Adding Fractions](https://www.codewars.com/kata/adding-fractions),\n[Random Integers](https://www.codewars.com/kata/random-integers), [Implement String#transpose](https://www.codewars.com/kata/implement-string-number-transpose), [Implement Array#transpose!](https://www.codewars.com/kata/implement-array-number-transpose), [Arrays and Procs #1](https://www.codewars.com/kata/arrays-and-procs-number-1), and [Arrays and Procs #2](https://www.codewars.com/kata/arrays-and-procs-number-2)\n\nIf you notice any issues/bugs/missing test cases whatsoever, do not hesitate to report an issue or suggestion. Enjoy!\n\"\"\"", "inputs": [["hello world!", " |"], ["hello world!", "o|rl"], ["hello world!", "ello| "], ["hello world!", "hello wo|rld!"], ["hello world!", "h|ello world!"], ["hello world! hello world!", " |"], ["hello world! hello world!", "o|rl"], ["hello world! hello world!", "ello| "], ["hello world! hello world!", "hello wo|rld!"], ["hello  hello  hello", " | "], [" hello world", " |"], ["aaaa", "|aa"], ["aaa", "|aa"], ["aaaaa", "|aa"], ["ababa", "|ab"], ["abababa", "|ab"], ["abababa", "|a"], ["  hello hello hello", " |"], ["aaaa", "aa|"], ["  hello hello hello  ", " |"], ["aaaaaa", "aa|"], ["hello hello hello ", "| "], ["aaaaaa", "|aa"], ["  hello hello hello", "| "], ["aaaaaaaa", "|aa"]], "outputs": [[["hello ", "world!"]], [["hello wo", "rld!"]], [["hello", " world!"]], [["hello wo", "rld!"]], [["h", "ello world!"]], [["hello ", "world! ", "hello ", "world!"]], [["hello wo", "rld! hello wo", "rld!"]], [["hello", " world! hello", " world!"]], [["hello wo", "rld! hello wo", "rld!"]], [["hello ", " hello ", " hello"]], [[" ", "hello ", "world"]], [["aa", "aa"]], [["aaa"]], [["aa", "aaa"]], [["ab", "aba"]], [["ab", "ab", "aba"]], [["ab", "ab", "ab", "a"]], [[" ", " ", "hello ", "hello ", "hello"]], [["aa", "aa"]], [[" ", " ", "hello ", "hello ", "hello ", " "]], [["aa", "aa", "aa"]], [["hello", " hello", " hello", " "]], [["aa", "aa", "aa"]], [[" ", " hello", " hello", " hello"]], [["aa", "aa", "aa", "aa"]]], "starter_code": "def split_without_loss(s, split_p):", "canonical_solution": "def split_without_loss(s, split_p):\n    return [i for i in s.replace(split_p.replace('|', ''), split_p).split('|') if i]", "entry_point": "split_without_loss", "task_id": "TACO_lite/543", "input_output_examples": [[["hello world!", " |"], ["hello world!", "o|rl"], ["hello world!", "h|ello world!"], ["hello world! hello world!", " |"], ["hello world! hello world!", "o|rl"], ["hello  hello  hello", " | "], [" hello world", " |"], ["  hello hello hello", " |"], ["  hello hello hello  ", " |"], ["  hello hello hello", "| "]], [[["hello ", "world!"]], [["hello wo", "rld!"]], [["h", "ello world!"]], [["hello ", "world! ", "hello ", "world!"]], [["hello wo", "rld! hello wo", "rld!"]], [["hello ", " hello ", " hello"]], [[" ", "hello ", "world"]], [[" ", " ", "hello ", "hello ", "hello"]], [[" ", " ", "hello ", "hello ", "hello ", " "]], [[" ", " hello", " hello", " hello"]]]]}
{"requirement": "def is_nice(arr):\n\"\"\"A `Nice array` is defined to be an array where for every value `n` in the array, there is also an element `n-1` or `n+1` in the array.\n\nexample:\n\n```\n[2,10,9,3] is Nice array because\n\n2=3-1\n10=9+1\n3=2+1\n9=10-1\n```\nWrite a function named `isNice`/`IsNice` that returns `true` if its array argument is a Nice array, else `false`. You should also return `false` if `input` array has `no` elements.\n\"\"\"", "inputs": [[[2, 10, 9, 3]], [[3, 4, 5, 7]], [[0, 2, 19, 4, 4]], [[3, 2, 1, 0]], [[3, 2, 10, 4, 1, 6]], [[1, 1, 8, 3, 1, 1]], [[0, 1, 2, 3]], [[1, 2, 3, 4]], [[0, -1, 1]], [[0, 2, 3]], [[0]], [[]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[0, 1, 3, -2, 5, 4]], [[0, -1, -2, -3, -4]], [[1, -1, 3]], [[1, -1, 2, -2, 3, -3, 6]], [[2, 2, 3, 3, 3]], [[1, 1, 1, 2, 1, 1]]], "outputs": [[true], [false], [false], [true], [false], [false], [true], [true], [true], [false], [false], [false], [true], [false], [true], [false], [false], [true], [true]], "starter_code": "def is_nice(arr):", "canonical_solution": "def is_nice(arr):\n    s = set(arr)\n    return bool(arr) and all((n + 1 in s or n - 1 in s for n in s))", "entry_point": "is_nice", "task_id": "TACO_lite/544", "input_output_examples": [[[[2, 10, 9, 3]], [[]]], [[true], [false]]]}
{"requirement": "Happy traveller [Part 1]\n\nThere is a play grid NxN; Always square! \n\n   0  1  2  3\n0 [o, o, o, X]\n1 [o, o, o, o]\n2 [o, o, o, o]\n3 [o, o, o, o]\n\n\nYou start from a random point. I mean, you are given the coordinates of your start position in format (row, col). \n\nAnd your TASK is to define the number of unique paths to reach position X (always in the top right corner).\n\n\nFrom any point you can go only UP or RIGHT.\n\n\nImplement a function count_paths(N, (row, col)) which returns int; \nAssume input params are always valid.\n\n\nExample:\n\ncount_paths(1, (0, 0))\ngrid 1x1:\n\n[X]\n You are already in the target point, so return 0\n\n\ncount_paths(2, (1, 0))\ngrid 2x2:\n\n[o, X]\n[@, o]\n You are at point @; you can move UP-RIGHT or RIGHT-UP, and there are 2 possible unique paths here\n\ncount_paths(2, (1, 1))\ngrid 2x2:\n\n[o, X]\n[o, @]\n You are at point @; you can move only UP, so there is 1 possible unique path here\n\ncount_paths(3, (1, 0))\ngrid 3x3:\n\n[o, o, X]\n[@, o, o]\n[o, o, o]\n You are at point @; you can move UP-RIGHT-RIGHT or RIGHT-UP-RIGHT, or RIGHT-RIGHT-UP, and there are 3 possible unique paths here\n\n\nI think it's pretty clear =)\n\nbtw. you can use preloaded Grid class, which constructs 2d array for you. It's very very basic and simple. You can use numpy instead or any other way to produce the correct answer =)\n grid = Grid(2, 2, 0) \nsamegrid = Grid.square(2) will give you a grid[2][2], which you can print easily to console. \n\nprint(grid)\n\n\n[0, 0]\n[0, 0]\n\n\nEnjoy!\n\nYou can continue adventures:\nHappy traveller [Part 2]", "inputs": [[1, [0, 0]], [2, [1, 0]], [2, [1, 1]], [3, [1, 0]], [5, [4, 0]], [6, [5, 0]], [7, [6, 0]]], "outputs": [[0], [2], [1], [3], [70], [252], [924]], "starter_code": "def count_paths(N, coords):\n\t", "canonical_solution": "from math import factorial as f\ncount_paths = lambda n, c: f(c[0] + abs(n - c[1] - 1)) // (f(abs(n - c[1] - 1)) * f(c[0])) if n != 1 else 0", "entry_point": "count_paths", "task_id": "TACO_lite/545", "input_output_examples": [[[1, [0, 0]], [2, [1, 0]], [2, [1, 1]], [3, [1, 0]]], [[0], [2], [1], [3]]]}
{"requirement": "def ds_multof_pfs(n, m):\n\"\"\"The numbers 12, 63 and 119 have something in common related with their divisors and their prime factors, let's see it.\n```\nNumbers PrimeFactorsSum(pfs)        DivisorsSum(ds)              Is ds divisible by pfs\n12         2 + 2 + 3 = 7         1 + 2 + 3 + 4 + 6 + 12 = 28            28 / 7 = 4,  Yes\n63         3 + 3 + 7 = 13        1 + 3 + 7 + 9 + 21 + 63 = 104         104 / 13 = 8, Yes\n119        7 + 17 = 24           1 + 7 + 17 + 119 = 144                144 / 24 = 6, Yes\n```\nThere is an obvius property you can see: the sum of the divisors of a number is divisible by the sum of its prime factors.\n\nWe need the function ```ds_multof_pfs()``` that receives two arguments: ```nMin``` and  ```nMax```, as a lower and upper limit (inclusives), respectively, and outputs a sorted list with the numbers that fulfill the property described above.\n\nWe represent the features of the described function:\n```python\nds_multof_pfs(nMin, nMax) -----> [n1, n2, ....., nl] # nMin ≤ n1 < n2 < ..< nl ≤ nMax\n```\nLet's see some cases:\n```python\nds_multof_pfs(10, 100) == [12, 15, 35, 42, 60, 63, 66, 68, 84, 90, 95]\n\nds_multof_pfs(20, 120) == [35, 42, 60, 63, 66, 68, 84, 90, 95, 110, 114, 119]\n```\nEnjoy it!!\n\"\"\"", "inputs": [[10, 100], [20, 120], [50, 140]], "outputs": [[[12, 15, 35, 42, 60, 63, 66, 68, 84, 90, 95]], [[35, 42, 60, 63, 66, 68, 84, 90, 95, 110, 114, 119]], [[60, 63, 66, 68, 84, 90, 95, 110, 114, 119, 140]]], "starter_code": "def ds_multof_pfs(n, m):", "canonical_solution": "from bisect import bisect_left\na = [12, 15, 35, 42, 60, 63, 66, 68, 84, 90, 95, 110, 114, 119, 140, 143, 152, 168, 189, 195, 204, 209, 216, 234, 245, 258, 264, 270, 280, 287, 290, 294, 297, 319, 322, 323, 352, 368, 377, 380, 384, 396, 470, 476, 480, 506, 510, 527, 531, 544, 552, 558, 559, 572, 588, 616, 621, 693, 702, 741, 744, 756, 760, 779, 812, 819, 825, 837, 855, 880, 899, 902, 923, 940, 950, 952, 989, 990, 1007, 1010, 1026, 1044, 1056, 1064, 1078, 1080, 1102, 1144, 1170, 1188, 1189, 1197, 1199, 1280, 1288, 1292, 1298, 1334, 1343, 1349, 1365, 1372, 1375, 1386, 1392, 1440, 1456, 1470, 1494, 1566, 1595, 1620, 1625, 1638, 1652, 1672, 1696, 1700, 1704, 1750, 1763, 1768, 1785, 1804, 1836, 1840, 1845, 1887, 1908, 1914, 1917, 1919, 1944, 1950, 1980, 1989, 1998, 2024, 2052, 2060, 2070, 2075, 2080, 2107, 2130, 2145, 2158, 2159, 2162, 2208, 2240, 2242, 2272, 2340, 2392, 2448, 2464, 2496, 2507, 2520, 2541, 2632, 2660, 2668, 2673, 2688, 2691, 2728, 2759, 2772, 2784, 2805, 2808, 2828, 2835, 2842, 2882, 2911, 2970, 2992, 3000, 3002, 3015, 3026, 3069, 3072, 3078, 3096, 3132, 3159, 3160, 3168, 3239, 3266, 3300, 3304, 3366, 3375, 3402, 3422, 3471, 3485, 3496, 3500, 3560, 3572, 3596, 3599, 3624, 3652, 3690, 3705, 3720, 3752, 3773, 3784, 3816, 3818, 3827, 3840, 3852, 3933, 3936, 3952, 3990, 4018, 4031, 4060, 4077, 4116, 4128, 4136, 4165, 4182, 4216, 4256, 4264, 4292, 4305, 4320, 4368, 4389, 4410, 4437, 4446, 4522, 4524, 4557, 4592, 4607, 4625, 4644, 4648, 4653, 4655, 4662, 4680, 4704, 4706, 4719, 4720, 4731, 4736, 4750, 4785, 4806, 4810, 4860, 4864, 4872, 4992, 4998, 5005, 5015, 5032, 5040, 5070, 5076, 5125, 5166, 5175, 5183, 5200, 5207, 5225, 5229, 5249, 5264, 5307, 5310, 5346, 5400, 5424, 5434, 5452, 5459, 5460, 5472, 5508, 5543, 5544, 5546, 5560, 5586, 5590, 5664, 5698, 5704, 5720, 5728, 5775, 5800, 5848, 5850, 5865, 5886, 5950, 5992, 6000, 6006, 6018, 6039, 6095, 6150, 6156, 6160, 6171, 6250, 6256, 6270, 6424, 6439, 6460, 6510, 6517, 6528, 6565, 6579, 6580, 6600, 6624, 6656, 6660, 6688, 6725, 6750, 6776, 6802, 6804, 6806, 6816, 6837, 6840, 6860, 6887, 6903, 6909, 6944, 6952, 6960, 7007, 7038, 7040, 7050, 7052, 7067, 7140, 7144, 7150, 7176, 7210, 7236, 7254, 7279, 7314, 7336, 7384, 7395, 7410, 7425, 7426, 7462, 7506, 7524, 7532, 7544, 7568, 7581, 7616, 7668, 7682, 7700, 7701, 7722, 7735, 7739, 7742, 7750, 7752, 7821, 7830, 7872, 7878, 7888, 7904, 7912, 7964, 8140, 8159, 8225, 8232, 8280, 8330, 8349, 8352, 8379, 8385, 8397, 8415, 8470, 8500, 8528, 8568, 8575, 8580, 8639, 8642, 8673, 8692, 8721, 8745, 8786, 8800, 8829, 8832, 8856, 8874, 8960, 8964, 8991, 8993, 9063, 9064, 9088, 9112, 9164, 9179, 9180, 9218, 9240, 9256, 9282, 9308, 9310, 9328, 9352, 9375, 9432, 9460, 9468, 9504, 9537, 9593, 9633, 9639, 9660, 9701, 9720, 9768, 9794, 9799, 9856, 9869, 9870, 9900, 9911, 9912, 9920, 9933, 9936, 9947, 9956, 9963, 9996, 10005, 10064, 10080, 10120, 10150, 10185, 10200, 10207, 10240, 10283, 10296, 10395, 10403, 10465, 10494, 10502, 10508, 10528, 10545, 10582, 10647, 10660, 10664, 10672, 10763, 10792, 10848, 10864, 10877, 10880, 10989, 11050, 11088, 11109, 11125, 11128, 11132, 11151, 11160, 11172, 11176, 11193, 11214, 11223, 11224, 11253, 11266, 11275, 11305, 11340, 11342, 11408, 11417, 11439, 11468, 11475, 11500, 11505, 11556, 11560, 11613, 11648, 11659, 11662, 11663, 11682, 11750, 11774, 11800, 11844, 11865, 11904, 11970, 11979, 11985, 12000, 12006, 12095, 12098, 12136, 12141, 12180, 12208, 12222, 12240, 12276, 12319, 12328, 12360, 12366, 12397, 12412, 12441, 12460, 12474, 12519, 12524, 12540, 12555, 12558, 12561, 12576, 12580, 12628, 12638, 12712, 12740, 12784, 12792, 12851, 12903, 12960, 12975, 12992, 13056, 13068, 13144, 13199, 13209, 13230, 13260, 13280, 13300, 13332, 13439, 13464, 13500, 13509, 13529, 13536, 13566, 13572, 13585, 13608, 13629, 13653, 13662, 13677, 13702, 13716, 13720, 13750, 13761, 13770, 13826, 13840, 13862, 13869, 13912, 13919, 14098, 14100, 14104, 14105, 14144, 14145, 14190, 14195, 14250, 14256, 14259, 14260, 14299, 14326, 14344, 14382, 14396, 14402, 14504, 14514, 14520, 14616, 14632, 14645, 14685, 14688, 14690, 14700, 14732, 14749, 14824, 14850, 14875, 14940, 14950, 14972, 14973, 14994, 15008, 15050, 15066, 15088, 15105, 15210, 15249, 15250, 15272, 15288, 15435, 15480, 15503, 15539, 15540, 15544, 15582, 15602, 15631, 15664, 15698, 15708, 15730, 15732, 15785, 15870, 15873, 15878, 15912, 15930, 15960]\n\ndef ds_multof_pfs(n, m):\n    return a[bisect_left(a, n):bisect_left(a, m + 1)]", "entry_point": "ds_multof_pfs", "task_id": "TACO_lite/546", "input_output_examples": [[[10, 100], [20, 120]], [[[12, 15, 35, 42, 60, 63, 66, 68, 84, 90, 95]], [[35, 42, 60, 63, 66, 68, 84, 90, 95, 110, 114, 119]]]]}
{"requirement": "def protein(rna):\n\"\"\"The central dogma of molecular biology is that DNA is transcribed into RNA, which is then tranlsated into protein. RNA, like DNA, is a long strand of nucleic acids held together by a sugar backbone (ribose in this case). Each segment of three bases is called a codon. Molecular machines called ribosomes translate the RNA codons into amino acid chains, called polypeptides which are then folded into a protein. \n\nProtein sequences are easily visualized in much the same way that DNA and RNA are, as large strings of letters. An important thing to note is that the 'Stop' codons do not encode for a specific amino acid. Their only function is to stop translation of the protein, as such they are not incorporated into the polypeptide chain. 'Stop' codons should not be in the final protein sequence. To save a you a lot of unnecessary (and boring) typing the keys and values for your amino acid dictionary are provided.\n                         \nGiven a string of RNA, create a funciton which translates the RNA into its protein sequence. Note: the test cases will always produce a valid string.\n\n```python\nprotein('UGCGAUGAAUGGGCUCGCUCC') returns 'CDEWARS'\n```\n\nIncluded as test cases is a real world example! The last example test case encodes for a protein called green fluorescent protein; once spliced into the genome of another organism, proteins like GFP allow biologists to visualize cellular processes!\n\nAmino Acid Dictionary\n----------------------\n\n```python\n    # Phenylalanine\n    'UUC':'F', 'UUU':'F',\n    # Leucine\n    'UUA':'L', 'UUG':'L', 'CUU':'L', 'CUC':'L','CUA':'L','CUG':'L', \n    # Isoleucine\n    'AUU':'I', 'AUC':'I', 'AUA':'I', \n    # Methionine\n    'AUG':'M', \n    # Valine\n    'GUU':'V', 'GUC':'V', 'GUA':'V', 'GUG':'V', \n    # Serine\n    'UCU':'S', 'UCC':'S', 'UCA':'S', 'UCG':'S', 'AGU':'S', 'AGC':'S', \n    # Proline\n    'CCU':'P', 'CCC':'P', 'CCA':'P', 'CCG':'P', \n    # Threonine\n    'ACU':'T', 'ACC':'T', 'ACA':'T', 'ACG':'T',\n    # Alanine\n    'GCU':'A', 'GCC':'A', 'GCA':'A', 'GCG':'A', \n    # Tyrosine\n    'UAU':'Y', 'UAC':'Y', \n    # Histidine\n    'CAU':'H', 'CAC':'H',\n    # Glutamine\n    'CAA':'Q', 'CAG':'Q', \n    # Asparagine\n    'AAU':'N', 'AAC':'N', \n    # Lysine\n    'AAA':'K', 'AAG':'K',\n    # Aspartic Acid\n    'GAU':'D', 'GAC':'D', \n    # Glutamic Acid\n    'GAA':'E', 'GAG':'E',\n    # Cystine\n    'UGU':'C', 'UGC':'C',\n    # Tryptophan\n    'UGG':'W', \n    # Arginine\n    'CGU':'R', 'CGC':'R', 'CGA':'R', 'CGG':'R', 'AGA':'R', 'AGG':'R', \n    # Glycine\n    'GGU':'G',  'GGC':'G', 'GGA':'G', 'GGG':'G', \n    # Stop codon\n    'UAA':'Stop', 'UGA':'Stop', 'UAG':'Stop'\n```\n\"\"\"", "inputs": [["AUGUGA"], ["AUGUAUAAA"], ["UGCGAUGAAUGGGCUCGCUCC"], ["AUGUUAAUUUGA"], ["AUGUCCUUCCAUCAAGGAAACCAUGCGCGUUCAGCUUUCUGA"], ["AUGCUUCAAGUGCACUGGAAAAGGAGAGGGAAAACCAGUUGA"], ["AUGGCGUUCAGCUUUCUAUGGAGGGUAGUGUACCCAUGCUGA"], ["AUGCAGCUUUCUAUGGAGGGUAGUGUUAACUACCACGCCUGA"], ["AUGCUAUGGAGGGUAGUGUUAACUACCACGCCCAGUACUUGA"], ["AUGCUGAUUAUGGUUGUUGUAUCUUCCUAUCAAAAUAAAACUACCACAUGA"], ["AUGGAGCACAAUAAAAUACCAAUACCACUCACUCUCUACCCUACUCUACUCUCAUGA"], ["AUGUAUCCUUCCAUCAAGGAAACCAUGCGCGUUCAGCUUUCUAUGGAGGGUAGUGUUAACUACCACGCCUUCAAGUGCACUGGAAAAGGAGAGGGAAAACCAUACGAAGGCACCCAAAGCCUGAAUAUUACAAUAACUGAAGGAGGUCCUCUGCCAUUUGCUUUUGACAUUCUGUCACACGCCUUUCAGUAUGGCAUCAAGGUCUUCGCCAAGUACCCCAAAGAAAUUCCUGACUUCUUUAAGCAGUCUCUACCUGGUGGUUUUUCUUGGGAAAGAGUAAGCACCUAUGAAGAUGGAGGAGUGCUUUCAGCUACCCAAGAAACAAGUUUGCAGGGUGAUUGCAUCAUCUGCAAAGUUAAAGUCCUUGGCACCAAUUUUCCCGCAAACGGUCCAGUGAUGCAAAAGAAGACCUGUGGAUGGGAGCCAUCAACUGAAACAGUCAUCCCACGAGAUGGUGGACUUCUGCUUCGCGAUACCCCCGCACUUAUGCUGGCUGACGGAGGUCAUCUUUCUUGCUUCAUGGAAACAACUUACAAGUCGAAGAAAGAGGUAAAGCUUCCAGAACUUCACUUUCAUCAUUUGCGUAUGGAAAAGCUGAACAUAAGUGACGAUUGGAAGACCGUUGAGCAGCACGAGUCUGUGGUGGCUAGCUACUCCCAAGUGCCUUCGAAAUUAGGACAUAACUGA"]], "outputs": [["M"], ["MYK"], ["CDEWARS"], ["MLI"], ["MSFHQGNHARSAF"], ["MLQVHWKRRGKTS"], ["MAFSFLWRVVYPC"], ["MQLSMEGSVNYHA"], ["MLWRVVLTTTPST"], ["MLIMVVVSSYQNKTTT"], ["MEHNKIPIPLTLYPTLLS"], ["MYPSIKETMRVQLSMEGSVNYHAFKCTGKGEGKPYEGTQSLNITITEGGPLPFAFDILSHAFQYGIKVFAKYPKEIPDFFKQSLPGGFSWERVSTYEDGGVLSATQETSLQGDCIICKVKVLGTNFPANGPVMQKKTCGWEPSTETVIPRDGGLLLRDTPALMLADGGHLSCFMETTYKSKKEVKLPELHFHHLRMEKLNISDDWKTVEQHESVVASYSQVPSKLGHN"]], "starter_code": "def protein(rna):", "canonical_solution": "import re\ndict = {'UUC': 'F', 'UUU': 'F', 'UUA': 'L', 'UUG': 'L', 'CUU': 'L', 'CUC': 'L', 'CUA': 'L', 'CUG': 'L', 'AUU': 'I', 'AUC': 'I', 'AUA': 'I', 'AUG': 'M', 'GUU': 'V', 'GUC': 'V', 'GUA': 'V', 'GUG': 'V', 'UCU': 'S', 'UCC': 'S', 'UCA': 'S', 'UCG': 'S', 'AGU': 'S', 'AGC': 'S', 'CCU': 'P', 'CCC': 'P', 'CCA': 'P', 'CCG': 'P', 'ACU': 'T', 'ACC': 'T', 'ACA': 'T', 'ACG': 'T', 'GCU': 'A', 'GCC': 'A', 'GCA': 'A', 'GCG': 'A', 'UAU': 'Y', 'UAC': 'Y', 'CAU': 'H', 'CAC': 'H', 'CAA': 'Q', 'CAG': 'Q', 'AAU': 'N', 'AAC': 'N', 'AAA': 'K', 'AAG': 'K', 'GAU': 'D', 'GAC': 'D', 'GAA': 'E', 'GAG': 'E', 'UGU': 'C', 'UGC': 'C', 'UGG': 'W', 'CGU': 'R', 'CGC': 'R', 'CGA': 'R', 'CGG': 'R', 'AGA': 'R', 'AGG': 'R', 'GGU': 'G', 'GGC': 'G', 'GGA': 'G', 'GGG': 'G'}\n\ndef protein(rna):\n    return re.sub('.{3}', lambda r: dict.get(r.group(0), ''), rna)", "entry_point": "protein", "task_id": "TACO_lite/547", "input_output_examples": [[["UGCGAUGAAUGGGCUCGCUCC"], ["AUGUGA"]], [["CDEWARS"], ["M"]]]}
{"requirement": "def get_sum(a, b):\n\"\"\"Given two integers `a` and `b`, which can be positive or negative, find the sum of all the numbers between including them too and return it. If the two numbers are equal return `a` or `b`.\n\n**Note:** `a` and `b` are not ordered!\n\n## Examples\n\n```python\nget_sum(1, 0) == 1   // 1 + 0 = 1\nget_sum(1, 2) == 3   // 1 + 2 = 3\nget_sum(0, 1) == 1   // 0 + 1 = 1\nget_sum(1, 1) == 1   // 1 Since both are same\nget_sum(-1, 0) == -1 // -1 + 0 = -1\nget_sum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\n```\n```C\nget_sum(1, 0) == 1   // 1 + 0 = 1\nget_sum(1, 2) == 3   // 1 + 2 = 3\nget_sum(0, 1) == 1   // 0 + 1 = 1\nget_sum(1, 1) == 1   // 1 Since both are same\nget_sum(-1, 0) == -1 // -1 + 0 = -1\nget_sum(-1, 2) == 2  // -1 + 0 + 1 + 2 = 2\n```\n\"\"\"", "inputs": [[0, 1], [1, 2], [5, -1], [505, 4], [321, 123], [0, -1], [-50, 0], [-1, -5], [-5, -5], [-505, 4], [-321, 123], [0, 0], [-5, -1], [5, 1], [-17, -17], [17, 17]], "outputs": [[1], [3], [14], [127759], [44178], [-1], [-1275], [-15], [-5], [-127755], [-44055], [0], [-15], [15], [-17], [17]], "starter_code": "def get_sum(a, b):", "canonical_solution": "def get_sum(a, b):\n    return sum(range(min(a, b), max(a, b) + 1))", "entry_point": "get_sum", "task_id": "TACO_lite/548", "input_output_examples": [[[1, 0], [1, 2], [0, 1], [1, 1], [-1, 0], [-1, 2]], [[1], [3], [1], [1], [-1], [2]]]}
{"requirement": "def reverse_number(n):\n\"\"\"Given a number, write a function to output its reverse digits.  (e.g. given 123 the answer is 321)\n\n\nNumbers should preserve their sign; i.e. a negative number should still be negative when reversed.\n\n### Examples\n```\n 123 ->  321\n-456 -> -654\n1000 ->    1\n```\n\"\"\"", "inputs": [[123], [-123], [1000], [4321234], [5], [0], [98989898]], "outputs": [[321], [-321], [1], [4321234], [5], [0], [89898989]], "starter_code": "def reverse_number(n):", "canonical_solution": "def reverse_number(n):\n    s = str(n)\n    ret = int('-{}'.format(s[:0:-1]) if '-' in s else s[::-1])\n    return ret", "entry_point": "reverse_number", "task_id": "TACO_lite/549", "input_output_examples": [[[123], [-456], [1000]], [[321], [-654], [1]]]}
{"requirement": "def symmetric_point(p, q):\n\"\"\"\"Point reflection\" or \"point symmetry\" is a basic concept in geometry where a given point, P, at a given position relative to a mid-point, Q has a corresponding point, P1, which is the same distance from Q but in the opposite direction.\n\n## Task\n\nGiven two points P and Q, output the symmetric point of point P about Q.\nEach argument is a two-element array of integers representing the point's X and Y coordinates.  Output should be in the same format, giving the X and Y coordinates of point P1.  You do not have to validate the input.\n\nThis kata was inspired by the Hackerrank challenge [Find Point](https://www.hackerrank.com/challenges/find-point)\n\"\"\"", "inputs": [[[0, 0], [1, 1]], [[2, 6], [-2, -6]], [[10, -10], [-10, 10]], [[1, -35], [-12, 1]], [[1000, 15], [-7, -214]], [[0, 0], [0, 0]]], "outputs": [[[2, 2]], [[-6, -18]], [[-30, 30]], [[-25, 37]], [[-1014, -443]], [[0, 0]]], "starter_code": "def symmetric_point(p, q):", "canonical_solution": "def symmetric_point(p, q):\n    return [2 * q[0] - p[0], 2 * q[1] - p[1]]", "entry_point": "symmetric_point", "task_id": "TACO_lite/550", "input_output_examples": [[[[0, 0], [1, 1]]], [[[2, 2]]]]}
{"requirement": "def find_children(santas_list, children):\n\"\"\"Christmas is coming, and Santa has a long list to go through, to find who deserves presents for the big day. Go through a list of children, and return a list containing every child who appeared on Santa's list. Do not add any child more than once. Output should be sorted.\n~~~if:java\nFor java, use Lists.\n~~~\n\nComparison should be case sensitive and the returned list should contain only one copy of each name: `\"Sam\"` and `\"sam\"` are different, but `\"sAm\"` and `\"sAm\"` are not.\n\"\"\"", "inputs": [[["Jason", "Jackson", "Jordan", "Johnny"], ["Jason", "Jordan", "Jennifer"]], [["Jason", "Jackson", "Johnson", "JJ"], ["Jason", "James", "JJ"]], [["jASon", "JAsoN", "JaSON", "jasON"], ["JasoN", "jASOn", "JAsoN", "jASon", "JASON"]]], "outputs": [[["Jason", "Jordan"]], [["JJ", "Jason"]], [["JAsoN", "jASon"]]], "starter_code": "def find_children(santas_list, children):", "canonical_solution": "def find_children(santas_list, children):\n    return sorted(set(santas_list) & set(children))", "entry_point": "find_children", "task_id": "TACO_lite/551", "input_output_examples": [[[["Jason", "Jackson", "Jordan", "Johnny"], ["Jason", "Jordan", "Jennifer"]]], [[["Jason", "Jordan"]]]]}
{"requirement": "def find_slope(points):\n\"\"\"Given an array of 4 integers  \n```[a,b,c,d]``` representing two points ```(a, b)``` and ```(c, d)```, return a string representation of the slope of the line joining these two points. \n\nFor an undefined slope (division by 0), return  ```undefined```  . Note that the \"undefined\" is case-sensitive.\n```\n   a:x1\n   b:y1\n   c:x2\n   d:y2\n```\n   \nAssume that ```[a,b,c,d]``` and the answer are all integers \n(no floating numbers!).\nSlope:\n\"\"\"", "inputs": [[[12, -18, -15, -18]], [[3, -20, 5, 8]], [[17, -3, 17, 8]], [[1, -19, -2, -7]], [[19, 3, 20, 3]], [[6, -12, 15, -3]], [[15, -3, 15, -3]], [[9, 3, 19, -17]], [[3, 6, 4, 10]], [[2, 7, 4, -7]], [[1, 24, 2, 88]], [[4, 384, 8, 768]], [[4, 16, 4, 18]], [[7, 28, 9, 64]], [[18, -36, 12, 36]], [[36, 580, 42, 40]], [[1, 2, 2, 6]], [[-6, 57, -6, 84]], [[92, 12, 96, 64]], [[90, 54, 90, 2]], [[3, 6, 4, 9]], [[-2, -5, 2, 3]], [[3, 3, 2, 0]]], "outputs": [["0"], ["14"], ["undefined"], ["-4"], ["0"], ["1"], ["undefined"], ["-2"], ["4"], ["-7"], ["64"], ["96"], ["undefined"], ["18"], ["-12"], ["-90"], ["4"], ["undefined"], ["13"], ["undefined"], ["3"], ["2"], ["3"]], "starter_code": "def find_slope(points):", "canonical_solution": "def find_slope(points):\n    x1, y1, x2, y2 = points\n    if x2 - x1 == 0:\n        return 'undefined'\n    return str((y2 - y1) // (x2 - x1))", "entry_point": "find_slope", "task_id": "TACO_lite/552", "input_output_examples": [[[[12, -18, -15, -18]]], [["0"]]]}
{"requirement": "def sc_perm_comb(num):\n\"\"\"We define the score of permutations of combinations, of an integer number (the function to obtain this value:```sc_perm_comb```) as the total sum of all the numbers obtained from the permutations of all the possible combinations of its digits.\nFor example we have the number 348.\n```python\nsc_perm_comb(348) = 3 + 4 + 8 + 34 + 38 + 48 + 43 + 83 + 84 + 348 + 384 + 834 + 843 + 438 + 483  = 3675\n```\nIf the number has a digit 0, the numbers formed by a leading 0 should be discarded:\n```python\nsc_perm_comb(340) = 3 + 4 + 34 + 30 + 40 + 43 + 340 + 304 + 430 + 403 = 1631\n```\nIf the number has digits that occur more than once, the score the adden will not be taken than twice or more:\n```python\nsc_perm_comb(333) = 3 + 33 + 333 = 369\n```\nIf the number has only one digit its score is the same number:\n```python\nsc_perm_comb(6) = 6\nsc_perm_comb(0) = 0\n```\n\nEnjoy it!!\n\"\"\"", "inputs": [[348], [340], [333], [6], [0]], "outputs": [[3675], [1631], [369], [6], [0]], "starter_code": "def sc_perm_comb(num):", "canonical_solution": "from itertools import permutations\n\ndef sc_perm_comb(num):\n    sNum = str(num)\n    return sum({int(''.join(p)) for d in range(1, len(sNum) + 1) for p in permutations(sNum, d)})", "entry_point": "sc_perm_comb", "task_id": "TACO_lite/553", "input_output_examples": [[[348], [340], [333], [6], [0]], [[3675], [1631], [369], [6], [0]]]}
{"requirement": "def search_substr(full_text, search_text, allow_overlap=True):\n\"\"\"Complete the solution so that it returns the number of times the search_text is found within the full_text.\n\n```python\nsearch_substr( fullText, searchText, allowOverlap = true )\n```\n\nso that overlapping solutions are (not) counted. If the searchText is empty, it should return `0`. Usage examples:\n\n```python\nsearch_substr('aa_bb_cc_dd_bb_e', 'bb') # should return 2 since bb shows up twice\nsearch_substr('aaabbbcccc', 'bbb') # should return 1\nsearch_substr( 'aaa', 'aa' ) # should return 2\nsearch_substr( 'aaa', '' ) # should return 0\nsearch_substr( 'aaa', 'aa', false ) # should return 1\n```\n\"\"\"", "inputs": [["aa_bb_cc_dd_bb_e", "bb"], ["aaabbbcccc", "bbb"], ["aaacccbbbcccc", "cc"], ["aaa", "aa"], ["aaa", "aa", false], ["aaabbbaaa", "bb", false], ["a", ""], ["", "a"], ["", ""], ["", "", false]], "outputs": [[2], [1], [5], [2], [1], [1], [0], [0], [0], [0]], "starter_code": "def search_substr(full_text, search_text, allow_overlap=True):", "canonical_solution": "import re\n\ndef search_substr(full_text, search_text, allow_overlap=True):\n    if not full_text or not search_text:\n        return 0\n    return len(re.findall(f'(?=({search_text}))' if allow_overlap else search_text, full_text))", "entry_point": "search_substr", "task_id": "TACO_lite/554", "input_output_examples": [[["aa_bb_cc_dd_bb_e", "bb"], ["aaabbbcccc", "bbb"], ["aaa", "aa"], ["aaa", ""], ["aaa", "aa", false]], [[2], [1], [2], [0], [1]]]}
{"requirement": "def solve(st):\n\"\"\"In this Kata, you will be given a mathematical string and your task will be to remove all braces as follows:\n\n```Haskell\nsolve(\"x-(y+z)\") = \"x-y-z\"\nsolve(\"x-(y-z)\") = \"x-y+z\"\nsolve(\"u-(v-w-(x+y))-z\") = \"u-v+w+x+y-z\"\nsolve(\"x-(-y-z)\") = \"x+y+z\"\n```\n\nThere are no spaces in the expression. Only two operators are given: `\"+\" or \"-\"`. \n\nMore examples in test cases. \n\nGood luck!\n\"\"\"", "inputs": [["a-(b)"], ["a-(-b)"], ["a+(b)"], ["a+(-b)"], ["(((((((((-((-(((n))))))))))))))"], ["(((a-((((-(-(f)))))))))"], ["((((-(-(-(-(m-g))))))))"], ["(((((((m-(-(((((t)))))))))))))"], ["-x"], ["-(-(x))"], ["-((-x))"], ["-(-(-x))"], ["-(-(x-y))"], ["-(x-y)"], ["x-(y+z)"], ["x-(y-z)"], ["x-(-y-z)"], ["x-(-((-((((-((-(-(-y)))))))))))"], ["u-(v-w+(x+y))-z"], ["x-(s-(y-z))-(a+b)"], ["u+(g+v)+(r+t)"], ["q+(s-(x-o))-(t-(w-a))"], ["u-(v-w-(x+y))-z"], ["v-(l+s)-(t+y)-(c+f)+(b-(n-p))"]], "outputs": [["a-b"], ["a+b"], ["a+b"], ["a-b"], ["n"], ["a-f"], ["m-g"], ["m+t"], ["-x"], ["x"], ["x"], ["-x"], ["x-y"], ["-x+y"], ["x-y-z"], ["x-y+z"], ["x+y+z"], ["x-y"], ["u-v+w-x-y-z"], ["x-s+y-z-a-b"], ["u+g+v+r+t"], ["q+s-x+o-t+w-a"], ["u-v+w+x+y-z"], ["v-l-s-t-y-c-f+b-n+p"]], "starter_code": "def solve(st):", "canonical_solution": "from functools import reduce\n\ndef solve(st):\n    res, s, k = ([], '', 1)\n    for ch in st:\n        if ch == '(':\n            res.append(k)\n            k = 1\n        elif ch == ')':\n            res.pop()\n            k = 1\n        elif ch == '-':\n            k = -1\n        elif ch == '+':\n            k = 1\n        else:\n            s += '-' + ch if reduce(lambda a, b: a * b, res, 1) * (1 if k == 1 else -1) < 0 else '+' + ch\n    return s if s[0] == '-' else s[1:]", "entry_point": "solve", "task_id": "TACO_lite/555", "input_output_examples": [[["x-(y+z)"], ["x-(y-z)"], ["u-(v-w-(x+y))-z"], ["x-(-y-z)"]], [["x-y-z"], ["x-y+z"], ["u-v+w+x+y-z"], ["x+y+z"]]]}
{"requirement": "def freeway_game(km, kph, cars):\n\"\"\"# Back-Story\n\nEvery day I travel on the freeway.\n\nWhen I am more bored than usual I sometimes like to play the following counting game I made up:\n\n* As I join the freeway my count is ```0```\n* Add ```1``` for every car that I overtake\n* Subtract ```1``` for every car that overtakes me\n* Stop counting when I reach my exit\n\nWhat an easy game! What fun!\n\n# Kata Task\n\nYou will be given\n* The distance to my exit (km)\n* How fast I am going (kph)\n* Information about a lot of other cars \n * Their time (relative to me) as I join the freeway. For example,\n   * ```-1.5``` means they already passed my starting point ```1.5``` minutes ago\n   * ```2.2``` means they will pass my starting point ```2.2``` minutes from now\n * How fast they are going (kph)\n\nFind what is my \"score\" as I exit the freeway!\n\n# Notes\n\n* Assume all cars travel at a constant speeds\n\n Safety Warning \n\nIf you plan to play this \"game\" remember that it is not really a game. You are in a **real** car.\n\nThere may be a temptation to try to beat your previous best score.\n\nPlease don't do that...\n\"\"\"", "inputs": [[50.0, 130.0, [[-1.0, 120.0], [-1.5, 120.0]]], [50.0, 110.0, [[1.0, 120.0], [1.5, 125.0]]], [50.0, 120.0, [[-1.0, 115.0], [-1.5, 110.0], [1.0, 130.0], [1.5, 130.0]]], [30.0, 100.0, [[-1.0, 110.0], [-0.7, 102.0], [-1.5, 108.0]]], [30.0, 130.0, [[1.0, 120.0], [0.7, 125.0], [1.5, 110.0]]], [50.0, 110.0, [[-1.0, 110.0], [0.5, 110.0], [1.0, 110.0], [1.5, 110.0]]], [50.0, 110.0, [[0.0, 110.0]]], [50.0, 130.0, []]], "outputs": [[2], [-2], [0], [0], [0], [0], [0], [0]], "starter_code": "def freeway_game(km, kph, cars):", "canonical_solution": "def freeway_game(km, kph, cars):\n    t = km / kph\n    c = 0\n    for dt, speed in cars:\n        d = km - (t - dt / 60) * speed\n        if dt <= 0:\n            c += d > 0\n        else:\n            c -= d < 0\n    return c", "entry_point": "freeway_game", "task_id": "TACO_lite/556", "input_output_examples": [[[50.0, 130.0, [[-1.0, 120.0], [-1.5, 120.0]]]], [[2]]]}
{"requirement": "def categorize_study(p_value, requirements):\n\"\"\"As a member of the editorial board of the prestigous scientific Journal _Proceedings of the National Academy of Sciences_, you've decided to go back and review how well old articles you've published stand up to modern publication best practices. Specifically, you'd like to re-evaluate old findings in light of recent literature about [\"researcher degrees of freedom\"](http://journals.sagepub.com/doi/full/10.1177/0956797611417632).\n\nYou want to categorize all the old articles into three groups: \"Fine\", \"Needs review\" and \"Pants on fire\".\n\nIn order to categorize them you've enlisted an army of unpaid grad students to review and give you two data points from each study: (1) the p-value behind the paper's primary conclusions, and (2) the number of recommended author requirements to limit researcher degrees of freedom the authors satisfied:\n\n    * Authors must decide the rule for terminating data collection before data collection begins and report this rule in the article.\n    * Authors must collect at least 20 observations per cell or else provide a compelling cost-of-data-collection justification. \n    * Authors must list all variables collected in a study.\n    * Authors must report all experimental conditions, including failed manipulations.\n    * If observations are eliminated, authors must also report what the statistical results are if those observations are included.\n    * If an analysis includes a covariate, authors must report the statistical results of the analysis without the covariate.\n    \nYour army of tenure-hungry grad students will give you the p-value as a float between `1.0` and `0.0` exclusive, and the number of author requirements satisfied as an integer from `0` through `6` inclusive.\n\nYou've decided to write a function, `categorize_study()` to automatically categorize each study based on these two inputs using the completely scientifically legitimate \"bs-factor\". The bs-factor for a particular paper is calculated as follows:\n\n * bs-factor when the authors satisfy all six requirements is 1\n * bs-factor when the authors satisfy only five requirements is 2\n * bs-factor when the authors satisfy only four requirements is 4\n * bs-factor when the authors satisfy only three requirements is 8...\n\nYour function should multiply the p-value by the bs-factor and use that product to return one of the following strings:\n\n * product is less than 0.05: \"Fine\"\n * product is 0.05 to 0.15: \"Needs review\"\n * product is 0.15 or higher: \"Pants on fire\"\n \nYou've also decided that all studies meeting _none_ of the author requirements that would have been categorized as \"Fine\" should instead be categorized as \"Needs review\".\n\nFor example:\n\n`categorize_study(0.01, 3)` should return `\"Needs review\"` because the p-value times the bs-factor is `0.08`.\n\n`categorize_study(0.04, 6)` should return `\"Fine\"` because the p-value times the bs-factor is only `0.04`.\n\n`categorize_study(0.0001, 0)` should return `\"Needs review\"` even though the p-value times the bs-factor is only `0.0064`.\n\n`categorize_study(0.012, 0)` should return `\"Pants on fire\"` because the p-value times the bs-factor is `0.768`.\n\"\"\"", "inputs": [[0.01, 3], [0.04, 6], [0.0001, 0], [0.012, 0]], "outputs": [["Needs review"], ["Fine"], ["Needs review"], ["Pants on fire"]], "starter_code": "def categorize_study(p_value, requirements):", "canonical_solution": "def categorize_study(p_value, requirements):\n    study_value = p_value * 2 ** (6 - requirements)\n    if study_value < 0.05 and requirements != 0:\n        return 'Fine'\n    elif study_value < 0.05 and requirements == 0:\n        return 'Needs review'\n    elif study_value > 0.05 and study_value < 0.15:\n        return 'Needs review'\n    else:\n        return 'Pants on fire'", "entry_point": "categorize_study", "task_id": "TACO_lite/557", "input_output_examples": [[[0.01, 3], [0.04, 6], [0.0001, 0], [0.012, 0]], [["Needs review"], ["Fine"], ["Needs review"], ["Pants on fire"]]]}
{"requirement": "def encode(string):\n\"\"\"This is a follow up from my kata The old switcheroo\n\nWrite\n```python\ndef encode(str)\n```\nthat takes in a string ```str``` and replaces all the letters with their respective positions in the English alphabet.\n\n```python\nencode('abc') == '123'   # a is 1st in English alpabet, b is 2nd and c is 3rd\nencode('codewars') == '315452311819'\nencode('abc-#@5') == '123-#@5'\n```\nString are case sensitive.\n\"\"\"", "inputs": [["abc"], ["ABCD"], ["ZzzzZ"], ["abc-#@5"], ["this is a long string!! Please [encode] @C0RrEctly"]], "outputs": [["123"], ["1234"], ["2626262626"], ["123-#@5"], ["208919 919 1 1215147 1920189147!! 161251195 [51431545] @30181853201225"]], "starter_code": "def encode(string):", "canonical_solution": "def encode(string):\n    return ''.join((str(ord(c.upper()) - 64) if c.isalpha() else c for c in string))", "entry_point": "encode", "task_id": "TACO_lite/558", "input_output_examples": [[["abc"], ["codewars"], ["abc-#@5"]], [["123"], ["315452311819"], ["123-#@5"]]]}
{"requirement": "def bucketize(*arr):\n\"\"\"`Description:`\n\nGiven an input array (`arr`) of positive integers, the objective is to return an output array where each index represents the amount of times an element appeared (frequency) in the input array. \n\nMore specifically, the element at each index of the output array will be an array (bucket) containing integers that appeared index-amount-of-times. \n\nOtherwise, slot nulls (JavaScript, Java), None's (Python) nils (Ruby), or NULL's (C/C++) where appropriate. A valid array will always be provided.\n\nIf an array of [1,2,3,4,4,5,5,5] is passed in, the expected output should be: [null, [1,2,3], [4], [5], null, null, null, null, null].\n\n`Explanation:`\n\n```python\n# bucketize(arr) ======> outputArray\nbucketize(1,2,3,4,4,5,5,5) ======> [None, [1, 2, 3], [4], [5], None, None, None, None, None]\n```\n\nAn element cannot appear 0 times, so a null is placed at outputArray[0]. The elements 1, 2, and 3 appear once. This is why they are located at outputArray[1]. Notice the elements are grouped together in an array and sorted in ascending order. The element 4 appears twice. This is why it is located at outputArray[2]. The element 5 appears three times. This is why it is located at outputArray[3]. \n\nAlthough an integer could have possibly appeared four, five, six, seven, or eight times, this is not the case for this particular example. This is the reason why the elements at outputArray[4], outputArray[5], outputArray[6], outputArray[7], and outputArray[8] are all null values.\n\n`Examples:`\n\n```python\nbucketize(2,2,4,4,6,6,9,9,9,9) ==> [None, None, [2,4,6], None, [9], None, None, None, None, None, None]\nbucketize(3,3,3,3,2) ============> [None, [2], None, None, [3], None]\nbucketize(5,5,5,5,5) ============> [None, None, None, None, None, [5]]\nbucketize(77,3,40,40,40) ========> [None, [3,77], None, [40], None, None]\nbucketize(16,7,5,3,6,23) ========> [None, [3,5,6,7,16,23], None, None, None, None, None]\n```\n\"\"\"", "inputs": [[2, 2, 4, 4, 6, 6, 9, 9, 9, 9], [3, 3, 3, 3, 2], [5, 5, 5, 5, 5], [77, 3, 40, 40, 40], [16, 7, 5, 3, 6, 23]], "outputs": [[[null, null, [2, 4, 6], null, [9], null, null, null, null, null, null]], [[null, [2], null, null, [3], null]], [[null, null, null, null, null, [5]]], [[null, [3, 77], null, [40], null, null]], [[null, [3, 5, 6, 7, 16, 23], null, null, null, null, null]]], "starter_code": "def bucketize(*arr):", "canonical_solution": "from collections import Counter\n\ndef bucketize(*arr):\n    c = Counter(arr)\n    c = {i: sorted([k for k, v in list(c.items()) if v == i]) for i in list(c.values())}\n    return [c[e] if e in c else None for e in range(len(arr) + 1)]", "entry_point": "bucketize", "task_id": "TACO_lite/559", "input_output_examples": [[[1, 2, 3, 4, 4, 5, 5, 5], [2, 2, 4, 4, 6, 6, 9, 9, 9, 9], [3, 3, 3, 3, 2], [5, 5, 5, 5, 5], [77, 3, 40, 40, 40], [16, 7, 5, 3, 6, 23]], [[null, [1, 2, 3], [4], [5], null, null, null, null, null], [null, null, [2, 4, 6], null, [9], null, null, null, null, null, null], [null, [2], null, null, [3], null], [null, null, null, null, null, [5]], [null, [3, 77], null, [40], null, null], [null, [3, 5, 6, 7, 16, 23], null, null, null, null, null]]]}
{"requirement": "def to_binary(n):\n\"\"\"Convert integers to binary as simple as that. You would be given an integer as a argument and you have to return its binary form.\nTo get an idea about how to convert a decimal number into a binary number, visit here.\n\n**Notes**: negative numbers should be handled as two's complement; assume all numbers are integers stored using 4 bytes (or 32 bits) in any language.\n\nYour output should ignore leading 0s.\n\nSo, for example:\n```python\nto_binary(3)==\"11\"\nto_binary(-3)==\"11111111111111111111111111111101\"\n```\n\n*Be Ready for Large Numbers. Happy Coding ^_^*\n\"\"\"", "inputs": [[2], [3], [4], [5], [7], [10], [-3], [0], [1000], [-15], [-1000], [-999999], [999999]], "outputs": [["10"], ["11"], ["100"], ["101"], ["111"], ["1010"], ["11111111111111111111111111111101"], ["0"], ["1111101000"], ["11111111111111111111111111110001"], ["11111111111111111111110000011000"], ["11111111111100001011110111000001"], ["11110100001000111111"]], "starter_code": "def to_binary(n):", "canonical_solution": "def to_binary(n):\n    return '{:0b}'.format(n & 4294967295)", "entry_point": "to_binary", "task_id": "TACO_lite/560", "input_output_examples": [[[3], [-3], [2]], [["11"], ["11111111111111111111111111111101"], ["10"]]]}
{"requirement": "def exp_sum(number):\n\"\"\"# How many ways can you make the sum of a number?\n\nFrom wikipedia: https://en.wikipedia.org/wiki/Partition_(number_theory)#\n\n>In number theory and combinatorics, a partition of a positive integer *n*, also called an *integer partition*, is a way of writing n as a sum of positive integers. Two sums that differ only in the order of their summands are considered the same partition. If order matters, the sum becomes a composition. For example, 4 can be partitioned in five distinct ways:\n```\n4\n3 + 1\n2 + 2\n2 + 1 + 1\n1 + 1 + 1 + 1\n```\n\n## Examples\n\n### Basic\n\n```python\nexp_sum(1) # 1\nexp_sum(2) # 2  -> 1+1 , 2\nexp_sum(3) # 3 -> 1+1+1, 1+2, 3\nexp_sum(4) # 5 -> 1+1+1+1, 1+1+2, 1+3, 2+2, 4\nexp_sum(5) # 7 -> 1+1+1+1+1, 1+1+1+2, 1+1+3, 1+2+2, 1+4, 5, 2+3\n\nexp_sum(10) # 42\n```\n\n### Explosive\n\n```python\nexp_sum(50) # 204226\nexp_sum(80) # 15796476\nexp_sum(100) # 190569292\n```\n\nSee [here](http://www.numericana.com/data/partition.htm) for more examples.\n\"\"\"", "inputs": [[1], [2], [3], [4], [5], [20], [30], [40], [43], [60], [70], [90], [200], [275]], "outputs": [[1], [2], [3], [5], [7], [627], [5604], [37338], [63261], [966467], [4087968], [56634173], [3972999029388], [1520980492851175]], "starter_code": "def exp_sum(number):", "canonical_solution": "ANSWERS = {0: 1, 1: 1, 2: 2, 3: 3, 4: 5, 5: 7, 6: 11, 7: 15, 8: 22, 9: 30, 10: 42, 11: 56, 12: 77, 13: 101, 14: 135, 15: 176, 16: 231, 17: 297, 18: 385, 19: 490, 20: 627, 21: 792, 22: 1002, 23: 1255, 24: 1575, 25: 1958, 26: 2436, 27: 3010, 28: 3718, 29: 4565, 30: 5604, 31: 6842, 32: 8349, 33: 10143, 34: 12310, 35: 14883, 36: 17977, 37: 21637, 38: 26015, 39: 31185, 40: 37338, 41: 44583, 42: 53174, 43: 63261, 44: 75175, 45: 89134, 46: 105558, 47: 124754, 48: 147273, 49: 173525, 50: 204226, 51: 239943, 52: 281589, 53: 329931, 54: 386155, 55: 451276, 56: 526823, 57: 614154, 58: 715220, 59: 831820, 60: 966467, 61: 1121505, 62: 1300156, 63: 1505499, 64: 1741630, 65: 2012558, 66: 2323520, 67: 2679689, 68: 3087735, 69: 3554345, 70: 4087968, 71: 4697205, 72: 5392783, 73: 6185689, 74: 7089500, 75: 8118264, 76: 9289091, 77: 10619863, 78: 12132164, 79: 13848650, 80: 15796476, 81: 18004327, 82: 20506255, 83: 23338469, 84: 26543660, 85: 30167357, 86: 34262962, 87: 38887673, 88: 44108109, 89: 49995925, 90: 56634173, 91: 64112359, 92: 72533807, 93: 82010177, 94: 92669720, 95: 104651419, 96: 118114304, 97: 133230930, 98: 150198136, 99: 169229875, 100: 190569292, 101: 214481126, 102: 241265379, 103: 271248950, 104: 304801365, 105: 342325709, 106: 384276336, 107: 431149389, 108: 483502844, 109: 541946240, 110: 607163746, 111: 679903203, 112: 761002156, 113: 851376628, 114: 952050665, 115: 1064144451, 116: 1188908248, 117: 1327710076, 118: 1482074143, 119: 1653668665, 120: 1844349560, 121: 2056148051, 122: 2291320912, 123: 2552338241, 124: 2841940500, 125: 3163127352, 126: 3519222692, 127: 3913864295, 128: 4351078600, 129: 4835271870, 130: 5371315400, 131: 5964539504, 132: 6620830889, 133: 7346629512, 134: 8149040695, 135: 9035836076, 136: 10015581680, 137: 11097645016, 138: 12292341831, 139: 13610949895, 140: 15065878135, 141: 16670689208, 142: 18440293320, 143: 20390982757, 144: 22540654445, 145: 24908858009, 146: 27517052599, 147: 30388671978, 148: 33549419497, 149: 37027355200, 150: 40853235313, 151: 45060624582, 152: 49686288421, 153: 54770336324, 154: 60356673280, 155: 66493182097, 156: 73232243759, 157: 80630964769, 158: 88751778802, 159: 97662728555, 160: 107438159466, 161: 118159068427, 162: 129913904637, 163: 142798995930, 164: 156919475295, 165: 172389800255, 166: 189334822579, 167: 207890420102, 168: 228204732751, 169: 250438925115, 170: 274768617130, 171: 301384802048, 172: 330495499613, 173: 362326859895, 174: 397125074750, 175: 435157697830, 176: 476715857290, 177: 522115831195, 178: 571701605655, 179: 625846753120, 180: 684957390936, 181: 749474411781, 182: 819876908323, 183: 896684817527, 184: 980462880430, 185: 1071823774337, 186: 1171432692373, 187: 1280011042268, 188: 1398341745571, 189: 1527273599625, 190: 1667727404093, 191: 1820701100652, 192: 1987276856363, 193: 2168627105469, 194: 2366022741845, 195: 2580840212973, 196: 2814570987591, 197: 3068829878530, 198: 3345365983698, 199: 3646072432125, 200: 3972999029388, 201: 4328363658647, 202: 4714566886083, 203: 5134205287973, 204: 5590088317495, 205: 6085253859260, 206: 6622987708040, 207: 7206841706490, 208: 7840656226137, 209: 8528581302375, 210: 9275102575355, 211: 10085065885767, 212: 10963707205259, 213: 11916681236278, 214: 12950095925895, 215: 14070545699287, 216: 15285151248481, 217: 16601598107914, 218: 18028182516671, 219: 19573856161145, 220: 21248279009367, 221: 23061871173849, 222: 25025873760111, 223: 27152408925615, 224: 29454549941750, 225: 31946390696157, 226: 34643126322519, 227: 37561133582570, 228: 40718063627362, 229: 44132934884255, 230: 47826239745920, 231: 51820051838712, 232: 56138148670947, 233: 60806135438329, 234: 65851585970275, 235: 71304185514919, 236: 77195892663512, 237: 83561103925871, 238: 90436839668817, 239: 97862933703585, 240: 105882246722733, 241: 114540884553038, 242: 123888443077259, 243: 133978259344888, 244: 144867692496445, 245: 156618412527946, 246: 169296722391554, 247: 182973889854026, 248: 197726516681672, 249: 213636919820625, 250: 230793554364681, 251: 249291451168559, 252: 269232701252579, 253: 290726957916112, 254: 313891991306665, 255: 338854264248680, 256: 365749566870782, 257: 394723676655357, 258: 425933084409356, 259: 459545750448675, 260: 495741934760846, 261: 534715062908609, 262: 576672674947168, 263: 621837416509615, 264: 670448123060170, 265: 722760953690372, 266: 779050629562167, 267: 839611730366814, 268: 904760108316360, 269: 974834369944625, 270: 1050197489931117, 271: 1131238503938606, 272: 1218374349844333, 273: 1312051800816215, 274: 1412749565173450, 275: 1520980492851175, 276: 1637293969337171, 277: 1762278433057269, 278: 1896564103591584, 279: 2040825852575075, 280: 2195786311682516, 281: 2362219145337711, 282: 2540952590045698, 283: 2732873183547535, 284: 2938929793929555, 285: 3160137867148997, 286: 3397584011986773, 287: 3652430836071053, 288: 3925922161489422, 289: 4219388528587095, 290: 4534253126900886, 291: 4872038056472084, 292: 5234371069753672, 293: 5622992691950605, 294: 6039763882095515, 295: 6486674127079088, 296: 6965850144195831, 297: 7479565078510584, 298: 8030248384943040, 299: 8620496275465025, 300: 9253082936723602, 301: 9930972392403501, 302: 10657331232548839, 303: 11435542077822104, 304: 12269218019229465, 305: 13162217895057704, 306: 14118662665280005, 307: 15142952738857194, 308: 16239786535829663, 309: 17414180133147295, 310: 18671488299600364, 311: 20017426762576945, 312: 21458096037352891, 313: 23000006655487337, 314: 24650106150830490, 315: 26415807633566326, 316: 28305020340996003, 317: 30326181989842964, 318: 32488293351466654, 319: 34800954869440830, 320: 37274405776748077, 321: 39919565526999991, 322: 42748078035954696, 323: 45772358543578028, 324: 49005643635237875, 325: 52462044228828641, 326: 56156602112874289, 327: 60105349839666544, 328: 64325374609114550, 329: 68834885946073850, 330: 73653287861850339, 331: 78801255302666615, 332: 84300815636225119, 333: 90175434980549623, 334: 96450110192202760, 335: 103151466321735325, 336: 110307860425292772, 337: 117949491546113972, 338: 126108517833796355, 339: 134819180623301520, 340: 144117936527873832, 341: 154043597379576030, 342: 164637479165761044, 343: 175943559810422753, 344: 188008647052292980, 345: 200882556287683159, 346: 214618299743286299, 347: 229272286871217150, 348: 244904537455382406, 349: 261578907351144125, 350: 279363328483702152, 351: 298330063062758076, 352: 318555973788329084, 353: 340122810048577428, 354: 363117512048110005, 355: 387632532919029223, 356: 413766180933342362, 357: 441622981929358437, 358: 471314064268398780, 359: 502957566506000020, 360: 536679070310691121, 361: 572612058898037559, 362: 610898403751884101, 363: 651688879997206959, 364: 695143713458946040, 365: 741433159884081684, 366: 790738119649411319, 367: 843250788562528427, 368: 899175348396088349, 369: 958728697912338045, 370: 1022141228367345362, 371: 1089657644424399782, 372: 1161537834849962850, 373: 1238057794119125085, 374: 1319510599727473500, 375: 1406207446561484054, 376: 1498478743590581081, 377: 1596675274490756791, 378: 1701169427975813525, 379: 1812356499739472950, 380: 1930656072350465812, 381: 2056513475336633805, 382: 2190401332423765131, 383: 2332821198543892336, 384: 2484305294265418180, 385: 2645418340688763701, 386: 2816759503217942792, 387: 2998964447736452194, 388: 3192707518433532826, 389: 3398704041358160275, 390: 3617712763867604423, 391: 3850538434667429186, 392: 4098034535626594791, 393: 4361106170762284114, 394: 4640713124699623515, 395: 4937873096788191655, 396: 5253665124416975163, 397: 5589233202595404488, 398: 5945790114707874597, 399: 6324621482504294325, 400: 6727090051741041926, 401: 7154640222653942321, 402: 7608802843339879269, 403: 8091200276484465581, 404: 8603551759348655060, 405: 9147679068859117602, 406: 9725512513742021729, 407: 10339097267123947241, 408: 10990600063775926994, 409: 11682316277192317780, 410: 12416677403151190382, 411: 13196258966925435702, 412: 14023788883518847344, 413: 14902156290309948968, 414: 15834420884488187770, 415: 16823822787139235544, 416: 17873792969689876004, 417: 18987964267331664557, 418: 20170183018805933659, 419: 21424521360255636320, 420: 22755290216580025259, 421: 24167053021441363961, 422: 25664640213837714846, 423: 27253164546230421739, 424: 28938037257084798150, 425: 30724985147095051099, 426: 32620068617410232189, 427: 34629700713903575934, 428: 36760667241831527309, 429: 39020148000237259665, 430: 41415739207102358378, 431: 43955477170518116534, 432: 46647863284229267991, 433: 49501890409405150715, 434: 52527070729108240605, 435: 55733465144636286656, 436: 59131714309169618645, 437: 62733071376043079215, 438: 66549436566966297367, 439: 70593393646562135510, 440: 74878248419470886233, 441: 79418069346443402240, 442: 84227730407729499781, 443: 89322956321353645667, 444: 94720370257893471820, 445: 100437544171752847604, 446: 106493051905239118581, 447: 112906525199196103354, 448: 119698712782720205954, 449: 126891542690981418000, 450: 134508188001572923840, 451: 142573136155347404229, 452: 151112262071917313678, 453: 160152905244553715585, 454: 169723951046458040965, 455: 179855916453958267598, 456: 190581040442651931034, 457: 201933379285114688629, 458: 213948907032733069132, 459: 226665621435831345565, 460: 240123655613925192081, 461: 254365395758574199975, 462: 269435605212954994471, 463: 285381555241961986287, 464: 302253162872576636605, 465: 320103136152993290544, 466: 338987127249525432549, 467: 358963893768162876613, 468: 380095468763120598477, 469: 402447339861711475160, 470: 426088638015652413417, 471: 451092336355096099864, 472: 477535459708164115593, 473: 505499305314204629558, 474: 535069675351607262125, 475: 566337121865805599675, 476: 599397204782301852926, 477: 634350763653787028583, 478: 671304203896731807232, 479: 710369798236628238005, 480: 751666004194993125591, 481: 795317798414758232180, 482: 841457028742823649455, 483: 890222784951928088294, 484: 941761789114997698055, 485: 996228806608573411012, 486: 1053787078862455346513, 487: 1114608778936426484248, 488: 1178875491155735802646, 489: 1246778716001272919665, 490: 1318520401612270233223, 491: 1394313503224447816939, 492: 1474382572040363953132, 493: 1558964374994977806173, 494: 1648308547066172438760, 495: 1742678277747760981187, 496: 1842351033503159891466, 497: 1947619317987658064007, 498: 2058791472042884901563, 499: 2176192515439287461625, 500: 2300165032574323995027, 501: 2431070104309287327876, 502: 2569288288377098289281, 503: 2715220650772245313220, 504: 2869289850802400662045, 505: 3031941282464413132742, 506: 3203644275096202070012, 507: 3384893356244349844341, 508: 3576209579998154653671, 509: 3778141924035171537110, 510: 3991268758958164118300, 511: 4216199393504640098482, 512: 4453575699570940947378, 513: 4704073821002175842062, 514: 4968405970488126319775, 515: 5247322318923878793976, 516: 5541612982013113936133, 517: 5852110108921301661040, 518: 6179690078238084808000, 519: 6525275806549652788115, 520: 6889839175409542385648, 521: 7274403582551733377346, 522: 7680046623716094332553, 523: 8107902911527474124146, 524: 8559167038437716736150, 525: 9035096690829005915201, 526: 9537015921990240021538, 527: 10066318591787500106586, 528: 10624471981512075020731, 529: 11213020592521695111580, 530: 11833590138006300416410, 531: 12487891737367521803652, 532: 13177726323474524612308, 533: 13904989273245567335012, 534: 14671675272840783232475, 535: 15479883428970761068959, 536: 16331822638729701493803, 537: 17229817230617210720599, 538: 18176312890390861435034, 539: 19173882885687454484110, 540: 20225234604409151266221, 541: 21333216422211708570598, 542: 22500824915577356165493, 543: 23731212437346370138355, 544: 25027695072821279146420, 545: 26393760995005382968154, 546: 27833079238879849385687, 547: 29349508915133986374841, 548: 30947108885217475101876, 549: 32630147920163234060900, 550: 34403115367205050943160, 551: 36270732348871285128752, 552: 38237963520943177237554, 553: 40310029416409244587122, 554: 42492419404397720872600, 555: 44790905293907018009131, 556: 47211555614160398040338, 557: 49760750604354432757376, 558: 52445197947746313627407, 559: 55271949286085137715955, 560: 58248417552751868050007, 561: 61382395164161775318496, 562: 64682073111542943380454, 563: 68156060996536236172174, 564: 71813408056839596203570, 565: 75663625229609055443637, 566: 79716708303343130521599, 567: 83983162210640880002321, 568: 88474026517495817981253, 569: 93200902166643654187580, 570: 98175979536033971312388, 571: 103412067875563710992446, 572: 108922626189067392956037, 573: 114721795630860408658491, 574: 120824433490320564237125, 575: 127246148840551966562301, 576: 134003339931725153597473, 577: 141113233412529912746558, 578: 148593925468119890197615, 579: 156464424966082817448060, 580: 164744698707340387584240, 581: 173455718882380096095248, 582: 182619512839056823919887, 583: 192259215272078129526277, 584: 202399122950629095580175, 585: 213064752104884207160129, 586: 224282898599046831034631, 587: 236081701023305130945921, 588: 248490706844586261413858, 589: 261540941761240642265710, 590: 275264982414934173206642, 591: 289697032618827122974972, 592: 304873003269975366031783, 593: 320830596120295386610807, 594: 337609391590065169560935, 595: 355250940815002702558187, 596: 373798862128436852709430, 597: 393298942187883251157044, 598: 413799241966727832978027, 599: 435350207840317348270000, 600: 458004788008144308553622, 601: 481818554503286362923739, 602: 506849831053734861481872, 603: 533159827070679866278987, 604: 560812778053476538349420, 605: 589876092712502332463864, 606: 620420507127059714307352, 607: 652520246268116112057164, 608: 686253193233019826880477, 609: 721701066553229757379480, 610: 758949605954969709105721, 611: 798088766967999186006767, 612: 839212924798226411060795, 613: 882421087896683264554175, 614: 927817121679723721849795, 615: 975509982873756796925504, 616: 1025613964982134990453294, 617: 1078248955392080004474789, 618: 1133540704665979618906662, 619: 1191621108583631746910145, 620: 1252628503530795506440909, 621: 1316707975853817969920561, 622: 1384011685831426958558879, 623: 1454699206941558115141676, 624: 1528937881135168275063375, 625: 1606903190858354689128371, 626: 1688779148601189609516729, 627: 1774758704783877366657989, 628: 1865044174831202682776536, 629: 1959847686321528964669495, 630: 2059391647140527228529479, 631: 2163909235608484556362424, 632: 2273644913597837330081136, 633: 2388854963699932382735982, 634: 2509808051552031608082535, 635: 2636785814481962651219075, 636: 2770083477684418110395121, 637: 2910010499193691843303014, 638: 3056891244979232231862474, 639: 3211065695545980277248740, 640: 3372890185488482409685019, 641: 3542738177508596708707874, 642: 3721001072479541451508397, 643: 3908089057205582486668934, 644: 4104431991606013700457110, 645: 4310480337124871462076948, 646: 4526706128254173781044298, 647: 4753603989138067267826945, 648: 4991692197319220372390544, 649: 5241513796775816319683700, 650: 5503637762499727151307095, 651: 5778660218961559003723580, 652: 6067205714919484306343541, 653: 6369928557132709817142929, 654: 6687514205661440172553650, 655: 7020680733548749464953877, 656: 7370180353811425547662139, 657: 7736801016790889035132284, 658: 8121368081058512888507057, 659: 8524746061205131302394950, 660: 8947840456000332817673697, 661: 9391599660555044587641517, 662: 9857016966290401433259592, 663: 10345132652677367520056676, 664: 10857036174895938656583295, 665: 11393868451739000294452939, 666: 11956824258286445517629485, 667: 12547154728067493595502055, 668: 13166169969647255482980383, 669: 13815241802783448943206160, 670: 14495806619536377005379418, 671: 15209368375944215483241988, 672: 15957501720133631304230773, 673: 16741855262985451980947171, 674: 17564154997755650263621500, 675: 18426207875324210441995136, 676: 19329905542049511423199336, 677: 20277228247502764885900784, 678: 21270248929688765106878025, 679: 22311137485682880566295780, 680: 23402165235974892374954302, 681: 24545709591163085124246501, 682: 25744258930034131533263392, 683: 27000417698448800353553865, 684: 28316911738879831363625420, 685: 29696593860867277871605321, 686: 31142449663120060247020395, 687: 32657603618448918933404658, 688: 34245325433219728719773420, 689: 35909036693513349075724695, 690: 37652317810725762600765183, 691: 39478915279883795756623331, 692: 41392749264546866860893416, 693: 43397921522754943172592795, 694: 45498723689129703063649450, 695: 47699645928878027716139269, 696: 50005385980149860746062163, 697: 52420858601901549459658530, 698: 54951205445179608281719072, 699: 57601805366500810491219000, 700: 60378285202834474611028659, 701: 63286531028521032840985510, 702: 66332699915362724119980694, 703: 69523232218023552371152320, 704: 72864864407855341219969825, 705: 76364642479247406973532354, 706: 80029935953661656574123574, 707: 83868452507581852374822598, 708: 87888253251761884175130183, 709: 92097768690318501305952845, 710: 96505815389469697877049934, 711: 101121613386982294887579670, 712: 105954804374756131323439197, 713: 111015470688345108146850290, 714: 116314155138696524440183805, 715: 121861881722882938654960142, 716: 127670177252209281782740521, 717: 133751093937700984130081285, 718: 140117232974725477106760252, 719: 146781769170263852819573505, 720: 153758476658245881594406593, 721: 161061755750279477635534762, 722: 168706660971164630122439117, 723: 176708930330666271859881567, 724: 185085015885255746880625875, 725: 193852115645795752984189381, 726: 203028206889569986197651315, 727: 212632080937520072186590492, 728: 222683379460186024851577401, 729: 233202632378520643600875145, 730: 244211297428606706709925517, 731: 255731801462210865865001525, 732: 267787583558210323920375877, 733: 280403140023083872114273884, 734: 293604071362025285843562670, 735: 307417131305664218954016427, 736: 321870277981032622582593573, 737: 336992727319136467572139095, 738: 352815008795455957133215652, 739: 369369023603738655757458075, 740: 386688105367749941220651375, 741: 404807083500032850651734059, 742: 423762349321394151918928481, 743: 443591925059596733749014862, 744: 464335535850798483634138280, 745: 486034684872448271784326296, 746: 508732731741838107613602755, 747: 532474974320122372524707631, 748: 557308734067567635805394638, 749: 583283445101886813536239875, 750: 610450747117966916191771809, 751: 638864582333908382360557376, 752: 668581296635294279311393900, 753: 699659745096778286894322787, 754: 732161402067670820574405230, 755: 766150476015982127183457373, 756: 801694029333610862568750951, 757: 838862103313805798709299373, 758: 877727848520950325159242658, 759: 918367660781873199488134935, 760: 960861323037560814483873080, 761: 1005292153304074193879898920, 762: 1051747159001957690209588887, 763: 1100317197924192833923669753, 764: 1151097146124113726578727360, 765: 1204186073016375022219516992, 766: 1259687423996378387111229150, 767: 1317709210896221493178043552, 768: 1378364210608578997366598385, 769: 1441770172223648126550509165, 770: 1508050033038752490738311726, 771: 1577332143815074048889599022, 772: 1649750503671651735806603894, 773: 1725445005022910006140645612, 774: 1804561688982956164492944650, 775: 1887253011677361609828822380, 776: 1973678121921532286407950000, 777: 2064003150743712843868729636, 778: 2158401513250589964731360493, 779: 2257054223353982965849642005, 780: 2360150221898687182164777966, 781: 2467886718753771981901721670, 782: 2580469549453004933593920862, 783: 2698113546994164480174756373, 784: 2821042929432312216467202070, 785: 2949491703928193388274450292, 786: 3083704087940340693022764503, 787: 3223934948277725160271634798, 788: 3370450258759473520427114109, 789: 3523527577258789108163787100, 790: 3683456542940343404363084600, 791: 3850539394533563994343413787, 792: 4025091510519029370421431033, 793: 4207441972141088280734057870, 794: 4397934150197476827913759850, 795: 4596926316595586652827474186, 796: 4804792281705797515062559743, 797: 5021922058584382849328869242, 798: 5248722555182613689484387822, 799: 5485618295704258477069984050, 800: 5733052172321422504456911979, 801: 5991486228508002426815719537, 802: 6261402475301701333080509487, 803: 6543303741858946450905285538, 804: 6837714561722963378455094385, 805: 7145182096283051986707103605, 806: 7466277096963606051213804496, 807: 7801594907743960700949000443, 808: 8151756509675604512522473567, 809: 8517409609130970421571757565, 810: 8899229771588828461969917962, 811: 9297921602834531195851268718, 812: 9714219979529959777862768265, 813: 10148891331187245215547993864, 814: 10602734975663191221223594155, 815: 11076584510377034355391142064, 816: 11571309261543787320061392679, 817: 12087815793808125625662163707, 818: 12627049482760689878061744701, 819: 13189996152918959195978870030, 820: 13777683783859651786576215682, 821: 14391184287298069419105856949, 822: 15031615358023124634594092724, 823: 15700142401714084441377203063, 824: 16397980542787591098996821750, 825: 17126396715550358417594267021, 826: 17886711842065410771034749979, 827: 18680303100276877491522988120, 828: 19508606286081561360311437674, 829: 20373118273183778133458320225, 830: 21275399574724765449983360003, 831: 22217077010838260632179411313, 832: 23199846486451169343993151122, 833: 24225475883821531494697782922, 834: 25295808074486832813101046425, 835: 26412764055483014097178757689, 836: 27578346214889968804237171486, 837: 28794641731961759722351371983, 838: 30063826117310982372086476080, 839: 31388166898835484452139885750, 840: 32770027459303858556350798600, 841: 34211871031752548278772284453, 842: 35716264859093977687647313415, 843: 37285884524590579748861394570, 844: 38923518460115987806848673270, 845: 40632072639400673752129300324, 846: 42414575463747094337180792099, 847: 44274182847997609942310578598, 848: 46214183514849300594196193732, 849: 48238004505931946889525421000, 850: 50349216918401212177548479675, 851: 52551541876147039010384562987, 852: 54848856745079917639394818823, 853: 57245201602333536237114022805, 854: 59744785969613964515539259105, 855: 62351995821331449988466091712, 856: 65071400878573831543609957267, 857: 67907762200418949875852866531, 858: 70866040084540107092698343096, 859: 73951402289532005957331751320, 860: 77169232591877674590168543277, 861: 80525139690988018278755885205, 862: 84024966476277979232856334449, 863: 87674799670795146675673859587, 864: 91480979866491345649258758095, 865: 95450111966823518214883921610, 866: 99589076052990565170686659417, 867: 103905038690755971019484297576, 868: 108405464695475636367939373595, 869: 113098129373644577851404473535, 870: 117991131259998859170817958839, 871: 123092905369958432777075796052, 872: 128412236987976529870072690275, 873: 133958276013169939669531019316, 874: 139740551884446204479331411000, 875: 145768989108216487062234772851, 876: 152053923412691097170490155923, 877: 158606118553696417431847045996, 878: 165436783797931931934295220337, 879: 172557592110602218633091543840, 880: 179980699075416049556058362840, 881: 187718762576041099642814429720, 882: 195784963269243383580949581161, 883: 204193025881123335512830178821, 884: 212957241359090878236182734445, 885: 222092489913497780851227603386, 886: 231614264984172822820073009257, 887: 241538698168481624527315178361, 888: 251882585148964518765460484674, 889: 262663412660090356154504995095, 890: 273899386535208029575034561337, 891: 285609460876378579895067651923, 892: 297813368391435715163322531331, 893: 310531651944349233813920512829, 894: 323785697366761254448562966675, 895: 337597767580427105501057917306, 896: 351991038082228660789452118410, 897: 366989633845435601723754690835, 898: 382618667692977386826261193199, 899: 398904280200653395819254517900, 900: 415873681190459054784114365430, 901: 433555192876539531087229255477, 902: 451978294728708525214023001725, 903: 471173670120985588372050797999, 904: 491173254835220446432862090800, 905: 512010287492584845146484412308, 906: 533719361988531136324395159455, 907: 556336482009740068071399064008, 908: 579899117714618242279047917300, 909: 604446264662056374189988834755, 910: 630018505076433611630379753807, 911: 656658071540248718776792346785, 912: 684408913209287275550344075013, 913: 713316764648893234122621625751, 914: 743429217393715213042975617565, 915: 774795794337240928934816284899, 916: 807468027061529837515792402675, 917: 841499536221802614337232047468, 918: 876946115104959930393838357571, 919: 913865816485680423486405066750, 920: 952319042908502961911588247808, 921: 992368640529229737341624411924, 922: 1034079996654109332431762911842, 923: 1077521141120571341397403386532, 924: 1122762851668802145076610697775, 925: 1169878763459173895733432737528, 926: 1218945482896482311379736998403, 927: 1270042705928112564209840426896, 928: 1323253340989653981276400185806, 929: 1378663636778122744608506419570, 930: 1436363315039845896899358328033, 931: 1496445708567209282036578487803, 932: 1559007904605896258842021462474, 933: 1624150893881942976244820893255, 934: 1691979725465930503404211099660, 935: 1762603667699924360130192603237, 936: 1836136375421380008668856717532, 937: 1912696063727159213943851080855, 938: 1992405688530070149968413761596, 939: 2075393134169954709485716047155, 940: 2161791408351324312330912522447, 941: 2251738844689892053427982289844, 942: 2345379313161090374436414551558, 943: 2442862438754801545567295092897, 944: 2544343828652090726779455860435, 945: 2649985308251720770267133439311, 946: 2759955166386673475403099789409, 947: 2874428410083806869907819978392, 948: 2993587029233173241168779714732, 949: 3117620271547411926979127053250, 950: 3246724928206047105940972859506, 951: 3381105630594468612010288127863, 952: 3520975158562887897616477410546, 953: 3666554760646647127956344306190, 954: 3818074486705953843294627812035, 955: 3975773533460423034845675035419, 956: 4139900603411771887815710365915, 957: 4310714277666637214536144927329, 958: 4488483403190813123215639907302, 959: 4673487495046245204241629451110, 960: 4866017154182911354694265206413, 961: 5066374501379277964399166419563, 962: 5274873627947390097986152243705, 963: 5491841063841846500452896053582, 964: 5717616263835974099255567733750, 965: 5952552112453464578853008309794, 966: 6197015448369619941842104648894, 967: 6451387609023188709970129910797, 968: 6716064996207615136996693074302, 969: 6991459663439386169435859778910, 970: 7277999925931103886207676505429, 971: 7576130994027952290703815097177, 972: 7886315630998429231248733036419, 973: 8209034836103596418058528755338, 974: 8544788553903729460741526714750, 975: 8894096410797147287955714755082, 976: 9257498479823236816318777820416, 977: 9635556074800288403768986034253, 978: 10028852574908795418824727341746, 979: 10437994280872373856676062879735, 980: 10863611303931504965592652844878, 981: 11306358488849924787366667765407, 982: 11766916372239763961801564990016, 983: 12245992177539511607834487453052, 984: 12744320848028628464246059627690, 985: 13262666119314202551196742822008, 986: 13801821632778520931079437719552, 987: 14362612091531863067120268402228, 988: 14945894460472306341153073892017, 989: 15552559212113915719970799358900, 990: 16183531619906475296861224625027, 991: 16839773100833956878604913215477, 992: 17522282609145324707635966077022, 993: 18232098083140097717852712346115, 994: 18970297947002453464660671155990, 995: 19738002669751617842096992232436, 996: 20536376383452971700767593594021, 997: 21366628562913781584556907794729, 998: 22230015769169865076825741905555, 999: 23127843459154899464880444632250, 1000: 24061467864032622473692149727991, 1001: 25032297938763929621013218349796, 1002: 26041797385576000582369625213281, 1003: 27091486754099167408984061096127, 1004: 28182945621039436811282417218990, 1005: 29317814852360484763188469380980, 1006: 30497798951058731380716134731126, 1007: 31724668493728872881006491578226, 1008: 33000262659235183814081519827753, 1009: 34326491852926110526276105821510, 1010: 35705340429956356495500048880518, 1011: 37138869521411924622451440267117, 1012: 38629219967069644267226780200798, 1013: 40178615358763694337831877170404, 1014: 41789365198477765393682507986660, 1015: 43463868175432916528376380161993, 1016: 45204615566598118821992112719830, 1017: 47014194765213080671467587361162, 1018: 48895292942081479136595740785155, 1019: 50850700844567331975836762416180, 1020: 52883316738408211899530127054215, 1021: 54996150497646497195116039121846, 1022: 57192327848174163803231700285962, 1023: 59475094770587936660132803278445, 1024: 61847822068260244309086870983975, 1025: 64314010106747559065438412709786, 1026: 66877293730881687431325192921834, 1027: 69541447366121616918816177545634, 1028: 72310390310983979753319152713934, 1029: 75188192227619293524858181464065, 1030: 78179078837859260757658669457252, 1031: 81287437832327804842152878336251, 1032: 84517825000485590628268677129623, 1033: 87874970589764795726619149717517, 1034: 91363785902248291467082481888195, 1035: 94989370137655453801161398756590, 1036: 98757017491716010698603869808070, 1037: 102672224519343960454073227246547, 1038: 106740697772366151410092496101554, 1039: 110968361721914939732387042839470, 1040: 115361366975961956826368092270559, 1041: 119926098802850790583643914139778, 1042: 124669185972080868004022654618279, 1043: 129597509924003418690815024769614, 1044: 134718214280513689012974236132740, 1045: 140038714709261994367964528304147, 1046: 145566709154360370820516947589011, 1047: 151310188447031979898125505211430, 1048: 157277447310137702096803724432844, 1049: 163477095771019024080265786609550, 1050: 169918070997619096807349078318498, 1051: 176609649573385253852206425342508, 1052: 183561460227017093724267411668558, 1053: 190783497033705025399011223174627, 1054: 198286133105105766051740791002035, 1055: 206080134785924286913455951259466, 1056: 214176676375616994965530422655441, 1057: 222587355394399185288134561600051, 1058: 231324208413431926871476886628488, 1059: 240399727469780275150398352541295, 1060: 249826877087477024806306436682550, 1061: 259619111926794902903903858282467, 1062: 269790395084626208521306859330203, 1063: 280355217069693265922512204254601, 1064: 291328615477166797747643128851965, 1065: 302726195388153340970512449363108, 1066: 314564150520428320398942429589829, 1067: 326859285157739328217944658021195, 1068: 339629036885985812650521091739503, 1069: 352891500165597792693064105229860, 1070: 366665450770488753893927654278831, 1071: 380970371125047658469252263285168, 1072: 395826476571763477972460354798893, 1073: 411254742603244027745802489871124, 1074: 427276933093600703409672633110750, 1075: 443915629565423279460548833975619, 1076: 461194261529865886819548193737883, 1077: 479137137938708024340405275972933, 1078: 497769479788644748304553495300446, 1079: 517117453919499510741582247311995, 1080: 537208208049543370281513128274546, 1081: 558069907092647074919064078269009, 1082: 579731770803589829653889090465310, 1083: 602224112799502127836867703068534, 1084: 625578381007131993715400129218655, 1085: 649827199587396195485096741151797, 1086: 675004412390512738195023734124239, 1087: 701145127996910209394091171983043, 1088: 728285766401075776846633724874013, 1089: 756464107397538946738052845597325, 1090: 785719340730295196686468011045384, 1091: 816092118069154575020287144949660, 1092: 847624606878758096201928227674051, 1093: 880360546248341702038727418718373, 1094: 914345304752746677204951178080640, 1095: 949625940417679322961779585842763, 1096: 986251262864814583017230902369159, 1097: 1024271897715020987348060381346241, 1098: 1063740353330761125682320075116819, 1099: 1104711089981595892462307006170625, 1100: 1147240591519695580043346988281283, 1101: 1191387439655339764253910592315288, 1102: 1237212390925574690626025966996290, 1103: 1284778456452494990829233226377379, 1104: 1334150984591030161739618104847170, 1105: 1385397746569649033264079085023363, 1106: 1438589025231051837956193683375282, 1107: 1493797706983703451005350179037500, 1108: 1551099377078977592324977502565855, 1109: 1610572418332734533482318570551190, 1110: 1672298113414349146588255526290127, 1111: 1736360750830546535004742869861557, 1112: 1802847734735894350158767668809929, 1113: 1871849698706449115822481531031302, 1114: 1943460623617864164855763103650900, 1115: 2017777959774244383161311335135412, 1116: 2094902753439183950276117590000925, 1117: 2174939777925753277977786731439319, 1118: 2257997669407716887103312005936867, 1119: 2344189067619971039484826726136835, 1120: 2433630761622095504505007624351926, 1121: 2526443840805024325560621670846260, 1122: 2622753851327163276606626468293628, 1123: 2722690958172823755991785784326387, 1124: 2826390113032612069265970456163500, 1125: 2933991228212416784843441604124699, 1126: 3045639356784883554548008634432380, 1127: 3161484879204764376319516386806829, 1128: 3281683696617285755657387337131749, 1129: 3406397431096706053660787897070925, 1130: 3535793633060536116646611744883745, 1131: 3670045996113488118329838058723628, 1132: 3809334579584105681944821254585338, 1133: 3953846039026223475533484851711932, 1134: 4103773864966917551549475742004630, 1135: 4259318630192449100691154502765975, 1136: 4420688245873885709566584952625897, 1137: 4588098226844616747507844508037264, 1138: 4761771966352875646576237849731855, 1139: 4941941020623653451737160975884815, 1140: 5128845403576048431946742302750170, 1141: 5322733892054158457915227866236060, 1142: 5523864341942100491068450472029219, 1143: 5732504015546648477080676455520535, 1144: 5948929920644332374606657683899745, 1145: 6173429161603651508297858791951031, 1146: 6406299303007341112943259722223788, 1147: 6647848746214407376439536432805536, 1148: 6898397119316930779355317551024978, 1149: 7158275680962446691834888697663475, 1150: 7427827738529064471293660118664110, 1151: 7707409081157399483953096394984678, 1152: 7997388428160886234821473483000555, 1153: 8298147893354134143293856722998488, 1154: 8610083465857701451154337181278065, 1155: 8933605507957017621037375468973282, 1156: 9269139270613202791504126859283685, 1157: 9617125427244236129299819591578718, 1158: 9978020626416337178370164768812546, 1159: 10352298064107568778430054733760345, 1160: 10740448076228572334937735566562385, 1161: 11142978752109030998555590333304243, 1162: 11560416569682950887414131083801684, 1163: 11993307053131181401163436777097233, 1164: 12442215453765791987839842332792770, 1165: 12907727454968012800119940123354311, 1166: 13390449902019461518054086533162960, 1167: 13891011557695348536983250121102793, 1168: 14410063884518310798493113995825913, 1169: 14948281854602503175542820411276425, 1170: 15506364788049610799716682308517542, 1171: 16085037220891570656183958875514689, 1172: 16685049803609043819824168449851071, 1173: 17307180231290097851615771678718278, 1174: 17952234206530182283975172821446800, 1175: 18621046436212348314484589328413725, 1176: 19314481663345819649385158162679300, 1177: 20033435735181507108244024178275807, 1178: 20778836708864920831259413450679734, 1179: 21551645995930215818617016034137500, 1180: 22352859546983857840754489692613399, 1181: 23183509077972665661421886007454584, 1182: 24044663339478824029548767493555588, 1183: 24937429430533921473492651656959612, 1184: 25862954158495203059166455452470495, 1185: 26822425446580095904068198565803164, 1186: 27817073790709723558345700246365971, 1187: 28848173767368633057992125893483779, 1188: 29917045594246378653834785571179351, 1189: 31025056745487001593014803461929555, 1190: 32173623623434883211416744742294747, 1191: 33364213288829995905464566634140396, 1192: 34598345251472305106432161856883007, 1193: 35877593323444056632515580254383154, 1194: 37203587537049994338271609307035630, 1195: 38578016129709269105524749061283955, 1196: 40002627598109003613035027587346239, 1197: 41479232824008249429294178038617951, 1198: 43009707274162500911950054844789890, 1199: 44595993276923101114218051405894000, 1200: 46240102378152881298913555099661657, 1201: 47944117779189310556261099429006223, 1202: 49710196859679394486867802358932901, 1203: 51540573788206651013836802198036893, 1204: 53437562223729812777303406841914935, 1205: 55403558110955564979344325681437822, 1206: 57441042572873737644094937785113022, 1207: 59552584903793044889004529388335732, 1208: 61740845666328821093587961517238033, 1209: 64008579895911365238424857597692590, 1210: 66358640416504598253672231293216761, 1211: 68793981271349892486345394543503614, 1212: 71317661272679283934970057444157431, 1213: 73932847674475963853859804733408932, 1214: 76642819972498112301511348487927130, 1215: 79450973835924928534740056571220837, 1216: 82360825175131287067719845184002304, 1217: 85376014350249959857626768802856615, 1218: 88500310525337959944194241004565748, 1219: 91737616173126446538485123122674660, 1220: 95091971735501962459496140992085663, 1221: 98567560445040729668418191983592407, 1222: 102168713313097495533124764187939944, 1223: 105899914290136190948927875636615483, 1224: 109765805604181632042444034426405625, 1225: 113771193283469872120310539095739833, 1226: 117921052869579803514689801523449638, 1227: 122220535327540435729044764084697099, 1228: 126674973159627164610485151798391797, 1229: 131289886729786527240095013237443045, 1230: 136070990805862651658706033366694460, 1231: 141024201327040104811696041691045190, 1232: 146155642404167375009402954907061316, 1233: 151471653560883058451095421311451141, 1234: 156978797223733228787865722354959930, 1235: 162683866469743733376335192519362494, 1236: 168593893040195573779320686453020964, 1237: 174716155629645388794651866300906835, 1238: 181058188459536679140275000227478496, 1239: 187627790146061111217741961494883890, 1240: 194433032872253346998515292619988830, 1241: 201482271874637706375741021005730181, 1242: 208784155255090933098578892158986338, 1243: 216347634128942766400406396453655835, 1244: 224181973120705296790445342451587490, 1245: 232296761219203590802475861123264133, 1246: 240701923004274209788971782007579802, 1247: 249407730257605432130910077287592727, 1248: 258424813970713646981839124047488243, 1249: 267764176763484957967824140618533500, 1250: 277437205727159975794000686688315348, 1251: 287455685706103555386947650491244181, 1252: 297831813033180334721514504126791124, 1253: 308578209734051855476222280888835192, 1254: 319707938216222310789920115620477565, 1255: 331234516459188101998422700026723439, 1256: 343171933722591949005782567849433641, 1257: 355534666789845852070090701405470932, 1258: 368337696765269337188595637416276068, 1259: 381596526443390734228095202493032600, 1260: 395327198269680365975835178420652411, 1261: 409546312912626108164576640399383898, 1262: 424271048467724485839916892830607059, 1263: 439519180314644983035319377172158032, 1264: 455309101649532274915393819410766690, 1265: 471659844715141371979173526935980437, 1266: 488591102752254955447569352295355812, 1267: 506123252696611256922641286254645760, 1268: 524277378646375504218896129395592376, 1269: 543075296126019045035073055561928520, 1270: 562539577173328634024088141916141596, 1271: 582693576277154906994867051360796655, 1272: 603561457194424687753064451343608383, 1273: 625168220675887416175494833282535136, 1274: 647539733131042629585359752478706350, 1275: 670702756263704072335812679441391888, 1276: 694684977710697693392039019806832594, 1277: 719515042717266582828863521396088515, 1278: 745222586883866905899271646915240282, 1279: 771838270020186251303063741763018130, 1280: 799393811143400700904158178331205389, 1281: 827922024658910558926936487548336568, 1282: 857456857763058308684876665745077292, 1283: 888033429108637280324653641355847207, 1284: 919688068775347054572190680423598070, 1285: 952458359588743164917093657911776850, 1286: 986383179832665621554422059019604497, 1287: 1021502747401614623677846147487591813, 1288: 1057858665441074072255055670604124719, 1289: 1095493969525365696982675003469664810, 1290: 1134453176424250386882487822532585142, 1291: 1174782334511180318623311370757902964, 1292: 1216529075867847432892383159101984374, 1293: 1259742670141472479018316728428818781, 1294: 1304474080213136065603158197122179375, 1295: 1350776019737370796417180820702333527, 1296: 1398703012615213588677365804960180341, 1297: 1448311454464961662889458094993182194, 1298: 1499659676156986538068572255824972432, 1299: 1552808009481139790520320395733292300, 1300: 1607818855017534550841511230454411672, 1301: 1664756752283809987147800849591201736, 1302: 1723688452234384707674372422071320679, 1303: 1784682992189681523983975379146100758, 1304: 1847811773275862853601073393199008865, 1305: 1913148640458255774876416600453369682, 1306: 1980769965254371045106648307068906619, 1307: 2050754731215233987976941410834180457, 1308: 2123184622266649887649796215921782211, 1309: 2198144114005025303125952328225613580, 1310: 2275720568045462559712283145467243327, 1311: 2356004329523040680859896842728890474, 1312: 2439088827851495409213115816339495726, 1313: 2525070680846917026164254568053937634, 1314: 2614049802327600836872111661056230165, 1315: 2706129513304814950403979441635984290, 1316: 2801416656882996994241981980679918559, 1317: 2900021716991759392273170147031719072, 1318: 3002058941076075680836616507226015622, 1319: 3107646466875142011769945929778234485, 1320: 3216906453424662618200536823961141148, 1321: 3329965216421699826558324552595808770, 1322: 3446953368095762574438358199469775528, 1323: 3568005961734486838351757966808790919, 1324: 3693262641017091556254336031236632750, 1325: 3822867794313779335421691039194332368, 1326: 3956970714114397433384120384166003416, 1327: 4095725761754986283464866437718755283, 1328: 4239292537616325490949332681096528358, 1329: 4387836056974246172531213471126988170, 1330: 4541526931687319371792477450694975225, 1331: 4700541557913558825461268913956492487, 1332: 4865062310053998559115610911870100035, 1333: 5035277741127427794082646196764289585, 1334: 5211382789787193810929017395424321210, 1335: 5393578994197824268512706677957552625, 1336: 5582074712996280787878705083147454523, 1337: 5777085353569942323599828874448120571, 1338: 5978833607890937159258923653545207827, 1339: 6187549696154203668120613167259109435, 1340: 6403471618474669930531089742522848797, 1341: 6626845414907208756853259936695984136, 1342: 6857925434061555771629308454994509373, 1343: 7096974610593182332652154711768629954, 1344: 7344264751860200848154682253520601870, 1345: 7600076834045756410267481267000412856, 1346: 7864701308055034793828023244287340980, 1347: 8138438415506002236313232141990462682, 1348: 8421598515143296812402544776496284973, 1349: 8714502420015324706702901500511538625, 1350: 9017481745765587687202719206979752339, 1351: 9330879270400591290587334955958115107, 1352: 9655049305908367725798746534773552348, 1353: 9990358082113704664098849646925432237, 1354: 10337184143168612691406936474627379320, 1355: 10695918757089402353832391602114778863, 1356: 11066966338764988954966020552846311185, 1357: 11450744886874712432979257653673465667, 1358: 11847686435168064074325478460954986607, 1359: 12258237518573265193633495987026371935, 1360: 12682859654616659385819889316805008574, 1361: 13122029840650374087829702479479965035, 1362: 13576241067401694028191547060980833568, 1363: 14046002849374084164798517831067165046, 1364: 14531841772646818920248481411605550560, 1365: 15034302060637734370093170532411179780, 1366: 15553946158411737537905952886830918329, 1367: 16091355336136399592075372322853441977, 1368: 16647130312305245611392419213169232605, 1369: 17221891897369251284144496300865473815, 1370: 17816281658437585657529146257903261665, 1371: 18430962605729818628447970674590396131, 1372: 19066619901483662703451906966061889217, 1373: 19723961592044861669045607586672623550, 1374: 20403719363889095930868650315257219250, 1375: 21106649324349767740001100592550916016, 1376: 21833532807850282420908580590825862986, 1377: 22585177208464977793681819296712788065, 1378: 23362416839659197789401547387242312544, 1379: 24166113822086183031380235679888630795, 1380: 24997159000346486985219767235597236100, 1381: 25856472889644547994140059803514309099, 1382: 26745006653306882839626895694957692242, 1383: 27663743112157144914230446319916689190, 1384: 28613697786775039130057416743650633105, 1385: 29595919973698836617070193875375888205, 1386: 30611493856665016404478212802210021309, 1387: 31661539654013410832232951778996345076, 1388: 32747214803422179685312303680676279243, 1389: 33869715185174019207110095647396061120, 1390: 35030276385193261591559928994266853030, 1391: 36230174999132974647956742131787699078, 1392: 37470729978831867653000833781535492047, 1393: 38753304022502786601002774984625192104, 1394: 40079305010057880061198034072619085310, 1395: 41450187485020176719746625583516317963, 1396: 42867454184517379844972195257339462150, 1397: 44332657618901196005888853882051385939, 1398: 45847401702584520468158717245312104000, 1399: 47413343437739346154537960139775251600, 1400: 49032194652550394774839040691532998261, 1401: 50705723795773236966373450556265512689, 1402: 52435757789401123913939450130086135644, 1403: 54224183941301948277230817879517159495, 1404: 56072951919745741389655873424027752720, 1405: 57984075791803952210030966295696158116, 1406: 59959636127664498822125654803605200455, 1407: 62001782172971294457628166694777458740, 1408: 64112734091363688056165357762141754716, 1409: 66294785279460087023332346767177823090, 1410: 68550304756601011890673498202891728627, 1411: 70881739631740035679525259959146526016, 1412: 73291617649946553739726907624791770380, 1413: 75782549821062183481895201583751205263, 1414: 78357233133132880842076215608511229415, 1415: 81018453353321656721019131504035339537, 1416: 83769087919092159661630333467319344902, 1417: 86612108922541440552472192615179632742, 1418: 89550586190851013626818983550558814889, 1419: 92587690465918960312381724727166445110, 1420: 95726696686332376146505918443171660625, 1421: 98970987374939026118276437676742560264, 1422: 102324056135379743432459471263142178485, 1423: 105789511261048976512902596439531532566, 1424: 109371079460060057837671640558228717300, 1425: 113072609699904337559514844445146843472, 1426: 116898077175609399692092533607036637857, 1427: 120851587405321266865514819340648620862, 1428: 124937380457358912643772141796859437854, 1429: 129159835312916652764103424563956670300, 1430: 133523474368721196662101633251149823925, 1431: 138032968084085429989744342641002104875, 1432: 142693139776940493084095678732486636969, 1433: 147508970573571548730224671300676243591, 1434: 152485604516930928407097683383484266510, 1435: 157628353838555246722760639034336216136, 1436: 162942704399270720489853224525723269795, 1437: 168434321304033467550147269349447360294, 1438: 174109054696419141315515890296286539118, 1439: 179972945738449034728553750103340839325, 1440: 186032232781617921513478910563182232444, 1441: 192293357735172557401982780429019456969, 1442: 198762972637879108865432799270626669004, 1443: 205447946439712986100137659510287259781, 1444: 212355372000105810413242676805207816705, 1445: 219492573309591728816879034317080350983, 1446: 226867112941909191440813277312570747145, 1447: 234486799743834826784604048875528356971, 1448: 242359696770253388472695000770509170206, 1449: 250494129472202113601016657658116885375, 1450: 258898694145869442049569648660373941152, 1451: 267582266650777119653998333871688332247, 1452: 276554011405631474170238269248906446792, 1453: 285823390670594346502222808229127105074, 1454: 295400174124997022998049389765214784995, 1455: 305294448749801797154111873648107967492, 1456: 315516629024405747970164359073870491229, 1457: 326077467447680222173319384811207626600, 1458: 336988065393447621514574974879775699372, 1459: 348259884310914705271679879631949049780, 1460: 359904757280909011630794460361074410538, 1461: 371934900939102477916959218389244857418, 1462: 384362927777754206102413138268506970021, 1463: 397201858837862893052822862772992037235, 1464: 410465136803989050790556876831592919085, 1465: 424166639514388116438037562729473373486, 1466: 438320693899488240621648045435196959242, 1467: 452942090362151303283202948578566379295, 1468: 468046097613572904390385124958730619192, 1469: 483648477979107092056857426409232236010, 1470: 499765503188744811845488653259134061244, 1471: 516413970667431889729975411863080081224, 1472: 533611220340883210895592492267492392503, 1473: 551375151973035052959106187501778547015, 1474: 569724243051777714078869714336553502625, 1475: 588677567240126095472954965375170347997, 1476: 608254813410517219620274841577537789254, 1477: 628476305280471269092869681239382035111, 1478: 649363021668417110482089106581996800736, 1479: 670936617389064931646215631627734512060, 1480: 693219444808308092528746108408911793239, 1481: 716234576078254109447577888083725273959, 1482: 740005826073621415936329176309708825539, 1483: 764557776051394742131574284792974302805, 1484: 789915798056308219059157433980611758115, 1485: 816106080095422250986408555099636706156, 1486: 843155652105778433840074131252109568468, 1487: 871092412739856974449839116812405949463, 1488: 899945156994323847635597208986502059289, 1489: 929743604708340998940330812008055415670, 1490: 960518429958522963981451968247615571768, 1491: 992301291378458055449596203783102865285, 1492: 1025124863431572512298240504372933893698, 1493: 1059022868667002481099668362066093137208, 1494: 1094030110989052198741424671895432081910, 1495: 1130182509971758083662737515471154158801, 1496: 1167517136251048459523457118438435734632, 1497: 1206072248027988195015615498189010425646, 1498: 1245887328717627537181110407053143579875, 1499: 1287003125779035759903231323132670516000, 1500: 1329461690763193888825263136701886891117, 1501: 1373306420616547671126845059808771245199, 1502: 1418582100279183135137313919163744611210, 1503: 1465334946617783561814630036179107930696, 1504: 1513612653734759530017526259861629678205, 1505: 1563464439696213993716384678301014319431, 1506: 1614941094722713228367155822930278965324, 1507: 1668095030888183105149797247519563263487, 1508: 1722980333373639710221714255936544610213, 1509: 1779652813323895051112691937493275900640, 1510: 1838170062356853750560836014387165897751, 1511: 1898591508776536523215092101916644734126, 1512: 1960978475542532205781057345396110080746, 1513: 2025394240050193548750246784190116959083, 1514: 2091904095777554301862779830720186765825, 1515: 2160575415856657801620130127396601613839, 1516: 2231477718628751807313395954393627156678, 1517: 2304682735244622286166458817442330457493, 1518: 2380264479373211819043135033180865953593, 1519: 2458299319083597933290739975588639913960, 1520: 2538866050967394665741511337736337646822, 1521: 2622045976570688763353306228619701197220, 1522: 2707922981206731940550655607258234921458, 1523: 2796583615222784382740474040856321114152, 1524: 2888117177796744121961996863481080757250, 1525: 2982615803341503976179051696005120224577, 1526: 3080174550597354460133578989992600710402, 1527: 3180891494495199523837557418419727460583, 1528: 3284867820875874297854866890890114734440, 1529: 3392207924153452428300151849140308700620, 1530: 3503019508013107340706503153715459439135, 1531: 3617413689236849218690486699230663550120, 1532: 3735505104753300028632631618647052984126, 1533: 3857412022010595043668172932897782160438, 1534: 3983256452774513571402317362452698824910, 1535: 4113164270457046596687344259862579939532, 1536: 4247265331083807518632379721321456268679, 1537: 4385693598011986873811172464601561040968, 1538: 4528587270513945762405321738705440092603, 1539: 4676088916345038581429933773569294261235, 1540: 4828345608417856657751813260670405103571, 1541: 4985509065708793590462102906287902242693, 1542: 5147735798526653777473353718656776051935, 1543: 5315187258276961029029844229698454778001, 1544: 5488029991859677773715074283837789258005, 1545: 5666435800842220652541448314024017081118, 1546: 5850581905553958890153341953182905874297, 1547: 6040651114252811450773802339294340809537, 1548: 6236831997519121462431059121804263835744, 1549: 6439319068036685669987130768251283335700, 1550: 6648312965925656816271400679772663779731, 1551: 6864020649797022030147590897007762961557, 1552: 7086655593703494823378002063833638733692, 1553: 7316437990166946592699616833531354911573, 1554: 7553594959467950148686513765206276332400, 1555: 7798360765388617440490476800142578927168, 1556: 8050977037605691145961262617379106893607, 1557: 8311693000936800120986617647413681760089, 1558: 8580765711648916968128569908862807858077, 1559: 8858460301044367459544239649173485609090, 1560: 9145050226546241655095435675456471213374, 1561: 9440817530511750873400887128525102883050, 1562: 9746053107008968945969854946579275550253, 1563: 10061056976799496323982724378320247274070, 1564: 10386138570776897699583240005533846228720, 1565: 10721617022118294111300879958656795681727, 1566: 11067821467414245473548388055474400555521, 1567: 11425091357050045737330444087123696839842, 1568: 11793776775119777282986614097061549565288, 1569: 12174238769162940693809364157051309012420, 1570: 12566849690022197996332017608789608083314, 1571: 12971993542129749223451407990577313551957, 1572: 13390066344539111423681390555352209300441, 1573: 13821476503028593889295382128265725457026, 1574: 14266645193612571525140101316505187638875, 1575: 14726006757806758281011522810861817647486, 1576: 15200009110004083021400239371051767831673, 1577: 15689114157328479953978540694207577474781, 1578: 16193798232344933888778097136641377589301, 1579: 16714552539015476523707617004948193446275, 1580: 17251883612302523293667801378616630723938, 1581: 17806313791832981004049940595952236488989, 1582: 18378381710048954709565959117356034045626, 1583: 18968642795283648606471174187975250526914, 1584: 19577669790214200898277149916663590160135, 1585: 20206053286156727802917377116665528100452, 1586: 20854402273682788549513827814948445887987, 1587: 21523344710050833153156141436233019518750, 1588: 22213528103960970088758743797991090055558, 1589: 22925620118156604193077050587843661667620, 1590: 23660309190412159054931489112539937306848, 1591: 24418305173462226026373553546995875617627, 1592: 25200339994444087406536213435901662689794, 1593: 26007168334442658312725535116810982082161, 1594: 26839568328744494665699148030346372021260, 1595: 27698342288425638399643940633635778570228, 1596: 28584317443916730715736989648170031498488, 1597: 29498346711208035625096160181520548669694, 1598: 30441309481376795323275876211869020871017, 1599: 31414112434139702720919278494304352579875, 1600: 32417690376154241824102577250721959572183, 1601: 33453007104814231206634568834252067530087, 1602: 34521056298307127650200260789840693447039, 1603: 35622862432723524773564047600591620474611, 1604: 36759481727032834297334619181982868193810, 1605: 37932003116763385216396036596083684144149, 1606: 39141549257250138871243034824146893141432, 1607: 40389277557338916599575631087245664105779, 1608: 41676381244462492794128018619459154745923, 1609: 43004090462031141893576046232131339283625, 1610: 44373673400108265833414174147846823131033, 1611: 45786437460370592180018097454654125762209, 1612: 47243730456382146639125256475201485557926, 1613: 48746941850241791637271332996842921594539, 1614: 50297504026695610706485495279896144769485, 1615: 51896893605837832676324724372468638684687, 1616: 53546632795557357169752166455397628534844, 1617: 55248290784921291361962286829338022618145, 1618: 57003485179722265948521834701738678421349, 1619: 58813883481452695155464304054870553436360, 1620: 60681204611006611632952513664174735563434, 1621: 62607220478448273296879161314388228250413, 1622: 64593757600226437608809675150800761682315, 1623: 66642698765254062321100804776702438717922, 1624: 68755984751315254218264566880232672144875, 1625: 70935616093304583685847007991159666098679, 1626: 73183654904848448867540438473174344075670, 1627: 75502226754904045590148716826986516533057, 1628: 77893522600978716067675261669847531834806, 1629: 80359800780661049649804576562965921695475, 1630: 82903389063205132690374405132401276101050, 1631: 85526686762960833261150746165714536727005, 1632: 88232166916496002397533755182876654157205, 1633: 91022378525311020523414800627504843113662, 1634: 93899948866102260607570160618726171594330, 1635: 96867585870588824684642587049077568806146, 1636: 99928080576976385190854302771818195507418, 1637: 103084309655193176038845274579543287624753, 1638: 106339238008096180814672350296895542938848, 1639: 109695921450910408688484641855278054316360, 1640: 113157509471230885841519620824589853318260, 1641: 116727248071985676199747488789041121983568, 1642: 120408482699828936375465082551662467674163, 1643: 124204661261505763907840490901149694071182, 1644: 128119337230805474780434782661196752002675, 1645: 132156172848797007097973143732608413596901, 1646: 136318942420119455804633282594364118870621, 1647: 140611535708182363299559887896839185406573, 1648: 145037961432214389489427685180617331098024, 1649: 149602350869185430852497209043356597608875, 1650: 154308961563716222079735293780517268790662, 1651: 159162181149181008424137378091161149008138, 1652: 164166531283303096726173462843072095335410, 1653: 169326671701640055015539018518705699850330, 1654: 174647404392455113639317800019372440640580, 1655: 180133677896574006306024799468201257241780, 1656: 185790591735932160859341593488427864239206, 1657: 191623400974625892978847721669762887224010, 1658: 197637520916393159778610138707329017740693, 1659: 203838531942564585384018857484505756167480, 1660: 210232184494643970555920434333513855824223, 1661: 216824404205799439501151597527348613503086, 1662: 223621297185671858108005694276757667011704, 1663: 230629155463036280733315769829856728366831, 1664: 237854462590985052006674013310829555807395, 1665: 245303899419437913541037116166052239846061, 1666: 252984350039925153650180418719145316631826, 1667: 260902907907734605017003921684746498516403, 1668: 269066882146662257820916698151184555362272, 1669: 277483804041759534527674431707495428212025, 1670: 286161433725627991209904771339900788624872, 1671: 295107767063974496251592243518106809957385, 1672: 304331042746306921569506210339059205494747, 1673: 313839749587822198745641666552447374489321, 1674: 323642634048715381224461508374001874352425, 1675: 333748707977320256428395802157949938763484, 1676: 344167256583679214774724367914264615318981, 1677: 354907846650332656774577448740278805781989, 1678: 365980334987316359577499492665661423156220, 1679: 377394877138559089794329589034333523822720, 1680: 389161936347082504011271085636055422264324, 1681: 401292292786621190557291178310378056588836, 1682: 413797053067502749043669672231562125696658, 1683: 426687660024856256094871226711613620285845, 1684: 439975902797452509721828685778957458838000, 1685: 453673927205721269316833783775783610703320, 1686: 467794246437739506976775111608393022209053, 1687: 482349752052240657962887540925835136720740, 1688: 497353725307958208396664918548576500570384, 1689: 512819848828887897371554062220903289550130, 1690: 528762218615331555088826226879544901167527, 1691: 545195356410872371074704272735369048924689, 1692: 562134222435726415975597022642148002675881, 1693: 579594228497218762288102882601473336765100, 1694: 597591251488444805746508999799665944566660, 1695: 616141647286498628873307956507246249662412, 1696: 635262265061980727342758633558885467930686, 1697: 654970462011837401470060834112028353314761, 1698: 675284118527933869908522234215965152162520, 1699: 696221653814122968723573796976021441661750, 1700: 717802041964941442478681516751205185010007, 1701: 740044828519446608929091853958115568986164, 1702: 762970147504097887787893822256219849371554, 1703: 786598738978990637725956554797278124357808, 1704: 810951967102164263980984405643613443347625, 1705: 836051838727132970358751925465426223753244, 1706: 861921022549226171951777077723669881527186, 1707: 888582868816776806015468170319304987709289, 1708: 916061429623659935353293704664261165680563, 1709: 944381479800161498529884419450242134471605, 1710: 973568538419648201851756811932637866236071, 1711: 1003648890939014757529114525804772812444576, 1712: 1034649611991404349880377024889805948451966, 1713: 1066598588850232767185892564930056790115492, 1714: 1099524545584096492698787529446425808960485, 1715: 1133457067922710638072138797746330685194571, 1716: 1168426628854604371943988173648061076656356, 1717: 1204464614977899904017040550277724793430409, 1718: 1241603353626116601935133531509635427501801, 1719: 1279876140791574929056038110412443745546155, 1720: 1319317269869626093912245397158785002901753, 1721: 1359962061247603108750056330533001022811146, 1722: 1401846892763077891420050435782921418973709, 1723: 1445009231056717653171633051674494164837538, 1724: 1489487663845762650867366119648959070605125, 1725: 1535321933144897017630429081796659362863565, 1726: 1582552969462055408849028210050341395113316, 1727: 1631222926997501215103529967929557707274660, 1728: 1681375219875327721201833943152266777825092, 1729: 1733054559437372469717283290044275542482740, 1730: 1786306992630397874710969065930279993530728, 1731: 1841179941518278501517284167616876198477309, 1732: 1897722243951848075290887164802970670035779, 1733: 1955984195429997917538913727371549522655006, 1734: 2016017592186583869120124322228807307858970, 1735: 2077875775538691593667272042037771337062872, 1736: 2141613677532831241625032098057988491948517, 1737: 2207287867926682588244859017849269988676029, 1738: 2274956602545091757332316519809900057062533, 1739: 2344679873050131347512524469147852330603290, 1740: 2416519458166178053962910323080826683013954, 1741: 2490538976402136614754617183069000726495038, 1742: 2566803940314147020741857199436825485292885, 1743: 2645381812353354350387072647528700656565179, 1744: 2726342062344598291243970336667065409029860, 1745: 2809756226643193380147979076327264594704745, 1746: 2895697969018322254247325865029474629995508, 1747: 2984243143312953802987213049129995837626487, 1748: 3075469857931627124375487934417729522202013, 1749: 3169458542208911724615579730356050273697000, 1750: 3266292014712865596629588272103919719684547, 1751: 3366055553539366839888542445766361166135204, 1752: 3468836968654792543650918885868953010691040, 1753: 3574726676346161983924385238571158169261725, 1754: 3683817775839551051322373817401051497424420, 1755: 3796206128149322537872121900182662159228241, 1756: 3911990437222503807420937006192549828899684, 1757: 4031272333444480835500888704164496363681686, 1758: 4154156459574067047582172896269352052007031, 1759: 4280750559177948266124532321685590709003370, 1760: 4411165567636502893727652799725970383582718, 1761: 4545515705795050750500358651870382988186314, 1762: 4683918576336696329734155119529513589827658, 1763: 4826495262955104262123827190438060829061153, 1764: 4973370432407778155253526316242844344573385, 1765: 5124672439532710418254508515826522600609941, 1766: 5280533435313631955425559713040649796775465, 1767: 5441089478081518530016413892489308199319929, 1768: 5606480647942507023374562583725669127988521, 1769: 5776851164524941659873115036048663114937695, 1770: 5952349508140909502130662763236950728528684, 1771: 6133128544460338166089749412557583307068767, 1772: 6319345652798518839604562697210438023241550, 1773: 6511162858120786446819766577778364926946013, 1774: 6708746966871038378408979787060247103179750, 1775: 6912269706733805859936155115580770892194054, 1776: 7121907870442710074828422368434553047727682, 1777: 7337843463751340976339671250105665526337260, 1778: 7560263857685892761905455418833343917244062, 1779: 7789361945202278758472065509114228369126600, 1780: 8025336302373932563237571980294779250756300, 1781: 8268391354240084356595173268406241855198176, 1782: 8518737545447984082077112629884273268761094, 1783: 8776591515826329476185591848477738781761689, 1784: 9042176281031049610986292577509011838783245, 1785: 9315721418408596645489064435708989370524469, 1786: 9597463258226012911089716132158337004512929, 1787: 9887645080421270408475092400425112950304770, 1788: 10186517317031728481382143156507032880864866, 1789: 10494337760463026157910800552509870425432010, 1790: 10811371777765321805152346144711499265489879, 1791: 11137892531088517813516189325593809889812108, 1792: 11474181204492965595127263976240658672733891, 1793: 11820527237297139926370474832027317722017807, 1794: 12177228564148905369732416163985994571309670, 1795: 12544591862012275060173347722472359244046903, 1796: 12922932804266987528897386291108558284524280, 1797: 13312576322123804564848753689176255125112158, 1798: 13713856873564166596625513497299706749207160, 1799: 14127118720018736045636750699617456881311725, 1800: 14552716211005418005132948684850541312590849, 1801: 14991014076953676011289439394970540421861988, 1802: 15442387730448363289492676946827168544596921, 1803: 15907223576132871507960364168750022280398562, 1804: 16385919329518164710931105850817769087241385, 1805: 16878884344951220830025131180984215659580858, 1806: 17386539953003552219964871974446413826117272, 1807: 17909319807547825412134603270711842061393357, 1808: 18447670242798154252456532648116438246904907, 1809: 19002050640597405466197703977606842321053540, 1810: 19572933808242837304672225027800498209481360, 1811: 20160806367149596270203427106156960870472824, 1812: 20766169152660030143204019897118002904900168, 1813: 21389537625315443974415368124511782893607123, 1814: 22031442293915835855052489509763576677617505, 1815: 22692429150702307814484325155610270148732358, 1816: 23373060119006260978552660565770602425866730, 1817: 24073913513719160198707702330267411589158084, 1818: 24795584514946598972622146485353975132184526, 1819: 25538685655220618058549873928821959736691905, 1820: 26303847320654738379516399526912590943781620, 1821: 27091718266436968469332058999564180929593866, 1822: 27902966147067146894819024985472934375689121, 1823: 28738278061756389082181003004910619210874204, 1824: 29598361115418134291077518460315335403586750, 1825: 30483942995692340860959609721949330792795099, 1826: 31395772566456765282571775715588003409132613, 1827: 32334620478291992350263579043602637456626234, 1828: 33301279796379969106727880491661424703794769, 1829: 34296566646329244238310747147664839490574535, 1830: 35321320878433937019039707727760782467717785, 1831: 36376406750887666110543978036746824592455791, 1832: 37462713632488269058784695792011875893039111, 1833: 38581156725384149030225659607573893303383795, 1834: 39732677808428507338475836002967756141425565, 1835: 40918246001723570069537718918088365292496141, 1836: 42138858552953206373244111655326855421732185, 1837: 43395541646119076823784928057386091817027588, 1838: 44689351233312655065605577356497222364030752, 1839: 46021373890173147491957400810472661489846635, 1840: 47392727695699507038180086415408337440470086, 1841: 48804563137103411752378288723762455918172986, 1842: 50258064040409270440055764682612968116562013, 1843: 51754448527527040549257397842950059733038281, 1844: 53294970000543912137117431914902281880953875, 1845: 54880918154001741201408795026747551723720527, 1846: 56513620015948521242261975310131861303268895, 1847: 58194441018574179427502571579696887885537742, 1848: 59924786099263589386584792985885004002385100, 1849: 61706100832922923109471297093651456522575000, 1850: 63539872596459336786702846316806859551222764, 1851: 65427631766318517268030842666066129833124679, 1852: 67370952950009825188774721810114716943378422, 1853: 69371456252574676254257996014226320491002233, 1854: 71430808578980422724679205565325409535341535, 1855: 73550724973449352362958820460243849915161295, 1856: 75732969996760532083864127998517020593740791, 1857: 77979359142591108905489195759391328910134418, 1858: 80291760293993362744249170815935430293952943, 1859: 82672095221134305875868191384112819286758200, 1860: 85122341121455964860570648618210990142492639, 1861: 87644532203446685358824902714882088097498633, 1862: 90240761315246892123800470058435668367783935, 1863: 92913181619346739765141403639335218061558813, 1864: 95664008314668029507699782676107535163671365, 1865: 98495520407358668662814112828386043342039288, 1866: 101410062531664839123433827120996801871554118, 1867: 104410046822283945831589672011997862390810762, 1868: 107497954839640363519148716631132136446924023, 1869: 110676339549566018509524250906452596245408440, 1870: 113947827358908961175629034752466582068886470, 1871: 117315120208635333752283890034504840221064086, 1872: 120780997726033548383095326244127836720276225, 1873: 124348319437674093156601079636921240241787962, 1874: 128020027044824211921357710559027384266649000, 1875: 131799146763063790207250005304405120478900361, 1876: 135688791727897158862480183289001251910301886, 1877: 139692164468205234207238255169848532611147557, 1878: 143812559449433484718637448310794816419480218, 1879: 148053365688463686582704780998822076298210405, 1880: 152418069442171341962802939167993644252844977, 1881: 156910256971726023650131079907915129924767174, 1882: 161533617384748818044426030157299715901448409, 1883: 166291945557499506406187783344043042314534878, 1884: 171189145139326194380356742395417581059236130, 1885: 176229231641671815409487530302217850452007387, 1886: 181416335613995339496338175675291780004357523, 1887: 186754705909030660706666553292223320927706878, 1888: 192248713039873061921465120214608474899151280, 1889: 197902852631451912018290889751846175017276700, 1890: 203721748969018888548080806839085873409222663, 1891: 209710158646353589075380551065506324110555541, 1892: 215872974316462949034790068311792114803360768, 1893: 222215228547627476999327377660931337519227930, 1894: 228742097787726004875938672290676073251112495, 1895: 235458906439851487440117948662414751746035425, 1896: 242371131052313431017875037233367567350390976, 1897: 249484404626207844803286441041017222801266718, 1898: 256804521043823251651497040551112296246458295, 1899: 264337439621241331244215401011574782781334700, 1900: 272089289788583262011466359201428623427767364, 1901: 280066375901447845568248481717977121765830398, 1902: 288275182187185106927480861934498895209154826, 1903: 296722377829749335448869068867067104949579464, 1904: 305414822196978537321624475491324386207138350, 1905: 314359570214253084228181897886953506729950270, 1906: 323563877888595040544848710079341268243350278, 1907: 333035207987381310882223234930566921371066351, 1908: 342781235875958450915909855966319285240611144, 1909: 352809855518564809408156722848357746339640390, 1910: 363129185647086702371268910149149152584766993, 1911: 373747576102299648025575523786476989131026713, 1912: 384673614352373402423945044973430693054218643, 1913: 395916132193550721591800039752382776657876433, 1914: 407484212638044530444951338680763930621994820, 1915: 419387196994336597778328640988515637140928750, 1916: 431634692145202999016827948773519398239274548, 1917: 444236578028937695571550278721551746219224713, 1918: 457203015329395575643972370763403591173830810, 1919: 470544453380630393038248327984084169870052370, 1920: 484271638292061317700921219995285769876393805, 1921: 498395621300264386957594139661914904785275330, 1922: 512927767353652135411965358701027725220931707, 1923: 527879763936476202951968110645920036905758794, 1924: 543263630138763896173977941441058199308011100, 1925: 559091725978980633941148481298313317618632967, 1926: 575376761986396071222827176058084413124270202, 1927: 592131809050322598728023510231907577504041350, 1928: 609370308543590994569721078158344505753246979, 1929: 627106082727829397306582084065079630894972195, 1930: 645353345448318619933615779058934561872409372, 1931: 664126713126409278261223804893870154281524038, 1932: 683441216057704415059243252710086070145621992, 1933: 703312310024435417776917212697059694728111811, 1934: 723755888230689211116144545349876787252027480, 1935: 744788293569381118983800284897623329523811384, 1936: 766426331230110600455862693324715237997598939, 1937: 788687281657286442867926694461098498097562065, 1938: 811588913868164118077309502293768840003949925, 1939: 835149499140701056072067990291237777551833530, 1940: 859387825081405748983159033075649135425638325, 1941: 884323210083634058665255574996164926064666511, 1942: 909975518187071057883524303147934812769277935, 1943: 936365174349429389500998978473009079907862954, 1944: 963513180141695685953126594506747030515761180, 1945: 991441129878565264237073831290682236831192947, 1946: 1020171227196022316757683410004293870517496706, 1947: 1049726302088348378540247976304143049122065214, 1948: 1080129828417176195331669321286587690711167057, 1949: 1111405941905549479818145590739116367242780000, 1950: 1143579458630301665664240006110545368915059329, 1951: 1176675894026428898785508782184245465533665048, 1952: 1210721482417504396219216523662601652136179376, 1953: 1245743197086563215894590527223118960072913202, 1954: 1281768770902278683167516719540860443130307320, 1955: 1318826717515654486899160825985211020969456836, 1956: 1356946353142870071117550937780046987060960843, 1957: 1396157818950341697358512735475562356104045295, 1958: 1436492104058497734745724852296636956267964954, 1959: 1477981069181214654702422049514025480619599210, 1960: 1520657470918320177914639277247113472181645153, 1961: 1564554986719042364085227429425894281463674979, 1962: 1609708240534768479916261201915809290266567989, 1963: 1656152829179975566133060952832169077820577902, 1964: 1703925349420706097654088225457498186848567210, 1965: 1753063425810487348828764073209783931216955698, 1966: 1803605739294132404035202382553315081341190088, 1967: 1855592056600414568536728473961840601327835478, 1968: 1909063260445175620937659060948648856259756235, 1969: 1964061380567012302624155966071951926644451875, 1970: 2020629625618285067432170725261207144994992239, 1971: 2078812415934808833368620144510853807585221613, 1972: 2138655417208217715431844885515291279369574680, 1973: 2200205575085644913617857845505033592721522553, 1974: 2263511150722025533817142690940119270064496250, 1975: 2328621757311014594133664064174539456980750339, 1976: 2395588397621215290008835331658621643021314292, 1977: 2464463502565134245725579502592034085209328984, 1978: 2535300970829021467547395315846813198183591546, 1979: 2608156209592513548223075037746157905702847505, 1980: 2683086176367779880674969950590007819202341357, 1981: 2760149421988673761061033114268064448054050548, 1982: 2839406134781213852952373747778159055380262422, 1983: 2920918185947567114582770377976676661508796149, 1984: 3004749176196572544459946686955919368234128060, 1985: 3090964483654736576896042159262866214940589314, 1986: 3179631313092546273793802882159493889001969611, 1987: 3270818746501886244063493400323024051287288941, 1988: 3364597795061310125684361619251416376860936489, 1989: 3461041452526908153028282986522280729367368365, 1990: 3560224750087529486464584716859554522268776125, 1991: 3662224812724162303217742306542356590926722479, 1992: 3767120917114346857096063738777247515406335526, 1993: 3874994551123597548057533501867770741416429535, 1994: 3985929474926940257994009093217001343955328335, 1995: 4100011783804831583821441379839563991285227198, 1996: 4217329972658917930562969936711305445974785514, 1997: 4337975002294315534109569503386742455494341143, 1998: 4462040367516348205694592687945941817364967127, 1999: 4589622167090968789784046573687400867942870250, 2000: 4720819175619413888601432406799959512200344166, 2001: 4855732917379000237574365609687488912697273143, 2002: 4994467742183366148074839035447416380393781644, 2003: 5137130903316893622770745464235084139384928426, 2004: 5283832637599517075572081746564260420858901705, 2005: 5434686247639634059061258993904042430607990074, 2006: 5589808186334383050291570992756471405633041387, 2007: 5749318143678144230778676663789672984169195116, 2008: 5913339135941752405965378691599572441324623941, 2009: 6081997597286587859405678030809218670282246785, 2010: 6255423473879432172551153347179787953125682826, 2011: 6433750320575743037411316728215679204642749660, 2012: 6617115400240816052275556661314890288999332009, 2013: 6805659785780163657391920602286596663406217911, 2014: 6999528464952353007567067145415164276505069670, 2015: 7198870448039506994791503590601126801607534137, 2016: 7403838878452687162912842119176262318542314409, 2017: 7614591146351445269661694564912786246445478891, 2018: 7831289005358953156344654888013498638339711692, 2019: 8054098692456299826324570548607480763080403880, 2020: 8283191051141781691732068101840743191755759916, 2021: 8518741657943308344041302580996941768179250799, 2022: 8760930952374403498169602637389577451855415964, 2023: 9009944370426700552244228695797096011740585251, 2024: 9265972481694316138437595284729122693073711400, 2025: 9529211130228034799395854632912272457677896880, 2026: 9799861579219855238744997642818047729388291567, 2027: 10078130659621135236933601810787303619515113811, 2028: 10364230922800330115415428619787879783434758914, 2029: 10658380797349150440403847607713189208549844510, 2030: 10960804750148870398245267228037581609577682339, 2031: 11271733451811500913798689538973402825112404379, 2032: 11591403946613603138135282386492611425148475178, 2033: 11920059827043660471886625110700606109457615243, 2034: 12257951413087152938966999455842406831025654415, 2035: 12605335936376788660643906067688568691477294599, 2036: 12962477729338745637101954446070534143126297085, 2037: 13329648419469265315863347103932314055721954884, 2038: 13707127128879519866370496154104287110788727040, 2039: 14095200679250350101462435045670967566714006190, 2040: 14494163802342243065803242497250145705564482929, 2041: 14904319356209789989230727462504226498494263931, 2042: 15325978547273839186092526952960232758544597811, 2043: 15759461158408637244144834830819680263402565217, 2044: 16205095783205438232082764786847977319531548455, 2045: 16663220066578357477963673318612506891057322162, 2046: 17134180951882656619355889974597586372298980947, 2047: 17618334934720173062514849536736413843694654543, 2048: 18116048323611252751541173214616030020513022685, 2049: 18627697507717313357328883548487129542980353125, 2050: 19153669231803058848943059805108758933859747374, 2051: 19694360878632389188479682121479772827588278091, 2052: 20250180758997203961018562965051517467373563574, 2053: 20821548409583589567679943310731809893410960813, 2054: 21408894898885309715106534167513145969112337635, 2055: 22012663141380091963647773040348591535494857021, 2056: 22633308220189922777870335143856096247251187948, 2057: 23271297718452433681930253947266040250043569734, 2058: 23927112059636485682887466272819725468557276242, 2059: 24601244857041242112722641487525252331485884885, 2060: 25294203272724365584159904646608138971697036406, 2061: 26006508386111487092631615069752229687889047419, 2062: 26738695572545778772495897103306702147812265676, 2063: 27491314892043320887814631666080168776331811888, 2064: 28264931488526992879603605279805458570836160570, 2065: 29060125999818842393508123538658855855869573724, 2066: 29877494978678299986437859187588252356283557915, 2067: 30717651325181215594079225685922159612710890246, 2068: 31581224730742500897001026737587458361246031363, 2069: 32468862134093174645484430948409904593113694670, 2070: 33381228189530831120385246576357623531476650368, 2071: 34319005747770990684777087747947525376490393829, 2072: 35282896349735451425203004555804514075824949148, 2073: 36273620733622647942922713748119798292462316154, 2074: 37291919355614143333586997222803939193763027250, 2075: 38338552924580739339245889549713324449360541521, 2076: 39414302951161293776274047281093717842584188891, 2077: 40519972311597190003244878215733219997449415843, 2078: 41656385826715516924455731088372893657996361228, 2079: 42824390856464396526209228476474575762774879465, 2080: 44024857910414546084950481401735302373848095782, 2081: 45258681274652091016547586287700221970008068755, 2082: 46526779655498859083237494859206365034702358134, 2083: 47830096840507894753763929606166424148960110424, 2084: 49169602377193741528342591922356853935149504975, 2085: 50546292269969157794099110029993948769746687671, 2086: 51961189695772366269783089381199090558960547606, 2087: 53415345738881696537662435419712492307334180478, 2088: 54909840145427572963129830596638040418770704515, 2089: 56445782098125235102442269204682620745124030885, 2090: 58024311011765363351557172881384457469348901699, 2091: 59646597350013928176910703744766844433767270677, 2092: 61313843464087096107973721257849778294625405081, 2093: 63027284453881919316292784641070835053831354052, 2094: 64788189052158817856342546799691255570877518150, 2095: 66597860532387544551063529093372826237515675728, 2096: 68457637640884412378329010378860869685804024262, 2097: 70368895553885073626926030071097479233359907864, 2098: 72333046860214079886074787715712944920415424984, 2099: 74351542570229833233029956235268391407949627875, 2100: 76425873151741373195807749021080021459080291165, 2101: 78557569593611742891613633197716231871513782517, 2102: 80748204497781453174729297053600127492388932998, 2103: 82999393200464827976246067679320326020971457938, 2104: 85312794923291779902869927934730036659721510375, 2105: 87690113955187845526792666366851401712801134274, 2106: 90133100865806117918203480753613859038381596324, 2107: 92643553751346063460833585063932351673594098859, 2108: 95223319513616114811576859302283546424619314506, 2109: 97874295173219406337291510865301717288885200445, 2110: 100598429217765077170980775830078597915978709260, 2111: 103397722986031225236603653787203378188231402292, 2112: 106274232089029868642533106912359104776603150690, 2113: 109230067868949174578477633685673008965957469120, 2114: 112267398896973766514395710229044460157179222920, 2115: 115388452511010134752244464747991318862444784689, 2116: 118595516394371070307305070689995677519803374830, 2117: 121890940196500635216372474879596908517840948778, 2118: 125277137196849491653446187682001921308870438795, 2119: 128756586013039456106279781429309224204637155235, 2120: 132331832354485942225817194731144948296095338913, 2121: 136005490822677526183628341619662696228169437779, 2122: 139780246759343231332496879136294914183920566235, 2123: 143658858143770305041408732118198629930850140819, 2124: 147644157540568270666807354340091712330909224000, 2125: 151739054099208903158067016467162544501125246216, 2126: 155946535606706519753573960842521384418556790909, 2127: 160269670594838620141199867367375227901178121673, 2128: 164711610503343476443764262455655533446463188624, 2129: 169275591900568786145109713871008667212574145360, 2130: 173964938763083984897646967444489323060065487907, 2131: 178783064815808295968062329270497666350416021621, 2132: 183733475934247094438727208707795835845879643176, 2133: 188819772610470713392617031395550078686410106988, 2134: 194045652484512443040038057363040342445733893240, 2135: 199414912942906199650168544999618866932966543484, 2136: 204931453786129197483756438132982529754356479553, 2137: 210599279966760972657750340621024569609658319243, 2138: 216422504400217312716806872498425178952708753752, 2139: 222405350849966070103844047835296998593257719870, 2140: 228552156889181512949138540918848061266047740791, 2141: 234867376940844824665120188180587152072518199582, 2142: 241355585398350637585388084310633650150819331465, 2143: 248021479828733108998565670865001643954560554353, 2144: 254869884260680054932039940494913967190530868955, 2145: 261905752559560083345100350260758248905652921875, 2146: 269134171891745550301357546978902318483150550307, 2147: 276560366280573537433149830945908221546675684073, 2148: 284189700256347954756384460822072399114186994724, 2149: 292027682602848348780952829894171946286185196525, 2150: 300079970202875082019467410865495625479979094694, 2151: 308352371985426287572392634796034918345831989966, 2152: 316850852977169433649870812195036854291507911207, 2153: 325581538460939500937426146405250734530774231825, 2154: 334550718244066724977417207615678241114465752975, 2155: 343764851039409631696645200323540686552303329604, 2156: 353230568962043743490045985418104968175497835998, 2157: 362954682144632903677995273534058279957414924705, 2158: 372944183474588707707117294510467908715140736065, 2159: 383206253456204090418195791785818308423831594945, 2160: 393748265201029751587449904786884268416346918520, 2161: 404577789549846859589538794509144411672022826612, 2162: 415702600329676409598230534926593885982499170401, 2163: 427130679749354783768755297437892949499654467597, 2164: 438870223937296523272831771890659665602286473475, 2165: 450929648625159134260052749493609306300370136632, 2166: 463317594981220971649101966934064855005088490212, 2167: 476042935597381937471938911243959272191670950572, 2168: 489114780633797957215706040263930987465371910798, 2169: 502542484125264022730810437527574105649622691760, 2170: 516335650453567079927347553251246871212620557984, 2171: 530504140990139261462232960508189648909724886170, 2172: 545058080913453988432836606455557467047353067377, 2173: 560007866205722361999363584087410496745060913524, 2174: 575364170833565108914383039346175332072363129225, 2175: 591137954117456209042263051672264094963902965317, 2176: 607340468294858294890172396576637459876728673686, 2177: 623983266282097051667127111749751355541610352255, 2178: 641078209640152242143041148426227499209194350336, 2179: 658637476749676716333547258428298949880301221655, 2180: 676673571200691926609848235322274189175428592431, 2181: 695199330402549141183113024435698489390907024630, 2182: 714227934419889822186067591088150189762713935508, 2183: 733772915040486600160233205517764582904605949651, 2184: 753848165080998028345195047409661205734061410010, 2185: 774467947936825933802831039011913166290856798904, 2186: 795646907382423796556925927113569848920749045025, 2187: 817400077628568283525440629036885986580578161120, 2188: 839742893643273944545131128461036809985928936965, 2189: 862691201743203249313515607587263855592485446510, 2190: 886261270462600715344592984957682094231262687955, 2191: 910469801706960959527768615813845716032362752763, 2192: 935333942198826213870111109341848015258586306792, 2193: 960871295223299296636466125655717340185883228697, 2194: 987099932681053343467853379878084516482176109430, 2195: 1014038407456819902258601282188003020164821077713, 2196: 1041705766111542406799393149921058024912789843193, 2197: 1070121561906592696806185003711836723976318646033, 2198: 1099305868168664278558814578725663660095230751347, 2199: 1129279292004177556899411779284367814322107068750, 2200: 1160062988372259455129906418328374912794875140516, 2201: 1191678674525592817234330378465180518007035567938, 2202: 1224148644828669903250292851179037002332204681842, 2203: 1257495785963229293609758350537517985043490101070, 2204: 1291743592530906765707814604565428064732892610835, 2205: 1326916183063388353539586696826007823016666575690, 2206: 1363038316450618010620081932775702626766948267742, 2207: 1400135408797883233268006240578157606704308520406, 2208: 1438233550722879835539717164127729784341377881813, 2209: 1477359525104141972742451850876428128946776467300, 2210: 1517540825292515665993072463432902551892845533240, 2211: 1558805673797653668641491334803497135876242089678, 2212: 1601183041461816724044580259727354612842328867083, 2213: 1644702667133581285344348736857245137869671730074, 2214: 1689395077854376798567156661483099222514277324220, 2215: 1735291609571106892437555774714449031725527460139, 2216: 1782424428388448478757191595009703327418571383436, 2217: 1830826552374771058174587388568897962322872702465, 2218: 1880531873935975665104704330318867749822093808655, 2219: 1931575182771919095318938056959674511017686068185, 2220: 1983992189430464568754141912398798172706580941262, 2221: 2037819549474585022525115674537508812727151594151, 2222: 2093094888278340044956073813211683523416074682898, 2223: 2149856826467952296650447653773869417501164619869, 2224: 2208145006024624371311040214176565237134381870625, 2225: 2268000117066162685610486257867691977952149636083, 2226: 2329463925324911418747662088887963091854286975547, 2227: 2392579300339947019867081675868949317697298397221, 2228: 2457390244381942643492189138307718097264928854677, 2229: 2523941922129582344692758164350149756471869195790, 2230: 2592280691116887259141942758496845583141659899537, 2231: 2662454132971310608073787558386111506684369385813, 2232: 2734511085462965511444391934177140596906494183587, 2233: 2808501675385869578994261445169376899379754972068, 2234: 2884477352292623400907075579322579400861330771315, 2235: 2962490923104486707892612022451087039141493329190, 2236: 3042596587619376453548710860694923114675620792521, 2237: 3124849974940885736970186673957557524827120772983, 2238: 3209308180852011686602310843936272621314792055526, 2239: 3296029806157884531966398832249411659082252110525, 2240: 3385074996022409471869790373849802994298808805690, 2241: 3476505480324367989101580130555189921672623462046, 2242: 3570384615059176354982401320439389024740905215964, 2243: 3666777424813166614813801947045518673161561892966, 2244: 3765750646337939759592154130429553527537766985115, 2245: 3867372773253042492891322334008521298830352179629, 2246: 3971714101905938427653556222571377434088646307540, 2247: 4078846778418982139592272233327190495676444439866, 2248: 4188844846953860716858469962505733762730156946697, 2249: 4301784299224742745702713528067084946594634381000, 2250: 4417743125292169536796493320206228992803910550343, 2251: 4536801365670538316236136117174461033288094273661, 2252: 4659041164782862580763013973003868359053553220232, 2253: 4784546825797351362566231731168417844332785838733, 2254: 4913404866881227292111965728061869527659853830530, 2255: 5045704078908103627757617096847635981526636026359, 2256: 5181535584656163391837451036356625290841516214407, 2257: 5320992899535329981545125277691916180855473998805, 2258: 5464171993882588690437588095807084889323827738187, 2259: 5611171356865613078294130300389571289206397311350, 2260: 5762092062035869673687412904560243239930531635515, 2261: 5917037834573419710379575999541430738890622626340, 2262: 6076115120266708126452900640242923623341866228338, 2263: 6239433156271728550695355451490575993085942292134, 2264: 6407104043696079137218319509378718229702705761905, 2265: 6579242822054578576274630855578948789533455298734, 2266: 6755967545644295113522674510292835122483775946206, 2267: 6937399361888054675782970897485983723264323011797, 2268: 7123662591696737970806754341094737575112103730614, 2269: 7314884811901951462222340761939935289641834289395, 2270: 7511196939811964197947649707463044206175866380723, 2271: 7712733319945142389521924617582058172801542180874, 2272: 7919631812996487219317452100595913257543028088576, 2273: 8132033887094289430962576814720449927838393960827, 2274: 8350084711405357694774361105408889911972402015300, 2275: 8573933252148757415018198504928925593185861873742, 2276: 8803732371079513461579268567498022304249933730391, 2277: 9039638926505285189617314422998964084970595438542, 2278: 9281813876900616004271298745383250743059729594527, 2279: 9530422387184993604151073155371828079705355168950, 2280: 9785633937732631891816046069641124632254214557235, 2281: 10047622436183602390848394841406802515973193043806, 2282: 10316566332127702901769041143039403233989122380996, 2283: 10592648734734255132957468343310308444321456043571, 2284: 10876057533402872254341014560334244700946683620780, 2285: 11166985521512132864360358955503173717957792328653, 2286: 11465630523345040885726361109312137419668093929920, 2287: 11772195524272142592252579142228927699835475405262, 2288: 12086888804275213526126666074714236379441857513978, 2289: 12409924074896520730686758323108856061617655222490, 2290: 12741520619700810766902679602920740106349316265795, 2291: 13081903438339372702369995825105861818651826992639, 2292: 13431303394307778991751050067148151893379620506077, 2293: 13789957366491217272065156663906255405414311071587, 2294: 14158108404593693973445004415760318309772932242370, 2295: 14536005888549817728742960090051403934327801222156, 2296: 14923905692020358321733692442892587286459907678047, 2297: 15322070350075326847761463298913968554265401515217, 2298: 15730769231170936413643835624649288938501733002618, 2299: 16150278713529481654471379166675899361510665760775, 2300: 16580882366033921211442301450921091904365926280416, 2301: 17022871133751761754598643267756804218108498650480, 2302: 17476543528205726845562009156571175360531579106807, 2303: 17942205822511650658087298129211531345495818175057, 2304: 18420172251507067091174412069974707159021665744880, 2305: 18910765216997070947078996545777114475682919623589, 2306: 19414315498247211476154846356983916621521411447697, 2307: 19931162467856441629277246980513463599759674413041, 2308: 20461654313146490770914182133145338856645809727187, 2309: 21006148263207456404192932627622104852595304280970, 2310: 21565010821742923705373368869534441911701199887419, 2311: 22138618005861522471365237940368652982888104075000, 2312: 22727355590965521614482418924663783733921186781149, 2313: 23331619361890843810727406215610806254135308857160, 2314: 23951815370456759593096244705083096637451017834880, 2315: 24588360199587493406897494649744406335205727290057, 2316: 25241681234172046294108468111219387029991510514102, 2317: 25912216938832713390963025920891990759428674050912, 2318: 26600417142777051809706408361950504454660772072685, 2319: 27306743331912438295458811467722364839525869129400, 2320: 28031668948406848928849481174161195141360108410956, 2321: 28775679697884097775242882020060349688803476984805, 2322: 29539273864446490518541231137563989837057604952179, 2323: 30322962633722685585711432023667002655631855893969, 2324: 31127270424143511960418282768032077800615961592375, 2325: 31952735226653572764265207581869821725011637243487, 2326: 32799908953071669788426324706615644528794262188810, 2327: 33669357793318419597396187557448074241909961160527, 2328: 34561662581734899786701292837993789078148269659948, 2329: 35477419172721767722086620675579581559062365395875, 2330: 36417238825934036963035091771377814636876895938849, 2331: 37381748601272582004301821355152191840543933044480, 2332: 38371591763919473464910961559285225914454949449279, 2333: 39387428199670427009917909560877277324279071654230, 2334: 40429934840823983789090419362572880622618841036000, 2335: 41499806102893531791299424581039874366426784160676, 2336: 42597754332414930108684698464207986438238414531147, 2337: 43724510266129315639709919648795164529190983190550, 2338: 44880823501827658290753362113015735891775860228025, 2339: 46067462981150790416506320013365490407603364278280, 2340: 47285217484645973326080769865489605746387338228688, 2341: 48534896139388582534016509015707084448606794509814, 2342: 49817328939485198519236927086579980055136752412153, 2343: 51133367279782285645165745517535680609133370052296, 2344: 52483884503112733276871946748564813602003527319855, 2345: 53869776461420824806590383880147822175719204551469, 2346: 55291962091114697184508819760614991511857392669436, 2347: 56751384003004060684283391440819878903446789803099, 2348: 58249009087189871171927544609837628960380623034142, 2349: 59785829133281790377677305788784327434428364970750, 2350: 61362861466328639006942053695686748622617850877171, 2351: 62981149598856648513992946515066172932792511110884, 2352: 64641763899420155681002068750650481144652897951882, 2353: 66345802278079465613952539750862814246981008871159, 2354: 68094390889230939345801166300675543634997580023495, 2355: 69888684852224948030989898005576415781403878920995, 2356: 71729868990218182977254525351745038902483193889528, 2357: 73619158587717925895914811729724245783180985354842, 2358: 75557800167287273321320320811040130784252221919060, 2359: 77547072285891979874115998945868567670402747044445, 2360: 79588286351381543804941144999617740627898062871643, 2361: 81682787459609412105690788920445375282931841060492, 2362: 83831955252709738636327407566454519669269037443061, 2363: 86037204799060994583504133500298291142599767525961, 2364: 88299987495479913719532319572840702828357104994815, 2365: 90621791992202763126914659986946872015595738278003, 2366: 93004145141224771243446359569837640488487305606833, 2367: 95448612968582727407224954007027627693270062216153, 2368: 97956801671180298878693599735216669857785613237715, 2369: 100530358638770501129135789786132580428696541463525, 2370: 103170973501725013759939661850158896906366983382795, 2371: 105880379205235666714568162057607929186246674835477, 2372: 108660353110609438642727243903401536959027659486124, 2373: 111512718124334720773264584058717478384571245088082, 2374: 114439343855613415076071522953096149591716910973500, 2375: 117442147803070664704054798350668120890654926300513, 2376: 120523096571371667803183996442776155815729810091602, 2377: 123684207118493113105268436573489685721321552781151, 2378: 126927548034415307868377394917913546501247383867613, 2379: 130255240852020056553944404306572055559539047530145, 2380: 133669461390998803240347188535274022509125836065110, 2381: 137172441135595483551688849972013947996581871778170, 2382: 140766468647028954484433593096055372616292751308832, 2383: 144453891011460794882135190497537058556764977948995, 2384: 148237115324395707667015292482470242745754168289775, 2385: 152118610212423719809411357105042520067307779240520, 2386: 156100907393235880227548485941067592747534460439448, 2387: 160186603274868212495995174730244824826286924759060, 2388: 164378360595152301854136694694118079266206458932708, 2389: 168678910102375098323537690529566365095195830119715, 2390: 173091052278175313875346442702502205694341724313429, 2391: 177617659103729195986746184184236646145304254737028, 2392: 182261675870304487388520687355584130250935690880972, 2393: 187026123035288047490867195922886699634867141186408, 2394: 191914098124819930404162679326110679178204492902970, 2395: 196928777684194703542432119373410255613845416290627, 2396: 202073419277219465790162920942761564437025278844409, 2397: 207351363535747401800832745531222095970123079470866, 2398: 212766036260635806253027202800291886071043511130893, 2399: 218320950575408346303872686615815518603736687265550, 2400: 224019709133932919957689061390552862746031758458304, 2401: 229866006383458830949778967121025947053151071434926, 2402: 235863630884390155812442175854014517889393984836232, 2403: 242016467688206145276344061824939391497289921344319, 2404: 248328500774974299762177021852107412058234599633660, 2405: 254803815551937407606287486346848530864431251682411, 2406: 261446601414692355496335282873363983668020889836360, 2407: 268261154372515934523018586706764224652758295238166, 2408: 275251879739431193944393927980843975448015734231456, 2409: 282423294892647160394499527988292633580813431968720, 2410: 289780032100044965565638185282633831588088504297253, 2411: 297326841418424633617945474627449518623223932967198, 2412: 305068593664268994544312629723329236676843814611957, 2413: 313010283458824435839645487672681448751536128120719, 2414: 321157032349342507073515697424466804962980378707300, 2415: 329514092008371775927573078641257544141430283832310, 2416: 338086847513035826131406156272669425469096435441169, 2417: 346880820706280914339971199061511110032851886967137, 2418: 355901673642125591813707043622534952223283339280101, 2419: 365155212116994575920151188842851740380508864908970, 2420: 374647389289270354779812696943359199223073776527524, 2421: 384384309389248455327267290257609074709972871788879, 2422: 394372231521736030856900123129107963761511852907062, 2423: 404617573563588459702218138566029837845857058362469, 2424: 415126916158535023731030449746058156911457360217500, 2425: 425907006811702486258611691435747829051036619210903, 2426: 436964764086304546997571902667823798077679571339689, 2427: 448307281905025750783203518734071850525930124835870, 2428: 459941833958690501858441260833172834575927050017497, 2429: 471875878224871422129752689802003581309719671216145, 2430: 484117061599156426525236728117223720907832020184888, 2431: 496673224641860608784678055946833883950031191035725, 2432: 509552406443037374969583492229383313416835733059701, 2433: 522762849608713268897451362983651906277382721179854, 2434: 536313005371342643715460083111040042096768651944785, 2435: 550211538827551788032090316191702467148009553891765, 2436: 564467334306317355502338280181042531694130943361929, 2437: 579089500870801016601654991798984624538203584674550, 2438: 594087377957141194645081615027313378657219091976058, 2439: 609470541153583610086244251156702088407546864564250, 2440: 625248808123415184021445170239142357065496320226974, 2441: 641432244675250690988723453000798446534275367015717, 2442: 658031170984308451084537723836848917759126780943929, 2443: 675056167968400361774985057979390540476824195499264, 2444: 692518083822452741394297527894579793217444427279865, 2445: 710428040715467841255717203419691810125435835218542, 2446: 728797441653931534847387578562876222605215306007682, 2447: 747637977515770665320414243823232108546943571791584, 2448: 766961634259063882272862309538971496456501841189299, 2449: 786780700309812582901493233837104883069651992252500, 2450: 807107774133183849507621375104362485942528919417094, 2451: 827955771992745105077858611205558631300937454362243, 2452: 849337935902320652619232737317794449777545949179711, 2453: 871267841775213384980863950063063429886904651528812, 2454: 893759407775650814410526929963928966861696330836200, 2455: 916826902877433240978780331677009554236212353692084, 2456: 940484955634883423732306479679700600136395142799772, 2457: 964748563171321607096873785043308907920748393645865, 2458: 989633100390417258370972350733200785584553946028102, 2459: 1015154329415899462551538855668088513315200292902465, 2460: 1041328409265241672356796753836476758668568608962817, 2461: 1068171905763073500068056689718618672673472054705623, 2462: 1095701801700212541420510934836771894810436524644206, 2463: 1123935507244352919801698227500042488236652668362464, 2464: 1152890870608594412929146690100187865796230009117415, 2465: 1182586188984146757378861272237745685156851393567877, 2466: 1213040219743698104212153283094735988868458164856735, 2467: 1244272191922094708920237946746471334658921810675089, 2468: 1276301817981140870474529866246359687648227775992726, 2469: 1309149305865493979065272921268867078953610074980355, 2470: 1342835371356799383941072744632607586619060990003342, 2471: 1377381250733383747666895193431311551421473834674537, 2472: 1412808713743003709421434478836269410607157240633931, 2473: 1449140076896329138317020116671377802568526770518725, 2474: 1486398217089027121199419785627770438512228407175000, 2475: 1524606585560504203472825372845600976263733665501642, 2476: 1563789222197560394205351099996482830581156974888244, 2477: 1603970770191409168676519057930382172908445935119463, 2478: 1645176491056723265830534175841536314124424257900655, 2479: 1687432280021576600685684487181671811367617087501755, 2480: 1730764681797368211260238937556940484156749101230455, 2481: 1775200906738034957464112810216480762332001678674799, 2482: 1820768847398085810011063048337611865735620543349686, 2483: 1867497095499222138016227017428624557231848665351291, 2484: 1915414959315545554866069359053268627009894091487255, 2485: 1964552481487597746580633524928622127514294053468578, 2486: 2014940457275725421793253569605575859047900517862975, 2487: 2066610453263518227450300026070406061787487374956619, 2488: 2119594826522328312496888837397949369108992226003579, 2489: 2173926744248147339669532102906132397617461595649235, 2490: 2229640203882390293040946390903966696602633829194840, 2491: 2286770053728415559686499093247615980043870048333375, 2492: 2345352014075897634933772608434944801289607520822444, 2493: 2405422698845462573006497019894423614036351120521629, 2494: 2467019637766297143181469675691820929552138013921170, 2495: 2530181299099750724441152937967329319658147447405249, 2496: 2594947112922264451615392923126900249342712365881980, 2497: 2661357494981285189837685277991457183899724929972336, 2498: 2729453871138152742649660700418835108908145695065284, 2499: 2799278702412287477405614444445747930301938442180000, 2500: 2870875510641352469269629800993561138276373608937244, 2501: 2944288904772419516055596903431635682611440388817684, 2502: 3019564607799532159016586951616642980389816614848623, 2503: 3096749484363431362720513648966835225350796839944705, 2504: 3175891569029590968434327113853291229809825601961265, 2505: 3257040095261100652976951554528119114719453404725007, 2506: 3340245525103334116822171147466786507458445890183988, 2507: 3425559579597749814517587789768024144026745140376550, 2508: 3513035269942590955686749126214187667970579050845937, 2509: 3602726929418680979845445364711401806180203650663725, 2510: 3694690246098950482357992748748848483474524052004611, 2511: 3788982296360781887103496312666448565688651771156677, 2512: 3885661579220719274616818998490729558629719751838590, 2513: 3984788051511562939333648375836061468352863107532895, 2514: 4086423163922351728879727101483809741806177963555690, 2515: 4190629897922231281075551233411026977189480304097898, 2516: 4297472803589713195797719954967455347047259565521535, 2517: 4407018038369349240856665212333154882125704077589469, 2518: 4519333406778376182071537408268876717047377660539309, 2519: 4634488401086431042999613202320599056013666269808095, 2520: 4752554242991993841520963249414089899868727306156151}\n\ndef exp_sum(number):\n    if number < 0:\n        return 0\n    return ANSWERS[number]", "entry_point": "exp_sum", "task_id": "TACO_lite/561", "input_output_examples": [[[1], [2], [3], [4], [5], [10], [50], [80], [100]], [[1], [2], [3], [5], [7], [42], [204226], [15796476], [190569292]]]}
{"requirement": "def greet(name):\n\"\"\"Say hello!\n\nWrite a function to greet a person. Function will take name as input and greet the person by saying hello.\nReturn null/nil/None if input is empty string or null/nil/None.\n\nExample: \n\n```python\ngreet(\"Niks\") --> \"hello Niks!\"\ngreet(\"\")    --> None # Return None if input is empty string\ngreet(None)  --> None # Return None if input is None\n```\n\"\"\"", "inputs": [["Niks"], ["Nick"], [""], [null]], "outputs": [["hello Niks!"], ["hello Nick!"], [null], [null]], "starter_code": "def greet(name):", "canonical_solution": "def greet(name):\n    return f'hello {name}!' if name else None", "entry_point": "greet", "task_id": "TACO_lite/562", "input_output_examples": [[["Niks"], [null], [""]], [["hello Niks!"], [null], [null]]]}
{"requirement": "def max_sum(arr, ranges):\n\"\"\">When no more interesting kata can be resolved, I just choose to create the new kata, to solve their own, to enjoy the process  --myjinxin2015 said\n\n# Description:\n\n```if:javascript\nGiven an array `arr` that contains some integers(positive, negative or 0), and a `range` list such as `[[start1,end1],[start2,end2],...]`, start and end are the index of `arr` and start always less than end. Your task is to calculate the sum value of each range (start index and end index are both inclusive), and return the maximum sum value.\n```\n```if:ruby\nGiven an array (`arr`) of integers and an array (`ranges`) of ranges (e.g. `[[1, 32], [16, 24],...]`), which represent an index range of `arr`, calculate the sum of each range (start index and end index are both inclusive) of `arr`, and return the maximum sum.\n```\n```if:php\nGiven an array `$a` that contains some integers and a `$range` list such as `[[$start1, $end1], [$start2, $end2], ... ]` where `$start(n)` and `$end(n)` are valid keys of the non-associative array `$a` and `$start(n)` is always guaranteed to be strictly less than `$end(n)`.  Your task is to calculate the sum value of each range (start index and end index are both inclusive) and return the maximum sum value.\n```\n```if:haskell\nGiven a list `arr` that contains some integers(positive, negative or 0), and a `range` list such as `[(start1,end1),(start2,end2),...]`, start and end are the index of `arr` and start always less than end. Your task is to calculate the sum value of each range (start index and end index are both inclusive), and return the maximum sum value.\n```\n\nFor example:\n \n# Note:\n\n - `arr`/`$a` always has at least 5 elements;\n - `range`/`$range`/`ranges` always has at least 1 element;\n - All inputs are valid;\n - This is a simple version, if you want some challenge, please [try the challenge version](https://www.codewars.com/kata/the-maximum-sum-value-of-ranges-challenge-version/).\n\n# Some Examples\n\"\"\"", "inputs": [[[1, -2, 3, 4, -5, -4, 3, 2, 1], [[1, 3], [0, 4], [6, 8]]], [[1, -2, 3, 4, -5, -4, 3, 2, 1], [[1, 3]]], [[1, -2, 3, 4, -5, -4, 3, 2, 1], [[1, 4], [2, 5]]], [[11, -22, 31, 34, -45, -46, 35, 32, 21], [[1, 4], [0, 3], [6, 8], [0, 8]]]], "outputs": [[6], [5], [0], [88]], "starter_code": "def max_sum(arr, ranges):", "canonical_solution": "def max_sum(arr, ranges):\n    return max((sum(arr[start:stop + 1]) for start, stop in ranges))", "entry_point": "max_sum", "task_id": "TACO_lite/563", "input_output_examples": [[[[1, -2, 3, 4, -5, -4, 3, 2, 1], [[1, 3], [0, 4], [6, 8]]]], [[6]]]}
{"requirement": "def group_check(s):\n\"\"\"In English and programming, groups can be made using symbols such as `()` and `{}` that change meaning. However, these groups must be closed in the correct order to maintain correct syntax.\n\nYour job in this kata will be to make a program that checks a string for correct grouping. For instance, the following groups are done correctly:\n\n```\n({})\n[[]()]\n[{()}]\n```\n\nThe next are done incorrectly:\n```\n{(})\n([]\n[])\n```\n\nA correct string cannot close groups in the wrong order, open a group but fail to close it, or close a group before it is opened.\n\nYour function will take an input string that may contain any of the symbols `()`, `{}` or `[]` to create groups.\n\nIt should return `True` if the string is empty or otherwise grouped correctly, or `False` if it is grouped incorrectly.\n\"\"\"", "inputs": [["({})"], ["[[]()]"], ["[{()}]"], ["()"], ["([])"], ["{}([])"], ["{[{}[]()[]{}{}{}{}{}{}()()()()()()()()]{{{[[[((()))]]]}}}}(())[[]]{{}}[][][][][][][]({[]})"], [""], ["{(})"], ["[{}{}())"], ["{)[}"], ["[[[]])"], ["()[]{]"], ["{([]})"], ["([]"], ["[])"], ["([]))"], ["{{{{{{{{{{{((((((([])))))))}}}}}}}}}}"]], "outputs": [[true], [true], [true], [true], [true], [true], [true], [true], [false], [false], [false], [false], [false], [false], [false], [false], [false], [false]], "starter_code": "def group_check(s):", "canonical_solution": "BRACES = {'(': ')', '[': ']', '{': '}'}\n\ndef group_check(s):\n    stack = []\n    for b in s:\n        c = BRACES.get(b)\n        if c:\n            stack.append(c)\n        elif not stack or stack.pop() != b:\n            return False\n    return not stack", "entry_point": "group_check", "task_id": "TACO_lite/564", "input_output_examples": [[["({})"], ["[[]()]"], ["[{()}]"], ["{(})"], ["(["], ["]"]], [[true], [true], [true], [false], [false], [false]]]}
{"requirement": "def to_underscore(string):\n\"\"\"Complete the function/method so that it takes CamelCase string and returns the string in snake_case notation. Lowercase characters can be numbers. If method gets number, it should return string.\n\nExamples:\n\n``` javascript\n//  returns test_controller\ntoUnderscore('TestController');\n\n// returns movies_and_books\ntoUnderscore('MoviesAndBooks');\n\n// returns app7_test\ntoUnderscore('App7Test');\n\n// returns \"1\"\ntoUnderscore(1);\n```\n\n``` coffeescript  \n#  returns test_controller\ntoUnderscore 'TestController'\n\n# returns movies_and_books\ntoUnderscore 'MoviesAndBooks'\n\n# returns app7_test\ntoUnderscore 'App7Test'\n\n# returns \"1\"\ntoUnderscore 1\n```\n\"\"\"", "inputs": [["TestController"], ["ThisIsBeautifulDay"], ["Am7Days"], ["My3CodeIs4TimesBetter"], [5]], "outputs": [["test_controller"], ["this_is_beautiful_day"], ["am7_days"], ["my3_code_is4_times_better"], ["5"]], "starter_code": "def to_underscore(string):", "canonical_solution": "import re\n\ndef to_underscore(string):\n    return re.sub('(.)([A-Z])', '\\\\1_\\\\2', str(string)).lower()", "entry_point": "to_underscore", "task_id": "TACO_lite/565", "input_output_examples": [[["TestController"], ["MoviesAndBooks"], ["App7Test"], [1]], [["test_controller"], ["movies_and_books"], ["app7_test"], ["1"]]]}
{"requirement": "def odd(s):\n\"\"\"# Task\n Mr.Odd is my friend. Some of his common dialogues are “Am I looking odd?” , “It’s looking very odd” etc. Actually “odd” is his favorite word.\n\n In this valentine when he went to meet his girlfriend. But he forgot to take gift. Because of this he told his gf that he did an odd thing. His gf became angry and gave him punishment.\n\n His gf gave him a string str of contain only lowercase letter and told him,\n \n “You have to take 3 index `i,j,k` such that `i \".u..dbo\"(no more odd)`\n \n For `str=\"ooudddbd\"`, the result should be `2`.\n \n `\"ooudddbd\"(cut 1st odd)--> \".ou..dbd\"(cut 2nd odd) --> \"..u...b.\"`\n \n# Input/Output\n\n\n - `[input]` string `str`\n\n  a non-empty string that contains only lowercase letters.\n  \n  `0 < str.length <= 10000`\n\n\n - `[output]` an integer\n\n  the maximum number of \"odd\".\n\"\"\"", "inputs": [["oudddbo"], ["ouddddbo"], ["ooudddbd"], ["qoddoldfoodgodnooofostorodrnvdmddddeidfoi"]], "outputs": [[1], [1], [2], [6]], "starter_code": "def odd(s):", "canonical_solution": "import re\npattern = re.compile('o(.*?)d(.*?)d')\n\ndef odd(s):\n    n = 0\n    while pattern.search(s):\n        n += 1\n        s = pattern.sub('\\\\1\\\\2', s, count=1)\n    return n", "entry_point": "odd", "task_id": "TACO_lite/566", "input_output_examples": [[["ooudddbd"], ["oudddbo"]], [[2], [1]]]}
{"requirement": "def pattern(n, *x):\n\"\"\"## Task:\n\nYou have to write a function `pattern` which returns the following Pattern(See Examples) upto desired number of rows. \n\n* Note:`Returning` the pattern is not the same as `Printing` the pattern.\n\n### Parameters:\n    \n    pattern(        n        ,        x        );\n                    ^                 ^         \n                    |                 |         \n             Term upto which   Number of times  \n              Basic Pattern     Basic Pattern   \n                should be         should be     \n                 created          repeated      \n                                horizontally    \n    \n* Note: `Basic Pattern` means what we created in [Complete the pattern #12](\"http://www.codewars.com/kata/558ac25e552b51dbc60000c3\")\n### Rules/Note:\n\n* The pattern should be created using only unit digits.\n* If `n < 1` then it should return \"\" i.e. empty string.\n* If `x <= 1` then the basic pattern should not be repeated horizontally.\n* `The length of each line is same`, and is equal to the length of longest line in the pattern.\n* Range of Parameters (for the sake of CW Compiler) :\n  + `n ∈ (-∞,50]`\n  + `x ∈ (-∞,25]`\n* If only one argument is passed then the function `pattern` should run as if `x <= 1`.\n* The function `pattern` should work when extra arguments are passed, by ignoring the extra arguments.\n   \n   \n###Examples:\n\n* Having Two Arguments-\n\n + pattern(4,3):\n\n        1     1     1     1\n         2   2 2   2 2   2 \n          3 3   3 3   3 3  \n           4     4     4   \n          3 3   3 3   3 3  \n         2   2 2   2 2   2 \n        1     1     1     1\n       \n  + pattern(10,2):\n\n        1                 1                 1\n         2               2 2               2 \n          3             3   3             3  \n           4           4     4           4   \n            5         5       5         5    \n             6       6         6       6     \n              7     7           7     7      \n               8   8             8   8       \n                9 9               9 9        \n                 0                 0         \n                9 9               9 9        \n               8   8             8   8       \n              7     7           7     7      \n             6       6         6       6     \n            5         5       5         5    \n           4           4     4           4   \n          3             3   3             3  \n         2               2 2               2 \n        1                 1                 1\n\n* Having Only One Argument-\n\n  + pattern(25):\n\n        1                                               1\n         2                                             2 \n          3                                           3  \n           4                                         4   \n            5                                       5    \n             6                                     6     \n              7                                   7      \n               8                                 8       \n                9                               9        \n                 0                             0         \n                  1                           1          \n                   2                         2           \n                    3                       3            \n                     4                     4             \n                      5                   5              \n                       6                 6               \n                        7               7                \n                         8             8                 \n                          9           9                  \n                           0         0                   \n                            1       1                    \n                             2     2                     \n                              3   3                      \n                               4 4                       \n                                5                        \n                               4 4                       \n                              3   3                      \n                             2     2                     \n                            1       1                    \n                           0         0                   \n                          9           9                  \n                         8             8                 \n                        7               7                \n                       6                 6               \n                      5                   5              \n                     4                     4             \n                    3                       3            \n                   2                         2           \n                  1                           1          \n                 0                             0         \n                9                               9        \n               8                                 8       \n              7                                   7      \n             6                                     6     \n            5                                       5    \n           4                                         4   \n          3                                           3  \n         2                                             2 \n        1                                               1\n        \n        \n[List of all my katas](\"http://www.codewars.com/users/curious_db97/authored\")\n\"\"\"", "inputs": [[3, 7], [15, 3], [10, -29], [5], [4, 2, 3, 5, 7, -8], [-3, 5], [-11, -1], [-9999999], [-25, -11, 9], [-25, 5, -9, 55, -8, -7, 8]], "outputs": [["1   1   1   1   1   1   1   1\n 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \n  3   3   3   3   3   3   3  \n 2 2 2 2 2 2 2 2 2 2 2 2 2 2 \n1   1   1   1   1   1   1   1"], ["1                           1                           1                           1\n 2                         2 2                         2 2                         2 \n  3                       3   3                       3   3                       3  \n   4                     4     4                     4     4                     4   \n    5                   5       5                   5       5                   5    \n     6                 6         6                 6         6                 6     \n      7               7           7               7           7               7      \n       8             8             8             8             8             8       \n        9           9               9           9               9           9        \n         0         0                 0         0                 0         0         \n          1       1                   1       1                   1       1          \n           2     2                     2     2                     2     2           \n            3   3                       3   3                       3   3            \n             4 4                         4 4                         4 4             \n              5                           5                           5              \n             4 4                         4 4                         4 4             \n            3   3                       3   3                       3   3            \n           2     2                     2     2                     2     2           \n          1       1                   1       1                   1       1          \n         0         0                 0         0                 0         0         \n        9           9               9           9               9           9        \n       8             8             8             8             8             8       \n      7               7           7               7           7               7      \n     6                 6         6                 6         6                 6     \n    5                   5       5                   5       5                   5    \n   4                     4     4                     4     4                     4   \n  3                       3   3                       3   3                       3  \n 2                         2 2                         2 2                         2 \n1                           1                           1                           1"], ["1                 1\n 2               2 \n  3             3  \n   4           4   \n    5         5    \n     6       6     \n      7     7      \n       8   8       \n        9 9        \n         0         \n        9 9        \n       8   8       \n      7     7      \n     6       6     \n    5         5    \n   4           4   \n  3             3  \n 2               2 \n1                 1"], ["1       1\n 2     2 \n  3   3  \n   4 4   \n    5    \n   4 4   \n  3   3  \n 2     2 \n1       1"], ["1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1"], [""], [""], [""], [""], [""]], "starter_code": "def pattern(n, *x):", "canonical_solution": "def pattern(n, *x):\n    if n < 1:\n        return ''\n    x = x[0] if x and x[0] > 0 else 1\n    result = []\n    for i in range(1, n + 1):\n        line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\n        result.append(line + line[::-1][1:] + (line[1:] + line[::-1][1:]) * (x - 1))\n    return '\\n'.join(result + result[::-1][1:])", "entry_point": "pattern", "task_id": "TACO_lite/567", "input_output_examples": [[[4, 3], [10, 2], [25]], [["1     1     1     1", " 2   2 2   2 2   2 ", "  3 3   3 3   3 3  ", "   4     4     4   ", "  3 3   3 3   3 3  ", " 2   2 2   2 2   2 ", "1     1     1     1"], ["1                 1                 1", " 2               2 2               2 ", "  3             3   3             3  ", "   4           4     4           4   ", "    5         5       5         5    ", "     6       6         6       6     ", "      7     7           7     7      ", "       8   8             8   8       ", "        9 9               9 9        ", "         0                 0         ", "        9 9               9 9        ", "       8   8             8   8       ", "      7     7           7     7      ", "     6       6         6       6     ", "    5         5       5         5    ", "   4           4     4           4   ", "  3             3   3             3  ", " 2               2 2               2 ", "1                 1                 1"], ["1                                               1", " 2                                             2 ", "  3                                           3  ", "   4                                         4   ", "    5                                       5    ", "     6                                     6     ", "      7                                   7      ", "       8                                 8       ", "        9                               9        ", "         0                             0         ", "          1                           1          ", "           2                         2           ", "            3                       3            ", "             4                     4             ", "              5                   5              ", "               6                 6               ", "                7               7                ", "                 8             8                 ", "                  9           9                  ", "                   0         0                   ", "                    1       1                    ", "                     2     2                     ", "                      3   3                      ", "                       4 4                       ", "                        5                        ", "                       4 4                       ", "                      3   3                      ", "                     2     2                     ", "                    1       1                    ", "                   0         0                   ", "                  9           9                  ", "                 8             8                 ", "                7               7                ", "               6                 6               ", "              5                   5              ", "             4                     4             ", "            3                       3            ", "           2                         2           ", "          1                           1          ", "         0                             0         ", "        9                               9        ", "       8                                 8       ", "      7                                   7      ", "     6                                     6     ", "    5                                       5    ", "   4                                         4   ", "  3                                           3  ", " 2                                             2 ", "1                                               1"]]]}
{"requirement": "def has_subpattern(string):\n\"\"\"Similarly to the [previous kata](https://www.codewars.com/kata/string-subpattern-recognition-i/), you will need to return a boolean value if the base string can be expressed as the repetition of one subpattern.\n\nThis time there are two small changes:\n\n* if a subpattern has been used, it will be repeated at least twice, meaning the subpattern has to be shorter than the original string;\n* the strings you will be given might or might not be created repeating a given subpattern, then shuffling the result.\n\nFor example:\n\n```python\nhas_subpattern(\"a\") == False #no repeated shorter sub-pattern, just one character\nhas_subpattern(\"aaaa\") == True #just one character repeated\nhas_subpattern(\"abcd\") == False #no repetitions\nhas_subpattern(\"babababababababa\") == True #repeated \"ba\"\nhas_subpattern(\"bbabbaaabbaaaabb\") == True #same as above, just shuffled\n```\nStrings will never be empty and can be composed of any character (just consider upper- and lowercase letters as different entities) and can be pretty long (keep an eye on performances!).\n\nIf you liked it, go for either the [previous kata](https://www.codewars.com/kata/string-subpattern-recognition-i/) or the [next kata](https://www.codewars.com/kata/string-subpattern-recognition-iii/) of the series!\n\"\"\"", "inputs": [["a"], ["aaaa"], ["abcd"], ["babababababababa"], ["ababababa"], ["123a123a123a"], ["123A123a123a"], ["12aa13a21233"], ["12aa13a21233A"], ["abcdabcaccd"]], "outputs": [[false], [true], [false], [true], [false], [true], [false], [true], [false], [false]], "starter_code": "def has_subpattern(string):", "canonical_solution": "from collections import Counter\nfrom functools import reduce\nfrom math import gcd\n\ndef has_subpattern(string):\n    return reduce(gcd, Counter(string).values()) != 1", "entry_point": "has_subpattern", "task_id": "TACO_lite/568", "input_output_examples": [[["a"], ["aaaa"], ["abcd"], ["babababababababa"], ["bbabbaaabbaaaabb"]], [[false], [true], [false], [true], [true]]]}
{"requirement": "def is_divisible(wall_length, pixel_size):\n\"\"\"You're laying out a rad pixel art mural to paint on your living room wall in homage to [Paul Robertson](http://68.media.tumblr.com/0f55f7f3789a354cfcda7c2a64f501d1/tumblr_o7eq3biK9s1qhccbco1_500.png), your favorite pixel artist.\n\nYou want your work to be perfect down to the millimeter. You haven't decided on the dimensions of your piece, how large you want your pixels to be, or which wall you want to use. You just know that you want to fit an exact number of pixels.\n\nTo help decide those things you've decided to write a function, `is_divisible()` that will tell you whether a wall of a certain length can exactly fit an integer number of pixels of a certain length.\n\nYour function should take two arguments: the size of the wall in millimeters and the size of a pixel in millimeters. It should return `True` if you can fit an exact number of pixels on the wall, otherwise it should return `False`. For example `is_divisible(4050, 27)` should return `True`, but `is_divisible(4066, 27)` should return `False`.\n\nNote: you don't need to use an `if` statement here. Remember that in Python an expression using the `==` comparison operator will evaluate to either `True` or `False`:\n```python\n>>> def equals_three(num):\n>>>     return num == 3\n>>> equals_three(5)\nFalse\n>>> equals_three(3)\nTrue\n```\n\n\n```if:csharp\nDocumentation:\nKata.IsDivisible Method (Int32, Int32)\n\nReturns a boolean representing if the first argument is perfectly divisible by the second argument.\n\nSyntax\n\n\npublic\nstatic\nbool IsDivisible(\nint wallLength,\n    int pixelSize,\n    )\n  \n\n\n\nParameters\n\nwallLength\n\nType: System.Int32\nThe length of the wall in millimeters.\n\npixelSize\n\nType: System.Int32\nThe length of a pixel in millimeters.\n\nReturn Value\n\nType: System.Boolean\n  A boolean value representing if the first argument is perfectly divisible by the second.\n\n```\n\"\"\"", "inputs": [[4050, 27], [4066, 27], [10000, 20], [10005, 20]], "outputs": [[true], [false], [true], [false]], "starter_code": "def is_divisible(wall_length, pixel_size):", "canonical_solution": "def is_divisible(wall_length, pixel_size):\n    return wall_length % pixel_size == 0", "entry_point": "is_divisible", "task_id": "TACO_lite/569", "input_output_examples": [[[4050, 27], [4066, 27]], [[true], [false]]]}
{"requirement": "def decode_resistor_colors(bands):\n\"\"\"## Overview\nResistors are electrical components marked with colorful stripes/bands to indicate both their resistance value in ohms and how tight a tolerance that value has. While you could always get a tattoo like Jimmie Rodgers to help you remember the resistor color codes, in the meantime, you can write a function that will take a string containing a resistor's band colors and return a string identifying the resistor's ohms and tolerance values.\n\n## The resistor color codes\nYou can see this Wikipedia page for a colorful chart, but the basic resistor color codes are:\n\nblack: 0, brown: 1, red: 2, orange: 3, yellow: 4, green: 5, blue: 6, violet: 7, gray: 8, white: 9\n\nEach resistor will have at least three bands, with the first and second bands indicating the first two digits of the ohms value, and the third indicating the power of ten to multiply them by, for example a resistor with the three bands \"yellow violet black\" would be 47 * 10^0 ohms, or 47 ohms.\n\nMost resistors will also have a fourth band that is either gold or silver, with gold indicating plus or minus 5% tolerance, and silver indicating 10% tolerance. Resistors that do not have a fourth band are rated at 20% tolerance. (There are also more specialized resistors which can have more bands and additional meanings for some of the colors, but this kata will not cover them.)\n\n## Your mission\nThe way the ohms value needs to be formatted in the string you return depends on the magnitude of the value:\n\n* For resistors less than 1000 ohms, return a string containing the number of ohms, a space, the word \"ohms\" followed by a comma and a space, the tolerance value (5, 10, or 20), and a percent sign. For example,  for the \"yellow violet black\" resistor mentioned above, you would return `\"47 ohms, 20%\"`. \n\n* For resistors greater than or equal to 1000 ohms, but less than 1000000 ohms, you will use the same format as above, except that the ohms value will be divided by 1000 and have a lower-case \"k\" after it. For example, for a resistor with bands of \"yellow violet red gold\", you would return `\"4.7k ohms, 5%\"`\n\n* For resistors of 1000000 ohms or greater, you will divide the ohms value by 1000000 and have an upper-case \"M\" after it. For example, for a resistor with bands of \"brown black green silver\", you would return `\"1M ohms, 10%\"`\n\nTest case resistor values will all be between 10 ohms and 990M ohms.\n\n## More examples, featuring some common resistor values\n```\n\"brown black black\"                \"10 ohms, 20%\"\n\"brown black brown gold\"          \"100 ohms, 5%\"\n\"red red brown\"                   \"220 ohms, 20%\"\n\"orange orange brown gold\"        \"330 ohms, 5%\"\n\"yellow violet brown silver\"      \"470 ohms, 10%\"\n\"blue gray brown\"                 \"680 ohms, 20%\"\n\"brown black red silver\"           \"1k ohms, 10%\"\n\"brown black orange\"              \"10k ohms, 20%\"\n\"red red orange silver\"           \"22k ohms, 10%\"\n\"yellow violet orange gold\"       \"47k ohms, 5%\"\n\"brown black yellow gold\"        \"100k ohms, 5%\"\n\"orange orange yellow gold\"      \"330k ohms, 5%\"\n\"red black green gold\"             \"2M ohms, 5%\"\n```\nHave fun! And if you enjoy this kata, check out the sequel: Resistor Color Codes, Part 2\n\"\"\"", "inputs": [["yellow violet black"], ["yellow violet red gold"], ["brown black green silver"], ["brown black black"], ["brown black brown gold"], ["red red brown"], ["orange orange brown gold"], ["yellow violet brown silver"], ["blue gray brown"], ["brown black red silver"], ["brown black orange"], ["red red orange silver"], ["yellow violet orange gold"], ["brown black yellow gold"], ["orange orange yellow gold"], ["red black green gold"]], "outputs": [["47 ohms, 20%"], ["4.7k ohms, 5%"], ["1M ohms, 10%"], ["10 ohms, 20%"], ["100 ohms, 5%"], ["220 ohms, 20%"], ["330 ohms, 5%"], ["470 ohms, 10%"], ["680 ohms, 20%"], ["1k ohms, 10%"], ["10k ohms, 20%"], ["22k ohms, 10%"], ["47k ohms, 5%"], ["100k ohms, 5%"], ["330k ohms, 5%"], ["2M ohms, 5%"]], "starter_code": "def decode_resistor_colors(bands):", "canonical_solution": "code = {'black': 0, 'brown': 1, 'red': 2, 'orange': 3, 'yellow': 4, 'green': 5, 'blue': 6, 'violet': 7, 'gray': 8, 'white': 9, 'gold': 5, 'silver': 10, '': 20}\n\ndef decode_resistor_colors(bands):\n    colors = (bands + ' ').split(' ')\n    value = 10 * code[colors[0]] + code[colors[1]]\n    value *= 10 ** code[colors[2]]\n    tolerance = code[colors[3]]\n    prefix = ''\n    for p in 'kM':\n        if value // 1000:\n            prefix = p\n            value /= 1000\n    return '%g%s ohms, %d%%' % (value, prefix, tolerance)", "entry_point": "decode_resistor_colors", "task_id": "TACO_lite/570", "input_output_examples": [[["brown black black"], ["brown black brown gold"], ["red red brown"], ["orange orange brown gold"], ["yellow violet brown silver"], ["blue gray brown"], ["brown black red silver"], ["brown black orange"], ["red red orange silver"], ["yellow violet orange gold"], ["brown black yellow gold"], ["orange orange yellow gold"], ["red black green gold"]], [["10 ohms, 20%"], ["100 ohms, 5%"], ["220 ohms, 20%"], ["330 ohms, 5%"], ["470 ohms, 10%"], ["680 ohms, 20%"], ["1k ohms, 10%"], ["10k ohms, 20%"], ["22k ohms, 10%"], ["47k ohms, 5%"], ["100k ohms, 5%"], ["330k ohms, 5%"], ["2M ohms, 5%"]]]}
{"requirement": "def reverse(n):\n\"\"\"Impliment the reverse function, which takes in input n and reverses it. For instance, `reverse(123)` should return `321`. You should do this without converting the inputted number into a string.\n\"\"\"", "inputs": [[1234], [4321], [1001], [1010], [12005000]], "outputs": [[4321], [1234], [1001], [101], [50021]], "starter_code": "def reverse(n):", "canonical_solution": "def reverse(n):\n    m = 0\n    while n > 0:\n        n, m = (n // 10, m * 10 + n % 10)\n    return m", "entry_point": "reverse", "task_id": "TACO_lite/571", "input_output_examples": [[[123], [1234]], [[321], [4321]]]}
{"requirement": "def remove_smallest(numbers):\n\"\"\"# The museum of incredible dull things\n\nThe museum of incredible dull things wants to get rid of some exhibitions. Miriam, the interior architect, comes up with a plan to remove the most boring exhibitions. She gives them a rating, and then removes the one with the lowest rating.\n\nHowever, just as she finished rating all exhibitions, she's off to an important fair, so she asks you to write a program that tells her the ratings of the items after one removed the lowest one. Fair enough.\n\n# Task\n\nGiven an array of integers, remove the smallest value. **Do not mutate the original array/list**. If there are multiple elements with the same value, remove the one with a lower index. If you get an empty array/list, return an empty array/list.\n\nDon't change the order of the elements that are left.\n\n### Examples\n\n```python\nremove_smallest([1,2,3,4,5]) = [2,3,4,5]\nremove_smallest([5,3,2,1,4]) = [5,3,2,4]\nremove_smallest([2,2,1,2,1]) = [2,2,2,1]\n```\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 4]], [[5, 3, 2, 1, 4]], [[1, 2, 3, 1, 1]], [[]]], "outputs": [[[2, 3, 4, 5]], [[2, 3, 4]], [[5, 3, 2, 4]], [[2, 3, 1, 1]], [[]]], "starter_code": "def remove_smallest(numbers):", "canonical_solution": "def remove_smallest(numbers):\n    a = numbers[:]\n    if a:\n        a.remove(min(a))\n    return a", "entry_point": "remove_smallest", "task_id": "TACO_lite/572", "input_output_examples": [[[[1, 2, 3, 4, 5]], [[5, 3, 2, 1, 4]], [[2, 2, 1, 2, 1]]], [[[2, 3, 4, 5]], [[5, 3, 2, 4]], [[2, 2, 2, 1]]]]}
{"requirement": "def nth_char(words):\n\"\"\"Complete the function that takes an array of words.\n\nYou must concatenate the `n`th letter from each word to construct a new word which should be returned as a string, where `n` is the position of the word in the list.\n\nFor example:\n\n```\n[\"yoda\", \"best\", \"has\"]  -->  \"yes\"\n  ^        ^        ^\n  n=0     n=1     n=2\n```\n\n**Note:** Test cases contain valid input only - i.e. a string array or an empty array; and each word will have enough letters.\n\"\"\"", "inputs": [[["yoda", "best", "has"]], [[]], [["X-ray"]], [["No", "No"]], [["Chad", "Morocco", "India", "Algeria", "Botswana", "Bahamas", "Ecuador", "Micronesia"]]], "outputs": [["yes"], [""], ["X"], ["No"], ["Codewars"]], "starter_code": "def nth_char(words):", "canonical_solution": "def nth_char(words):\n    return ''.join((w[i] for i, w in enumerate(words)))", "entry_point": "nth_char", "task_id": "TACO_lite/573", "input_output_examples": [[[["yoda", "best", "has"]]], [["yes"]]]}
{"requirement": "def player_manager(players):\n\"\"\"You are the Dungeon Master for a public DnD game at your local comic shop and recently you've had some trouble keeping your players' info neat and organized so you've decided to write a bit of code to help keep them sorted!\n\nThe goal of this code is to create an array of objects that stores a player's name and contact number from a given string.\n\nThe method should return an empty array if the argument passed is an empty string or `nil`/`None`/`null`.\n\n## Examples\n\n```ruby \nplayer_manager(\"John Doe, 8167238327, Jane Doe, 8163723827\") returns [{player: \"John Doe\", contact: 8167238327}, {player: \"Jane Doe\", contact: 8163723827}]\nplayer_manager(nil) returns []\nplayer_manager(\"\") returns []\n```\n```python\nplayer_manager(\"John Doe, 8167238327, Jane Doe, 8163723827\") returns [{\"player\": \"John Doe\", \"contact\": 8167238327}, {\"player\": \"Jane Doe\", \"contact\": 8163723827}]\nplayer_manager(None) returns []\nplayer_manager(\"\")   returns []\n```\n```\nplayerManager(\"John Doe, 8167238327, Jane Doe, 8163723827\") returns [{player: \"John Doe\", contact: 8167238327}, {player: \"Jane Doe\", contact: 8163723827}]\nplayerManager(null) returns []\nplayerManager(\"\")   returns []\n```\n\nHave at thee!\n\"\"\"", "inputs": [["a, 5"], ["jane, 801, dave, 123"], ["Amelia, 8165254325, Jessie, 9187162345, Marcus Kaine, 8018273245"], [""], [null]], "outputs": [[[{"player": "a", "contact": 5}]], [[{"player": "jane", "contact": 801}, {"player": "dave", "contact": 123}]], [[{"player": "Amelia", "contact": 8165254325}, {"player": "Jessie", "contact": 9187162345}, {"player": "Marcus Kaine", "contact": 8018273245}]], [[]], [[]]], "starter_code": "def player_manager(players):", "canonical_solution": "import re\n\ndef player_manager(players):\n    return players and [{'player': who, 'contact': int(num)} for who, num in re.findall('(.+?), (\\\\d+)(?:, )?', players)] or []", "entry_point": "player_manager", "task_id": "TACO_lite/574", "input_output_examples": [[["John Doe, 8167238327, Jane Doe, 8163723827"], [null], [""]], [[{"player": "John Doe", "contact": 8167238327}, {"player": "Jane Doe", "contact": 8163723827}], [], []]]}
{"requirement": "def pattern(n):\n\"\"\"## Task \n\nUsing `n` as a parameter in the function `pattern`, where `n>0`, complete the codes to get the pattern (take the help of examples):\n\n**Note:** There is no newline in the end (after the pattern ends)\n\n\n### Examples\n\n`pattern(3)` should return `\"1\\n1*2\\n1**3\"`, e.g. the following:\n```\n1\n1*2\n1**3\n```\n`pattern(10):` should return the following:\n```\n1\n1*2\n1**3\n1***4\n1****5\n1*****6\n1******7\n1*******8\n1********9\n1*********10\n```\n\"\"\"", "inputs": [[3], [7], [20]], "outputs": [["1\n1*2\n1**3"], ["1\n1*2\n1**3\n1***4\n1****5\n1*****6\n1******7"], ["1\n1*2\n1**3\n1***4\n1****5\n1*****6\n1******7\n1*******8\n1********9\n1*********10\n1**********11\n1***********12\n1************13\n1*************14\n1**************15\n1***************16\n1****************17\n1*****************18\n1******************19\n1*******************20"]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    return '\\n'.join(['1'] + ['1' + '*' * (i - 1) + str(i) for i in range(2, n + 1)])", "entry_point": "pattern", "task_id": "TACO_lite/575", "input_output_examples": [[[3], [10]], [["1\n1*2\n1**3"], ["1\n1*2\n1**3\n1***4\n1****5\n1*****6\n1******7\n1*******8\n1********9\n1*********10"]]]}
{"requirement": "def maximum_product(arr):\n\"\"\"# Task\nGiven an integer array `arr`. Your task is to remove one element, maximize the product of elements. \n\nThe result is the element which should be removed. If more than one valid results exist, return the smallest one.\n\n\n# Input/Output\n\n\n`[input]` integer array `arr`\n\nnon-empty unsorted integer array. It contains positive integer, negative integer or zero.\n\n`3 ≤ arr.length ≤ 15`\n\n`-10 ≤ arr[i] ≤ 10`\n\n`[output]` an integer\n\nThe element that should be removed.\n\n# Example\n\nFor `arr = [1, 2, 3]`, the output should be `1`.\n\nFor `arr = [-1, 2, -3]`, the output should be `2`.\n\nFor `arr = [-1, -2, -3]`, the output should be `-1`.\n\nFor `arr = [-1, -2, -3, -4]`, the output should be `-4`.\n\"\"\"", "inputs": [[[1, 2, 3]], [[-1, 2, -3]], [[-1, -2, -3]], [[-1, -2, -3, -4]], [[0, 1, 2, 3]], [[0, -1, -2, -3]], [[0, -1, -2, -3, -4]], [[0, -1, 2, -3, 4]], [[0, -1, 2, 3]], [[0, -1, -2, -3, 4]], [[0, 0, 1]], [[0, 0, -1]], [[0, -1, 1]], [[0, 0, -1, 1]], [[0, 0, 0]], [[0, 0, 1, 2, 3]], [[-1, -2, -3, 0, 1, 2, 3]], [[-1, -2, 0, 1, 2]], [[-1, -2, 1, 2]], [[-1, -2, -3, 1, 2, 3]]], "outputs": [[1], [2], [-1], [-4], [0], [-3], [0], [0], [-1], [-3], [0], [-1], [-1], [-1], [0], [0], [-3], [0], [1], [-1]], "starter_code": "def maximum_product(arr):", "canonical_solution": "def maximum_product(arr):\n    if arr.count(0) > 1:\n        return min(arr)\n    neg = [n for n in arr if n < 0]\n    pos = [n for n in arr if n >= 0]\n    if len(neg) % 2:\n        return min(neg) if 0 in arr else max(neg)\n    else:\n        return min(pos) if pos else min(neg)", "entry_point": "maximum_product", "task_id": "TACO_lite/576", "input_output_examples": [[[[1, 2, 3]], [[-1, 2, -3]], [[-1, -2, -3]], [[-1, -2, -3, -4]]], [[1], [2], [-1], [-4]]]}
{"requirement": "def rotate(arr, n):\n\"\"\"> \n**Note**: This kata is a translation of this (Java) one: http://www.codewars.com/kata/rotate-array. I have not translated this first one as usual because I did not solved it, and I fear not being able to solve it (Java is **not** my cup of... tea). @cjmcgraw, if you want to use my translation on your kata feel free to use it.\n\nCreate a function named \"rotate\" that takes an array and returns a new one with the elements inside rotated n spaces.\n\nIf n is greater than 0 it should rotate the array to the right. If n is less than 0 it should rotate the array to the left. If n is 0, then it should return the array unchanged.\n\nExample:\n```python\ndata = [1, 2, 3, 4, 5];\n\nrotate(data, 1) # => [5, 1, 2, 3, 4]\nrotate(data, 2) # => [4, 5, 1, 2, 3]\nrotate(data, 3) # => [3, 4, 5, 1, 2]\nrotate(data, 4) # => [2, 3, 4, 5, 1]\nrotate(data, 5) # => [1, 2, 3, 4, 5]\n\nrotate(data, 0) # => [1, 2, 3, 4, 5]\n\nrotate(data, -1) # => [2, 3, 4, 5, 1]\nrotate(data, -2) # => [3, 4, 5, 1, 2]\nrotate(data, -3) # => [4, 5, 1, 2, 3]\nrotate(data, -4) # => [5, 1, 2, 3, 4]\nrotate(data, -5) # => [1, 2, 3, 4, 5]\n```\n\nFurthermore the method should take ANY array of objects and perform this operation on them:\n```python\nrotate(['a', 'b', 'c'], 1)     # => ['c', 'a', 'b']\nrotate([1.0, 2.0, 3.0], 1)     # => [3.0, 1.0, 2.0]\nrotate([True, True, False], 1) # => [False, True, True]\n```\n\nFinally the rotation shouldn't be limited by the indices available in the array. Meaning that if we exceed the indices of the array it keeps rotating.\n\nExample:\n```python\ndata = [1, 2, 3, 4, 5]\n\nrotate(data, 7)     # => [4, 5, 1, 2, 3]\nrotate(data, 11)    # => [5, 1, 2, 3, 4]\nrotate(data, 12478) # => [3, 4, 5, 1, 2]\n```\n\"\"\"", "inputs": [[["a", "b", "c"], 1], [[1.0, 2.0, 3.0], 1], [[true, true, false], 1]], "outputs": [[["c", "a", "b"]], [[3.0, 1.0, 2.0]], [[false, true, true]]], "starter_code": "def rotate(arr, n):", "canonical_solution": "def rotate(arr, n):\n    n = n % len(arr)\n    return arr[-n:] + arr[:-n]", "entry_point": "rotate", "task_id": "TACO_lite/577", "input_output_examples": [[[[1, 2, 3, 4, 5], 1], [[1, 2, 3, 4, 5], 2], [[1, 2, 3, 4, 5], 3], [[1, 2, 3, 4, 5], 4], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], -1], [[1, 2, 3, 4, 5], -2], [[1, 2, 3, 4, 5], -3], [[1, 2, 3, 4, 5], -4], [[1, 2, 3, 4, 5], -5], [["a", "b", "c"], 1], [[1.0, 2.0, 3.0], 1], [[true, true, false], 1], [[1, 2, 3, 4, 5], 7], [[1, 2, 3, 4, 5], 11], [[1, 2, 3, 4, 5], 12478]], [[5, 1, 2, 3, 4], [4, 5, 1, 2, 3], [3, 4, 5, 1, 2], [2, 3, 4, 5, 1], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [2, 3, 4, 5, 1], [3, 4, 5, 1, 2], [4, 5, 1, 2, 3], [5, 1, 2, 3, 4], [1, 2, 3, 4, 5], ["c", "a", "b"], [3.0, 1.0, 2.0], [false, true, true], [4, 5, 1, 2, 3], [5, 1, 2, 3, 4], [3, 4, 5, 1, 2]]]}
{"requirement": "def pythagorean_triplet(n):\n\"\"\"# Pythagorean Triples\n\nA Pythagorean triplet is a set of three numbers a, b, and c where `a^2 + b^2 = c^2`. In this Kata, you will be tasked with finding the Pythagorean triplets whose product is equal to `n`, the given argument to the function `pythagorean_triplet`.\n\n## Your task\n\nIn this Kata, you will be tasked with finding the Pythagorean triplets whose product is equal to `n`, the given argument to the function, where `0 < n < 10000000`\n\n\n## Examples\n\nOne such triple is `3, 4, 5`. For this challenge, you would be given the value `60` as the argument to your function, and then it would return the Pythagorean triplet in an array `[3, 4, 5]` which is returned in increasing order. `3^2 + 4^2 = 5^2` since `9 + 16 = 25` and then their product (`3 * 4 * 5`) is `60`.\n\n\nMore examples:\n\n| **argument** | **returns** |\n| ---------|---------|\n| 60       | [3, 4, 5] |\n| 780      | [5, 12, 13] |\n| 2040     | [8, 15, 17] |\n\"\"\"", "inputs": [[60], [780], [2040], [4200], [12180], [120120], [192720], [328860], [907200], [1440600]], "outputs": [[[3, 4, 5]], [[5, 12, 13]], [[8, 15, 17]], [[7, 24, 25]], [[20, 21, 29]], [[33, 56, 65]], [[48, 55, 73]], [[60, 63, 87]], [[42, 144, 150]], [[49, 168, 175]]], "starter_code": "def pythagorean_triplet(n):", "canonical_solution": "def pythagorean_triplet(n):\n    for a in range(3, n):\n        for b in range(a + 1, n):\n            c = (a * a + b * b) ** 0.5\n            if a * b * c > n:\n                break\n            if c == int(c) and a * b * c == n:\n                return [a, b, c]", "entry_point": "pythagorean_triplet", "task_id": "TACO_lite/578", "input_output_examples": [[[60], [780], [2040]], [[[3, 4, 5]], [[5, 12, 13]], [[8, 15, 17]]]]}
{"requirement": "def mn_lcm(m, n):\n\"\"\"# Task\n Your task is to find the smallest number which is evenly divided by all numbers between `m` and `n` (both inclusive).\n\n# Example\n\n For `m = 1, n = 2`, the output should be `2`.\n \n For `m = 2, n = 3`, the output should be `6`.\n \n For `m = 3, n = 2`, the output should be `6` too.\n \n For `m = 1, n = 10`, the output should be `2520`.\n\n# Input/Output\n\n\n - `[input]` integer `m`\n\n  `1 ≤ m ≤ 25`\n\n\n - `[input]` integer `n`\n\n  `1 ≤ n ≤ 25`\n\n\n - `[output]` an integer\n\"\"\"", "inputs": [[1, 2], [1, 5], [5, 1], [1, 10], [2, 3], [3, 5], [10, 20], [1, 25], [24, 25]], "outputs": [[2], [60], [60], [2520], [6], [60], [232792560], [26771144400], [600]], "starter_code": "def mn_lcm(m, n):", "canonical_solution": "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef mn_lcm(m, n):\n    if n < m:\n        m, n = (n, m)\n    ans = m\n    for i in range(m, n + 1):\n        ans = i * ans / gcd(i, ans)\n    return ans", "entry_point": "mn_lcm", "task_id": "TACO_lite/579", "input_output_examples": [[[1, 2], [2, 3], [3, 2], [1, 10]], [[2], [6], [6], [2520]]]}
{"requirement": "def guess_my_number(guess, number='123-451-2345'):\n\"\"\"Your Goal is to create a function that takes  two strings, a guess and a phone number. \n\nBased on the guess, the function should display a portion of the phone number:\n\n    guess_my_number('052', '123-451-2345')\n    would return the string: '#2#-#5#-2##5'\n    \n    or\n    \n    guess_my_number('142', '123-451-2345')\n    would return the string: '12#-4#1-2#4#'\n    \nOrder of the guess string should not matter, and should not have duplicates of the ten digitis 0-9. Guess will never be an empty string or contains any other charachters. The phone number will always bea ten digit number in the format ###-###-####.\n\nThe default number of 123-451-2345 should be included, but can be overwriten by a different number if supplied at the time of execution.\n\"\"\"", "inputs": [["0"], ["01"], ["012"], ["0123"], ["01234"], ["012345"]], "outputs": [["###-###-####"], ["1##-##1-####"], ["12#-##1-2###"], ["123-##1-23##"], ["123-4#1-234#"], ["123-451-2345"]], "starter_code": "def guess_my_number(guess, number='123-451-2345'):", "canonical_solution": "def guess_my_number(guess, number='123-451-2345'):\n    return ''.join((c if c in guess + '-' else '#' for c in number))", "entry_point": "guess_my_number", "task_id": "TACO_lite/580", "input_output_examples": [[["052", "123-451-2345"], ["142", "123-451-2345"]], [["#2#-#5#-2##5"], ["12#-4#1-2#4#"]]]}
{"requirement": "def calculate_damage(your_type, opponent_type, attack, defense):\n\"\"\"It's a Pokemon battle! Your task is to calculate the damage that a particular move would do using the following formula (not the actual one from the game):\n\nWhere:\n\n* attack = your attack power\n* defense = the opponent's defense\n* effectiveness = the effectiveness of the attack based on the matchup (see explanation below)\n\nEffectiveness:\n\nAttacks can be super effective, neutral, or not very effective depending on the matchup. For example, water would be super effective against fire, but not very effective against grass.\n\n* Super effective: 2x damage\n* Neutral: 1x damage\n* Not very effective: 0.5x damage\n\nTo prevent this kata from being tedious, you'll only be dealing with four types: `fire`, `water`, `grass`, and `electric`.  Here is the effectiveness of each matchup:\n\n* `fire > grass`\n* `fire < water`\n* `fire = electric`\n\n* `water < grass`\n* `water < electric`\n\n* `grass = electric`\n\nFor this kata, any type against itself is not very effective. Also, assume that the relationships between different types are symmetric (if `A` is super effective against `B`, then `B` is not very effective against `A`).\n\nThe function you must implement takes in:\n1. your type\n2. the opponent's type\n3. your attack power\n4. the opponent's defense\n\"\"\"", "inputs": [["fire", "water", 100, 100], ["grass", "water", 100, 100], ["electric", "fire", 100, 100], ["grass", "electric", 57, 19], ["grass", "water", 40, 40], ["grass", "fire", 35, 5], ["fire", "electric", 10, 2]], "outputs": [[25], [100], [50], [150], [100], [175], [250]], "starter_code": "def calculate_damage(your_type, opponent_type, attack, defense):", "canonical_solution": "import math\neffectiveness = {'electric': {'electric': 0.5, 'fire': 1, 'grass': 1, 'water': 2}, 'fire': {'electric': 1, 'fire': 0.5, 'grass': 2, 'water': 0.5}, 'grass': {'electric': 1, 'fire': 0.5, 'grass': 0.5, 'water': 2}, 'water': {'electric': 0.5, 'fire': 2, 'grass': 0.5, 'water': 0.5}}\n\ndef calculate_damage(your_type, opponent_type, attack, defense):\n    return math.ceil(50 * (attack / defense) * effectiveness[your_type][opponent_type])", "entry_point": "calculate_damage", "task_id": "TACO_lite/581", "input_output_examples": [[["fire", "water", 100, 100]], [[25]]]}
{"requirement": "def solve(a):\n\"\"\"Assume we take a number `x` and perform any one of the following operations:\n```Pearl\na) Divide x by 3 (if it is divisible by 3), or\nb) Multiply x by 2\n```\nAfter each operation, we write down the result. If we start with `9`, we can get a sequence such as:\n```\n[9,3,6,12,4,8] -- 9/3=3 -> 3*2=6 -> 6*2=12 -> 12/3=4 -> 4*2=8\n```\nYou will be given a shuffled sequence of integers and your task is to reorder them so that they conform to the above sequence. There will always be an answer. \n```\nFor the above example:\nsolve([12,3,9,4,6,8]) = [9,3,6,12,4,8].\n```\n\nMore examples in the test cases. Good luck!\n\"\"\"", "inputs": [[[1, 3]], [[4, 2]], [[12, 3, 9, 4, 6, 8]], [[4, 8, 6, 3, 12, 9]], [[558, 744, 1488, 279, 2232, 1116]], [[9, 1, 3]], [[3000, 9000]], [[4, 1, 2]], [[10, 5]]], "outputs": [[[3, 1]], [[2, 4]], [[9, 3, 6, 12, 4, 8]], [[9, 3, 6, 12, 4, 8]], [[279, 558, 1116, 2232, 744, 1488]], [[9, 3, 1]], [[9000, 3000]], [[1, 2, 4]], [[5, 10]]], "starter_code": "def solve(a):", "canonical_solution": "def solve(a):\n    for i in a:\n        li = [i]\n        while 1:\n            if li[-1] % 3 == 0 and li[-1] // 3 in a:\n                li.append(li[-1] // 3)\n            elif li[-1] * 2 in a:\n                li.append(li[-1] * 2)\n            else:\n                break\n        if len(li) == len(a):\n            return li", "entry_point": "solve", "task_id": "TACO_lite/582", "input_output_examples": [[[12, 3, 9, 4, 6, 8]], [[9, 3, 6, 12, 4, 8]]]}
{"requirement": "def double_check(str):\n\"\"\"Your job is to build a function which determines whether or not there are double characters in a string (including whitespace characters). For example ```aa```, ``!!`` or ```  ```.\n \n\nYou want the function to return true if the string contains double characters and false if not.  The test should not be case sensitive; for example both ```aa``` & ```aA``` return true.\n\nExamples:\n```python\n  double_check(\"abca\")\n  #returns False\n  \n  double_check(\"aabc\")\n  #returns True\n  \n  double_check(\"a 11 c d\")\n  #returns True\n  \n  double_check(\"AabBcC\")\n  #returns True\n  \n  double_check(\"a b  c\")\n  #returns True\n  \n  double_check(\"a b c d e f g h i h k\")\n  #returns False\n  \n  double_check(\"2020\")\n  #returns False\n  \n  double_check(\"a!@€£#$%^&*()_-+=}]{[|\\\"':;?/>.<,~\")\n  #returns False\n```\n\"\"\"", "inputs": [["abca"], ["aabc"], ["a 11 c d"], ["AabBcC"], ["a b  c"], ["a b c d e f g h i h k"], ["2020"], ["a!@€£#$%^&*()_-+=}]{[|':;?/>.<,~"]], "outputs": [[false], [true], [true], [true], [true], [false], [false], [false]], "starter_code": "def double_check(str):", "canonical_solution": "import re\n\ndef double_check(str):\n    return bool(re.search('(.)\\\\1', str.lower()))", "entry_point": "double_check", "task_id": "TACO_lite/583", "input_output_examples": [[["abca"], ["aabc"], ["a 11 c d"], ["AabBcC"], ["a b  c"], ["a b c d e f g h i h k"], ["2020"], ["a!@€£#$%^&*()_-+=}]{[|\"':;?/>.<,~"]], [[false], [true], [true], [true], [true], [false], [false], [false]]]}
{"requirement": "def radix_tree(*words):\n\"\"\"Implement a function which \ncreates a **[radix tree](https://en.wikipedia.org/wiki/Radix_tree)** (a space-optimized trie [prefix tree]) \nin which each node that is the only child is merged with its parent [unless a word from the input ends there]) \nfrom a given list of words \nusing dictionaries (aka hash maps or hash tables) where:\n\n1. The dictionary keys are the nodes.\n2. Leaf nodes are empty dictionaries.\n3. The value for empty input is an empty dictionary.\n4. Words are all lowercase or empty strings.\n5. Words can contain duplicates.\n\n### Examples:\n\n```python\n>>> radix_tree()\n{}\n\n>>> radix_tree(\"\")\n{}\n\n>>> radix_tree(\"\", \"\")\n{}\n\n>>> radix_tree(\"radix\", \"tree\")\n{\"radix\": {}, \"tree\": {}}\n\n>>> radix_tree(\"ape\", \"apple\")\n{\"ap\": {\"e\": {}, \"ple\": {}}}\n\n>>> radix_tree(\"apple\", \"applet\", \"apple\", \"ape\")\n{\"ap\": {\"ple\": {\"t\": {}}, \"e\": {}}}\n\n>>> radix_tree(\"romane\", \"romanus\", \"romulus\", \"rubens\", \"rubicon\", \"rubicundus\")\n{\"r\": {\"om\": {\"an\": {\"e\": {}, \"us\": {}}, \"ulus\": {}},\n       \"ub\": {\"ens\": {}, \"ic\": {\"on\": {}, \"undus\": {}}}}}\n\n>>> radix_tree(\"appleabcd\", \"apple\")\n{\"apple\": {\"abcd\": {}}}\n```\n\"\"\"", "inputs": [[""], ["abc", "def", "ghi", "jklm", "nop"], ["ape", "apple"], ["ape", "appendix", "apel"], ["ape", "apple", "applet", "appendix"], ["romane", "romanus", "romulus"], ["test", "tester", "testers"], ["test", "tester", "testers", "tester"], ["testers", "tester", "test"]], "outputs": [[{}], [{"abc": {}, "def": {}, "ghi": {}, "jklm": {}, "nop": {}}], [{"ap": {"e": {}, "ple": {}}}], [{"ap": {"e": {"l": {}}, "pendix": {}}}], [{"ap": {"e": {}, "p": {"le": {"t": {}}, "endix": {}}}}], [{"rom": {"an": {"e": {}, "us": {}}, "ulus": {}}}], [{"test": {"er": {"s": {}}}}], [{"test": {"er": {"s": {}}}}], [{"test": {"er": {"s": {}}}}]], "starter_code": "def radix_tree(*words):", "canonical_solution": "from itertools import groupby\nfrom operator import itemgetter\nfrom os.path import commonprefix\nfirst = itemgetter(0)\n\ndef radix_tree(*words):\n    words = [w for w in words if w]\n    result = {}\n    for key, grp in groupby(sorted(words), key=first):\n        lst = list(grp)\n        prefix = commonprefix(lst)\n        result[prefix] = radix_tree(*(w[len(prefix):] for w in lst))\n    return result", "entry_point": "radix_tree", "task_id": "TACO_lite/584", "input_output_examples": [[[], [""], ["", ""], ["radix", "tree"], ["ape", "apple"], ["apple", "applet", "apple", "ape"], ["romane", "romanus", "romulus", "rubens", "rubicon", "rubicundus"], ["appleabcd", "apple"]], [[{}], [{}], [{}], [{"radix": {}, "tree": {}}], [{"ap": {"e": {}, "ple": {}}}], [{"ap": {"ple": {"t": {}}, "e": {}}}], [{"r": {"om": {"an": {"e": {}, "us": {}}, "ulus": {}}, "ub": {"ens": {}, "ic": {"on": {}, "undus": {}}}}}], [{"apple": {"abcd": {}}}]]]}
{"requirement": "def sum_nested(lst):\n\"\"\"Implement a function to calculate the sum of the numerical values in a nested list. For example :\n\n```python\nsum_nested([1, [2, [3, [4]]]]) -> 10\n```\n\"\"\"", "inputs": [[[1]], [[1, 2, 3, 4]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[]], [[[1], []]], [[[1, 2, 3, 4]]], [[[], []]], [[1, [1], [[1]], [[[1]]]]], [[1, [1], [1, [1]], [1, [1], [1, [1]]]]], [[[[[], [], [[[[[[[[[[]]]]]]]]]]], [], [], [[[], [[]]]]], []]]], "outputs": [[1], [10], [55], [0], [1], [10], [0], [4], [8], [0]], "starter_code": "def sum_nested(lst):", "canonical_solution": "def sum_nested(lst):\n    return sum((sum_nested(x) if isinstance(x, list) else x for x in lst))", "entry_point": "sum_nested", "task_id": "TACO_lite/585", "input_output_examples": [[[[1, [2, [3, [4]]]]]], [[10]]]}
{"requirement": "def solve(a, b):\n\"\"\"Consider the numbers `6969` and `9116`. When you rotate them `180 degrees` (upside down), these numbers remain the same. To clarify, if we write them down on a paper and turn the paper upside down, the numbers will be the same. Try it and see! Some numbers such as `2` or `5` don't yield numbers when rotated.\n\nGiven a range, return the count of upside down numbers within that range.  For example, `solve(0,10) = 3`, because there are only `3` upside down numbers `>= 0 and < 10`. They are `0, 1, 8`.\n\nMore examples in the test cases.\n\nGood luck!\n\nIf you like this Kata, please try \n\n[Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\n[Life without primes](https://www.codewars.com/kata/59f8750ac374cba8f0000033)\n\nPlease also try the performance version of this kata at [Upside down numbers - Challenge Edition ](https://www.codewars.com/kata/59f98052120be4abfa000304)\n\"\"\"", "inputs": [[0, 10], [10, 100], [100, 1000], [1000, 10000], [10000, 15000], [15000, 20000], [60000, 70000], [60000, 130000]], "outputs": [[3], [4], [12], [20], [6], [9], [15], [55]], "starter_code": "def solve(a, b):", "canonical_solution": "REV = {'6': '9', '9': '6'}\nBASE = set('01869')\n\ndef isReversible(n):\n    s = str(n)\n    return not set(s) - BASE and (not len(s) % 2 or s[len(s) // 2] not in '69') and all((REV.get(c, c) == s[-1 - i] for i, c in enumerate(s[:len(s) // 2])))\n\ndef solve(a, b):\n    return sum((isReversible(n) for n in range(a, b)))", "entry_point": "solve", "task_id": "TACO_lite/586", "input_output_examples": [[[0, 10]], [[3]]]}
{"requirement": "def traverse_tcp_states(events):\n\"\"\"Automatons, or Finite State Machines (FSM), are extremely useful to programmers when it comes to software design. You will be given a simplistic version of an FSM to code for a basic TCP session.\n\nThe outcome of this exercise will be to return the correct state of the TCP FSM based on the array of events given.\n\n---------------------------------\n\nThe input array of events will consist of one or more of the following strings:\n\n```\nAPP_PASSIVE_OPEN, APP_ACTIVE_OPEN, APP_SEND, APP_CLOSE, APP_TIMEOUT, RCV_SYN, RCV_ACK, RCV_SYN_ACK, RCV_FIN, RCV_FIN_ACK\n```\n\n---------------------------------\n\nThe states are as follows and should be returned in all capital letters as shown:\n\n```\nCLOSED, LISTEN, SYN_SENT, SYN_RCVD, ESTABLISHED, CLOSE_WAIT, LAST_ACK, FIN_WAIT_1, FIN_WAIT_2, CLOSING, TIME_WAIT\n```\n\n---------------------------------\n\nThe input will be an array of events. Your job is to traverse the FSM as determined by the events, and return the proper state as a string, all caps, as shown above.\n\nIf an event is not applicable to the current state, your code will return `\"ERROR\"`.\n\n### Action of each event upon each state:\n(the format is `INITIAL_STATE: EVENT -> NEW_STATE`)\n\n```\nCLOSED: APP_PASSIVE_OPEN -> LISTEN\nCLOSED: APP_ACTIVE_OPEN  -> SYN_SENT\nLISTEN: RCV_SYN          -> SYN_RCVD\nLISTEN: APP_SEND         -> SYN_SENT\nLISTEN: APP_CLOSE        -> CLOSED\nSYN_RCVD: APP_CLOSE      -> FIN_WAIT_1\nSYN_RCVD: RCV_ACK        -> ESTABLISHED\nSYN_SENT: RCV_SYN        -> SYN_RCVD\nSYN_SENT: RCV_SYN_ACK    -> ESTABLISHED\nSYN_SENT: APP_CLOSE      -> CLOSED\nESTABLISHED: APP_CLOSE   -> FIN_WAIT_1\nESTABLISHED: RCV_FIN     -> CLOSE_WAIT\nFIN_WAIT_1: RCV_FIN      -> CLOSING\nFIN_WAIT_1: RCV_FIN_ACK  -> TIME_WAIT\nFIN_WAIT_1: RCV_ACK      -> FIN_WAIT_2\nCLOSING: RCV_ACK         -> TIME_WAIT\nFIN_WAIT_2: RCV_FIN      -> TIME_WAIT\nTIME_WAIT: APP_TIMEOUT   -> CLOSED\nCLOSE_WAIT: APP_CLOSE    -> LAST_ACK\nLAST_ACK: RCV_ACK        -> CLOSED\n```\n\n![\"EFSM TCP\" ](http://theangelfallseries.com/img/EFSM_TCP.png)\n\n## Examples\n\n```\n[\"APP_PASSIVE_OPEN\", \"APP_SEND\", \"RCV_SYN_ACK\"] =>  \"ESTABLISHED\"\n\n[\"APP_ACTIVE_OPEN\"] =>  \"SYN_SENT\"\n\n[\"APP_ACTIVE_OPEN\", \"RCV_SYN_ACK\", \"APP_CLOSE\", \"RCV_FIN_ACK\", \"RCV_ACK\"] =>  \"ERROR\"\n```\n\n \n\nThis kata is similar to [Design a Simple Automaton (Finite State Machine)](https://www.codewars.com/kata/design-a-simple-automaton-finite-state-machine), and you may wish to try that kata before tackling this one.\n\nSee wikipedia page [Transmission Control Protocol]( http://en.wikipedia.org/wiki/Transmission_Control_Protocol)\nfor further details.\n\nSee http://www.medianet.kent.edu/techreports/TR2005-07-22-tcp-EFSM.pdf page 4, for the FSM diagram used for this kata.\n\"\"\"", "inputs": [[["APP_PASSIVE_OPEN", "RCV_SYN", "RCV_ACK", "APP_CLOSE"]], [["APP_PASSIVE_OPEN", "RCV_SYN", "RCV_ACK"]], [["APP_PASSIVE_OPEN", "RCV_SYN"]], [["APP_PASSIVE_OPEN"]], [["APP_ACTIVE_OPEN", "APP_CLOSE"]], [["APP_ACTIVE_OPEN", "RCV_SYN", "APP_CLOSE", "RCV_FIN", "RCV_ACK"]], [["APP_ACTIVE_OPEN", "RCV_SYN", "APP_CLOSE", "RCV_FIN", "RCV_ACK", "APP_TIMEOUT"]], [["RCV_SYN", "RCV_ACK", "APP_CLOSE"]], [["APP_ACTIVE_OPEN", "RCV_SYN", "APP_CLOSE", "RCV_ACK"]], [["APP_ACTIVE_OPEN", "RCV_SYN_ACK", "RCV_FIN"]], [["APP_ACTIVE_OPEN", "RCV_SYN_ACK", "RCV_FIN", "APP_CLOSE"]], [["APP_ACTIVE_OPEN"]], [["APP_PASSIVE_OPEN", "APP_CLOSE"]], [["APP_ACTIVE_OPEN", "RCV_SYN_ACK", "APP_CLOSE"]], [["APP_PASSIVE_OPEN", "RCV_SYN", "RCV_ACK", "APP_PASSIVE_OPEN"]], [["APP_PASSIVE_OPEN", "RCV_SYN", "RCV_ACK", "APP_CLOSE", "RCV_FIN_ACK", "APP_TIMEOUT", "APP_ACTIVE_OPEN", "RCV_SYN", "APP_CLOSE", "RCV_FIN", "RCV_ACK"]], [["APP_PASSIVE_OPEN", "RCV_SYN", "RCV_ACK", "APP_CLOSE", "RCV_SYN"]], [["APP_PASSIVE_OPEN", "APP_CLOSE", "RCV_SYN"]], [["APP_PASSIVE_OPEN", "RCV_SYN", "RCV_ACK", "APP_CLOSE", "RCV_FIN"]]], "outputs": [["FIN_WAIT_1"], ["ESTABLISHED"], ["SYN_RCVD"], ["LISTEN"], ["CLOSED"], ["TIME_WAIT"], ["CLOSED"], ["ERROR"], ["FIN_WAIT_2"], ["CLOSE_WAIT"], ["LAST_ACK"], ["SYN_SENT"], ["CLOSED"], ["FIN_WAIT_1"], ["ERROR"], ["TIME_WAIT"], ["ERROR"], ["ERROR"], ["CLOSING"]], "starter_code": "def traverse_tcp_states(events):", "canonical_solution": "STATE_TO_COMMANDS = {'CLOSED': {'APP_PASSIVE_OPEN': 'LISTEN', 'APP_ACTIVE_OPEN': 'SYN_SENT'}, 'LISTEN': {'RCV_SYN': 'SYN_RCVD', 'APP_SEND': 'SYN_SENT', 'APP_CLOSE': 'CLOSED'}, 'SYN_RCVD': {'APP_CLOSE': 'FIN_WAIT_1', 'RCV_ACK': 'ESTABLISHED'}, 'SYN_SENT': {'RCV_SYN': 'SYN_RCVD', 'RCV_SYN_ACK': 'ESTABLISHED', 'APP_CLOSE': 'CLOSED'}, 'ESTABLISHED': {'APP_CLOSE': 'FIN_WAIT_1', 'RCV_FIN': 'CLOSE_WAIT'}, 'FIN_WAIT_1': {'RCV_FIN': 'CLOSING', 'RCV_FIN_ACK': 'TIME_WAIT', 'RCV_ACK': 'FIN_WAIT_2'}, 'CLOSING': {'RCV_ACK': 'TIME_WAIT'}, 'FIN_WAIT_2': {'RCV_FIN': 'TIME_WAIT'}, 'TIME_WAIT': {'APP_TIMEOUT': 'CLOSED'}, 'CLOSE_WAIT': {'APP_CLOSE': 'LAST_ACK'}, 'LAST_ACK': {'RCV_ACK': 'CLOSED'}}\n\ndef traverse_tcp_states(events):\n    state = 'CLOSED'\n    for event in events:\n        if event not in STATE_TO_COMMANDS[state]:\n            return 'ERROR'\n        state = STATE_TO_COMMANDS[state][event]\n    return state", "entry_point": "traverse_tcp_states", "task_id": "TACO_lite/587", "input_output_examples": [[[["APP_PASSIVE_OPEN", "APP_SEND", "RCV_SYN_ACK"]], [["APP_ACTIVE_OPEN"]], [["APP_ACTIVE_OPEN", "RCV_SYN_ACK", "APP_CLOSE", "RCV_FIN_ACK", "RCV_ACK"]]], [["ESTABLISHED"], ["SYN_SENT"], ["ERROR"]]]}
{"requirement": "def array_plus_array(arr1, arr2):\n\"\"\"I'm new to coding and now I want to get the sum of two arrays...actually the sum of all their elements. I'll appreciate for your help.\n\nP.S. Each array includes only integer numbers. Output is a number too.\n\"\"\"", "inputs": [[[1, 2, 3], [4, 5, 6]], [[-1, -2, -3], [-4, -5, -6]], [[0, 0, 0], [4, 5, 6]], [[100, 200, 300], [400, 500, 600]]], "outputs": [[21], [-21], [15], [2100]], "starter_code": "def array_plus_array(arr1, arr2):", "canonical_solution": "def array_plus_array(arr1, arr2):\n    return sum(arr1 + arr2)", "entry_point": "array_plus_array", "task_id": "TACO_lite/588", "input_output_examples": [[[[1, 2, 3], [4, 5, 6]]], [[21]]]}
{"requirement": "def f(n):\n\"\"\"When you want to get the square of a binomial of two variables x and y, you will have:\n\n`$(x+y)^2 = x^2 + 2xy + y ^2$`\n\nAnd the cube:\n\n`$(x+y)^3 = x^3 + 3x^2y + 3xy^2 +y^3$`\n\nIt is known from many centuries ago that for an exponent n, the result of a binomial x + y raised to the n-th power is:\n\nOr using the sumation notation:\n\nEach coefficient of a term has the following value:\n\nEach coefficient value coincides with the amount of combinations without replacements of a set of n elements using only k different ones of that set.\n\nLet's see the total sum of the coefficients of the different powers for the binomial:\n\n`$(x+y)^0(1)$`\n\n`$(x+y)^1 = x+y(2)$`\n\n`$(x+y)^2 = x^2 + 2xy + y ^2(4)$`\n\n`$(x+y)^3 = x^3 + 3x^2y + 3xy^2 +y^3(8)$`\n\nWe need a function that may generate an array with the values of all the coefficients sums from 0 to the value of n included and has the addition of all the sum values as last element.\n\nWe add some examples below:\n``` \nf(0) = [1, 1]\nf(1) = [1, 2, 3]\nf(2) = [1, 2, 4, 7]\nf(3) = [1, 2, 4, 8, 15]\n``` \n\nFeatures of the test\n``` \nLow Performance Tests\nNumber of tests = 50\n9 < n < 101\n\nHigh Performance Tests\nNumber of Tests = 50\n99 < n < 5001\n```\n\"\"\"", "inputs": [[0], [1], [2], [3], [6], [10]], "outputs": [[[1, 1]], [[1, 2, 3]], [[1, 2, 4, 7]], [[1, 2, 4, 8, 15]], [[1, 2, 4, 8, 16, 32, 64, 127]], [[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2047]]], "starter_code": "def f(n):", "canonical_solution": "def f(n):\n    return [2 ** i for i in range(n + 1)] + [2 ** (n + 1) - 1]", "entry_point": "f", "task_id": "TACO_lite/589", "input_output_examples": [[[0], [1], [2], [3]], [[1, 1], [1, 2, 3], [1, 2, 4, 7], [1, 2, 4, 8, 15]]]}
{"requirement": "def count_squares(lines):\n\"\"\"Your task is to write a function which counts the number of squares contained in an ASCII art picture.\n\nThe input pictures contain rectangles---some of them squares---drawn with the characters `-`, `|`, and `+`, where `-` and `|` are used to represent horizontal and vertical sides, and `+` is used to represent corners and intersections. Each picture may contain multiple, possibly overlapping, rectangles.\n\nA simple example input looks like this:\n\n    +--+  +----+\n    |  |  |    |    +-+\n    |  |  +----+    | |\n    +--+            +-+\n    \nThere are two squares and one rectangle in this picture, so your function should return 2 for this input.\n\nThe following picture does not contain any squares, so the answer for this one is 0:\n\n    +------+\n    |      |\n    +------+\n\nHere is another, more complex input:\n\n    +---+\n    |   |\n    | +-+-+\n    | | | |\n    +-+-+ |\n      |   |\n      +---+\n\nThe answer for this one is 3: two big squares, and a smaller square formed by the intersection of the two bigger ones. Similarly, the answer for the following picture is 5:\n\n    +-+-+\n    | | |\n    +-+-+\n    | | |\n    +-+-+\n\nYou are going to implement a function `count_squares()` which takes an ASCII art picture as input and returns the number of squares the picture shows. The input to that function is an array of strings, where each string corresponds to a line of the ASCII art picture. Each string is guaranteed to contain only the characters `-`, `|`, `+`, and `` `` (space).\n\nThe smallest valid square has a side length of 2 and is represented by four `+` characters arranged in a square; a single `+` character is not considered a square.\n\nHave fun!\n\"\"\"", "inputs": [[["+--+  +----+", "|  |  |    |    +-+", "|  |  +----+    | |", "+--+            +-+"]], [["+-----+", "|     |", "+-----+"]], [["+---+", "|   |", "| +-+-+", "| | | |", "+-+-+ |", "  |   |", "  +---+"]], [["+-+-+", "| | |", "+-+-+", "| | |", "+-+-+"]], [["+---+", "|   |", "|   |", "|   |", "|   |", "|   |", "|   |", "|   |", "+---+"]], [["+---+", "|   |", "|   |", "|   |", "+---+"]], [["+---+", "|   |", "|  ++--+", "|  ||  |", "+--++  |", "   |   |", "   +---+"]], [["   +---+", "   |   |", "+--++  |", "|  ||  |", "|  ++--+", "|   |", "+---+"]], [["+---+", "|   |", "|   |  +---+", "|   |  |   |", "+---+  |   |", "       |   |", "       +---+"]], [["+---+---+", "|   |   |", "|   |   |", "|   |   |", "+---+---+", "|   |   |", "|   |   |", "|   |   |", "+---+---+"]], [["+----+--+", "|    |  |", "|    |  |", "|    |  |", "+----+--+", "|    |  |", "|    |  |", "|    |  |", "+----+--+"]], [["+---+---+", "|   |   |", "|   |   |", "|   |   |", "|   |   |", "+---+---+", "|   |   |", "|   |   |", "+---+---+"]], [["+---+---+", "|   |   |", "| +-+-+ |", "| | | | |", "+-+-+-+-+", "| | | | |", "| +-+-+ |", "|   |   |", "+---+---+"]], [["  +---+", "  |   |", "  |   |  +--+", "+-+-+ |  |  |", "| +-+-+  |  |", "+---+    +--+"]], [["+---+", "|   |", "|   |", "+--+|+--+", "+--++|  |", "+--+-+--+", "   | |", "   | |", "   +-+"]], [["+---------+--+", "|  +---+  |  |", "|  |   |  |  |", "|  |   |  +--+", "|  |   |     |", "|  +---+     |", "|            |", "|            |", "|            |", "|            |", "|    +---+---+", "|    |   |   |", "|    |   |   |", "+----+---+---+", "     +---+"]], [["++", "++"]], [["+"]], [["   +--+", "   |  |", "   |  |", "+--+--+--+", "|  |  |  |", "|  |  |  |", "+--+--+--+", "   |  |", "   |  |", "   +--+"]], [["+--+  +--+", "|  |  |  |", "|  |  |  |", "+--+--+--+", "   |  |", "   |  |", "+--+--+--+", "|  |  |  |", "|  |  |  |", "+--+  +--+"]], [["   +--+  +--+", "   |  |  |  |", "   |  |  |  |", "+--+--+--+--+", "|  |  |  |", "|  |  |  |", "+--+--+--+--+", "   |  |  |  |", "   |  |  |  |", "+--+--+--+--+", "|  |  |  |", "|  |  |  |", "+--+  +--+"]], [["+-+ +-+", "| | | |", "+-+ +-+", "+-+ +-+", "| | | |", "+-+ +-+"]], [["+-+---+", "| |   |", "| |   |", "+-+-+-+", "| | | |", "| | | |", "+-+ +-+"]], [["++++++++", "++++++++", "++++++++", "++++++++", "++++++++", "++++++++", "++++++++", "++++++++"]], [["", "    +--+", " +--++ |   +-+", " |  || |   | |", " |  ++-+---+-+", " |   | |   |", " +---+-+   |", "       |   |", "       +---+", "", "+---+", "|   |", "|   |", "|   |", "+---+"]]], "outputs": [[2], [0], [3], [5], [0], [1], [2], [2], [2], [5], [1], [1], [10], [2], [1], [4], [1], [0], [5], [5], [11], [4], [0], [140], [6]], "starter_code": "def count_squares(lines):", "canonical_solution": "def count_squares(lines):\n\n    def s(i, j, z):\n        try:\n            return '+' == lines[i + z][j] == lines[i][j + z] == lines[i + z][j + z] and all((lines[i][c] in '-+' for c in range(j + 1, j + z))) and all((lines[i + z][c] in '-+' for c in range(j + 1, j + z))) and all((lines[r][j] in '|+' for r in range(i + 1, i + z))) and all((lines[r][j + z] in '|+' for r in range(i + 1, i + z)))\n        except IndexError:\n            return 0\n    return sum((x == '+' and sum((s(i, j, z) for z in range(1, min(len(lines) - i, len(row) - j)))) for i, row in enumerate(lines[:-1]) for j, x in enumerate(row[:-1])))", "entry_point": "count_squares", "task_id": "TACO_lite/590", "input_output_examples": [[[["+--+  +----+", "|  |  |    |    +-+", "|  |  +----+    | |", "+--+            +-+"]], [["+------+", "|      |", "+------+"]], [["+---+", "|   |", "| +-+-+", "| | | |", "+-+-+ |", "  |   |", "  +---+"]], [["+-+-+", "| | |", "+-+-+", "| | |", "+-+-+"]]], [[2], [0], [3], [5]]]}
{"requirement": "def vowel_start(st):\n\"\"\"Create a function that takes any sentence and redistributes the spaces (and adds additional spaces if needed) so that each word starts with a vowel. The letters should all be in the same order but every vowel in the sentence should be the start of a new word. The first word in the new sentence may start without a vowel. It should return a string in all lowercase with no punctuation (only alphanumeric characters).\n\n\n\nEXAMPLES\n'It is beautiful weather today!' becomes 'it isb e a ut if ulw e ath ert od ay'\n'Coding is great' becomes 'c od ing isgr e at'\n'my number is 0208-533-2325' becomes 'myn umb er is02085332325'\n\"\"\"", "inputs": [["It is beautiful weather today!"], ["Coding is great"], ["my number is 0208-533-2325"], ["oranges, apples, melon, pineapple"], ["under_score"]], "outputs": [["it isb e a ut if ulw e ath ert od ay"], ["c od ing isgr e at"], ["myn umb er is02085332325"], ["or ang es appl esm el onp in e appl e"], ["und ersc or e"]], "starter_code": "def vowel_start(st):", "canonical_solution": "from re import sub\n\ndef vowel_start(st):\n    return sub('(?<=.)([aeiou])', ' \\\\1', sub('[^a-z0-9]', '', st.lower()))", "entry_point": "vowel_start", "task_id": "TACO_lite/591", "input_output_examples": [[["It is beautiful weather today!"], ["Coding is great"], ["my number is 0208-533-2325"]], [["it isb e a ut if ulw e ath ert od ay"], ["c od ing isgr e at"], ["myn umb er is02085332325"]]]}
{"requirement": "def bits_battle(nums):\n\"\"\"The odd and even numbers are fighting against each other!\n\nYou are given a list of positive integers. The odd numbers from the list will fight using their `1` bits from their binary representation, while the even numbers will fight using their `0` bits. If present in the list, number `0` will be neutral, hence not fight for either side.\n\nYou should return:\n\n* `odds win` if number of `1`s from odd numbers is larger than `0`s from even numbers\n* `evens win` if number of `1`s from odd numbers is smaller than `0`s from even numbers\n* `tie` if equal, including if list is empty\n\nPlease note that any prefix that might appear in the binary representation, e.g. `0b`, should not be counted towards the battle.\n\n### Example:\nFor an input list of `[5, 3, 14]`:\n\n* odds: `5` and `3` => `101` and `11` => four `1`s\n* evens: `14` => `1110` => one `0`\n\nResult: `odds win` the battle with 4-1\n\nIf you enjoyed this kata, you can find a nice variation of it [here](https://www.codewars.com/kata/world-bits-war).\n\"\"\"", "inputs": [[[5, 3, 14]], [[3, 8, 22, 15, 78]], [[]], [[1, 13, 16]]], "outputs": [["odds win"], ["evens win"], ["tie"], ["tie"]], "starter_code": "def bits_battle(nums):", "canonical_solution": "def bits_battle(nums):\n    binary = '{:b}'.format\n    evens = odds = 0\n    for num in nums:\n        if num % 2:\n            odds += binary(num).count('1')\n        else:\n            evens += binary(num).count('0')\n    if odds == evens:\n        return 'tie'\n    return '{} win'.format('odds' if odds > evens else 'evens')", "entry_point": "bits_battle", "task_id": "TACO_lite/592", "input_output_examples": [[[[5, 3, 14]]], [["odds win"]]]}
{"requirement": "def print_number(number, char):\n\"\"\"# Task\n\n**Your task** is to implement function `printNumber` (`print_number` in C/C++ and Python `Kata.printNumber` in Java) that returns string that represents given number in text format (see examples below).\n\nArguments:\n - `number` — Number that we need to print (`num` in C/C++/Java)\n - `char` — Character for building number (`ch` in C/C++/Java)\n\n# Examples\n```c,python\nprint_number(99, '$')\n//Should return\n//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\\n\n//$                                      $\\n\n//$   $$$$   $$$$   $$$$   $$$$   $$$$   $\\n\n//$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\\n\n//$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\\n\n//$  $$  $$ $$  $$ $$  $$  $$$$   $$$$   $\\n\n//$  $$  $$ $$  $$ $$  $$   $$     $$    $\\n\n//$   $$$$   $$$$   $$$$   $$     $$     $\\n\n//$                                      $\\n\n//$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\nprint_number(12345, '*')\n//Should return\n//****************************************\\n\n//*                                      *\\n\n//*    **    ****   ****  **  ** ******  *\\n\n//*   ***   **  ** **  ** **  ** **      *\\n\n//*  * **      **     **  **  ** *****   *\\n\n//*    **     **      **   *****     **  *\\n\n//*    **    **    **  **     **     **  *\\n\n//*  ****** ******  ****      ** *****   *\\n\n//*                                      *\\n\n//****************************************\n\nprint_number(67890, '@')\n//Should return\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n\n//@                                      @\\n\n//@     @@  @@@@@@  @@@@   @@@@   @@@@   @\\n\n//@    @@   @@  @@ @@  @@ @@  @@ @@  @@  @\\n\n//@   @@@@     @@   @@@@  @@  @@ @@  @@  @\\n\n//@  @@  @@   @@    @@@@   @@@@  @@  @@  @\\n\n//@  @@  @@  @@    @@  @@   @@   @@  @@  @\\n\n//@   @@@@   @@     @@@@   @@     @@@@   @\\n\n//@                                      @\\n\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n```\n>***Note, that***:\n - Number should be `0 <= number <= 99999` and have `5 digits` (should have zeros at the start if needed)\n - Test cases contains only valid values (integers that are 0 <= number <= 99999) and characters\n - Numbers should have the same shape as in the examples (6x6 by the way)\n - Returned string should be joined by `\\n` character (except of the end)\n - Returned string should have 1 character *(height)* border (use the same character as for number) + padding (1 character in height vertical and 2 horizontal with ` `) around borders and 1 character margin between \"digits\"\n \n *Suggestions and translations are welcome.*\n\"\"\"", "inputs": [[99, "$"], [12345, "*"], [67890, "@"]], "outputs": [["$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                      $\n$   $$$$   $$$$   $$$$   $$$$   $$$$   $\n$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\n$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\n$  $$  $$ $$  $$ $$  $$  $$$$   $$$$   $\n$  $$  $$ $$  $$ $$  $$   $$     $$    $\n$   $$$$   $$$$   $$$$   $$     $$     $\n$                                      $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"], ["****************************************\n*                                      *\n*    **    ****   ****  **  ** ******  *\n*   ***   **  ** **  ** **  ** **      *\n*  * **      **     **  **  ** *****   *\n*    **     **      **   *****     **  *\n*    **    **    **  **     **     **  *\n*  ****** ******  ****      ** *****   *\n*                                      *\n****************************************"], ["@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@                                      @\n@     @@  @@@@@@  @@@@   @@@@   @@@@   @\n@    @@   @@  @@ @@  @@ @@  @@ @@  @@  @\n@   @@@@     @@   @@@@  @@  @@ @@  @@  @\n@  @@  @@   @@    @@@@   @@@@  @@  @@  @\n@  @@  @@  @@    @@  @@   @@   @@  @@  @\n@   @@@@   @@     @@@@   @@     @@@@   @\n@                                      @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"]], "starter_code": "def print_number(number, char):", "canonical_solution": "L = ((' #### ', '  ##  ', ' #### ', ' #### ', '##  ##', '######', '   ## ', '######', ' #### ', ' #### ').__getitem__, ('##  ##', ' ###  ', '##  ##', '##  ##', '##  ##', '##    ', '  ##  ', '##  ##', '##  ##', '##  ##').__getitem__, ('##  ##', '# ##  ', '   ## ', '   ## ', '##  ##', '##### ', ' #### ', '   ## ', ' #### ', '##  ##').__getitem__, ('##  ##', '  ##  ', '  ##  ', '   ## ', ' #####', '    ##', '##  ##', '  ##  ', ' #### ', ' #### ').__getitem__, ('##  ##', '  ##  ', ' ##   ', '##  ##', '    ##', '    ##', '##  ##', ' ##   ', '##  ##', '  ##  ').__getitem__, (' #### ', '######', '######', ' #### ', '    ##', '##### ', ' #### ', ' ##   ', ' #### ', ' ##   ').__getitem__)\n\ndef print_number(number, char):\n    s1, s2, l = ('#' * 40, f'#{' ' * 38}#', list(map(int, f'{number:05}')))\n    return '\\n'.join([s1, s2] + [f'#  {' '.join(map(L[i], l))}  #' for i in range(6)] + [s2, s1]).replace('#', char)", "entry_point": "print_number", "task_id": "TACO_lite/593", "input_output_examples": [[[99, "$"], [12345, "*"], [67890, "@"]], [["$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n$                                      $\n$   $$$$   $$$$   $$$$   $$$$   $$$$   $\n$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\n$  $$  $$ $$  $$ $$  $$ $$  $$ $$  $$  $\n$  $$  $$ $$  $$ $$  $$  $$$$   $$$$   $\n$  $$  $$ $$  $$ $$  $$   $$     $$    $\n$   $$$$   $$$$   $$$$   $$     $$     $\n$                                      $\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"], ["****************************************\n*                                      *\n*    **    ****   ****  **  ** ******  *\n*   ***   **  ** **  ** **  ** **      *\n*  * **      **     **  **  ** *****   *\n*    **     **      **   *****     **  *\n*    **    **    **  **     **     **  *\n*  ****** ******  ****      ** *****   *\n*                                      *\n****************************************"], ["@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@                                      @\n@     @@  @@@@@@  @@@@   @@@@   @@@@   @\n@    @@   @@  @@ @@  @@ @@  @@ @@  @@  @\n@   @@@@     @@   @@@@  @@  @@ @@  @@  @\n@  @@  @@   @@    @@@@   @@@@  @@  @@  @\n@  @@  @@  @@    @@  @@   @@   @@  @@  @\n@   @@@@   @@     @@@@   @@     @@@@   @\n@                                      @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"]]]}
{"requirement": "def inversemod(a, m):\n\"\"\"A common problem in number theory is to find x given a such that:\n\na * x = 1 mod [n] \n\nThen x is called the inverse of a modulo n. \n\nYour goal is to code a function inversemod wich take a and n as parameters and return x.\n\nYou may be interested by these pages:\n\nhttp://en.wikipedia.org/wiki/Modular_multiplicative_inverse\n\nhttp://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n\n\na and n should be co-prime to have a solution, if it is not the case, you should return None (Python), nil (Ruby) or null (Javascript). \n\na and n will be positive integers. The problem can easily be generalised to negative integer with some sign changes so we won't deal with them.\n\"\"\"", "inputs": [[2, 5], [48, 101], [7, 733], [48, 733], [2, 733], [229, 101], [229, 103], [229, 105], [5, 5], [61965, 17408], [101014, 125445], [156435434, 3543432125]], "outputs": [[3], [40], [419], [168], [367], [15], [9], [94], [null], [null], [7969], [1056765589]], "starter_code": "def inversemod(a, m):", "canonical_solution": "def egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        g, y, x = egcd(b % a, a)\n        return (g, x - b // a * y, y)\n\ndef inversemod(a, m):\n    g, x, y = egcd(a, m)\n    if g != 1:\n        return None\n    else:\n        return x % m", "entry_point": "inversemod", "task_id": "TACO_lite/594", "input_output_examples": [[[2, 5]], [[3]]]}
{"requirement": "def nba_extrap(ppg, mpg):\n\"\"\"An NBA game runs 48 minutes (Four 12 minute quarters). Players do not typically play the full game, subbing in and out as necessary. Your job is to extrapolate a player's points per game if they played the full 48 minutes.\n\nWrite a function that takes two arguments, ppg (points per game) and mpg (minutes per game) and returns a straight extrapolation of ppg per 48 minutes rounded to the nearest tenth. Return 0 if 0.\n\nExamples:\n```python\nnba_extrap(12, 20) # 28.8\nnba_extrap(10, 10) # 48\nnba_extrap(5, 17) # 14.1\nnba_extrap(0, 0) # 0\n```\n\nNotes:\nAll inputs will be either be an integer or float.\nFollow your dreams!\n\"\"\"", "inputs": [[2, 5], [3, 9], [16, 27], [11, 19], [14, 33], [1, 7.5], [6, 13]], "outputs": [[19.2], [16.0], [28.4], [27.8], [20.4], [6.4], [22.2]], "starter_code": "def nba_extrap(ppg, mpg):", "canonical_solution": "def nba_extrap(ppg, mpg):\n    return round(48.0 / mpg * ppg, 1) if mpg > 0 else 0", "entry_point": "nba_extrap", "task_id": "TACO_lite/595", "input_output_examples": [[[12, 20], [10, 10], [5, 17], [0, 0]], [[28.8], [48.0], [14.1], [0]]]}
{"requirement": "def xp_to_target_lvl(*args):\n\"\"\"In this Kata you are a game developer and have programmed the #1 MMORPG(Massively Multiplayer Online Role Playing Game) worldwide!!! Many suggestions came across you to make the game better, one of which you are interested in and will start working on at once.\n\nPlayers in the game have levels from 1 to 170, XP(short for experience) is required to increase the player's level and is obtained by doing all sorts of things in the game, a new player starts at level 1 with 0 XP. You want to add a feature that would enable the player to input a target level and the output would be how much XP the player must obtain in order for him/her to reach the target level...simple huh.\n\nCreate a function called ```xp_to_target_lvl``` that takes 2 arguments(```current_xp``` and ```target_lvl```, both as integer) and returns the remaining XP for the player to reach the ```target_lvl``` formatted as a rounded down integer.\n\nLeveling up from level 1 to level 2 requires 314 XP, at first each level up requires 25% XP more than the previous level up, every 10 levels the percentage increase reduces by 1. See the examples for a better understanding.\n\nKeep in mind that when players reach level 170 they stop leveling up but they continue gaining experience.\n\nIf one or both of the arguments are invalid(not given,  not in correct format, not in range...etc) return \"Input is invalid.\".\n\nIf the player has already reached the ```target_lvl``` return ```\"You have already reached level target_lvl.\"```.\n\nExamples:\n```\nxp_to_target_lvl(0,5) => XP from lvl1 to lvl2 = 314\n                         XP from lvl2 to lvl3 = 314 + (314*0.25) = 392\n                         XP from lvl3 to lvl4 = 392 + (392*0.25) = 490\n                         XP from lvl4 to lvl5 = 490 + (490*0.25) = 612\n                         XP from lvl1 to target_lvl = 314 + 392 + 490 + 612 = 1808\n                         XP from current_xp to target_lvl = 1808 - 0 = 1808\n\nxp_to_target_lvl(12345,17) => XP from lvl1 to lvl2 = 314                   \n                               XP from lvl2 to lvl3 = 314 + (314*0.25) = 392\n                               XP from lvl3 to lvl4 = 392 + (392*0.25) = 490\n                               ...\n                               XP from lvl9 to lvl10 = 1493 + (1493*0.25) = 1866 \n                               XP from lvl10 to lvl11 = 1866 + (1866*0.24) = 2313 << percentage increase is \n                               ...                                                   reduced by 1 (25 - 1 = 24)\n                               XP from lvl16 to lvl17 = 6779 + (6779*0.24) = 8405\n                               XP from lvl1 to target_lvl = 314 + 392 + 490 + 612 + ... + 8405 = 41880\n                               XP from current_xp to target_lvl = 41880 - 12345 = 29535\n\nxp_to_target_lvl() => \"Input is invalid.\"             }\nxp_to_target_lvl(-31428.7,'47') => \"Input is invalid.\" }> Invalid input\nxp_to_target_lvl(83749,0) => \"Input is invalid.\"   }\n\nxp_to_target_lvl(2017,4) => \"You have already reached level 4.\"\nxp_to_target_lvl(0,1) => 'You have already reached level 1.'\n```\n\nMake sure you round down the XP required for each level up, rounding up will result in the output being slightly wrong.\n\"\"\"", "inputs": [[0, 5], [12345, 17], [313, 2], [832696988485, 170], [769832696988484, 170], [10395, 11], [31428, "47"], [1, 171], [7392984749, 900], [123, 0], [-987654321, 99], [999999, [101]], [10396, 11], [0, 1], [2017, 4], [769832696988485, 170]], "outputs": [[1808], [29535], [1], [769000000000000], [1], [1], ["Input is invalid."], ["Input is invalid."], ["Input is invalid."], ["Input is invalid."], ["Input is invalid."], ["Input is invalid."], ["You have already reached level 11."], ["You have already reached level 1."], ["You have already reached level 4."], ["You have already reached level 170."]], "starter_code": "def xp_to_target_lvl(*args):", "canonical_solution": "def xp_to_target_lvl(*args):\n    if len(args) < 2:\n        return 'Input is invalid.'\n    current_xp, target_lvl = args\n    if not isinstance(target_lvl, int):\n        return 'Input is invalid.'\n    if not 0 < target_lvl < 171:\n        return 'Input is invalid.'\n    if current_xp < 0:\n        return 'Input is invalid.'\n    level = 1\n    xp = 314\n    xp_bump = 25\n    sum_ = 0\n    while level < target_lvl:\n        sum_ += xp\n        level += 1\n        xp_bump_reduction = level // 10\n        xp += int(xp * (xp_bump - xp_bump_reduction) / 100)\n    diff = sum_ - current_xp\n    if diff <= 0:\n        return 'You have already reached level {}.'.format(target_lvl)\n    else:\n        return diff", "entry_point": "xp_to_target_lvl", "task_id": "TACO_lite/596", "input_output_examples": [[[0, 5], [12345, 17], [-31428.7, "47"], [83749, 0], [2017, 4], [0, 1]], [[1808], [29535], ["Input is invalid."], ["Input is invalid."], ["You have already reached level 4."], ["You have already reached level 1."]]]}
{"requirement": "def halving_sum(n):\n\"\"\"## Task\n\nGiven a positive integer `n`, calculate the following sum: \n\n```\nn + n/2 + n/4 + n/8 + ...\n``` \n\nAll elements of the sum are the results of integer division.\n\n## Example\n\n```\n25  =>  25 + 12 + 6 + 3 + 1 = 47\n```\n\"\"\"", "inputs": [[25], [127], [38], [1], [320], [13], [15], [47], [101], [257]], "outputs": [[47], [247], [73], [1], [638], [23], [26], [89], [198], [512]], "starter_code": "def halving_sum(n):", "canonical_solution": "def halving_sum(n):\n    s = 0\n    while n:\n        s += n\n        n >>= 1\n    return s", "entry_point": "halving_sum", "task_id": "TACO_lite/597", "input_output_examples": [[[25]], [[47]]]}
{"requirement": "def switcheroo(s):\n\"\"\"Given a string made up of letters a, b, and/or c, switch the position of letters a and b (change a to b and vice versa). Leave any incidence of c untouched.\n\nExample:\n\n'acb' --> 'bca'\n'aabacbaa' --> 'bbabcabb'\n\"\"\"", "inputs": [["abc"], ["aaabcccbaaa"], ["ccccc"], ["abababababababab"], ["aaaaa"]], "outputs": [["bac"], ["bbbacccabbb"], ["ccccc"], ["babababababababa"], ["bbbbb"]], "starter_code": "def switcheroo(s):", "canonical_solution": "def switcheroo(s):\n    return s.translate(str.maketrans('ab', 'ba'))", "entry_point": "switcheroo", "task_id": "TACO_lite/598", "input_output_examples": [[["acb"], ["aabacbaa"], ["abc"]], [["bca"], ["bbabcabb"], ["bac"]]]}
{"requirement": "# Task\n Given a sorted array of integers `A`, find such an integer x that the value of `abs(A[0] - x) + abs(A[1] - x) + ... + abs(A[A.length - 1] - x)`\nis the smallest possible (here abs denotes the `absolute value`).\n\n If there are several possible answers, output the smallest one.\n\n# Example\n\n For `A = [2, 4, 7]`, the output should be `4`.\n\n# Input/Output\n\n\n - `[input]` integer array `A`\n\n    A non-empty array of integers, sorted in ascending order.\n\n    Constraints:\n\n    `1 ≤ A.length ≤ 200,`\n\n    `-1000000 ≤ A[i] ≤ 1000000.`\n\n\n - `[output]` an integer", "inputs": [[[2, 4, 7]], [[1, 1, 3, 4]], [[23]], [[-10, -10, -10, -10, -10, -9, -9, -9, -8, -8, -7, -6, -5, -4, -3, -2, -1, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]], [[-4, -1]], [[0, 7, 9]], [[-1000000, -10000, -10000, -1000, -100, -10, -1, 0, 1, 10, 100, 1000, 10000, 100000, 1000000]]], "outputs": [[4], [1], [23], [15], [-4], [7], [0]], "starter_code": "def absolute_values_sum_minimization(A):\n\t", "canonical_solution": "from statistics import median_low as absolute_values_sum_minimization", "entry_point": "absolute_values_sum_minimization", "task_id": "TACO_lite/599", "input_output_examples": [[[[2, 4, 7]]], [[4]]]}
{"requirement": "def order(sentence):\n\"\"\"Your task is to sort a given string. Each word in the string will contain a single number. This number is the position the word should have in the result.\n\nNote: Numbers can be from 1 to 9. So 1 will be the first word (not 0).\n\nIf the input string is empty, return an empty string.\nThe words in the input String will only contain valid consecutive numbers.\n\n\n## Examples\n\n```\n\"is2 Thi1s T4est 3a\"  -->  \"Thi1s is2 3a T4est\"\n\"4of Fo1r pe6ople g3ood th5e the2\"  -->  \"Fo1r the2 g3ood 4of th5e pe6ople\"\n\"\"  -->  \"\"\n```\n\"\"\"", "inputs": [["is2 Thi1s T4est 3a"], ["4of Fo1r pe6ople g3ood th5e the2"], ["d4o dru7nken sh2all w5ith s8ailor wha1t 3we a6"], [""], ["3 6 4 2 8 7 5 1 9"]], "outputs": [["Thi1s is2 3a T4est"], ["Fo1r the2 g3ood 4of th5e pe6ople"], ["wha1t sh2all 3we d4o w5ith a6 dru7nken s8ailor"], [""], ["1 2 3 4 5 6 7 8 9"]], "starter_code": "def order(sentence):", "canonical_solution": "def order(sentence):\n    return ' '.join(sorted(sentence.split(), key=lambda x: int(''.join(filter(str.isdigit, x)))))", "entry_point": "order", "task_id": "TACO_lite/600", "input_output_examples": [[["is2 Thi1s T4est 3a"], ["4of Fo1r pe6ople g3ood th5e the2"], [""]], [["Thi1s is2 3a T4est"], ["Fo1r the2 g3ood 4of th5e pe6ople"], [""]]]}
{"requirement": "def self_descriptive(num):\n\"\"\"A number is self-descriptive when the n'th digit describes the amount n appears in the number.\n\nE.g. 21200:\n\nThere are two 0's in the number, so the first digit is 2.\n\nThere is one 1 in the number, so the second digit is 1.\n\nThere are two 2's in the number, so the third digit is 2.\n\nThere are no 3's in the number, so the fourth digit is 0.\n\nThere are no 4's in the number, so the fifth digit is 0\n\n\nNumbers can be of any length up to 9 digits and are only full integers. For a given number derive a function ```selfDescriptive(num)``` that returns; ```true``` if the number is self-descriptive or ```false``` if the number is not.\n\"\"\"", "inputs": [[21200], [3211000], [42101000], [21230], [11200], [1210], [51120111], [2020], [11201], [6210001000]], "outputs": [[true], [true], [true], [false], [false], [true], [false], [true], [false], [true]], "starter_code": "def self_descriptive(num):", "canonical_solution": "from collections import Counter\n\ndef self_descriptive(num):\n    s = [int(a) for a in str(num)]\n    cnt = Counter(s)\n    return all((cnt[i] == b for i, b in enumerate(s)))", "entry_point": "self_descriptive", "task_id": "TACO_lite/601", "input_output_examples": [[[21200]], [[true]]]}
{"requirement": "def ant_bridge(ants, terrain):\n\"\"\"# Background\n\nMy pet bridge-maker ants are marching across a terrain from left to right.\n\nIf they encounter a gap, the first one stops and then next one climbs over him, then the next, and the next, until a bridge is formed across the gap. \n\nWhat clever little things they are!\n\nNow all the other ants can walk over the ant-bridge.\n\nWhen the last ant is across, the ant-bridge dismantles itself similar to how it was constructed.\n\nThis process repeats as many times as necessary (there may be more than one gap to cross) until all the ants reach the right hand side.\n\n# Kata Task\n\nMy little ants are marching across the terrain from left-to-right in the order ```A``` then ```B``` then ```C```...\n\nWhat order do they exit on the right hand side?\n\n# Notes\n\n* ```-``` = solid ground\n* ```.``` = a gap\n* The number of ants may differ but there are always enough ants to bridge the gaps\n* The terrain never starts or ends with a gap\n* Ants cannot pass other ants except by going over ant-bridges\n* If there is ever ambiguity which ant should move, then the ant at the **back** moves first\n\n# Example\n\n## Input\n* ants = ````GFEDCBA````\n* terrain = ```------------...-----------```\n\n## Output\n* result = ```EDCBAGF```\n\n## Details\n\n\nAnts moving left to right.\nGFEDCBA\n------------...-----------\n\nThe first one arrives at a gap.\nGFEDCB     A\n------------...-----------\n\nThey start to bridge over the gap...\nGFED       ABC\n------------...-----------\n\n...until the ant-bridge is completed!\nGF         ABCDE\n------------...-----------\n\nAnd then the remaining ants can walk across the bridge.\n               F\nG          ABCDE\n------------...-----------\n\nAnd when no more ants need to cross...\n           ABCDE        GF\n------------...-----------\n\n... the bridge dismantles itself one ant at a time....                \n             CDE      BAGF\n------------...-----------\n\n...until all ants get to the other side                \n                   EDCBAGF\n------------...-----------\n\"\"\"", "inputs": [["GFEDCBA", "-----------------------"], ["GFEDCBA", "------------...-----------"], ["GFEDCBA", "------------.....---------"], ["GFEDCBA", "------.....------.....---------"], ["GFEDCBA", "------------...-----..----"], ["CBA", "--.--.---"], ["GFEDCBA", "------....-.---"], ["EDCBA", "--..---...-..-...----..-----"], ["JIHGFEDCBA", "--........------.-........-........---....-----"], ["JIHGFEDCBA", "-.....------........-.......-.......----"], ["JIHGFEDCBA", "-------.......-.......-"], ["JIHGFEDCBA", "-------.......-.......-.......-"], ["GFEDCBA", "-.-.-.-"]], "outputs": [["GFEDCBA"], ["EDCBAGF"], ["GFEDCBA"], ["GFEDCBA"], ["BAGFEDC"], ["CBA"], ["AGFEDCB"], ["EDCBA"], ["GFEDCBAJIH"], ["CBAJIHGFED"], ["GFEDCBAJIH"], ["EDCBAJIHGF"], ["GFEDCBA"]], "starter_code": "def ant_bridge(ants, terrain):", "canonical_solution": "import re\n\ndef ant_bridge(ants, terrain):\n    nGap = sum((2 + len(gap) - (free == '-') for free, gap in re.findall('(-+)(\\\\.+)', '-' + terrain))) % len(ants)\n    return ants[-nGap:] + ants[:-nGap]", "entry_point": "ant_bridge", "task_id": "TACO_lite/602", "input_output_examples": [[["GFEDCBA", "------------...-----------"]], [["EDCBAGF"]]]}
{"requirement": "def number2words(n):\n\"\"\"Create a function that transforms any positive number to a string representing the number in words.  The function should work for all numbers between 0 and 999999.\n\n### Examples\n\n```\nnumber2words(0)  ==>  \"zero\"\nnumber2words(1)  ==>  \"one\"\nnumber2words(9)  ==>  \"nine\"\nnumber2words(10)  ==>  \"ten\"\nnumber2words(17)  ==>  \"seventeen\"\nnumber2words(20)  ==>  \"twenty\"\nnumber2words(21)  ==>  \"twenty-one\"\nnumber2words(45)  ==>  \"forty-five\"\nnumber2words(80)  ==>  \"eighty\"\nnumber2words(99)  ==>  \"ninety-nine\"\nnumber2words(100)  ==>  \"one hundred\"\nnumber2words(301)  ==>  \"three hundred one\"\nnumber2words(799)  ==>  \"seven hundred ninety-nine\"\nnumber2words(800)  ==>  \"eight hundred\"\nnumber2words(950)  ==>  \"nine hundred fifty\"\nnumber2words(1000)  ==>  \"one thousand\"\nnumber2words(1002)  ==>  \"one thousand two\"\nnumber2words(3051)  ==>  \"three thousand fifty-one\"\nnumber2words(7200)  ==>  \"seven thousand two hundred\"\nnumber2words(7219)  ==>  \"seven thousand two hundred nineteen\"\nnumber2words(8330)  ==>  \"eight thousand three hundred thirty\"\nnumber2words(99999)  ==>  \"ninety-nine thousand nine hundred ninety-nine\"\nnumber2words(888888)  ==>  \"eight hundred eighty-eight thousand eight hundred eighty-eight\"\n```\n\"\"\"", "inputs": [[0], [1], [8], [5], [9], [10], [19], [20], [22], [54], [80], [98], [100], [301], [793], [800], [650], [1000], [1003], [3052], [7300], [7217], [8340], [99997], [888887]], "outputs": [["zero"], ["one"], ["eight"], ["five"], ["nine"], ["ten"], ["nineteen"], ["twenty"], ["twenty-two"], ["fifty-four"], ["eighty"], ["ninety-eight"], ["one hundred"], ["three hundred one"], ["seven hundred ninety-three"], ["eight hundred"], ["six hundred fifty"], ["one thousand"], ["one thousand three"], ["three thousand fifty-two"], ["seven thousand three hundred"], ["seven thousand two hundred seventeen"], ["eight thousand three hundred forty"], ["ninety-nine thousand nine hundred ninety-seven"], ["eight hundred eighty-eight thousand eight hundred eighty-seven"]], "starter_code": "def number2words(n):", "canonical_solution": "words = 'zero one two three four five six seven eight nine' + ' ten eleven twelve thirteen fourteen fifteen sixteen seventeen eighteen nineteen twenty' + ' thirty forty fifty sixty seventy eighty ninety'\nwords = words.split(' ')\n\ndef number2words(n):\n    if n < 20:\n        return words[n]\n    elif n < 100:\n        return words[18 + n // 10] + ('' if n % 10 == 0 else '-' + words[n % 10])\n    elif n < 1000:\n        return number2words(n // 100) + ' hundred' + (' ' + number2words(n % 100) if n % 100 > 0 else '')\n    elif n < 1000000:\n        return number2words(n // 1000) + ' thousand' + (' ' + number2words(n % 1000) if n % 1000 > 0 else '')", "entry_point": "number2words", "task_id": "TACO_lite/603", "input_output_examples": [[[0], [1], [9], [10], [17], [20], [21], [45], [80], [99], [100], [301], [799], [800], [950], [1000], [1002], [3051], [7200], [7219], [8330], [99999], [888888]], [["zero"], ["one"], ["nine"], ["ten"], ["seventeen"], ["twenty"], ["twenty-one"], ["forty-five"], ["eighty"], ["ninety-nine"], ["one hundred"], ["three hundred one"], ["seven hundred ninety-nine"], ["eight hundred"], ["nine hundred fifty"], ["one thousand"], ["one thousand two"], ["three thousand fifty-one"], ["seven thousand two hundred"], ["seven thousand two hundred nineteen"], ["eight thousand three hundred thirty"], ["ninety-nine thousand nine hundred ninety-nine"], ["eight hundred eighty-eight thousand eight hundred eighty-eight"]]]}
{"requirement": "def sum_triangular_numbers(n):\n\"\"\"Your task is to return the sum of Triangular Numbers up-to-and-including the `nth` Triangular Number.\n\nTriangular Number: \"any of the series of numbers (1, 3, 6, 10, 15, etc.) obtained by continued summation of the natural numbers 1, 2, 3, 4, 5, etc.\"\n\n```\n[01]\n02 [03]\n04 05 [06]\n07 08 09 [10]\n11 12 13 14 [15]\n16 17 18 19 20 [21]\n```\n\ne.g. If `4` is given: `1 + 3 + 6 + 10 = 20`.\n\nTriangular Numbers cannot be negative so return 0 if a negative number is given.\n\"\"\"", "inputs": [[6], [34], [-291], [943], [-971]], "outputs": [[56], [7140], [0], [140205240], [0]], "starter_code": "def sum_triangular_numbers(n):", "canonical_solution": "def sum_triangular_numbers(n):\n    return n * (n + 1) * (n + 2) / 6 if n > 0 else 0", "entry_point": "sum_triangular_numbers", "task_id": "TACO_lite/604", "input_output_examples": [[[4], [6], [-1]], [[20], [56], [0]]]}
{"requirement": "def show_me(name):\n\"\"\"There's a new security company in Paris, and they decided to give their employees an algorithm to make first name recognition faster. In the blink of an eye, they can now detect if a string is a first name, no matter if it is a one-word name or an hyphenated name. They're given this documentation with the algorithm: \n\n*In France, you'll often find people with hyphenated first names. They're called \"prénoms composés\".\nThere could be two, or even more words linked to form a new name, quite like jQuery function chaining ;). \nThey're linked using the - symbol, like Marie-Joelle, Jean-Michel, Jean-Mouloud. \nThanks to this algorithm, you can now recognize hyphenated names quicker than Flash !* \n(yeah, their employees know how to use jQuery. Don't ask me why)\n\n\nYour mission if you accept it, recreate the algorithm.\nUsing the function **showMe**, which takes a **yourID** argument, you will check if the given argument is a name or not, by returning true or false. \n\n*Note that*\n\n- String will either be a one-word first name, or an hyphenated first name , its words being linked by \"-\". \n- Words can only start with an uppercase letter, and then lowercase letters (from a to z)\n\n\nNow is your time to help the guards !\n\"\"\"", "inputs": [["Francis"], ["Jean-Eluard"], ["Le Mec"], ["Bernard-Henry-Levy"], ["Meme Gertrude"], ["A-a-a-a----a-a"], ["Z-------------"], ["Jean-luc"], ["Jean--Luc"], ["JeanLucPicard"], ["-Jean-Luc"], ["Jean-Luc-Picard-"]], "outputs": [[true], [true], [false], [true], [false], [false], [false], [false], [false], [false], [false], [false]], "starter_code": "def show_me(name):", "canonical_solution": "import re\n\ndef show_me(name):\n    return bool(re.match('(-[A-Z][a-z]+)+$', '-' + name))", "entry_point": "show_me", "task_id": "TACO_lite/605", "input_output_examples": [[["Francis"]], [[true]]]}
{"requirement": "def band_name_generator(name):\n\"\"\"My friend wants a new band name for her band. She like bands that use the formula: \"The\" + a noun with the first letter capitalized, for example:\n\n`\"dolphin\" -> \"The Dolphin\"`\n\nHowever, when a noun STARTS and ENDS with the same letter, she likes to repeat the noun twice and connect them together with the first and last letter, combined into one word (WITHOUT \"The\" in front), like this:\n\n`\"alaska\" -> \"Alaskalaska\"`\n\nComplete the function that takes a noun as a string, and returns her preferred band name written as a string.\n\"\"\"", "inputs": [["knife"], ["tart"], ["sandles"], ["bed"], ["qq"]], "outputs": [["The Knife"], ["Tartart"], ["Sandlesandles"], ["The Bed"], ["Qqq"]], "starter_code": "def band_name_generator(name):", "canonical_solution": "def band_name_generator(name):\n    return name.capitalize() + name[1:] if name[0] == name[-1] else 'The ' + name.capitalize()", "entry_point": "band_name_generator", "task_id": "TACO_lite/606", "input_output_examples": [[["dolphin"], ["alaska"], ["knife"]], [["The Dolphin"], ["Alaskalaska"], ["The Knife"]]]}
{"requirement": "def power_mod(b, e, m):\n\"\"\"Your task is to create a new implementation of `modpow` so that it computes `(x^y)%n` for large `y`. The problem with the current implementation is that the output of `Math.pow` is so large on our inputs that it won't fit in a 64-bit float.\n\nYou're also going to need to be efficient, because we'll be testing some pretty big numbers.\n\"\"\"", "inputs": [[11, 10, 300], [11, 100000, 49], [5, 100000000, 19], [2, 3, 5], [4, 12, 3], [200, 3000, 10], [8132, 21302, 5], [9, 193125, 37], [13, 81230123, 22], [29, 1013293125, 492], [31, 902938423012, 1023]], "outputs": [[1], [32], [5], [3], [1], [0], [4], [26], [19], [161], [961]], "starter_code": "def power_mod(b, e, m):", "canonical_solution": "def power_mod(b, e, m):\n    res, b = (1, b % m)\n    while e > 0:\n        if e & 1:\n            res = res * b % m\n        e >>= 1\n        b = b * b % m\n    return res", "entry_point": "power_mod", "task_id": "TACO_lite/607", "input_output_examples": [[[11, 10, 300]], [[1]]]}
{"requirement": "def missing(nums, s):\n\"\"\"Jenny is 9 years old. She is the youngest detective in North America. Jenny is a 3rd grader student, so when a new mission comes up, she gets a code to decipher in a form of a sticker (with numbers) in her math notebook and a comment (a sentence) in her writing notebook. All she needs to do is to figure out one word, from there she already knows what to do. \nAnd here comes your role - you can help Jenny find out what the word is! \n\nIn order to find out what the word is, you should use the sticker (array of 3 numbers) to retrive 3 letters from the comment (string) that create the word.\n\n- Each of the numbers in the array refers to the position of a letter in the string, in increasing order.\n- Spaces are not places, you need the actual letters. No spaces.\n- The returned word should be all lowercase letters.\n- if you can't find one of the letters using the index numbers, return \"No mission today\". Jenny would be very sad, but that's life... :( \n\nExample:\ninput: [5, 0, 3], \"I Love You\"\noutput: \"ivy\"\n(0 = \"i\", 3 = \"v\", 5 = \"y\")\n\"\"\"", "inputs": [[[0, 3, 5], "I love you"], [[7, 10, 1], "see you later"], [[29, 31, 8], "The quick brown fox jumps over the lazy dog"], [[12, 4, 6], "Good Morning"], [[1, 16, 21], "A purple pig and a green donkey flew a kite in the middle of the night"], [[35, 8, 20], "A song can make or ruin your day if you let it get to you"], [[20, 3, 27], "I love eating toasted cheese and tuna"], [[50, 4, 6], "Hi everybody"], [[8, 31, 28], "If I do not like something I will stay away from it"], [[12, 22, 28], "Where do random thoughts come from"], [[41, 7, 18], "The tape got stuck on my lips so I could not talk anymore"], [[33, 8, 12], "My turtle Jim got out of his cage and ate a banana"], [[18, 25, 45], "are you going to have a funnel birthday cake for your next birthday"], [[5, 25, 31], "all moms and dads sat around drinking coffee"], [[24, 36, 8], "My pen broke and now I have blue ink all over my dress"]], "outputs": [["ivy"], ["ear"], ["bay"], ["No mission today"], ["pen"], ["mug"], ["vet"], ["No mission today"], ["law"], ["mom"], ["gym"], ["job"], ["fix"], ["mic"], ["key"]], "starter_code": "def missing(nums, s):", "canonical_solution": "def missing(nums, s):\n    ans = []\n    s = s.replace(' ', '')\n    try:\n        for i in sorted(nums):\n            ans.append(s[i])\n        return ''.join(ans).lower()\n    except IndexError:\n        return 'No mission today'", "entry_point": "missing", "task_id": "TACO_lite/608", "input_output_examples": [[[[5, 0, 3], "I Love You"]], [["ivy"]]]}
{"requirement": "def change(st):\n\"\"\"Create a function which accepts one arbitrary string as an argument, and return a string of length 26.\n\nThe objective is to set each of the 26 characters of the output string to either `'1'` or `'0'` based on the fact whether the Nth letter of the alphabet is present in the input (independent of its case).\n\nSo if an `'a'` or an `'A'` appears anywhere in the input string (any number of times), set the first character of the output string to `'1'`, otherwise to `'0'`. if `'b'` or `'B'` appears in the string, set the second character to `'1'`, and so on for the rest of the alphabet.\n\nFor instance:\n\n```\n\"a   **&  cZ\"  =>  \"10100000000000000000000001\"\n```\n\"\"\"", "inputs": [["a **&  bZ"], ["Abc e  $$  z"], ["!!a$%&RgTT"], [""], ["abcdefghijklmnopqrstuvwxyz"], ["aaaaaaaaaaa"], ["&%&%/$%$%$%$%GYtf67fg34678hgfdyd"]], "outputs": [["11000000000000000000000001"], ["11101000000000000000000001"], ["10000010000000000101000000"], ["00000000000000000000000000"], ["11111111111111111111111111"], ["10000000000000000000000000"], ["00010111000000000001000010"]], "starter_code": "def change(st):", "canonical_solution": "def change(st):\n    new = ''\n    st = st.lower()\n    for letter in 'abcdefghijklmnopqrstuvwxyz':\n        if letter in st:\n            new += '1'\n        else:\n            new += '0'\n    return new", "entry_point": "change", "task_id": "TACO_lite/609", "input_output_examples": [[["a   **&  cZ"], ["a **&  bZ"]], [["10100000000000000000000001"], ["11000000000000000000000001"]]]}
{"requirement": "def triangle(row):\n\"\"\"If you finish this kata, you can try [Insane Coloured Triangles](http://www.codewars.com/kata/insane-coloured-triangles) by Bubbler, which is a ***much*** harder version of this one.\n\nA coloured triangle is created from a row of colours, each of which is red, green or blue. Successive rows, each containing one fewer colour than the last, are generated by considering the two touching colours in the previous row. If these colours are identical, the same colour is used in the new row. If they are different, the missing colour is used in the new row. This is continued until the final row, with only a single colour, is generated.\n\nThe different possibilities are:\n```\nColour here:        G G        B G        R G        B R\nBecomes colour:      G          R          B          G\n```\n\nWith a bigger example:\n```\nR R G B R G B B\n R B R G B R B\n  G G B R G G\n   G R G B G\n    B B R R\n     B G R\n      R B\n       G\n```\n  \nYou will be given the first row of the triangle as a string and its your job to return the final colour which would appear in the bottom row as a string. In the case of the example above, you would the given `RRGBRGBB` you should return `G`.\n\n* The input string will only contain the uppercase letters `R, G, B` and there will be at least one letter so you do not have to test for invalid input.\n* If you are only given one colour as the input, return that colour. \n\n\n*Adapted from the 2017 British Informatics Olympiad*\n\"\"\"", "inputs": [["GB"], ["RRR"], ["RGBG"], ["RBRGBRB"], ["RBRGBRBGGRRRBGBBBGG"], ["B"]], "outputs": [["R"], ["R"], ["B"], ["G"], ["G"], ["B"]], "starter_code": "def triangle(row):", "canonical_solution": "COLORS = set('RGB')\n\ndef triangle(row):\n    while len(row) > 1:\n        row = ''.join((a if a == b else (COLORS - {a, b}).pop() for a, b in zip(row, row[1:])))\n    return row", "entry_point": "triangle", "task_id": "TACO_lite/610", "input_output_examples": [[["RRGBRGBB"], ["GB"]], [["G"], ["R"]]]}
{"requirement": "def knight_or_knave(said):\n\"\"\"Remember the movie with David Bowie: 'The Labyrinth'?\n\nYou can remember your childhood here: https://www.youtube.com/watch?v=2dgmgub8mHw\n\nIn this scene the girl is faced with two 'Knights\" and two doors. One door leads the castle where the Goblin King and her kid brother is, the other leads to certain death. She can ask the 'Knights'  a question to find out which door is the right one to go in. But...\n\nOne of them always tells the truth, and the other one always lies.\n\n\nIn this Kata one of the 'Knights' is on a coffee break, leaving the other one to watch the doors. You have to determine if the one there is the Knight(Truth teller) or Knave(Liar) based off of what he ```says```\n\nCreate a function:\n```\ndef knight_or_knave(says):\n  # returns if knight or knave \n```\nYour function should determine if the input '''says''' is True or False and then return:\n```'Knight!'``` if True or ```'Knave! Do not trust.'``` if False\n\nInput will be either boolean values, or strings.\nThe strings will be simple statements that will be either true or false, or evaluate to True or False. \n\nSee example test cases for, well... examples\n\nYou will porbably need to ```eval(says)```\n\nBut note: Eval is evil, and is only here for this Kata as a game.\n\nAnd remember the number one rule of The Labyrinth, even if it is easy, Don't ever say 'that was easy.'\n\"\"\"", "inputs": [[true], [false], ["4+2==5"], ["2+2==4"], ["not True and False or False or False"], ["3 is 3"], ["True"], ["not True"], ["2+2==5"], ["4+1==5"], ["4 is 3"], ["9+2==3"], ["105+30076==30181"], ["3 is 3 is 3 is 9"], ["False"], ["\"orange\" is not \"red\""], ["4 is \"blue\""], ["True is not False"]], "outputs": [["Knight!"], ["Knave! Do not trust."], ["Knave! Do not trust."], ["Knight!"], ["Knave! Do not trust."], ["Knight!"], ["Knight!"], ["Knave! Do not trust."], ["Knave! Do not trust."], ["Knight!"], ["Knave! Do not trust."], ["Knave! Do not trust."], ["Knight!"], ["Knave! Do not trust."], ["Knave! Do not trust."], ["Knight!"], ["Knave! Do not trust."], ["Knight!"]], "starter_code": "def knight_or_knave(said):", "canonical_solution": "def knight_or_knave(said):\n    return 'Knight!' if eval(str(said)) else 'Knave! Do not trust.'", "entry_point": "knight_or_knave", "task_id": "TACO_lite/611", "input_output_examples": [[[true], [false]], [["Knight!"], ["Knave! Do not trust."]]]}
{"requirement": "def solve(n):\n\"\"\"In this Kata, you will be given a number and your task will be to rearrange the number so that it is divisible by `25`, but without leading zeros. Return the minimum number of digit moves that are needed to make this possible. If impossible, return `-1` ( `Nothing` in Haskell ).\n\nFor example:\n\nMore examples in test cases.\n\nGood luck!\n\"\"\"", "inputs": [[50], [25], [52], [57], [75], [100], [521], [1], [5071], [705], [1241367], [50011117], [1002], [50011111112], [2057], [50001111312], [500111117], [64954713879], [71255535569], [72046951686], [68151901446], [3848363615], [75733989998], [87364011400], [2992127830], [98262144757], [81737102196], [50892869177], [5000033333337], [7000033333335], [500033332], [50303332], [5003033332], [20], [5], [7], [2], [60], [100000], [500000], [507], [502], [205]], "outputs": [[0], [0], [1], [1], [0], [0], [3], [-1], [4], [1], [-1], [9], [2], [12], [1], [13], [10], [8], [9], [12], [10], [-1], [17], [0], [-1], [1], [-1], [11], [16], [8], [10], [8], [11], [-1], [-1], [-1], [-1], [-1], [0], [0], [2], [2], [1]], "starter_code": "def solve(n):", "canonical_solution": "def solve(n):\n    moves = []\n    for a, b in ['25', '75', '50', '00']:\n        s = str(n)[::-1]\n        x = s.find(a)\n        y = s.find(b, x + 1 if a == '0' else 0)\n        if x == -1 or y == -1:\n            continue\n        moves.append(x + y - (x > y) - (a == b))\n        s = s.replace(a, '', 1).replace(b, '', 1)\n        l = len(s.rstrip('0'))\n        if l:\n            moves[-1] = moves[-1] + (len(s) - l)\n        elif s:\n            moves.pop()\n    return min(moves, default=-1)", "entry_point": "solve", "task_id": "TACO_lite/612", "input_output_examples": [[[50]], [[0]]]}
{"requirement": "def lottery(s):\n\"\"\"Your task is to write an update for a lottery machine. Its current version produces a sequence of random letters and integers (passed as a string to the function). Your code must filter out all letters and return **unique** integers as a string, in their order of first appearance. If there are no integers in the string return `\"One more run!\"`\n\n## Examples\n\n```\n\"hPrBKWDH8yc6Lt5NQZWQ\"  -->  \"865\"\n\"ynMAisVpHEqpqHBqTrwH\"  -->  \"One more run!\"\n\"555\"                   -->  \"5\"\n```\n\"\"\"", "inputs": [["wQ8Hy0y5m5oshQPeRCkG"], ["ffaQtaRFKeGIIBIcSJtg"], ["555"], ["HappyNewYear2020"], ["20191224isXmas"], [""]], "outputs": [["805"], ["One more run!"], ["5"], ["20"], ["20194"], ["One more run!"]], "starter_code": "def lottery(s):", "canonical_solution": "def lottery(s):\n    return ''.join(dict.fromkeys(filter(str.isdigit, s))) or 'One more run!'", "entry_point": "lottery", "task_id": "TACO_lite/613", "input_output_examples": [[["hPrBKWDH8yc6Lt5NQZWQ"], ["ynMAisVpHEqpqHBqTrwH"], ["555"], ["wQ8Hy0y5m5oshQPeRCkG"]], [["865"], ["One more run!"], ["5"], ["805"]]]}
{"requirement": "def flipping_game(num):\n\"\"\"Iahub got bored, so he invented a game to be played on paper.\n He writes n integers a1, a2, ..., an. Each of those integers can be either 0 or 1. He's allowed to do exactly one move: he chooses two indices i and j (1 ≤ i ≤ j ≤ n) and flips all values ak for which their positions are in range [i, j] (that is i ≤ k ≤ j). Flip the value of x means to apply operation x = 1 - x.\n The goal of the game is that after exactly one move to obtain the maximum number of ones. Write a program to solve the little game of Iahub.\n```\n@param {Array} line of the input there are n integers: a1, a2, ..., an. 1 ≤ n ≤ 100. It is guaranteed that each of those n values is either 0 or 1\n@return {Integer} the maximal number of 1s that can be obtained after exactly one move\n```\nExamples :\n```\n[1, 0, 0, 1, 0, 0]  =>  5\n[1, 0, 0, 1]  =>  4\n\n```\nNote:\n In the first case, flip the segment from 2 to 6 (i = 2, j = 6). That flip changes the sequence, it becomes: [1 1 1 0 1 1]. So, it contains four ones. There is no way to make the whole sequence equal to [1 1 1 1 1 1].\n In the second case, flipping only the second and the third element (i = 2, j = 3) will turn all numbers into 1.\n\n(c)ll931110 & fchirica\n\"\"\"", "inputs": [[[1, 0, 0, 1, 0, 0]], [[1, 0, 0, 1]], [[1]], [[0]], [[1, 0, 0, 0, 1, 0, 0, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 1]]], "outputs": [[5], [4], [0], [1], [7], [18], [22], [18]], "starter_code": "def flipping_game(num):", "canonical_solution": "def flipping_game(num):\n    current = 0\n    biggest = 0\n    for i in num:\n        current = max(0, current - (i or -1))\n        biggest = max(biggest, current)\n    return sum(num) + (biggest or -1)", "entry_point": "flipping_game", "task_id": "TACO_lite/614", "input_output_examples": [[[[1, 0, 0, 1, 0, 0]], [[1, 0, 0, 1]]], [[5], [4]]]}
{"requirement": "def ball_probability(b):\n\"\"\"In the previous Kata we discussed the OR case.\n\nWe will now discuss the AND case, where rather than calculating the probablility for either of two (or more) possible results, we will calculate the probability of receiving all of the viewed outcomes.\n\nFor example, if we want to know the probability of receiving head OR tails in two tosses of a coin, as in the last Kata we add the two probabilities together. However if we want to know the probability of receiving head AND tails, in that order, we have to work differently.\n\nThe probability of an AND event is calculated by the following rule:\n\n`P(A ∩ B) = P(A | B) * P(B)`\n\nor\n\n`P(B ∩ A) = P(B | A) * P(A)`\n\nThat is, the probability of A and B both occuring is equal to the probability of A given B occuring times the probability of B occuring or vice versa. \nIf the events are mutually exclusive like in the case of tossing a coin, the probability of A occuring if B has occured is equal to the probability of A occuring by itself. In this case, the probability can be written as the below:\n\n`P(A ∩ B) = P(A) * P(B)`\n\nor\n\n`P(B ∩ A) = P(B) * P(A)`\n\nApplying to the heads and tails case:\n\n`P(H ∩ T) = P(0.5) * P(0.5)`\n\nor\n\n`P(H ∩ T) = P(0.5) * P(0.5)`\n\nThe task:\n\nYou are given a random bag of 10 balls containing 4 colours. `Red`, `Green`, `Yellow` and `Blue`. You will also be given a sequence of 2 balls of any colour e.g. `Green` and `Red` or `Yellow` and `Yellow`. \n\nYou have to return the probability of pulling a ball at random out of the bag and it matching the first colour and then pulling a ball at random out of the bag and it matching the second colour.\n\nYou will be given a boolean value of `true` or `false` which indicates whether the balls that is taken out in the first draw is replaced in to the bag for the second draw. Hint: this will determine whether the events are mutually exclusive or not.\n\nYou will receive two arrays and a boolean value. The first array contains the colours of the balls in the bag and the second contains the colour of the two balls you have to receive. As per above the final boolean value will indicate whether the bals arel being replaced `true` or not `false`.\n\nReturn the probability to 3 decimal places.\n\ne.g. `[[\"y\",\"r\",\"g\",\"b\",\"b\",\"y\",\"r\",\"g\",\"r\",\"r\"],[\"r\",\"b\"],false]`\n\n\nOther Kata in this series:\nStatistics in Kata 1: OR case - Unfair dice\n\"\"\"", "inputs": [[[["red", "blue", "yellow", "green", "red", "blue", "yellow", "green", "red", "blue"], ["red", "blue"], true]], [[["red", "blue", "yellow", "green", "red", "blue", "yellow", "green", "red", "blue"], ["red", "red"], true]], [[["red", "red", "yellow", "green", "red", "red", "yellow", "green", "red", "red"], ["blue", "blue"], true]], [[["red", "blue", "yellow", "green", "red", "blue", "yellow", "green", "red", "blue"], ["red", "blue"], false]], [[["red", "blue", "yellow", "green", "red", "blue", "yellow", "green", "red", "blue"], ["red", "red"], false]]], "outputs": [[0.09], [0.09], [0], [0.1], [0.067]], "starter_code": "def ball_probability(b):", "canonical_solution": "from collections import Counter as C\n\ndef ball_probability(b):\n    d, n, p = (C(b[0]), len(b[0]), 1)\n    for i in b[1]:\n        p *= d.get(i, 0) / n\n        n -= b[2] ^ 1\n        d[i] -= b[2] ^ 1\n    return round(p, 3)", "entry_point": "ball_probability", "task_id": "TACO_lite/615", "input_output_examples": [[], []]}
{"requirement": "def snail(array):\n\"\"\"## Snail Sort\n\nGiven an `n x n` array, return the array elements arranged from outermost elements to the middle element, traveling clockwise.\n\n```\narray = [[1,2,3],\n         [4,5,6],\n         [7,8,9]]\nsnail(array) #=> [1,2,3,6,9,8,7,4,5]\n```\n\nFor better understanding, please follow the numbers of the next array consecutively:\n\n```\narray = [[1,2,3],\n         [8,9,4],\n         [7,6,5]]\nsnail(array) #=> [1,2,3,4,5,6,7,8,9]\n```\n\nThis image will illustrate things more clearly:\n\n\n\nNOTE: The idea is not sort the elements from the lowest value to the highest; the idea is to traverse the 2-d array in a clockwise snailshell pattern.\n\nNOTE 2: The 0x0 (empty matrix) is represented as en empty array inside an array `[[]]`.\n\"\"\"", "inputs": [[[[]]], [[[1]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]], [[[1, 2, 3, 4, 5, 6], [20, 21, 22, 23, 24, 7], [19, 32, 33, 34, 25, 8], [18, 31, 36, 35, 26, 9], [17, 30, 29, 28, 27, 10], [16, 15, 14, 13, 12, 11]]]], "outputs": [[[]], [[1]], [[1, 2, 3, 6, 9, 8, 7, 4, 5]], [[1, 2, 3, 4, 5, 10, 15, 20, 25, 24, 23, 22, 21, 16, 11, 6, 7, 8, 9, 14, 19, 18, 17, 12, 13]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]]], "starter_code": "def snail(array):", "canonical_solution": "def snail(array):\n    ret = []\n    if array and array[0]:\n        size = len(array)\n        for n in range((size + 1) // 2):\n            for x in range(n, size - n):\n                ret.append(array[n][x])\n            for y in range(1 + n, size - n):\n                ret.append(array[y][-1 - n])\n            for x in range(2 + n, size - n + 1):\n                ret.append(array[-1 - n][-x])\n            for y in range(2 + n, size - n):\n                ret.append(array[-y][n])\n    return ret", "entry_point": "snail", "task_id": "TACO_lite/616", "input_output_examples": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [8, 9, 4], [7, 6, 5]], [[]]], [[1, 2, 3, 6, 9, 8, 7, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8, 9], []]]}
{"requirement": "def to_camel_case(text):\n\"\"\"Complete the method/function so that it converts dash/underscore delimited words into camel casing. The first word within the output should be capitalized **only** if the original word was capitalized (known as Upper Camel Case, also often referred to as Pascal case). \n\n## Examples\n\n```python\nto_camel_case(\"the-stealth-warrior\") # returns \"theStealthWarrior\"\n\nto_camel_case(\"The_Stealth_Warrior\") # returns \"TheStealthWarrior\"\n```\n\"\"\"", "inputs": [[""], ["the_stealth_warrior"], ["The-Stealth-Warrior"], ["A-B-C"]], "outputs": [[""], ["theStealthWarrior"], ["TheStealthWarrior"], ["ABC"]], "starter_code": "def to_camel_case(text):", "canonical_solution": "def to_camel_case(text):\n    removed = text.replace('-', ' ').replace('_', ' ').split()\n    if len(removed) == 0:\n        return ''\n    return removed[0] + ''.join([x.capitalize() for x in removed[1:]])", "entry_point": "to_camel_case", "task_id": "TACO_lite/617", "input_output_examples": [[["the-stealth-warrior"], ["The_Stealth_Warrior"]], [["theStealthWarrior"], ["TheStealthWarrior"]]]}
{"requirement": "def will_it_balance(stick, gnd):\n\"\"\"A stick is balanced horizontally on a support. Will it topple over or stay balanced? (This is a physics problem: imagine a real wooden stick balanced horizontally on someone's finger or on a narrow table, for example). \n\nThe stick is represented as a list, where each entry shows the mass in that part of the stick.\n\nThe stick is balanced on a support. The \"terrain\" is represented by a list of 1s and 0s, where the 1s represent the support and the 0s represent empty space. Each index is a coordinate on the x-axis, so e.g. the physical interpretations of some terrains are as follows:\n\n![](https://i.imgur.com/P4MpHZV.png)\n\nThe stick will only balance if its centre of mass is directly above some part of its support. Return `True` if the stick will balance and `False` if it will topple.\n\nBoth lists will be of equal length (that is, the stick and the terrain have equal width so that each index of the stick is directly above the corresponding index of the terrain). Every terrain will contain one, and only one, support.\n\n## Examples:\n\n![](https://i.imgur.com/PyMBsAl.png)\n\n```\n[2,3,2]\n[0,1,0] ---> Perfectly balanced, return True\n\n[5,1,1]\n[0,1,0] ---> will topple to the left, return False\n\n[3,3,4]\n[0,1,0] ---> will topple to the right (but only just)\n\n[7,1,1,1,1,1,1,1]\n[0,1,1,0,0,0,0,0] ---> will balance, perfectly, without a doubt\n\n[5, 3, 2, 8, 6]\n[0, 0, 0, 1, 1] ---> will topple to the left\n\n```\n\"\"\"", "inputs": [[[2, 3, 2], [0, 1, 0]], [[5, 1, 1], [0, 1, 0]], [[3, 3, 4], [0, 1, 0]], [[9, 7, 1, 1], [1, 1, 0, 0]], [[9, 1, 1, 7], [1, 1, 0, 0]]], "outputs": [[true], [false], [false], [true], [false]], "starter_code": "def will_it_balance(stick, gnd):", "canonical_solution": "from math import ceil\n\ndef will_it_balance(stick, gnd):\n    gravPt = sum((v * i for i, v in enumerate(stick))) / sum(stick)\n    return gnd[int(gravPt)] == gnd[ceil(gravPt)] == 1", "entry_point": "will_it_balance", "task_id": "TACO_lite/618", "input_output_examples": [[[[2, 3, 2], [0, 1, 0]], [[5, 1, 1], [0, 1, 0]], [[3, 3, 4], [0, 1, 0]], [[7, 1, 1, 1, 1, 1, 1, 1], [0, 1, 1, 0, 0, 0, 0, 0]], [[5, 3, 2, 8, 6], [0, 0, 0, 1, 1]]], [[true], [false], [false], [true], [false]]]}
{"requirement": "def shuffled_array(s):\n\"\"\"# Task\n A noob programmer was given two simple tasks: sum and sort the elements of the given array `arr` = [a1, a2, ..., an]. \n \n He started with summing and did it easily, but decided to store the sum he found in some random position of the original array which was a bad idea. Now he needs to cope with the second task, sorting the original array arr, and it's giving him trouble since he modified it.\n\n Given the array `shuffled`, consisting of elements a1, a2, ..., an, and their sumvalue in random order, return the sorted array of original elements a1, a2, ..., an.\n\n# Example\n\n For `shuffled = [1, 12, 3, 6, 2]`, the output should be `[1, 2, 3, 6]`.\n\n `1 + 3 + 6 + 2 = 12`, which means that 1, 3, 6 and 2 are original elements of the array.\n\n For `shuffled = [1, -3, -5, 7, 2]`, the output should be `[-5, -3, 2, 7]`.\n\n# Input/Output\n\n\n - `[input]` integer array `shuffled`\n\n    Array of at least two integers. It is guaranteed that there is an index i such that shuffled[i] = shuffled[0] + ... + shuffled[i - 1] + shuffled[i + 1] + ... + shuffled[n].\n\n    Constraints:\n\n    `2 ≤ shuffled.length ≤ 30,`\n\n    `-300 ≤ shuffled[i] ≤ 300.`\n\n\n - `[output]` an integer array\n\n    A `sorted` array of shuffled.length - 1 elements.\n\"\"\"", "inputs": [[[1, 12, 3, 6, 2]], [[1, -3, -5, 7, 2]], [[2, -1, 2, 2, -1]], [[-3, -3]]], "outputs": [[[1, 2, 3, 6]], [[-5, -3, 2, 7]], [[-1, -1, 2, 2]], [[-3]]], "starter_code": "def shuffled_array(s):", "canonical_solution": "def shuffled_array(s):\n    result = sorted(s)\n    result.remove(sum(result) // 2)\n    return result", "entry_point": "shuffled_array", "task_id": "TACO_lite/619", "input_output_examples": [[[[1, 12, 3, 6, 2]], [[1, -3, -5, 7, 2]]], [[1, 2, 3, 6], [-5, -3, 2, 7]]]}
{"requirement": "def solve(a, b):\n\"\"\"Consider a sequence made up of the consecutive prime numbers. This infinite sequence would start with: \n```python\n\"2357111317192329313741434753596167717379...\"\n```\n\nYou will be given two numbers: `a` and `b`, and your task will be to return `b` elements starting from index `a` in this sequence.\n```\nFor example:\nsolve(10,5) == `19232` Because these are 5 elements from index 10 in the sequence.\n```\n\nTests go up to about index `20000`.\n\nMore examples in test cases. Good luck!\n\nPlease also try [Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\n\"\"\"", "inputs": [[2, 2], [10, 5], [10, 3], [20, 9], [30, 12], [40, 8], [50, 6], [10000, 5], [20000, 5]], "outputs": [["57"], ["19232"], ["192"], ["414347535"], ["616771737983"], ["83899710"], ["031071"], ["02192"], ["09334"]], "starter_code": "def solve(a, b):", "canonical_solution": "def solve(a, b):\n    primes = '2357111317192329313741434753596167717379838997101103107109113127131137139149151157163167173179181191193197199211223227229233239241251257263269271277281283293307311313317331337347349353359367373379383389397401409419421431433439443449457461463467479487491499503509521523541547557563569571577587593599601607613617619631641643647653659661673677683691701709719727733739743751757761769773787797809811821823827829839853857859863877881883887907911919929937941947953967971977983991997100910131019102110311033103910491051106110631069108710911093109711031109111711231129115111531163117111811187119312011213121712231229123112371249125912771279128312891291129713011303130713191321132713611367137313811399140914231427142914331439144714511453145914711481148314871489149314991511152315311543154915531559156715711579158315971601160716091613161916211627163716571663166716691693169716991709172117231733174117471753175917771783178717891801181118231831184718611867187118731877187918891901190719131931193319491951197319791987199319971999200320112017202720292039205320632069208120832087208920992111211321292131213721412143215321612179220322072213222122372239224322512267226922732281228722932297230923112333233923412347235123572371237723812383238923932399241124172423243724412447245924672473247725032521253125392543254925512557257925912593260926172621263326472657265926632671267726832687268926932699270727112713271927292731274127492753276727772789279127972801280328192833283728432851285728612879288728972903290929172927293929532957296329692971299930013011301930233037304130493061306730793083308931093119312131373163316731693181318731913203320932173221322932513253325732593271329933013307331333193323332933313343334733593361337133733389339134073413343334493457346134633467346934913499351135173527352935333539354135473557355935713581358335933607361336173623363136373643365936713673367736913697370137093719372737333739376137673769377937933797380338213823383338473851385338633877388138893907391139173919392339293931394339473967398940014003400740134019402140274049405140574073407940914093409941114127412941334139415341574159417742014211421742194229423142414243425342594261427142734283428942974327433743394349435743634373439143974409442144234441444744514457446344814483449345074513451745194523454745494561456745834591459746034621463746394643464946514657466346734679469147034721472347294733475147594783478747894793479948014813481748314861487148774889490349094919493149334937494349514957496749694973498749934999500350095011502150235039505150595077508150875099510151075113511951475153516751715179518951975209522752315233523752615273527952815297530353095323533353475351538153875393539954075413541754195431543754415443544954715477547954835501550355075519552155275531555755635569557355815591562356395641564756515653565756595669568356895693570157115717573757415743574957795783579158015807581358215827583958435849585158575861586758695879588158975903592359275939595359815987600760116029603760436047605360676073607960896091610161136121613161336143615161636173619761996203621162176221622962476257626362696271627762876299630163116317632363296337634363536359636163676373637963896397642164276449645164696473648164916521652965476551655365636569657165776581659966076619663766536659666166736679668966916701670367096719673367376761676367796781679167936803682368276829683368416857686368696871688368996907691169176947694969596961696769716977698369916997700170137019702770397043705770697079710371097121712771297151715971777187719372077211721372197229723772437247725372837297730773097321733173337349735173697393741174177433745174577459747774817487748974997507751775237529753775417547754975597561757375777583758975917603760776217639764376497669767376817687769176997703771777237727774177537757775977897793781778237829784178537867787378777879788379017907791979277933793779497951796379938009801180178039805380598069808180878089809381018111811781238147816181678171817981918209821982218231823382378243826382698273828782918293829783118317832983538363836983778387838984198423842984318443844784618467850185138521852785378539854385638573858185978599860986238627862986418647866386698677868186898693869987078713871987318737874187478753876187798783880388078819882188318837883988498861886388678887889389238929893389418951896389698971899990019007901190139029904190439049905990679091910391099127913391379151915791619173918191879199920392099221922792399241925792779281928392939311931993239337934193439349937193779391939794039413941994219431943394379439946194639467947394799491949795119521953395399547955195879601961396199623962996319643964996619677967996899697971997219733973997439749976797699781978797919803981198179829983398399851985798599871988398879901990799239929993199419949996799731000710009100371003910061100671006910079100911009310099101031011110133101391014110151101591016310169101771018110193102111022310243102471025310259102671027110273102891030110303103131032110331103331033710343103571036910391103991042710429104331045310457104591046310477104871049910501105131052910531105591056710589105971060110607106131062710631106391065110657106631066710687106911070910711107231072910733107391075310771107811078910799108311083710847108531085910861108671088310889108911090310909109371093910949109571097310979109871099311003110271104711057110591106911071110831108711093111131111711119111311114911159111611117111173111771119711213112391124311251112571126111273112791128711299113111131711321113291135111353113691138311393113991141111423114371144311447114671147111483114891149111497115031151911527115491155111579115871159311597116171162111633116571167711681116891169911701117171171911731117431177711779117831178911801118071181311821118271183111833118391186311867118871189711903119091192311927119331193911941119531195911969119711198111987120071201112037120411204312049120711207312097121011210712109121131211912143121491215712161121631219712203122111222712239122411225112253122631226912277122811228912301123231232912343123471237312377123791239112401124091241312421124331243712451124571247312479124871249112497125031251112517125271253912541125471255312569125771258312589126011261112613126191263712641126471265312659126711268912697127031271312721127391274312757127631278112791127991280912821128231282912841128531288912893128991290712911129171291912923129411295312959129671297312979129831300113003130071300913033130371304313049130631309313099131031310913121131271314713151131591316313171131771318313187132171321913229132411324913259132671329113297133091331313327133311333713339133671338113397133991341113417134211344113451134571346313469134771348713499135131352313537135531356713577135911359713613136191362713633136491366913679136811368713691136931369713709137111372113723137291375113757137591376313781137891379913807138291383113841138591387313877138791388313901139031390713913139211393113933139631396713997139991400914011140291403314051140571407114081140831408714107141431414914153141591417314177141971420714221142431424914251142811429314303143211432314327143411434714369143871438914401144071441114419144231443114437144471444914461144791448914503145191453314537145431454914551145571456114563145911459314621146271462914633146391465314657146691468314699147131471714723147311473714741147471475314759147671477114779147831479714813148211482714831148431485114867148691487914887148911489714923149291493914947149511495714969149831501315017150311505315061150731507715083150911510115107151211513115137151391514915161151731518715193151991521715227152331524115259152631526915271152771528715289152991530715313153191532915331153491535915361153731537715383153911540115413154271543915443154511546115467154731549315497155111552715541155511555915569155811558315601156071561915629156411564315647156491566115667156711567915683157271573115733157371573915749157611576715773157871579115797158031580915817158231585915877158811588715889159011590715913159191592315937159591597115973159911600116007160331605716061160631606716069160731608716091160971610316111161271613916141161831618716189161931621716223162291623116249162531626716273163011631916333163391634916361163631636916381164111641716421164271643316447164511645316477164811648716493165191652916547165531656116567165731660316607166191663116633166491665116657166611667316691166931669916703167291674116747167591676316787168111682316829168311684316871168791688316889169011690316921169271693116937169431696316979169811698716993170111702117027170291703317041170471705317077170931709917107171171712317137171591716717183171891719117203172071720917231172391725717291172931729917317173211732717333173411735117359173771738317387173891739317401174171741917431174431744917467174711747717483174891749117497175091751917539175511756917573175791758117597175991760917623176271765717659176691768117683177071771317729177371774717749177611778317789177911780717827178371783917851178631788117891179031790917911179211792317929179391795717959179711797717981179871798918013180411804318047180491805918061180771808918097181191812118127181311813318143181491816918181181911819918211182171822318229182331825118253182571826918287182891830118307183111831318329183411835318367183711837918397184011841318427184331843918443184511845718461184811849318503185171852118523185391854118553185831858718593186171863718661186711867918691187011871318719187311874318749187571877318787187931879718803188391885918869188991891118913189171891918947189591897318979190011900919013190311903719051190691907319079190811908719121191391914119157191631918119183192071921119213192191923119237192491925919267192731928919301193091931919333193731937919381193871939119403194171942119423194271942919433194411944719457194631946919471194771948319489195011950719531195411954319553195591957119577195831959719603196091966119681196871969719699197091971719727197391975119753197591976319777197931980119813198191984119843198531986119867198891989119913199191992719937199491996119963199731997919991199931999720011200212002320029200472005120063200712008920101201072011320117201232012920143201472014920161201732017720183202012021920231202332024920261202692028720297203232032720333203412034720353203572035920369203892039320399204072041120431204412044320477204792048320507205092052120533205432054920551205632059320599206112062720639206412066320681206932070720717207192073120743207472074920753207592077120773207892080720809208492085720873208792088720897208992090320921209292093920947209592096320981209832100121011210132101721019210232103121059210612106721089211012110721121211392114321149211572116321169211792118721191211932121121221212272124721269212772128321313213172131921323213412134721377213792138321391213972140121407214192143321467214812148721491214932149921503215172152121523215292155721559215632156921577215872158921599216012161121613216172164721649216612167321683217012171321727217372173921751217572176721773217872179921803218172182121839218412185121859218632187121881218932191121929219372194321961219772199121997220032201322027220312203722039220512206322067220732207922091220932210922111221232212922133221472215322157221592217122189221932222922247222592227122273222772227922283222912230322307223432234922367223692238122391223972240922433224412244722453224692248122483225012251122531225412254322549225672257122573226132261922621226372263922643226512266922679226912269722699227092271722721227272273922741227512276922777227832278722807228112281722853228592286122871228772290122907229212293722943229612296322973229932300323011230172302123027230292303923041230532305723059230632307123081230872309923117231312314323159231672317323189231972320123203232092322723251232692327923291232932329723311233212332723333233392335723369233712339923417234312344723459234732349723509235312353723539235492355723561235632356723581235932359923603236092362323627236292363323663236692367123677236872368923719237412374323747237532376123767237732378923801238132381923827238312383323857238692387323879238872389323899239092391123917239292395723971239772398123993240012400724019240232402924043240492406124071240772408324091240972410324107241092411324121241332413724151241692417924181241972420324223242292423924247242512428124317243292433724359243712437324379243912440724413244192442124439244432446924473244812449924509245172452724533245472455124571245932461124623246312465924671246772468324691246972470924733247492476324767247812479324799248092482124841248472485124859248772488924907249172491924923249432495324967249712497724979249892501325031250332503725057250732508725097251112511725121251272514725153251632516925171251832518925219252292523725243252472525325261253012530325307253092532125339253432534925357253672537325391254092541125423254392544725453254572546325469254712552325537255412556125577255792558325589256012560325609256212563325639256432565725667256732567925693257032571725733257412574725759257632577125793257992580125819258412584725849258672587325889259032591325919259312593325939259432595125969259812599725999260032601726021260292604126053260832609926107261112611326119261412615326161261712617726183261892620326209262272623726249262512626126263262672629326297263092631726321263392634726357263712638726393263992640726417264232643126437264492645926479264892649726501265132653926557265612657326591265972662726633266412664726669266812668326687266932669926701267112671326717267232672926731267372675926777267832680126813268212683326839268492686126863268792688126891268932690326921269272694726951269532695926981269872699327011270172703127043270592706127067270732707727091271032710727109271272714327179271912719727211272392724127253272592727127277272812728327299273292733727361273672739727407274092742727431274372744927457274792748127487275092752727529275392754127551275812758327611276172763127647276532767327689276912769727701277332773727739277432774927751277632776727773277792779127793277992780327809278172782327827278472785127883278932790127917279192794127943279472795327961279672798327997280012801928027280312805128057280692808128087280972809928109281112812328151281632818128183282012821128219282292827728279282832828928297283072830928319283492835128387283932840328409284112842928433284392844728463284772849328499285132851728537285412854728549285592857128573285792859128597286032860728619286212862728631286432864928657286612866328669286872869728703287112872328729287512875328759287712878928793288072881328817288372884328859288672887128879289012890928921289272893328949289612897929009290172902129023290272903329059290632907729101291232912929131291372914729153291672917329179291912920129207292092922129231292432925129269292872929729303293112932729333293392934729363293832938729389293992940129411294232942929437294432945329473294832950129527295312953729567295692957329581295872959929611296292963329641296632966929671296832971729723297412975329759297612978929803298192983329837298512986329867298732987929881299172992129927299472995929983299893001130013300293004730059300713008930091300973010330109301133011930133301373013930161301693018130187301973020330211302233024130253302593026930271302933030730313303193032330341303473036730389303913040330427304313044930467304693049130493304973050930517305293053930553305573055930577305933063130637306433064930661306713067730689306973070330707307133072730757307633077330781308033080930817308293083930841308513085330859308693087130881308933091130931309373094130949309713097730983310133101931033310393105131063310693107931081310913112131123311393114731151311533115931177311813118331189311933121931223312313123731247312493125331259312673127131277313073131931321313273133331337313573137931387313913139331397314693147731481314893151131513315173153131541315433154731567315733158331601316073162731643316493165731663316673168731699317213172331727317293174131751317693177131793317993181731847318493185931873318833189131907319573196331973319813199132003320093202732029320513205732059320633206932077320833208932099321173211932141321433215932173321833218932191322033221332233322373225132257322613229732299323033230932321323233232732341323533235932363323693237132377323813240132411324133242332429324413244332467324793249132497325033250732531325333253732561325633256932573325793258732603326093261132621326333264732653326873269332707327133271732719327493277132779327833278932797328013280332831328333283932843328693288732909329113291732933329393294132957329693297132983329873299332999330133302333029330373304933053330713307333083330913310733113331193314933151331613317933181331913319933203332113322333247332873328933301333113331733329333313334333347333493335333359333773339133403334093341333427334573346133469334793348733493335033352133529335333354733563335693357733581335873358933599336013361333617336193362333629336373364133647336793370333713337213373933749337513375733767337693377333791337973380933811338273382933851338573386333871338893389333911339233393133937339413396133967339973401934031340333403934057340613412334127341293414134147341573415934171341833421134213342173423134253342593426134267342733428334297343013430334313343193432734337343513436134367343693438134403344213442934439344573446934471344833448734499345013451134513345193453734543345493458334589345913460334607346133463134649346513466734673346793468734693347033472134729347393474734757347593476334781348073481934841348433484734849348713487734883348973491334919349393494934961349633498135023350273505135053350593506935081350833508935099351073511135117351293514135149351533515935171352013522135227352513525735267352793528135291353113531735323353273533935353353633538135393354013540735419354233543735447354493546135491355073550935521355273553135533355373554335569355733559135593355973560335617356713567735729357313574735753357593577135797358013580335809358313583735839358513586335869358793589735899359113592335933359513596335969359773598335993359993600736011360133601736037360613606736073360833609736107361093613136137361513616136187361913620936217362293624136251362633626936277362933629936307363133631936341363433635336373363833638936433364513645736467364693647336479364933649736523365273652936541365513655936563365713658336587365993660736629366373664336653366713667736683366913669736709367133672136739367493676136767367793678136787367913679336809368213683336847368573687136877368873689936901369133691936923369293693136943369473697336979369973700337013370193702137039370493705737061370873709737117371233713937159371713718137189371993720137217372233724337253372733727737307373093731337321373373733937357373613736337369373793739737409374233744137447374633748337489374933750137507375113751737529375373754737549375613756737571375733757937589375913760737619376333764337649376573766337691376933769937717377473778137783377993781137813378313784737853378613787137879378893789737907379513795737963379673798737991379933799738011380393804738053380693808338113381193814938153381673817738183381893819738201382193823138237382393826138273382813828738299383033831738321383273832938333383513837138377383933843138447384493845338459384613850138543385573856138567385693859338603386093861138629386393865138653386693867138677386933869938707387113871338723387293873738747387493876738783387913880338821388333883938851388613886738873388913890338917389213892338933389533895938971389773899339019390233904139043390473907939089390973910339107391133911939133391393915739161391633918139191391993920939217392273922939233392393924139251392933930139313393173932339341393433935939367393713937339383393973940939419394393944339451394613949939503395093951139521395413955139563395693958139607396193962339631396593966739671396793970339709397193972739733397493976139769397793979139799398213982739829398393984139847398573986339869398773988339887399013992939937399533997139979399833998940009400134003140037400394006340087400934009940111401234012740129401514015340163401694017740189401934021340231402374024140253402774028340289403434035140357403614038740423404274042940433404594047140483404874049340499405074051940529405314054340559405774058340591405974060940627406374063940693406974069940709407394075140759407634077140787408014081340819408234082940841408474084940853408674087940883408974090340927409334093940949409614097340993410114101741023410394104741051410574107741081411134111741131411414114341149411614117741179411834118941201412034121341221412274123141233412434125741263412694128141299413334134141351413574138141387413894139941411414134144341453414674147941491415074151341519415214153941543415494157941593415974160341609416114161741621416274164141647416514165941669416814168741719417294173741759417614177141777418014180941813418434184941851418634187941887418934189741903419114192741941419474195341957419594196941981419834199942013420174201942023420434206142071420734208342089421014213142139421574216942179421814218742193421974220942221422234222742239422574228142283422934229942307423234233142337423494235942373423794239142397424034240742409424334243742443424514245742461424634246742473424874249142499425094253342557425694257142577425894261142641426434264942667426774268342689426974270142703427094271942727427374274342751427674277342787427934279742821428294283942841428534285942863428994290142923429294293742943429534296142967429794298943003430134301943037430494305143063430674309343103431174313343151431594317743189432014320743223432374326143271432834329143313433194332143331433914339743399434034341143427434414345143457434814348743499435174354143543435734357743579435914359743607436094361343627436334364943651436614366943691437114371743721437534375943777437814378343787437894379343801438534386743889438914391343933439434395143961439634396943973439874399143997440174402144027440294404144053440594407144087440894410144111441194412344129441314415944171441794418944201442034420744221442494425744263442674426944273442794428144293443514435744371443814438344389444174444944453444834449144497445014450744519445314453344537445434454944563445794458744617446214462344633446414464744651446574468344687446994470144711447294474144753447714477344777447894479744809448194483944843448514486744879448874489344909449174492744939449534495944963449714498344987450074501345053450614507745083451194512145127451314513745139451614517945181451914519745233452474525945263452814528945293453074531745319453294533745341453434536145377453894540345413454274543345439454814549145497455034552345533455414555345557455694558745589455994561345631456414565945667456734567745691456974570745737457514575745763457674577945817458214582345827458334584145853458634586945887458934594345949459534595945971459794598946021460274604946051460614607346091460934609946103461334614146147461534617146181461834618746199462194622946237462614627146273462794630146307463094632746337463494635146381463994641146439464414644746451464574647146477464894649946507465114652346549465594656746573465894659146601466194663346639466434664946663466794668146687466914670346723467274674746751467574676946771468074681146817468194682946831468534686146867468774688946901469194693346957469934699747017470414705147057470594708747093471114711947123471294713747143471474714947161471894720747221472374725147269472794728747293472974730347309473174733947351473534736347381473874738947407474174741947431474414745947491474974750147507475134752147527475334754347563475694758147591475994760947623476294763947653476574765947681476994770147711477134771747737477414774347777477794779147797478074780947819478374784347857478694788147903479114791747933479394794747951479634796947977479814801748023480294804948073480794809148109481194812148131481574816348179481874819348197482214823948247482594827148281482994831148313483374834148353483714838348397484074840948413484374844948463484734847948481484874849148497485234852748533485394854148563485714858948593486114861948623486474864948661486734867748679487314873348751487574876148767487794878148787487994880948817488214882348847488574885948869488714888348889489074894748953489734898948991490034900949019490314903349037490434905749069490814910349109491174912149123491394915749169491714917749193491994920149207492114922349253492614927749279492974930749331493334933949363493674936949391493934940949411494174942949433494514945949463494774948149499495234952949531495374954749549495594959749603496134962749633496394966349667496694968149697497114972749739497414974749757497834978749789498014980749811498234983149843498534987149877498914991949921499274993749939499434995749991499934999950021500235003350047500515005350069500775008750093501015011150119501235012950131501475015350159501775020750221502275023150261502635027350287502915031150321503295033350341503595036350377503835038750411504175042350441504595046150497505035051350527505395054350549505515058150587505915059350599506275064750651506715068350707507235074150753507675077350777507895082150833508395084950857508675087350891508935090950923509295095150957509695097150989509935100151031510435104751059510615107151109511315113351137511515115751169511935119751199512035121751229512395124151257512635128351287513075132951341513435134751349513615138351407514135141951421514275143151437514395144951461514735147951481514875150351511515175152151539515515156351577515815159351599516075161351631516375164751659516735167951683516915171351719517215174951767517695178751797518035181751827518295183951853518595186951871518935189951907519135192951941519495197151973519775199152009520215202752051520575206752069520815210352121521275214752153521635217752181521835218952201522235223752249522535225952267522895229152301523135232152361523635236952379523875239152433524535245752489525015251152517525295254152543525535256152567525715257952583526095262752631526395266752673526915269752709527115272152727527335274752757527695278352807528135281752837528595286152879528835288952901529035291952937529515295752963529675297352981529995300353017530475305153069530775308753089530935310153113531175312953147531495316153171531735318953197532015323153233532395326753269532795328153299533095332353327533535335953377533815340153407534115341953437534415345353479535035350753527535495355153569535915359353597536095361153617536235362953633536395365353657536815369353699537175371953731537595377353777537835379153813538195383153849538575386153881538875389153897538995391753923539275393953951539595398753993540015401154013540375404954059540835409154101541215413354139541515416354167541815419354217542515426954277542875429354311543195432354331543475436154367543715437754401544035440954413544195442154437544435444954469544935449754499545035451754521545395454154547545595456354577545815458354601546175462354629546315464754667546735467954709547135472154727547515476754773547795478754799548295483354851548695487754881549075491754919549415494954959549735497954983550015500955021550495505155057550615507355079551035510955117551275514755163551715520155207552135521755219552295524355249552595529155313553315533355337553395534355351553735538155399554115543955441554575546955487555015551155529555415554755579555895560355609556195562155631556335563955661556635566755673556815569155697557115571755721557335576355787557935579955807558135581755819558235582955837558435584955871558895589755901559035592155927559315593355949559675598755997560035600956039560415605356081560875609356099561015611356123561315614956167561715617956197562075620956237562395624956263562675626956299563115633356359563695637756383563935640156417564315643756443564535646756473564775647956489565015650356509565195652756531565335654356569565915659756599566115662956633566595666356671566815668756701567115671356731567375674756767567735677956783568075680956813568215682756843568575687356891568935689756909569115692156923569295694156951569575696356983569895699356999570375704157047570595707357077570895709757107571195713157139571435714957163571735717957191571935720357221572235724157251572595726957271572835728757301573295733157347573495736757373573835738957397574135742757457574675748757493575035752757529575575755957571575875759357601576375764157649576535766757679576895769757709577135771957727577315773757751577735778157787577915779357803578095782957839578475785357859578815789957901579175792357943579475797357977579915801358027580315804358049580575806158067580735809958109581115812958147581515815358169581715818958193581995820758211582175822958231582375824358271583095831358321583375836358367583695837958391583935840358411584175842758439584415845158453584775848158511585375854358549585675857358579586015860358613586315865758661586795868758693586995871158727587335874158757587635877158787587895883158889588975890158907589095891358921589375894358963589675897958991589975900959011590215902359029590515905359063590695907759083590935910759113591195912359141591495915959167591835919759207592095921959221592335923959243592635927359281593335934159351593575935959369593775938759393593995940759417594195944159443594475945359467594715947359497595095951359539595575956159567595815961159617596215962759629596515965959663596695967159693596995970759723597295974359747597535977159779597915979759809598335986359879598875992159929599515995759971599815999960013600176002960037600416007760083600896009160101601036010760127601336013960149601616016760169602096021760223602516025760259602716028960293603176033160337603436035360373603836039760413604276044360449604576049360497605096052160527605396058960601606076061160617606236063160637606476064960659606616067960689607036071960727607336073760757607616076360773607796079360811608216085960869608876088960899609016091360917609196092360937609436095360961610016100761027610316104361051610576109161099611216112961141611516115361169612116122361231612536126161283612916129761331613336133961343613576136361379613816140361409614176144161463614696147161483614876149361507615116151961543615476155361559615616158361603616096161361627616316163761643616516165761667616736168161687617036171761723617296175161757617816181361819618376184361861618716187961909619276193361949619616196761979619816198761991620036201162017620396204762053620576207162081620996211962129621316213762141621436217162189621916220162207622136221962233622736229762299623036231162323623276234762351623836240162417624236245962467624736247762483624976250162507625336253962549625636258162591625976260362617626276263362639626536265962683626876270162723627316274362753627616277362791628016281962827628516286162869628736289762903629216292762929629396296962971629816298362987629896302963031630596306763073630796309763103631136312763131631496317963197631996321163241632476327763281632996331163313633176333163337633476335363361633676337763389633916339763409634196342163439634436346363467634736348763493634996352163527635336354163559635776358763589635996360163607636116361763629636476364963659636676367163689636916369763703637096371963727637376374363761637736378163793637996380363809638236383963841638536385763863639016390763913639296394963977639976400764013640196403364037640636406764081640916410964123641516415364157641716418764189642176422364231642376427164279642836430164303643196432764333643736438164399644036443364439644516445364483644896449964513645536456764577645796459164601646096461364621646276463364661646636466764679646936470964717647476476364781647836479364811648176484964853648716487764879648916490164919649216492764937649516496964997650036501165027650296503365053650636507165089650996510165111651196512365129651416514765167651716517365179651836520365213652396525765267652696528765293653096532365327653536535765371653816539365407654136541965423654376544765449654796549765519655216553765539655436555165557655636557965581655876559965609656176562965633656476565165657656776568765699657016570765713657176571965729657316576165777657896580965827658316583765839658436585165867658816589965921659276592965951659576596365981659836599366029660376604166047660676607166083660896610366107661096613766161661696617366179661916622166239662716629366301663376634366347663596636166373663776638366403664136643166449664576646366467664916649966509665236652966533665416655366569665716658766593666016661766629666436665366683666976670166713667216673366739667496675166763667916679766809668216684166851668536686366877668836688966919669236693166943669476694966959669736697767003670216703367043670496705767061670736707967103671216712967139671416715367157671696718167187671896721167213672176721967231672476726167271672736728967307673396734367349673696739167399674096741167421674276742967433674476745367477674816748967493674996751167523675316753767547675596756767577675796758967601676076761967631676516767967699677096772367733677416775167757677596776367777677836778967801678076781967829678436785367867678836789167901679276793167933679396794367957679616796767979679876799368023680416805368059680716808768099681116811368141681476816168171682076820968213682196822768239682616827968281683116832968351683716838968399684376844368447684496847368477684836848968491685016850768521685316853968543685676858168597686116863368639686596866968683686876869968711687136872968737687436874968767687716877768791688136881968821688636887968881688916889768899689036890968917689276894768963689936900169011690196902969031690616906769073691096911969127691436914969151691636919169193691976920369221692336923969247692576925969263693136931769337693416937169379693836938969401694036942769431694396945769463694676947369481694916949369497694996953969557695936962369653696616967769691696976970969737697396976169763697676977969809698216982769829698336984769857698596987769899699116992969931699416995969991699977000170003700097001970039700517006170067700797009970111701177012170123701397014170157701637017770181701837019970201702077022370229702377024170249702717028970297703097031370321703277035170373703797038170393704237042970439704517045770459704817048770489705017050770529705377054970571705737058370589706077061970621706277063970657706637066770687707097071770729707537076970783707937082370841708437084970853708677087770879708917090170913709197092170937709497095170957709697097970981709917099770999710117102371039710597106971081710897111971129711437114771153711617116771171711917120971233712377124971257712617126371287712937131771327713297133371339713417134771353713597136371387713897139971411714137141971429714377144371453714717147371479714837150371527715377154971551715637156971593715977163371647716637167171693716997170771711717137171971741717617177771789718077180971821718377184371849718617186771879718817188771899719097191771933719417194771963719717198371987719937199972019720317204372047720537207372077720897209172101721037210972139721617216772169721737221172221722237222772229722517225372269722717227772287723077231372337723417235372367723797238372421724317246172467724697248172493724977250372533725477255172559725777261372617726237264372647726497266172671726737267972689727017270772719727277273372739727637276772797728177282372859728697287172883728897289372901729077291172923729317293772949729537295972973729777299773009730137301973037730397304373061730637307973091731217312773133731417318173189732377324373259732777329173303733097332773331733517336173363733697337973387734177342173433734537345973471734777348373517735237352973547735537356173571735837358973597736077360973613736377364373651736737367973681736937369973709737217372773751737577377173783738197382373847738497385973867738777388373897739077393973943739517396173973739997401774021740277404774051740717407774093740997410174131741437414974159741617416774177741897419774201742037420974219742317425774279742877429374297743117431774323743537435774363743777438174383744117441374419744417444974453744717448974507745097452174527745317455174561745677457374587745977460974611746237465374687746997470774713747177471974729747317474774759747617477174779747977482174827748317484374857748617486974873748877489174897749037492374929749337494174959750117501375017750297503775041750797508375109751337514975161751677516975181751937520975211752177522375227752397525375269752777528975307753237532975337753477535375367753777538975391754017540375407754317543775479755037551175521755277553375539755417555375557755717557775583756117561775619756297564175653756597567975683756897570375707757097572175731757437576775773757817578775793757977582175833758537586975883759137593175937759417596775979759837598975991759977600176003760317603976079760817609176099761037612376129761477615776159761637620776213762317624376249762537625976261762837628976303763337634376367763697637976387764037642176423764417646376471764817648776493765077651176519765377654176543765617657976597766037660776631766497665176667766737667976697767177673376753767577677176777767817680176819768297683176837768477687176873768837690776913769197694376949769617696376991770037701777023770297704177047770697708177093771017713777141771537716777171771917720177213772377723977243772497726177263772677726977279772917731777323773397734777351773597736977377773837741777419774317744777471774777747977489774917750977513775217752777543775497755177557775637756977573775877759177611776177762177641776477765977681776877768977699777117771377719777237773177743777477776177773777837779777801778137783977849778637786777893778997792977933779517796977977779837799978007780177803178041780497805978079781017812178137781397815778163781677817378179781917819378203782297823378241782597827778283783017830778311783177834178347783677840178427784377843978467784797848778497785097851178517785397854178553785697857178577785837859378607786237864378649786537869178697787077871378721787377877978781787877879178797788037880978823788397885378857788777888778889788937890178919789297894178977789797898979031790397904379063790877910379111791337913979147791517915379159791817918779193792017922979231792417925979273792797928379301793097931979333793377934979357793677937979393793977939979411794237942779433794517948179493795317953779549795597956179579795897960179609796137962179627796317963379657796697968779691796937969779699797577976979777798017981179813798177982379829798417984379847798617986779873798897990179903799077993979943799677997379979799877999779999800218003980051800718007780107801118014180147801498015380167801738017780191802078020980221802318023380239802518026380273802798028780309803178032980341803478036380369803878040780429804478044980471804738048980491805138052780537805578056780599806038061180621806278062980651806578066980671806778068180683806878070180713807378074780749807618077780779807838078980803808098081980831808338084980863808978090980911809178092380929809338095380963809898100181013810178101981023810318104181043810478104981071810778108381097811018111981131811578116381173811818119781199812038122381233812398128181283812938129981307813318134381349813538135981371813738140181409814218143981457814638150981517815278153381547815518155381559815638156981611816198162981637816478164981667816718167781689817018170381707817278173781749817618176981773817998181781839818478185381869818838189981901819198192981931819378194381953819678197181973820038200782009820138202182031820378203982051820678207382129821398214182153821638217182183821898219382207822178221982223822318223782241822618226782279823018230782339823498235182361823738238782393824218245782463824698247182483824878249382499825078252982531825498255982561825678257182591826018260982613826198263382651826578269982721827238272782729827578275982763827818278782793827998281182813828378284782883828898289182903829138293982963829818299783003830098302383047830598306383071830778308983093831018311783137831778320383207832198322183227832318323383243832578326783269832738329983311833398334183357833838338983399834018340783417834238343183437834438344983459834718347783497835378355783561835638357983591835978360983617836218363983641836538366383689837018371783719837378376183773837778379183813838338384383857838698387383891839038391183921839338393983969839838398784011840178404784053840598406184067840898412184127841318413784143841638417984181841918419984211842218422384229842398424784263842998430784313843178431984347843498437784389843918440184407844218443184437844438444984457844638446784481844998450384509845218452384533845518455984589846298463184649846538465984673846918469784701847138471984731847378475184761847878479384809848118482784857848598486984871849138491984947849618496784977849798499185009850218502785037850498506185081850878509185093851038510985121851338514785159851938519985201852138522385229852378524385247852598529785303853138533185333853618536385369853818541185427854298543985447854518545385469854878551385517855238553185549855718557785597856018560785619856218562785639856438566185667856698569185703857118571785733857518578185793858178581985829858318583785843858478585385889859038590985931859338599185999860118601786027860298606986077860838611186113861178613186137861438616186171861798618386197862018620986239862438624986257862638626986287862918629386297863118632386341863518635386357863698637186381863898639986413864238644186453864618646786477864918650186509865318653386539865618657386579865878659986627866298667786689866938671186719867298674386753867678677186783868138683786843868518685786861868698692386927869298693986951869598696986981869938701187013870378704187049870718708387103871078711987121871338714987151871798718187187872118722187223872518725387257872778728187293872998731387317873238733787359873838740387407874218742787433874438747387481874918750987511875178752387539875418754787553875578755987583875878758987613876238762987631876418764387649876718767987683876918769787701877198772187739877438775187767877938779787803878118783387853878698787787881878878791187917879318794387959879618797387977879918800188003880078801988037880698807988093881178812988169881778821188223882378824188259882618828988301883218832788337883398837988397884118842388427884638846988471884938849988513885238854788589885918860788609886438865188657886618866388667886818872188729887418874788771887898879388799888018880788811888138881788819888438885388861888678887388883888978890388919889378895188969889938899789003890098901789021890418905189057890698907189083890878910189107891138911989123891378915389189892038920989213892278923189237892618926989273892938930389317893298936389371893818938789393893998941389417894318944389449894598947789491895018951389519895218952789533895618956389567895918959789599896038961189627896338965389657896598966989671896818968989753897598976789779897838979789809898198982189833898398984989867898918989789899899098991789923899398995989963899778998389989900019000790011900179001990023900319005390059900679007190073900899010790121901279014990163901739018790191901979019990203902179022790239902479026390271902819028990313903539035990371903739037990397904019040390407904379043990469904739048190499905119052390527905299053390547905839059990617906199063190641906479065990677906799069790703907099073190749907879079390803908219082390833908419084790863908879090190907909119091790931909479097190977909899099791009910199103391079910819109791099911219112791129911399114191151911539115991163911839119391199912299123791243912499125391283912919129791303913099133191367913699137391381913879139391397914119142391433914539145791459914639149391499915139152991541915719157391577915839159191621916319163991673916919170391711917339175391757917719178191801918079181191813918239183791841918679187391909919219193991943919519195791961919679196991997920039200992033920419205192077920839210792111921199214392153921739217792179921899220392219922219222792233922379224392251922699229792311923179233392347923539235792363923699237792381923839238792399924019241392419924319245992461924679247992489925039250792551925579256792569925819259392623926279263992641926479265792669926719268192683926939269992707927179272392737927539276192767927799278992791928019280992821928319284992857928619286392867928939289992921929279294192951929579295992987929939300193047930539305993077930839308993097931039311393131931339313993151931699317993187931999322993239932419325193253932579326393281932839328793307933199332393329933379337193377933839340793419934279346393479934819348793491934939349793503935239352993553935579355993563935819360193607936299363793683937019370393719937399376193763937879380993811938279385193871938879388993893939019391193913939239393793941939499396793971939799398393997940079400994033940499405794063940799409994109941119411794121941519415394169942019420794219942299425394261942739429194307943099432194327943319434394349943519437994397943999442194427944339443994441944479446394477944839451394529945319454194543945479455994561945739458394597946039461394621946499465194687946939470994723947279474794771947779478194789947939481194819948239483794841948479484994873948899490394907949339494994951949619499394999950039500995021950279506395071950839508795089950939510195107951119513195143951539517795189951919520395213952199523195233952399525795261952679527395279952879531195317953279533995369953839539395401954139541995429954419544395461954679547195479954839550795527955319553995549955619556995581955979560395617956219562995633956519570195707957139571795723957319573795747957739578395789957919580195803958139581995857958699587395881958919591195917959239592995947959579595995971959879598996001960139601796043960539605996079960979613796149961579616796179961819619996211962219622396233962599626396269962819628996293963239632996331963379635396377964019641996431964439645196457964619646996479964879649396497965179652796553965579658196587965899660196643966619666796671966979670396731967379673996749967579676396769967799678796797967999682196823968279684796851968579689396907969119693196953969599697396979969899699797001970039700797021970399707397081971039711797127971519715797159971699717197177971879721397231972419725997283973019730397327973679736997373973799738197387973979742397429974419745397459974639749997501975119752397547975499755397561975719757797579975839760797609976139764997651976739768797711977299777197777977879778997813978299784197843978479784997859978619787197879978839791997927979319794397961979679797397987980099801198017980419804798057980819810198123981299814398179982079821398221982279825198257982699829798299983179832198323983279834798369983779838798389984079841198419984299844398453984599846798473984799849198507985199853398543985619856398573985979862198627986399864198663986699868998711987139871798729987319873798773987799880198807988099883798849988679886998873988879889398897988999890998911989279892998939989479895398963989819899398999990139901799023990419905399079990839908999103991099911999131991339913799139991499917399181991919922399233992419925199257992599927799289993179934799349993679937199377993919939799401994099943199439994699948799497995239952799529995519955999563995719957799581996079961199623996439966199667996799968999707997099971399719997219973399761997679978799793998099981799823998299983399839998599987199877998819990199907999239992999961999719998999991100003100019100043100049100057100069100103100109100129100151100153100169100183100189100193100207100213100237100267100271100279100291100297100313100333100343100357100361100363100379100391100393100403100411100417100447100459100469100483100493100501100511100517100519100523100537100547100549100559100591100609100613100621100649100669100673100693100699100703100733100741100747100769100787100799100801100811100823100829100847100853100907100913100927100931100937100943100957100981100987100999101009101021101027101051101063101081101089101107101111101113101117101119101141101149101159101161101173101183101197101203101207101209101221101267101273101279101281101287101293101323101333101341101347101359101363101377101383101399101411101419101429101449101467101477101483101489101501101503101513101527101531101533101537101561101573101581101599101603101611101627101641101653101663101681101693101701101719101723101737101741101747101749101771101789101797101807101833101837101839101863101869101873101879101891101917101921101929101939101957101963101977101987101999102001102013102019102023102031102043102059102061102071102077102079102101102103102107102121102139102149102161102181102191102197102199102203102217102229102233102241102251102253102259102293102299102301102317102329102337102359102367102397102407102409102433102437102451102461102481102497102499102503102523102533102539102547102551102559102563102587102593102607102611102643102647102653102667102673102677102679102701102761102763102769102793102797102811102829102841102859102871102877102881102911102913102929102931102953102967102983103001103007103043103049103067103069103079103087103091103093103099103123103141103171103177103183103217103231103237103289103291103307103319103333103349103357103387103391103393103399103409103421103423103451103457103471103483103511103529103549103553103561103567103573103577103583103591103613103619103643103651103657103669103681103687103699103703103723103769103787103801103811103813103837103841103843103867103889103903103913103919103951103963103967103969103979103981103991103993103997104003104009104021104033104047104053104059104087104089104107104113104119104123104147104149104161104173104179104183104207104231104233104239104243104281104287104297104309104311104323104327104347104369104381104383104393104399104417104459104471104473104479104491104513104527104537104543104549104551104561104579104593104597104623104639104651104659104677104681104683104693104701104707104711104717104723104729104743104759104761104773104779104789104801104803104827104831104849104851104869104879104891104911104917104933104947104953104959104971104987104999105019105023105031105037105071105097105107105137105143105167105173105199105211105227105229105239105251105253105263105269105277105319105323105331105337105341105359105361105367105373105379105389105397105401105407105437105449105467105491105499105503105509105517105527105529105533105541105557105563105601105607105613105619105649105653105667105673105683105691105701105727105733105751105761105767105769105817105829105863105871105883105899105907105913105929105943105953105967105971105977105983105997106013106019106031106033106087106103106109106121106123106129106163106181106187106189106207106213106217106219106243106261106273106277106279106291106297106303106307106319106321106331106349106357106363106367106373106391106397106411106417106427106433106441106451106453106487106501106531106537106541106543106591106619106621106627106637106649106657106661106663106669106681106693106699106703106721106727106739106747106751106753106759106781106783106787106801106823106853106859106861106867106871106877106903106907106921106937106949106957106961106963106979106993107021107033107053107057107069107071107077107089107099107101107119107123107137107171107183107197107201107209107227107243107251107269107273107279107309107323107339107347107351107357107377107441107449107453107467107473107507107509107563107581107599107603107609107621107641107647107671107687107693107699107713107717107719107741107747107761107773107777107791107827107837107839107843107857107867107873107881107897107903107923107927107941107951107971107981107999108007108011108013108023108037108041108061108079108089108107108109108127108131108139108161108179108187108191108193108203108211108217108223108233108247108263108271108287108289108293108301108343108347108359108377108379108401108413108421108439108457108461108463108497108499108503108517108529108533108541108553108557108571108587108631108637108643108649108677108707108709108727108739108751108761108769108791108793108799108803108821108827108863108869108877108881108883108887108893108907108917108923108929108943108947108949108959108961108967108971108991109001109013109037109049109063109073109097109103109111109121109133109139109141109147109159109169109171109199109201109211109229109253109267109279109297109303109313109321109331109357109363109367109379109387109391109397109423109433109441109451109453109469109471109481109507109517109519109537109541109547109567109579109583109589109597109609109619109621109639109661109663109673109717109721109741109751109789109793109807109819109829109831109841109843109847109849109859109873109883109891109897109903109913109919109937109943109961109987110017110023110039110051110059110063110069110083110119110129110161110183110221110233110237110251110261110269110273110281110291110311110321110323110339110359110419110431110437110441110459110477110479110491110501110503110527110533110543110557110563110567110569110573110581110587110597110603110609110623110629110641110647110651110681110711110729110731110749110753110771110777110807110813110819110821110849110863110879110881110899110909110917110921110923110927110933110939110947110951110969110977110989111029111031111043111049111053111091111103111109111119111121111127111143111149111187111191111211111217111227111229111253111263111269111271111301111317111323111337111341111347111373111409111427111431111439111443111467111487111491111493111497111509111521111533111539111577111581111593111599111611111623111637111641111653111659111667111697111721111731111733111751111767111773111779111781111791111799111821111827111829111833111847111857111863111869111871111893111913111919111949111953111959111973111977111997112019112031112061112067112069112087112097112103112111112121112129112139112153112163112181112199112207112213112223112237112241112247112249112253112261112279112289112291112297112303112327112331112337112339112349112361112363112397112403112429112459112481112501112507112543112559112571112573112577112583112589112601112603112621112643112657112663112687112691112741112757112759112771112787112799112807112831112843112859112877112901112909112913112919112921112927112939112951112967112979112997113011113017113021113023113027113039113041113051113063113081113083113089113093113111113117113123113131113143113147113149113153113159113161113167113171113173113177113189113209113213113227113233113279113287113327113329113341113357113359113363113371113381113383113417113437113453113467113489113497113501113513113537113539113557113567113591113621113623113647113657113683113717113719113723113731113749113759113761113777113779113783113797113809113819113837113843113891113899113903113909113921113933113947113957113963113969113983113989114001114013114031114041114043114067114073114077114083114089114113114143114157114161114167114193114197114199114203114217114221114229114259114269114277114281114299114311114319114329114343114371114377114407114419114451114467114473114479114487114493114547114553114571114577114593114599114601114613114617114641114643114649114659114661114671114679114689114691114713114743114749114757114761114769114773114781114797114799114809114827114833114847114859114883114889114901114913114941114967114973114997115001115013115019115021115057115061115067115079115099115117115123115127115133115151115153115163115183115201115211115223115237115249115259115279115301115303115309115319115321115327115331115337115343115361115363115399115421115429115459115469115471115499115513115523115547115553115561115571115589115597115601115603115613115631115637115657115663115679115693115727115733115741115751115757115763115769115771115777115781115783115793115807115811115823115831115837115849115853115859115861115873115877115879115883115891115901115903115931115933115963115979115981115987116009116027116041116047116089116099116101116107116113116131116141116159116167116177116189116191116201116239116243116257116269116273116279116293116329116341116351116359116371116381116387116411116423116437116443116447116461116471116483116491116507116531116533116537116539116549116579116593116639116657116663116681116687116689116707116719116731116741116747116789116791116797116803116819116827116833116849116867116881116903116911116923116927116929116933116953116959116969116981116989116993117017117023117037117041117043117053117071117101117109117119117127117133117163117167117191117193117203117209117223117239117241117251117259117269117281117307117319117329117331117353117361117371117373117389117413117427117431117437117443117497117499117503117511117517117529117539117541117563117571117577117617117619117643117659117671117673117679117701117703117709117721117727117731117751117757117763117773117779117787117797117809117811117833117839117841117851117877117881117883117889117899117911117917117937117959117973117977117979117989117991118033118037118043118051118057118061118081118093118127118147118163118169118171118189118211118213118219118247118249118253118259118273118277118297118343118361118369118373118387118399118409118411118423118429118453118457118463118471118493118529118543118549118571118583118589118603118619118621118633118661118669118673118681118687118691118709118717118739118747118751118757118787118799118801118819118831118843118861118873118891118897118901118903118907118913118927118931118967118973119027119033119039119047119057119069119083119087119089119099119101119107119129119131119159119173119179119183119191119227119233119237119243119267119291119293119297119299119311119321119359119363119389119417119419119429119447119489119503119513119533119549119551119557119563119569119591119611119617119627119633119653119657119659119671119677119687119689119699119701119723119737119747119759119771119773119783119797119809119813119827119831119839119849119851119869119881119891119921119923119929119953119963119971119981119983119993120011120017120041120047120049120067120077120079120091120097120103120121120157120163120167120181120193120199120209120223120233120247120277120283120293120299120319120331120349120371120383120391120397120401120413120427120431120473120503120511120539120551120557120563120569120577120587120607120619120623120641120647120661120671120677120689120691120709120713120721120737120739120749120763120767120779120811120817120823120829120833120847120851120863120871120877120889120899120907120917120919120929120937120941120943120947120977120997121001121007121013121019121021121039121061121063121067121081121123121139121151121157121169121171121181121189121229121259121267121271121283121291121309121313121321121327121333121343121349121351121357121367121369121379121403121421121439121441121447121453121469121487121493121501121507121523121531121547121553121559121571121577121579121591121607121609121621121631121633121637121661121687121697121711121721121727121763121787121789121843121853121867121883121889121909121921121931121937121949121951121963121967121993121997122011122021122027122029122033122039122041122051122053122069122081122099122117122131122147122149122167122173122201122203122207122209122219122231122251122263122267122273122279122299122321122323122327122347122363122387122389122393122399122401122443122449122453122471122477122489122497122501122503122509122527122533122557122561122579122597122599122609122611122651122653122663122693122701122719122741122743122753122761122777122789122819122827122833122839122849122861122867122869122887122891122921122929122939122953122957122963122971123001123007123017123031123049123059123077123083123091123113123121123127123143123169123191123203123209123217123229123239123259123269123289123307123311123323123341123373123377123379123397123401123407123419123427123433123439123449123457123479123491123493123499123503123517123527123547123551123553123581123583123593123601123619123631123637123653123661123667123677123701123707123719123727123731123733123737123757123787123791123803123817123821123829123833123853123863123887123911123923123931123941123953123973123979123983123989123997124001124021124067124087124097124121124123124133124139124147124153124171124181124183124193124199124213124231124247124249124277124291124297124301124303124309124337124339124343124349124351124363124367124427124429124433124447124459124471124477124489124493124513124529124541124543124561124567124577124601124633124643124669124673124679124693124699124703124717124721124739124753124759124769124771124777124781124783124793124799124819124823124847124853124897124907124909124919124951124979124981124987124991125003125017125029125053125063125093125101125107125113125117125119125131125141125149125183125197125201125207125219125221125231125243125261125269125287125299125303125311125329125339125353125371125383125387125399125407125423125429125441125453125471125497125507125509125527125539125551125591125597125617125621125627125639125641125651125659125669125683125687125693125707125711125717125731125737125743125753125777125789125791125803125813125821125863125887125897125899125921125927125929125933125941125959125963126001126011126013126019126023126031126037126041126047126067126079126097126107126127126131126143126151126173126199126211126223126227126229126233126241126257126271126307126311126317126323126337126341126349126359126397126421126433126443126457126461126473126481126487126491126493126499126517126541126547126551126583126601126611126613126631126641126653126683126691126703126713126719126733126739126743126751126757126761126781126823126827126839126851126857126859126913126923126943126949126961126967126989127031127033127037127051127079127081127103127123127133127139127157127163127189127207127217127219127241127247127249127261127271127277127289127291127297127301127321127331127343127363127373127399127403127423127447127453127481127487127493127507127529127541127549127579127583127591127597127601127607127609127637127643127649127657127663127669127679127681127691127703127709127711127717127727127733127739127747127763127781127807127817127819127837127843127849127859127867127873127877127913127921127931127951127973127979127997128021128033128047128053128099128111128113128119128147128153128159128173128189128201128203128213128221128237128239128257128273128287128291128311128321128327128339128341128347128351128377128389128393128399128411128413128431128437128449128461128467128473128477128483128489128509128519128521128549128551128563128591128599128603128621128629128657128659128663128669128677128683128693128717128747128749128761128767128813128819128831128833128837128857128861128873128879128903128923128939128941128951128959128969128971128981128983128987128993129001129011129023129037129049129061129083129089129097129113129119129121129127129169129187129193129197129209129221129223129229129263129277129281129287129289129293129313129341129347129361129379129401129403129419129439129443129449129457129461129469129491129497129499129509129517129527129529129533129539129553129581129587129589129593129607129629129631129641129643129671129707129719129733129737129749129757129763129769129793129803129841129853129887129893129901129917129919129937129953129959129967129971130003130021130027130043130051130057130069130073130079130087130099130121130127130147130171130183130199130201130211130223130241130253130259130261130267130279130303130307130337130343130349130363130367130369130379130399130409130411130423130439130447130457130469130477130483130489130513130517130523130531130547130553130579130589130619130621130631130633130639130643130649130651130657130681130687130693130699130729130769130783130787130807130811130817130829130841130843130859130873130927130957130969130973130981130987131009131011131023131041131059131063131071131101131111131113131129131143131149131171131203131213131221131231131249131251131267131293131297131303131311131317131321131357131363131371131381131413131431131437131441131447131449131477131479131489131497131501131507131519131543131561131581131591131611131617131627131639131641131671131687131701131707131711131713131731131743131749131759131771131777131779131783131797131837131839131849131861131891131893131899131909131927131933131939131941131947131959131969132001132019132047132049132059132071132103132109132113132137132151132157132169132173132199132229132233132241132247132257132263132283132287132299132313132329132331132347132361132367132371132383132403132409132421132437132439132469132491132499132511132523132527132529132533132541132547132589132607132611132619132623132631132637132647132661132667132679132689132697132701132707132709132721132739132749132751132757132761132763132817132833132851132857132859132863132887132893132911132929132947132949132953132961132967132971132989133013133033133039133051133069133073133087133097133103133109133117133121133153133157133169133183133187133201133213133241133253133261133271133277133279133283133303133319133321133327133337133349133351133379133387133391133403133417133439133447133451133481133493133499133519133541133543133559133571133583133597133631133633133649133657133669133673133691133697133709133711133717133723133733133769133781133801133811133813133831133843133853133873133877133919133949133963133967133979133981133993133999134033134039134047134053134059134077134081134087134089134093134129134153134161134171134177134191134207134213134219134227134243134257134263134269134287134291134293134327134333134339134341134353134359134363134369134371134399134401134417134437134443134471134489134503134507134513134581134587134591134593134597134609134639134669134677134681134683134699134707134731134741134753134777134789134807134837134839134851134857134867134873134887134909134917134921134923134947134951134989134999135007135017135019135029135043135049135059135077135089135101135119135131135151135173135181135193135197135209135211135221135241135257135271135277135281135283135301135319135329135347135349135353135367135389135391135403135409135427135431135433135449135461135463135467135469135479135497135511135533135559135571135581135589135593135599135601135607135613135617135623135637135647135649135661135671135697135701135719135721135727135731135743135757135781135787135799135829135841135851135859135887135893135899135911135913135929135937135977135979136013136027136033136043136057136067136069136093136099136111136133136139136163136177136189136193136207136217136223136237136247136261136273136277136303136309136319136327136333136337136343136351136361136373136379136393136397136399136403136417136421136429136447136453136463136471136481136483136501136511136519136523136531136537136541136547136559136573136601136603136607136621136649136651136657136691136693136709136711136727136733136739136751136753136769136777136811136813136841136849136859136861136879136883136889136897136943136949136951136963136973136979136987136991136993136999137029137077137087137089137117137119137131137143137147137153137177137183137191137197137201137209137219137239137251137273137279137303137321137339137341137353137359137363137369137383137387137393137399137413137437137443137447137453137477137483137491137507137519137537137567137573137587137593137597137623137633137639137653137659137699137707137713137723137737137743137771137777137791137803137827137831137849137867137869137873137909137911137927137933137941137947137957137983137993137999138007138041138053138059138071138077138079138101138107138113138139138143138157138163138179138181138191138197138209138239138241138247138251138283138289138311138319138323138337138349138371138373138389138401138403138407138427138433138449138451138461138469138493138497138511138517138547138559138563138569138571138577138581138587138599138617138629138637138641138647138661138679138683138727138731138739138763138793138797138799138821138829138841138863138869138883138889138893138899138917138923138937138959138967138977139021139033139067139079139091139109139121139123139133139169139177139187139199139201139241139267139273139291139297139301139303139309139313139333139339139343139361139367139369139387139393139397139409139423139429139439139457139459139483139487139493139501139511139537139547139571139589139591139597139609139619139627139661139663139681139697139703139709139721139729139739139747139753139759139787139801139813139831139837139861139871139883139891139901139907139921139939139943139967139969139981139987139991139999140009140053140057140069140071140111140123140143140159140167140171140177140191140197140207140221140227140237140249140263140269140281140297140317140321140333140339140351140363140381140401140407140411140417140419140423140443140449140453140473140477140521140527140533140549140551140557140587140593140603140611140617140627140629140639140659140663140677140681140683140689140717140729140731140741140759140761140773140779140797140813140827140831140837140839140863140867140869140891140893140897140909140929140939140977140983140989141023141041141061141067141073141079141101141107141121141131141157141161141179141181141199141209141221141223141233141241141257141263141269141277141283141301141307141311141319141353141359141371141397141403141413141439141443141461141481141497141499141509141511141529141539141551141587141601141613141619141623141629141637141649141653141667141671141677141679141689141697141707141709141719141731141761141767141769141773141793141803141811141829141833141851141853141863141871141907141917141931141937141941141959141961141971141991142007142019142031142039142049142057142061142067142097142099142111142123142151142157142159142169142183142189142193142211142217142223142231142237142271142297142319142327142357142369142381142391142403142421142427142433142453142469142501142529142537142543142547142553142559142567142573142589142591142601142607142609142619142657142673142697142699142711142733142757142759142771142787142789142799142811142837142841142867142871142873142897142903142907142939142949142963142969142973142979142981142993143053143063143093143107143111143113143137143141143159143177143197143239143243143249143257143261143263143281143287143291143329143333143357143387143401143413143419143443143461143467143477143483143489143501143503143509143513143519143527143537143551143567143569143573143593143609143617143629143651143653143669143677143687143699143711143719143729143743143779143791143797143807143813143821143827143831143833143873143879143881143909143947143953143971143977143981143999144013144031144037144061144071144073144103144139144161144163144167144169144173144203144223144241144247144253144259144271144289144299144307144311144323144341144349144379144383144407144409144413144427144439144451144461144479144481144497144511144539144541144563144569144577144583144589144593144611144629144659144667144671144701144709144719144731144737144751144757144763144773144779144791144817144829144839144847144883144887144889144899144917144931144941144961144967144973144983145007145009145021145031145037145043145063145069145091145109145121145133145139145177145193145207145213145219145253145259145267145283145289145303145307145349145361145381145391145399145417145423145433145441145451145459145463145471145477145487145501145511145513145517145531145543145547145549145577145589145601145603145633145637145643145661145679145681145687145703145709145721145723145753145757145759145771145777145799145807145819145823145829145861145879145897145903145931145933145949145963145967145969145987145991146009146011146021146023146033146051146057146059146063146077146093146099146117146141146161146173146191146197146203146213146221146239146249146273146291146297146299146309146317146323146347146359146369146381146383146389146407146417146423146437146449146477146513146519146521146527146539146543146563146581146603146609146617146639146647146669146677146681146683146701146719146743146749146767146777146801146807146819146833146837146843146849146857146891146893146917146921146933146941146953146977146983146987146989147011147029147031147047147073147083147089147097147107147137147139147151147163147179147197147209147211147221147227147229147253147263147283147289147293147299147311147319147331147341147347147353147377147391147397147401147409147419147449147451147457147481147487147503147517147541147547147551147557147571147583147607147613147617147629147647147661147671147673147689147703147709147727147739147743147761147769147773147779147787147793147799147811147827147853147859147863147881147919147937147949147977147997148013148021148061148063148073148079148091148123148139148147148151148153148157148171148193148199148201148207148229148243148249148279148301148303148331148339148361148367148381148387148399148403148411148429148439148457148469148471148483148501148513148517148531148537148549148573148579148609148627148633148639148663148667148669148691148693148711148721148723148727148747148763148781148783148793148817148829148853148859148861148867148873148891148913148921148927148931148933148949148957148961148991148997149011149021149027149033149053149057149059149069149077149087149099149101149111149113149119149143149153149159149161149173149183149197149213149239149249149251149257149269149287149297149309149323149333149341149351149371149377149381149393149399149411149417149419149423149441149459149489149491149497149503149519149521149531149533149543149551149561149563149579149603149623149627149629149689149711149713149717149729149731149749149759149767149771149791149803149827149837149839149861149867149873149893149899149909149911149921149939149953149969149971149993150001150011150041150053150061150067150077150083150089150091150097150107150131150151150169150193150197150203150209150211150217150221150223150239150247150287150299150301150323150329150343150373150377150379150383150401150407150413150427150431150439150473150497150503150517150523150533150551150559150571150583150587150589150607150611150617150649150659150697150707150721150743150767150769150779150791150797150827150833150847150869150881150883150889150893150901150907150919150929150959150961150967150979150989150991151007151009151013151027151049151051151057151091151121151141151153151157151163151169151171151189151201151213151237151241151243151247151253151273151279151289151303151337151339151343151357151379151381151391151397151423151429151433151451151471151477151483151499151507151517151523151531151537151549151553151561151573151579151597151603151607151609151631151637151643151651151667151673151681151687151693151703151717151729151733151769151771151783151787151799151813151817151841151847151849151871151883151897151901151903151909151937151939151967151969152003152017152027152029152039152041152063152077152081152083152093152111152123152147152183152189152197152203152213152219152231152239152249152267152287152293152297152311152363152377152381152389152393152407152417152419152423152429152441152443152459152461152501152519152531152533152539152563152567152597152599152617152623152629152639152641152657152671152681152717152723152729152753152767152777152783152791152809152819152821152833152837152839152843152851152857152879152897152899152909152939152941152947152953152959152981152989152993153001153059153067153071153073153077153089153107153113153133153137153151153191153247153259153269153271153277153281153287153313153319153337153343153353153359153371153379153407153409153421153427153437153443153449153457153469153487153499153509153511153521153523153529153533153557153563153589153607153611153623153641153649153689153701153719153733153739153743153749153757153763153817153841153871153877153887153889153911153913153929153941153947153949153953153991153997154001154027154043154057154061154067154073154079154081154087154097154111154127154153154157154159154181154183154211154213154229154243154247154267154277154279154291154303154313154321154333154339154351154369154373154387154409154417154423154439154459154487154493154501154523154543154571154573154579154589154591154613154619154621154643154667154669154681154691154699154723154727154733154747154753154769154787154789154799154807154823154841154849154871154873154877154883154897154927154933154937154943154981154991155003155009155017155027155047155069155081155083155087155119155137155153155161155167155171155191155201155203155209155219155231155251155269155291155299155303155317155327155333155371155377155381155383155387155399155413155423155443155453155461155473155501155509155521155537155539155557155569155579155581155593155599155609155621155627155653155657155663155671155689155693155699155707155717155719155723155731155741155747155773155777155783155797155801155809155821155833155849155851155861155863155887155891155893155921156007156011156019156041156059156061156071156089156109156119156127156131156139156151156157156217156227156229156241156253156257156259156269156307156319156329156347156353156361156371156419156421156437156467156487156491156493156511156521156539156577156589156593156601156619156623156631156641156659156671156677156679156683156691156703156707156719156727156733156749156781156797156799156817156823156833156841156887156899156901156913156941156943156967156971156979157007157013157019157037157049157051157057157061157081157103157109157127157133157141157163157177157181157189157207157211157217157219157229157231157243157247157253157259157271157273157277157279157291157303157307157321157327157349157351157363157393157411157427157429157433157457157477157483157489157513157519157523157543157559157561157571157579157627157637157639157649157667157669157679157721157733157739157747157769157771157793157799157813157823157831157837157841157867157877157889157897157901157907157931157933157951157991157999158003158009158017158029158047158071158077158113158129158141158143158161158189158201158209158227158231158233158243158261158269158293158303158329158341158351158357158359158363158371158393158407158419158429158443158449158489158507158519158527158537158551158563158567158573158581158591158597158611158617158621158633158647158657158663158699158731158747158749158759158761158771158777158791158803158843158849158863158867158881158909158923158927158941158959158981158993159013159017159023159059159073159079159097159113159119159157159161159167159169159179159191159193159199159209159223159227159233159287159293159311159319159337159347159349159361159389159403159407159421159431159437159457159463159469159473159491159499159503159521159539159541159553159563159569159571159589159617159623159629159631159667159671159673159683159697159701159707159721159737159739159763159769159773159779159787159791159793159799159811159833159839159853159857159869159871159899159911159931159937159977159979160001160009160019160031160033160049160073160079160081160087160091160093160117160141160159160163160169160183160201160207160217160231160243160253160309160313160319160343160357160367160373160387160397160403160409160423160441160453160481160483160499160507160541160553160579160583160591160603160619160621160627160637160639160649160651160663160669160681160687160697160709160711160723160739160751160753160757160781160789160807160813160817160829160841160861160877160879160883160903160907160933160967160969160981160997161009161017161033161039161047161053161059161071161087161093161123161137161141161149161159161167161201161221161233161237161263161267161281161303161309161323161333161339161341161363161377161387161407161411161453161459161461161471161503161507161521161527161531161543161561161563161569161573161591161599161611161627161639161641161659161683161717161729161731161741161743161753161761161771161773161779161783161807161831161839161869161873161879161881161911161921161923161947161957161969161971161977161983161999162007162011162017162053162059162079162091162109162119162143162209162221162229162251162257162263162269162277162287162289162293162343162359162389162391162413162419162439162451162457162473162493162499162517162523162527162529162553162557162563162577162593162601162611162623162629162641162649162671162677162683162691162703162709162713162727162731162739162749162751162779162787162791162821162823162829162839162847162853162859162881162889162901162907162917162937162947162971162973162989162997163003163019163021163027163061163063163109163117163127163129163147163151163169163171163181163193163199163211163223163243163249163259163307163309163321163327163337163351163363163367163393163403163409163411163417163433163469163477163481163483163487163517163543163561163567163573163601163613163621163627163633163637163643163661163673163679163697163729163733163741163753163771163781163789163811163819163841163847163853163859163861163871163883163901163909163927163973163979163981163987163991163993163997164011164023164039164051164057164071164089164093164113164117164147164149164173164183164191164201164209164231164233164239164249164251164267164279164291164299164309164321164341164357164363164371164377164387164413164419164429164431164443164447164449164471164477164503164513164531164569164581164587164599164617164621164623164627164653164663164677164683164701164707164729164743164767164771164789164809164821164831164837164839164881164893164911164953164963164987164999165001165037165041165047165049165059165079165083165089165103165133165161165173165181165203165211165229165233165247165287165293165311165313165317165331165343165349165367165379165383165391165397165437165443165449165457165463165469165479165511165523165527165533165541165551165553165559165569165587165589165601165611165617165653165667165673165701165703165707165709165713165719165721165749165779165799165811165817165829165833165857165877165883165887165901165931165941165947165961165983166013166021166027166031166043166063166081166099166147166151166157166169166183166189166207166219166237166247166259166273166289166297166301166303166319166349166351166357166363166393166399166403166409166417166429166457166471166487166541166561166567166571166597166601166603166609166613166619166627166631166643166657166667166669166679166693166703166723166739166741166781166783166799166807166823166841166843166847166849166853166861166867166871166909166919166931166949166967166973166979166987167009167017167021167023167033167039167047167051167071167077167081167087167099167107167113167117167119167149167159167173167177167191167197167213167221167249167261167267167269167309167311167317167329167339167341167381167393167407167413167423167429167437167441167443167449167471167483167491167521167537167543167593167597167611167621167623167627167633167641167663167677167683167711167729167747167759167771167777167779167801167809167861167863167873167879167887167891167899167911167917167953167971167987168013168023168029168037168043168067168071168083168089168109168127168143168151168193168197168211168227168247168253168263168269168277168281168293168323168331168347168353168391168409168433168449168451168457168463168481168491168499168523168527168533168541168559168599168601168617168629168631168643168673168677168697168713168719168731168737168743168761168769168781168803168851168863168869168887168893168899168901168913168937168943168977168991169003169007169009169019169049169063169067169069169079169093169097169111169129169151169159169177169181169199169217169219169241169243169249169259169283169307169313169319169321169327169339169343169361169369169373169399169409169427169457169471169483169489169493169501169523169531169553169567169583169591169607169627169633169639169649169657169661169667169681169691169693169709169733169751169753169769169777169783169789169817169823169831169837169843169859169889169891169909169913169919169933169937169943169951169957169987169991170003170021170029170047170057170063170081170099170101170111170123170141170167170179170189170197170207170213170227170231170239170243170249170263170267170279170293170299170327170341170347170351170353170363170369170371170383170389170393170413170441170447170473170483170497170503170509170537170539170551170557170579170603170609170627170633170641170647170669170689170701170707170711170741170749170759170761170767170773170777170801170809170813170827170837170843170851170857170873170881170887170899170921170927170953170957170971171007171023171029171043171047171049171053171077171079171091171103171131171161171163171167171169171179171203171233171251171253171263171271171293171299171317171329171341171383171401171403171427171439171449171467171469171473171481171491171517171529171539171541171553171559171571171583171617171629171637171641171653171659171671171673171679171697171707171713171719171733171757171761171763171793171799171803171811171823171827171851171863171869171877171881171889171917171923171929171937171947172001172009172021172027172031172049172069172079172093172097172127172147172153172157172169172171172181172199172213172217172219172223172243172259172279172283172297172307172313172321172331172343172351172357172373172399172411172421172423172427172433172439172441172489172507172517172519172541172553172561172573172583172589172597172603172607172619172633172643172649172657172663172673172681172687172709172717172721172741172751172759172787172801172807172829172849172853172859172867172871172877172883172933172969172973172981172987172993172999173021173023173039173053173059173081173087173099173137173141173149173177173183173189173191173207173209173219173249173263173267173273173291173293173297173309173347173357173359173429173431173473173483173491173497173501173531173539173543173549173561173573173599173617173629173647173651173659173669173671173683173687173699173707173713173729173741173743173773173777173779173783173807173819173827173839173851173861173867173891173897173909173917173923173933173969173977173981173993174007174017174019174047174049174061174067174071174077174079174091174101174121174137174143174149174157174169174197174221174241174257174259174263174281174289174299174311174329174331174337174347174367174389174407174413174431174443174457174467174469174481174487174491174527174533174569174571174583174599174613174617174631174637174649174653174659174673174679174703174721174737174749174761174763174767174773174799174821174829174851174859174877174893174901174907174917174929174931174943174959174989174991175003175013175039175061175067175069175079175081175103175129175141175211175229175261175267175277175291175303175309175327175333175349175361175391175393175403175411175433175447175453175463175481175493175499175519175523175543175573175601175621175631175633175649175663175673175687175691175699175709175723175727175753175757175759175781175783175811175829175837175843175853175859175873175891175897175909175919175937175939175949175961175963175979175991175993176017176021176023176041176047176051176053176063176081176087176089176123176129176153176159176161176179176191176201176207176213176221176227176237176243176261176299176303176317176321176327176329176333176347176353176357176369176383176389176401176413176417176419176431176459176461176467176489176497176503176507176509176521176531176537176549176551176557176573176591176597176599176609176611176629176641176651176677176699176711176713176741176747176753176777176779176789176791176797176807176809176819176849176857176887176899176903176921176923176927176933176951176977176983176989177007177011177013177019177043177091177101177109177113177127177131177167177173177209177211177217177223177239177257177269177283177301177319177323177337177347177379177383177409177421177427177431177433177467177473177481177487177493177511177533177539177553177589177601177623177647177677177679177691177739177743177761177763177787177791177797177811177823177839177841177883177887177889177893177907177913177917177929177943177949177953177967177979178001178021178037178039178067178069178091178093178103178117178127178141178151178169178183178187178207178223178231178247178249178259178261178289178301178307178327178333178349178351178361178393178397178403178417178439178441178447178469178481178487178489178501178513178531178537178559178561178567178571178597178601178603178609178613178621178627178639178643178681178691178693178697178753178757178781178793178799178807178813178817178819178831178853178859178873178877178889178897178903178907178909178921178931178933178939178951178973178987179021179029179033179041179051179057179083179089179099179107179111179119179143179161179167179173179203179209179213179233179243179261179269179281179287179317179321179327179351179357179369179381179383179393179407179411179429179437179441179453179461179471179479179483179497179519179527179533179549179563179573179579179581179591179593179603179623179633179651179657179659179671179687179689179693179717179719179737179743179749179779179801179807179813179819179821179827179833179849179897179899179903179909179917179923179939179947179951179953179957179969179981179989179999180001180007180023180043180053180071180073180077180097180137180161180179180181180211180221180233180239180241180247180259180263180281180287180289180307180311180317180331180337180347180361180371180379180391180413180419180437180463180473180491180497180503180511180533180539180541180547180563180569180617180623180629180647180667180679180701180731180749180751180773180779180793180797180799180811180847180871180883180907180949180959181001181003181019181031181039181061181063181081181087181123181141181157181183181193181199181201181211181213181219181243181253181273181277181283181297181301181303181361181387181397181399181409181421181439181457181459181499181501181513181523181537181549181553181603181607181609181619181639181667181669181693181711181717181721181729181739181751181757181759181763181777181787181789181813181837181871181873181889181891181903181913181919181927181931181943181957181967181981181997182009182011182027182029182041182047182057182059182089182099182101182107182111182123182129182131182141182159182167182177182179182201182209182233182239182243182261182279182297182309182333182339182341182353182387182389182417182423182431182443182453182467182471182473182489182503182509182519182537182549182561182579182587182593182599182603182617182627182639182641182653182657182659182681182687182701182711182713182747182773182779182789182803182813182821182839182851182857182867182887182893182899182921182927182929182933182953182957182969182981182999183023183037183041183047183059183067183089183091183119183151183167183191183203183247183259183263183283183289183299183301183307183317183319183329183343183349183361183373183377183383183389183397183437183439183451183461183473183479183487183497183499183503183509183511183523183527183569183571183577183581183587183593183611183637183661183683183691183697183707183709183713183761183763183797183809183823183829183871183877183881183907183917183919183943183949183959183971183973183979184003184007184013184031184039184043184057184073184081184087184111184117184133184153184157184181184187184189184199184211184231184241184259184271184273184279184291184309184321184333184337184351184369184409184417184441184447184463184477184487184489184511184517184523184553184559184567184571184577184607184609184627184631184633184649184651184669184687184693184703184711184721184727184733184753184777184823184829184831184837184843184859184879184901184903184913184949184957184967184969184993184997184999185021185027185051185057185063185069185071185077185089185099185123185131185137185149185153185161185167185177185183185189185221185233185243185267185291185299185303185309185323185327185359185363185369185371185401185429185441185467185477185483185491185519185527185531185533185539185543185551185557185567185569185593185599185621185641185651185677185681185683185693185699185707185711185723185737185747185749185753185767185789185797185813185819185821185831185833185849185869185873185893185897185903185917185923185947185951185957185959185971185987185993186007186013186019186023186037186041186049186071186097186103186107186113186119186149186157186161186163186187186191186211186227186229186239186247186253186259186271186283186299186301186311186317186343186377186379186391186397186419186437186451186469186479186481186551186569186581186583186587186601186619186629186647186649186653186671186679186689186701186707186709186727186733186743186757186761186763186773186793186799186841186859186869186871186877186883186889186917186947186959187003187009187027187043187049187067187069187073187081187091187111187123187127187129187133187139187141187163187171187177187181187189187193187211187217187219187223187237187273187277187303187337187339187349187361187367187373187379187387187393187409187417187423187433187441187463187469187471187477187507187513187531187547187559187573187597187631187633187637187639187651187661187669187687187699187711187721187751187763187787187793187823187843187861187871187877187883187897187907187909187921187927187931187951187963187973187987188011188017188021188029188107188137188143188147188159188171188179188189188197188249188261188273188281188291188299188303188311188317188323188333188351188359188369188389188401188407188417188431188437188443188459188473188483188491188519188527188533188563188579188603188609188621188633188653188677188681188687188693188701188707188711188719188729188753188767188779188791188801188827188831188833188843188857188861188863188869188891188911188927188933188939188941188953188957188983188999189011189017189019189041189043189061189067189127189139189149189151189169189187189199189223189229189239189251189253189257189271189307189311189337189347189349189353189361189377189389189391189401189407189421189433189437189439189463189467189473189479189491189493189509189517189523189529189547189559189583189593189599189613189617189619189643189653189661189671189691189697189701189713189733189743189757189767189797189799189817189823189851189853189859189877189881189887189901189913189929189947189949189961189967189977189983189989189997190027190031190051190063190093190097190121190129190147190159190181190207190243190249190261190271190283190297190301190313190321190331190339190357190367190369190387190391190403190409190471190507190523190529190537190543190573190577190579190583190591190607190613190633190639190649190657190667190669190699190709190711190717190753190759190763190769190783190787190793190807190811190823190829190837190843190871190889190891190901190909190913190921190979190997191021191027191033191039191047191057191071191089191099191119191123191137191141191143191161191173191189191227191231191237191249191251191281191297191299191339191341191353191413191441191447191449191453191459191461191467191473191491191497191507191509191519191531191533191537191551191561191563191579191599191621191627191657191669191671191677191689191693191699191707191717191747191749191773191783191791191801191803191827191831191833191837191861191899191903191911191929191953191969191977191999192007192013192029192037192043192047192053192091192097192103192113192121192133192149192161192173192187192191192193192229192233192239192251192259192263192271192307192317192319192323192341192343192347192373192377192383192391192407192431192461192463192497192499192529192539192547192553192557192571192581192583192587192601192611192613192617192629192631192637192667192677192697192737192743192749192757192767192781192791192799192811192817192833192847192853192859192877192883192887192889192917192923192931192949192961192971192977192979192991193003193009193013193031193043193051193057193073193093193133193139193147193153193163193181193183193189193201193243193247193261193283193301193327193337193357193367193373193379193381193387193393193423193433193441193447193451193463193469193493193507193513193541193549193559193573193577193597193601193603193607193619193649193663193679193703193723193727193741193751193757193763193771193789193793193799193811193813193841193847193859193861193871193873193877193883193891193937193939193943193951193957193979193993194003194017194027194057194069194071194083194087194093194101194113194119194141194149194167194179194197194203194239194263194267194269194309194323194353194371194377194413194431194443194471194479194483194507194521194527194543194569194581194591194609194647194653194659194671194681194683194687194707194713194717194723194729194749194767194771194809194813194819194827194839194861194863194867194869194891194899194911194917194933194963194977194981194989195023195029195043195047195049195053195071195077195089195103195121195127195131195137195157195161195163195193195197195203195229195241195253195259195271195277195281195311195319195329195341195343195353195359195389195401195407195413195427195443195457195469195479195493195497195511195527195539195541195581195593195599195659195677195691195697195709195731195733195737195739195743195751195761195781195787195791195809195817195863195869195883195887195893195907195913195919195929195931195967195971195973195977195991195997196003196033196039196043196051196073196081196087196111196117196139196159196169196171196177196181196187196193196201196247196271196277196279196291196303196307196331196337196379196387196429196439196453196459196477196499196501196519196523196541196543196549196561196579196583196597196613196643196657196661196663196681196687196699196709196717196727196739196751196769196771196799196817196831196837196853196871196873196879196901196907196919196927196961196991196993197003197009197023197033197059197063197077197083197089197101197117197123197137197147197159197161197203197207197221197233197243197257197261197269197273197279197293197297197299197311197339197341197347197359197369197371197381197383197389197419197423197441197453197479197507197521197539197551197567197569197573197597197599197609197621197641197647197651197677197683197689197699197711197713197741197753197759197767197773197779197803197807197831197837197887197891197893197909197921197927197933197947197957197959197963197969197971198013198017198031198043198047198073198083198091198097198109198127198139198173198179198193198197198221198223198241198251198257198259198277198281198301198313198323198337198347198349198377198391198397198409198413198427198437198439198461198463198469198479198491198503198529198533198553198571198589198593198599198613198623198637198641198647198659198673198689198701198719198733198761198769198811198817198823198827198829198833198839198841198851198859198899198901198929198937198941198943198953198959198967198971198977198997199021199033199037199039199049199081199103199109199151199153199181199193199207199211199247199261199267199289199313199321199337199343199357199373199379199399199403199411199417199429199447199453199457199483199487199489199499199501199523199559199567199583199601199603199621199637199657199669199673199679199687199697199721199729199739199741199751199753199777199783199799199807199811199813199819199831199853199873199877199889199909199921199931199933199961199967199999200003200009200017200023200029200033200041200063200087200117200131200153200159200171200177200183200191200201200227200231200237200257200273200293200297200323200329200341200351200357200363200371200381200383200401200407200437200443200461200467200483200513200569200573200579200587200591200597200609200639200657200671200689200699200713200723200731200771200779200789200797200807200843200861200867200869200881200891200899200903200909200927200929200971200983200987200989201007201011201031201037201049201073201101201107201119201121201139201151201163201167201193201203201209201211201233201247201251201281201287201307201329201337201359201389201401201403201413201437201449201451201473201491201493201497201499201511201517201547201557201577201581201589201599201611201623201629201653201661201667201673201683201701201709201731201743201757201767201769201781201787201791201797201809201821201823201827201829201833201847201881201889201893201907201911201919201923201937201947201953201961201973201979201997202001202021202031202049202061202063202067202087202099202109202121202127202129202183202187202201202219202231202243202277202289202291202309202327202339202343202357202361202381202387202393202403202409202441202471202481202493202519202529202549202567202577202591202613202621202627202637202639202661202667202679202693202717202729202733202747202751202753202757202777202799202817202823202841202859202877202879202889202907202921202931202933202949202967202973202981202987202999203011203017203023203039203051203057203117203141203173203183203207203209203213203221203227203233203249203279203293203309203311203317203321203323203339203341203351203353203363203381203383203387203393203417203419203429203431203449203459203461203531203549203563203569203579203591203617203627203641203653203657203659203663203669203713203761203767203771203773203789203807203809203821203843203857203869203873203897203909203911203921203947203953203969203971203977203989203999204007204013204019204023204047204059204067204101204107204133204137204143204151204161204163204173204233204251204299204301204311204319204329204331204353204359204361204367204371204377204397204427204431204437204439204443204461204481204487204509204511204517204521204557204563204583204587204599204601204613204623204641204667204679204707204719204733204749204751204781204791204793204797204803204821204857204859204871204887204913204917204923204931204947204973204979204983205019205031205033205043205063205069205081205097205103205111205129205133205141205151205157205171205187205201205211205213205223205237205253205267205297205307205319205327205339205357205391205397205399205417205421205423205427205433205441205453205463205477205483205487205493205507205519205529205537205549205553205559205589205603205607205619205627205633205651205657205661205663205703205721205759205763205783205817205823205837205847205879205883205913205937205949205951205957205963205967205981205991205993206009206021206027206033206039206047206051206069206077206081206083206123206153206177206179206183206191206197206203206209206221206233206237206249206251206263206273206279206281206291206299206303206341206347206351206369206383206399206407206411206413206419206447206461206467206477206483206489206501206519206527206543206551206593206597206603206623206627206639206641206651206699206749206779206783206803206807206813206819206821206827206879206887206897206909206911206917206923206933206939206951206953206993207013207017207029207037207041207061207073207079207113207121207127207139207169207187207191207197207199207227207239207241207257207269207287207293207301207307207329207331207341207343207367207371207377207401207409207433207443207457207463207469207479207481207491207497207509207511207517207521207523207541207547207551207563207569207589207593207619207629207643207653207661207671207673207679207709207719207721207743207763207769207797207799207811207821207833207847207869207877207923207931207941207947207953207967207971207973207997208001208003208009208037208049208057208067208073208099208111208121208129208139208141208147208189208207208213208217208223208231208253208261208277208279208283208291208309208319208333208337208367208379208387208391208393208409208433208441208457208459208463208469208489208493208499208501208511208513208519208529208553208577208589208591208609208627208631208657208667208673208687208697208699208721208729208739208759208787208799208807208837208843208877208889208891208907208927208931208933208961208963208991208993208997209021209029209039209063209071209089209123209147209159209173209179209189209201209203209213209221209227209233209249209257209263209267209269209299209311209317209327209333209347209353209357209359209371209381209393209401209431209441209449209459209471209477209497209519209533209543209549209563209567209569209579209581209597209621209623209639209647209659209669209687209701209707209717209719209743209767209771209789209801209809209813209819209821209837209851209857209861209887209917209927209929209939209953209959209971209977209983209987210011210019210031210037210053210071210097210101210109210113210127210131210139210143210157210169210173210187210191210193210209210229210233210241210247210257210263210277210283210299210317210319210323210347210359210361210391210401210403210407210421210437210461210467210481210487210491210499210523210527210533210557210599210601210619210631210643210659210671210709210713210719210731210739210761210773210803210809210811210823210827210839210853210857210869210901210907210911210913210923210929210943210961210967211007211039211049211051211061211063211067211073211093211097211129211151211153211177211187211193211199211213211217211219211229211231211241211247211271211283211291211297211313211319211333211339211349211369211373211403211427211433211441211457211469211493211499211501211507211543211559211571211573211583211597211619211639211643211657211661211663211681211691211693211711211723211727211741211747211777211781211789211801211811211817211859211867211873211877211879211889211891211927211931211933211943211949211969211979211997212029212039212057212081212099212117212123212131212141212161212167212183212203212207212209212227212239212243212281212293212297212353212369212383212411212419212423212437212447212453212461212467212479212501212507212557212561212573212579212587212593212627212633212651212669212671212677212683212701212777212791212801212827212837212843212851212867212869212873212881212897212903212909212917212923212969212981212987212999213019213023213029213043213067213079213091213097213119213131213133213139213149213173213181213193213203213209213217213223213229213247213253213263213281213287213289213307213319213329213337213349213359213361213383213391213397213407213449213461213467213481213491213523213533213539213553213557213589213599213611213613213623213637213641213649213659213713213721213727213737213751213791213799213821213827213833213847213859213881213887213901213919213929213943213947213949213953213973213977213989214003214007214009214021214031214033214043214051214063214069214087214091214129214133214141214147214163214177214189214211214213214219214237214243214259214283214297214309214351214363214373214381214391214399214433214439214451214457214463214469214481214483214499214507214517214519214531214541214559214561214589214603214607214631214639214651214657214663214667214673214691214723214729214733214741214759214763214771214783214787214789214807214811214817214831214849214853214867214883214891214913214939214943214967214987214993215051215063215077215087215123215141215143215153215161215179215183215191215197215239215249215261215273215279215297215309215317215329215351215353215359215381215389215393215399215417215443215447215459215461215471215483215497215503215507215521215531215563215573215587215617215653215659215681215687215689215693215723215737215753215767215771215797215801215827215833215843215851215857215863215893215899215909215921215927215939215953215959215981215983216023216037216061216071216091216103216107216113216119216127216133216149216157216173216179216211216217216233216259216263216289216317216319216329216347216371216373216379216397216401216421216431216451216481216493216509216523216551216553216569216571216577216607216617216641216647216649216653216661216679216703216719216731216743216751216757216761216779216781216787216791216803216829216841216851216859216877216899216901216911216917216919216947216967216973216991217001217003217027217033217057217069217081217111217117217121217157217163217169217199217201217207217219217223217229217241217253217271217307217309217313217319217333217337217339217351217361217363217367217369217387217397217409217411217421217429217439217457217463217489217499217517217519217559217561217573217577217579217619217643217661217667217681217687217691217697217717217727217733217739217747217771217781217793217823217829217849217859217901217907217909217933217937217969217979217981218003218021218047218069218077218081218083218087218107218111218117218131218137218143218149218171218191218213218227218233218249218279218287218357218363218371218381218389218401218417218419218423218437218447218453218459218461218479218509218513218521218527218531218549218551218579218591218599218611218623218627218629218641218651218657218677218681218711218717218719218723218737218749218761218783218797218809218819218833218839218843218849218857218873218887218923218941218947218963218969218971218987218989218993219001219017219019219031219041219053219059219071219083219091219097219103219119219133219143219169219187219217219223219251219277219281219293219301219311219313219353219361219371219377219389219407219409219433219437219451219463219467219491219503219517219523219529219533219547219577219587219599219607219613219619219629219647219649219677219679219683219689219707219721219727219731219749219757219761219763219767219787219797219799219809219823219829219839219847219851219871219881219889219911219917219931219937219941219943219953219959219971219977219979219983220009220013220019220021220057220063220123220141220147220151220163220169220177220189220217220243220279220291220301220307220327220333220351220357220361220369220373220391220399220403220411220421220447220469220471220511220513220529220537220543220553220559220573220579220589220613220663220667220673220681220687220699220709220721220747220757220771220783220789220793220807220811220841220859220861220873220877220879220889220897220901220903220907220919220931220933220939220973221021221047221059221069221071221077221083221087221093221101221159221171221173221197221201221203221209221219221227221233221239221251221261221281221303221311221317221327221393221399221401221411221413221447221453221461221471221477221489221497221509221537221539221549221567221581221587221603221621221623221653221657221659221671221677221707221713221717221719221723221729221737221747221773221797221807221813221827221831221849221873221891221909221941221951221953221957221987221989221999222007222011222023222029222041222043222059222067222073222107222109222113222127222137222149222151222161222163222193222197222199222247222269222289222293222311222317222323222329222337222347222349222361222367222379222389222403222419222437222461222493222499222511222527222533222553222557222587222601222613222619222643222647222659222679222707222713222731222773222779222787222791222793222799222823222839222841222857222863222877222883222913222919222931222941222947222953222967222977222979222991223007223009223019223037223049223051223061223063223087223099223103223129223133223151223207223211223217223219223229223241223243223247223253223259223273223277223283223291223303223313223319223331223337223339223361223367223381223403223423223429223439223441223463223469223481223493223507223529223543223547223549223577223589223621223633223637223667223679223681223697223711223747223753223757223759223781223823223829223831223837223841223843223849223903223919223921223939223963223969223999224011224027224033224041224047224057224069224071224101224113224129224131224149224153224171224177224197224201224209224221224233224239224251224261224267224291224299224303224309224317224327224351224359224363224401224423224429224443224449224461224467224473224491224501224513224527224563224569224579224591224603224611224617224629224633224669224677224683224699224711224717224729224737224743224759224771224797224813224831224863224869224881224891224897224909224911224921224929224947224951224969224977224993225023225037225061225067225077225079225089225109225119225133225143225149225157225161225163225167225217225221225223225227225241225257225263225287225289225299225307225341225343225347225349225353225371225373225383225427225431225457225461225479225493225499225503225509225523225527225529225569225581225583225601225611225613225619225629225637225671225683225689225697225721225733225749225751225767225769225779225781225809225821225829225839225859225871225889225919225931225941225943225949225961225977225983225989226001226007226013226027226063226087226099226103226123226129226133226141226169226183226189226199226201226217226231226241226267226283226307226313226337226357226367226379226381226397226409226427226433226451226453226463226483226487226511226531226547226549226553226571226601226609226621226631226637226643226649226657226663226669226691226697226741226753226769226777226783226789226799226813226817226819226823226843226871226901226903226907226913226937226943226991227011227027227053227081227089227093227111227113227131227147227153227159227167227177227189227191227207227219227231227233227251227257227267227281227299227303227363227371227377227387227393227399227407227419227431227453227459227467227471227473227489227497227501227519227531227533227537227561227567227569227581227593227597227603227609227611227627227629227651227653227663227671227693227699227707227719227729227743227789227797227827227849227869227873227893227947227951227977227989227993228013228023228049228061228077228097228103228113228127228131228139228181228197228199228203228211228223228233228251228257228281228299228301228307228311228331228337228341228353228359228383228409228419228421228427228443228451228457228461228469228479228509228511228517228521228523228539228559228577228581228587228593228601228611228617228619228637228647228677228707228713228731228733228737228751228757228773228793228797228799228829228841228847228853228859228869228881228883228887228901228911228913228923228929228953228959228961228983228989229003229027229037229081229093229123229127229133229139229153229157229171229181229189229199229213229217229223229237229247229249229253229261229267229283229309229321229343229351229373229393229399229403229409229423229433229459229469229487229499229507229519229529229547229549229553229561229583229589229591229601229613229627229631229637229639229681229693229699229703229711229717229727229739229751229753229759229763229769229771229777229781229799229813229819229837229841229847229849229897229903229937229939229949229961229963229979229981230003230017230047230059230063230077230081230089230101230107230117230123230137230143230149230189230203230213230221230227230233230239230257230273230281230291230303230309230311230327230339230341230353230357230369230383230387230389230393230431230449230453230467230471230479230501230507230539230551230561230563230567230597230611230647230653230663230683230693230719230729230743230761230767230771230773230779230807230819230827230833230849230861230863230873230891230929230933230939230941230959230969230977230999231001231017231019231031231041231053231067231079231107231109231131231169231197231223231241231269231271231277231289231293231299231317231323231331231347231349231359231367231379231409231419231431231433231443231461231463231479231481231493231503231529231533231547231551231559231563231571231589231599231607231611231613231631231643231661231677231701231709231719231779231799231809231821231823231827231839231841231859231871231877231893231901231919231923231943231947231961231967232003232007232013232049232051232073232079232081232091232103232109232117232129232153232171232187232189232207232217232259232303232307232333232357232363232367232381232391232409232411232417232433232439232451232457232459232487232499232513232523232549232567232571232591232597232607232621232633232643232663232669232681232699232709232711232741232751232753232777232801232811232819232823232847232853232861232871232877232891232901232907232919232937232961232963232987233021233069233071233083233113233117233141233143233159233161233173233183233201233221233231233239233251233267233279233293233297233323233327233329233341233347233353233357233371233407233417233419233423233437233477233489233509233549233551233557233591233599233609233617233621233641233663233669233683233687233689233693233713233743233747233759233777233837233851233861233879233881233911233917233921233923233939233941233969233983233993234007234029234043234067234083234089234103234121234131234139234149234161234167234181234187234191234193234197234203234211234217234239234259234271234281234287234293234317234319234323234331234341234343234361234383234431234457234461234463234467234473234499234511234527234529234539234541234547234571234587234589234599234613234629234653234659234673234683234713234721234727234733234743234749234769234781234791234799234803234809234811234833234847234851234863234869234893234907234917234931234947234959234961234967234977234979234989235003235007235009235013235043235051235057235069235091235099235111235117235159235171235177235181235199235211235231235241235243235273235289235307235309235337235349235369235397235439235441235447235483235489235493235513235519235523235537235541235553235559235577235591235601235607235621235661235663235673235679235699235723235747235751235783235787235789235793235811235813235849235871235877235889235891235901235919235927235951235967235979235997236017236021236053236063236069236077236087236107236111236129236143236153236167236207236209236219236231236261236287236293236297236323236329236333236339236377236381236387236399236407236429236449236461236471236477236479236503236507236519236527236549236563236573236609236627236641236653236659236681236699236701236707236713236723236729236737236749236771236773236779236783236807236813236867236869236879236881236891236893236897236909236917236947236981236983236993237011237019237043237053237067237071237073237089237091237137237143237151237157237161237163237173237179237203237217237233237257237271237277237283237287237301237313237319237331237343237361237373237379237401237409237467237487237509237547237563237571237581237607237619237631237673237683237689237691237701237707237733237737237749237763237767237781237791237821237851237857237859237877237883237901237911237929237959237967237971237973237977237997238001238009238019238031238037238039238079238081238093238099238103238109238141238151238157238159238163238171238181238201238207238213238223238229238237238247238261238267238291238307238313238321238331238339238361238363238369238373238397238417238423238439238451238463238471238477238481238499238519238529238531238547238573238591238627238639238649238657238673238681238691238703238709238723238727238729238747238759238781238789238801238829238837238841238853238859238877238879238883238897238919238921238939238943238949238967238991239017239023239027239053239069239081239087239119239137239147239167239171239179239201239231239233239237239243239251239263239273239287239297239329239333239347239357239383239387239389239417239423239429239431239441239461239489239509239521239527239531239539239543239557239567239579239587239597239611239623239633239641239671239689239699239711239713239731239737239753239779239783239803239807239831239843239849239851239857239873239879239893239929239933239947239957239963239977239999240007240011240017240041240043240047240049240059240073240089240101240109240113240131240139240151240169240173240197240203240209240257240259240263240271240283240287240319240341240347240349240353240371240379240421240433240437240473240479240491240503240509240517240551240571240587240589240599240607240623240631240641240659240677240701240707240719240727240733240739240743240763240769240797240811240829240841240853240859240869240881240883240893240899240913240943240953240959240967240997241013241027241037241049241051241061241067241069241079241093241117241127241141241169241177241183241207241229241249241253241259241261241271241291241303241313241321241327241333241337241343241361241363241391241393241421241429241441241453241463241469241489241511241513241517241537241543241559241561241567241589241597241601241603241639241643241651241663241667241679241687241691241711241727241739241771241781241783241793241807241811241817241823241847241861241867241873241877241883241903241907241919241921241931241939241951241963241973241979241981241993242009242057242059242069242083242093242101242119242129242147242161242171242173242197242201242227242243242257242261242273242279242309242329242357242371242377242393242399242413242419242441242447242449242453242467242479242483242491242509242519242521242533242551242591242603242617242621242629242633242639242647242659242677242681242689242713242729242731242747242773242779242789242797242807242813242819242863242867242873242887242911242923242927242971242989242999243011243031243073243077243091243101243109243119243121243137243149243157243161243167243197243203243209243227243233243239243259243263243301243311243343243367243391243401243403243421243431243433243437243461243469243473243479243487243517243521243527243533243539243553243577243583243587243589243613243623243631243643243647243671243673243701243703243707243709243769243781243787243799243809243829243839243851243857243863243871243889243911243917243931243953243973243989244003244009244021244033244043244087244091244109244121244129244141244147244157244159244177244199244217244219244243244247244253244261244291244297244301244303244313244333244339244351244357244367244379244381244393244399244403244411244423244429244451244457244463244471244481244493244507244529244547244553244561244567244583244589244597244603244619244633244637244639244667244669244687244691244703244711244721244733244747244753244759244781244787244813244837244841244843244859244861244873244877244889244897244901244939244943244957244997245023245029245033245039245071245083245087245107245129245131245149245171245173245177245183245209245251245257245261245269245279245291245299245317245321245339245383245389245407245411245417245419245437245471245473245477245501245513245519245521245527245533245561245563245587245591245593245621245627245629245639245653245671245681245683245711245719245723245741245747245753245759245771245783245789245821245849245851245863245881245897245899245909245911245941245963245977245981245983245989246011246017246049246073246097246119246121246131246133246151246167246173246187246193246203246209246217246223246241246247246251246271246277246289246317246319246329246343246349246361246371246391246403246439246469246473246497246509246511246523246527246539246557246569246577246599246607246611246613246637246641246643246661246683246689246707246709246713246731246739246769246773246781246787246793246803246809246811246817246833246839246889246899246907246913246919246923246929246931246937246941246947246971246979247001247007247031247067247069247073247087247099247141247183247193247201247223247229247241247249247259247279247301247309247337247339247343247363247369247381247391247393247409247421247433247439247451247463247501247519247529247531247547247553247579247591247601247603247607247609247613247633247649247651247691247693247697247711247717247729247739247759247769247771247781247799247811247813247829247847247853247873247879247889247901247913247939247943247957247991247993247997247999248021248033248041248051248057248063248071248077248089248099248117248119248137248141248161248167248177248179248189248201248203248231248243248257248267248291248293248299248309248317248323248351248357248371248389248401248407248431248441248447248461248473248477248483248509248533248537248543248569248579248587248593248597248609248621248627248639248641248657248683248701248707248719248723248737248749248753248779248783248789248797248813248821248827248839248851248861248867248869248879248887248891248893248903248909248971248981248987249017249037249059249079249089249097249103249107249127249131249133249143249181249187249199249211249217249229249233249253249257249287249311249317249329249341249367249377249383249397249419249421249427249433249437249439249449249463249497249499249503249517249521249533249539249541249563249583249589249593249607249647249659249671249677249703249721249727249737249749249763249779249797249811249827249833249853249857249859249863249871249881249911249923249943249947249967249971249973249989250007250013250027250031250037250043250049250051250057250073250091250109250123250147250153250169250199250253250259250267250279250301250307250343250361250403250409250423250433250441250451250489250499250501250543250583250619250643250673250681250687250693250703250709250721250727250739250741250751250753250777250787250793250799250807250813250829250837250841250853250867250871250889250919250949250951250963250967250969250979250993251003251033251051251057251059251063251071251081251087251099251117251143251149251159251171251177251179251191251197251201251203251219251221251231251233251257251261251263251287251291251297251323251347251353251359251387251393251417251429251431251437251443251467251473251477251483251491251501251513251519251527251533251539251543251561251567251609251611251621251623251639251653251663251677251701251707251737251761251789251791251809251831251833251843251857251861251879251887251893251897251903251917251939251941251947251969251971251983252001252013252017252029252037252079252101252139252143252151252157252163252169252173252181252193252209252223252233252253252277252283252289252293252313252319252323252341252359252383252391252401252409252419252431252443252449252457252463252481252509252533252541252559252583252589252607252611252617252641252667252691252709252713252727252731252737252761252767252779252817252823252827252829252869252877252881252887252893252899252911252913252919252937252949252971252979252983253003253013253049253063253081253103253109253133253153253157253159253229253243253247253273253307253321253343253349253361253367253369253381253387253417253423253427253433253439253447253469253481253493253501253507253531253537253543253553253567253573253601253607253609253613253633253637253639253651253661253679253681253703253717253733253741253751253763253769253777253787253789253801253811253819253823253853253867253871253879253901253907253909253919253937253949253951253969253987253993253999254003254021254027254039254041254047254053254071254083254119254141254147254161254179254197254207254209254213254249254257254279254281254291254299254329254369254377254383254389254407254413254437254447254461254489254491254519254537254557254593254623254627254647254659254663254699254713254729254731254741254747254753254773254777254783254791254803254827254831254833254857254869254873254879254887254899254911254927254929254941254959254963254971254977254987254993255007255019255023255043255049255053255071255077255083255097255107255121255127255133255137255149255173255179255181255191255193255197255209255217255239255247255251255253255259255313255329255349255361255371255383255413255419255443255457255467255469255473255487255499255503255511255517255523255551255571255587255589255613255617255637255641255649255653255659255667255679255709255713255733255743255757255763255767255803255839255841255847255851255859255869255877255887255907255917255919255923255947255961255971255973255977255989256019256021256031256033256049256057256079256093256117256121256129256133256147256163256169256181256187256189256199256211256219256279256301256307256313256337256349256363256369256391256393256423256441256469256471256483256489256493256499256517256541256561256567256577256579256589256603256609256639256643256651256661256687256699256721256723256757256771256799256801256813256831256873256877256889256901256903256931256939256957256967256981257003257017257053257069257077257093257099257107257123257141257161257171257177257189257219257221257239257249257263257273257281257287257293257297257311257321257339257351257353257371257381257399257401257407257437257443257447257459257473257489257497257501257503257519257539257561257591257611257627257639257657257671257687257689257707257711257713257717257731257783257791257797257837257857257861257863257867257869257879257893257903257921257947257953257981257987257989257993258019258023258031258061258067258101258107258109258113258119258127258131258143258157258161258173258197258211258233258241258253258277258283258299258317258319258329258331258337258353258373258389258403258407258413258421258437258443258449258469258487258491258499258521258527258539258551258563258569258581258607258611258613258617258623258631258637258659258673258677258691258697258703258707258721258733258737258743258763258779258787258803258809258827258847258871258887258917258919258949258959258967258971258977258983258991259001259009259019259033259099259121259123259151259157259159259163259169259177259183259201259211259213259219259229259271259277259309259321259339259379259381259387259397259411259421259429259451259453259459259499259507259517259531259537259547259577259583259603259619259621259627259631259639259643259657259667259681259691259697259717259723259733259751259771259781259783259801259813259823259829259837259841259867259907259933259937259943259949259967259991259993260003260009260011260017260023260047260081260089260111260137260171260179260189260191260201260207260209260213260231260263260269260317260329260339260363260387260399260411260413260417260419260441260453260461260467260483260489260527260539260543260549260551260569260573260581260587260609260629260647260651260671260677260713260717260723260747260753260761260773260791260807260809260849260857260861260863260873260879260893260921260941260951260959260969260983260987260999261011261013261017261031261043261059261061261071261077261089261101261127261167261169261223261229261241261251261271261281261301261323261329261337261347261353261379261389261407261427261431261433261439261451261463261467261509261523261529261557261563261577261581261587261593261601261619261631261637261641261643261673261697261707261713261721261739261757261761261773261787261791261799261823261847261881261887261917261959261971261973261977261983262007262027262049262051262069262079262103262109262111262121262127262133262139262147262151262153262187262193262217262231262237262253262261262271262303262313262321262331262337262349262351262369262387262391262399262411262433262459262469262489262501262511262513262519262541262543262553262567262583262597262621262627262643262649262651262657262681262693262697262709262723262733262739262741262747262781262783262807262819262853262877262883262897262901262909262937262949262957262981263009263023263047263063263071263077263083263089263101263111263119263129263167263171263183263191263201263209263213263227263239263257263267263269263273263287263293263303263323263369263383263387263399263401263411263423263429263437263443263489263491263503263513263519263521263533263537263561263567263573263591263597263609263611263621263647263651263657263677263723263729263737263759263761263803263819263821263827263843263849263863263867263869263881263899263909263911263927263933263941263951263953263957263983264007264013264029264031264053264059264071264083264091264101264113264127264133264137264139264167264169264179264211264221264263264269264283264289264301264323264331264343264349264353264359264371264391264403264437264443264463264487264527264529264553264559264577264581264599264601264619264631264637264643264659264697264731264739264743264749264757264763264769264779264787264791264793264811264827264829264839264871264881264889264893264899264919264931264949264959264961264977264991264997265003265007265021265037265079265091265093265117265123265129265141265151265157265163265169265193265207265231265241265247265249265261265271265273265277265313265333265337265339265381265399265403265417265423265427265451265459265471265483265493265511265513265541265543265547265561265567265571265579265607265613265619265621265703265709265711265717265729265739265747265757265781265787265807265813265819265831265841265847265861265871265873265883265891265921265957265961265987266003266009266023266027266029266047266051266053266059266081266083266089266093266099266111266117266129266137266153266159266177266183266221266239266261266269266281266291266293266297266333266351266353266359266369266381266401266411266417266447266449266477266479266489266491266521266549266587266599266603266633266641266647266663266671266677266681266683266687266689266701266711266719266759266767266797266801266821266837266839266863266867266891266897266899266909266921266927266933266947266953266957266971266977266983266993266999267017267037267049267097267131267133267139267143267167267187267193267199267203267217267227267229267233267259267271267277267299267301267307267317267341267353267373267389267391267401267403267413267419267431267433267439267451267469267479267481267493267497267511267517267521267523267541267551267557267569267581267587267593267601267611267613267629267637267643267647267649267661267667267671267677267679267713267719267721267727267737267739267749267763267781267791267797267803267811267829267833267857267863267877267887267893267899267901267907267913267929267941267959267961268003268013268043268049268063268069268091268123268133268153268171268189268199268207268211268237268253268267268271268283268291268297268343268403268439268459268487268493268501268507268517268519268529268531268537268547268573268607268613268637268643268661268693268721268729268733268747268757268759268771268777268781268783268789268811268813268817268819268823268841268843268861268883268897268909268913268921268927268937268969268973268979268993268997268999269023269029269039269041269057269063269069269089269117269131269141269167269177269179269183269189269201269209269219269221269231269237269251269257269281269317269327269333269341269351269377269383269387269389269393269413269419269429269431269441269461269473269513269519269527269539269543269561269573269579269597269617269623269641269651269663269683269701269713269719269723269741269749269761269779269783269791269851269879269887269891269897269923269939269947269953269981269987270001270029270031270037270059270071270073270097270121270131270133270143270157270163270167270191270209270217270223270229270239270241270269270271270287270299270307270311270323270329270337270343270371270379270407270421270437270443270451270461270463270493270509270527270539270547270551270553270563270577270583270587270593270601270619270631270653270659270667270679270689270701270709270719270737270749270761270763270791270797270799270821270833270841270859270899270913270923270931270937270953270961270967270973271003271013271021271027271043271057271067271079271097271109271127271129271163271169271177271181271211271217271231271241271253271261271273271277271279271289271333271351271357271363271367271393271409271429271451271463271471271483271489271499271501271517271549271553271571271573271597271603271619271637271639271651271657271693271703271723271729271753271769271771271787271807271811271829271841271849271853271861271867271879271897271903271919271927271939271967271969271981272003272009272011272029272039272053272059272093272131272141272171272179272183272189272191272201272203272227272231272249272257272263272267272269272287272299272317272329272333272341272347272351272353272359272369272381272383272399272407272411272417272423272449272453272477272507272533272537272539272549272563272567272581272603272621272651272659272683272693272717272719272737272759272761272771272777272807272809272813272863272879272887272903272911272917272927272933272959272971272981272983272989272999273001273029273043273047273059273061273067273073273083273107273113273127273131273149273157273181273187273193273233273253273269273271273281273283273289273311273313273323273349273359273367273433273457273473273503273517273521273527273551273569273601273613273617273629273641273643273653273697273709273719273727273739273773273787273797273803273821273827273857273881273899273901273913273919273929273941273943273967273971273979273997274007274019274033274061274069274081274093274103274117274121274123274139274147274163274171274177274187274199274201274213274223274237274243274259274271274277274283274301274333274349274357274361274403274423274441274451274453274457274471274489274517274529274579274583274591274609274627274661274667274679274693274697274709274711274723274739274751274777274783274787274811274817274829274831274837274843274847274853274861274867274871274889274909274931274943274951274957274961274973274993275003275027275039275047275053275059275083275087275129275131275147275153275159275161275167275183275201275207275227275251275263275269275299275309275321275323275339275357275371275389275393275399275419275423275447275449275453275459275461275489275491275503275521275531275543275549275573275579275581275591275593275599275623275641275651275657275669275677275699275711275719275729275741275767275773275783275813275827275837275881275897275911275917275921275923275929275939275941275963275969275981275987275999276007276011276019276037276041276043276047276049276079276083276091276113276137276151276173276181276187276191276209276229276239276247276251276257276277276293276319276323276337276343276347276359276371276373276389276401276439276443276449276461276467276487276499276503276517276527276553276557276581276587276589276593276599276623276629276637276671276673276707276721276739276763276767276779276781276817276821276823276827276833276839276847276869276883276901276907276917276919276929276949276953276961276977277003277007277021277051277063277073277087277097277099277157277163277169277177277183277213277217277223277231277247277259277261277273277279277297277301277309277331277363277373277411277421277427277429277483277493277499277513277531277547277549277567277577277579277597277601277603277637277639277643277657277663277687277691277703277741277747277751277757277787277789277793277813277829277847277859277883277889277891277897277903277919277961277993277999278017278029278041278051278063278071278087278111278119278123278143278147278149278177278191278207278209278219278227278233278237278261278269278279278321278329278347278353278363278387278393278413278437278459278479278489278491278497278501278503278543278549278557278561278563278581278591278609278611278617278623278627278639278651278671278687278689278701278717278741278743278753278767278801278807278809278813278819278827278843278849278867278879278881278891278903278909278911278917278947278981279001279007279023279029279047279073279109279119279121279127279131279137279143279173279179279187279203279211279221279269279311279317279329279337279353279397279407279413279421279431279443279451279479279481279511279523279541279551279553279557279571279577279583279593279607279613279619279637279641279649279659279679279689279707279709279731279751279761279767279779279817279823279847279857279863279883279913279919279941279949279967279977279991280001280009280013280031280037280061280069280097280099280103280121280129280139280183280187280199280207280219280223280229280243280249280253280277280297280303280321280327280337280339280351280373280409280411280451280463280487280499280507280513280537280541280547280549280561280583280589280591280597280603280607280613280627280639280673280681280697280699280703280711280717280729280751280759280769280771280811280817280837280843280859280871280879280883280897280909280913280921280927280933280939280949280957280963280967280979280997281023281033281053281063281069281081281117281131281153281159281167281189281191281207281227281233281243281249281251281273281279281291281297281317281321281327281339281353281357281363281381281419281423281429281431281509281527281531281539281549281551281557281563281579281581281609281621281623281627281641281647281651281653281663281669281683281717281719281737281747281761281767281777281783281791281797281803281807281833281837281839281849281857281867281887281893281921281923281927281933281947281959281971281989281993282001282011282019282053282059282071282089282091282097282101282103282127282143282157282167282221282229282239282241282253282281282287282299282307282311282313282349282377282383282389282391282407282409282413282427282439282461282481282487282493282559282563282571282577282589282599282617282661282671282677282679282683282691282697282703282707282713282767282769282773282797282809282827282833282847282851282869282881282889282907282911282913282917282959282973282977282991283001283007283009283027283051283079283093283097283099283111283117283121283133283139283159283163283181283183283193283207283211283267283277283289283303283369283397283403283411283447283463283487283489283501283511283519283541283553283571283573283579283583283601283607283609283631283637283639283669283687283697283721283741283763283769283771283793283799283807283813283817283831283837283859283861283873283909283937283949283957283961283979284003284023284041284051284057284059284083284093284111284117284129284131284149284153284159284161284173284191284201284227284231284233284237284243284261284267284269284293284311284341284357284369284377284387284407284413284423284429284447284467284477284483284489284507284509284521284527284539284551284561284573284587284591284593284623284633284651284657284659284681284689284701284707284723284729284731284737284741284743284747284749284759284777284783284803284807284813284819284831284833284839284857284881284897284899284917284927284957284969284989285007285023285031285049285071285079285091285101285113285119285121285139285151285161285179285191285199285221285227285251285281285283285287285289285301285317285343285377285421285433285451285457285463285469285473285497285517285521285533285539285553285557285559285569285599285611285613285629285631285641285643285661285667285673285697285707285709285721285731285749285757285763285767285773285781285823285827285839285841285871285937285949285953285977285979285983285997286001286009286019286043286049286061286063286073286103286129286163286171286199286243286249286289286301286333286367286369286381286393286397286411286421286427286453286457286459286469286477286483286487286493286499286513286519286541286543286547286553286589286591286609286613286619286633286651286673286687286697286703286711286721286733286751286753286763286771286777286789286801286813286831286859286873286927286973286981286987286999287003287047287057287059287087287093287099287107287117287137287141287149287159287167287173287179287191287219287233287237287239287251287257287269287279287281287291287297287321287327287333287341287347287383287387287393287437287449287491287501287503287537287549287557287579287597287611287629287669287671287681287689287701287731287747287783287789287801287813287821287849287851287857287863287867287873287887287921287933287939287977288007288023288049288053288061288077288089288109288137288179288181288191288199288203288209288227288241288247288257288283288293288307288313288317288349288359288361288383288389288403288413288427288433288461288467288481288493288499288527288529288539288551288559288571288577288583288647288649288653288661288679288683288689288697288731288733288751288767288773288803288817288823288833288839288851288853288877288907288913288929288931288947288973288979288989288991288997289001289019289021289031289033289039289049289063289067289099289103289109289111289127289129289139289141289151289169289171289181289189289193289213289241289243289249289253289273289283289291289297289309289319289343289349289361289369289381289397289417289423289439289453289463289469289477289489289511289543289559289573289577289589289603289607289637289643289657289669289717289721289727289733289741289759289763289771289789289837289841289843289847289853289859289871289889289897289937289951289957289967289973289987289999290011290021290023290027290033290039290041290047290057290083290107290113290119290137290141290161290183290189290201290209290219290233290243290249290317290327290347290351290359290369290383290393290399290419290429290441290443290447290471290473290489290497290509290527290531290533290539290557290593290597290611290617290621290623290627290657290659290663290669290671290677290701290707290711290737290761290767290791290803290821290827290837290839290861290869290879290897290923290959290963290971290987290993290999291007291013291037291041291043291077291089291101291103291107291113291143291167291169291173291191291199291209291217291253291257291271291287291293291299291331291337291349291359291367291371291373291377291419291437291439291443291457291481291491291503291509291521291539291547291559291563291569291619291647291649291661291677291689291691291701291721291727291743291751291779291791291817291829291833291853291857291869291877291887291899291901291923291971291979291983291997292021292027292037292057292069292079292081292091292093292133292141292147292157292181292183292223292231292241292249292267292283292301292309292319292343292351292363292367292381292393292427292441292459292469292471292477292483292489292493292517292531292541292549292561292573292577292601292627292631292661292667292673292679292693292703292709292711292717292727292753292759292777292793292801292807292819292837292841292849292867292879292909292921292933292969292973292979292993293021293071293081293087293093293099293107293123293129293147293149293173293177293179293201293207293213293221293257293261293263293269293311293329293339293351293357293399293413293431293441293453293459293467293473293483293507293543293599293603293617293621293633293639293651293659293677293681293701293717293723293729293749293767293773293791293803293827293831293861293863293893293899293941293957293983293989293999294001294013294023294029294043294053294059294067294103294127294131294149294157294167294169294179294181294199294211294223294227294241294247294251294269294277294289294293294311294313294317294319294337294341294347294353294383294391294397294403294431294439294461294467294479294499294509294523294529294551294563294629294641294647294649294659294673294703294731294751294757294761294773294781294787294793294799294803294809294821294829294859294869294887294893294911294919294923294947294949294953294979294989294991294997295007295033295037295039295049295073295079295081295111295123295129295153295187295199295201295219295237295247295259295271295277295283295291295313295319295333295357295363295387295411295417295429295433295439295441295459295513295517295541295553295567295571295591295601295663295693295699295703295727295751295759295769295777295787295819295831295837295843295847295853295861295871295873295877295879295901295903295909295937295943295949295951295961295973295993296011296017296027296041296047296071296083296099296117296129296137296159296183296201296213296221296237296243296249296251296269296273296279296287296299296347296353296363296369296377296437296441296473296477296479296489296503296507296509296519296551296557296561296563296579296581296587296591296627296651296663296669296683296687296693296713296719296729296731296741296749296753296767296771296773296797296801296819296827296831296833296843296909296911296921296929296941296969296971296981296983296987297019297023297049297061297067297079297083297097297113297133297151297161297169297191297233297247297251297257297263297289297317297359297371297377297391297397297403297421297439297457297467297469297481297487297503297509297523297533297581297589297601297607297613297617297623297629297641297659297683297691297707297719297727297757297779297793297797297809297811297833297841297853297881297889297893297907297911297931297953297967297971297989297991298013298021298031298043298049298063298087298093298099298153298157298159298169298171298187298201298211298213298223298237298247298261298283298303298307298327298339298343298349298369298373298399298409298411298427298451298477298483298513298559298579298583298589298601298607298621298631298651298667298679298681298687298691298693298709298723298733298757298759298777298799298801298817298819298841298847298853298861298897298937298943298993298999299011299017299027299029299053299059299063299087299099299107299113299137299147299171299179299191299197299213299239299261299281299287299311299317299329299333299357299359299363299371299389299393299401299417299419299447299471299473299477299479299501299513299521299527299539299567299569299603299617299623299653299671299681299683299699299701299711299723299731299743299749299771299777299807299843299857299861299881299891299903299909299933299941299951299969299977299983299993300007300017300023300043300073300089300109300119300137300149300151300163300187300191300193300221300229300233300239300247300277300299300301300317300319300323300331300343300347300367300397300413300427300431300439300463300481300491300493300497300499300511300557300569300581300583300589300593300623300631300647300649300661300667300673300683300691300719300721300733300739300743300749300757300761300779300787300799300809300821300823300851300857300869300877300889300893300929300931300953300961300967300973300977300997301013301027301039301051301057301073301079301123301127301141301153301159301177301181301183301211301219301237301241301243301247301267301303301319301331301333301349301361301363301381301403301409301423301429301447301459301463301471301487301489301493301501301531301577301579301583301591301601301619301627301643301649301657301669301673301681301703301711301747301751301753301759301789301793301813301831301841301843301867301877301897301901301907301913301927301933301943301949301979301991301993301997301999302009302053302111302123302143302167302171302173302189302191302213302221302227302261302273302279302287302297302299302317302329302399302411302417302429302443302459302483302507302513302551302563302567302573302579302581302587302593302597302609302629302647302663302681302711302723302747302759302767302779302791302801302831302833302837302843302851302857302873302891302903302909302921302927302941302959302969302971302977302983302989302999303007303011303013303019303029303049303053303073303089303091303097303119303139303143303151303157303187303217303257303271303283303287303293303299303307303313303323303337303341303361303367303371303377303379303389303409303421303431303463303469303473303491303493303497303529303539303547303551303553303571303581303587303593303613303617303619303643303647303649303679303683303689303691303703303713303727303731303749303767303781303803303817303827303839303859303871303889303907303917303931303937303959303983303997304009304013304021304033304039304049304063304067304069304081304091304099304127304151304153304163304169304193304211304217304223304253304259304279304301304303304331304349304357304363304373304391304393304411304417304429304433304439304457304459304477304481304489304501304511304517304523304537304541304553304559304561304597304609304631304643304651304663304687304709304723304729304739304751304757304763304771304781304789304807304813304831304847304849304867304879304883304897304901304903304907304933304937304943304949304961304979304981305017305021305023305029305033305047305069305093305101305111305113305119305131305143305147305209305219305231305237305243305267305281305297305329305339305351305353305363305369305377305401305407305411305413305419305423305441305449305471305477305479305483305489305497305521305533305551305563305581305593305597305603305611305621305633305639305663305717305719305741305743305749305759305761305771305783305803305821305839305849305857305861305867305873305917305927305933305947305971305999306011306023306029306041306049306083306091306121306133306139306149306157306167306169306191306193306209306239306247306253306259306263306301306329306331306347306349306359306367306377306389306407306419306421306431306437306457306463306473306479306491306503306511306517306529306533306541306563306577306587306589306643306653306661306689306701306703306707306727306739306749306763306781306809306821306827306829306847306853306857306871306877306883306893306899306913306919306941306947306949306953306991307009307019307031307033307067307079307091307093307103307121307129307147307163307169307171307187307189307201307243307253307259307261307267307273307277307283307289307301307337307339307361307367307381307397307399307409307423307451307471307481307511307523307529307537307543307577307583307589307609307627307631307633307639307651307669307687307691307693307711307733307759307817307823307831307843307859307871307873307891307903307919307939307969308003308017308027308041308051308081308093308101308107308117308129308137308141308149308153308213308219308249308263308291308293308303308309308311308317308323308327308333308359308383308411308423308437308447308467308489308491308501308507308509308519308521308527308537308551308569308573308587308597308621308639308641308663308681308701308713308723308761308773308801308809308813308827308849308851308857308887308899308923308927308929308933308939308951308989308999309007309011309013309019309031309037309059309079309083309091309107309109309121309131309137309157309167309173309193309223309241309251309259309269309271309277309289309293309311309313309317309359309367309371309391309403309433309437309457309461309469309479309481309493309503309521309523309539309541309559309571309577309583309599309623309629309637309667309671309677309707309713309731309737309769309779309781309797309811309823309851309853309857309877309899309929309931309937309977309989310019310021310027310043310049310081310087310091310111310117310127310129310169310181310187310223310229310231310237310243310273310283310291310313310333310357310361310363310379310397310423310433310439310447310459310463310481310489310501310507310511310547310553310559310567310571310577310591310627310643310663310693310697310711310721310727310729310733310741310747310771310781310789310801310819310823310829310831310861310867310883310889310901310927310931310949310969310987310997311009311021311027311033311041311099311111311123311137311153311173311177311183311189311197311203311237311279311291311293311299311303311323311329311341311347311359311371311393311407311419311447311453311473311533311537311539311551311557311561311567311569311603311609311653311659311677311681311683311687311711311713311737311743311747311749311791311803311807311821311827311867311869311881311897311951311957311963311981312007312023312029312031312043312047312071312073312083312089312101312107312121312161312197312199312203312209312211312217312229312233312241312251312253312269312281312283312289312311312313312331312343312349312353312371312383312397312401312407312413312427312451312469312509312517312527312551312553312563312581312583312589312601312617312619312623312643312673312677312679312701312703312709312727312737312743312757312773312779312799312839312841312857312863312887312899312929312931312937312941312943312967312971312979312989313003313009313031313037313081313087313109313127313129313133313147313151313153313163313207313211313219313241313249313267313273313289313297313301313307313321313331313333313343313351313373313381313387313399313409313471313477313507313517313543313549313553313561313567313571313583313589313597313603313613313619313637313639313661313669313679313699313711313717313721313727313739313741313763313777313783313829313849313853313879313883313889313897313909313921313931313933313949313961313969313979313981313987313991313993313997314003314021314059314063314077314107314113314117314129314137314159314161314173314189314213314219314227314233314239314243314257314261314263314267314299314329314339314351314357314359314399314401314407314423314441314453314467314491314497314513314527314543314549314569314581314591314597314599314603314623314627314641314651314693314707314711314719314723314747314761314771314777314779314807314813314827314851314879314903314917314927314933314953314957314983314989315011315013315037315047315059315067315083315097315103315109315127315179315181315193315199315223315247315251315257315269315281315313315349315361315373315377315389315407315409315421315437315449315451315461315467315481315493315517315521315527315529315547315551315559315569315589315593315599315613315617315631315643315671315677315691315697315701315703315739315743315751315779315803315811315829315851315857315881315883315893315899315907315937315949315961315967315977316003316031316033316037316051316067316073316087316097316109316133316139316153316177316189316193316201316213316219316223316241316243316259316271316291316297316301316321316339316343316363316373316391316403316423316429316439316453316469316471316493316499316501316507316531316567316571316577316583316621316633316637316649316661316663316681316691316697316699316703316717316753316759316769316777316783316793316801316817316819316847316853316859316861316879316891316903316907316919316937316951316957316961316991317003317011317021317029317047317063317071317077317087317089317123317159317171317179317189317197317209317227317257317263317267317269317279317321317323317327317333317351317353317363317371317399317411317419317431317437317453317459317483317489317491317503317539317557317563317587317591317593317599317609317617317621317651317663317671317693317701317711317717317729317731317741317743317771317773317777317783317789317797317827317831317839317857317887317903317921317923317957317959317963317969317971317983317987318001318007318023318077318103318107318127318137318161318173318179318181318191318203318209318211318229318233318247318259318271318281318287318289318299318301318313318319318323318337318347318349318377318403318407318419318431318443318457318467318473318503318523318557318559318569318581318589318601318629318641318653318671318677318679318683318691318701318713318737318743318749318751318781318793318809318811318817318823318833318841318863318881318883318889318907318911318917318919318949318979319001319027319031319037319049319057319061319069319093319097319117319127319129319133319147319159319169319183319201319211319223319237319259319279319289319313319321319327319339319343319351319357319387319391319399319411319427319433319439319441319453319469319477319483319489319499319511319519319541319547319567319577319589319591319601319607319639319673319679319681319687319691319699319727319729319733319747319757319763319811319817319819319829319831319849319883319897319901319919319927319931319937319967319973319981319993320009320011320027320039320041320053320057320063320081320083320101320107320113320119320141320143320149320153320179320209320213320219320237320239320267320269320273320291320293320303320317320329320339320377320387320389320401320417320431320449320471320477320483320513320521320533320539320561320563320591320609320611320627320647320657320659320669320687320693320699320713320741320759320767320791320821320833320839320843320851320861320867320899320911320923320927320939320941320953321007321017321031321037321047321053321073321077321091321109321143321163321169321187321193321199321203321221321227321239321247321289321301321311321313321319321323321329321331321341321359321367321371321383321397321403321413321427321443321449321467321469321509321547321553321569321571321577321593321611321617321619321631321647321661321679321707321709321721321733321743321751321757321779321799321817321821321823321829321833321847321851321889321901321911321947321949321961321983321991322001322009322013322037322039322051322057322067322073322079322093322097322109322111322139322169322171322193322213322229322237322243322247322249322261322271322319322327322339322349322351322397322403322409322417322429322433322459322463322501322513322519322523322537322549322559322571322573322583322589322591322607322613322627322631322633322649322669322709322727322747322757322769322771322781322783322807322849322859322871322877322891322901322919322921322939322951322963322969322997322999323003323009323027323053323077323083323087323093323101323123323131323137323149323201323207323233323243323249323251323273323333323339323341323359323369323371323377323381323383323413323419323441323443323467323471323473323507323509323537323549323567323579323581323591323597323599323623323641323647323651323699323707323711323717323759323767323789323797323801323803323819323837323879323899323903323923323927323933323951323957323987324011324031324053324067324073324089324097324101324113324119324131324143324151324161324179324199324209324211324217324223324239324251324293324299324301324319324329324341324361324391324397324403324419324427324431324437324439324449324451324469324473324491324497324503324517324523324529324557324587324589324593324617324619324637324641324647324661324673324689324697324707324733324743324757324763324773324781324791324799324809324811324839324847324869324871324889324893324901324931324941324949324953324977324979324983324991324997325001325009325019325021325027325043325051325063325079325081325093325133325153325163325181325187325189325201325217325219325229325231325249325271325301325307325309325319325333325343325349325379325411325421325439325447325453325459325463325477325487325513325517325537325541325543325571325597325607325627325631325643325667325673325681325691325693325697325709325723325729325747325751325753325769325777325781325783325807325813325849325861325877325883325889325891325901325921325939325943325951325957325987325993325999326023326057326063326083326087326099326101326113326119326141326143326147326149326153326159326171326189326203326219326251326257326309326323326351326353326369326437326441326449326467326479326497326503326537326539326549326561326563326567326581326593326597326609326611326617326633326657326659326663326681326687326693326701326707326737326741326773326779326831326863326867326869326873326881326903326923326939326941326947326951326983326993326999327001327007327011327017327023327059327071327079327127327133327163327179327193327203327209327211327247327251327263327277327289327307327311327317327319327331327337327343327347327401327407327409327419327421327433327443327463327469327473327479327491327493327499327511327517327529327553327557327559327571327581327583327599327619327629327647327661327667327673327689327707327721327737327739327757327779327797327799327809327823327827327829327839327851327853327869327871327881327889327917327923327941327953327967327979327983328007328037328043328051328061328063328067328093328103328109328121328127328129328171328177328213328243328249328271328277328283328291328303328327328331328333328343328357328373328379328381328397328411328421328429328439328481328511328513328519328543328579328589328591328619328621328633328637328639328651328667328687328709328721328753328777328781328787328789328813328829328837328847328849328883328891328897328901328919328921328931328961328981329009329027329053329059329081329083329089329101329111329123329143329167329177329191329201329207329209329233329243329257329267329269329281329293329297329299329309329317329321329333329347329387329393329401329419329431329471329473329489329503329519329533329551329557329587329591329597329603329617329627329629329639329657329663329671329677329683329687329711329717329723329729329761329773329779329789329801329803329863329867329873329891329899329941329947329951329957329969329977329993329999330017330019330037330041330047330053330061330067330097330103330131330133330139330149330167330199330203330217330227330229330233330241330247330271330287330289330311330313330329330331330347330359330383330389330409330413330427330431330433330439330469330509330557330563330569330587330607330611330623330641330643330653330661330679330683330689330697330703330719330721330731330749330767330787330791330793330821330823330839330853330857330859330877330887330899330907330917330943330983330997331013331027331031331043331063331081331099331127331141331147331153331159331171331183331207331213331217331231331241331249331259331277331283331301331307331319331333331337331339331349331367331369331391331399331423331447331451331489331501331511331519331523331537331543331547331549331553331577331579331589331603331609331613331651331663331691331693331697331711331739331753331769331777331781331801331819331841331843331871331883331889331897331907331909331921331937331943331957331967331973331997331999332009332011332039332053332069332081332099332113332117332147332159332161332179332183332191332201332203332207332219332221332251332263332273332287332303332309332317332393332399332411332417332441332447332461332467332471332473332477332489332509332513332561332567332569332573332611332617332623332641332687332699332711332729332743332749332767332779332791332803332837332851332873332881332887332903332921332933332947332951332987332989332993333019333023333029333031333041333049333071333097333101333103333107333131333139333161333187333197333209333227333233333253333269333271333283333287333299333323333331333337333341333349333367333383333397333419333427333433333439333449333451333457333479333491333493333497333503333517333533333539333563333581333589333623333631333647333667333673333679333691333701333713333719333721333737333757333769333779333787333791333793333803333821333857333871333911333923333929333941333959333973333989333997334021334031334043334049334057334069334093334099334127334133334157334171334177334183334189334199334231334247334261334289334297334319334331334333334349334363334379334387334393334403334421334423334427334429334447334487334493334507334511334513334541334547334549334561334603334619334637334643334651334661334667334681334693334699334717334721334727334751334753334759334771334777334783334787334793334843334861334877334889334891334897334931334963334973334987334991334993335009335021335029335033335047335051335057335077335081335089335107335113335117335123335131335149335161335171335173335207335213335221335249335261335273335281335299335323335341335347335381335383335411335417335429335449335453335459335473335477335507335519335527335539335557335567335579335591335609335633335641335653335663335669335681335689335693335719335729335743335747335771335807335809335813335821335833335843335857335879335893335897335917335941335953335957335999336029336031336041336059336079336101336103336109336113336121336143336151336157336163336181336199336211336221336223336227336239336247336251336253336263336307336317336353336361336373336397336403336419336437336463336491336499336503336521336527336529336533336551336563336571336577336587336593336599336613336631336643336649336653336667336671336683336689336703336727336757336761336767336769336773336793336799336803336823336827336829336857336863336871336887336899336901336911336929336961336977336983336989336997337013337021337031337039337049337069337081337091337097337121337153337189337201337213337217337219337223337261337277337279337283337291337301337313337327337339337343337349337361337367337369337397337411337427337453337457337487337489337511337517337529337537337541337543337583337607337609337627337633337639337651337661337669337681337691337697337721337741337751337759337781337793337817337837337853337859337861337867337871337873337891337901337903337907337919337949337957337969337973337999338017338027338033338119338137338141338153338159338161338167338171338183338197338203338207338213338231338237338251338263338267338269338279338287338293338297338309338321338323338339338341338347338369338383338389338407338411338413338423338431338449338461338473338477338497338531338543338563338567338573338579338581338609338659338669338683338687338707338717338731338747338753338761338773338777338791338803338839338851338857338867338893338909338927338959338993338999339023339049339067339071339091339103339107339121339127339137339139339151339161339173339187339211339223339239339247339257339263339289339307339323339331339341339373339389339413339433339467339491339517339527339539339557339583339589339601339613339617339631339637339649339653339659339671339673339679339707339727339749339751339761339769339799339811339817339821339827339839339841339863339887339907339943339959339991340007340027340031340037340049340057340061340063340073340079340103340111340117340121340127340129340169340183340201340211340237340261340267340283340297340321340337340339340369340381340387340393340397340409340429340447340451340453340477340481340519340541340559340573340577340579340583340591340601340619340633340643340649340657340661340687340693340709340723340757340777340787340789340793340801340811340819340849340859340877340889340897340903340909340913340919340927340931340933340937340939340957340979340999341017341027341041341057341059341063341083341087341123341141341171341179341191341203341219341227341233341269341273341281341287341293341303341311341321341323341333341339341347341357341423341443341447341459341461341477341491341501341507341521341543341557341569341587341597341603341617341623341629341641341647341659341681341687341701341729341743341749341771341773341777341813341821341827341839341851341863341879341911341927341947341951341953341959341963341983341993342037342047342049342059342061342071342073342077342101342107342131342143342179342187342191342197342203342211342233342239342241342257342281342283342299342319342337342341342343342347342359342371342373342379342389342413342421342449342451342467342469342481342497342521342527342547342553342569342593342599342607342647342653342659342673342679342691342697342733342757342761342791342799342803342821342833342841342847342863342869342871342889342899342929342949342971342989343019343037343051343061343073343081343087343127343141343153343163343169343177343193343199343219343237343243343253343261343267343289343303343307343309343313343327343333343337343373343379343381343391343393343411343423343433343481343489343517343529343531343543343547343559343561343579343583343589343591343601343627343631343639343649343661343667343687343709343727343769343771343787343799343801343813343817343823343829343831343891343897343901343913343933343939343943343951343963343997344017344021344039344053344083344111344117344153344161344167344171344173344177344189344207344209344213344221344231344237344243344249344251344257344263344269344273344291344293344321344327344347344353344363344371344417344423344429344453344479344483344497344543344567344587344599344611344621344629344639344653344671344681344683344693344719344749344753344759344791344797344801344807344819344821344843344857344863344873344887344893344909344917344921344941344957344959344963344969344987345001345011345017345019345041345047345067345089345109345133345139345143345181345193345221345227345229345259345263345271345307345311345329345379345413345431345451345461345463345473345479345487345511345517345533345547345551345571345577345581345599345601345607345637345643345647345659345673345679345689345701345707345727345731345733345739345749345757345769345773345791345803345811345817345823345853345869345881345887345889345907345923345937345953345979345997346013346039346043346051346079346091346097346111346117346133346139346141346147346169346187346201346207346217346223346259346261346277346303346309346321346331346337346349346361346369346373346391346393346397346399346417346421346429346433346439346441346447346453346469346501346529346543346547346553346559346561346589346601346607346627346639346649346651346657346667346669346699346711346721346739346751346763346793346831346849346867346873346877346891346903346933346939346943346961346963347003347033347041347051347057347059347063347069347071347099347129347131347141347143347161347167347173347177347183347197347201347209347227347233347239347251347257347287347297347299347317347329347341347359347401347411347437347443347489347509347513347519347533347539347561347563347579347587347591347609347621347629347651347671347707347717347729347731347747347759347771347773347779347801347813347821347849347873347887347891347899347929347933347951347957347959347969347981347983347987347989347993348001348011348017348031348043348053348077348083348097348149348163348181348191348209348217348221348239348241348247348253348259348269348287348307348323348353348367348389348401348407348419348421348431348433348437348443348451348457348461348463348487348527348547348553348559348563348571348583348587348617348629348637348643348661348671348709348731348739348757348763348769348779348811348827348833348839348851348883348889348911348917348919348923348937348949348989348991349007349039349043349051349079349081349093349099349109349121349133349171349177349183349187349199349207349211349241349291349303349313349331349337349343349357349369349373349379349381349387349397349399349403349409349411349423349471349477349483349493349499349507349519349529349553349567349579349589349603349637349663349667349697349709349717349729349753349759349787349793349801349813349819349829349831349837349841349849349871349903349907349913349919349927349931349933349939349949349963349967349981350003350029350033350039350087350089350093350107350111350137350159350179350191350213350219350237350249350257350281350293350347350351350377350381350411350423350429350431350437350443350447350453350459350503350521350549350561350563350587350593350617350621350629350657350663350677350699350711350719350729350731350737350741350747350767350771350783350789350803350809350843350851350869350881350887350891350899350941350947350963350971350981350983350989351011351023351031351037351041351047351053351059351061351077351079351097351121351133351151351157351179351217351223351229351257351259351269351287351289351293351301351311351341351343351347351359351361351383351391351397351401351413351427351437351457351469351479351497351503351517351529351551351563351587351599351643351653351661351667351691351707351727351731351733351749351751351763351773351779351797351803351811351829351847351851351859351863351887351913351919351929351931351959351971351991352007352021352043352049352057352069352073352081352097352109352111352123352133352181352193352201352217352229352237352249352267352271352273352301352309352327352333352349352357352361352367352369352381352399352403352409352411352421352423352441352459352463352481352483352489352493352511352523352543352549352579352589352601352607352619352633352637352661352691352711352739352741352753352757352771352813352817352819352831352837352841352853352867352883352907352909352931352939352949352951352973352991353011353021353047353053353057353069353081353099353117353123353137353147353149353161353173353179353201353203353237353263353293353317353321353329353333353341353359353389353401353411353429353443353453353459353471353473353489353501353527353531353557353567353603353611353621353627353629353641353653353657353677353681353687353699353711353737353747353767353777353783353797353807353813353819353833353867353869353879353891353897353911353917353921353929353939353963354001354007354017354023354031354037354041354043354047354073354091354097354121354139354143354149354163354169354181354209354247354251354253354257354259354271354301354307354313354317354323354329354337354353354371354373354377354383354391354401354421354439354443354451354461354463354469354479354533354539354551354553354581354587354619354643354647354661354667354677354689354701354703354727354737354743354751354763354779354791354799354829354833354839354847354869354877354881354883354911354953354961354971354973354979354983354997355007355009355027355031355037355039355049355057355063355073355087355093355099355109355111355127355139355171355193355211355261355297355307355321355331355339355343355361355363355379355417355427355441355457355463355483355499355501355507355513355517355519355529355541355549355559355571355573355591355609355633355643355651355669355679355697355717355721355723355753355763355777355783355799355811355819355841355847355853355867355891355909355913355933355937355939355951355967355969356023356039356077356093356101356113356123356129356137356141356143356171356173356197356219356243356261356263356287356299356311356327356333356351356387356399356441356443356449356453356467356479356501356509356533356549356561356563356567356579356591356621356647356663356693356701356731356737356749356761356803356819356821356831356869356887356893356927356929356933356947356959356969356977356981356989356999357031357047357073357079357083357103357107357109357131357139357169357179357197357199357211357229357239357241357263357271357281357283357293357319357347357349357353357359357377357389357421357431357437357473357503357509357517357551357559357563357569357571357583357587357593357611357613357619357649357653357659357661357667357671357677357683357689357703357727357733357737357739357767357779357781357787357793357809357817357823357829357839357859357883357913357967357977357983357989357997358031358051358069358073358079358103358109358153358157358159358181358201358213358219358223358229358243358273358277358279358289358291358297358301358313358327358331358349358373358417358427358429358441358447358459358471358483358487358499358531358541358571358573358591358597358601358607358613358637358667358669358681358691358697358703358711358723358727358733358747358753358769358783358793358811358829358847358859358861358867358877358879358901358903358907358909358931358951358973358979358987358993358999359003359017359027359041359063359069359101359111359129359137359143359147359153359167359171359207359209359231359243359263359267359279359291359297359299359311359323359327359353359357359377359389359407359417359419359441359449359477359479359483359501359509359539359549359561359563359581359587359599359621359633359641359657359663359701359713359719359731359747359753359761359767359783359837359851359869359897359911359929359981359987360007360023360037360049360053360071360089360091360163360167360169360181360187360193360197360223360229360233360257360271360277360287360289360293360307360317360323360337360391360407360421360439360457360461360497360509360511360541360551360589360593360611360637360649360653360749360769360779360781360803360817360821360823360827360851360853360863360869360901360907360947360949360953360959360973360977360979360989361001361003361013361033361069361091361093361111361159361183361211361213361217361219361223361237361241361271361279361313361321361327361337361349361351361357361363361373361409361411361421361433361441361447361451361463361469361481361499361507361511361523361531361541361549361561361577361637361643361649361651361663361679361687361723361727361747361763361769361787361789361793361799361807361843361871361873361877361901361903361909361919361927361943361961361967361973361979361993362003362027362051362053362059362069362081362093362099362107362137362143362147362161362177362191362203362213362221362233362237362281362291362293362303362309362333362339362347362353362357362363362371362377362381362393362407362419362429362431362443362449362459362473362521362561362569362581362599362629362633362657362693362707362717362723362741362743362749362753362759362801362851362863362867362897362903362911362927362941362951362953362969362977362983362987363017363019363037363043363047363059363061363067363119363149363151363157363161363173363179363199363211363217363257363269363271363277363313363317363329363343363359363361363367363371363373363379363397363401363403363431363437363439363463363481363491363497363523363529363533363541363551363557363563363569363577363581363589363611363619363659363677363683363691363719363731363751363757363761363767363773363799363809363829363833363841363871363887363889363901363911363917363941363947363949363959363967363977363989364027364031364069364073364079364103364127364129364141364171364183364187364193364213364223364241364267364271364289364291364303364313364321364333364337364349364373364379364393364411364417364423364433364447364451364459364471364499364513364523364537364541364543364571364583364601364607364621364627364643364657364669364687364691364699364717364739364747364751364753364759364801364829364853364873364879364883364891364909364919364921364937364943364961364979364993364997365003365017365021365039365063365069365089365107365119365129365137365147365159365173365179365201365213365231365249365251365257365291365293365297365303365327365333365357365369365377365411365413365419365423365441365461365467365471365473365479365489365507365509365513365527365531365537365557365567365569365587365591365611365627365639365641365669365683365689365699365747365749365759365773365779365791365797365809365837365839365851365903365929365933365941365969365983366001366013366019366029366031366053366077366097366103366127366133366139366161366167366169366173366181366193366199366211366217366221366227366239366259366269366277366287366293366307366313366329366341366343366347366383366397366409366419366433366437366439366461366463366467366479366497366511366517366521366547366593366599366607366631366677366683366697366701366703366713366721366727366733366787366791366811366829366841366851366853366859366869366881366889366901366907366917366923366941366953366967366973366983366997367001367007367019367021367027367033367049367069367097367121367123367127367139367163367181367189367201367207367219367229367231367243367259367261367273367277367307367309367313367321367357367369367391367397367427367453367457367469367501367519367531367541367547367559367561367573367597367603367613367621367637367649367651367663367673367687367699367711367721367733367739367751367771367777367781367789367819367823367831367841367849367853367867367879367883367889367909367949367957368021368029368047368059368077368083368089368099368107368111368117368129368141368149368153368171368189368197368227368231368233368243368273368279368287368293368323368327368359368363368369368399368411368443368447368453368471368491368507368513368521368531368539368551368579368593368597368609368633368647368651368653368689368717368729368737368743368773368783368789368791368801368803368833368857368873368881368899368911368939368947368957369007369013369023369029369067369071369077369079369097369119369133369137369143369169369181369191369197369211369247369253369263369269369283369293369301369319369331369353369361369407369409369419369469369487369491369539369553369557369581369637369647369659369661369673369703369709369731369739369751369791369793369821369827369829369833369841369851369877369893369913369917369947369959369961369979369983369991369997370003370009370021370033370057370061370067370081370091370103370121370133370147370159370169370193370199370207370213370217370241370247370261370373370387370399370411370421370423370427370439370441370451370463370471370477370483370493370511370529370537370547370561370571370597370603370609370613370619370631370661370663370673370679370687370693370723370759370793370801370813370837370871370873370879370883370891370897370919370949371027371029371057371069371071371083371087371099371131371141371143371153371177371179371191371213371227371233371237371249371251371257371281371291371299371303371311371321371333371339371341371353371359371383371387371389371417371447371453371471371479371491371509371513371549371561371573371587371617371627371633371639371663371669371699371719371737371779371797371831371837371843371851371857371869371873371897371927371929371939371941371951371957371971371981371999372013372023372037372049372059372061372067372107372121372131372137372149372167372173372179372223372241372263372269372271372277372289372293372299372311372313372353372367372371372377372397372401372409372413372443372451372461372473372481372497372511372523372539372607372611372613372629372637372653372661372667372677372689372707372709372719372733372739372751372763372769372773372797372803372809372817372829372833372839372847372859372871372877372881372901372917372941372943372971372973372979373003373007373019373049373063373073373091373127373151373157373171373181373183373187373193373199373207373211373213373229373231373273373291373297373301373327373339373343373349373357373361373363373379373393373447373453373459373463373487373489373501373517373553373561373567373613373621373631373649373657373661373669373693373717373721373753373757373777373783373823373837373859373861373903373909373937373943373951373963373969373981373987373999374009374029374039374041374047374063374069374083374089374093374111374117374123374137374149374159374173374177374189374203374219374239374287374291374293374299374317374321374333374347374351374359374389374399374441374443374447374461374483374501374531374537374557374587374603374639374641374653374669374677374681374683374687374701374713374719374729374741374753374761374771374783374789374797374807374819374837374839374849374879374887374893374903374909374929374939374953374977374981374987374989374993375017375019375029375043375049375059375083375091375097375101375103375113375119375121375127375149375157375163375169375203375209375223375227375233375247375251375253375257375259375281375283375311375341375359375367375371375373375391375407375413375443375449375451375457375467375481375509375511375523375527375533375553375559375563375569375593375607375623375631375643375647375667375673375703375707375709375743375757375761375773375779375787375799375833375841375857375899375901375923375931375967375971375979375983375997376001376003376009376021376039376049376063376081376097376099376127376133376147376153376171376183376199376231376237376241376283376291376297376307376351376373376393376399376417376463376469376471376477376483376501376511376529376531376547376573376577376583376589376603376609376627376631376633376639376657376679376687376699376709376721376729376757376759376769376787376793376801376807376811376819376823376837376841376847376853376889376891376897376921376927376931376933376949376963376969377011377021377051377059377071377099377123377129377137377147377171377173377183377197377219377231377257377263377287377291377297377327377329377339377347377353377369377371377387377393377459377471377477377491377513377521377527377537377543377557377561377563377581377593377599377617377623377633377653377681377687377711377717377737377749377761377771377779377789377801377809377827377831377843377851377873377887377911377963377981377999378011378019378023378041378071378083378089378101378127378137378149378151378163378167378179378193378223378229378239378241378253378269378277378283378289378317378353378361378379378401378407378439378449378463378467378493378503378509378523378533378551378559378569378571378583378593378601378619378629378661378667378671378683378691378713378733378739378757378761378779378793378809378817378821378823378869378883378893378901378919378929378941378949378953378967378977378997379007379009379013379033379039379073379081379087379097379103379123379133379147379157379163379177379187379189379199379207379273379277379283379289379307379319379333379343379369379387379391379397379399379417379433379439379441379451379459379499379501379513379531379541379549379571379573379579379597379607379633379649379663379667379679379681379693379699379703379721379723379727379751379777379787379811379817379837379849379853379859379877379889379903379909379913379927379931379963379979379993379997379999380041380047380059380071380117380129380131380141380147380179380189380197380201380203380207380231380251380267380269380287380291380299380309380311380327380329380333380363380377380383380417380423380441380447380453380459380461380483380503380533380557380563380591380621380623380629380641380651380657380707380713380729380753380777380797380803380819380837380839380843380867380869380879380881380909380917380929380951380957380971380977380983381001381011381019381037381047381061381071381077381097381103381167381169381181381209381221381223381233381239381253381287381289381301381319381323381343381347381371381373381377381383381389381401381413381419381439381443381461381467381481381487381509381523381527381529381533381541381559381569381607381629381631381637381659381673381697381707381713381737381739381749381757381761381791381793381817381841381853381859381911381917381937381943381949381977381989381991382001382003382021382037382061382069382073382087382103382117382163382171382189382229382231382241382253382267382271382303382331382351382357382363382373382391382427382429382457382463382493382507382511382519382541382549382553382567382579382583382589382601382621382631382643382649382661382663382693382703382709382727382729382747382751382763382769382777382801382807382813382843382847382861382867382871382873382883382919382933382939382961382979382999383011383023383029383041383051383069383077383081383083383099383101383107383113383143383147383153383171383179383219383221383261383267383281383291383297383303383321383347383371383393383399383417383419383429383459383483383489383519383521383527383533383549383557383573383587383609383611383623383627383633383651383657383659383681383683383693383723383729383753383759383767383777383791383797383807383813383821383833383837383839383869383891383909383917383923383941383951383963383969383983383987384001384017384029384049384061384067384079384089384107384113384133384143384151384157384173384187384193384203384227384247384253384257384259384277384287384289384299384301384317384331384343384359384367384383384403384407384437384469384473384479384481384487384497384509384533384547384577384581384589384599384611384619384623384641384673384691384697384701384719384733384737384751384757384773384779384817384821384827384841384847384851384889384907384913384919384941384961384973385001385013385027385039385057385069385079385081385087385109385127385129385139385141385153385159385171385193385199385223385249385261385267385279385289385291385321385327385331385351385379385391385393385397385403385417385433385471385481385493385501385519385531385537385559385571385573385579385589385591385597385607385621385631385639385657385661385663385709385739385741385771385783385793385811385817385831385837385843385859385877385897385901385907385927385939385943385967385991385997386017386039386041386047386051386083386093386117386119386129386131386143386149386153386159386161386173386219386227386233386237386249386263386279386297386299386303386329386333386339386363386369386371386381386383386401386411386413386429386431386437386471386489386501386521386537386543386549386569386587386609386611386621386629386641386647386651386677386689386693386713386719386723386731386747386777386809386839386851386887386891386921386927386963386977386987386989386993387007387017387031387047387071387077387083387089387109387137387151387161387169387173387187387197387199387203387227387253387263387269387281387307387313387329387341387371387397387403387433387437387449387463387493387503387509387529387551387577387587387613387623387631387641387659387677387679387683387707387721387727387743387749387763387781387791387799387839387853387857387911387913387917387953387967387971387973387977388009388051388057388067388081388099388109388111388117388133388159388163388169388177388181388183388187388211388231388237388253388259388273388277388301388313388319388351388363388369388373388391388403388459388471388477388481388483388489388499388519388529388541388567388573388621388651388657388673388691388693388697388699388711388727388757388777388781388789388793388813388823388837388859388879388891388897388901388903388931388933388937388961388963388991389003389023389027389029389041389047389057389083389089389099389111389117389141389149389161389167389171389173389189389219389227389231389269389273389287389297389299389303389357389369389381389399389401389437389447389461389479389483389507389513389527389531389533389539389561389563389567389569389579389591389621389629389651389659389663389687389699389713389723389743389749389761389773389783389791389797389819389839389849389867389891389897389903389911389923389927389941389947389953389957389971389981389989389999390001390043390067390077390083390097390101390107390109390113390119390151390157390161390191390193390199390209390211390223390263390281390289390307390323390343390347390353390359390367390373390389390391390407390413390419390421390433390437390449390463390479390487390491390493390499390503390527390539390553390581390647390653390671390673390703390707390721390727390737390739390743390751390763390781390791390809390821390829390851390869390877390883390889390893390953390959390961390967390989390991391009391019391021391031391049391057391063391067391073391103391117391133391151391159391163391177391199391217391219391231391247391249391273391283391291391301391331391337391351391367391373391379391387391393391397391399391403391441391451391453391487391519391537391553391579391613391619391627391631391639391661391679391691391693391711391717391733391739391751391753391757391789391801391817391823391847391861391873391879391889391891391903391907391921391939391961391967391987391999392011392033392053392059392069392087392099392101392111392113392131392143392149392153392159392177392201392209392213392221392233392239392251392261392263392267392269392279392281392297392299392321392333392339392347392351392363392383392389392423392437392443392467392473392477392489392503392519392531392543392549392569392593392599392611392629392647392663392669392699392723392737392741392759392761392767392803392807392809392827392831392837392849392851392857392879392893392911392923392927392929392957392963392969392981392983393007393013393017393031393059393073393077393079393083393097393103393109393121393137393143393157393161393181393187393191393203393209393241393247393257393271393287393299393301393311393331393361393373393377393383393401393403393413393451393473393479393487393517393521393539393541393551393557393571393577393581393583393587393593393611393629393637393649393667393671393677393683393697393709393713393721393727393739393749393761393779393797393847393853393857393859393863393871393901393919393929393931393947393961393977393989393997394007394019394039394049394063394073394099394123394129394153394157394169394187394201394211394223394241394249394259394271394291394319394327394357394363394367394369394393394409394411394453394481394489394501394507394523394529394549394571394577394579394601394619394631394633394637394643394673394699394717394721394727394729394733394739394747394759394787394811394813394817394819394829394837394861394879394897394931394943394963394967394969394981394987394993395023395027395039395047395069395089395093395107395111395113395119395137395141395147395159395173395189395191395201395231395243395251395261395273395287395293395303395309395321395323395377395383395407395429395431395443395449395453395459395491395509395513395533395537395543395581395597395611395621395627395657395671395677395687395701395719395737395741395749395767395803395849395851395873395887395891395897395909395921395953395959395971396001396029396031396041396043396061396079396091396103396107396119396157396173396181396197396199396203396217396239396247396259396269396293396299396301396311396323396349396353396373396377396379396413396427396437396443396449396479396509396523396527396533396541396547396563396577396581396601396619396623396629396631396637396647396667396679396703396709396713396719396733396833396871396881396883396887396919396931396937396943396947396953396971396983396997397013397027397037397051397057397063397073397093397099397127397151397153397181397183397211397217397223397237397253397259397283397289397297397301397303397337397351397357397361397373397379397427397429397433397459397469397489397493397517397519397541397543397547397549397567397589397591397597397633397643397673397687397697397721397723397729397751397753397757397759397763397799397807397811397829397849397867397897397907397921397939397951397963397973397981398011398023398029398033398039398053398059398063398077398087398113398117398119398129398143398149398171398207398213398219398227398249398261398267398273398287398303398311398323398339398341398347398353398357398369398393398407398417398423398441398459398467398471398473398477398491398509398539398543398549398557398569398581398591398609398611398621398627398669398681398683398693398711398729398731398759398771398813398819398821398833398857398863398887398903398917398921398933398941398969398977398989399023399031399043399059399067399071399079399097399101399107399131399137399149399151399163399173399181399197399221399227399239399241399263399271399277399281399283399353399379399389399391399401399403399409399433399439399473399481399491399493399499399523399527399541399557399571399577399583399587399601399613399617399643399647399667399677399689399691399719399727399731399739399757399761399769399781399787399793399851399853399871399887399899399911399913399937399941399953399979399983399989400009400031400033400051400067400069400087400093400109400123400151400157400187400199400207400217400237400243400247400249400261400277400291400297400307400313400321400331400339400381400391400409400417400429400441400457400471400481400523400559400579400597400601400607400619400643400651400657400679400681400703400711400721400723400739400753400759400823400837400849400853400859400871400903400927400931400943400949400963400997401017401029401039401053401057401069401077401087401101401113401119401161401173401179401201401209401231401237401243401279401287401309401311401321401329401341401347401371401381401393401407401411401417401473401477401507401519401537401539401551401567401587401593401627401629401651401669401671401689401707401711401743401771401773401809401813401827401839401861401867401887401903401909401917401939401953401957401959401981401987401993402023402029402037402043402049402053402071402089402091402107402131402133402137402139402197402221402223402239402253402263402277402299402307402313402329402331402341402343402359402361402371402379402383402403402419402443402487402503402511402517402527402529402541402551402559402581402583402587402593402601402613402631402691402697402739402751402757402761402763402767402769402797402803402817402823402847402851402859402863402869402881402923402943402947402949402991403001403003403037403043403049403057403061403063403079403097403103403133403141403159403163403181403219403241403243403253403261403267403289403301403309403327403331403339403363403369403387403391403433403439403483403499403511403537403547403549403553403567403577403591403603403607403621403649403661403679403681403687403703403717403721403729403757403783403787403817403829403831403849403861403867403877403889403901403933403951403957403969403979403981403993404009404011404017404021404029404051404081404099404113404119404123404161404167404177404189404191404197404213404221404249404251404267404269404273404291404309404321404323404357404381404387404389404399404419404423404429404431404449404461404483404489404497404507404513404527404531404533404539404557404597404671404693404699404713404773404779404783404819404827404837404843404849404851404941404951404959404969404977404981404983405001405011405029405037405047405049405071405073405089405091405143405157405179405199405211405221405227405239405241405247405253405269405277405287405299405323405341405343405347405373405401405407405413405437405439405473405487405491405497405499405521405527405529405541405553405577405599405607405611405641405659405667405677405679405683405689405701405703405709405719405731405749405763405767405781405799405817405827405829405857405863405869405871405893405901405917405947405949405959405967405989405991405997406013406027406037406067406073406093406117406123406169406171406177406183406207406247406253406267406271406309406313406327406331406339406349406361406381406397406403406423406447406481406499406501406507406513406517406531406547406559406561406573406577406579406583406591406631406633406649406661406673406697406699406717406729406739406789406807406811406817406837406859406873406883406907406951406969406981406993407023407047407059407083407119407137407149407153407177407179407191407203407207407219407221407233407249407257407263407273407287407291407299407311407317407321407347407357407359407369407377407383407401407437407471407483407489407501407503407509407521407527407567407573407579407587407599407621407633407639407651407657407669407699407707407713407717407723407741407747407783407789407791407801407807407821407833407843407857407861407879407893407899407917407923407947407959407969407971407977407993408011408019408041408049408071408077408091408127408131408137408169408173408197408203408209408211408217408223408229408241408251408263408271408283408311408337408341408347408361408379408389408403408413408427408431408433408437408461408469408479408491408497408533408539408553408563408607408623408631408637408643408659408677408689408691408701408703408713408719408743408763408769408773408787408803408809408817408841408857408869408911408913408923408943408953408959408971408979408997409007409021409027409033409043409063409069409081409099409121409153409163409177409187409217409237409259409261409267409271409289409291409327409333409337409349409351409369409379409391409397409429409433409441409463409471409477409483409499409517409523409529409543409573409579409589409597409609409639409657409691409693409709409711409723409729409733409753409769409777409781409813409817409823409831409841409861409867409879409889409891409897409901409909409933409943409951409961409967409987409993409999410009410029410063410087410093410117410119410141410143410149410171410173410203410231410233410239410243410257410279410281410299410317410323410339410341410353410359410383410387410393410401410411410413410453410461410477410489410491410497410507410513410519410551410561410587410617410621410623410629410651410659410671410687410701410717410731410741410747410749410759410783410789410801410807410819410833410857410899410903410929410953410983410999411001411007411011411013411031411041411049411067411071411083411101411113411119411127411143411157411167411193411197411211411233411241411251411253411259411287411311411337411347411361411371411379411409411421411443411449411469411473411479411491411503411527411529411557411563411569411577411583411589411611411613411617411637411641411667411679411683411703411707411709411721411727411737411739411743411751411779411799411809411821411823411833411841411883411919411923411937411941411947411967411991412001412007412019412031412033412037412039412051412067412073412081412099412109412123412127412133412147412157412171412187412189412193412201412211412213412219412249412253412273412277412289412303412333412339412343412387412397412411412457412463412481412487412493412537412561412567412571412589412591412603412609412619412627412637412639412651412663412667412717412739412771412793412807412831412849412859412891412901412903412939412943412949412967412987413009413027413033413053413069413071413081413087413089413093413111413113413129413141413143413159413167413183413197413201413207413233413243413251413263413267413293413299413353413411413417413429413443413461413477413521413527413533413537413551413557413579413587413597413629413653413681413683413689413711413713413719413737413753413759413779413783413807413827413849413863413867413869413879413887413911413923413951413981414013414017414019414031414049414053414061414077414083414097414101414107414109414131414157414179414199414203414209414217414221414241414259414269414277414283414311414313414329414331414347414361414367414383414389414397414413414431414433414451414457414461414467414487414503414521414539414553414559414571414577414607414611414629414641414643414653414677414679414683414691414697414703414707414709414721414731414737414763414767414769414773414779414793414803414809414833414857414871414889414893414899414913414923414929414949414959414971414977414991415013415031415039415061415069415073415087415097415109415111415133415141415147415153415159415171415187415189415201415213415231415253415271415273415319415343415379415381415391415409415427415447415469415477415489415507415517415523415543415553415559415567415577415603415607415609415627415631415643415651415661415669415673415687415691415697415717415721415729415759415783415787415799415801415819415823415861415873415879415901415931415937415949415951415957415963415969415979415993415999416011416023416071416077416089416107416147416149416153416159416167416201416219416239416243416249416257416263416281416291416333416359416387416389416393416399416401416407416413416417416419416441416443416459416473416477416491416497416501416503416513416531416543416573416579416593416621416623416629416659416677416693416719416761416797416821416833416839416849416851416873416881416887416947416957416963416989417007417017417019417023417037417089417097417113417119417127417133417161417169417173417181417187417191417203417217417227417239417251417271417283417293417311417317417331417337417371417377417379417383417419417437417451417457417479417491417493417509417511417523417541417553417559417577417581417583417617417623417631417643417649417671417691417719417721417727417731417733417737417751417763417773417793417811417821417839417863417869417881417883417899417931417941417947417953417959417961417983417997418007418009418027418031418043418051418069418073418079418087418109418129418157418169418177418181418189418199418207418219418259418273418279418289418303418321418331418337418339418343418349418351418357418373418381418391418423418427418447418459418471418493418511418553418559418597418601418603418631418633418637418657418667418699418709418721418739418751418763418771418783418787418793418799418811418813418819418837418843418849418861418867418871418883418889418909418921418927418933418939418961418981418987418993418997419047419051419053419057419059419087419141419147419161419171419183419189419191419201419231419249419261419281419291419297419303419317419329419351419383419401419417419423419429419443419449419459419467419473419477419483419491419513419527419537419557419561419563419567419579419591419597419599419603419609419623419651419687419693419701419711419743419753419777419789419791419801419803419821419827419831419873419893419921419927419929419933419953419959419999420001420029420037420041420047420073420097420103420149420163420191420193420221420241420253420263420269420271420293420307420313420317420319420323420331420341420349420353420361420367420383420397420419420421420439420457420467420479420481420499420503420521420551420557420569420571420593420599420613420671420677420683420691420731420737420743420757420769420779420781420799420803420809420811420851420853420857420859420899420919420929420941420967420977420997421009421019421033421037421049421079421081421093421103421121421123421133421147421159421163421177421181421189421207421241421273421279421303421313421331421339421349421361421381421397421409421417421423421433421453421459421469421471421483421493421501421517421559421607421609421621421633421639421643421657421661421691421697421699421703421709421711421717421727421739421741421783421801421807421831421847421891421907421913421943421973421987421997422029422041422057422063422069422077422083422087422089422099422101422111422113422129422137422141422183422203422209422231422239422243422249422267422287422291422309422311422321422339422353422363422369422377422393422407422431422453422459422479422537422549422551422557422563422567422573422581422621422627422657422689422701422707422711422749422753422759422761422789422797422803422827422857422861422867422869422879422881422893422897422899422911422923422927422969422987423001423013423019423043423053423061423067423083423091423097423103423109423121423127423133423173423179423191423209423221423229423233423251423257423259423277423281423287423289423299423307423323423341423347423389423403423413423427423431423439423457423461423463423469423481423497423503423509423541423547423557423559423581423587423601423617423649423667423697423707423713423727423749423751423763423769423779423781423791423803423823423847423853423859423869423883423887423931423949423961423977423989423991424001424003424007424019424027424037424079424091424093424103424117424121424129424139424147424157424163424169424187424199424223424231424243424247424261424267424271424273424313424331424339424343424351424397424423424429424433424451424471424481424493424519424537424547424549424559424573424577424597424601424639424661424667424679424687424693424709424727424729424757424769424771424777424811424817424819424829424841424843424849424861424867424889424891424903424909424913424939424961424967424997425003425027425039425057425059425071425083425101425107425123425147425149425189425197425207425233425237425251425273425279425281425291425297425309425317425329425333425363425377425387425393425417425419425423425441425443425471425473425489425501425519425521425533425549425563425591425603425609425641425653425681425701425713425779425783425791425801425813425819425837425839425851425857425861425869425879425899425903425911425939425959425977425987425989426007426011426061426073426077426089426091426103426131426161426163426193426197426211426229426233426253426287426301426311426319426331426353426383426389426401426407426421426427426469426487426527426541426551426553426563426583426611426631426637426641426661426691426697426707426709426731426737426739426743426757426761426763426773426779426787426799426841426859426863426871426889426893426913426917426919426931426941426971426973426997427001427013427039427043427067427069427073427079427081427103427117427151427169427181427213427237427241427243427247427249427279427283427307427309427327427333427351427369427379427381427403427417427421427423427429427433427439427447427451427457427477427513427517427523427529427541427579427591427597427619427621427681427711427717427723427727427733427751427781427787427789427813427849427859427877427879427883427913427919427939427949427951427957427967427969427991427993427997428003428023428027428033428039428041428047428083428093428137428143428147428149428161428167428173428177428221428227428231428249428251428273428297428299428303428339428353428369428401428411428429428471428473428489428503428509428531428539428551428557428563428567428569428579428629428633428639428657428663428671428677428683428693428731428741428759428777428797428801428807428809428833428843428851428863428873428899428951428957428977429007429017429043429083429101429109429119429127429137429139429161429181429197429211429217429223429227429241429259429271429277429281429283429329429347429349429361429367429389429397429409429413429427429431429449429463429467429469429487429497429503429509429511429521429529429547429551429563429581429587429589429599429631429643429659429661429673429677429679429683429701429719429727429731429733429773429791429797429817429823429827429851429853429881429887429889429899429901429907429911429917429929429931429937429943429953429971429973429991430007430009430013430019430057430061430081430091430093430121430139430147430193430259430267430277430279430289430303430319430333430343430357430393430411430427430433430453430487430499430511430513430517430543430553430571430579430589430601430603430649430663430691430697430699430709430723430739430741430747430751430753430769430783430789430799430811430819430823430841430847430861430873430879430883430891430897430907430909430921430949430957430979430981430987430999431017431021431029431047431051431063431077431083431099431107431141431147431153431173431191431203431213431219431237431251431257431267431269431287431297431311431329431339431363431369431377431381431399431423431429431441431447431449431479431513431521431533431567431581431597431603431611431617431621431657431659431663431671431693431707431729431731431759431777431797431801431803431807431831431833431857431863431867431869431881431887431891431903431911431929431933431947431983431993432001432007432023432031432037432043432053432059432067432073432097432121432137432139432143432149432161432163432167432199432203432227432241432251432277432281432287432301432317432323432337432343432349432359432373432389432391432401432413432433432437432449432457432479432491432499432503432511432527432539432557432559432569432577432587432589432613432631432637432659432661432713432721432727432737432743432749432781432793432797432799432833432847432857432869432893432907432923432931432959432961432979432983432989433003433033433049433051433061433073433079433087433093433099433117433123433141433151433187433193433201433207433229433241433249433253433259433261433267433271433291433309433319433337433351433357433361433369433373433393433399433421433429433439433453433469433471433501433507433513433549433571433577433607433627433633433639433651433661433663433673433679433681433703433723433729433747433759433777433781433787433813433817433847433859433861433877433883433889433931433943433963433967433981434009434011434029434039434081434087434107434111434113434117434141434167434179434191434201434209434221434237434243434249434261434267434293434297434303434311434323434347434353434363434377434383434387434389434407434411434431434437434459434461434471434479434501434509434521434561434563434573434593434597434611434647434659434683434689434699434717434719434743434761434783434803434807434813434821434827434831434839434849434857434867434873434881434909434921434923434927434933434939434947434957434963434977434981434989435037435041435059435103435107435109435131435139435143435151435161435179435181435187435191435221435223435247435257435263435277435283435287435307435317435343435349435359435371435397435401435403435419435427435437435439435451435481435503435529435541435553435559435563435569435571435577435583435593435619435623435637435641435647435649435653435661435679435709435731435733435739435751435763435769435779435817435839435847435857435859435881435889435893435907435913435923435947435949435973435983435997436003436013436027436061436081436087436091436097436127436147436151436157436171436181436217436231436253436273436279436283436291436307436309436313436343436357436399436417436427436439436459436463436477436481436483436507436523436529436531436547436549436571436591436607436621436627436649436651436673436687436693436717436727436729436739436741436757436801436811436819436831436841436853436871436889436913436957436963436967436973436979436993436999437011437033437071437077437083437093437111437113437137437141437149437153437159437191437201437219437237437243437263437273437279437287437293437321437351437357437363437387437389437401437413437467437471437473437497437501437509437519437527437533437539437543437557437587437629437641437651437653437677437681437687437693437719437729437743437753437771437809437819437837437849437861437867437881437909437923437947437953437959437977438001438017438029438047438049438091438131438133438143438169438203438211438223438233438241438253438259438271438281438287438301438313438329438341438377438391438401438409438419438439438443438467438479438499438517438521438523438527438533438551438569438589438601438611438623438631438637438661438667438671438701438707438721438733438761438769438793438827438829438833438847438853438869438877438887438899438913438937438941438953438961438967438979438983438989439007439009439063439081439123439133439141439157439163439171439183439199439217439253439273439279439289439303439339439349439357439367439381439409439421439427439429439441439459439463439471439493439511439519439541439559439567439573439577439583439601439613439631439639439661439667439687439693439697439709439723439729439753439759439763439771439781439787439799439811439823439849439853439861439867439883439891439903439919439949439961439969439973439981439991440009440023440039440047440087440093440101440131440159440171440177440179440183440203440207440221440227440239440261440269440281440303440311440329440333440339440347440371440383440389440393440399440431440441440443440471440497440501440507440509440527440537440543440549440551440567440569440579440581440641440651440653440669440677440681440683440711440717440723440731440753440761440773440807440809440821440831440849440863440893440903440911440939440941440953440959440983440987440989441011441029441041441043441053441073441079441101441107441109441113441121441127441157441169441179441187441191441193441229441247441251441257441263441281441307441319441349441359441361441403441421441443441449441461441479441499441517441523441527441547441557441563441569441587441607441613441619441631441647441667441697441703441713441737441751441787441797441799441811441827441829441839441841441877441887441907441913441923441937441953441971442003442007442009442019442027442031442033442061442069442097442109442121442139442147442151442157442171442177442181442193442201442207442217442229442237442243442271442283442291442319442327442333442363442367442397442399442439442447442457442469442487442489442499442501442517442531442537442571442573442577442579442601442609442619442633442691442699442703442721442733442747442753442763442769442777442781442789442807442817442823442829442831442837442843442861442879442903442919442961442963442973442979442987442991442997443011443017443039443041443057443059443063443077443089443117443123443129443147443153443159443161443167443171443189443203443221443227443231443237443243443249443263443273443281443291443293443341443347443353443363443369443389443407443413443419443423443431443437443453443467443489443501443533443543443551443561443563443567443587443591443603443609443629443659443687443689443701443711443731443749443753443759443761443771443777443791443837443851443867443869443873443879443881443893443899443909443917443939443941443953443983443987443999444001444007444029444043444047444079444089444109444113444121444127444131444151444167444173444179444181444187444209444253444271444281444287444289444293444307444341444343444347444349444401444403444421444443444449444461444463444469444473444487444517444523444527444529444539444547444553444557444569444589444607444623444637444641444649444671444677444701444713444739444767444791444793444803444811444817444833444841444859444863444869444877444883444887444893444901444929444937444953444967444971444979445001445019445021445031445033445069445087445091445097445103445141445157445169445183445187445199445229445261445271445279445283445297445307445321445339445363445427445433445447445453445463445477445499445507445537445541445567445573445583445589445597445619445631445633445649445657445691445699445703445741445747445769445771445789445799445807445829445847445853445871445877445883445891445931445937445943445967445969446003446009446041446053446081446087446111446123446129446141446179446189446191446197446221446227446231446261446263446273446279446293446309446323446333446353446363446387446389446399446401446417446441446447446461446473446477446503446533446549446561446569446597446603446609446647446657446713446717446731446753446759446767446773446819446827446839446863446881446891446893446909446911446921446933446951446969446983447001447011447019447053447067447079447101447107447119447133447137447173447179447193447197447211447217447221447233447247447257447259447263447311447319447323447331447353447401447409447427447439447443447449447451447463447467447481447509447521447527447541447569447571447611447617447637447641447677447683447701447703447743447749447757447779447791447793447817447823447827447829447841447859447877447883447893447901447907447943447961447983447991448003448013448027448031448057448067448073448093448111448121448139448141448157448159448169448177448187448193448199448207448241448249448303448309448313448321448351448363448367448373448379448387448397448421448451448519448531448561448597448607448627448631448633448667448687448697448703448727448733448741448769448793448801448807448829448843448853448859448867448871448873448879448883448907448927448939448969448993448997448999449003449011449051449077449083449093449107449117449129449131449149449153449161449171449173449201449203449209449227449243449249449261449263449269449287449299449303449311449321449333449347449353449363449381449399449411449417449419449437449441449459449473449543449549449557449563449567449569449591449609449621449629449653449663449671449677449681449689449693449699449741449759449767449773449783449797449807449821449833449851449879449921449929449941449951449959449963449971449987449989450001450011450019450029450067450071450077450083450101450103450113450127450137450161450169450193450199450209450217450223450227450239450257450259450277450287450293450299450301450311450343450349450361450367450377450383450391450403450413450421450431450451450473450479450481450487450493450503450529450533450557450563450581450587450599450601450617450641450643450649450677450691450707450719450727450761450767450787450797450799450803450809450811450817450829450839450841450847450859450881450883450887450893450899450913450917450929450943450949450971450991450997451013451039451051451057451069451093451097451103451109451159451177451181451183451201451207451249451277451279451301451303451309451313451331451337451343451361451387451397451411451439451441451481451499451519451523451541451547451553451579451601451609451621451637451657451663451667451669451679451681451691451699451709451723451747451753451771451783451793451799451823451831451837451859451873451879451897451901451903451909451921451933451937451939451961451967451987452009452017452027452033452041452077452083452087452131452159452161452171452191452201452213452227452233452239452269452279452293452297452329452363452377452393452401452443452453452497452519452521452531452533452537452539452549452579452587452597452611452629452633452671452687452689452701452731452759452773452797452807452813452821452831452857452869452873452923452953452957452983452989453023453029453053453073453107453119453133453137453143453157453161453181453197453199453209453217453227453239453247453269453289453293453301453311453317453329453347453367453371453377453379453421453451453461453527453553453559453569453571453599453601453617453631453637453641453643453659453667453671453683453703453707453709453737453757453797453799453823453833453847453851453877453889453907453913453923453931453949453961453977453983453991454009454021454031454033454039454061454063454079454109454141454151454159454183454199454211454213454219454229454231454247454253454277454297454303454313454331454351454357454361454379454387454409454417454451454453454483454501454507454513454541454543454547454577454579454603454609454627454637454673454679454709454711454721454723454759454763454777454799454823454843454847454849454859454889454891454907454919454921454931454943454967454969454973454991455003455011455033455047455053455093455099455123455149455159455167455171455177455201455219455227455233455237455261455263455269455291455309455317455321455333455339455341455353455381455393455401455407455419455431455437455443455461455471455473455479455489455491455513455527455531455537455557455573455579455597455599455603455627455647455659455681455683455687455701455711455717455737455761455783455789455809455827455831455849455863455881455899455921455933455941455953455969455977455989455993455999456007456013456023456037456047456061456091456107456109456119456149456151456167456193456223456233456241456283456293456329456349456353456367456377456403456409456427456439456451456457456461456499456503456517456523456529456539456553456557456559456571456581456587456607456611456613456623456641456647456649456653456679456683456697456727456737456763456767456769456791456809456811456821456871456877456881456899456901456923456949456959456979456991457001457003457013457021457043457049457057457087457091457097457099457117457139457151457153457183457189457201457213457229457241457253457267457271457277457279457307457319457333457339457363457367457381457393457397457399457403457411457421457433457459457469457507457511457517457547457553457559457571457607457609457621457643457651457661457669457673457679457687457697457711457739457757457789457799457813457817457829457837457871457889457903457913457943457979457981457987458009458027458039458047458053458057458063458069458119458123458173458179458189458191458197458207458219458239458309458317458323458327458333458357458363458377458399458401458407458449458477458483458501458531458533458543458567458569458573458593458599458611458621458629458639458651458663458669458683458701458719458729458747458789458791458797458807458819458849458863458879458891458897458917458921458929458947458957458959458963458971458977458981458987458993459007459013459023459029459031459037459047459089459091459113459127459167459169459181459209459223459229459233459257459271459293459301459313459317459337459341459343459353459373459377459383459397459421459427459443459463459467459469459479459509459521459523459593459607459611459619459623459631459647459649459671459677459691459703459749459763459791459803459817459829459841459847459883459913459923459929459937459961460013460039460051460063460073460079460081460087460091460099460111460127460147460157460171460181460189460211460217460231460247460267460289460297460301460337460349460373460379460387460393460403460409460417460451460463460477460531460543460561460571460589460609460619460627460633460637460643460657460673460697460709460711460721460771460777460787460793460813460829460841460843460871460891460903460907460913460919460937460949460951460969460973460979460981460987460991461009461011461017461051461053461059461093461101461119461143461147461171461183461191461207461233461239461257461269461273461297461299461309461317461323461327461333461359461381461393461407461411461413461437461441461443461467461479461507461521461561461569461581461599461603461609461627461639461653461677461687461689461693461707461717461801461803461819461843461861461887461891461917461921461933461957461971461977461983462013462041462067462073462079462097462103462109462113462131462149462181462191462199462221462239462263462271462307462311462331462337462361462373462377462401462409462419462421462437462443462467462481462491462493462499462529462541462547462557462569462571462577462589462607462629462641462643462653462659462667462673462677462697462713462719462727462733462739462773462827462841462851462863462871462881462887462899462901462911462937462947462953462983463003463031463033463093463103463157463181463189463207463213463219463231463237463247463249463261463283463291463297463303463313463319463321463339463343463363463387463399463433463447463451463453463457463459463483463501463511463513463523463531463537463549463579463613463627463633463643463649463663463679463693463711463717463741463747463753463763463781463787463807463823463829463831463849463861463867463873463889463891463907463919463921463949463963463973463987463993464003464011464021464033464047464069464081464089464119464129464131464137464141464143464171464173464197464201464213464237464251464257464263464279464281464291464309464311464327464351464371464381464383464413464419464437464447464459464467464479464483464521464537464539464549464557464561464587464591464603464617464621464647464663464687464699464741464747464749464753464767464771464773464777464801464803464809464813464819464843464857464879464897464909464917464923464927464939464941464951464953464963464983464993464999465007465011465013465019465041465061465067465071465077465079465089465107465119465133465151465161465163465167465169465173465187465209465211465259465271465277465281465293465299465317465319465331465337465373465379465383465407465419465433465463465469465523465529465541465551465581465587465611465631465643465649465659465679465701465721465739465743465761465781465797465799465809465821465833465841465887465893465901465917465929465931465947465977465989466009466019466027466033466043466061466069466073466079466087466091466121466139466153466171466181466183466201466243466247466261466267466273466283466303466321466331466339466357466369466373466409466423466441466451466483466517466537466547466553466561466567466573466579466603466619466637466649466651466673466717466723466729466733466747466751466777466787466801466819466853466859466897466909466913466919466951466957466997467003467009467017467021467063467081467083467101467119467123467141467147467171467183467197467209467213467237467239467261467293467297467317467329467333467353467371467399467417467431467437467447467471467473467477467479467491467497467503467507467527467531467543467549467557467587467591467611467617467627467629467633467641467651467657467669467671467681467689467699467713467729467737467743467749467773467783467813467827467833467867467869467879467881467893467897467899467903467927467941467953467963467977468001468011468019468029468049468059468067468071468079468107468109468113468121468133468137468151468157468173468187468191468199468239468241468253468271468277468289468319468323468353468359468371468389468421468439468451468463468473468491468493468499468509468527468551468557468577468581468593468599468613468619468623468641468647468653468661468667468683468691468697468703468709468719468737468739468761468773468781468803468817468821468841468851468859468869468883468887468889468893468899468913468953468967468973468983469009469031469037469069469099469121469127469141469153469169469193469207469219469229469237469241469253469267469279469283469303469321469331469351469363469367469369469379469397469411469429469439469457469487469501469529469541469543469561469583469589469613469627469631469649469657469673469687469691469717469723469747469753469757469769469787469793469801469811469823469841469849469877469879469891469907469919469939469957469969469979469993470021470039470059470077470081470083470087470089470131470149470153470161470167470179470201470207470209470213470219470227470243470251470263470279470297470299470303470317470333470347470359470389470399470411470413470417470429470443470447470453470461470471470473470489470501470513470521470531470539470551470579470593470597470599470609470621470627470647470651470653470663470669470689470711470719470731470749470779470783470791470819470831470837470863470867470881470887470891470903470927470933470941470947470957470959470993470999471007471041471061471073471089471091471101471137471139471161471173471179471187471193471209471217471241471253471259471277471281471283471299471301471313471353471389471391471403471407471439471451471467471481471487471503471509471521471533471539471553471571471589471593471607471617471619471641471649471659471671471673471677471683471697471703471719471721471749471769471781471791471803471817471841471847471853471871471893471901471907471923471929471931471943471949471959471997472019472027472051472057472063472067472103472111472123472127472133472139472151472159472163472189472193472247472249472253472261472273472289472301472309472319472331472333472349472369472391472393472399472411472421472457472469472477472523472541472543472559472561472573472597472631472639472643472669472687472691472697472709472711472721472741472751472763472793472799472817472831472837472847472859472883472907472909472921472937472939472963472993473009473021473027473089473101473117473141473147473159473167473173473191473197473201473203473219473227473257473279473287473293473311473321473327473351473353473377473381473383473411473419473441473443473453473471473477473479473497473503473507473513473519473527473531473533473549473579473597473611473617473633473647473659473719473723473729473741473743473761473789473833473839473857473861473867473887473899473911473923473927473929473939473951473953473971473981473987473999474017474029474037474043474049474059474073474077474101474119474127474137474143474151474163474169474197474211474223474241474263474289474307474311474319474337474343474347474359474379474389474391474413474433474437474443474479474491474497474499474503474533474541474547474557474569474571474581474583474619474629474647474659474667474671474707474709474737474751474757474769474779474787474809474811474839474847474857474899474907474911474917474923474931474937474941474949474959474977474983475037475051475073475081475091475093475103475109475141475147475151475159475169475207475219475229475243475271475273475283475289475297475301475327475331475333475351475367475369475379475381475403475417475421475427475429475441475457475469475483475511475523475529475549475583475597475613475619475621475637475639475649475669475679475681475691475693475697475721475729475751475753475759475763475777475789475793475807475823475831475837475841475859475877475879475889475897475903475907475921475927475933475957475973475991475997476009476023476027476029476039476041476059476081476087476089476101476107476111476137476143476167476183476219476233476237476243476249476279476299476317476347476351476363476369476381476401476407476419476423476429476467476477476479476507476513476519476579476587476591476599476603476611476633476639476647476659476681476683476701476713476719476737476743476753476759476783476803476831476849476851476863476869476887476891476911476921476929476977476981476989477011477013477017477019477031477047477073477077477091477131477149477163477209477221477229477259477277477293477313477317477329477341477359477361477383477409477439477461477469477497477511477517477523477539477551477553477557477571477577477593477619477623477637477671477677477721477727477731477739477767477769477791477797477809477811477821477823477839477847477857477863477881477899477913477941477947477973477977477991478001478039478063478067478069478087478099478111478129478139478157478169478171478189478199478207478213478241478243478253478259478271478273478321478339478343478351478391478399478403478411478417478421478427478433478441478451478453478459478481478483478493478523478531478571478573478579478589478603478627478631478637478651478679478697478711478727478729478739478741478747478763478769478787478801478811478813478823478831478843478853478861478871478879478897478901478913478927478931478937478943478963478967478991478999479023479027479029479041479081479131479137479147479153479189479191479201479209479221479231479239479243479263479267479287479299479309479317479327479357479371479377479387479419479429479431479441479461479473479489479497479509479513479533479543479561479569479581479593479599479623479629479639479701479749479753479761479771479777479783479797479813479821479833479839479861479879479881479891479903479909479939479951479953479957479971480013480017480019480023480043480047480049480059480061480071480091480101480107480113480133480143480157480167480169480203480209480287480299480317480329480341480343480349480367480373480379480383480391480409480419480427480449480451480461480463480499480503480509480517480521480527480533480541480553480563480569480583480587480647480661480707480713480731480737480749480761480773480787480803480827480839480853480881480911480919480929480937480941480959480967480979480989481001481003481009481021481043481051481067481073481087481093481097481109481123481133481141481147481153481157481171481177481181481199481207481211481231481249481297481301481303481307481343481363481373481379481387481409481417481433481447481469481489481501481513481531481549481571481577481589481619481633481639481651481667481673481681481693481697481699481721481751481753481769481787481801481807481813481837481843481847481849481861481867481879481883481909481939481963481997482017482021482029482033482039482051482071482093482099482101482117482123482179482189482203482213482227482231482233482243482263482281482309482323482347482351482359482371482387482393482399482401482407482413482423482437482441482483482501482507482509482513482519482527482539482569482593482597482621482627482633482641482659482663482683482687482689482707482711482717482719482731482743482753482759482767482773482789482803482819482827482837482861482863482873482897482899482917482941482947482957482971483017483031483061483071483097483127483139483163483167483179483209483211483221483229483233483239483247483251483281483289483317483323483337483347483367483377483389483397483407483409483433483443483467483481483491483499483503483523483541483551483557483563483577483611483619483629483643483649483671483697483709483719483727483733483751483757483761483767483773483787483809483811483827483829483839483853483863483869483883483907483929483937483953483971483991484019484027484037484061484067484079484091484111484117484123484129484151484153484171484181484193484201484207484229484243484259484283484301484303484327484339484361484369484373484397484411484417484439484447484457484459484487484489484493484531484543484577484597484607484609484613484621484639484643484691484703484727484733484751484763484769484777484787484829484853484867484927484951484987484999485021485029485041485053485059485063485081485101485113485123485131485137485161485167485171485201485207485209485263485311485347485351485363485371485383485389485411485417485423485437485447485479485497485509485519485543485567485587485593485603485609485647485657485671485689485701485717485729485731485753485777485819485827485831485833485893485899485909485923485941485959485977485993486023486037486041486043486053486061486071486091486103486119486133486139486163486179486181486193486203486221486223486247486281486293486307486313486323486329486331486341486349486377486379486389486391486397486407486433486443486449486481486491486503486509486511486527486539486559486569486583486589486601486617486637486641486643486653486667486671486677486679486683486697486713486721486757486767486769486781486797486817486821486833486839486869486907486923486929486943486947486949486971486977486991487007487013487021487049487051487057487073487079487093487099487111487133487177487183487187487211487213487219487247487261487283487303487307487313487349487363487381487387487391487397487423487427487429487447487457487463487469487471487477487481487489487507487561487589487601487603487607487637487649487651487657487681487691487703487709487717487727487733487741487757487769487783487789487793487811487819487829487831487843487873487889487891487897487933487943487973487979487997488003488009488011488021488051488057488069488119488143488149488153488161488171488197488203488207488209488227488231488233488239488249488261488263488287488303488309488311488317488321488329488333488339488347488353488381488399488401488407488417488419488441488459488473488503488513488539488567488573488603488611488617488627488633488639488641488651488687488689488701488711488717488723488729488743488749488759488779488791488797488821488827488833488861488879488893488897488909488921488947488959488981488993489001489011489019489043489053489061489101489109489113489127489133489157489161489179489191489197489217489239489241489257489263489283489299489329489337489343489361489367489389489407489409489427489431489439489449489457489479489487489493489529489539489551489553489557489571489613489631489653489659489673489677489679489689489691489733489743489761489791489793489799489803489817489823489833489847489851489869489871489887489901489911489913489941489943489959489961489977489989490001490003490019490031490033490057490097490103490111490117490121490151490159490169490183490201490207490223490241490247490249490267490271490277490283490309490313490339490367490393490417490421490453490459490463490481490493490499490519490537490541490543490549490559490571490573490577490579490591490619490627490631490643490661490663490697490733490741490769490771490783490829490837490849490859490877490891490913490921490927490937490949490951490957490967490969490991490993491003491039491041491059491081491083491129491137491149491159491167491171491201491213491219491251491261491273491279491297491299491327491329491333491339491341491353491357491371491377491417491423491429491461491483491489491497491501491503491527491531491537491539491581491591491593491611491627491633491639491651491653491669491677491707491719491731491737491747491773491783491789491797491819491833491837491851491857491867491873491899491923491951491969491977491983492007492013492017492029492047492053492059492061492067492077492083492103492113492227492251492253492257492281492293492299492319492377492389492397492403492409492413492421492431492463492467492487492491492511492523492551492563492587492601492617492619492629492631492641492647492659492671492673492707492719492721492731492757492761492763492769492781492799492839492853492871492883492893492901492911492967492979493001493013493021493027493043493049493067493093493109493111493121493123493127493133493139493147493159493169493177493193493201493211493217493219493231493243493249493277493279493291493301493313493333493351493369493393493397493399493403493433493447493457493463493481493523493531493541493567493573493579493583493607493621493627493643493657493693493709493711493721493729493733493747493777493793493807493811493813493817493853493859493873493877493897493919493931493937493939493967493973493979493993494023494029494041494051494069494077494083494093494101494107494129494141494147494167494191494213494237494251494257494267494269494281494287494317494327494341494353494359494369494381494383494387494407494413494441494443494471494497494519494521494539494561494563494567494587494591494609494617494621494639494647494651494671494677494687494693494699494713494719494723494731494737494743494749494759494761494783494789494803494843494849494873494899494903494917494927494933494939494959494987495017495037495041495043495067495071495109495113495119495133495139495149495151495161495181495199495211495221495241495269495277495289495301495307495323495337495343495347495359495361495371495377495389495401495413495421495433495437495449495457495461495491495511495527495557495559495563495569495571495587495589495611495613495617495619495629495637495647495667495679495701495707495713495749495751495757495769495773495787495791495797495799495821495827495829495851495877495893495899495923495931495947495953495959495967495973495983496007496019496039496051496063496073496079496123496127496163496187496193496211496229496231496259496283496289496291496297496303496313496333496339496343496381496399496427496439496453496459496471496477496481496487496493496499496511496549496579496583496609496631496669496681496687496703496711496733496747496763496789496813496817496841496849496871496877496889496891496897496901496913496919496949496963496997496999497011497017497041497047497051497069497093497111497113497117497137497141497153497171497177497197497239497257497261497269497279497281497291497297497303497309497323497339497351497389497411497417497423497449497461497473497479497491497501497507497509497521497537497551497557497561497579497587497597497603497633497659497663497671497677497689497701497711497719497729497737497741497771497773497801497813497831497839497851497867497869497873497899497929497957497963497969497977497989497993497999498013498053498061498073498089498101498103498119498143498163498167498181498209498227498257498259498271498301498331498343498361498367498391498397498401498403498409498439498461498467498469498493498497498521498523498527498551498557498577498583498599498611498613498643498647498653498679498689498691498733498739498749498761498767498779498781498787498791498803498833498857498859498881498907498923498931498937498947498961498973498977498989499021499027499033499039499063499067499099499117499127499129499133499139499141499151499157499159499181499183499189499211499229499253499267499277499283499309499321499327499349499361499363499391499397499403499423499439499459499481499483499493499507499519499523499549499559499571499591499601499607499621499633499637499649499661499663499669499673499679499687499691499693499711499717499729499739499747499781499787499801499819499853499879499883499897499903499927499943499957499969499973499979500009500029500041500057500069500083500107500111500113500119500153500167500173500177500179500197500209500231500233500237500239500249500257500287500299500317500321500333500341500363500369500389500393500413500417500431500443500459500471500473500483500501500509500519500527500567500579500587500603500629500671500677500693500699500713500719500723500729500741500777500791500807500809500831500839500861500873500881500887500891500909500911500921500923500933500947500953500957500977501001501013501019501029501031501037501043501077501089501103501121501131501133501139501157501173501187501191501197501203501209501217501223501229501233501257501271501287501299501317501341501343501367501383501401501409501419501427501451501463501493501503501511501563501577501593501601501617501623501637501659501691501701501703501707501719501731501769501779501803501817501821501827501829501841501863501889501911501931501947501953501967501971501997502001502013502039502043502057502063502079502081502087502093502121502133502141502171502181502217502237502247502259502261502277502301502321502339502393502409502421502429502441502451502487502499502501502507502517502543502549502553502591502597502613502631502633502643502651502669502687502699502703502717502729502769502771502781502787502807502819502829502841502847502861502883502919502921502937502961502973503003503017503039503053503077503123503131503137503147503159503197503207503213503227503231503233503249503267503287503297503303503317503339503351503359503369503381503383503389503407503413503423503431503441503453503483503501503543503549503551503563503593503599503609503611503621503623503647503653503663503707503717503743503753503771503777503779503791503803503819503821503827503851503857503869503879503911503927503929503939503947503959503963503969503983503989504001504011504017504047504061504073504103504121504139504143504149504151504157504181504187504197504209504221504247504269504289504299504307504311504323504337504349504353504359504377504379504389504403504457504461504473504479504521504523504527504547504563504593504599504607504617504619504631504661504667504671504677504683504727504767504787504797504799504817504821504851504853504857504871504877504893504901504929504937504943504947504953504967504983504989504991505027505031505033505049505051505061505067505073505091505097505111505117505123505129505139505157505159505181505187505201505213505231505237505277505279505283505301505313505319505321505327505339505357505367505369505399505409505411505429505447505459505469505481505493505501505511505513505523505537505559505573505601505607505613505619505633505639505643505657505663505669505691505693505709505711505727505759505763505777505781505811505819505823505867505871505877505907505919505927505949505961505969505979506047506071506083506101506113506119506131506147506171506173506183506201506213506251506263506269506281506291506327506329506333506339506347506351506357506381506393506417506423506449506459506461506479506491506501506507506531506533506537506551506563506573506591506593506599506609506629506647506663506683506687506689506699506729506731506743506773506783506791506797506809506837506843506861506873506887506893506899506903506911506929506941506963506983506993506999507029507049507071507077507079507103507109507113507119507137507139507149507151507163507193507197507217507289507301507313507317507329507347507349507359507361507371507383507401507421507431507461507491507497507499507503507523507557507571507589507593507599507607507631507641507667507673507691507697507713507719507743507757507779507781507797507803507809507821507827507839507883507901507907507917507919507937507953507961507971507979508009508019508021508033508037508073508087508091508097508103508129508159508171508187508213508223508229508237508243508259508271508273508297508301508327508331508349508363508367508373508393508433508439508451508471508477508489508499508513508517508531508549508559508567508577508579508583508619508621508637508643508661508693508709508727508771508789508799508811508817508841508847508867508901508903508909508913508919508931508943508951508957508961508969508973508987509023509027509053509063509071509087509101509123509137509147509149509203509221509227509239509263509281509287509293509297509317509329509359509363509389509393509413509417509429509441509449509477509513509521509543509549509557509563509569509573509581509591509603509623509633509647509653509659509681509687509689509693509699509723509731509737509741509767509783509797509801509833509837509843509863509867509879509909509911509921509939509947509959509963509989510007510031510047510049510061510067510073510077510079510089510101510121510127510137510157510179510199510203510217510227510233510241510247510253510271510287510299510311510319510331510361510379510383510401510403510449510451510457510463510481510529510551510553510569510581510583510589510611510613510617510619510677510683510691510707510709510751510767510773510793510803510817510823510827510847510889510907510919510931510941510943510989511001511013511019511033511039511057511061511087511109511111511123511151511153511163511169511171511177511193511201511211511213511223511237511243511261511279511289511297511327511333511337511351511361511387511391511409511417511439511447511453511457511463511477511487511507511519511523511541511549511559511573511579511583511591511603511627511631511633511669511691511703511711511723511757511787511793511801511811511831511843511859511867511873511891511897511909511933511939511961511963511991511997512009512011512021512047512059512093512101512137512147512167512207512249512251512269512287512311512321512333512353512389512419512429512443512467512497512503512507512521512531512537512543512569512573512579512581512591512593512597512609512621512641512657512663512671512683512711512713512717512741512747512761512767512779512797512803512819512821512843512849512891512899512903512917512921512927512929512959512977512989512999513001513013513017513031513041513047513053513059513067513083513101513103513109513131513137513157513167513169513173513203513239513257513269513277513283513307513311513313513319513341513347513353513367513371513397513407513419513427513431513439513473513479513481513509513511513529513533513593513631513641513649513673513679513683513691513697513719513727513731513739513749513761513767513769513781513829513839513841513871513881513899513917513923513937513943513977513991514001514009514013514021514049514051514057514061514079514081514093514103514117514123514127514147514177514187514201514219514229514243514247514249514271514277514289514309514313514333514343514357514361514379514399514417514429514433514453514499514513514519514523514529514531514543514561514571514621514637514639514643514649514651514669514681514711514733514739514741514747514751514757514769514783514793514819514823514831514841514847514853514859514867514873514889514903514933514939514949514967515041515087515089515111515143515149515153515173515191515227515231515233515237515279515293515311515323515351515357515369515371515377515381515401515429515477515507515519515539515563515579515587515597515611515621515639515651515653515663515677515681515687515693515701515737515741515761515771515773515777515783515803515813515839515843515857515861515873515887515917515923515929515941515951515969515993516017516023516049516053516077516091516127516151516157516161516163516169516179516193516199516209516223516227516233516247516251516253516277516283516293516319516323516349516359516361516371516377516391516407516421516431516433516437516449516457516469516493516499516517516521516539516541516563516587516589516599516611516617516619516623516643516653516673516679516689516701516709516713516721516727516757516793516811516821516829516839516847516871516877516883516907516911516931516947516949516959516973516977516979516991517003517043517061517067517073517079517081517087517091517129517151517169517177517183517189517207517211517217517229517241517243517249517261517267517277517289517303517337517343517367517373517381517393517399517403517411517417517457517459517469517471517481517487517499517501517507517511517513517547517549517553517571517577517589517597517603517609517613517619517637517639517711517717517721517729517733517739517747517817517823517831517861517873517877517901517919517927517931517949517967517981517991517999518017518047518057518059518083518099518101518113518123518129518131518137518153518159518171518179518191518207518209518233518237518239518249518261518291518299518311518327518341518387518389518411518417518429518431518447518467518471518473518509518521518533518543518579518587518597518611518621518657518689518699518717518729518737518741518743518747518759518761518767518779518801518803518807518809518813518831518863518867518893518911518933518953518981518983518989519011519031519037519067519083519089519091519097519107519119519121519131519151519161519193519217519227519229519247519257519269519283519287519301519307519349519353519359519371519373519383519391519413519427519433519457519487519499519509519521519523519527519539519551519553519577519581519587519611519619519643519647519667519683519691519703519713519733519737519769519787519793519797519803519817519863519881519889519907519917519919519923519931519943519947519971519989519997520019520021520031520043520063520067520073520103520111520123520129520151520193520213520241520279520291520297520307520309520313520339520349520357520361520363520369520379520381520393520409520411520423520427520433520447520451520529520547520549520567520571520589520607520609520621520631520633520649520679520691520699520703520717520721520747520759520763520787520813520837520841520853520867520889520913520921520943520957520963520967520969520981521009521021521023521039521041521047521051521063521107521119521137521153521161521167521173521177521179521201521231521243521251521267521281521299521309521317521329521357521359521363521369521377521393521399521401521429521447521471521483521491521497521503521519521527521533521537521539521551521557521567521581521603521641521657521659521669521671521693521707521723521743521749521753521767521777521789521791521809521813521819521831521861521869521879521881521887521897521903521923521929521981521993521999522017522037522047522059522061522073522079522083522113522127522157522161522167522191522199522211522227522229522233522239522251522259522281522283522289522317522323522337522371522373522383522391522409522413522439522449522469522479522497522517522521522523522541522553522569522601522623522637522659522661522673522677522679522689522703522707522719522737522749522757522761522763522787522811522827522829522839522853522857522871522881522883522887522919522943522947522959522961522989523007523021523031523049523093523097523109523129523169523177523207523213523219523261523297523307523333523349523351523357523387523403523417523427523433523459523463523487523489523493523511523519523541523543523553523571523573523577523597523603523631523637523639523657523667523669523673523681523717523729523741523759523763523771523777523793523801523829523847523867523877523903523907523927523937523949523969523987523997524047524053524057524063524071524081524087524099524113524119524123524149524171524189524197524201524203524219524221524231524243524257524261524269524287524309524341524347524351524353524369524387524389524411524413524429524453524497524507524509524519524521524591524593524599524633524669524681524683524701524707524731524743524789524801524803524827524831524857524863524869524873524893524899524921524933524939524941524947524957524959524963524969524971524981524983524999525001525013525017525029525043525101525127525137525143525157525163525167525191525193525199525209525221525241525247525253525257525299525313525353525359525361525373525377525379525391525397525409525431525433525439525457525461525467525491525493525517525529525533525541525571525583525593525599525607525641525649525671525677525697525709525713525719525727525731525739525769525773525781525809525817525839525869525871525887525893525913525923525937525947525949525953525961525979525983526027526037526049526051526063526067526069526073526087526117526121526139526157526159526189526193526199526213526223526231526249526271526283526289526291526297526307526367526373526381526387526391526397526423526429526441526453526459526483526499526501526511526531526543526571526573526583526601526619526627526633526637526649526651526657526667526679526681526703526709526717526733526739526741526759526763526777526781526829526831526837526853526859526871526909526913526931526937526943526951526957526963526993526997527053527057527063527069527071527081527099527123527129527143527159527161527173527179527203527207527209527237527251527273527281527291527327527333527347527353527377527381527393527399527407527411527419527441527447527453527489527507527533527557527563527581527591527599527603527623527627527633527671527699527701527729527741527749527753527789527803527809527819527843527851527869527881527897527909527921527929527941527981527983527987527993528001528013528041528043528053528091528097528107528127528131528137528163528167528191528197528217528223528247528263528289528299528313528317528329528373528383528391528401528403528413528419528433528469528487528491528509528511528527528559528611528623528629528631528659528667528673528679528691528707528709528719528763528779528791528799528811528821528823528833528863528877528881528883528911528929528947528967528971528973528991529003529007529027529033529037529043529049529051529097529103529117529121529127529129529153529157529181529183529213529229529237529241529259529271529273529301529307529313529327529343529349529357529381529393529411529421529423529471529489529513529517529519529531529547529577529579529603529619529637529649529657529673529681529687529691529693529709529723529741529747529751529807529811529813529819529829529847529871529927529933529939529957529961529973529979529981529987529999530017530021530027530041530051530063530087530093530129530137530143530177530183530197530203530209530227530237530249530251530261530267530279530293530297530303530329530333530339530353530359530389530393530401530429530443530447530501530507530513530527530531530533530539530549530567530597530599530603530609530641530653530659530669530693530701530711530713530731530741530743530753530767530773530797530807530833530837530843530851530857530861530869530897530911530947530969530977530983530989531017531023531043531071531079531101531103531121531133531143531163531169531173531197531203531229531239531253531263531281531287531299531331531337531343531347531353531359531383531457531481531497531521531547531551531569531571531581531589531611531613531623531631531637531667531673531689531701531731531793531799531821531823531827531833531841531847531857531863531871531877531901531911531919531977531983531989531997532001532009532027532033532061532069532093532099532141532153532159532163532183532187532193532199532241532249532261532267532277532283532307532313532327532331532333532349532373532379532391532403532417532421532439532447532451532453532489532501532523532529532531532537532547532561532601532603532607532619532621532633532639532663532669532687532691532709532733532739532751532757532771532781532783532789532801532811532823532849532853532867532907532919532949532951532981532993532999533003533009533011533033533051533053533063533077533089533111533129533149533167533177533189533191533213533219533227533237533249533257533261533263533297533303533317533321533327533353533363533371533389533399533413533447533453533459533509533543533549533573533581533593533633533641533671533693533711533713533719533723533737533747533777533801533809533821533831533837533857533879533887533893533909533921533927533959533963533969533971533989533993533999534007534013534019534029534043534047534049534059534073534077534091534101534113534137534167534173534199534203534211534229534241534253534283534301534307534311534323534329534341534367534371534403534407534431534439534473534491534511534529534553534571534577534581534601534607534617534629534631534637534647534649534659534661534671534697534707534739534799534811534827534839534841534851534857534883534889534913534923534931534943534949534971535013535019535033535037535061535099535103535123535133535151535159535169535181535193535207535219535229535237535243535273535303535319535333535349535351535361535387535391535399535481535487535489535499535511535523535529535547535571535573535589535607535609535627535637535663535669535673535679535697535709535727535741535751535757535771535783535793535811535849535859535861535879535919535937535939535943535957535967535973535991535999536017536023536051536057536059536069536087536099536101536111536141536147536149536189536191536203536213536219536227536233536243536267536273536279536281536287536293536311536323536353536357536377536399536407536423536441536443536447536449536453536461536467536479536491536509536513536531536533536561536563536593536609536621536633536651536671536677536687536699536717536719536729536743536749536771536773536777536779536791536801536803536839536849536857536867536869536891536909536917536923536929536933536947536953536971536989536999537001537007537011537023537029537037537041537067537071537079537091537127537133537143537157537169537181537191537197537221537233537241537269537281537287537307537331537343537347537373537379537401537403537413537497537527537547537569537583537587537599537611537637537661537673537679537703537709537739537743537749537769537773537781537787537793537811537841537847537853537877537883537899537913537919537941537991538001538019538049538051538073538079538093538117538121538123538127538147538151538157538159538163538199538201538247538249538259538267538283538297538301538303538309538331538333538357538367538397538399538411538423538457538471538481538487538511538513538519538523538529538553538561538567538579538589538597538621538649538651538697538709538711538721538723538739538751538763538771538777538789538799538801538817538823538829538841538871538877538921538927538931538939538943538987539003539009539039539047539089539093539101539107539111539113539129539141539153539159539167539171539207539219539233539237539261539267539269539293539303539309539311539321539323539339539347539351539389539401539447539449539479539501539503539507539509539533539573539621539629539633539639539641539653539663539677539687539711539713539723539729539743539761539783539797539837539839539843539849539863539881539897539899539921539947539993540041540061540079540101540119540121540139540149540157540167540173540179540181540187540203540217540233540251540269540271540283540301540307540343540347540349540367540373540377540383540389540391540433540437540461540469540509540511540517540539540541540557540559540577540587540599540611540613540619540629540677540679540689540691540697540703540713540751540769540773540779540781540803540809540823540851540863540871540877540901540907540961540989541001541007541027541049541061541087541097541129541133541141541153541181541193541201541217541231541237541249541267541271541283541301541309541339541349541361541363541369541381541391541417541439541447541469541483541507541511541523541529541531541537541543541547541549541571541577541579541589541613541631541657541661541669541693541699541711541721541727541759541763541771541777541781541799541817541831541837541859541889541901541927541951541967541987541991541993541999542021542023542027542053542063542071542081542083542093542111542117542119542123542131542141542149542153542167542183542189542197542207542219542237542251542261542263542281542293542299542323542371542401542441542447542461542467542483542489542497542519542533542537542539542551542557542567542579542587542599542603542683542687542693542713542719542723542747542761542771542783542791542797542821542831542837542873542891542911542921542923542933542939542947542951542981542987542999543017543019543029543061543097543113543131543139543143543149543157543161543163543187543203543217543223543227543233543241543253543259543281543287543289543299543307543311543313543341543349543353543359543379543383543407543427543463543497543503543509543539543551543553543593543601543607543611543617543637543659543661543671543679543689543703543707543713543769543773543787543791543793543797543811543827543841543853543857543859543871543877543883543887543889543901543911543929543967543971543997544001544007544009544013544021544031544097544099544109544123544129544133544139544171544177544183544199544223544259544273544277544279544367544373544399544403544429544451544471544477544487544501544513544517544543544549544601544613544627544631544651544667544699544717544721544723544727544757544759544771544781544793544807544813544837544861544877544879544883544889544897544903544919544927544937544961544963544979545023545029545033545057545063545087545089545093545117545131545141545143545161545189545203545213545231545239545257545267545291545329545371545387545429545437545443545449545473545477545483545497545521545527545533545543545549545551545579545599545609545617545621545641545647545651545663545711545723545731545747545749545759545773545789545791545827545843545863545873545893545899545911545917545929545933545939545947545959546001546017546019546031546047546053546067546071546097546101546103546109546137546149546151546173546179546197546211546233546239546241546253546263546283546289546317546323546341546349546353546361546367546373546391546461546467546479546509546523546547546569546583546587546599546613546617546619546631546643546661546671546677546683546691546709546719546731546739546781546841546859546863546869546881546893546919546937546943546947546961546967546977547007547021547037547061547087547093547097547103547121547133547139547171547223547229547237547241547249547271547273547291547301547321547357547361547363547369547373547387547397547399547411547441547453547471547483547487547493547499547501547513547529547537547559547567547577547583547601547609547619547627547639547643547661547663547681547709547727547741547747547753547763547769547787547817547819547823547831547849547853547871547889547901547909547951547957547999548003548039548059548069548083548089548099548117548123548143548153548189548201548213548221548227548239548243548263548291548309548323548347548351548363548371548393548399548407548417548423548441548453548459548461548489548501548503548519548521548533548543548557548567548579548591548623548629548657548671548677548687548693548707548719548749548753548761548771548783548791548827548831548833548837548843548851548861548869548893548897548903548909548927548953548957548963549001549011549013549019549023549037549071549089549091549097549121549139549149549161549163549167549169549193549203549221549229549247549257549259549281549313549319549323549331549379549391549403549421549431549443549449549481549503549509549511549517549533549547549551549553549569549587549589549607549623549641549643549649549667549683549691549701549707549713549719549733549737549739549749549751549767549817549833549839549863549877549883549911549937549943549949549977549979550007550009550027550049550061550063550073550111550117550127550129550139550163550169550177550181550189550211550213550241550267550279550283550289550309550337550351550369550379550427550439550441550447550457550469550471550489550513550519550531550541550553550577550607550609550621550631550637550651550657550661550663550679550691550703550717550721550733550757550763550789550801550811550813550831550841550843550859550861550903550909550937550939550951550961550969550973550993550997551003551017551027551039551059551063551069551093551099551107551113551129551143551179551197551207551219551231551233551269551281551297551311551321551339551347551363551381551387551407551423551443551461551483551489551503551519551539551543551549551557551569551581551587551597551651551653551659551671551689551693551713551717551723551729551731551743551753551767551773551801551809551813551843551849551861551909551911551917551927551933551951551959551963551981552001552011552029552031552047552053552059552089552091552103552107552113552127552137552179552193552217552239552241552259552263552271552283552301552317552341552353552379552397552401552403552469552473552481552491552493552511552523552527552553552581552583552589552611552649552659552677552703552707552709552731552749552751552757552787552791552793552809552821552833552841552847552859552883552887552899552913552917552971552983552991553013553037553043553051553057553067553073553093553097553099553103553123553139553141553153553171553181553193553207553211553229553249553253553277553279553309553351553363553369553411553417553433553439553447553457553463553471553481553507553513553517553529553543553549553561553573553583553589553591553601553607553627553643553649553667553681553687553699553703553727553733553747553757553759553769553789553811553837553849553867553873553897553901553919553921553933553961553963553981553991554003554011554017554051554077554087554089554117554123554129554137554167554171554179554189554207554209554233554237554263554269554293554299554303554317554347554377554383554417554419554431554447554453554467554503554527554531554569554573554597554611554627554633554639554641554663554669554677554699554707554711554731554747554753554759554767554779554789554791554797554803554821554833554837554839554843554849554887554891554893554899554923554927554951554959554969554977555029555041555043555053555073555077555083555091555097555109555119555143555167555209555221555251555253555257555277555287555293555301555307555337555349555361555383555391555419555421555439555461555487555491555521555523555557555589555593555637555661555671555677555683555691555697555707555739555743555761555767555823555827555829555853555857555871555931555941555953555967556007556021556027556037556043556051556067556069556093556103556123556159556177556181556211556219556229556243556253556261556267556271556273556279556289556313556321556327556331556343556351556373556399556403556441556459556477556483556487556513556519556537556559556573556579556583556601556607556609556613556627556639556651556679556687556691556693556697556709556723556727556741556753556763556769556781556789556793556799556811556817556819556823556841556849556859556861556867556883556891556931556939556943556957556967556981556987556999557017557021557027557033557041557057557059557069557087557093557153557159557197557201557261557269557273557281557303557309557321557329557339557369557371557377557423557443557449557461557483557489557519557521557533557537557551557567557573557591557611557633557639557663557671557693557717557729557731557741557743557747557759557761557779557789557801557803557831557857557861557863557891557899557903557927557981557987558007558017558029558053558067558083558091558109558113558121558139558149558167558179558197558203558209558223558241558251558253558287558289558307558319558343558401558413558421558427558431558457558469558473558479558491558497558499558521558529558533558539558541558563558583558587558599558611558629558643558661558683558703558721558731558757558769558781558787558791558793558827558829558863558869558881558893558913558931558937558947558973558979558997559001559049559051559067559081559093559099559123559133559157559177559183559201559211559213559217559219559231559243559259559277559297559313559319559343559357559367559369559397559421559451559459559469559483559511559513559523559529559541559547559549559561559571559577559583559591559597559631559633559639559649559667559673559679559687559703559709559739559747559777559781559799559807559813559831559841559849559859559877559883559901559907559913559939559967559973559991560017560023560029560039560047560081560083560089560093560107560113560117560123560137560149560159560171560173560179560191560207560213560221560227560233560237560239560243560249560281560293560297560299560311560317560341560353560393560411560437560447560459560471560477560479560489560491560501560503560531560543560551560561560597560617560621560639560641560653560669560683560689560701560719560737560753560761560767560771560783560797560803560827560837560863560869560873560887560891560893560897560929560939560941560969560977561019561047561053561059561061561079561083561091561097561101561103561109561161561173561181561191561199561229561251561277561307561313561343561347561359561367561373561377561389561409561419561439561461561521561529561551561553561559561599561607561667561703561713561733561761561767561787561797561809561829561839561907561917561923561931561943561947561961561973561983561997562007562019562021562043562091562103562129562147562169562181562193562201562231562259562271562273562283562291562297562301562307562313562333562337562349562351562357562361562399562403562409562417562421562427562439562459562477562493562501562517562519562537562577562579562589562591562607562613562621562631562633562651562663562669562673562691562693562699562703562711562721562739562753562759562763562781562789562813562831562841562871562897562901562909562931562943562949562963562967562973562979562987562997563009563011563021563039563041563047563051563077563081563099563113563117563119563131563149563153563183563197563219563249563263563287563327563351563357563359563377563401563411563413563417563419563447563449563467563489563501563503563543563551563561563587563593563599563623563657563663563723563743563747563777563809563813563821563831563837563851563869563881563887563897563929563933563947563971563987563999564013564017564041564049564059564061564089564097564103564127564133564149564163564173564191564197564227564229564233564251564257564269564271564299564301564307564313564323564353564359564367564371564373564391564401564407564409564419564437564449564457564463564467564491564497564523564533564593564607564617564643564653564667564671564679564701564703564709564713564761564779564793564797564827564871564881564899564917564919564923564937564959564973564979564983564989564997565013565039565049565057565069565109565111565127565163565171565177565183565189565207565237565241565247565259565261565273565283565289565303565319565333565337565343565361565379565381565387565391565393565427565429565441565451565463565469565483565489565507565511565517565519565549565553565559565567565571565583565589565597565603565613565637565651565661565667565723565727565769565771565787565793565813565849565867565889565891565907565909565919565921565937565973565979565997566011566023566047566057566077566089566101566107566131566149566161566173566179566183566201566213566227566231566233566273566311566323566347566387566393566413566417566429566431566437566441566443566453566521566537566539566543566549566551566557566563566567566617566633566639566653566659566677566681566693566701566707566717566719566723566737566759566767566791566821566833566851566857566879566911566939566947566963566971566977566987566999567011567013567031567053567059567067567097567101567107567121567143567179567181567187567209567257567263567277567319567323567367567377567383567389567401567407567439567449567451567467567487567493567499567527567529567533567569567601567607567631567649567653567659567661567667567673567689567719567737567751567761567767567779567793567811567829567841567857567863567871567877567881567883567899567937567943567947567949567961567979567991567997568019568027568033568049568069568091568097568109568133568151568153568163568171568177568187568189568193568201568207568231568237568241568273568279568289568303568349568363568367568387568391568433568439568441568453568471568481568493568523568541568549568577568609568619568627568643568657568669568679568691568699568709568723568751568783568787568807568823568831568853568877568891568903568907568913568921568963568979568987568991568999569003569011569021569047569053569057569071569077569081569083569111569117569137569141569159569161569189569197569201569209569213569237569243569249569251569263569267569269569321569323569369569417569419569423569431569447569461569479569497569507569533569573569579569581569599569603569609569617569623569659569663569671569683569711569713569717569729569731569747569759569771569773569797569809569813569819569831569839569843569851569861569869569887569893569897569903569927569939569957569983570001570013570029570041570043570047570049570071570077570079570083570091570107570109570113570131570139570161570173570181570191570217570221570233570253570329570359570373570379570389570391570403570407570413570419570421570461570463570467570487570491570497570499570509570511570527570529570539570547570553570569570587570601570613570637570643570649570659570667570671570677570683570697570719570733570737570743570781570821570827570839570841570851570853570859570881570887570901570919570937570949570959570961570967570991571001571019571031571037571049571069571093571099571111571133571147571157571163571199571201571211571223571229571231571261571267571279571303571321571331571339571369571381571397571399571409571433571453571471571477571531571541571579571583571589571601571603571633571657571673571679571699571709571717571721571741571751571759571777571783571789571799571801571811571841571847571853571861571867571871571873571877571903571933571939571969571973572023572027572041572051572053572059572063572069572087572093572107572137572161572177572179572183572207572233572239572251572269572281572303572311572321572323572329572333572357572387572399572417572419572423572437572449572461572471572479572491572497572519572521572549572567572573572581572587572597572599572609572629572633572639572651572653572657572659572683572687572699572707572711572749572777572791572801572807572813572821572827572833572843572867572879572881572903572909572927572933572939572941572963572969572993573007573031573047573101573107573109573119573143573161573163573179573197573247573253573263573277573289573299573317573329573341573343573371573379573383573409573437573451573457573473573479573481573487573493573497573509573511573523573527573557573569573571573637573647573673573679573691573719573737573739573757573761573763573787573791573809573817573829573847573851573863573871573883573887573899573901573929573941573953573967573973573977574003574031574033574051574061574081574099574109574127574157574159574163574169574181574183574201574219574261574279574283574289574297574307574309574363574367574373574393574423574429574433574439574477574489574493574501574507574529574543574547574597574619574621574627574631574643574657574667574687574699574703574711574723574727574733574741574789574799574801574813574817574859574907574913574933574939574949574963574967574969575009575027575033575053575063575077575087575119575123575129575131575137575153575173575177575203575213575219575231575243575249575251575257575261575303575317575359575369575371575401575417575429575431575441575473575479575489575503575513575551575557575573575579575581575591575593575611575623575647575651575669575677575689575693575699575711575717575723575747575753575777575791575821575837575849575857575863575867575893575903575921575923575941575957575959575963575987576001576013576019576029576031576041576049576089576101576119576131576151576161576167576179576193576203576211576217576221576223576227576287576293576299576313576319576341576377576379576391576421576427576431576439576461576469576473576493576509576523576529576533576539576551576553576577576581576613576617576637576647576649576659576671576677576683576689576701576703576721576727576731576739576743576749576757576769576787576791576881576883576889576899576943576949576967576977577007577009577033577043577063577067577069577081577097577111577123577147577151577153577169577177577193577219577249577259577271577279577307577327577331577333577349577351577363577387577397577399577427577453577457577463577471577483577513577517577523577529577531577537577547577559577573577589577601577613577627577637577639577667577721577739577751577757577781577799577807577817577831577849577867577873577879577897577901577909577919577931577937577939577957577979577981578021578029578041578047578063578077578093578117578131578167578183578191578203578209578213578251578267578297578299578309578311578317578327578353578363578371578399578401578407578419578441578453578467578477578483578489578497578503578509578533578537578563578573578581578587578597578603578609578621578647578659578687578689578693578701578719578729578741578777578779578789578803578819578821578827578839578843578857578861578881578917578923578957578959578971578999579011579017579023579053579079579083579107579113579119579133579179579197579199579239579251579259579263579277579281579283579287579311579331579353579379579407579409579427579433579451579473579497579499579503579517579521579529579533579539579541579563579569579571579583579587579611579613579629579637579641579643579653579673579701579707579713579721579737579757579763579773579779579809579829579851579869579877579881579883579893579907579947579949579961579967579973579983580001580031580033580079580081580093580133580163580169580183580187580201580213580219580231580259580291580301580303580331580339580343580357580361580373580379580381580409580417580471580477580487580513580529580549580553580561580577580607580627580631580633580639580663580673580687580691580693580711580717580733580747580757580759580763580787580793580807580813580837580843580859580871580889580891580901580913580919580927580939580969580981580997581029581041581047581069581071581089581099581101581137581143581149581171581173581177581183581197581201581227581237581239581261581263581293581303581311581323581333581341581351581353581369581377581393581407581411581429581443581447581459581473581491581521581527581549581551581557581573581597581599581617581639581657581663581683581687581699581701581729581731581743581753581767581773581797581809581821581843581857581863581869581873581891581909581921581941581947581953581981581983582011582013582017582031582037582067582083582119582137582139582157582161582167582173582181582203582209582221582223582227582247582251582299582317582319582371582391582409582419582427582433582451582457582469582499582509582511582541582551582563582587582601582623582643582649582677582689582691582719582721582727582731582737582761582763582767582773582781582793582809582821582851582853582859582887582899582931582937582949582961582971582973582983583007583013583019583021583031583069583087583127583139583147583153583169583171583181583189583207583213583229583237583249583267583273583279583291583301583337583339583351583367583391583397583403583409583417583421583447583459583469583481583493583501583511583519583523583537583543583577583603583613583619583621583631583651583657583669583673583697583727583733583753583769583777583783583789583801583841583853583859583861583873583879583903583909583937583969583981583991583997584011584027584033584053584057584063584081584099584141584153584167584183584203584249584261584279584281584303584347584357584359584377584387584393584399584411584417584429584447584471584473584509584531584557584561584587584593584599584603584609584621584627584659584663584677584693584699584707584713584719584723584737584767584777584789584791584809584849584863584869584873584879584897584911584917584923584951584963584971584981584993584999585019585023585031585037585041585043585049585061585071585073585077585107585113585119585131585149585163585199585217585251585269585271585283585289585313585317585337585341585367585383585391585413585437585443585461585467585493585503585517585547585551585569585577585581585587585593585601585619585643585653585671585677585691585721585727585733585737585743585749585757585779585791585799585839585841585847585853585857585863585877585881585883585889585899585911585913585917585919585953585989585997586009586037586051586057586067586073586087586111586121586123586129586139586147586153586189586213586237586273586277586291586301586309586319586349586361586363586367586387586403586429586433586457586459586463586471586493586499586501586541586543586567586571586577586589586601586603586609586627586631586633586667586679586693586711586723586741586769586787586793586801586811586813586819586837586841586849586871586897586903586909586919586921586933586939586951586961586973586979586981587017587021587033587051587053587057587063587087587101587107587117587123587131587137587143587149587173587179587189587201587219587263587267587269587281587287587297587303587341587371587381587387587413587417587429587437587441587459587467587473587497587513587519587527587533587539587549587551587563587579587599587603587617587621587623587633587659587669587677587687587693587711587731587737587747587749587753587771587773587789587813587827587833587849587863587887587891587897587927587933587947587959587969587971587987587989587999588011588019588037588043588061588073588079588083588097588113588121588131588151588167588169588173588191588199588229588239588241588257588277588293588311588347588359588361588383588389588397588403588433588437588463588481588493588503588509588517588521588529588569588571588619588631588641588647588649588667588673588683588703588733588737588743588767588773588779588811588827588839588871588877588881588893588911588937588941588947588949588953588977589021589027589049589063589109589111589123589139589159589163589181589187589189589207589213589219589231589241589243589273589289589291589297589327589331589349589357589387589409589439589451589453589471589481589493589507589529589531589579589583589591589601589607589609589639589643589681589711589717589751589753589759589763589783589793589807589811589829589847589859589861589873589877589903589921589933589993589997590021590027590033590041590071590077590099590119590123590129590131590137590141590153590171590201590207590243590251590263590267590269590279590309590321590323590327590357590363590377590383590389590399590407590431590437590489590537590543590567590573590593590599590609590627590641590647590657590659590669590713590717590719590741590753590771590797590809590813590819590833590839590867590899590921590923590929590959590963590983590987591023591053591061591067591079591089591091591113591127591131591137591161591163591181591193591233591259591271591287591289591301591317591319591341591377591391591403591407591421591431591443591457591469591499591509591523591553591559591581591599591601591611591623591649591653591659591673591691591709591739591743591749591751591757591779591791591827591841591847591863591881591887591893591901591937591959591973592019592027592049592057592061592073592087592099592121592129592133592139592157592199592217592219592223592237592261592289592303592307592309592321592337592343592351592357592367592369592387592391592393592429592451592453592463592469592483592489592507592517592531592547592561592577592589592597592601592609592621592639592643592649592661592663592681592693592723592727592741592747592759592763592793592843592849592853592861592873592877592897592903592919592931592939592967592973592987592993593003593029593041593051593059593071593081593083593111593119593141593143593149593171593179593183593207593209593213593227593231593233593251593261593273593291593293593297593321593323593353593381593387593399593401593407593429593447593449593473593479593491593497593501593507593513593519593531593539593573593587593597593603593627593629593633593641593647593651593689593707593711593767593777593783593839593851593863593869593899593903593933593951593969593977593987593993594023594037594047594091594103594107594119594137594151594157594161594163594179594193594203594211594227594241594271594281594283594287594299594311594313594329594359594367594379594397594401594403594421594427594449594457594467594469594499594511594521594523594533594551594563594569594571594577594617594637594641594653594667594679594697594709594721594739594749594751594773594793594821594823594827594829594857594889594899594911594917594929594931594953594959594961594977594989595003595037595039595043595057595069595073595081595087595093595097595117595123595129595139595141595157595159595181595183595201595207595229595247595253595261595267595271595277595291595303595313595319595333595339595351595363595373595379595381595411595451595453595481595513595519595523595547595549595571595577595579595613595627595687595703595709595711595717595733595741595801595807595817595843595873595877595927595939595943595949595951595957595961595963595967595981596009596021596027596047596053596059596069596081596083596093596117596119596143596147596159596179596209596227596231596243596251596257596261596273596279596291596293596317596341596363596369596399596419596423596461596489596503596507596537596569596573596579596587596593596599596611596623596633596653596663596669596671596693596707596737596741596749596767596779596789596803596821596831596839596851596857596861596863596879596899596917596927596929596933596941596963596977596983596987597031597049597053597059597073597127597131597133597137597169597209597221597239597253597263597269597271597301597307597349597353597361597367597383597391597403597407597409597419597433597437597451597473597497597521597523597539597551597559597577597581597589597593597599597613597637597643597659597671597673597677597679597689597697597757597761597767597769597781597803597823597827597833597853597859597869597889597899597901597923597929597967597997598007598049598051598057598079598093598099598123598127598141598151598159598163598187598189598193598219598229598261598303598307598333598363598369598379598387598399598421598427598439598447598457598463598487598489598501598537598541598571598613598643598649598651598657598669598681598687598691598711598721598727598729598777598783598789598799598817598841598853598867598877598883598891598903598931598933598963598967598973598981598987598999599003599009599021599023599069599087599117599143599147599149599153599191599213599231599243599251599273599281599303599309599321599341599353599359599371599383599387599399599407599413599419599429599477599479599491599513599519599537599551599561599591599597599603599611599623599629599657599663599681599693599699599701599713599719599741599759599779599783599803599831599843599857599869599891599899599927599933599939599941599959599983599993599999600011600043600053600071600073600091600101600109600167600169600203600217600221600233600239600241600247600269600283600289600293600307600311600317600319600337600359600361600367600371600401600403600407600421600433600449600451600463600469600487600517600529600557600569600577600601600623600631600641600659600673600689600697600701600703600727600751600791600823600827600833600841600857600877600881600883600889600893600931600947600949600959600961600973600979600983601021601031601037601039601043601061601067601079601093601127601147601187601189601193601201601207601219601231601241601247601259601267601283601291601297601309601313601319601333601339601357601379601397601411601423601439601451601457601487601507601541601543601589601591601607601631601651601669601687601697601717601747601751601759601763601771601801601807601813601819601823601831601849601873601883601889601897601903601943601949601961601969601981602029602033602039602047602057602081602083602087602093602099602111602137602141602143602153602179602197602201602221602227602233602257602267602269602279602297602309602311602317602321602333602341602351602377602383602401602411602431602453602461602477602479602489602501602513602521602543602551602593602597602603602621602627602639602647602677602687602689602711602713602717602729602743602753602759602773602779602801602821602831602839602867602873602887602891602909602929602947602951602971602977602983602999603011603013603023603047603077603091603101603103603131603133603149603173603191603203603209603217603227603257603283603311603319603349603389603391603401603431603443603457603467603487603503603521603523603529603541603553603557603563603569603607603613603623603641603667603679603689603719603731603739603749603761603769603781603791603793603817603821603833603847603851603853603859603881603893603899603901603907603913603917603919603923603931603937603947603949603989604001604007604013604031604057604063604069604073604171604189604223604237604243604249604259604277604291604309604313604319604339604343604349604361604369604379604397604411604427604433604441604477604481604517604529604547604559604579604589604603604609604613604619604649604651604661604697604699604711604727604729604733604753604759604781604787604801604811604819604823604829604837604859604861604867604883604907604931604939604949604957604973604997605009605021605023605039605051605069605071605113605117605123605147605167605173605177605191605221605233605237605239605249605257605261605309605323605329605333605347605369605393605401605411605413605443605471605477605497605503605509605531605533605543605551605573605593605597605599605603605609605617605629605639605641605687605707605719605779605789605809605837605849605861605867605873605879605887605893605909605921605933605947605953605977605987605993606017606029606031606037606041606049606059606077606079606083606091606113606121606131606173606181606223606241606247606251606299606301606311606313606323606341606379606383606413606433606443606449606493606497606503606521606527606539606559606569606581606587606589606607606643606649606653606659606673606721606731606733606737606743606757606791606811606829606833606839606847606857606863606899606913606919606943606959606961606967606971606997607001607003607007607037607043607049607063607067607081607091607093607097607109607127607129607147607151607153607157607163607181607199607213607219607249607253607261607301607303607307607309607319607331607337607339607349607357607363607417607421607423607471607493607517607531607549607573607583607619607627607667607669607681607697607703607721607723607727607741607769607813607819607823607837607843607861607883607889607909607921607931607933607939607951607961607967607991607993608011608029608033608087608089608099608117608123608129608131608147608161608177608191608207608213608269608273608297608299608303608339608347608357608359608369608371608383608389608393608401608411608423608429608431608459608471608483608497608519608521608527608581608591608593608609608611608633608653608659608669608677608693608701608737608743608749608759608767608789608819608831608843608851608857608863608873608887608897608899608903608941608947608953608977608987608989608999609043609047609067609071609079609101609107609113609143609149609163609173609179609199609209609221609227609233609241609253609269609277609283609289609307609313609337609359609361609373609379609391609397609403609407609421609437609443609461609487609503609509609517609527609533609541609571609589609593609599609601609607609613609617609619609641609673609683609701609709609743609751609757609779609781609803609809609821609859609877609887609907609911609913609923609929609979609989609991609997610031610063610081610123610157610163610187610193610199610217610219610229610243610271610279610289610301610327610331610339610391610409610417610429610439610447610457610469610501610523610541610543610553610559610567610579610583610619610633610639610651610661610667610681610699610703610721610733610739610741610763610781610783610787610801610817610823610829610837610843610847610849610867610877610879610891610913610919610921610933610957610969610993611011611027611033611057611069611071611081611101611111611113611131611137611147611189611207611213611257611263611279611293611297611323611333611389611393611411611419611441611449611453611459611467611483611497611531611543611549611551611557611561611587611603611621611641611657611671611693611707611729611753611791611801611803611827611833611837611839611873611879611887611903611921611927611939611951611953'\n    return primes[a:a + b]\n    pass", "entry_point": "solve", "task_id": "TACO_lite/620", "input_output_examples": [[[10, 5], [2, 2]], [["19232"], ["57"]]]}
{"requirement": "def divisors(n):\n\"\"\"Count the number of divisors of a positive integer `n`.\n\nRandom tests go up to `n = 500000`.\n\n## Examples\n```python\ndivisors(4)  == 3  # 1, 2, 4\ndivisors(5)  == 2  # 1, 5\ndivisors(12) == 6  # 1, 2, 3, 4, 6, 12\ndivisors(30) == 8  # 1, 2, 3, 5, 6, 10, 15, 30\n```\n\"\"\"", "inputs": [[1], [4], [5], [12], [25], [30], [4096]], "outputs": [[1], [3], [2], [6], [3], [8], [13]], "starter_code": "def divisors(n):", "canonical_solution": "def divisors(n):\n    return len([l_div for l_div in range(1, n + 1) if n % l_div == 0])", "entry_point": "divisors", "task_id": "TACO_lite/621", "input_output_examples": [[[4], [5], [12], [30]], [[3], [2], [6], [8]]]}
{"requirement": "def yellow_be_gone(s):\n\"\"\"## The Story\nGreen Lantern's long hours of study and practice with his ring have really paid off -- his skills, focus, and control have improved so much that now he can even use his ring to update and redesign his web site. Earlier today he was focusing his will and a beam from his ring upon the Justice League web server, while intensely brainstorming and visualizing in minute detail different looks and ideas for his web site, and when he finished and reloaded his home page, he was absolutely thrilled to see that among other things it now displayed\n\n~~~~\nIn brightest day, in blackest night,\nThere's nothing cooler than my site!\n~~~~\n\nin his favorite font in very large blinking green letters.\n\nThe problem is, Green Lantern's ring has no power over anything yellow, so if he's experimenting with his web site and accidentally changes some text or background color to yellow, he will no longer be able to make any changes to those parts of the content or presentation (because he doesn't actually know any HTML, CSS, programming languages, frameworks, etc.) until he gets a more knowledgable friend to edit the code for him.\n\n## Your Mission\nYou can help Green Lantern by writing a function that will replace any color property values that are too yellow with shades of green or blue-green. Presumably at a later time the two of you will be doing some testing to find out at exactly which RGB values yellow stops being yellow and starts being off-white, orange, brown, etc. as far as his ring is concerned, but here's the plan to get version 1.0 up and running as soon as possible:\n\nYour function will receive either an HTML color name or a six-digit hex color code. (You're not going to bother with other types of color codes just now because you don't think they will come up.) If the color is too yellow, your function needs to return a green or blue-green shade instead, but if it is not too yellow, it needs to return the original color name or hex color code unchanged.\n\n### HTML Color Names\n(If don't know what HTML color names are, take a look at this HTML colors names reference.)\n\nFor HMTL color names, you are going to start out trying a pretty strict definition of yellow, replacing any of the following colors as specified:\n\n~~~~\nGold => ForestGreen\nKhaki => LimeGreen\nLemonChiffon => PaleGreen\nLightGoldenRodYellow => SpringGreen\nLightYellow => MintCream\nPaleGoldenRod => LightGreen\nYellow => Lime\n~~~~\n\nHTML color names are case-insensitive, so your function will need to be able to identify the above yellow shades regardless of the cases used, but should output the green shades as capitalized above.\n\nSome examples:\n```\n\"lemonchiffon\"    \"PaleGreen\"\n\"GOLD\"            \"ForestGreen\"\n\"pAlEgOlDeNrOd\"   \"LightGreen\"\n\"BlueViolet\"      \"BlueViolet\"\n```\n\n### Hex Color Codes\n(If you don't know what six-digit hex color codes are, take a look at this Wikipedia description. Basically the six digits are made up of three two-digit numbers in base 16, known as hexidecimal or hex, from 00 to FF (equivalent to 255 in base 10, also known as decimal), with the first two-digit number specifying the color's red value, the second the green value, and the third blue.)\n\nWith six-digit color hex codes, you are going to start out going really overboard, interpreting as \"yellow\" any hex code where the red (R) value and the green (G) value are each greater than the blue (B) value. When you find one of these \"yellow\" hex codes, your function will take the three hex values and rearrange them that the largest goes to G, the middle goes to B, and the smallest to R. \n\nFor example, with the six-digit hex color code `#FFD700`, which has an R value of hex FF (decimal 255), a G value of hex D7 (decimal 215), and a B value of hex 00 (decimal 0), as the R and G values are each larger than the B value, you would return it as `#00FFD7` -- the FF reassigned to G, the D7 to B, and the 00 to R. \n\nHex color codes are also case-insensitive, but your function should output them in the same case they were received in, just for consistency with whatever style is being used.\n\nSome examples:\n```\n\"#000000\"   \"#000000\"\n\"#b8860b\"   \"#0bb886\"\n\"#8FBC8F\"   \"#8FBC8F\"\n\"#C71585\"   \"#C71585\"\n```\n\"\"\"", "inputs": [["lemonchiffon"], ["GOLD"], ["pAlEgOlDeNrOd"], ["BlueViolet"], ["#000000"], ["#b8860b"], ["#8FBC8F"], ["#C71585"]], "outputs": [["PaleGreen"], ["ForestGreen"], ["LightGreen"], ["BlueViolet"], ["#000000"], ["#0bb886"], ["#8FBC8F"], ["#C71585"]], "starter_code": "def yellow_be_gone(s):", "canonical_solution": "def yellow_be_gone(s):\n    d = {'gold': 'ForestGreen', 'khaki': 'LimeGreen', 'lemonchiffon': 'PaleGreen', 'lightgoldenrodyellow': 'SpringGreen', 'lightyellow': 'MintCream', 'palegoldenrod': 'LightGreen', 'yellow': 'Lime'}\n    if s[0] == '#':\n        R, G, B = (s[1:3], s[3:5], s[5:])\n        if B < G and B < R:\n            R, B, G = sorted([R, G, B])\n            s = '#' + R + G + B\n    return d.get(s.lower(), s)", "entry_point": "yellow_be_gone", "task_id": "TACO_lite/622", "input_output_examples": [[["lemonchiffon"], ["GOLD"], ["pAlEgOlDeNrOd"], ["BlueViolet"], ["#000000"], ["#b8860b"], ["#8FBC8F"], ["#C71585"]], [["PaleGreen"], ["ForestGreen"], ["LightGreen"], ["BlueViolet"], ["#000000"], ["#0bb886"], ["#8FBC8F"], ["#C71585"]]]}
{"requirement": "def vowel_2_index(string):\n\"\"\"Write a function \n\n```python\nvowel_2_index```\n\nthat takes in a string and replaces all the vowels [a,e,i,o,u] with their respective positions within that string. \nE.g: \n\n```python\nvowel_2_index('this is my string') == 'th3s 6s my str15ng'\nvowel_2_index('Codewars is the best site in the world') == 'C2d4w6rs 10s th15 b18st s23t25 27n th32 w35rld'\nvowel_2_index('') == ''\n```\n Your function should be case insensitive to the vowels.\n\"\"\"", "inputs": [["this is my string"], ["Codewars is the best site in the world"], ["Tomorrow is going to be raining"], [""], ["90's cornhole Austin, pickled butcher yr messenger bag gastropub next level leggings listicle meditation try-hard Vice. Taxidermy gastropub gentrify, meh fap organic ennui fingerstache pickled vegan. Seitan sustainable PBR&B cornhole VHS. Jean shorts actually bitters ugh blog Intelligentsia. Artisan Kickstarter DIY, fixie cliche salvia lo-fi four loko. PBR&B Odd Future ugh fingerstache cray Wes Anderson chia typewriter iPhone bespoke four loko, Intelligentsia photo booth direct trade. Aesthetic Tumblr Portland XOXO squid, synth viral listicle skateboard four dollar toast cornhole Blue Bottle semiotics."]], "outputs": [["th3s 6s my str15ng"], ["C2d4w6rs 10s th15 b18st s23t25 27n th32 w35rld"], ["T2m4rr7w 10s g1415ng t20 b23 r2627n29ng"], [""], ["90's c7rnh11l13 1516st19n, p24ckl28d b32tch36r yr m43ss46ng49r b53g g57str61p63b n67xt l72v74l l78gg81ngs l87st90cl93 m96d98t100t102103n try-h111rd V116c118. T122x124d126rmy g132str136p138b g142ntr146fy, m152h f156p 159rg162n164c 167nn170171 f174ng177rst181ch184 p187ckl191d v195g197n. S202203t205n s209st212213n215bl218 PBR&B c227rnh231l233 VHS. J241242n sh247rts 252ct255256lly b262tt265rs 269gh bl275g 278nt281ll284g286nts290291. 294rt297s299n K303ckst308rt311r D315Y, f320x322323 cl327ch330 s333lv336337 l340-f343 f346347r l351k353. PBR&B 362dd F367t369r371 373gh f378ng381rst385ch388 cr392y W396s 399nd402rs405n ch410411 typ416wr419t421r 424Ph427n429 b432sp435k437 f440441r l445k447, 450nt453ll456g458nts462463 ph467t469 b472473th d478r480ct tr486d488. 491492sth496t498c T502mblr P509rtl513nd X518X520 sq524525d, synth v536r538l l542st545cl548 sk552t554b556557rd f562563r d567ll570r t574575st c580rnh584l586 Bl590591 B594ttl598 s601m603604t606cs."]], "starter_code": "def vowel_2_index(string):", "canonical_solution": "def vowel_2_index(string):\n    vowels = 'aeiouAEIOU'\n    return ''.join((x if x not in vowels else str(n + 1) for n, x in enumerate(string)))", "entry_point": "vowel_2_index", "task_id": "TACO_lite/623", "input_output_examples": [[["this is my string"], ["Codewars is the best site in the world"], [""]], [["th3s 6s my str15ng"], ["C2d4w6rs 10s th15 b18st s23t25 27n th32 w35rld"], [""]]]}
{"requirement": "def converter(mpg):\n\"\"\"Sometimes, I want to quickly be able to convert miles per imperial gallon into kilometers per liter.\n\nCreate an application that will display the number of kilometers per liter (output) based on the number of miles per imperial gallon (input).\n\nMake sure to round off the result to two decimal points. If the answer ends with a 0, it should be rounded off without the 0. So instead of 5.50, we should get 5.5.\n\nSome useful associations relevant to this kata:\n1 Imperial Gallon = 4.54609188 litres\n1 Mile = 1.609344 kilometres\n\"\"\"", "inputs": [[10], [20], [30], [24], [36]], "outputs": [[3.54], [7.08], [10.62], [8.5], [12.74]], "starter_code": "def converter(mpg):", "canonical_solution": "def converter(mpg):\n    kpl = round(mpg * 1.609344 / 4.54609188, 2)\n    return kpl", "entry_point": "converter", "task_id": "TACO_lite/624", "input_output_examples": [[[10]], [[3.54]]]}
{"requirement": "def flatten(lst):\n\"\"\"Write a function that flattens an `Array` of `Array` objects into a flat `Array`.  Your function must only do one level of flattening.\n\n```python\nflatten [1,2,3] # => [1,2,3]\nflatten [[1,2,3],[\"a\",\"b\",\"c\"],[1,2,3]]  # => [1,2,3,\"a\",\"b\",\"c\",1,2,3]\nflatten [[[1,2,3]]] # => [[1,2,3]]\n```\n\"\"\"", "inputs": [[[[[3], [4], [5]], [9], [9, 9], [8], [[1, 2, 3]]]], [[[[3], [4], [5]], [9], [9, 9], [8], [[1, 2, 3], [77777]]]], [[[[3], [4], [5]], [9], [9, 9], [8], [[1, 2, 3], [77777]], "a"]], [[[[3], [4], [5]], [9], [9, 9], [8], [[1, 2, 3], [77777]], [["a"]]]]], "outputs": [[[[3], [4], [5], 9, 9, 9, 8, [1, 2, 3]]], [[[3], [4], [5], 9, 9, 9, 8, [1, 2, 3], [77777]]], [[[3], [4], [5], 9, 9, 9, 8, [1, 2, 3], [77777], "a"]], [[[3], [4], [5], 9, 9, 9, 8, [1, 2, 3], [77777], ["a"]]]], "starter_code": "def flatten(lst):", "canonical_solution": "def flatten(lst):\n    r = []\n    for x in lst:\n        if type(x) is list:\n            r.extend(x)\n        else:\n            r.append(x)\n    return r", "entry_point": "flatten", "task_id": "TACO_lite/625", "input_output_examples": [[[[1, 2, 3]], [[1, 2, 3], ["a", "b", "c"], [1, 2, 3]], [[[1, 2, 3]]]], [[1, 2, 3], [1, 2, 3, "a", "b", "c", 1, 2, 3], [[1, 2, 3]]]]}
{"requirement": "def a(n):\n\"\"\"- Input: Integer `n`\n- Output: String\n\nExample:\n\n`a(4)` prints as\n```\n   A   \n  A A  \n A A A \nA     A\n```\n\n`a(8)` prints as\n```\n       A       \n      A A      \n     A   A     \n    A     A    \n   A A A A A   \n  A         A  \n A           A \nA             A\n```\n\n`a(12)` prints as\n```\n           A           \n          A A          \n         A   A         \n        A     A        \n       A       A       \n      A         A      \n     A A A A A A A     \n    A             A    \n   A               A   \n  A                 A  \n A                   A \nA                     A\n```\nNote:\n\n- Each line's length is `2n - 1`\n- Each line should be concatenate by line break `\"\\n\"`\n- If `n` is less than `4`, it should return `\"\"`\n- If `n` is odd, `a(n) = a(n - 1)`, eg `a(5) == a(4); a(9) == a(8)`\n\"\"\"", "inputs": [[4], [7], [11], [30], [-5], [0], [3]], "outputs": [["   A   \n  A A  \n A A A \nA     A"], ["     A     \n    A A    \n   A   A   \n  A A A A  \n A       A \nA         A"], ["         A         \n        A A        \n       A   A       \n      A     A      \n     A       A     \n    A A A A A A    \n   A           A   \n  A             A  \n A               A \nA                 A"], ["                             A                             \n                            A A                            \n                           A   A                           \n                          A     A                          \n                         A       A                         \n                        A         A                        \n                       A           A                       \n                      A             A                      \n                     A               A                     \n                    A                 A                    \n                   A                   A                   \n                  A                     A                  \n                 A                       A                 \n                A                         A                \n               A                           A               \n              A A A A A A A A A A A A A A A A              \n             A                               A             \n            A                                 A            \n           A                                   A           \n          A                                     A          \n         A                                       A         \n        A                                         A        \n       A                                           A       \n      A                                             A      \n     A                                               A     \n    A                                                 A    \n   A                                                   A   \n  A                                                     A  \n A                                                       A \nA                                                         A"], [""], [""], [""]], "starter_code": "def a(n):", "canonical_solution": "def a(n):\n    if n % 2 != 0:\n        n = n - 1\n    if n < 4:\n        return ''\n    side = ' ' * (n - 1)\n    li = [side + 'A' + side]\n    for i in range(1, n):\n        side = side[1:]\n        middle = 'A ' * (i - 1) if i == n / 2 else '  ' * (i - 1)\n        li.append(side + 'A ' + middle + 'A' + side)\n    return '\\n'.join(li)", "entry_point": "a", "task_id": "TACO_lite/626", "input_output_examples": [[[4], [8], [12]], [["   A   \n  A A  \n A A A \nA     A"], ["       A       \n      A A      \n     A   A     \n    A     A    \n   A A A A A   \n  A         A  \n A           A \nA             A"], ["           A           \n          A A          \n         A   A         \n        A     A        \n       A       A       \n      A         A      \n     A A A A A A A     \n    A             A    \n   A               A   \n  A                 A  \n A                   A \nA                     A"]]]}
{"requirement": "def checkered_board(n):\n\"\"\"Write a function which takes one parameter representing the dimensions of a checkered board. The board will always be square, so 5 means you will need a 5x5 board.\n\nThe dark squares will be represented by a unicode white square, while the light squares will be represented by a unicode black square (the opposite colours ensure the board doesn't look reversed on code wars' dark background). It should return a string of the board with a space in between each square and taking into account new lines. \n\nAn even number should return a board that begins with a dark square. An odd number should return a board that begins with a light square.\n\nThe input is expected to be a whole number that's at least two, and returns false otherwise (Nothing in Haskell).\n\nExamples:\n\n```python\ncheckered_board(5)\n```\n\nreturns the string\n```\n■ □ ■ □ ■\n□ ■ □ ■ □\n■ □ ■ □ ■\n□ ■ □ ■ □\n■ □ ■ □ ■\n```\n\n**There should be no trailing white space at the end of each line, or new line characters at the end of the string.**\n\n**Note**   \nDo not use HTML entities for the squares (e.g. `□` for white square) as the code doesn't consider it a valid square. A good way to check is if your solution prints a correct checker board on your local terminal.  \n\n**Ruby note:**\nCodeWars has encoding issues with rendered unicode in Ruby.\nYou'll need to use unicode source code (e.g. \"\\u25A0\") instead of rendered unicode (e.g \"■\").\n\"\"\"", "inputs": [[1], [0], [-1], ["test"], [null], [[]], [2]], "outputs": [[false], [false], [false], [false], [false], [false], ["□ ■\n■ □"]], "starter_code": "def checkered_board(n):", "canonical_solution": "def checkered_board(n):\n    return isinstance(n, int) and n > 1 and '\\n'.join((' '.join(('■' if (x + y) % 2 ^ n % 2 else '□' for y in range(n))) for x in range(n)))", "entry_point": "checkered_board", "task_id": "TACO_lite/627", "input_output_examples": [[[5], [1]], [["■ □ ■ □ ■\n□ ■ □ ■ □\n■ □ ■ □ ■\n□ ■ □ ■ □\n■ □ ■ □ ■"], [false]]]}
{"requirement": "def to_chinese_numeral(n):\n\"\"\"Create a function that takes a Number as its argument and returns a Chinese numeral string. You don't need to validate the input argument, it will always be a Number in the range `[-99999.999, 99999.999]`, rounded to 8 decimal places.\n\nSimplified Chinese numerals have characters representing each number from 0 to 9 and additional numbers representing larger numbers like 10, 100, 1000, and 10000. \n\n```\n0 líng 零\n1 yī 一\n2 èr 二\n3 sān 三\n4 sì 四\n5 wǔ 五\n6 liù 六\n7 qī 七\n8 bā 八\n9 jiǔ 九\n10 shí 十\n100 bǎi 百\n1000 qiān 千\n10000 wàn 万\n```\n\nMultiple-digit numbers are constructed by first the digit value (1 to 9) and then the place multiplier (such as 10, 100, 1000), starting with the most significant digit. A special case is made for 10 - 19 where the leading digit value (yī 一) is dropped. Note that this special case is only made for the actual values 10 - 19, not any larger values.\n\n```\n10 十\n11 十一\n18 十八\n21 二十一\n110 一百一十\n123 一百二十三\n24681 二万四千六百八十一\n```\n\nTrailing zeros are omitted, but interior zeros are grouped together and indicated by a single 零 character without giving the place multiplier.\n\n```\n10 十\n20 二十\n104 一百零四\n1004 一千零四\n10004 一万零四\n10000 一万\n```\n\nDecimal numbers are constructed by first writing the whole number part, and then inserting a point (diǎn 点), followed by the decimal portion. The decimal portion is expressed using only the digits 0 to 9, without any positional characters and without grouping zeros.\n\n```\n0.1 零点一\n123.45 一百二十三点四五\n```\n\nNegative numbers are the same as other numbers, but add a 负 (fù) before the number.\n\nFor more information, please see http://en.wikipedia.org/wiki/Chinese_numerals.\n\"\"\"", "inputs": [[0], [9], [99], [999], [9999], [99999], [-5], [-54], [-543], [-5432], [-54321], [0.5], [0.25], [0.125], [0.0625], [0.03125], [10], [14], [18], [20], [24], [50], [100], [110], [111], [-10], [-14], [-18], [-20], [-100], [-110], [-111], [1000], [10000], [10306], [10006], [10006.005], [-10306.005], [-10.000001], [99999.999], [-99999.999]], "outputs": [["零"], ["九"], ["九十九"], ["九百九十九"], ["九千九百九十九"], ["九万九千九百九十九"], ["负五"], ["负五十四"], ["负五百四十三"], ["负五千四百三十二"], ["负五万四千三百二十一"], ["零点五"], ["零点二五"], ["零点一二五"], ["零点零六二五"], ["零点零三一二五"], ["十"], ["十四"], ["十八"], ["二十"], ["二十四"], ["五十"], ["一百"], ["一百一十"], ["一百一十一"], ["负十"], ["负十四"], ["负十八"], ["负二十"], ["负一百"], ["负一百一十"], ["负一百一十一"], ["一千"], ["一万"], ["一万零三百零六"], ["一万零六"], ["一万零六点零零五"], ["负一万零三百零六点零零五"], ["负十点零零零零零一"], ["九万九千九百九十九点九九九"], ["负九万九千九百九十九点九九九"]], "starter_code": "def to_chinese_numeral(n):", "canonical_solution": "import re\nNEG, DOT, _, *DIGS = '负点 零一二三四五六七八九'\nPOWS = ' 十 百 千 万'.split(' ')\nNUMS = {str(i): c for i, c in enumerate(DIGS)}\nfor n in range(10):\n    NUMS[str(n + 10)] = POWS[1] + DIGS[n] * bool(n)\n\ndef to_chinese_numeral(n):\n    ss = str(abs(n)).split('.')\n    return NEG * (n < 0) + parse(ss[0]) + (len(ss) > 1 and decimals(ss[1]) or '')\n\ndef decimals(digs):\n    return DOT + ''.join((NUMS[d] for d in digs))\n\ndef parse(s):\n    if s in NUMS:\n        return NUMS[s]\n    s = ''.join(reversed([NUMS[d] + POWS[i] * (d != '0') for i, d in enumerate(reversed(s))]))\n    return re.sub(f'零+$|(?<=零)零+', '', s)", "entry_point": "to_chinese_numeral", "task_id": "TACO_lite/628", "input_output_examples": [[[0], [10], [11], [18], [21], [110], [123], [24681], [20], [104], [1004], [10004], [10000], [0.1], [123.45]], [["零"], ["十"], ["十一"], ["十八"], ["二十一"], ["一百一十"], ["一百二十三"], ["二万四千六百八十一"], ["二十"], ["一百零四"], ["一千零四"], ["一万零四"], ["一万"], ["零点一"], ["一百二十三点四五"]]]}
{"requirement": "def words_to_object(s):\n\"\"\"You're given a string containing a sequence of words separated with whitespaces. Let's say it is a sequence of patterns: a name and a corresponding number - like this:\n\n```\"red 1 yellow 2 black 3 white 4\"```\n\nYou want to turn it into a different **string** of objects you plan to work with later on - like this:\n\n```\"[{name : 'red', id : '1'}, {name : 'yellow', id : '2'}, {name : 'black', id : '3'}, {name : 'white', id : '4'}]\"```\n\nDoing this manually is a pain. So you've decided to write a short function that would make the computer do the job for you. Keep in mind, the pattern isn't necessarily a word and a number. Consider anything separeted by a whitespace, just don't forget: an array of objects with two elements: name and id.\n\nAs a result you'll have a string you may just copy-paste whenever you feel like defining a list of objects - now without the need to put in names, IDs, curly brackets, colon signs, screw up everything, fail searching for a typo and begin anew. This might come in handy with large lists.\n\"\"\"", "inputs": [["red 1 yellow 2 black 3 white 4"], ["1 red 2 white 3 violet 4 green"], ["1 1 2 2 3 3 4 4"], ["#@&fhds 123F3f 2vn2# 2%y6D @%fd3 @!#4fs W@R^g WE56h%"], [""]], "outputs": [["[{name : 'red', id : '1'}, {name : 'yellow', id : '2'}, {name : 'black', id : '3'}, {name : 'white', id : '4'}]"], ["[{name : '1', id : 'red'}, {name : '2', id : 'white'}, {name : '3', id : 'violet'}, {name : '4', id : 'green'}]"], ["[{name : '1', id : '1'}, {name : '2', id : '2'}, {name : '3', id : '3'}, {name : '4', id : '4'}]"], ["[{name : '#@&fhds', id : '123F3f'}, {name : '2vn2#', id : '2%y6D'}, {name : '@%fd3', id : '@!#4fs'}, {name : 'W@R^g', id : 'WE56h%'}]"], ["[]"]], "starter_code": "def words_to_object(s):", "canonical_solution": "import re\n\ndef words_to_object(s):\n    return '[' + re.sub('([^ ]+) ([^ ]+)', \"{name : '\\\\1', id : '\\\\2'},\", s).strip(',') + ']'", "entry_point": "words_to_object", "task_id": "TACO_lite/629", "input_output_examples": [[["red 1 yellow 2 black 3 white 4"]], [["[{name : 'red', id : '1'}, {name : 'yellow', id : '2'}, {name : 'black', id : '3'}, {name : 'white', id : '4'}]"]]]}
{"requirement": "def arithmetic_sequence_sum(a, r, n):\n\"\"\"In your class, you have started lessons about \"arithmetic progression\". Because you are also a programmer, you have decided to write a function.\n\nThis function, arithmetic_sequence_sum(a, r, n), should return the sum of the first (n) elements of a sequence in which each element is the sum of the given integer (a), and a number of occurences of the given integer (r), based on the element's position within the sequence.\n\nFor example:\n\narithmetic_sequence_sum(2, 3, 5) should return 40:\n\n```\n1     2        3          4            5\na + (a+r) + (a+r+r) + (a+r+r+r) + (a+r+r+r+r) \n2 + (2+3) + (2+3+3) + (2+3+3+3) + (2+3+3+3+3) = 40\n```\n\"\"\"", "inputs": [[3, 2, 20], [2, 2, 10], [1, -2, 10]], "outputs": [[440], [110], [-80]], "starter_code": "def arithmetic_sequence_sum(a, r, n):", "canonical_solution": "def arithmetic_sequence_sum(a, r, n):\n    return n * (a + a + (n - 1) * r) / 2", "entry_point": "arithmetic_sequence_sum", "task_id": "TACO_lite/630", "input_output_examples": [[[2, 3, 5]], [[40]]]}
{"requirement": "def decompose(n):\n\"\"\"Given a rational number n\n\n``` n >= 0, with denominator strictly positive```  \n\n- as a string (example: \"2/3\" in Ruby, Python, Clojure, JS, CS, Go) \n- or as two strings (example: \"2\" \"3\" in Haskell, Java, CSharp, C++, Swift) \n- or as a rational or decimal number (example: 3/4, 0.67 in R) \n- or two integers (Fortran)\n\ndecompose \nthis number as a sum of rationals with numerators equal to one and without repetitions\n(2/3 = 1/2 + 1/6 is correct but not 2/3 = 1/3 + 1/3, 1/3 is repeated).\n    \nThe algorithm must be \"greedy\", so at each stage the new rational obtained in the decomposition must have a denominator as small as possible. \nIn this manner the sum of a few fractions in the decomposition gives a rather good approximation of the rational to decompose.\n    \n2/3 = 1/3 + 1/3 doesn't fit because of the repetition but also because the first 1/3 has a denominator bigger than the one in 1/2 \nin the decomposition 2/3 = 1/2 + 1/6.\n    \n### Example: \n(You can see other examples in \"Sample Tests:\")\n```\ndecompose(\"21/23\") or \"21\" \"23\" or 21/23 should return \n\n[\"1/2\", \"1/3\", \"1/13\", \"1/359\", \"1/644046\"] in Ruby, Python, Clojure, JS, CS, Haskell, Go\n\n\"[1/2, 1/3, 1/13, 1/359, 1/644046]\" in Java, CSharp, C++\n\n\"1/2,1/3,1/13,1/359,1/644046\" in C, Swift, R\n```  \n\n### Notes\n1) The decomposition of 21/23 as\n```\n21/23 = 1/2 + 1/3 + 1/13 + 1/598 + 1/897\n```\nis exact but don't fulfill our requirement because 598 is bigger than 359.\nSame for \n```\n21/23 = 1/2 + 1/3 + 1/23 + 1/46 + 1/69 (23 is bigger than 13)\nor \n21/23 = 1/2 + 1/3 + 1/15 + 1/110 + 1/253 (15 is bigger than 13).\n```\n    \n2) The rational given to decompose could be greater than one or equal to one, in which case the first \"fraction\" will be an integer \n(with an implicit denominator of 1). \n\n3) If the numerator parses to zero the function \"decompose\" returns [] (or \"\".\n\n4) The number could also be a decimal which can be expressed as a rational. \n\nexamples:\n\n`0.6` in Ruby, Python, Clojure,JS, CS, Julia, Go\n  \n`\"66\" \"100\"` in Haskell, Java, CSharp, C++, C, Swift, Scala, Kotlin\n\n`0.67` in R.\n\n**Ref:**\nhttp://en.wikipedia.org/wiki/Egyptian_fraction\n\"\"\"", "inputs": [["0"], ["3/4"], ["12/4"], ["4/5"], ["0.66"], ["22/23"], ["1001/3456"], ["16/17"], ["30/45"], ["1.25"], ["75/3"], ["2/8"], ["0.9"]], "outputs": [[[]], [["1/2", "1/4"]], [["3"]], [["1/2", "1/4", "1/20"]], [["1/2", "1/7", "1/59", "1/5163", "1/53307975"]], [["1/2", "1/3", "1/9", "1/83", "1/34362"]], [["1/4", "1/26", "1/848", "1/2381184"]], [["1/2", "1/3", "1/10", "1/128", "1/32640"]], [["1/2", "1/6"]], [["1", "1/4"]], [["25"]], [["1/4"]], [["1/2", "1/3", "1/15"]]], "starter_code": "def decompose(n):", "canonical_solution": "from math import ceil\nfrom fractions import Fraction as F\n\ndef decompose(n):\n    f = F(n)\n    ff = int(f)\n    result = [str(ff)] if ff else []\n    f -= ff\n    while f > 0:\n        x = F(1, int(ceil(f ** (-1))))\n        f -= x\n        result.append(str(x))\n    return result", "entry_point": "decompose", "task_id": "TACO_lite/631", "input_output_examples": [[["21/23"], ["66", "100"], [0.6], ["0"]], [["1/2", "1/3", "1/13", "1/359", "1/644046"], ["1/2", "1/3", "1/13", "1/598", "1/897"], ["3/5"], []]]}
{"requirement": "def solve(a, b):\n\"\"\"The prime number sequence starts with: `2,3,5,7,11,13,17,19...`. Notice that `2` is in position `one`. \n\n`3` occupies position `two`, which is a prime-numbered position. Similarly, `5`, `11` and `17` also occupy prime-numbered positions. We shall call primes such as `3,5,11,17` dominant primes because they occupy prime-numbered positions in the prime number sequence. Let's call this `listA`. \n\nAs you can see from listA, for the prime range `range(0,10)`, there are `only two` dominant primes (`3` and `5`) and the sum of these primes is: `3 + 5 = 8`. \n\nSimilarly, as shown in listA, in the `range (6,20)`, the dominant primes in this range are `11` and `17`, with a sum of `28`.\n\nGiven a `range (a,b)`, what is the sum of dominant primes within that range? Note that  `a <= range <= b` and `b` will not exceed `500000`.\n\nGood luck!\n\nIf you like this Kata, you will enjoy:\n\n[Simple Prime Streaming](https://www.codewars.com/kata/5a908da30025e995880000e3)\n\n[Sum of prime-indexed elements](https://www.codewars.com/kata/59f38b033640ce9fc700015b)\n\n[Divisor harmony](https://www.codewars.com/kata/59bf97cd4f98a8b1cd00007e)\n\"\"\"", "inputs": [[0, 10], [2, 200], [200, 2000], [500, 10000], [1000, 100000], [2000, 200000], [3000, 400000], [4000, 500000]], "outputs": [[8], [1080], [48132], [847039], [52114889], [183035206], [650120994], [972664400]], "starter_code": "def solve(a, b):", "canonical_solution": "n = 500000\nsieve, PRIMES = ([0] * (n // 2 + 1), [0, 2])\nfor i in range(3, n + 1, 2):\n    if not sieve[i // 2]:\n        PRIMES.append(i)\n        for j in range(i ** 2, n + 1, i * 2):\n            sieve[j // 2] = 1\nDOMINANTS = []\nfor p in PRIMES:\n    if p >= len(PRIMES):\n        break\n    DOMINANTS.append(PRIMES[p])\n\ndef solve(a, b):\n    return sum((p for p in DOMINANTS if a <= p <= b))", "entry_point": "solve", "task_id": "TACO_lite/632", "input_output_examples": [[[0, 10], [6, 20]], [[8], [28]]]}
{"requirement": "def solve(s):\n\"\"\"In this Kata, you will be given a string and your task will be to return a list of ints detailing the count of uppercase letters, lowercase, numbers and special characters, as follows.\n\n```Haskell\nSolve(\"*'&ABCDabcde12345\") = [4,5,5,3]. \n--the order is: uppercase letters, lowercase, numbers and special characters.\n```\n\nMore examples in the test cases. \n\nGood luck!\n\"\"\"", "inputs": [["Codewars@codewars123.com"], ["bgA5<1d-tOwUZTS8yQ"], ["P*K4%>mQUDaG$h=cx2?.Czt7!Zn16p@5H"], ["RYT'>s&gO-.CM9AKeH?,5317tWGpS<*x2ukXZD"], ["$Cnl)Sr<7bBW-&qLHI!mY41ODe"], ["@mw>0=QD-iAx!rp9TaG?o&M%l$34L.nbft"]], "outputs": [[[1, 18, 3, 2]], [[7, 6, 3, 2]], [[9, 9, 6, 9]], [[15, 8, 6, 9]], [[10, 7, 3, 6]], [[7, 13, 4, 10]]], "starter_code": "def solve(s):", "canonical_solution": "def solve(s):\n    uc, lc, num, sp = (0, 0, 0, 0)\n    for ch in s:\n        if ch.isupper():\n            uc += 1\n        elif ch.islower():\n            lc += 1\n        elif ch.isdigit():\n            num += 1\n        else:\n            sp += 1\n    return [uc, lc, num, sp]", "entry_point": "solve", "task_id": "TACO_lite/633", "input_output_examples": [[["*'&ABCDabcde12345"], ["Codewars@codewars123.com"]], [[4, 5, 5, 3], [[1, 18, 3, 2]]]]}
{"requirement": "def generate_hashtag(s):\n\"\"\"The marketing team is spending way too much time typing in hashtags.   \nLet's help them with our own Hashtag Generator!\n\nHere's the deal:\n\n- It must start with a hashtag (`#`).\n- All words must have their first letter capitalized.\n- If the final result is longer than 140 chars it must return `false`.\n- If the input or the result is an empty string it must return `false`.\n\n\n## Examples\n\n```\n\" Hello there thanks for trying my Kata\"  =>  \"#HelloThereThanksForTryingMyKata\"\n\"    Hello     World   \"                  =>  \"#HelloWorld\"\n\"\"                                        =>  false\n```\n\"\"\"", "inputs": [[""], ["Codewars"], ["Codewars      "], ["Codewars Is Nice"], ["codewars is nice"], ["CodeWars is nice"], ["c i n"], ["codewars  is  nice"], ["Looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong Cat"]], "outputs": [[false], ["#Codewars"], ["#Codewars"], ["#CodewarsIsNice"], ["#CodewarsIsNice"], ["#CodewarsIsNice"], ["#CIN"], ["#CodewarsIsNice"], [false]], "starter_code": "def generate_hashtag(s):", "canonical_solution": "def generate_hashtag(s):\n    output = '#'\n    for word in s.split():\n        output += word.capitalize()\n    return False if len(s) == 0 or len(output) > 140 else output", "entry_point": "generate_hashtag", "task_id": "TACO_lite/634", "input_output_examples": [[[" Hello there thanks for trying my Kata"], ["    Hello     World   "], [""]], [["#HelloThereThanksForTryingMyKata"], ["#HelloWorld"], [false]]]}
{"requirement": "def numeric_formatter(template, data='1234567890'):\n\"\"\"Your goal is to create a function to format a number given a template; if the number is not present, use the digits `1234567890` to fill in the spaces.\n\nA few rules:\n\n* the template might consist of other numbers, special characters or the like: you need to replace only alphabetical characters (both lower- and uppercase);\n* if the given or default string representing the number is shorter than the template, just repeat it to fill all the spaces.\n\nA few examples:\n\n```python\nnumeric_formatter(\"xxx xxxxx xx\",\"5465253289\") == \"546 52532 89\"\nnumeric_formatter(\"xxx xxxxx xx\") == \"123 45678 90\"\nnumeric_formatter(\"+555 aaaa bbbb\", \"18031978\") == \"+555 1803 1978\"\nnumeric_formatter(\"+555 aaaa bbbb\") == \"+555 1234 5678\"\nnumeric_formatter(\"xxxx yyyy zzzz\") == \"1234 5678 9012\"\n```\n\"\"\"", "inputs": [["xxx xxxxx xx", "5465253289"], ["xxx xxxxx xx"], ["+555 aaaa bbbb", "18031978"], ["+555 aaaa bbbb"], ["xxxx yyyy zzzz"]], "outputs": [["546 52532 89"], ["123 45678 90"], ["+555 1803 1978"], ["+555 1234 5678"], ["1234 5678 9012"]], "starter_code": "def numeric_formatter(template, data='1234567890'):", "canonical_solution": "from itertools import cycle\n\ndef numeric_formatter(template, data='1234567890'):\n    data = cycle(data)\n    return ''.join((next(data) if c.isalpha() else c for c in template))", "entry_point": "numeric_formatter", "task_id": "TACO_lite/635", "input_output_examples": [[["xxx xxxxx xx", "5465253289"], ["xxx xxxxx xx"], ["+555 aaaa bbbb", "18031978"], ["+555 aaaa bbbb"], ["xxxx yyyy zzzz"]], [["546 52532 89"], ["123 45678 90"], ["+555 1803 1978"], ["+555 1234 5678"], ["1234 5678 9012"]]]}
{"requirement": "def f(n):\n\"\"\"We have a set of consecutive numbers from ```1``` to ```n```.\nWe want to count all the subsets that do not contain consecutive numbers.\nE.g.\n\nIf our set ```S1``` is equal to ```[1,2,3,4,5]```\nThe subsets that fulfill these property are:\n```\n[1],[2],[3],[4],[5],[1,3],[1,4],[1,5],[2,4],[2,5],[3,5],[1,3,5]\n```\nA total of      ```12   ``` subsets.\n\nFrom the set ```S2``` equals to```[1,2,3]```, it is obvious that we have only ```4``` subsets and are:\n```\n[1],[2],[3],[1,3]\n```\nMake a code that may give the amount of all these subsets for any integer       ```n >= 2       ```.\n\nFeatures of the random tests:\n```\nnumber of tests = 100 \n10 <= n <= 120\n```\n\"\"\"", "inputs": [[5], [3], [2], [20]], "outputs": [[12], [4], [2], [17710]], "starter_code": "def f(n):", "canonical_solution": "def f(n):\n    a, b = (0, 1)\n    for _ in range(n):\n        a, b = (b, a + b + 1)\n    return a", "entry_point": "f", "task_id": "TACO_lite/636", "input_output_examples": [[[5], [3]], [[12], [4]]]}
{"requirement": "Create a function that takes a list of one or more non-negative integers, and arranges them such that they form the largest possible number.\n\nExamples:\n\n`largestArrangement([4, 50, 8, 145])` returns 8504145 (8-50-4-145)\n\n`largestArrangement([4, 40, 7])` returns 7440 (7-4-40)\n\n`largestArrangement([4, 46, 7])` returns 7464 (7-46-4)\n\n`largestArrangement([5, 60, 299, 56])` returns 60565299 (60-56-5-299)\n\n`largestArrangement([5, 2, 1, 9, 50, 56])` returns 95655021 (9-56-5-50-21)", "inputs": [[[50, 2, 1, 9]], [[3655, 89]], [[8]], [[12, 13, 89, 155, 8, 26, 0]], [[76, 4, 3, 81, 514, 6, 716]], [[817, 6879, 163, 348, 8, 22, 47]], [[411, 742, 89, 691, 284]], [[587, 625, 638, 898, 122]], [[797, 535, 210, 87]], [[5, 2, 1, 9, 50, 56]], [[197, 853, 819]], [[23044, 2, 7626, 914, 7800]], [[451, 850, 85, 283, 4, 734, 605, 499, 249]], [[304, 12, 206, 584, 78, 69, 864, 860]], [[8346, 991, 25, 4, 67]], [[298, 268, 58, 598, 702, 603, 597]], [[422, 995, 500, 202, 772, 230, 258, 144, 752]], [[618, 514, 863, 195, 965, 262]], [[141, 63, 51, 966, 520, 48, 82, 14, 397]], [[756, 688, 8, 657, 912]], [[70, 7, 81, 28, 336, 246, 817, 77, 4, 550]], [[150, 398, 919, 890, 447, 285]], [[783, 19, 88, 5, 7]], [[10, 327, 6, 70, 13, 83, 482, 77]], [[8, 6, 590, 70]], [[6, 73, 79, 356, 7]], [[64, 29, 5, 9, 982, 3]], [[3487, 103559, 243]], [[7, 78, 79, 72, 709, 7, 94]]], "outputs": [[95021], [893655], [8], [8982615513120], [8176716651443], [881768794734822163], [89742691411284], [898638625587122], [87797535210], [95655021], [853819197], [91478007626230442], [858507346054994514283249], [864860786958430420612], [991834667425], [70260359859758298268], [995772752500422258230202144], [965863618514262195], [9668263520514839714141], [9128756688657], [8181777770550433628246], [919890447398285150], [887837519], [83777064823271310], [8706590], [797736356], [9982645329], [3487243103559], [9479787772709]], "starter_code": "def largest_arrangement(numbers):\n\t", "canonical_solution": "from functools import cmp_to_key\ncmp = lambda a, b: int('%i%i' % (b, a)) - int('%i%i' % (a, b))\nlargest_arrangement = lambda n: int(''.join((str(i) for i in sorted(n, key=cmp_to_key(cmp)))))", "entry_point": "largest_arrangement", "task_id": "TACO_lite/637", "input_output_examples": [[[[4, 50, 8, 145]], [[4, 40, 7]], [[4, 46, 7]], [[5, 60, 299, 56]], [[5, 2, 1, 9, 50, 56]]], [[8504145], [7440], [7464], [60565299], [95655021]]]}
{"requirement": "def can_jump(arr):\n\"\"\"Jump is a simple one-player game:\n\nYou are initially at the first cell of an array of cells containing non-negative integers;\n\nAt each step you can jump ahead in the array as far as the integer at the current cell, or any smaller number of cells.\nYou win if there is a path that allows you to jump from one cell to another, eventually jumping past the end of the array, otherwise you lose.\n\nFor instance, if the array contains the integers \n\n`[2, 0, 3, 5, 0, 0, 3, 0, 0, 3, 1, 0]`,\n\nyou can win by jumping from **2**, to **3**, to **5**, to **3**, to **3**, then past the end of the array.\n\nYou can also directly jump from from the initial cell(first cell) past the end of the array if they are integers to the right of that cell.\n\nE.g \n\n`[6, 1, 1]` is winnable\n\n`[6]` is **not** winnable\n\nNote: You can **not** jump from the last cell!\n\n`[1, 1, 3]` is **not** winnable\n\n## -----\n\nYour task is to complete the function `canJump()`  that determines if a given game is winnable.\n\n### More Examples\n\n``` javascript\ncanJump([5]) //=> false\ncanJump([2, 5]) //=> true\ncanJump([3, 0, 2, 3]) //=> true (3 to 2 then past end of array)\ncanJump([4, 1, 2, 0, 1]) //=> false\ncanJump([5, 0, 0, 0]) //=> true\ncanJump([1, 1]) //=> false\n```\n\"\"\"", "inputs": [[[11, 6, 11, 0, 2, 1, 14, 3, 7, 6, 2, 1, 10, 6, 0, 0, 8, 10, 2, 12, 13, 11, 14, 6, 1, 4, 14, 3, 10, 4, 14, 2, 3, 10, 8, 13, 14, 8, 2, 13, 11, 14, 0, 1, 6, 2, 1, 6, 8, 2, 0, 12, 4, 9, 2, 6, 8, 14, 4, 14, 4, 10, 8, 7, 12, 11, 0, 3, 8, 0, 13, 9, 9, 11, 10, 13, 12, 1, 0, 10, 14, 6, 1, 11, 7, 8, 6, 2, 1, 3, 1, 1, 0, 3, 5, 11, 13, 8, 4, 9, 9, 7, 6, 2, 10, 13, 6, 12, 10, 2, 0, 3, 14, 6, 6, 7, 13, 12, 11, 5, 2, 0, 12, 2, 11, 8]], [[2, 0, 1, 5, 0, 0, 3, 0, 0, 3, 1, 0]], [[5]], [[2, 5]], [[5, 0, 0, 0]], [[1, 1]], [[3, 0, 2, 3]], [[4, 1, 2, 0, 1]]], "outputs": [[true], [true], [false], [true], [true], [false], [true], [false]], "starter_code": "def can_jump(arr):", "canonical_solution": "def can_jump(arr):\n    if arr[0] == 0 or len(arr) == 1:\n        return False\n    if arr[0] >= len(arr):\n        return True\n    for jump in range(1, arr[0] + 1):\n        if can_jump(arr[jump:]):\n            return True\n    return False", "entry_point": "can_jump", "task_id": "TACO_lite/638", "input_output_examples": [[[[2, 0, 3, 5, 0, 0, 3, 0, 0, 3, 1, 0]], [[6, 1, 1]], [[6]], [[1, 1, 3]], [[5]], [[2, 5]], [[3, 0, 2, 3]], [[4, 1, 2, 0, 1]], [[5, 0, 0, 0]], [[1, 1]]], [[true], [true], [false], [false], [false], [true], [true], [false], [true], [false]]]}
{"requirement": "def roof_fix(new, old):\n\"\"\"The sports centre needs repair. Vandals have been kicking balls so hard into the roof that some of the tiles have started sticking up. The roof is represented by r.\n\nAs a quick fix, the committee have decided to place another old roof over the top, if they can find one that fits. This is your job.\n\nA 'new' roof (f) will fit if it currently has a hole in it at the location where the old roof has a tile sticking up.\n\nSticking up tiles are represented by either '\\\\' or '/'. Holes in the 'new' roof are represented by spaces (' '). Any other character can not go over a sticking up tile.\n\nReturn true if the new roof fits, false if it does not.\n\"\"\"", "inputs": [["  l   f l k djmi k", "___\\_____//_____/_"], ["    ikm il  h  llmmc   a i", "__\\_______________________"], ["   h c ", "__/____"], ["q h", "_/_"], [" cg dg   em  lfh cdam", "_______/____\\_____/_/"]], "outputs": [[false], [true], [true], [true], [false]], "starter_code": "def roof_fix(new, old):", "canonical_solution": "def roof_fix(new, old):\n    return all((patch == ' ' for patch, tile in zip(new, old) if tile in '\\\\/'))", "entry_point": "roof_fix", "task_id": "TACO_lite/639", "input_output_examples": [[["  l   f l k djmi k", "___\\_____//_____/_"]], [[false]]]}
{"requirement": "def solve(s):\n\"\"\"In this Kata, you will be given a string that may have mixed uppercase and lowercase letters and your task is to convert that string to either lowercase only or uppercase only based on: \n\n* make as few changes as possible. \n* if the string contains equal number of uppercase and lowercase letters, convert the string to lowercase. \n\nFor example:\n```Haskell\nsolve(\"coDe\") = \"code\". Lowercase characters > uppercase. Change only the \"D\" to lowercase.\nsolve(\"CODe\") = \"CODE\". Uppercase characters > lowecase. Change only the \"e\" to uppercase.\nsolve(\"coDE\") = \"code\". Upper == lowercase. Change all to lowercase.\n```\n\nMore examples in test cases. Good luck!\n\nPlease also try:\n \n[Simple time difference](https://www.codewars.com/kata/5b76a34ff71e5de9db0000f2)\n\n[Simple remove duplicates](https://www.codewars.com/kata/5ba38ba180824a86850000f7)\n\"\"\"", "inputs": [["code"], ["CODe"], ["COde"], ["Code"]], "outputs": [["code"], ["CODE"], ["code"], ["code"]], "starter_code": "def solve(s):", "canonical_solution": "def solve(s):\n    return s.upper() if sum(map(str.isupper, s)) * 2 > len(s) else s.lower()", "entry_point": "solve", "task_id": "TACO_lite/640", "input_output_examples": [[["coDe"], ["CODe"], ["coDE"]], [["code"], ["CODE"], ["code"]]]}
{"requirement": "def pack_bagpack(scores, weights, capacity):\n\"\"\"You're about to go on a trip around the world! On this trip you're bringing your trusted backpack, that anything fits into. The bad news is that the airline has informed you, that your luggage cannot exceed a certain amount of weight.\n\nTo make sure you're bringing your most valuable items on this journey you've decided to give all your items a score that represents how valuable this item is to you. It's your job to pack you bag so that you get the most value out of the items that you decide to bring.\n\nYour input will consist of two arrays, one for the scores and one for the weights. You input will always be valid lists of equal length, so you don't have to worry about verifying your input.\n\nYou'll also be given a maximum weight. This is the weight that your backpack cannot exceed.\n\nFor instance, given these inputs:\n\n    scores = [15, 10, 9, 5]\n    weights = [1, 5, 3, 4]\n    capacity = 8\n    \nThe maximum score will be ``29``. This number comes from bringing items ``1, 3 and 4``.\n\nNote: Your solution will have to be efficient as the running time of your algorithm will be put to a test.\n\"\"\"", "inputs": [[[15, 10, 9, 5], [1, 5, 3, 4], 8], [[20, 5, 10, 40, 15, 25], [1, 2, 3, 8, 7, 4], 10], [[19, 8, 6, 20, 3, 16], [8, 2, 3, 10, 1, 5], 17], [[100, 5, 16, 18, 50], [25, 1, 3, 2, 15], 14]], "outputs": [[29], [60], [46], [39]], "starter_code": "def pack_bagpack(scores, weights, capacity):", "canonical_solution": "def pack_bagpack(scores, weights, capacity):\n    load = [0] * (capacity + 1)\n    for score, weight in zip(scores, weights):\n        load = [max(l, weight <= w and load[w - weight] + score) for w, l in enumerate(load)]\n    return load[-1]", "entry_point": "pack_bagpack", "task_id": "TACO_lite/641", "input_output_examples": [[[[15, 10, 9, 5], [1, 5, 3, 4], 8]], [[29]]]}
{"requirement": "def hamming_distance(a, b):\n\"\"\"# Task\n The `hamming distance` between a pair of numbers is the number of binary bits that differ in their binary notation. \n \n# Example\n\n For `a = 25, b= 87`, the result should be `4`\n```\n25: 00011001\n87: 01010111\n```\nThe `hamming distance` between these two would be 4 ( the `2nd, 5th, 6th, 7th` bit ).\n\n\n# Input/Output\n\n\n - `[input]` integer `a`\n\n  First Number. `1 <= a <= 2^20`\n\n\n - `[input]` integer `b`\n\n  Second Number. `1 <= b <= 2^20`\n\n\n - `[output]` an integer\n\n  Hamming Distance\n\"\"\"", "inputs": [[25, 87], [256, 302], [543, 634], [34013, 702]], "outputs": [[4], [4], [4], [7]], "starter_code": "def hamming_distance(a, b):", "canonical_solution": "def hamming_distance(a, b):\n    return bin(a ^ b).count('1')", "entry_point": "hamming_distance", "task_id": "TACO_lite/642", "input_output_examples": [[[25, 87]], [[4]]]}
{"requirement": "def moment_of_time_in_space(moment):\n\"\"\"# Task\n You are given a `moment` in time and space. What you must do is break it down into time and space, to determine if that moment is from the past, present or future.\n\n `Time` is the sum of characters that increase time (i.e. numbers in range ['1'..'9'].\n \n `Space` in the number of characters which do not increase time (i.e. all characters but those that increase time).\n \n The moment of time is determined as follows:\n```\nIf time is greater than space, than the moment is from the future.\nIf time is less than space, then the moment is from the past.\nOtherwise, it is the present moment.```\n\n You should return an array of three elements, two of which are false, and one is true. The true value should be at the `1st, 2nd or 3rd` place for `past, present and future` respectively.\n\n# Examples\n\n For `moment = \"01:00 pm\"`, the output should be `[true, false, false]`.\n \n time equals 1, and space equals 7, so the moment is from the past.\n\n For `moment = \"12:02 pm\"`, the output should be `[false, true, false]`.\n \n time equals 5, and space equals 5, which means that it's a present moment.\n\n For `moment = \"12:30 pm\"`, the output should be `[false, false, true]`.\n \n time equals 6, space equals 5, so the moment is from the future.\n\n# Input/Output\n\n\n - `[input]` string `moment`\n\n  The moment of time and space that the input time came from.\n\n\n - `[output]` a boolean array\n\n  Array of three elements, two of which are false, and one is true. The true value should be at the 1st, 2nd or 3rd place for past, present and future respectively.\n\"\"\"", "inputs": [["12:30 am"], ["12:02 pm"], ["01:00 pm"], ["11:12 am"], ["05:20 pm"], ["04:20 am"]], "outputs": [[[false, false, true]], [[false, true, false]], [[true, false, false]], [[false, false, true]], [[false, false, true]], [[false, true, false]]], "starter_code": "def moment_of_time_in_space(moment):", "canonical_solution": "def moment_of_time_in_space(moment):\n    d = sum((int(c) if c in '123456789' else -1 for c in moment))\n    return [d < 0, d == 0, d > 0]", "entry_point": "moment_of_time_in_space", "task_id": "TACO_lite/643", "input_output_examples": [[["01:00 pm"], ["12:02 pm"], ["12:30 pm"]], [[true, false, false], [false, true, false], [false, false, true]]]}
{"requirement": "def find_dup(arr):\n\"\"\"Spin-off of this kata, here you will have to figure out an efficient strategy to solve the problem of finding the sole duplicate number among an unsorted array/list of numbers starting from 1 up to n.\n\nHints: a solution in linear time can be found; using the most intuitive ones to search for duplicates that can run in O(n²) time won't work.\n\"\"\"", "inputs": [[[1, 1, 2, 3]], [[1, 2, 2, 3]], [[5, 4, 3, 2, 1, 1]], [[1, 3, 2, 5, 4, 5, 7, 6]], [[8, 2, 6, 3, 7, 2, 5, 1, 4]]], "outputs": [[1], [2], [1], [5], [2]], "starter_code": "def find_dup(arr):", "canonical_solution": "def find_dup(arr):\n    return sum(arr) - sum(range(1, max(arr) + 1))", "entry_point": "find_dup", "task_id": "TACO_lite/644", "input_output_examples": [[[[1, 1, 2, 3]]], [[1]]]}
{"requirement": "def tongues(code):\n\"\"\"### Tongues\n\nGandalf's writings have long been available for study, but no one has yet figured out what language they are written in. Recently, due to programming work by a hacker known only by the code name ROT13, it has been discovered that Gandalf used nothing but a simple letter substitution scheme, and further, that it is its own inverse|the same operation scrambles the message as unscrambles it. \n\nThis operation is performed by replacing vowels in the sequence `'a' 'i' 'y' 'e' 'o' 'u'` with the vowel three advanced, cyclicly, while preserving case (i.e., lower or upper). \n\nSimilarly, consonants are replaced from the sequence `'b' 'k' 'x' 'z' 'n' 'h' 'd' 'c' 'w' 'g' 'p' 'v' 'j' 'q' 't' 's' 'r' 'l' 'm' 'f'` by advancing ten letters.\n\nSo for instance the phrase `'One ring to rule them all.'` translates to `'Ita dotf ni dyca nsaw ecc.'`\n\nThe fascinating thing about this transformation is that the resulting language yields pronounceable words.  For this problem, you will write code to translate Gandalf's manuscripts into plain text.\n\nYour job is to write a function that decodes Gandalf's writings.\n\n### Input\n\nThe function will be passed a string for the function to decode.  Each string will contain up to 100 characters, representing some text written by Gandalf. All characters will be plain ASCII, in the range space (32) to tilde (126).\n\n### Output\n\nFor each string passed to the decode function return its translation.\n\"\"\"", "inputs": [["Ita dotf ni dyca nsaw ecc."], ["Tim oh nsa nowa gid ecc fiir wat ni liwa ni nsa eor ig nsaod liytndu."], ["Giydhlida etr hakat uaedh efi iyd gidagensadh pdiyfsn ytni nsoh"], ["litnotatn e tam tenoit."], ["Nsa zyolv pdimt gij xywbar ikad nsa cequ rifh."], ["Tywpadh (1234567890) etr bytlnyenoit, nsau hsiycr pins pa ytlsetfar!"], [" "], ["Nsoh oh tin Vcotfit pyn on liycr pa e roggadatn gidaoft cetfyefa."], ["0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"], ["mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm"], ["z"], [""], ["****************************************************************************************************"], ["q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1q1"]], "outputs": [["One ring to rule them all."], ["Now is the time for all good men to come to the aid of their country."], ["Fourscore and seven years ago our forefathers brought unto this"], ["continent a new nation."], ["The quick brown fox jumped over the lazy dogs."], ["Numbers (1234567890) and punctuation, they should both be unchanged!"], [" "], ["This is not Klingon but it could be a different foreign language."], ["0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"], ["eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee"], ["wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww"], ["q"], [""], ["****************************************************************************************************"], ["z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1z1"]], "starter_code": "def tongues(code):", "canonical_solution": "def tongues(code):\n    AsT = ''\n    for i in code:\n        if i == 'i':\n            AsT = AsT + 'o'\n        elif i == 't':\n            AsT = AsT + 'n'\n        elif i == 'a':\n            AsT = AsT + 'e'\n        elif i == 'd':\n            AsT = AsT + 'r'\n        elif i == 'f':\n            AsT = AsT + 'g'\n        elif i == 'y':\n            AsT = AsT + 'u'\n        elif i == 'c':\n            AsT = AsT + 'l'\n        elif i == 's':\n            AsT = AsT + 'h'\n        elif i == 'w':\n            AsT = AsT + 'm'\n        elif i == 'v':\n            AsT = AsT + 'k'\n        elif i == 'q':\n            AsT = AsT + 'z'\n        elif i == 'p':\n            AsT = AsT + 'b'\n        elif i == 'j':\n            AsT = AsT + 'x'\n        elif i == 'o':\n            AsT = AsT + 'i'\n        elif i == 'n':\n            AsT = AsT + 't'\n        elif i == 'e':\n            AsT = AsT + 'a'\n        elif i == 'r':\n            AsT = AsT + 'd'\n        elif i == 'g':\n            AsT = AsT + 'f'\n        elif i == 'u':\n            AsT = AsT + 'y'\n        elif i == 'l':\n            AsT = AsT + 'c'\n        elif i == 'h':\n            AsT = AsT + 's'\n        elif i == 'm':\n            AsT = AsT + 'w'\n        elif i == 'k':\n            AsT = AsT + 'v'\n        elif i == 'z':\n            AsT = AsT + 'q'\n        elif i == 'b':\n            AsT = AsT + 'p'\n        elif i == 'x':\n            AsT = AsT + 'j'\n        elif i == 'I':\n            AsT = AsT + 'O'\n        elif i == 'T':\n            AsT = AsT + 'N'\n        elif i == 'A':\n            AsT = AsT + 'E'\n        elif i == 'D':\n            AsT = AsT + 'R'\n        elif i == 'F':\n            AsT = AsT + 'G'\n        elif i == 'Y':\n            AsT = AsT + 'U'\n        elif i == 'C':\n            AsT = AsT + 'L'\n        elif i == 'S':\n            AsT = AsT + 'H'\n        elif i == 'W':\n            AsT = AsT + 'M'\n        elif i == 'V':\n            AsT = AsT + 'K'\n        elif i == 'Q':\n            AsT = AsT + 'Z'\n        elif i == 'P':\n            AsT = AsT + 'B'\n        elif i == 'J':\n            AsT = AsT + 'X'\n        elif i == 'O':\n            AsT = AsT + 'I'\n        elif i == 'N':\n            AsT = AsT + 'T'\n        elif i == 'E':\n            AsT = AsT + 'A'\n        elif i == 'R':\n            AsT = AsT + 'D'\n        elif i == 'G':\n            AsT = AsT + 'F'\n        elif i == 'U':\n            AsT = AsT + 'Y'\n        elif i == 'L':\n            AsT = AsT + 'C'\n        elif i == 'H':\n            AsT = AsT + 'S'\n        elif i == 'M':\n            AsT = AsT + 'W'\n        elif i == 'K':\n            AsT = AsT + 'V'\n        elif i == 'Z':\n            AsT = AsT + 'Q'\n        elif i == 'B':\n            AsT = AsT + 'P'\n        elif i == 'X':\n            AsT = AsT + 'J'\n        else:\n            AsT = AsT + i\n    return AsT", "entry_point": "tongues", "task_id": "TACO_lite/645", "input_output_examples": [[["Ita dotf ni dyca nsaw ecc."]], [["One ring to rule them all."]]]}
{"requirement": "def reversewords(s: str) -> str:\n\"\"\"Given an input string s, reverse the order of the words.\n\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\n\nReturn a string of the words in reverse order concatenated by a single space.\n\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\n\n\nExample 1:\n\nInput: s = \"the sky is blue\"\nOutput: \"blue is sky the\"\nExample 2:\n\nInput: s = \"  hello world  \"\nOutput: \"world hello\"\nExplanation: Your reversed string should not contain leading or trailing spaces.\nExample 3:\n\nInput: s = \"a good   example\"\nOutput: \"example good a\"\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\nExample 4:\n\nInput: s = \"  Bob    Loves  Alice   \"\nOutput: \"Alice Loves Bob\"\nExample 5:\n\nInput: s = \"Alice does not even like bob\"\nOutput: \"bob like even not does Alice\"\n \n\nConstraints:\n\n1 <= s.length <= 104\ns contains English letters (upper-case and lower-case), digits, and spaces ' '.\nThere is at least one word in s.\n\"\"\"", "inputs": [["the sky is blue"], ["  hello world  "], ["a good   example"], ["  Bob    Loves  Alice   "], ["Alice does not even like bob"]], "outputs": [["blue is sky the"], ["world hello"], ["example good a"], ["Alice Loves Bob"], ["bob like even not does Alice"]], "starter_code": "def reversewords(s: str) -> str:", "canonical_solution": "def reversewords(s: str) -> str:\n    sLst = s.split()\n    reverseStr = ''\n    for i in range(len(sLst) - 1, -1, -1):\n        if i == len(sLst) - 1:\n            reverseStr += sLst[i]\n        else:\n            reverseStr += ' ' + sLst[i]\n    return reverseStr", "entry_point": "reversewords", "task_id": "TACO_lite/646", "input_output_examples": [[["the sky is blue"], ["  hello world  "], ["a good   example"], ["  Bob    Loves  Alice   "], ["Alice does not even like bob"]], [["blue is sky the"], ["world hello"], ["example good a"], ["Alice Loves Bob"], ["bob like even not does Alice"]]]}
{"requirement": "def calculate(num1, operation, num2):\n\"\"\"Write a function called calculate that takes 3 values. The first and third values are numbers. The second value is a character. If the character is \"+\" , \"-\", \"*\", or \"/\", the function will return the result of the corresponding mathematical function on the two numbers. If the string is not one of the specified characters, the function should return null (throw an `ArgumentException` in C#).\n\nKeep in mind, you cannot divide by zero. If an attempt to divide by zero is made, return null (throw an `ArgumentException` in C#)/(None in Python).\n\"\"\"", "inputs": [[3.2, "+", 8], [3.2, "-", 8], [3.2, "/", 8], [3.2, "*", 8], [-3, "+", 0], [-3, "-", 0], [-2, "/", -2], [-3, "*", 0], [-3, "/", 0], [-3, "w", 0], [-3, "w", 1]], "outputs": [[11.2], [-4.8], [0.4], [25.6], [-3], [-3], [1], [0], [null], [null], [null]], "starter_code": "def calculate(num1, operation, num2):", "canonical_solution": "def calculate(num1, operation, num2):\n    try:\n        return eval('{} {} {}'.format(num1, operation, num2))\n    except (ZeroDivisionError, SyntaxError):\n        return None", "entry_point": "calculate", "task_id": "TACO_lite/647", "input_output_examples": [[[3.2, "+", 8]], [[11.2]]]}
{"requirement": "def validate_hello(greetings):\n\"\"\"You received a whatsup message from an unknown number. Could it be from that girl/boy with a foreign accent you met yesterday evening?\n\nWrite a simple regex to check if the string contains the word hallo in different languages.\n\nThese are the languages of the possible people you met the night before:\n\n* hello - english\n* ciao - italian\n* salut - french\n* hallo - german\n* hola - spanish\n* ahoj - czech republic\n* czesc - polish\n\nBy the way, how cool is the czech republic hallo!!\n\n\nPS. you can assume the input is a string.\nPPS. to keep this a beginner exercise you don't need to check if the greeting is a subset of word ('Hallowen' can pass the test)\n\nPS. regex should be case insensitive to pass the tests\n\"\"\"", "inputs": [["hello"], ["ciao bella!"], ["salut"], ["hallo, salut"], ["hombre! Hola!"], ["Hallo, wie geht's dir?"], ["AHOJ!"], ["czesc"], ["meh"], ["Ahoj"]], "outputs": [[true], [true], [true], [true], [true], [true], [true], [true], [false], [true]], "starter_code": "def validate_hello(greetings):", "canonical_solution": "def validate_hello(greetings):\n    return any((x in greetings.lower() for x in ['hello', 'ciao', 'salut', 'hallo', 'hola', 'ahoj', 'czesc']))", "entry_point": "validate_hello", "task_id": "TACO_lite/648", "input_output_examples": [[["hello"]], [[true]]]}
{"requirement": "def cypher(s):\n\"\"\"# Number encrypting: cypher\n## Part I of Number encrypting Katas\n***\n\n## Introduction\nBack then when the internet was coming up, most search functionalities simply looked for keywords in text to show relevant documents. Hackers weren't very keen on having their information displayed on websites, bulletin boards, newsgroups or any other place, so they started to replace certain letters in words. It started out with simple vowel substitutions like a 4 instead of an A, or a 3 instead of an E. This meant that topics like cracking or hacking remained undetected.\n\nHere we will use a reduced version of the *Leet Speak alphabet*, but you can find more information [here](http://www.gamehouse.com/blog/leet-speak-cheat-sheet/) or at [Wikipedia](https://en.wikipedia.org/wiki/Leet).\n\n## Task\nYou will receive a string composed by English words, `string`. You will have to return a cyphered version of that string.\n\nThe numbers corresponding to each letter are represented at the table below. Notice that different letters can share the same number. In those cases, one letter will be upper case and the other one lower case.\n\n\n  .cell {\n    border: 1px solid white;\n    text-align: center;\n    width: 7%;\n  }\n  \n  .title {\n    border: 1px solid white;\n    border-bottom: 1px solid white;\n    text-align: center;\n    min-width: 11em;\n  }\n  \n  .no-border {border: none}\n  \n  table {\n    margin-bottom: 10px\n  }\n\n\n\n  \n    \n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    0\n  \n  \n    Upper case\n    I\n    R\n    E\n    A\n    S\n    G\n    T\n    B\n    \n    O\n  \n  \n    Lower case\n    l\n    z\n    e\n    a\n    s\n    b\n    t\n    \n    g\n    o\n  \n  \n\n\n\nAny character that is not at the table, does not change when cyphered.\n\n## Examples\n\n  * **Input:** \"Hello World\". **Output**: \"H3110 W0r1d\"\n  * **Input:** \"I am your father\". **Output**: \"1 4m y0ur f47h3r\"\n  * **Input:** \"I do not know what else I can test. Be cool. Good luck\". **Output**: \"1 d0 n07 kn0w wh47 3153 1 c4n 7357. 83 c001. 600d 1uck\"\n\n## Part II\nIf you liked this Kata, you can find the [part II: *Number encrypting: decypher*](https://www.codewars.com/kata/number-encrypting-decypher), where your goal is to decypher the strings.\n\"\"\"", "inputs": [["Hello World"], ["I am your father"], ["I do not know what else I can test. Be cool. Good luck"], ["IlRzEeAaSsGbTtBgOo"], [""]], "outputs": [["H3110 W0r1d"], ["1 4m y0ur f47h3r"], ["1 d0 n07 kn0w wh47 3153 1 c4n 7357. 83 c001. 600d 1uck"], ["112233445566778900"], [""]], "starter_code": "def cypher(s):", "canonical_solution": "def cypher(s):\n    return s.translate(str.maketrans('IREASGTBlzeasbtgoO', '123456781234567900'))", "entry_point": "cypher", "task_id": "TACO_lite/649", "input_output_examples": [[["Hello World"], ["I am your father"], ["I do not know what else I can test. Be cool. Good luck"]], [["H3110 W0r1d"], ["1 4m y0ur f47h3r"], ["1 d0 n07 kn0w wh47 3153 1 c4n 7357. 83 c001. 600d 1uck"]]]}
{"requirement": "def swap(st):\n\"\"\"When provided with a String, capitalize all vowels\n\nFor example:\n\nInput : \"Hello World!\"\n\nOutput : \"HEllO WOrld!\"\n\nNote: Y is not a vowel in this kata.\n\"\"\"", "inputs": [["HelloWorld!"], ["Sunday"], ["Codewars"], ["Monday"], ["Friday"], ["abracadabra"]], "outputs": [["HEllOWOrld!"], ["SUndAy"], ["COdEwArs"], ["MOndAy"], ["FrIdAy"], ["AbrAcAdAbrA"]], "starter_code": "def swap(st):", "canonical_solution": "def swap(st):\n    tr = str.maketrans('aeiou', 'AEIOU')\n    return st.translate(tr)", "entry_point": "swap", "task_id": "TACO_lite/650", "input_output_examples": [[["Hello World!"]], [["HEllO WOrld!"]]]}
{"requirement": "def bin2gray(bits):\n\"\"\"Gray code is a form of binary encoding where transitions between consecutive numbers differ by only one bit. This is a useful encoding for reducing hardware data hazards with values that change rapidly and/or connect to slower hardware as inputs. It is also useful for generating inputs for Karnaugh maps.\n\nHere is an exemple of what the code look like:\n\n```\n0:    0000\n1:    0001\n2:    0011\n3:    0010\n4:    0110\n5:    0111\n6:    0101\n7:    0100\n8:    1100\n```\n\nThe goal of this kata is to build two function bin2gray and gray2bin wich will convert natural binary to Gray Code and vice-versa. We will use the \"binary reflected Gray code\". The input and output will be arrays of 0 and 1, MSB at index 0.\n\nThere are \"simple\" formula to implement these functions. It is a very interesting exercise to find them by yourself.\n\nAll input will be correct binary arrays.\n\"\"\"", "inputs": [[[1, 0, 1]], [[1, 1]], [[1]], [[0]], [[0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1]], [[0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 1]]], "outputs": [[[1, 1, 1]], [[1, 0]], [[1]], [[0]], [[1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1]]], "starter_code": "def bin2gray(bits):", "canonical_solution": "def bin2gray(bits):\n    bits.reverse()\n    return list(reversed([x if i >= len(bits) - 1 or bits[i + 1] == 0 else 1 - x for i, x in enumerate(bits)]))\n\ndef gray2bin(bits):\n    for i, x in enumerate(bits):\n        if i > 0 and bits[i - 1] != 0:\n            bits[i] = 1 - x\n    return bits", "entry_point": "bin2gray", "task_id": "TACO_lite/651", "input_output_examples": [[[[0, 0, 0, 0]], [[0, 0, 0, 1]], [[0, 0, 1, 1]], [[0, 0, 1, 0]], [[0, 1, 1, 0]], [[0, 1, 1, 1]], [[0, 1, 0, 1]], [[0, 1, 0, 0]], [[1, 1, 0, 0]], [[1, 0, 1]]], [[[0, 0, 0, 0]], [[0, 0, 0, 1]], [[0, 0, 1, 0]], [[0, 0, 1, 1]], [[0, 1, 0, 1]], [[0, 1, 0, 0]], [[0, 1, 1, 1]], [[0, 1, 1, 0]], [[1, 0, 1, 0]], [[1, 1, 1]]]]}
{"requirement": "def f(n):\n\"\"\"Mutual Recursion allows us to take the fun of regular recursion (where a function calls itself until a terminating condition) and apply it to multiple functions calling each other! \n\nLet's use the Hofstadter Female and Male sequences to demonstrate this technique. You'll want to create two functions `F` and `M` such that the following equations are true: \n\n```\nF(0) = 1\nM(0) = 0\nF(n) = n - M(F(n - 1))\nM(n) = n - F(M(n - 1))\n```\n\nDon't worry about negative numbers, `n` will always be greater than or equal to zero.\n\n~~~if:php,csharp\nYou *do* have to worry about performance though, mutual recursion uses up a lot of stack space (and is highly inefficient) so you may have to find a way to make your solution consume less stack space (and time).  Good luck :)\n~~~\n\nHofstadter Wikipedia Reference http://en.wikipedia.org/wiki/Hofstadter_sequence#Hofstadter_Female_and_Male_sequences\n\"\"\"", "inputs": [[0], [5], [10], [15], [25]], "outputs": [[1], [3], [6], [9], [16]], "starter_code": "def f(n):", "canonical_solution": "def f(n):\n    return n - m(f(n - 1)) if n else 1\n\ndef m(n):\n    return n - f(m(n - 1)) if n else 0", "entry_point": "f", "task_id": "TACO_lite/652", "input_output_examples": [[[0]], [[1]]]}
{"requirement": "def say_hello(name, city, state):\n\"\"\"Create a method `sayHello`/`say_hello`/`SayHello` that takes as input a name, city, and state to welcome a person. Note that `name` will be an array consisting of one or more values that should be joined together with one space between each, and the length of the `name` array in test cases will vary.\n\nExample:\n\n```python\nsay_hello(['John', 'Smith'], 'Phoenix', 'Arizona')\n```\n\nThis example will return the string `Hello, John Smith! Welcome to Phoenix, Arizona!`\n\"\"\"", "inputs": [[["John", "Smith"], "Phoenix", "Arizona"], [["Franklin", "Delano", "Roosevelt"], "Chicago", "Illinois"], [["Wallace", "Russel", "Osbourne"], "Albany", "New York"], [["Lupin", "the", "Third"], "Los Angeles", "California"], [["Marlo", "Stanfield"], "Baltimore", "Maryland"]], "outputs": [["Hello, John Smith! Welcome to Phoenix, Arizona!"], ["Hello, Franklin Delano Roosevelt! Welcome to Chicago, Illinois!"], ["Hello, Wallace Russel Osbourne! Welcome to Albany, New York!"], ["Hello, Lupin the Third! Welcome to Los Angeles, California!"], ["Hello, Marlo Stanfield! Welcome to Baltimore, Maryland!"]], "starter_code": "def say_hello(name, city, state):", "canonical_solution": "def say_hello(name, city, state):\n    return 'Hello, {}! Welcome to {}, {}!'.format(' '.join(name), city, state)", "entry_point": "say_hello", "task_id": "TACO_lite/653", "input_output_examples": [[[["John", "Smith"], "Phoenix", "Arizona"]], [["Hello, John Smith! Welcome to Phoenix, Arizona!"]]]}
{"requirement": "def value_at(poly, x):\n\"\"\"The Binomial Form of a polynomial has many uses, just as the standard form does.  For comparison, if p(x) is in Binomial Form and q(x) is in standard form, we might write\n\np(x) := a0 \\* xC0 + a1 \\* xC1 + a2 \\* xC2 + ... + aN \\* xCN\n\nq(x) := b0 + b1 \\* x + b2 \\* x^(2) + ... + bN \\* x^(N)\n\nBoth forms have tricks for evaluating them, but tricks should not be necessary.  The most important thing to keep in mind is that aCb can be defined for non-integer values of a; in particular,\n\n```\naCb := a * (a-1) * (a-2) * ... * (a-b+1) / b!   // for any value a and integer values b\n    := a! / ((a-b)!b!)                          // for integer values a,b\n```\n\nThe inputs to your function are an array which specifies a polynomial in Binomial Form, ordered by highest-degree-first, and also a number to evaluate the polynomial at.  An example call might be\n\n```python\nvalue_at([1, 2, 7], 3)\n```\n\nand the return value would be 16, since 3C2 + 2 * 3C1 + 7 = 16.  In more detail, this calculation looks like\n\n```\n1 * xC2 + 2 * xC1 + 7 * xC0 :: x = 3\n3C2 + 2 * 3C1 + 7\n3 * (3-1) / 2! + 2 * 3 / 1! + 7\n3 + 6 + 7 = 16\n```\n\nMore information can be found by reading about [Binomial Coefficients](https://en.wikipedia.org/wiki/Binomial_coefficient) or about [Finite Differences](https://en.wikipedia.org/wiki/Finite_difference).\n\nNote that while a solution should be able to handle non-integer inputs and get a correct result, any solution should make use of rounding to two significant digits (as the official solution does) since high precision for non-integers is not the point here.\n\"\"\"", "inputs": [[[1, 2, 7], 3], [[1, 2, 7, 0, 5], 2], [[1, 1, 1, 1, 7, 0, 5], 2], [[1, 2, 7, 0, 5], 0.6], [[1, 2, 7, 0, 5], 0]], "outputs": [[16], [12], [12], [4.24], [5.0]], "starter_code": "def value_at(poly, x):", "canonical_solution": "from functools import reduce\nfrom math import factorial\n\ndef value_at(poly, x):\n    return round(sum((n * aCb(x, i) for i, n in enumerate(poly[::-1]))), 2)\n\ndef aCb(a, b):\n    return reduce(lambda x, y: x * y, (a - i for i in range(b)), 1) / factorial(b)", "entry_point": "value_at", "task_id": "TACO_lite/654", "input_output_examples": [[[[1, 2, 7], 3]], [[16]]]}
{"requirement": "def harmon_pointtrip(xA, xB, xC):\n\"\"\"The image shows how we can obtain the Harmonic Conjugated Point of three aligned points A, B, C.\n\n- We choose any point L, that is not in the line with A, B and C. We form the triangle ABL\n\n- Then we draw a line from point C that intersects the sides of this triangle at points M and N respectively.\n\n- We draw the diagonals of the quadrilateral ABNM; they are AN and BM and they intersect at point K\n\n- We unit, with a line L and K, and this line intersects the line of points A, B and C at point D\n\nThe point D is named the Conjugated Harmonic Point of the points A, B, C.\nYou can get more knowledge related with this point at: (https://en.wikipedia.org/wiki/Projective_harmonic_conjugate)\n\nIf we apply the theorems of Ceva (https://en.wikipedia.org/wiki/Ceva%27s_theorem)\nand Menelaus (https://en.wikipedia.org/wiki/Menelaus%27_theorem) we will have this formula:\n\n\n\nAC, in the above formula is the length of the segment of points A to C in this direction and its value is:\n\n```AC = xA - xC```\n\nTransform the above formula using the coordinates ```xA, xB, xC and xD```\n\nThe task is to create a function ```harmon_pointtrip()```, that receives three arguments, the coordinates of points xA, xB and xC, with values such that : ```xA < xB < xC```, this function should output the coordinates of point D for each given triplet, such that\n\n`xA < xD < xB < xC`, or to be clearer\n\nlet's see some cases:\n```python\nharmon_pointtrip(xA, xB, xC) ------> xD # the result should be expressed up to four decimals (rounded result)\nharmon_pointtrip(2, 10, 20) -----> 7.1429 # (2 < 7.1429 < 10 < 20, satisfies the constraint)\nharmon_pointtrip(3, 9, 18) -----> 6.75\n```\n\n\nEnjoy it and happy coding!!\n\"\"\"", "inputs": [[2, 10, 20], [3, 9, 18], [6, 10, 11], [4, 12, 24], [5, 17, 20]], "outputs": [[7.1429], [6.75], [9.3333], [9.0], [15.0]], "starter_code": "def harmon_pointtrip(xA, xB, xC):", "canonical_solution": "def harmon_pointtrip(xA, xB, xC):\n    a, b, c = list(map(float, [xA, xB, xC]))\n    d = (a * c + b * c - 2 * a * b) / (2 * c - a - b)\n    return round(d, 4)", "entry_point": "harmon_pointtrip", "task_id": "TACO_lite/655", "input_output_examples": [[[2, 10, 20], [3, 9, 18]], [[7.1429], [6.75]]]}
{"requirement": "def pattern(n):\n\"\"\"###Task:\n\nYou have to write a function **pattern** which creates the following Pattern(See Examples) upto n(parameter) number of rows.\n\n####Rules/Note:\n* If the Argument is 0 or a Negative Integer then it should return \"\" i.e. empty string.\n* All the lines in the pattern have same length i.e equal to the number of characters in the last line.\n* Range of n is (-∞,100]\n\n###Examples:\n\npattern(5):\n\n        1    \n       121   \n      12321  \n     1234321 \n    123454321\n\n\npattern(10):\n\n             1         \n            121        \n           12321       \n          1234321      \n         123454321     \n        12345654321    \n       1234567654321   \n      123456787654321  \n     12345678987654321 \n    1234567890987654321\n\npattern(15):\n\n                  1              \n                 121             \n                12321            \n               1234321           \n              123454321          \n             12345654321         \n            1234567654321        \n           123456787654321       \n          12345678987654321      \n         1234567890987654321     \n        123456789010987654321    \n       12345678901210987654321   \n      1234567890123210987654321  \n     123456789012343210987654321 \n    12345678901234543210987654321\n\npattern(20):\n\n                       1                   \n                      121                  \n                     12321                 \n                    1234321                \n                   123454321               \n                  12345654321              \n                 1234567654321             \n                123456787654321            \n               12345678987654321           \n              1234567890987654321          \n             123456789010987654321         \n            12345678901210987654321        \n           1234567890123210987654321       \n          123456789012343210987654321      \n         12345678901234543210987654321     \n        1234567890123456543210987654321    \n       123456789012345676543210987654321   \n      12345678901234567876543210987654321  \n     1234567890123456789876543210987654321 \n    123456789012345678909876543210987654321\n\n###Amazing Fact: \n\n\n```Hint: Use \\n in string to jump to next line```\n\"\"\"", "inputs": [[7], [1], [4], [0], [-25]], "outputs": [["      1      \n     121     \n    12321    \n   1234321   \n  123454321  \n 12345654321 \n1234567654321"], ["1"], ["   1   \n  121  \n 12321 \n1234321"], [""], [""]], "starter_code": "def pattern(n):", "canonical_solution": "def pattern(n):\n    output = []\n    for i in range(1, n + 1):\n        wing = ' ' * (n - i) + ''.join((str(d % 10) for d in range(1, i)))\n        output.append(wing + str(i % 10) + wing[::-1])\n    return '\\n'.join(output)", "entry_point": "pattern", "task_id": "TACO_lite/656", "input_output_examples": [[[5], [10], [15], [20], [0], [-1]], [["    1    \n   121   \n  12321  \n 1234321 \n123454321"], ["         1         \n        121        \n       12321       \n      1234321      \n     123454321     \n    12345654321    \n   1234567654321   \n  123456787654321  \n 12345678987654321 \n1234567890987654321"], ["              1              \n             121             \n            12321            \n           1234321           \n          123454321          \n         12345654321         \n        1234567654321        \n       123456787654321       \n      12345678987654321      \n     1234567890987654321     \n    123456789010987654321    \n   12345678901210987654321   \n  1234567890123210987654321  \n 123456789012343210987654321 \n12345678901234543210987654321"], ["                   1                   \n                  121                  \n                 12321                 \n                1234321                \n               123454321               \n              12345654321              \n             1234567654321             \n            123456787654321            \n           12345678987654321           \n          1234567890987654321          \n         123456789010987654321         \n        12345678901210987654321        \n       1234567890123210987654321       \n      123456789012343210987654321      \n     12345678901234543210987654321     \n    1234567890123456543210987654321    \n   123456789012345676543210987654321   \n  12345678901234567876543210987654321  \n 1234567890123456789876543210987654321 \n123456789012345678909876543210987654321"], [""], [""]]]}
{"requirement": "def atomic_number(electrons):\n\"\"\"You are a *khm*mad*khm* scientist and you decided to play with electron distribution among atom's shells.\nYou know that basic idea of electron distribution is that electrons should fill a shell untill it's holding the maximum number of electrons.\n\n\n  ---\nRules:  \n  - Maximum number of electrons in a shell is distributed with a rule of 2n^2 (n being position of a shell). \n  - For example, maximum number of electrons in 3rd shield is 2*3^2 = 18.\n  - Electrons should fill the lowest level shell first.\n  - If the electrons have completely filled the lowest level shell, the other unoccupied electrons will fill the higher level shell and so on.  \n  ---\n        \n```\nEx.:    atomicNumber(1); should return [1]\n        atomicNumber(10); should return [2, 8]\n        atomicNumber(11); should return [2, 8, 1]\n        atomicNumber(47); should return [2, 8, 18, 19]\n```\n\"\"\"", "inputs": [[1], [10], [11], [22], [23], [47], [50], [52], [60], [61]], "outputs": [[[1]], [[2, 8]], [[2, 8, 1]], [[2, 8, 12]], [[2, 8, 13]], [[2, 8, 18, 19]], [[2, 8, 18, 22]], [[2, 8, 18, 24]], [[2, 8, 18, 32]], [[2, 8, 18, 32, 1]]], "starter_code": "def atomic_number(electrons):", "canonical_solution": "def atomic_number(electrons):\n    result = []\n    i = 1\n    while electrons > 0:\n        result.append(min(2 * i ** 2, electrons))\n        electrons -= result[-1]\n        i += 1\n    return result", "entry_point": "atomic_number", "task_id": "TACO_lite/657", "input_output_examples": [[[1], [10], [11], [47]], [[[1]], [[2, 8]], [[2, 8, 1]], [[2, 8, 18, 19]]]]}
{"requirement": "def multiples(m, n):\n\"\"\"Implement a function, `multiples(m, n)`, which returns an array of the first `m` multiples of the real number `n`. Assume that `m` is a positive integer.\n\nEx.\n```\nmultiples(3, 5.0)\n```\nshould return\n```\n[5.0, 10.0, 15.0]\n```\n\"\"\"", "inputs": [[3, 5], [1, 3.14], [5, -1]], "outputs": [[[5, 10, 15]], [[3.14]], [[-1, -2, -3, -4, -5]]], "starter_code": "def multiples(m, n):", "canonical_solution": "def multiples(m, n):\n    return [i * n for i in range(1, m + 1)]", "entry_point": "multiples", "task_id": "TACO_lite/658", "input_output_examples": [[[3, 5.0]], [[5.0, 10.0, 15.0]]]}
{"requirement": "def segment_cover(A, L):\n\"\"\"# Task\n Given some points(array `A`) on the same line, determine the minimum number of line segments with length `L` needed to cover all of the given points. A point is covered if it is located inside some segment or on its bounds.\n\n# Example\n\n For `A = [1, 3, 4, 5, 8]` and `L = 3`, the output should be `2`.\n\n Check out the image below for better understanding:\n\n![](https://codefightsuserpics.s3.amazonaws.com/tasks/segmentCover/img/example.png?_tm=1474900035857)\n\n \n For `A = [1, 5, 2, 4, 3]` and `L = 1`, the output should be `3`.\n \n segment1: `1-2`(covered points 1,2), \n \n segment2: `3-4`(covered points 3,4),\n \n segment3: `5-6`(covered point 5)\n\n For `A = [1, 10, 100, 1000]` and `L = 1`, the output should be `4`.\n \n segment1: `1-2`(covered point 1), \n \n segment2: `10-11`(covered point 10),\n \n segment3: `100-101`(covered point 100), \n \n segment4: `1000-1001`(covered point 1000)\n\n\n# Input/Output\n\n\n - `[input]` integer array A\n\n    Array of point coordinates on the line (all points are different).\n\n    Constraints:\n\n    `1 ≤ A.length ≤ 50,`\n\n    `-5000 ≤ A[i] ≤ 5000.`\n\n\n - `[input]` integer `L`\n\n    Segment length, a positive integer.\n\n    Constraints: `1 ≤ L ≤ 100.`\n\n\n - `[output]` an integer\n \n   The minimum number of line segments that can cover all of the given points.\n\"\"\"", "inputs": [[[1, 3, 4, 5, 8], 3], [[-7, -2, 0, -1, -6, 7, 3, 4], 4], [[1, 5, 2, 4, 3], 1], [[1, 10, 100, 1000], 1]], "outputs": [[2], [3], [3], [4]], "starter_code": "def segment_cover(A, L):", "canonical_solution": "def segment_cover(A, L):\n    n = 1\n    s = min(A)\n    for i in sorted(A):\n        if s + L < i:\n            s = i\n            n += 1\n    return n", "entry_point": "segment_cover", "task_id": "TACO_lite/659", "input_output_examples": [[[[1, 3, 4, 5, 8], 3], [[1, 5, 2, 4, 3], 1], [[1, 10, 100, 1000], 1]], [[2], [3], [4]]]}
{"requirement": "def uniq_count(s):\n\"\"\"Given a string ``string`` that contains only letters, you have to find out the number of **unique** strings (including ``string`` itself) that can be produced by re-arranging the letters of the ``string``.  Strings are case **insensitive**.\n\nHINT: Generating all the unique strings and calling length on that isn't a great solution for this problem. It can be done a lot faster...\n\n## Examples\n\n```python\nuniqcount(\"AB\") = 2      # \"AB\", \"BA\"\nuniqcount(\"ABC\") = 6     # \"ABC\", \"ACB\", \"BAC\", \"BCA\", \"CAB\", \"CBA\"\nuniqcount(\"ABA\") = 3     # \"AAB\", \"ABA\", \"BAA\"\nuniqcount(\"ABBb\") = 4    # \"ABBB\", \"BABB\", \"BBAB\", \"BBBA\"\nuniqcount(\"AbcD\") = 24   # \"ABCD\", etc.\n```\n\"\"\"", "inputs": [["AB"], ["ABC"], ["AbA"], ["ABBb"], ["AbcD"], ["AAA"], [""], ["ASTON"], ["BEST"], ["ABcDEFgHIJ"], ["ABcDEFgHIJbaslidbailsbdilasbdkanmsdklhkbHSJKHVDASH"], ["ABcDEFgHIJbaslidbailsbdilasbdkanmsdklhkbHSJKHVDASHVVYQVWKDVDWQUV"]], "outputs": [[2], [6], [3], [4], [24], [1], [1], [120], [24], [3628800], [34111429518116758488933545882757275627520000000], [176478346352319876826993574633158714419916931040323433922560000000]], "starter_code": "def uniq_count(s):", "canonical_solution": "from operator import mul\nfrom functools import reduce\nfrom collections import Counter\nfrom math import factorial as fact\n\ndef uniq_count(s):\n    return fact(len(s)) // reduce(mul, map(fact, Counter(s.lower()).values()), 1)", "entry_point": "uniq_count", "task_id": "TACO_lite/660", "input_output_examples": [[["AB"], ["ABC"], ["ABA"], ["ABBb"], ["AbcD"]], [[2], [6], [3], [4], [24]]]}
{"requirement": "def find_short(s):\n\"\"\"Simple, given a string of words, return the length of the shortest word(s).\n\nString will never be empty and you do not need to account for different data types.\n\"\"\"", "inputs": [["bitcoin take over the world maybe who knows perhaps"], ["turns out random test cases are easier than writing out basic ones"], ["lets talk about javascript the best language"], ["i want to travel the world writing code one day"], ["Lets all go on holiday somewhere very cold"]], "outputs": [[3], [3], [3], [1], [2]], "starter_code": "def find_short(s):", "canonical_solution": "def find_short(s):\n    return min((len(x) for x in s.split()))", "entry_point": "find_short", "task_id": "TACO_lite/661", "input_output_examples": [[["bitcoin take over the world maybe who knows perhaps"]], [[3]]]}
{"requirement": "def vector_affinity(a, b):\n\"\"\"Calculate the number of items in a vector that appear at the same index in each vector, with the same value. \n\n```python\n   vector_affinity([1, 2, 3, 4, 5], [1, 2, 2, 4, 3]) # => 0.6\n   vector_affinity([1, 2, 3], [1, 2, 3]) # => 1.0\n```\n\nAffinity value should be realized on a scale of 0.0 to 1.0, with 1.0 being absolutely identical. Two identical sets should always be evaulated as having an affinity or 1.0.\n\nHint: The last example test case holds a significant clue to calculating the affinity correctly.\n\"\"\"", "inputs": [[[1, 2, 3], [1, 2, 3, 4, 5]], [[1, 2, 3, 4], [1, 2, 3, 5]], [[1, 2, 3, 4, 5], []], [[1, 2, 3], [1, 2, 3]], [[6, 6, 6, 6, 6, 6], [6, null, null, 6, 6, null]], [[6], [6, 6, 6, 6, 6, 6]], [[], []], [[null], [null]]], "outputs": [[0.6], [0.75], [0.0], [1.0], [0.5], [0.16666666666666666], [1.0], [1.0]], "starter_code": "def vector_affinity(a, b):", "canonical_solution": "def vector_affinity(a, b):\n    longer = len(a) if len(a) > len(b) else len(b)\n    return len([i for i, j in zip(a, b) if i == j]) / float(longer) if longer > 0 else 1.0", "entry_point": "vector_affinity", "task_id": "TACO_lite/662", "input_output_examples": [[[[1, 2, 3, 4, 5], [1, 2, 2, 4, 3]], [[1, 2, 3], [1, 2, 3]]], [[0.6], [1.0]]]}
{"requirement": "def freq_seq(s, sep):\n\"\"\"Return an output string that translates an input string `s`/`$s` by replacing each character in `s`/`$s` with a number representing the number of times that character occurs in `s`/`$s` and separating each number with the character(s) `sep`/`$sep`.\n\"\"\"", "inputs": [["hello world", "-"], ["19999999", ":"], ["^^^**$", "x"]], "outputs": [["1-1-3-3-2-1-1-2-1-3-1"], ["1:7:7:7:7:7:7:7"], ["3x3x3x2x2x1"]], "starter_code": "def freq_seq(s, sep):", "canonical_solution": "def freq_seq(s, sep):\n    return sep.join([str(s.count(i)) for i in s])", "entry_point": "freq_seq", "task_id": "TACO_lite/663", "input_output_examples": [[["hello world", "-"]], [["1-1-3-3-2-1-1-2-1-3-1"]]]}
{"requirement": "def count(n):\n\"\"\"In this Kata, you will implement a function `count` that takes an integer and returns the number of digits in `factorial(n)`. \n\nFor example, `count(5) = 3`, because `5! = 120`, and `120` has `3` digits.  \n\nMore examples in the test cases. \n\nBrute force is not possible. A little research will go a long way, as this is a well known series.\n\nGood luck!\n\nPlease also try:\n\"\"\"", "inputs": [[5], [50], [500], [5000], [50000], [500000], [5000000], [50000000]], "outputs": [[3], [65], [1135], [16326], [213237], [2632342], [31323382], [363233781]], "starter_code": "def count(n):", "canonical_solution": "from math import *\n\ndef count(n):\n    return ceil(lgamma(n + 1) / log(10))", "entry_point": "count", "task_id": "TACO_lite/664", "input_output_examples": [[[5]], [[3]]]}
{"requirement": "def cycle(sequence):\n\"\"\"In computer science, cycle detection is the algorithmic problem of finding a cycle in a sequence of iterated function values.\n\nFor any function ƒ, and any initial value x0 in S, the sequence of iterated function values\n\n    x0,x1=f(x0), x2=f(x1), ...,xi=f(x{i-1}),...\n\nmay eventually use the same value twice under some assumptions: S finite, f periodic ... etc. So there will be some `i ≠ j` such that `xi = xj`. Once this happens, the sequence must continue by repeating the cycle of values from `xi to xj−1`. Cycle detection is the problem of finding `i` and `j`, given `ƒ` and `x0`. Let `μ` be the smallest index such that the value associated will reappears and `λ` the smallest value such that `xμ = xλ+μ, λ` is the loop length.\n\nExample:\n\nConsider the sequence: \n```\n2, 0, 6, 3, 1, 6, 3, 1, 6, 3, 1, ....\n```\n\nThe cycle in this value sequence is 6, 3, 1.\nμ is 2 (first 6)\nλ is 3 (length of the sequence or difference between position of consecutive 6).\n\nThe goal of this kata is to build a function that will return `[μ,λ]` when given a short sequence. Simple loops will be sufficient. The sequence will be given in the form of an array. All array will be valid sequence associated with deterministic function. It means that the sequence will repeat itself when a value is reached a second time. (So you treat two cases: non repeating [1,2,3,4] and repeating [1,2,1,2], no hybrid cases like [1,2,1,4]). If there is no repetition you should return []. \n\n\nThis kata is followed by two other cycle detection algorithms: \nLoyd's: http://www.codewars.com/kata/cycle-detection-floyds-tortoise-and-the-hare\nBret's: http://www.codewars.com/kata/cycle-detection-brents-tortoise-and-hare\n\"\"\"", "inputs": [[[2, 3, 4, 2, 3, 4]], [[1, 2, 3, 4, 2, 3, 4]], [[1, 1, 1, 1, 1, 1, 1, 1]], [[]], [[7]], [[1, 2, 3, 4]]], "outputs": [[[0, 3]], [[1, 3]], [[0, 1]], [[]], [[]], [[]]], "starter_code": "def cycle(sequence):", "canonical_solution": "def cycle(sequence):\n    for j, x in enumerate(sequence):\n        i = sequence.index(x)\n        if 0 <= i < j:\n            return [i, j - i]\n    return []", "entry_point": "cycle", "task_id": "TACO_lite/665", "input_output_examples": [[[[2, 0, 6, 3, 1, 6, 3, 1, 6, 3, 1]], [[2, 3, 4, 2, 3, 4]]], [[2, 3], [0, 3]]]}
{"requirement": "def no_order(equation):\n\"\"\"Imagine if there were no order of operations. Instead, you would do the problem from left to right. For example, the equation `$a +b  *c /d$` would become `$(((a+b)*c)//d)$` (`Math.floor(((a+b)*c)/d)` in JS). Return `None`/`null` (depending on your language) if the equation is `\"\"`.\n\n### Task:\n\nGiven an equation with a random amount of spaces greater than or equal to zero between each number and operation, return the result without order of operations. Note that if two numbers are spaces apart, act as if they were one number: `1   3` = `13`. However, if given something `% 0` or something `/ 0`, return `None/null`.\n\nMore about order of operations: [here](https://en.wikipedia.org/wiki/Order_of_operations#:~:text=In%20the%20United%20States%2C%20the,Excuse%20My%20Dear%20Aunt%20Sally%22.)\n\n### Key:\n\n- `^` represents `**`\n\n```if:python\n- `/` represents `//` or `math.floor` because the result will always be an integer\n```\n\n```if:javascript\n- `/` should always be rounded down(`Math.floor`) because the result will always be an integer\n```\n\n### Operations allowed: \n `+, -, * , /, ^, %`\n\n### Example:\n\n`no_order(2 + 3 - 4 * 1 ^ 3) returns 1`\n\nbecause:\n```\n  2 + 3 - 4 * 1 ^ 3\n= 2 + 3 - 4 * 1 ^ 3\n= 5 - 4 * 1 ^ 3\n= 1 * 1 ^ 3\n= 1 ^ 3\n= 1\n```\n\"\"\"", "inputs": [["2 + 3- 4*1   ^  3"], ["7 *  3 - 3/  10  0"], ["1 20% 0 + 9"], ["6 9* 2+6 /  0"]], "outputs": [[1], [0], [null], [null]], "starter_code": "def no_order(equation):", "canonical_solution": "def no_order(equation):\n    equation = equation.replace(' ', '')\n    equation = equation.replace('+', ')+')\n    equation = equation.replace('-', ')-')\n    equation = equation.replace('*', ')*')\n    equation = equation.replace('/', ')//')\n    equation = equation.replace('%', ')%')\n    equation = equation.replace('^', ')**')\n    equation = '(' * equation.count(')') + equation\n    try:\n        return eval(equation)\n    except:\n        pass", "entry_point": "no_order", "task_id": "TACO_lite/666", "input_output_examples": [[["2 + 3 - 4 * 1 ^ 3"]], [[1]]]}
{"requirement": "def parseboolexpr(expression: str) -> bool:\n\"\"\"Return the result of evaluating a given boolean expression, represented as a string.\nAn expression can either be:\n\n\"t\", evaluating to True;\n\"f\", evaluating to False;\n\"!(expr)\", evaluating to the logical NOT of the inner expression expr;\n\"&(expr1,expr2,...)\", evaluating to the logical AND of 2 or more inner expressions expr1, expr2, ...;\n\"|(expr1,expr2,...)\", evaluating to the logical OR of 2 or more inner expressions expr1, expr2, ...\n\n \nExample 1:\nInput: expression = \"!(f)\"\nOutput: true\n\nExample 2:\nInput: expression = \"|(f,t)\"\nOutput: true\n\nExample 3:\nInput: expression = \"&(t,f)\"\nOutput: false\n\nExample 4:\nInput: expression = \"|(&(t,f,t),!(t))\"\nOutput: false\n\n \nConstraints:\n\n1 <= expression.length <= 20000\nexpression[i] consists of characters in {'(', ')', '&', '|', '!', 't', 'f', ','}.\nexpression is a valid expression representing a boolean, as given in the description.\n\"\"\"", "inputs": [["!(f)"], ["|(f,t)"], ["&(t,f)"], ["|(&(t,f,t),!(t))"]], "outputs": [[true], [true], [false], [false]], "starter_code": "def parseboolexpr(expression: str) -> bool:", "canonical_solution": "def parseboolexpr(expression: str) -> bool:\n    if expression == 'f':\n        return False\n    if expression == 't':\n        return True\n    if expression[0] == '!':\n        return not parseboolexpr(expression[2:-1])\n    if expression[0] == '|':\n        cursor = 2\n        while cursor < len(expression) - 1:\n            end_of_next = getNextExpr(expression, cursor)\n            if parseboolexpr(expression[cursor:end_of_next]):\n                return True\n            cursor = end_of_next + 1\n        return False\n    if expression[0] == '&':\n        cursor = 2\n        while cursor < len(expression) - 1:\n            end_of_next = getNextExpr(expression, cursor)\n            if not parseboolexpr(expression[cursor:end_of_next]):\n                return False\n            cursor = end_of_next + 1\n        return True\n\ndef getNextExpr(expression, start):\n    if expression[start] == '!' or expression[start] == '|' or expression[start] == '&':\n        open_count = 1\n        close_count = 0\n        start += 1\n        while open_count > close_count:\n            start += 1\n            if expression[start] == '(':\n                open_count += 1\n            if expression[start] == ')':\n                close_count += 1\n        return start + 1\n    else:\n        return start + 1", "entry_point": "parseboolexpr", "task_id": "TACO_lite/667", "input_output_examples": [[["!(f)"], ["|(f,t)"], ["&(t,f)"], ["|(&(t,f,t),!(t))"]], [[true], [true], [false], [false]]]}
{"requirement": "def howmuch(m, n):\n\"\"\"I always thought that my old friend John was rather richer than he looked, but I never knew exactly how much money he actually had. One day (as I was plying him with questions) he said:\n\n* \"Imagine I have between `m` and `n` Zloty...\" (or did he say Quetzal? I can't remember!)\n* \"If I were to buy **9** cars costing `c` each, I'd only have 1 Zloty (or was it Meticals?) left.\"\n* \"And if I were to buy **7** boats at `b` each, I'd only have 2 Ringglets (or was it Zloty?) left.\"\n\nCould you tell me in each possible case:\n\n1. how much money `f` he could possibly have ?\n2. the cost `c` of a car?\n3. the cost `b` of a boat?\n\nSo, I will have a better idea about his fortune. Note that if `m-n` is big enough, you might have a lot of possible answers. \n\nEach answer should be given as `[\"M: f\", \"B: b\", \"C: c\"]` and all the answers as `[ [\"M: f\", \"B: b\", \"C: c\"], ... ]`. \"M\" stands for money, \"B\" for boats, \"C\" for cars.\n\n**Note:** `m, n, f, b, c` are positive integers, where `0 <= m <= n` or `m >= n >= 0`. `m` and `n` are inclusive.\n\n\n## Examples:\n```\nhowmuch(1, 100)      => [[\"M: 37\", \"B: 5\", \"C: 4\"], [\"M: 100\", \"B: 14\", \"C: 11\"]]\nhowmuch(1000, 1100)  => [[\"M: 1045\", \"B: 149\", \"C: 116\"]]\nhowmuch(10000, 9950) => [[\"M: 9991\", \"B: 1427\", \"C: 1110\"]]\nhowmuch(0, 200)      => [[\"M: 37\", \"B: 5\", \"C: 4\"], [\"M: 100\", \"B: 14\", \"C: 11\"], [\"M: 163\", \"B: 23\", \"C: 18\"]]\n```\n\nExplanation of the results for `howmuch(1, 100)`:\n\n* In the first answer his possible fortune is **37**:\n * so he can buy 7 boats each worth 5: `37 - 7 * 5 = 2`\n * or he can buy 9 cars worth 4 each: `37 - 9 * 4 = 1`\n* The second possible answer is **100**:\n * he can buy 7 boats each worth 14: `100 - 7 * 14 = 2`\n * or he can buy 9 cars worth 11: `100 - 9 * 11 = 1`\n\n# Note\nSee \"Sample Tests\" to know the format of the return.\n\"\"\"", "inputs": [[1, 100], [1000, 1100], [10000, 9950], [0, 200], [1500, 1600], [2950, 2950], [20000, 20100]], "outputs": [[[["M: 37", "B: 5", "C: 4"], ["M: 100", "B: 14", "C: 11"]]], [[["M: 1045", "B: 149", "C: 116"]]], [[["M: 9991", "B: 1427", "C: 1110"]]], [[["M: 37", "B: 5", "C: 4"], ["M: 100", "B: 14", "C: 11"], ["M: 163", "B: 23", "C: 18"]]], [[["M: 1549", "B: 221", "C: 172"]]], [[]], [[["M: 20008", "B: 2858", "C: 2223"], ["M: 20071", "B: 2867", "C: 2230"]]]], "starter_code": "def howmuch(m, n):", "canonical_solution": "def howmuch(m, n):\n    return [['M: %d' % i, 'B: %d' % (i / 7), 'C: %d' % (i / 9)] for i in range(min(m, n), max(m, n) + 1) if i % 7 == 2 and i % 9 == 1]", "entry_point": "howmuch", "task_id": "TACO_lite/668", "input_output_examples": [[[1, 100], [1000, 1100], [10000, 9950], [0, 200]], [[[["M: 37", "B: 5", "C: 4"], ["M: 100", "B: 14", "C: 11"]]], [[["M: 1045", "B: 149", "C: 116"]]], [[["M: 9991", "B: 1427", "C: 1110"]]], [[["M: 37", "B: 5", "C: 4"], ["M: 100", "B: 14", "C: 11"], ["M: 163", "B: 23", "C: 18"]]]]]}
{"requirement": "def solve(xs):\n\"\"\"You are given three piles of casino chips: white, green and black chips:\n\n* the first pile contains only white chips\n* the second pile contains only green chips\n* the third pile contains only black chips\n\nEach day you take exactly two chips of different colors and head to the casino. You can choose any color, but you are not allowed to take two chips of the same color in a day.\n\nYou will be given an array representing the number of chips of each color and your task is to return the maximum number of days you can pick the chips. Each day you need to take exactly two chips.\n\n```python \nsolve([1,1,1]) = 1, because after you pick on day one, there will be only one chip left\nsolve([1,2,1] = 2, you can pick twice; you pick two chips on day one then on day two\nsolve([4,1,1]) = 2\n```\n\n```javascript \nsolve([1,1,1]) = 1, because after you pick on day one, there will be only one chip left\nsolve([1,2,1]) = 2, you can pick twice; you pick two chips on day one then on day two\nsolve([4,1,1]) = 2\n```\n\n```go \nsolve([1,1,1]) = 1, because after you pick on day one, there will be only one chip left\nsolve([1,2,1]) = 2, you can pick twice; you pick two chips on day one then on day two\nsolve([4,1,1]) = 2\n```\n\n\n```ruby \nsolve([1,1,1]) = 1, because after you pick on day one, there will be only one chip left\nsolve([1,2,1]) = 2, you can pick twice; you pick two chips on day, two chips on day two\nsolve([4,1,1]) = 2\n```\n\nMore examples in the test cases. Good luck!\n\nBrute force is not the way to go here. Look for a simplifying mathematical approach.\n\"\"\"", "inputs": [[[1, 1, 1]], [[1, 2, 1]], [[4, 1, 1]], [[8, 2, 8]], [[8, 1, 4]], [[7, 4, 10]], [[12, 12, 12]], [[1, 23, 2]]], "outputs": [[1], [2], [2], [9], [5], [10], [18], [3]], "starter_code": "def solve(xs):", "canonical_solution": "def solve(xs):\n    x, y, z = sorted(xs)\n    return min(x + y, (x + y + z) // 2)", "entry_point": "solve", "task_id": "TACO_lite/669", "input_output_examples": [[[[1, 1, 1]], [[1, 2, 1]], [[4, 1, 1]]], [[1], [2], [2]]]}
{"requirement": "def divide(weight):\n\"\"\"# It's too hot, and they can't even…\n\nOne hot summer day Pete and his friend Billy decided to buy watermelons. They chose the biggest crate. They rushed home, dying of thirst, and decided to divide their loot, however they faced a hard problem.\n\nPete and Billy are great fans of even numbers, that's why they want to divide the number of watermelons in such a way that each of the two parts consists of an even number of watermelons. However, it is not obligatory that the parts are equal. \n\nExample: the boys can divide a stack of 8 watermelons into 2+6 melons, or 4+4 melons.\n\nThe boys are extremely tired and want to start their meal as soon as possible, that's why you should help them and find out, whether they can divide the fruits in the way they want. For sure, each of them should get a part of positive weight.\n\n# Task\nGiven an integral number of watermelons `w` (`1 ≤ w ≤ 100`; `1 ≤ w` in Haskell), check whether Pete and Billy can divide the melons so that each of them gets an even amount.\n\n## Examples\n\"\"\"", "inputs": [[4], [2], [5], [88], [100], [67], [90], [10], [99], [32]], "outputs": [[true], [false], [false], [true], [true], [false], [true], [true], [false], [true]], "starter_code": "def divide(weight):", "canonical_solution": "def divide(weight):\n    return weight > 2 and weight % 2 == 0", "entry_point": "divide", "task_id": "TACO_lite/670", "input_output_examples": [[[4], [8]], [[true], [true]]]}
{"requirement": "def base_finder(seq):\n\"\"\"Uh oh, Someone at the office has dropped all these sequences on the floor and forgotten to label them with their correct bases. \n\nWe have to fix this before the boss gets back or we're all going to be fired!\n\nThis is what your years of coding have been leading up to, now is your time to shine!\n\n## Task\n\nYou will have to create a function which takes in a sequence of numbers in **random order** and you will have to return the correct base of those numbers.\n\nThe base is the number of unique digits. For example, a base 10 number can have 10 unique digits: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 and a base 2 number (Binary) can have 2 unique digits: 0 and 1.\n\n### Constraints\n\nThe sequence will always be 10 numbers long and we know that the base is going to be between 2 and 10 inclusive so no need to worry about any letters. When sorted, the sequence is made up of consecutive numbers.\n\n### Examples\n\n```\n[ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\" ]     -->  10\n[ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"10\", \"11\", \"12\", \"13\" ]  -->   7\n```\n\n**Good luck!**\n\"\"\"", "inputs": [[["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]], [["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]], [["1", "2", "3", "4", "5", "6", "10", "11", "12", "13"]], [["301", "302", "303", "304", "305", "310", "311", "312", "313", "314"]], [["50", "51", "61", "53", "54", "60", "52", "62", "55", "56"]]], "outputs": [[10], [10], [7], [6], [7]], "starter_code": "def base_finder(seq):", "canonical_solution": "def base_finder(seq):\n    return len(set(''.join(seq)))", "entry_point": "base_finder", "task_id": "TACO_lite/671", "input_output_examples": [[[["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]], [["1", "2", "3", "4", "5", "6", "10", "11", "12", "13"]]], [[10], [7]]]}
{"requirement": "def poly_add(p1, p2):\n\"\"\"## Nova polynomial add\n\nThis kata is from a series on polynomial handling. ( [#1](http://www.codewars.com/kata/nova-polynomial-1-add-1) [#2](http://www.codewars.com/kata/570eb07e127ad107270005fe) [#3](http://www.codewars.com/kata/5714041e8807940ff3001140 ) [#4](http://www.codewars.com/kata/571a2e2df24bdfd4e20001f5) )\n\nConsider a polynomial in a list where each element in the list element corresponds to a factor. The factor order is the position in the list. The first element is the zero order factor (the constant).\n\n`p = [a0, a1, a2, a3]` signifies the polynomial `a0 + a1x + a2x^2 + a3*x^3`\n\nIn this kata add two polynomials:\n\n```python\npoly_add ( [1, 2], [1] ) = [2, 2]\n```\n\"\"\"", "inputs": [[[1], [1]], [[1, 2], [1]], [[1, 2, 3, 4], [4, 3, 2, 1]], [[], []], [[1, 2, 3, 4, 5, 6], []], [[], [1, 2, 3, 4, 5, 6]]], "outputs": [[[2]], [[2, 2]], [[5, 5, 5, 5]], [[]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6]]], "starter_code": "def poly_add(p1, p2):", "canonical_solution": "def poly_add(p1, p2):\n    if p1 == []:\n        return p2\n    if p2 == []:\n        return p1\n    return [p1[0] + p2[0]] + poly_add(p1[1:], p2[1:])", "entry_point": "poly_add", "task_id": "TACO_lite/672", "input_output_examples": [[[[1, 2], [1]]], [[2, 2]]]}
{"requirement": "def around_fib(n):\n\"\"\"Another Fibonacci... yes but with other kinds of result.\nThe function is named `aroundFib` or `around_fib`, depending of the language.\nIts parameter is `n` (positive integer).\n\nFirst you have to calculate `f` the value of `fibonacci(n)` with `fibonacci(0) --> 0` and\n`fibonacci(1) --> 1` (see: )\n\n- 1) Find the count of each digit `ch` in `f` (`ch`: digit from 0 to 9), call this count `cnt` and find the maximum\nvalue of `cnt`, call this maximum `maxcnt`. If there are ties, the digit `ch` to consider is the first one - in natural digit order - giving `maxcnt`.\n\n- 2) Cut the value `f` into chunks of length at most `25`. The last chunk may be 25 long or less.\n\n```\nExample: for `n=100` you have only one chunk `354224848179261915075`\nExample: for `n=180` f is `18547707689471986212190138521399707760` and you have two chunks \n`1854770768947198621219013` and `8521399707760`. First length here is 25 and second one is 13.\n```\n\n- At last return a string in the following format:\n\"Last chunk ...; Max is ... for digit ...\"\n\nwhere Max is `maxcnt` and digit the first `ch` (in 0..9) leading to `maxcnt`.\n\n\n```\nExample: for `n=100` -> \"Last chunk 354224848179261915075; Max is 3 for digit 1\" \nExample: for `n=180` -> \"Last chunk 8521399707760; Max is 7 for digit 7\"\nExample: for `n=18000` -> \"Last chunk 140258776000; Max is 409 for digit 1\"\n```\n# Beware: \n`fib(18000)` has `3762` digits. Values of `n` are between `500` and `25000`.\n\n# Note\nTranslators are welcome for all languages, except for Ruby since the Bash tests needing Ruby a Ruby reference solution is already there though not yet published.\n\"\"\"", "inputs": [[666], [934], [617], [576], [982], [628], [901], [957], [916], [823], [988], [703], [873], [664], [749], [581], [986], [904], [716], [673], [12965], [17001], [16381], [18035], [10611], [13959], [17962], [13505], [15366], [13883], [10210], [16797], [15923], [18108], [12314], [15708], [18544], [14934], [17508], [12900], [22389], [22587], [21019], [21816], [24542], [23855], [24948], [22774], [22166], [22733], [21537], [22770], [23544], [24406], [24903]], "outputs": [["Last chunk 56699078708088; Max is 18 for digit 8"], ["Last chunk 78863403327510987087; Max is 30 for digit 7"], ["Last chunk 3197; Max is 18 for digit 9"], ["Last chunk 735148681490199640832; Max is 16 for digit 0"], ["Last chunk 79791; Max is 27 for digit 4"], ["Last chunk 519011; Max is 20 for digit 3"], ["Last chunk 7891167369401; Max is 27 for digit 0"], ["Last chunk 5402420264154456349058562; Max is 29 for digit 2"], ["Last chunk 85359040486266787; Max is 27 for digit 4"], ["Last chunk 7907999685333994717357; Max is 22 for digit 0"], ["Last chunk 0223731; Max is 32 for digit 1"], ["Last chunk 1300138427142200651677; Max is 22 for digit 0"], ["Last chunk 30038818; Max is 29 for digit 8"], ["Last chunk 79269128954923; Max is 20 for digit 2"], ["Last chunk 9505749; Max is 22 for digit 1"], ["Last chunk 5418273142575204123781; Max is 18 for digit 2"], ["Last chunk 493873; Max is 27 for digit 8"], ["Last chunk 04166807985803; Max is 27 for digit 8"], ["Last chunk 9313623756961376768580637; Max is 19 for digit 1"], ["Last chunk 8497269999660993; Max is 25 for digit 9"], ["Last chunk 5485552965; Max is 299 for digit 7"], ["Last chunk 626; Max is 397 for digit 7"], ["Last chunk 608352205068600151219081; Max is 367 for digit 4"], ["Last chunk 9701559050936959465; Max is 406 for digit 3"], ["Last chunk 521019873015146114; Max is 252 for digit 0"], ["Last chunk 53856715698959266; Max is 333 for digit 1"], ["Last chunk 5831; Max is 395 for digit 0"], ["Last chunk 72489142392597079951005; Max is 306 for digit 5"], ["Last chunk 44152391688; Max is 332 for digit 2"], ["Last chunk 97; Max is 313 for digit 1"], ["Last chunk 896343655; Max is 226 for digit 7"], ["Last chunk 37957484802; Max is 393 for digit 0"], ["Last chunk 257; Max is 368 for digit 9"], ["Last chunk 151398096; Max is 410 for digit 8"], ["Last chunk 378933670052262507657777; Max is 278 for digit 4"], ["Last chunk 79433296; Max is 364 for digit 7"], ["Last chunk 3; Max is 404 for digit 9"], ["Last chunk 210628747612946784712; Max is 343 for digit 3"], ["Last chunk 898206896; Max is 399 for digit 9"], ["Last chunk 937654497907092122800; Max is 287 for digit 6"], ["Last chunk 4114; Max is 497 for digit 8"], ["Last chunk 719687658570836552258; Max is 497 for digit 1"], ["Last chunk 712645962279818181; Max is 480 for digit 7"], ["Last chunk 991575712; Max is 509 for digit 6"], ["Last chunk 0921; Max is 579 for digit 0"], ["Last chunk 67799826145; Max is 533 for digit 9"], ["Last chunk 66821527441776; Max is 535 for digit 7"], ["Last chunk 3794465007; Max is 498 for digit 6"], ["Last chunk 92040713; Max is 484 for digit 1"], ["Last chunk 3; Max is 508 for digit 2"], ["Last chunk 2; Max is 488 for digit 6"], ["Last chunk 721118360; Max is 505 for digit 9"], ["Last chunk 073632201495632712608; Max is 522 for digit 3"], ["Last chunk 3; Max is 543 for digit 1"], ["Last chunk 13602; Max is 569 for digit 0"]], "starter_code": "def around_fib(n):", "canonical_solution": "from collections import Counter\nfib = [0, 1]\n\ndef around_fib(n):\n    while len(fib) <= n:\n        fib.append(fib[-1] + fib[-2])\n    f = str(fib[n])\n    val = max(((v, -int(k)) for k, v in Counter(f).items()))\n    last = f[-(len(f) % 25 or 25):]\n    return f'Last chunk {last}; Max is {val[0]} for digit {-val[1]}'", "entry_point": "around_fib", "task_id": "TACO_lite/673", "input_output_examples": [[[100], [180], [18000]], [["Last chunk 354224848179261915075; Max is 3 for digit 1"], ["Last chunk 8521399707760; Max is 7 for digit 7"], ["Last chunk 140258776000; Max is 409 for digit 1"]]]}
{"requirement": "def sort_by_value_and_index(arr):\n\"\"\"# Sort an array by value and index\n\nYour task is to sort an array of integer numbers by the product of the value and the index of the positions.\n\nFor sorting the index starts at 1, NOT at 0!\nThe sorting has to be ascending.\nThe array will never be null and will always contain numbers.\n\nExample:\n```\nInput: 23, 2, 3, 4, 5\nProduct of value and index:\n23 => 23 * 1 = 23  -> Output-Pos 4\n 2 =>  2 * 2 = 4   -> Output-Pos 1\n 3 =>  3 * 3 = 9   -> Output-Pos 2\n 4 =>  4 * 4 = 16  -> Output-Pos 3\n 5 =>  5 * 5 = 25  -> Output-Pos 5\n\nOutput: 2, 3, 4, 23, 5\n```\n\nHave fun coding it and please don't forget to vote and rank this kata! :-) \n\nI have also created other katas. Take a look if you enjoyed this kata!\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[23, 2, 3, 4, 5]], [[26, 2, 3, 4, 5]], [[9, 5, 1, 4, 3]]], "outputs": [[[1, 2, 3, 4, 5]], [[2, 3, 4, 23, 5]], [[2, 3, 4, 5, 26]], [[1, 9, 5, 3, 4]]], "starter_code": "def sort_by_value_and_index(arr):", "canonical_solution": "def sort_by_value_and_index(arr):\n    return [y[1] for y in sorted(enumerate(arr), key=lambda x: (x[0] + 1) * x[1])]", "entry_point": "sort_by_value_and_index", "task_id": "TACO_lite/674", "input_output_examples": [[[23, 2, 3, 4, 5]], [[2, 3, 4, 23, 5]]]}
{"requirement": "def word_pattern(pattern, string):\n\"\"\"Write\n```python\nword_pattern(pattern, string)\n```\nthat given a ```pattern``` and a string ```str```, find if ```str``` follows the same sequence as ```pattern```. \n\nFor example:\n```python\nword_pattern('abab', 'truck car truck car') == True\nword_pattern('aaaa', 'dog dog dog dog') == True\nword_pattern('abab', 'apple banana banana apple') == False\nword_pattern('aaaa', 'cat cat dog cat') == False\n```\n\"\"\"", "inputs": [["abab", "apple banana apple banana"], ["abba", "car truck truck car"], ["abab", "apple banana banana apple"], ["aaaa", "cat cat cat cat"], ["aaaa", "cat cat dog cat"], ["bbbabcb", "c# c# c# javascript c# python c#"], ["abcdef", "apple banana cat donkey elephant flower"], ["xyzzyx", "apple banana apple banana"], ["xyzzyx", "1 2 3 3 2 1"], ["aafggiilp", "cow cow fly pig pig sheep sheep chicken aardvark"], ["aafggiilp", "cow cow fly rooster pig sheep sheep chicken aardvark"], ["aaaa", "cat cat cat"], ["abba", "dog dog dog dog"]], "outputs": [[true], [true], [false], [true], [false], [true], [true], [false], [true], [true], [false], [false], [false]], "starter_code": "def word_pattern(pattern, string):", "canonical_solution": "def word_pattern(pattern, string):\n    x = list(pattern)\n    y = string.split(' ')\n    return len(x) == len(y) and len(set(x)) == len(set(y)) == len(set(zip(x, y)))", "entry_point": "word_pattern", "task_id": "TACO_lite/675", "input_output_examples": [[["abab", "truck car truck car"], ["aaaa", "dog dog dog dog"], ["abab", "apple banana banana apple"], ["aaaa", "cat cat dog cat"]], [[true], [true], [false], [false]]]}
{"requirement": "def solve(a, n):\n\"\"\"In this Kata, you will be given an array of numbers and a number `n`, and your task will be to determine if `any` array elements, when summed (or taken individually), are divisible by `n`. \n\nFor example:\n\n  * `solve([1,3,4,7,6],9) == true`, because `3 + 6` is divisible by `9`\n  * `solve([1,2,3,4,5],10) == true` for similar reasons.\n  * `solve([8,5,3,9],7) == true`, because `7` evenly divides `5 + 9`\n  * but `solve([8,5,3],7) == false`.\n  \nAll numbers in the array will be greater than `0`. \n\nMore examples in the test cases.\n  \nGood luck!\n\nIf you like this Kata, please try:\n\n[Simple division](https://www.codewars.com/kata/59ec2d112332430ce9000005)\n\n[Divisor harmony](https://www.codewars.com/kata/59bf97cd4f98a8b1cd00007e)\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5], 8], [[7, 2, 8, 5], 16], [[1, 2, 3, 4, 5], 10], [[3, 1, 5, 7], 14], [[1, 2, 3, 4, 5], 15], [[8, 5, 3, 9], 7], [[8, 5, 3], 7]], "outputs": [[true], [false], [true], [false], [true], [true], [false]], "starter_code": "def solve(a, n):", "canonical_solution": "from itertools import combinations\n\ndef solve(a, n):\n    return any((sum(c) % n == 0 for i in range(len(a)) for c in combinations(a, i + 1)))", "entry_point": "solve", "task_id": "TACO_lite/676", "input_output_examples": [[[[1, 3, 4, 7, 6], 9], [[1, 2, 3, 4, 5], 10], [[8, 5, 3, 9], 7], [[8, 5, 3], 7]], [[true], [true], [true], [false]]]}
{"requirement": "def bin_mul(m, n):\n\"\"\"You will be given two numbers `m,n`. The numbers could span from `0` to `10000`. We can get their product by using binary reduction as show in the table below.\nExample (to understand the table please read the description below it) \n\n\n\n\n\nreal value of m(r)\nm\nn\n(r*n)\n\n\n0\n100\n15\n0\n\n\n0\n50\n30\n0\n\n\n1\n25\n60\n60\n\n\n0\n12\n120\n0\n\n\n0\n6\n240\n0\n\n\n1\n3\n480\n480\n\n\n1\n1\n960\n960\n\n\n\nAbove, we are given two numbers `100` and `15`. we keep reducing the bigger number by dividing it by `2` and hold the integer part of the division till it is no more divisible by `2`. Then we assign the real values to these reduced parts of `m`. Any reduced number `[1,m]` has real value of `0` if it is even, and it will have real value of `1` if it is odd. On the other hand the smaller number in this case `n` keeps on doubling itself the same amount of times `m` reduces itself. The idea of this method is to change multiplication of two big number to a sequence of multiplication by `0` or `1` and perform addition to get the final product. You can see that from the last column `(r*n)` above. \nif we sum the last column we get `0+60+0+0+480+960=1500=100*15`\nNow your task for this kata will be to get those non-zero number in the last column in an array and return it sorted in descending order.so for the above example the return will be `[960,480,60]`.\n\n_Beware: _`m,n`_ are not necessarily ordered._\n\"\"\"", "inputs": [[100, 15], [15, 0], [0, 0]], "outputs": [[[960, 480, 60]], [[]], [[]]], "starter_code": "def bin_mul(m, n):", "canonical_solution": "def bin_mul(m, n):\n    if m < n:\n        return bin_mul(n, m)\n    if n == 0:\n        return []\n    res = []\n    while m > 0:\n        if m % 2 == 1:\n            res.append(n)\n        m = m // 2\n        n *= 2\n    return res[::-1]", "entry_point": "bin_mul", "task_id": "TACO_lite/677", "input_output_examples": [[[100, 15]], [[[960, 480, 60]]]]}
{"requirement": "def digits(n):\n\"\"\"Determine the total number of digits in the integer (`n>=0`) given as input to the function. For example, 9 is a single digit, 66 has 2 digits and 128685 has 6 digits. Be careful to avoid overflows/underflows.\n\nAll inputs will be valid.\n\"\"\"", "inputs": [[5], [12345], [9876543210]], "outputs": [[1], [5], [10]], "starter_code": "def digits(n):", "canonical_solution": "def digits(n):\n    return len(str(n))", "entry_point": "digits", "task_id": "TACO_lite/678", "input_output_examples": [[[9], [66], [128685], [5]], [[1], [2], [6], [1]]]}
{"requirement": "def display_board(board, width):\n\"\"\"Do you have in mind the good old TicTacToe?\n\nAssuming that you get all the data in one array, you put a space around each value, `|` as a columns separator and multiple `-` as rows separator, with something like `[\"O\", \"X\", \" \", \" \", \"X\", \" \", \"X\", \"O\", \" \"]` you should be returning this structure (inclusive of new lines):\n\n```\n O | X |   \n-----------\n   | X |   \n-----------\n X | O |   \n```\n\nNow, to spice up things a bit, we are going to expand our board well beyond a trivial `3` x `3` square and we will accept rectangles of big sizes, still all as a long linear array.\n\nFor example, for `\"O\", \"X\", \" \", \" \", \"X\", \" \", \"X\", \"O\", \" \", \"O\"]` (same as above, just one extra `\"O\"`) and knowing that the length of each row is `5`, you will be returning\n\n```\n O | X |   |   | X \n-------------------\n   | X | O |   | O \n```\n\nAnd worry not about missing elements, as the array/list/vector length is always going to be a multiple of the width.\n\"\"\"", "inputs": [[["O", "X", "X", "O"], 2], [["O", "X", " ", " ", "X", " ", "X", "O", " "], 3], [["O", "X", " ", " ", "X", " ", "X", "O", " ", "O"], 5], [["O", "X", " ", " ", "X", " ", "X", "O", " ", "O"], 2], [["1", "2", "3", "4", "5", "1", "2", "3", "4", "5", "1", "2", "3", "4", "5", "1", "2", "3", "4", "5", "1", "2", "3", "4", "5", "1", "2", "3", "4", "5", "1", "2", "3", "4", "5", "1"], 6]], "outputs": [[" O | X \n-------\n X | O "], [" O | X |   \n-----------\n   | X |   \n-----------\n X | O |   "], [" O | X |   |   | X \n-------------------\n   | X | O |   | O "], [" O | X \n-------\n   |   \n-------\n X |   \n-------\n X | O \n-------\n   | O "], [" 1 | 2 | 3 | 4 | 5 | 1 \n-----------------------\n 2 | 3 | 4 | 5 | 1 | 2 \n-----------------------\n 3 | 4 | 5 | 1 | 2 | 3 \n-----------------------\n 4 | 5 | 1 | 2 | 3 | 4 \n-----------------------\n 5 | 1 | 2 | 3 | 4 | 5 \n-----------------------\n 1 | 2 | 3 | 4 | 5 | 1 "]], "starter_code": "def display_board(board, width):", "canonical_solution": "def display_board(board, width):\n    board = [c.center(3) for c in board]\n    rows = ['|'.join(board[n:n + width]) for n in range(0, len(board), width)]\n    return ('\\n' + '-' * (4 * width - 1) + '\\n').join(rows)", "entry_point": "display_board", "task_id": "TACO_lite/679", "input_output_examples": [[[["O", "X", " ", " ", "X", " ", "X", "O", " "], 3], [["O", "X", " ", " ", "X", " ", "X", "O", " ", "O"], 5]], [[" O | X |   \n-----------\n   | X |   \n-----------\n X | O |   "], [" O | X |   |   | X \n-------------------\n   | X | O |   | O "]]]}
{"requirement": "def fat_fingers(s):\n\"\"\"Freddy has a really fat left pinky finger, and every time Freddy tries to type an ```A```, he accidentally hits the CapsLock key!\n\nGiven a string that Freddy wants to type, emulate the keyboard misses where each ```A``` supposedly pressed is replaced with CapsLock, and return the string that Freddy actually types. It doesn't matter if the ```A``` in the string is capitalized or not. When CapsLock is enabled, capitalization is reversed, but punctuation is not affected.\n\nExamples:\n\n```\n\"The quick brown fox jumps over the lazy dog.\"\n-> \"The quick brown fox jumps over the lZY DOG.\"\n\n\"The end of the institution, maintenance, and administration of government, is to secure the existence of the body politic, to protect it, and to furnish the individuals who compose it with the power of enjoying in safety and tranquillity their natural rights, and the blessings of life: and whenever these great objects are not obtained, the people have a right to alter the government, and to take measures necessary for their safety, prosperity and happiness.\"\n-> \"The end of the institution, mINTENnce, ND dministrTION OF GOVERNMENT, IS TO SECURE THE EXISTENCE OF THE BODY POLITIC, TO PROTECT IT, nd to furnish the individuLS WHO COMPOSE IT WITH THE POWER OF ENJOYING IN Sfety ND TRnquillity their nTURl rights, ND THE BLESSINGS OF LIFE: nd whenever these greT OBJECTS re not obtINED, THE PEOPLE Hve  RIGHT TO lter the government, ND TO Tke meSURES NECESSry for their sFETY, PROSPERITY nd hPPINESS.\"\n\n\"aAaaaaAaaaAAaAa\"\n-> \"\"\n```\n\n**Note!**\n\nIf (Caps Lock is Enabled) and then you (HOLD Shift + alpha character) it will always be the reverse\n\nExamples:\n```\n(Caps Lock Enabled) + (HOLD Shift + Press 'b') = b\n(Caps Lock Disabled) + (HOLD Shift + Press 'b') = B\n```\n\nIf the given string is `\"\"`, the answer should be evident.\n\nHappy coding!\n\n~~~if:fortran\n*NOTE: In Fortran, your returned string is* **not** *permitted to contain any unnecessary leading/trailing whitespace.*\n~~~\n\n\n(Adapted from https://codegolf.stackexchange.com/questions/158132/no-a-just-caps-lock)\n\"\"\"", "inputs": [["aAaaaaAaaaAAaAa"], ["The end of the institution, maintenance, and administration of government, is to secure the existence of the body politic, to protect it, and to furnish the individuals who compose it with the power of enjoying in safety and tranquillity their natural rights, and the blessings of life: and whenever these great objects are not obtained, the people have a right to alter the government, and to take measures necessary for their safety, prosperity and happiness."], ["a99&a6/<a}"]], "outputs": [[""], ["The end of the institution, mINTENnce, ND dministrTION OF GOVERNMENT, IS TO SECURE THE EXISTENCE OF THE BODY POLITIC, TO PROTECT IT, nd to furnish the individuLS WHO COMPOSE IT WITH THE POWER OF ENJOYING IN Sfety ND TRnquillity their nTURl rights, ND THE BLESSINGS OF LIFE: nd whenever these greT OBJECTS re not obtINED, THE PEOPLE Hve  RIGHT TO lter the government, ND TO Tke meSURES NECESSry for their sFETY, PROSPERITY nd hPPINESS."], ["99&6/<}"]], "starter_code": "def fat_fingers(s):", "canonical_solution": "def fat_fingers(s):\n    if not s:\n        return s\n    swap = [False]\n    return ''.join((c.swapcase() if swap[0] else c for c in s if c not in 'aA' or swap.__setitem__(0, not swap[0])))", "entry_point": "fat_fingers", "task_id": "TACO_lite/680", "input_output_examples": [[["The quick brown fox jumps over the lazy dog."], ["The end of the institution, maintenance, and administration of government, is to secure the existence of the body politic, to protect it, and to furnish the individuals who compose it with the power of enjoying in safety and tranquillity their natural rights, and the blessings of life: and whenever these great objects are not obtained, the people have a right to alter the government, and to take measures necessary for their safety, prosperity and happiness."], ["aAaaaaAaaaAAaAa"], [""]], [["The quick brown fox jumps over the lZY DOG."], ["The end of the institution, mINTENnce, ND dministrTION OF GOVERNMENT, IS TO SECURE THE EXISTENCE OF THE BODY POLITIC, TO PROTECT IT, nd to furnish the individuLS WHO COMPOSE IT WITH THE POWER OF ENJOYING IN Sfety ND TRnquillity their nTURl rights, ND THE BLESSINGS OF LIFE: nd whenever these greT OBJECTS re not obtINED, THE PEOPLE Hve  RIGHT TO lter the government, ND TO Tke meSURES NECESSry for their sFETY, PROSPERITY nd hPPINESS."], [""], [""]]]}
{"requirement": "def number_property(n):\n\"\"\"Create a function which checks a number for three different properties.\n\n- is the number prime?\n- is the number even?\n- is the number a multiple of 10?\n\nEach should return either true or false, which should be given as an array. Remark: The Haskell variant uses `data Property`.\n\n### Examples\n```python\nnumber_property(7)  # ==> [true,  false, false] \nnumber_property(10) # ==> [false, true,  true] \n```\nThe number will always be an integer, either positive or negative. Note that negative numbers cannot be primes, but they can be multiples of 10:\n\n```python\nnumber_property(-7)  # ==> [false, false, false] \nnumber_property(-10) # ==> [false, true,  true] \n```\n\"\"\"", "inputs": [[0], [2], [5], [25], [131], [1], [100], [179424691], [179424693]], "outputs": [[[false, true, true]], [[true, true, false]], [[true, false, false]], [[false, false, false]], [[true, false, false]], [[false, false, false]], [[false, true, true]], [[true, false, false]], [[false, false, false]]], "starter_code": "def number_property(n):", "canonical_solution": "import math\n\ndef number_property(n):\n    return [isPrime(n), isEven(n), isMultipleOf10(n)]\n\ndef isPrime(n):\n    if n <= 3:\n        return n >= 2\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef isEven(n):\n    return n % 2 == 0\n\ndef isMultipleOf10(n):\n    return n % 10 == 0", "entry_point": "number_property", "task_id": "TACO_lite/681", "input_output_examples": [[[7], [10], [-7], [-10]], [[true, false, false], [false, true, true], [false, false, false], [false, true, true]]]}
{"requirement": "def get_participants(h):\n\"\"\"Johnny is a farmer and he annually holds a beet farmers convention \"Drop the beet\".\n\nEvery year he takes photos of farmers handshaking. Johnny knows that no two farmers handshake more than once. He also knows that some of the possible handshake combinations may not happen.\n\nHowever, Johnny would like to know the minimal amount of people that participated this year just by counting all the handshakes.\n\nHelp Johnny by writing a function, that takes the amount of handshakes and returns the minimal amount of people needed to perform these handshakes (a pair of farmers handshake only once).\n\"\"\"", "inputs": [[0], [1], [3], [6], [7]], "outputs": [[1], [2], [3], [4], [5]], "starter_code": "def get_participants(h):", "canonical_solution": "from math import ceil\n\ndef get_participants(h):\n    return int(ceil(0.5 + (0.25 + 2 * h) ** 0.5))", "entry_point": "get_participants", "task_id": "TACO_lite/682", "input_output_examples": [[[0]], [[1]]]}
{"requirement": "def pattern(n, x=1, y=1, *args):\n\"\"\"< PREVIOUS KATA\nNEXT KATA >\n\n## Task:\n\nYou have to write a function `pattern` which returns the following Pattern(See Examples) upto desired number of rows. \n\n* Note:```Returning``` the pattern is not the same as ```Printing``` the pattern.\n\n### Parameters:\n    \n    pattern(        n        ,        x        ,        y        );\n                    ^                 ^                 ^   \n                    |                 |                 |\n             Term upto which   Number of times   Number of times\n              Basic Pattern     Basic Pattern     Basic Pattern\n                should be         should be         should be\n                 created          repeated           repeated\n                                horizontally        vertically\n    \n* Note: `Basic Pattern` means what we created in Complete The Pattern #12\n\n## Rules/Note:\n\n* The pattern should be created using only unit digits.\n* If `n < 1` then it should return \"\" i.e. empty string.\n* If `x <= 1` then the basic pattern should not be repeated horizontally.\n* If `y <= 1` then the basic pattern should not be repeated vertically.\n* `The length of each line is same`, and is equal to the length of longest line in the pattern.\n* Range of Parameters (for the sake of CW Compiler) :\n  + `n ∈ (-∞,25]`\n  + `x ∈ (-∞,10]`\n  + `y ∈ (-∞,10]`\n* If only two arguments are passed then the function `pattern` should run as if `y <= 1`.\n* If only one argument is passed then the function `pattern` should run as if `x <= 1` & `y <= 1`.\n* The function `pattern` should work when extra arguments are passed, by ignoring the extra arguments.\n   \n   \n## Examples:\n\n* Having Three Arguments-\n\n + pattern(4,3,2):\n\n        1     1     1     1\n         2   2 2   2 2   2 \n          3 3   3 3   3 3  \n           4     4     4   \n          3 3   3 3   3 3  \n         2   2 2   2 2   2 \n        1     1     1     1\n         2   2 2   2 2   2 \n          3 3   3 3   3 3  \n           4     4     4   \n          3 3   3 3   3 3  \n         2   2 2   2 2   2 \n        1     1     1     1\n       \n* Having Two Arguments-\n\n  + pattern(10,2):\n\n        1                 1                 1\n         2               2 2               2 \n          3             3   3             3  \n           4           4     4           4   \n            5         5       5         5    \n             6       6         6       6     \n              7     7           7     7      \n               8   8             8   8       \n                9 9               9 9        \n                 0                 0         \n                9 9               9 9        \n               8   8             8   8       \n              7     7           7     7      \n             6       6         6       6     \n            5         5       5         5    \n           4           4     4           4   \n          3             3   3             3  \n         2               2 2               2 \n        1                 1                 1\n\n* Having Only One Argument-\n\n  + pattern(25):\n\n        1                                               1\n         2                                             2 \n          3                                           3  \n           4                                         4   \n            5                                       5    \n             6                                     6     \n              7                                   7      \n               8                                 8       \n                9                               9        \n                 0                             0         \n                  1                           1          \n                   2                         2           \n                    3                       3            \n                     4                     4             \n                      5                   5              \n                       6                 6               \n                        7               7                \n                         8             8                 \n                          9           9                  \n                           0         0                   \n                            1       1                    \n                             2     2                     \n                              3   3                      \n                               4 4                       \n                                5                        \n                               4 4                       \n                              3   3                      \n                             2     2                     \n                            1       1                    \n                           0         0                   \n                          9           9                  \n                         8             8                 \n                        7               7                \n                       6                 6               \n                      5                   5              \n                     4                     4             \n                    3                       3            \n                   2                         2           \n                  1                           1          \n                 0                             0         \n                9                               9        \n               8                                 8       \n              7                                   7      \n             6                                     6     \n            5                                       5    \n           4                                         4   \n          3                                           3  \n         2                                             2 \n        1                                               1\n        \n>>>LIST OF ALL MY KATAS<<<\n\"\"\"", "inputs": [[4, 2, 3], [3, -29, 4], [5, -28, 0], [7, 2], [10, -2999], [5], [4, 2, 3, 5, 7, -8], [-3, -5, 0], [-11, 1, 3], [-25, 5, -9], [-25, -11, 9], [-3, -5], [-11, 3], [-9999999], [-25, 5, -9, 55, -8, -7, 8], [0, 1, 2], [0, -1, 0], [0, -1, 2], [0, 1, -2], [0, 1], [0, -1], [0], [0, -5, 8, -7, 10]], "outputs": [["1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1"], ["1   1\n 2 2 \n  3  \n 2 2 \n1   1\n 2 2 \n  3  \n 2 2 \n1   1\n 2 2 \n  3  \n 2 2 \n1   1\n 2 2 \n  3  \n 2 2 \n1   1"], ["1       1\n 2     2 \n  3   3  \n   4 4   \n    5    \n   4 4   \n  3   3  \n 2     2 \n1       1"], ["1           1           1\n 2         2 2         2 \n  3       3   3       3  \n   4     4     4     4   \n    5   5       5   5    \n     6 6         6 6     \n      7           7      \n     6 6         6 6     \n    5   5       5   5    \n   4     4     4     4   \n  3       3   3       3  \n 2         2 2         2 \n1           1           1"], ["1                 1\n 2               2 \n  3             3  \n   4           4   \n    5         5    \n     6       6     \n      7     7      \n       8   8       \n        9 9        \n         0         \n        9 9        \n       8   8       \n      7     7      \n     6       6     \n    5         5    \n   4           4   \n  3             3  \n 2               2 \n1                 1"], ["1       1\n 2     2 \n  3   3  \n   4 4   \n    5    \n   4 4   \n  3   3  \n 2     2 \n1       1"], ["1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1\n 2   2 2   2 \n  3 3   3 3  \n   4     4   \n  3 3   3 3  \n 2   2 2   2 \n1     1     1"], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""], [""]], "starter_code": "def pattern(n, x=1, y=1, *args):", "canonical_solution": "def pattern(n, x=1, y=1, *args):\n    if n < 1:\n        return ''\n    result = []\n    for i in range(1, n + 1):\n        line = ' ' * (i - 1) + str(i % 10) + ' ' * (n - i)\n        result.append(line + line[::-1][1:] + (line[1:] + line[::-1][1:]) * (x - 1))\n    return '\\n'.join(result + result[::-1][1:] + (result[1:] + result[::-1][1:]) * (y - 1))", "entry_point": "pattern", "task_id": "TACO_lite/683", "input_output_examples": [[[4, 3, 2], [10, 2], [25]], [["1     1     1     1\n 2   2 2   2 2   2 \n  3 3   3 3   3 3  \n   4     4     4   \n  3 3   3 3   3 3  \n 2   2 2   2 2   2 \n1     1     1     1\n 2   2 2   2 2   2 \n  3 3   3 3   3 3  \n   4     4     4   \n  3 3   3 3   3 3  \n 2   2 2   2 2   2 \n1     1     1     1"], ["1                 1                 1\n 2               2 2               2 \n  3             3   3             3  \n   4           4     4           4   \n    5         5       5         5    \n     6       6         6       6     \n      7     7           7     7      \n       8   8             8   8       \n        9 9               9 9        \n         0                 0         \n        9 9               9 9        \n       8   8             8   8       \n      7     7           7     7      \n     6       6         6       6     \n    5         5       5         5    \n   4           4     4           4   \n  3             3   3             3  \n 2               2 2               2 \n1                 1                 1"], ["1                                               1\n 2                                             2 \n  3                                           3  \n   4                                         4   \n    5                                       5    \n     6                                     6     \n      7                                   7      \n       8                                 8       \n        9                               9        \n         0                             0         \n          1                           1          \n           2                         2           \n            3                       3            \n             4                     4             \n              5                   5              \n               6                 6               \n                7               7                \n                 8             8                 \n                  9           9                  \n                   0         0                   \n                    1       1                    \n                     2     2                     \n                      3   3                      \n                       4 4                       \n                        5                        \n                       4 4                       \n                      3   3                      \n                     2     2                     \n                    1       1                    \n                   0         0                   \n                  9           9                  \n                 8             8                 \n                7               7                \n               6                 6               \n              5                   5              \n             4                     4             \n            3                       3            \n           2                         2           \n          1                           1          \n         0                             0         \n        9                               9        \n       8                                 8       \n      7                                   7      \n     6                                     6     \n    5                                       5    \n   4                                         4   \n  3                                           3  \n 2                                             2 \n1                                               1"]]]}
{"requirement": "def string_suffix(s):\n\"\"\"Let's say take 2 strings, A and B, and define the similarity of the strings to be the length of the longest prefix common to both strings. For example, the similarity of strings `abc` and `abd` is 2, while the similarity of strings `aaa` and `aaab` is 3.\n\nwrite a function that calculates the sum of similarities of a string S with each of it's **suffixes**.\n\n```python\nstring_suffix('ababaa') => returns 11\nstring_suffix('abc') => returns 3\n```\n\nExplanation:\n\nIn the first case, the suffixes of the string are `ababaa`, `babaa`, `abaa`, `baa`, `aa` and `a`. The similarities of each of these strings with the string `ababaa` are 6,0,3,0,1,1 respectively. Thus the answer is 6 + 0 + 3 + 0 + 1 + 1 = 11.\n\nFor the second case, the answer is simply 3 + 0 + 0 = 3.\n\nNote : Each string will have at least one character - no need to check for empty strings :)\n\"\"\"", "inputs": [["aa"], ["abc"], ["ababaa"], ["aaaa"], ["aaaaa"], ["aaaaaa"], ["mnsomn"], ["apple"], ["a"], ["pippi"]], "outputs": [[3], [3], [11], [10], [15], [21], [8], [5], [1], [8]], "starter_code": "def string_suffix(s):", "canonical_solution": "from os.path import commonprefix\n\ndef string_suffix(s):\n    return sum((len(commonprefix([s, s[i:]])) for i in range(len(s))))", "entry_point": "string_suffix", "task_id": "TACO_lite/684", "input_output_examples": [[["ababaa"], ["abc"]], [[11], [3]]]}
{"requirement": "def add_all(lst):\n\"\"\"Yup!! The problem name reflects your task; just add a set of numbers. But you may feel yourselves condescended, to write a C/C++ program just to add a set of numbers. Such a problem will simply question your erudition. So, lets add some flavor of ingenuity to it. Addition operation requires cost now, and the cost is the summation of those two to be added. So,to add 1 and 10, you need a cost of 11. If you want to add 1, 2 and 3. There are several ways\n\n```c++\n1 + 2 = 3, cost = 3,\n3 + 3 = 6, cost = 6,\nTotal = 9.\n```\n```c++\n1 + 3 = 4, cost = 4,\n2 + 4 = 6, cost = 6,\nTotal = 10.\n```\n```c++\n2 + 3 = 5, cost = 5,\n1 + 5 = 6, cost = 6,\nTotal = 11.\n```\nI hope you have understood already your mission, to add a set of integers so that the cost is minimal\n\n# Your Task \nGiven a vector of integers, return the minimum total cost of addition.\n\"\"\"", "inputs": [[[6]], [[10]], [[15]]], "outputs": [[9], [19], [33]], "starter_code": "def add_all(lst):", "canonical_solution": "from heapq import *\n\ndef add_all(lst):\n    heapify(lst)\n    total = 0\n    while len(lst) > 1:\n        s = heappop(lst) + heappop(lst)\n        total += s\n        heappush(lst, s)\n    return total", "entry_point": "add_all", "task_id": "TACO_lite/685", "input_output_examples": [[[[1, 2, 3]]], [[9]]]}
{"requirement": "def positive_sum(arr):\n\"\"\"You get an array of numbers, return the sum of all of the positives ones.\n\nExample `[1,-4,7,12]` => `1 + 7 + 12 = 20`\n\nNote: if there is nothing to sum, the sum is default to `0`.\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5]], [[1, -2, 3, 4, 5]], [[-1, 2, 3, 4, -5]], [[]], [[-1, -2, -3, -4, -5]]], "outputs": [[15], [13], [9], [0], [0]], "starter_code": "def positive_sum(arr):", "canonical_solution": "def positive_sum(arr):\n    return sum((x for x in arr if x > 0))", "entry_point": "positive_sum", "task_id": "TACO_lite/686", "input_output_examples": [[[[1, -4, 7, 12]], [[]]], [[20], [0]]]}
{"requirement": "def count_consonants(text):\n\"\"\"Complete the function that counts the number of unique consonants in a string (made up of printable ascii characters).\n\nConsonants are letters used in English other than `\"a\", \"e\", \"i\", \"o\", \"u\"`. We will count `\"y\"` as a consonant.\n\nRemember, your function needs to return the number of unique consonants - disregarding duplicates. For example, if the string passed into the function reads `\"add\"`, the function should return `1` rather than `2`, since `\"d\"` is a duplicate.\n\nSimilarly, the function should also disregard duplicate consonants of differing cases. For example, `\"Dad\"` passed into the function should return `1` as `\"d\"` and `\"D\"` are duplicates.\n\n## Examples\n\n```\n\"add\" ==> 1\n\"Dad\" ==> 1\n\"aeiou\" ==> 0\n\"sillystring\" ==> 7\n\"abcdefghijklmnopqrstuvwxyz\" ==> 21\n\"Count my unique consonants!!\" ==> 7\n```\n\"\"\"", "inputs": [["sillystring"], ["aeiou"], ["abcdefghijklmnopqrstuvwxyz"], ["Count my unique consonants!!"]], "outputs": [[7], [0], [21], [7]], "starter_code": "def count_consonants(text):", "canonical_solution": "CONSONANTS = set('bcdfghjklmnpqrstvwxyz')\n\ndef count_consonants(text):\n    return len(CONSONANTS.intersection(text.lower()))", "entry_point": "count_consonants", "task_id": "TACO_lite/687", "input_output_examples": [[["add"], ["Dad"], ["aeiou"], ["sillystring"], ["abcdefghijklmnopqrstuvwxyz"], ["Count my unique consonants!!"]], [[1], [1], [0], [7], [21], [7]]]}
{"requirement": "def soundex(name):\n\"\"\"# A History Lesson\n\nSoundex is an interesting phonetic algorithm developed nearly 100 years ago for indexing names as they are pronounced in English. The goal is for homophones to be encoded to the same representation so that they can be matched despite minor differences in spelling.\n\nReference: https://en.wikipedia.org/wiki/Soundex\n\n\n\n# Preface\n\nI first read about Soundex over 30 years ago. At the time it seemed to me almost  like  A.I. that you could just type in somebody's name the way it sounded and there was still a pretty good chance it could match the correct person record. That was about the same year as the first \"Terminator\" movie so it was easy for me to put 2 and 2 together and conclude that Arnie must have had some kind of futuristic Soundex chip in his titanium skull helping him to locate ```Serah Coner```... or was it ```Sarh Connor```... or maybe ```Sayra Cunnarr```...\n\n:-)\n\n\n\n# Task\n\nIn this Kata you will encode strings using a Soundex variation called \"American Soundex\" using the following (case insensitive) steps:\n\n* Save the first letter. Remove all occurrences of ```h``` and ```w``` except first letter.\n* Replace all consonants (include the first letter) with digits as follows:\n * ```b```, ```f```, ```p```, ```v``` = 1\n * ```c```, ```g```, ```j```, ```k```, ```q```, ```s```, ```x```, ```z``` = 2\n * ```d```, ```t``` = 3\n * ```l``` = 4\n * ```m```, ```n``` = 5\n * ```r``` = 6\n* Replace all adjacent same digits with one digit.\n* Remove all occurrences of ```a```, ```e```, ```i```, ```o```, ```u```, ```y``` except first letter.\n* If first symbol is a digit replace it with letter saved on step 1.\n* Append 3 zeros if result contains less than 3 digits. Remove all except first letter and 3 digits after it\n\n## Input\n\nA space separated string of one or more names. E.g.\n\n```Sarah Connor```\n\n## Output\n\nSpace separated string of equivalent Soundex codes (the first character of each code must be uppercase). E.g.\n\n```S600 C560```\n\"\"\"", "inputs": [["Sarah Connor"], ["Sara Conar"], ["Serah Coner"], ["Sarh Connor"], ["Sayra Cunnarr"], ["Tim"], ["Joe"], ["Bob"], ["Robert"], ["Rupert"], ["Rubin"], ["Ashcraft"], ["Ashcroft"], ["Tymczak"], ["Pfister"], ["zxqurlwbx"], ["uryrtkzp"]], "outputs": [["S600 C560"], ["S600 C560"], ["S600 C560"], ["S600 C560"], ["S600 C560"], ["T500"], ["J000"], ["B100"], ["R163"], ["R163"], ["R150"], ["A261"], ["A261"], ["T522"], ["P236"], ["Z641"], ["U663"]], "starter_code": "def soundex(name):", "canonical_solution": "import re\nREPLACMENTS = ['BFPV', 'CGJKQSXZ', 'DT', 'L', 'MN', 'R']\nER1, ER2 = ('HW', 'AEIOUY')\nTABLE_ERASE1 = str.maketrans('', '', ER1)\nTABLE_NUMS = str.maketrans(''.join(REPLACMENTS), ''.join((str(n) * len(elt) for n, elt in enumerate(REPLACMENTS, 1))))\nTABLE_ERASE2 = str.maketrans('', '', ER2)\n\ndef formatSoundex(w):\n    s = w[0] * (w[0] in ER1 + ER2) + re.sub('(\\\\d)\\\\1*', '\\\\1', w.translate(TABLE_ERASE1).translate(TABLE_NUMS)).translate(TABLE_ERASE2)\n    return ((w[0] if s[0].isdigit() else s[0]) + s[1:] + '000')[:4]\n\ndef soundex(name):\n    return ' '.join((formatSoundex(w.upper()) for w in name.split(' ')))", "entry_point": "soundex", "task_id": "TACO_lite/688", "input_output_examples": [[["Sarah Connor"]], [["S600 C560"]]]}
{"requirement": "def are_equally_strong(your_left, your_right, friends_left, friends_right):\n\"\"\"# Task\n Call two arms equally strong if the heaviest weights they each are able to lift are equal.\n\n Call two people equally strong if their strongest arms are equally strong (the strongest arm can be both the right and the left), and so are their weakest arms.\n\n Given your and your friend's arms' lifting capabilities find out if you two are equally strong.\n\n# Example\n\n For `yourLeft = 10, yourRight = 15, friendsLeft = 15 and friendsRight = 10`, the output should be `true`;\n \n For `yourLeft = 15, yourRight = 10, friendsLeft = 15 and friendsRight = 10`, the output should be `true`;\n \n For `yourLeft = 15, yourRight = 10, friendsLeft = 15 and friendsRight = 9,` the output should be `false`.\n \n# Input/Output\n\n\n - `[input]` integer `yourLeft`\n\n    A non-negative integer representing the heaviest weight you can lift with your left arm.\n    \n\n - `[input]` integer `yourRight`\n\n    A non-negative integer representing the heaviest weight you can lift with your right arm.\n\n\n - `[input]` integer `friendsLeft`\n\n    A non-negative integer representing the heaviest weight your friend can lift with his or her left arm.\n\n\n - `[input]` integer `friendsRight`\n\n    A non-negative integer representing the heaviest weight your friend can lift with his or her right arm.\n\n\n - `[output]` a boolean value\n\"\"\"", "inputs": [[10, 15, 15, 10], [15, 10, 15, 10], [10, 10, 10, 10], [15, 10, 15, 9], [10, 5, 5, 10], [1, 10, 10, 0], [10, 5, 11, 4]], "outputs": [[true], [true], [true], [false], [true], [false], [false]], "starter_code": "def are_equally_strong(your_left, your_right, friends_left, friends_right):", "canonical_solution": "def are_equally_strong(your_left, your_right, friends_left, friends_right):\n    return sorted([your_left, your_right]) == sorted([friends_left, friends_right])", "entry_point": "are_equally_strong", "task_id": "TACO_lite/689", "input_output_examples": [[[10, 15, 15, 10], [15, 10, 15, 10], [15, 10, 15, 9]], [[true], [true], [false]]]}
{"requirement": "def short_form(s):\n\"\"\"Bob is a theoretical coder - he doesn't write code, but comes up with theories, formulas and algorithm ideas. You are his secretary, and he has tasked you with writing the code for his newest project - a method for making the short form of a word. Write a function ```shortForm```(C# ```ShortForm```, Python ```short_form```) that takes a string and returns it converted into short form using the rule: Remove all vowels, except for those that are the first or last letter. Do not count 'y' as a vowel, and ignore case. Also note, the string given will not have any spaces; only one word, and only Roman letters. \n\nExample:\n```\nshortForm(\"assault\");\nshort_form(\"assault\")\nShortForm(\"assault\");\n// should return \"asslt\"\n```\n\n \nAlso, FYI: I got all the words with no vowels from \nhttps://en.wikipedia.org/wiki/English_words_without_vowels\n\"\"\"", "inputs": [["typhoid"], ["fire"], ["destroy"], ["kata"], ["codewars"], ["assert"], ["insane"], ["nice"], ["amazing"], ["incorrigible"], ["HeEllO"], ["inCRediBLE"], ["IMpOsSiblE"], ["UnInTENtiONAl"], ["AWESOme"], ["rhythm"], ["hymn"], ["lynx"], ["nymph"], ["pygmy"]], "outputs": [["typhd"], ["fre"], ["dstry"], ["kta"], ["cdwrs"], ["assrt"], ["insne"], ["nce"], ["amzng"], ["incrrgble"], ["HllO"], ["inCRdBLE"], ["IMpsSblE"], ["UnnTNtNl"], ["AWSme"], ["rhythm"], ["hymn"], ["lynx"], ["nymph"], ["pygmy"]], "starter_code": "def short_form(s):", "canonical_solution": "from re import *\n\ndef short_form(s):\n    return sub('(?<!^)[aeiou](?=.)', '', s, flags=I)", "entry_point": "short_form", "task_id": "TACO_lite/690", "input_output_examples": [[["assault"], ["typhoid"]], [["asslt"], ["typhd"]]]}
{"requirement": "def encrypt(text, rule):\n\"\"\"The most basic encryption method is to map a char to another char by a certain math rule.\nBecause every char has an ASCII value, we can manipulate this value with a simple math expression. \nFor example 'a' + 1 would give us 'b', because 'a' value is 97 and 'b' value is 98.\n\nYou will need to write a method which does exactly that - \n\nget a string as text and an int as the rule of manipulation, and should return encrypted text.\nfor example:\n\nencrypt(\"a\",1) = \"b\"\n\n *Full ascii table is used on our question (256 chars) - so 0-255 are the valid values.*\n \nGood luck.\n\"\"\"", "inputs": [["", 1], ["a", 1], ["please encrypt me", 2]], "outputs": [[""], ["b"], ["rngcug\"gpet{rv\"og"]], "starter_code": "def encrypt(text, rule):", "canonical_solution": "def encrypt(text, rule):\n    return ''.join((chr((ord(i) + rule) % 256) for i in text))", "entry_point": "encrypt", "task_id": "TACO_lite/691", "input_output_examples": [[["a", 1], ["", 1]], [["b"], [""]]]}
{"requirement": "def lose_weight(gender, weight, duration):\n\"\"\"###BACKGROUND:\nJacob recently decided to get healthy and lose some weight. He did a lot of reading and research and after focusing on steady exercise and a healthy diet for several months, was able to shed over 50 pounds! Now he wants to share his success, and has decided to tell his friends and family how much weight they could expect to lose if they used the same plan he followed.\n\nLots of people are really excited about Jacob's program and they want to know how much weight they would lose if they followed his plan. Unfortunately, he's really bad at math, so he's turned to you to help write a program that will calculate the expected weight loss for a particular person, given their weight and how long they think they want to continue the plan.\n\n###TECHNICAL DETAILS:\nJacob's weight loss protocol, if followed closely, yields loss according to a simple formulae, depending on gender. Men can expect to lose 1.5% of their current body weight each week they stay on plan. Women can expect to lose 1.2%. (Children are advised to eat whatever they want, and make sure to play outside as much as they can!)\n\n###TASK:\nWrite a function that takes as input:\n```\n- The person's gender ('M' or 'F');\n- Their current weight (in pounds);\n- How long they want to stay true to the protocol (in weeks);\n```\nand then returns the expected weight at the end of the program.\n\n###NOTES:\nWeights (both input and output) should be decimals, rounded to the nearest tenth.\nDuration (input) should be a whole number (integer). If it is not, the function should round to the nearest whole number.\nWhen doing input parameter validity checks, evaluate them in order or your code will not pass final tests.\n\"\"\"", "inputs": [["K", 200, 10], ["M", 0, 10], ["M", -5, 10], ["F", 160, 0], ["F", 160, -10], [",", 0, 1100], ["??", -10, -10], ["llama", 1, -10], ["F", -461.9, 0.0], ["M", 250, 5], ["F", 190, 8], ["M", 405, 12], ["F", 130, 7]], "outputs": [["Invalid gender"], ["Invalid weight"], ["Invalid weight"], ["Invalid duration"], ["Invalid duration"], ["Invalid gender"], ["Invalid gender"], ["Invalid gender"], ["Invalid weight"], [231.8], [172.5], [337.8], [119.5]], "starter_code": "def lose_weight(gender, weight, duration):", "canonical_solution": "def lose_weight(gender, weight, duration):\n    if not gender in ['M', 'F']:\n        return 'Invalid gender'\n    if weight <= 0:\n        return 'Invalid weight'\n    if duration <= 0:\n        return 'Invalid duration'\n    nl = 0.985 if gender == 'M' else 0.988\n    for i in range(duration):\n        weight *= nl\n    return round(weight, 1)", "entry_point": "lose_weight", "task_id": "TACO_lite/692", "input_output_examples": [[["K", 200, 10]], [["Invalid gender"]]]}
{"requirement": "def colorful(number):\n\"\"\"## Problem\n\nDetermine whether a positive integer number is **colorful** or not.\n\n`263` is a colorful number because `[2, 6, 3, 2*6, 6*3, 2*6*3]` are all different; whereas `236` is not colorful, because `[2, 3, 6, 2*3, 3*6, 2*3*6]` have `6` twice.\n\nSo take all consecutive subsets of digits, take their product and ensure all the products are different.\n\n## Examples\n```pyhton\n263  -->  true\n236  -->  false\n```\n\"\"\"", "inputs": [[5], [23], [263], [235789], [50], [13], [236], [2357893]], "outputs": [[true], [true], [true], [true], [false], [false], [false], [false]], "starter_code": "def colorful(number):", "canonical_solution": "def colorful(number):\n    base_result = []\n    for x in str(number):\n        base_result.append(int(x))\n    for y in range(len(base_result) - 1):\n        temp = base_result[y] * base_result[y + 1]\n        base_result.append(temp)\n    return len(set(base_result)) == len(base_result)", "entry_point": "colorful", "task_id": "TACO_lite/693", "input_output_examples": [[[263], [236]], [[true], [false]]]}
{"requirement": "def detect_operator(num):\n\"\"\"When a warrior wants to talk with another one about peace or war he uses a smartphone.  In one distinct  country warriors who spent all time in training kata not always have enough money. So if they call some number they want to know which operator serves  this number. \n\nWrite a function which **accepts number and return name of operator or string \"no info\"**, if operator can't be defined. number always looks like 8yyyxxxxxxx, where yyy corresponds to operator.\n\nHere is short list of operators:\n\n* 039 xxx xx xx - Golden Telecom\n* 050 xxx xx xx - MTS\n* 063 xxx xx xx - Life:)\n* 066 xxx xx xx - MTS\n* 067 xxx xx xx - Kyivstar\n* 068 xxx xx xx - Beeline\n* 093 xxx xx xx - Life:)\n* 095 xxx xx xx - MTS\n* 096 xxx xx xx - Kyivstar\n* 097 xxx xx xx - Kyivstar\n* 098 xxx xx xx - Kyivstar\n* 099 xxx xx xx - MTS Test [Just return \"MTS\"]\n\"\"\"", "inputs": [["80661111841"], ["80671991111"], ["80631551111"], ["80931551111"], ["80111551111"]], "outputs": [["MTS"], ["Kyivstar"], ["Life:)"], ["Life:)"], ["no info"]], "starter_code": "def detect_operator(num):", "canonical_solution": "OPERATORS = {'039': 'Golden Telecom', '050': 'MTS', '063': 'Life:)', '066': 'MTS', '067': 'Kyivstar', '068': 'Beeline', '093': 'Life:)', '095': 'MTS', '096': 'Kyivstar', '097': 'Kyivstar', '098': 'Kyivstar', '099': 'MTS'}\n\ndef detect_operator(num):\n    return OPERATORS.get(str(num)[1:4], 'no info')", "entry_point": "detect_operator", "task_id": "TACO_lite/694", "input_output_examples": [[["80661111841"]], [["MTS"]]]}
{"requirement": "def pawn_move_tracker(moves):\n\"\"\"A chess board is normally played with 16 pawns and 16 other pieces, for this kata a variant will be played with only the pawns.  All other pieces will not be on the board.  \nFor information on how pawns move, refer [here](http://www.chesscorner.com/tutorial/basic/pawn/pawn.htm)\n  \n  \nWrite a function that can turn a list of pawn moves into a visual representation of the resulting board.  \nA chess move will be represented by a string,\n```\n\"c3\"\n```\nThis move represents a pawn moving to `c3`.  If it was white to move, the move would represent a pawn from `c2` moving to `c3`.  If it was black to move, a pawn would move from `c4` to `c3`, because black moves in the other direction.  \nThe first move in the list and every other move will be for white's pieces.\n  \nThe letter represents the column, while the number represents the row of the square where the piece is moving  \n    \nCaptures are represented differently from normal moves:\n\n```\n\"bxc3\"\n```\nrepresents a pawn on the column represented by 'b' (the second column) capturing a pawn on `c3`.\n\nFor the sake of this kata a chess board will be represented by a list like this one:  \n```\n[[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\"p\",\"p\",\"p\",\"p\",\"p\",\"p\",\"p\",\"p\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\"P\",\"P\",\"P\",\"P\",\"P\",\"P\",\"P\",\"P\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n```\nHere is an example of the board with the squares labeled:\n```\n[[\"a8\",\"b8\",\"c8\",\"d8\",\"e8\",\"f8\",\"g8\",\"h8\"],\n [\"a7\",\"b7\",\"c7\",\"d7\",\"e7\",\"f7\",\"g7\",\"h7\"],\n [\"a6\",\"b6\",\"c6\",\"d6\",\"e6\",\"f6\",\"g6\",\"h6\"],\n [\"a5\",\"b5\",\"c5\",\"d5\",\"e5\",\"f5\",\"g5\",\"h5\"],\n [\"a4\",\"b4\",\"c4\",\"d4\",\"e4\",\"f4\",\"g4\",\"h4\"],\n [\"a3\",\"b3\",\"c3\",\"d3\",\"e3\",\"f3\",\"g3\",\"h3\"],\n [\"a2\",\"b2\",\"c2\",\"d2\",\"e2\",\"f2\",\"g2\",\"h2\"],\n [\"a1\",\"b1\",\"c1\",\"d1\",\"e1\",\"f1\",\"g1\",\"h1\"]]\n```\nWhite pawns are represented by capital `'P'` while black pawns are lowercase `'p'`.  \n  \n      \nA few examples\n```\nIf the list/array of moves is: [\"c3\"]\n>>>\n[[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\"p\",\"p\",\"p\",\"p\",\"p\",\"p\",\"p\",\"p\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\"P\",\".\",\".\",\".\",\".\",\".\"],\n [\"P\",\"P\",\".\",\"P\",\"P\",\"P\",\"P\",\"P\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n```\nadd a few more moves,\n```\nIf the list/array of moves is: [\"d4\", \"d5\", \"f3\", \"c6\", \"f4\"]\n>>>\n[[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\"p\",\"p\",\".\",\".\",\"p\",\"p\",\"p\",\"p\"],\n [\".\",\".\",\"p\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\"P\",\".\",\"P\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\"P\",\"P\",\"P\",\".\",\"P\",\".\",\"P\",\"P\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n```\nnow to add a capture...\n```\nIf the list/array of moves is: [\"d4\", \"d5\", \"f3\", \"c6\", \"f4\", \"c5\", \"dxc5\"]\n>>>\n[[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\"p\",\"p\",\".\",\".\",\"p\",\"p\",\"p\",\"p\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\"P\",\"p\",\".\",\".\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\"P\",\".\",\".\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],\n [\"P\",\"P\",\"P\",\".\",\"P\",\".\",\"P\",\"P\"],\n [\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n```\nIf an invalid move (a move is added that no pawn could perform, a capture where there is no piece, a move to a square where there is already a piece, etc.) is found in the list of moves, return '(move) is invalid'.\n```python\nIf the list/array of moves is: [\"e6\"]\n>>>\n\"e6 is invalid\"\n```\n\n```python\nIf the list/array of moves is: [\"e4\", \"d5\", \"exf5\"]\n>>>\n\"exf5 is invalid\"\n```\nThe list passed to `pawn_move_tracker / PawnMoveTracker.movePawns` will always be a list of strings in the form (regex pattern): `[a-h][1-8]` or `[a-h]x[a-h][1-8]`.  \n\nNotes:\n\n* In the case of a capture, the first lowercase letter will always be adjacent to the second in the alphabet, a move like `axc5` will never be passed.\n* A pawn can move two spaces on its first move\n* There are no cases with the 'en-passant' rule.\n\"\"\"", "inputs": [[[]], [["e3", "e6", "d3", "g6"]], [["d3", "e5", "d4", "f5"]], [["d3", "e5", "d4", "f5", "dxe5", "f4"]], [["d4", "f6", "d5", "f6", "dxe5", "f4"]], [["d4", "a5", "d5", "f6", "dxe7", "f4"]], [["a4", "a5", "b4", "b5", "c4", "b4"]], [["h3", "h5", "h4", "g5", "hxg5", "h4"]], [["e5"]], [["e4", "d5", "dxe4"]], [["a3", "h6", "a4", "h5", "a5", "h4", "a6", "h3", "axb7", "hxg2"]], [["e4"]], [["d5"]]], "outputs": [[[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", "p", "p", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", "P", "P", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", ".", "p", ".", "p"], [".", ".", ".", ".", "p", ".", "p", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", "P", "P", ".", ".", "."], ["P", "P", "P", ".", ".", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", ".", ".", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", "p", "p", ".", "."], [".", ".", ".", "P", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", ".", "P", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", ".", ".", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", "P", ".", ".", "."], [".", ".", ".", ".", ".", "p", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", ".", "P", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], ["f6 is invalid"], ["dxe7 is invalid"], ["b4 is invalid"], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", "p", "p", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", "P", "."], [".", ".", ".", ".", ".", ".", ".", "p"], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", "P", "P", "P", "P", "."], [".", ".", ".", ".", ".", ".", ".", "."]]], ["e5 is invalid"], ["dxe4 is invalid"], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "P", "p", "p", "p", "p", "p", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", "P", "P", "P", "P", "P", "p", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", "p", "p", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", "P", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", "P", ".", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]]], ["d5 is invalid"]], "starter_code": "def pawn_move_tracker(moves):", "canonical_solution": "LETTERS = 'abcdefgh'\nNUMBERS = '87654321'\nW, B = WB = 'Pp'\nEMPTY, CAPTURE = '.x'\nWHITEHOME = '12'\nBLACKHOME = '87'\nJUMP = '54'\n\ndef pawn_move_tracker(moves):\n    board = {letter + number: B if number == BLACKHOME[1] else W if number == WHITEHOME[1] else EMPTY for letter in LETTERS for number in NUMBERS}\n    whitemove = True\n    for move in moves:\n        target = move[-2:]\n        mover = move[0] + str(int(move[-1]) + 1 - whitemove * 2)\n        if move[-1] in JUMP[whitemove] and board[mover] == EMPTY:\n            mover = move[0] + str(int(move[-1]) + 2 - whitemove * 4)\n        if move[-1] in (BLACKHOME, WHITEHOME)[whitemove] or board[target] != (EMPTY, WB[whitemove])[move[1] == CAPTURE] or board[mover] != WB[not whitemove]:\n            return '{} is invalid'.format(move)\n        whitemove = not whitemove\n        board[mover] = EMPTY\n        board[target] = WB[whitemove]\n    return [[board[letter + number] for letter in LETTERS] for number in NUMBERS]", "entry_point": "pawn_move_tracker", "task_id": "TACO_lite/695", "input_output_examples": [[[["c3"]], [["d4", "d5", "f3", "c6", "f4"]], [["d4", "d5", "f3", "c6", "f4", "c5", "dxc5"]], [["e6"]], [["e4", "d5", "exf5"]]], [[[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", "p", "p", "p", "p", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", "P", ".", ".", ".", ".", "."], ["P", "P", ".", "P", "P", "P", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]], [[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", ".", ".", "p", "p", "p", "p"], [".", ".", "p", ".", ".", ".", ".", "."], [".", ".", ".", "p", ".", ".", ".", "."], [".", ".", ".", "P", ".", "P", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", ".", "P", ".", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]], [[".", ".", ".", ".", ".", ".", ".", "."], ["p", "p", ".", ".", "p", "p", "p", "p"], [".", ".", ".", ".", ".", ".", ".", "."], [".", ".", "P", "p", ".", ".", ".", "."], [".", ".", ".", ".", ".", "P", ".", "."], [".", ".", ".", ".", ".", ".", ".", "."], ["P", "P", "P", ".", "P", ".", "P", "P"], [".", ".", ".", ".", ".", ".", ".", "."]], ["e6 is invalid"], ["exf5 is invalid"]]]}
{"requirement": "def count_zeros_n_double_fact(n):\n\"\"\"Define n!! as\n\nn!! = 1 \\* 3 \\* 5 \\* ... \\* n  if n is odd, \n\nn!! = 2 \\* 4 \\* 6 \\* ... \\* n  if n is even. \n\nHence 8!! = 2 \\* 4 \\* 6 \\* 8 = 384, there is no zero at the end. \n30!! has 3 zeros at the end. \n\nFor a positive integer n, please count how many zeros are there at \nthe end of n!!. \n\nExample: \n\ncount\\_zeros\\_n\\_double\\_fact(30) should return 3\n\"\"\"", "inputs": [[8], [30], [487], [500]], "outputs": [[0], [3], [0], [62]], "starter_code": "def count_zeros_n_double_fact(n):", "canonical_solution": "def count_zeros_n_double_fact(n):\n    if n % 2 != 0:\n        return 0\n    k = 0\n    while n >= 10:\n        k += n // 10\n        n //= 5\n    return k", "entry_point": "count_zeros_n_double_fact", "task_id": "TACO_lite/696", "input_output_examples": [[[30], [8]], [[3], [0]]]}
{"requirement": "def tidynumber(n):\n\"\"\"# Definition\n\nA **_Tidy number_**  *is a number whose*  **_digits are in non-decreasing order_**.\n___\n# Task\n\n**_Given_** a number, **_Find if it is Tidy or not_** . \n____\n\n# Warm-up (Highly recommended)\n\n# [Playing With Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n___\n\n# Notes \n\n\n* **_Number_** *passed is always*  **_Positive_** .\n\n* **_Return_** *the result as* a **_Boolean_** \n\n~~~if:prolog\n* Since prolog doesn't have booleans,  return value should be 1 for (True) or 0 for (false)\n~~~\n___\n\n# Input >> Output Examples\n\n```\ntidynumber (12) ==> return (true)\n```\n\n## **_Explanation_**:\n\n**_The number's digits_**    `{ 1 , 2 }`  are *in non-Decreasing Order* (i.e) *1 <= 2* .\n____\n\n```\ntidynumber (32) ==> return (false)\n```\n\n## **_Explanation_**:\n\n**_The Number's Digits_**  `{ 3, 2}`  are **_not in non-Decreasing Order_** (i.e) *3 > 2* .\n___\n\n```\ntidynumber (1024) ==> return (false)\n```\n\n## **_Explanation_**:\n\n**_The Number's Digits_**  `{1 , 0, 2, 4}`  are **_not in non-Decreasing Order_**  as  *0 <= 1* .\n\n___\n\n```\ntidynumber (13579) ==> return (true)\n```\n\n## **_Explanation_**:\n\n**_The number's digits_**    `{1 , 3, 5, 7, 9}`  are *in non-Decreasing Order* .\n____\n\n```\ntidynumber (2335) ==> return (true)\n```\n\n## **_Explanation_**:\n\n**_The number's digits_**    `{2 , 3, 3, 5}`  are *in non-Decreasing Order* , **_Note_**   *3 <= 3* \n\n___\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[12], [102], [9672], [2789], [2335]], "outputs": [[true], [false], [false], [true], [true]], "starter_code": "def tidynumber(n):", "canonical_solution": "def tidynumber(n):\n    s = list(str(n))\n    return s == sorted(s)", "entry_point": "tidynumber", "task_id": "TACO_lite/697", "input_output_examples": [[[12], [32], [1024], [13579], [2335]], [[true], [false], [false], [true], [true]]]}
{"requirement": "def color_probability(color, texture):\n\"\"\"You're playing a game with a friend involving a bag of marbles. In the bag are ten marbles:\n\n* 1 smooth red marble\n* 4 bumpy red marbles\n* 2 bumpy yellow marbles\n* 1 smooth yellow marble\n* 1 bumpy green marble\n* 1 smooth green marble\n\nYou can see that the probability of picking a smooth red marble from the bag is `1 / 10` or `0.10` and the probability of picking a bumpy yellow marble is `2 / 10` or `0.20`.\n\nThe game works like this: your friend puts her hand in the bag, chooses a marble (without looking at it) and tells you whether it's bumpy or smooth. Then you have to guess which color it is before she pulls it out and reveals whether you're correct or not.\n\nYou know that the information about whether the marble is bumpy or smooth changes the probability of what color it is, and you want some help with your guesses.\n\nWrite a function `color_probability()` that takes two arguments: a color (`'red'`, `'yellow'`, or `'green'`) and a texture (`'bumpy'` or `'smooth'`) and returns the probability as a decimal fraction accurate to two places.\n\nThe probability should be a string and should discard any digits after the 100ths place. For example, `2 / 3` or `0.6666666666666666` would become the string `'0.66'`. Note this is different from rounding.\n\nAs a complete example, `color_probability('red', 'bumpy')` should return the string `'0.57'`.\n\"\"\"", "inputs": [["red", "bumpy"], ["green", "bumpy"], ["yellow", "smooth"], ["red", "smooth"], ["green", "smooth"], ["yellow", "bumpy"]], "outputs": [["0.57"], ["0.14"], ["0.33"], ["0.33"], ["0.33"], ["0.28"]], "starter_code": "def color_probability(color, texture):", "canonical_solution": "def color_probability(color, texture):\n    marbles = {'smooth': {'red': 1, 'yellow': 1, 'green': 1, 'total': 3}, 'bumpy': {'red': 4, 'yellow': 2, 'green': 1, 'total': 7}}\n    return '{}'.format(marbles[texture][color] / marbles[texture]['total'])[:4]", "entry_point": "color_probability", "task_id": "TACO_lite/698", "input_output_examples": [[["red", "bumpy"]], [["0.57"]]]}
{"requirement": "def cockroach_speed(s):\n\"\"\"The cockroach is one of the fastest insects. Write a function which takes its speed in km per hour and returns it in cm per second, rounded down to the integer (= floored).\n\nFor example:\n\n```python\ncockroach_speed(1.08) == 30\n```\n\nNote! The input is a Real number (actual type is language dependent) and is >= 0. The result should be an Integer.\n\"\"\"", "inputs": [[1.08], [1.09], [0]], "outputs": [[30], [30], [0]], "starter_code": "def cockroach_speed(s):", "canonical_solution": "def cockroach_speed(s):\n    return s // 0.036", "entry_point": "cockroach_speed", "task_id": "TACO_lite/699", "input_output_examples": [[[1.08]], [[30]]]}
{"requirement": "def goldbach_partitions(n):\n\"\"\"German mathematician Christian Goldbach (1690-1764) [conjectured](https://en.wikipedia.org/wiki/Goldbach%27s_conjecture) that every even number greater than 2 can be represented by the sum of two prime numbers. For example, `10` can be represented as `3+7` or `5+5`.\n\nYour job is to make the function return a list containing all unique possible representations of `n` in an increasing order if `n` is an even integer; if `n` is odd, return an empty list. Hence, the first addend must always be less than or equal to the second to avoid duplicates.\n\nConstraints : `2 < n < 32000` and `n` is even\n\n\n## Examples\n```\n26  -->  ['3+23', '7+19', '13+13']\n\n100 -->  ['3+97', '11+89', '17+83', '29+71', '41+59', '47+53']\n\n7   -->  [] \n```\n\"\"\"", "inputs": [[15], [393], [31133], [4], [100], [594], [1500]], "outputs": [[[]], [[]], [[]], [["2+2"]], [["3+97", "11+89", "17+83", "29+71", "41+59", "47+53"]], [["7+587", "17+577", "23+571", "31+563", "37+557", "47+547", "53+541", "71+523", "73+521", "103+491", "107+487", "127+467", "131+463", "137+457", "151+443", "163+431", "173+421", "193+401", "197+397", "211+383", "227+367", "241+353", "257+337", "263+331", "277+317", "281+313", "283+311"]], [["7+1493", "11+1489", "13+1487", "17+1483", "19+1481", "29+1471", "41+1459", "47+1453", "53+1447", "61+1439", "67+1433", "71+1429", "73+1427", "101+1399", "127+1373", "139+1361", "173+1327", "179+1321", "181+1319", "193+1307", "197+1303", "199+1301", "211+1289", "223+1277", "241+1259", "251+1249", "263+1237", "269+1231", "271+1229", "277+1223", "283+1217", "307+1193", "313+1187", "337+1163", "347+1153", "349+1151", "383+1117", "397+1103", "409+1091", "431+1069", "439+1061", "449+1051", "461+1039", "467+1033", "479+1021", "487+1013", "491+1009", "503+997", "509+991", "523+977", "547+953", "563+937", "571+929", "593+907", "613+887", "617+883", "619+881", "641+859", "643+857", "647+853", "661+839", "673+827", "677+823", "691+809", "727+773", "739+761", "743+757"]]], "starter_code": "def goldbach_partitions(n):", "canonical_solution": "import math\n\ndef goldbach_partitions(n):\n\n    def is_prime(x):\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    if n % 2:\n        return []\n    ret = []\n    for first in range(2, n // 2 + 1):\n        if is_prime(first):\n            second = n - first\n            if is_prime(second):\n                ret.append('%d+%d' % (first, second))\n    return ret", "entry_point": "goldbach_partitions", "task_id": "TACO_lite/700", "input_output_examples": [[[26], [100], [7]], [["3+23", "7+19", "13+13"], ["3+97", "11+89", "17+83", "29+71", "41+59", "47+53"], []]]}
{"requirement": "def fold_to(distance, thickness=0.0001, folds=0):\n\"\"\"Have you heard about the myth that [if you fold a paper enough times, you can reach the moon with it](http://scienceblogs.com/startswithabang/2009/08/31/paper-folding-to-the-moon/)? Sure you have, but exactly how many? Maybe it's time to write a program to figure it out.\n\nYou know that a piece of paper has a thickness of `0.0001m`. Given `distance` in units of meters, calculate how many times you have to fold the paper to make the paper reach this distance.  \n(If you're not familiar with the concept of folding a paper: Each fold doubles its total thickness.)\n\nNote: Of course you can't do half a fold. You should know what this means ;P\n\nAlso, if somebody is giving you a negative distance, it's clearly bogus and you should yell at them by returning `null` (or whatever equivalent in your language. In Shell please return `None`).\n\"\"\"", "inputs": [[384000000], [5e-05], [1e-07], [0], [-1]], "outputs": [[42], [0], [0], [0], [null]], "starter_code": "def fold_to(distance, thickness=0.0001, folds=0):", "canonical_solution": "def fold_to(distance, thickness=0.0001, folds=0):\n    if distance < 0:\n        return\n    while thickness < distance:\n        thickness *= 2\n        folds += 1\n    return folds", "entry_point": "fold_to", "task_id": "TACO_lite/701", "input_output_examples": [[[384000000]], [[42]]]}
{"requirement": "def count_positives_sum_negatives(arr):\n\"\"\"Given an array of integers.\n\nReturn an array, where the first element is the count of positives numbers and the second element is sum of negative numbers.\n\nIf the input array is empty or null, return an empty array.\n\n# Example\n\nFor input `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]`, you should return `[10, -65]`.\n\"\"\"", "inputs": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]], [[0, 2, 3, 0, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14]], [[1]], [[-1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0]], [[]]], "outputs": [[[10, -65]], [[8, -50]], [[1, 0]], [[0, -1]], [[0, 0]], [[]]], "starter_code": "def count_positives_sum_negatives(arr):", "canonical_solution": "def count_positives_sum_negatives(arr):\n    if not arr:\n        return []\n    pos = 0\n    neg = 0\n    for x in arr:\n        if x > 0:\n            pos += 1\n        if x < 0:\n            neg += x\n    return [pos, neg]", "entry_point": "count_positives_sum_negatives", "task_id": "TACO_lite/702", "input_output_examples": [[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15]]], [[10, -65]]]}
{"requirement": "def survivor(a):\n\"\"\"Story:\nIn the realm of numbers, the apocalypse has arrived. Hordes of zombie numbers have infiltrated and are ready to turn everything into undead. The properties of zombies are truly apocalyptic: they reproduce themselves unlimitedly and freely interact with each other. Anyone who equals them is doomed. Out of an infinite number of natural numbers, only a few remain. This world needs a hero who leads remaining numbers in hope for survival: The highest number to lead those who still remain.\n\nBriefing:\nThere is a list of positive natural numbers. Find the largest number that cannot be represented as the sum of this numbers, given that each number can be added unlimited times. Return this number, either 0 if there are no such numbers, or -1 if there are an infinite number of them.\n\nExample:\n```\nLet's say [3,4] are given numbers. Lets check each number one by one:\n1 - (no solution) - good\n2 - (no solution) - good\n3 = 3 won't go\n4 = 4 won't go\n5 - (no solution) - good\n6 = 3+3 won't go\n7 = 3+4 won't go\n8 = 4+4 won't go\n9 = 3+3+3 won't go\n10 = 3+3+4 won't go\n11 = 3+4+4 won't go\n13 = 3+3+3+4 won't go\n```\n...and so on. So 5 is the biggest 'good'. return 5\n\nTest specs:\nRandom cases will input up to 10 numbers with up to 1000 value\n\nSpecial thanks:\nThanks to Voile-sama, mathsisfun-sama, and Avanta-sama for heavy assistance. And to everyone who tried and beaten the kata ^_^\n\"\"\"", "inputs": [[[7, 11]], [[1, 7, 15]], [[2, 10]], [[687, 829, 998]], [[]], [[1]]], "outputs": [[59], [0], [-1], [45664], [-1], [0]], "starter_code": "def survivor(a):", "canonical_solution": "from functools import reduce\nfrom math import gcd\n\ndef survivor(a):\n\n    def __residue_table(a):\n        n = [0] + [None] * (a[0] - 1)\n        for i in range(1, len(a)):\n            d = gcd(a[0], a[i])\n            for r in range(d):\n                try:\n                    nn = min((n[q] for q in range(r, a[0], d) if n[q] is not None))\n                except ValueError:\n                    continue\n                for _ in range(a[0] // d):\n                    nn += a[i]\n                    p = nn % a[0]\n                    if n[p] is not None:\n                        nn = min(nn, n[p])\n                    n[p] = nn\n        return n\n    a.sort()\n    if len(a) < 1 or reduce(gcd, a) > 1:\n        return -1\n    if a[0] == 1:\n        return 0\n    return max(__residue_table(a)) - a[0]", "entry_point": "survivor", "task_id": "TACO_lite/703", "input_output_examples": [[[[3, 4]], [[7, 11]]], [[5], [59]]]}
{"requirement": "def product_array(numbers):\n\"\"\"# Introduction and Warm-up (Highly recommended)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n___\n\n# Task\n\n**_Given_** an *array/list [] of integers* , **_Construct_** a *product array **_Of same size_** Such That prod[i] is equal to The Product of all the elements of Arr[] except Arr[i]*. \n___\n\n# Notes \n\n\n* **_Array/list_** size is *at least 2* .\n\n* **_Array/list's numbers_**  Will be **_only Positives_** \n\n* **_Repetition_** of numbers in *the array/list could occur*.\n___\n\n# Input >> Output Examples \n\n```\nproductArray ({12,20}) ==>  return {20,12}\n```\n## **_Explanation_**:\n\n* **_The first element_**  *in prod [] array* **_12_**  *is the product of all array's elements except the first element*\n\n* **_The second element_** **_20_**  *is the product of all array's elements except the second element* .\n___\n\n```\nproductArray ({1,5,2}) ==> return {10,2,5}\n```\n\n## **_Explanation_**: \n\n\n* **_The first element_**  **_10_** *is the product of all array's elements* **_except_** *the first element **_1_***\n\n* **_The second element_** **_2_** *is the product of all array's elements* **_except_** *the second element* **_5_** \n\n* **_The Third element_** **_5_** *is the product of all array's elements* **_except_** *the Third element* **_2_**.\n\n___\n\n```\nproductArray ({10,3,5,6,2}) return ==> {180,600,360,300,900}\n```\n\n## **_Explanation_**: \n\n\n* **_The first element_** **_180_**  *is the product of all array's elements* **_except_** *the first element*  **_10_** \n\n* **_The second element_** **_600_** *is the product of all array's elements*  **_except_**  *the second element*  **_3_** \n\n* **_The Third element_** **_360_** *is the product of all array's elements* **_except_** *the third element* **_5_**\n\n* **_The Fourth element_** **_300_** *is the product of all array's elements* **_except_** *the fourth element* **_6_** \n\n* *Finally* ,**_The Fifth element_** **_900_** *is the product of all array's elements* **_except_** *the fifth element* **_2_** \n\n___\n# [A more challenging version of this kata by Firefly2002](https://www.codewars.com/kata/array-product-sans-n)\n___\n___\n\n# [Playing with Numbers Series](https://www.codewars.com/collections/playing-with-numbers)\n\n# [Playing With Lists/Arrays Series](https://www.codewars.com/collections/playing-with-lists-slash-arrays)\n\n# [For More Enjoyable Katas](http://www.codewars.com/users/MrZizoScream/authored)\n___\n\n## ALL translations are welcomed\n\n## Enjoy Learning !!\n# Zizou\n\"\"\"", "inputs": [[[12, 20]], [[3, 27, 4, 2]], [[13, 10, 5, 2, 9]], [[16, 17, 4, 3, 5, 2]]], "outputs": [[[20, 12]], [[216, 24, 162, 324]], [[900, 1170, 2340, 5850, 1300]], [[2040, 1920, 8160, 10880, 6528, 16320]]], "starter_code": "def product_array(numbers):", "canonical_solution": "from operator import mul\nfrom functools import reduce\n\ndef product_array(numbers):\n    tot = reduce(mul, numbers)\n    return [tot // n for n in numbers]", "entry_point": "product_array", "task_id": "TACO_lite/704", "input_output_examples": [[[[12, 20]], [[1, 5, 2]], [[10, 3, 5, 6, 2]]], [[[20, 12]], [[10, 2, 5]], [[180, 600, 360, 300, 900]]]]}
{"requirement": "def trim(beard):\n\"\"\"Today was a sad day. Having bought a new beard trimmer, I set it to the max setting and shaved away at my joyous beard. Stupidly, I hadnt checked just how long the max setting was, and now I look like Ive just started growing it!\n\nYour task, given a beard represented as an arrayof arrays, is to trim the beard as follows:\n\n['|', 'J', '|', '|'],\n['|', '|', '|', 'J'],\n['...', '...', '...', '...'];\n\nTo trim the beard use the following rules:\n\ntrim any curled hair --> replace 'J' with '|'\ntrim any hair from the chin (last array) --> replace '|' or 'J' with '...'\n\nAll sub arrays will be same length. Return the corrected array of arrays\n\"\"\"", "inputs": [[[["J", "|"], ["J", "|"], ["...", "|"]]], [[["J", "|", "J"], ["J", "|", "|"], ["...", "|", "J"]]], [[["J", "|", "J", "J"], ["J", "|", "|", "J"], ["...", "|", "J", "|"]]]], "outputs": [[[["|", "|"], ["|", "|"], ["...", "..."]]], [[["|", "|", "|"], ["|", "|", "|"], ["...", "...", "..."]]], [[["|", "|", "|", "|"], ["|", "|", "|", "|"], ["...", "...", "...", "..."]]]], "starter_code": "def trim(beard):", "canonical_solution": "def trim(beard):\n    return [[h.replace('J', '|') for h in b] for b in beard[:-1]] + [['...'] * len(beard[0])]", "entry_point": "trim", "task_id": "TACO_lite/705", "input_output_examples": [[[[["|", "J", "|", "|"], ["|", "|", "|", "J"], ["...", "...", "...", "..."]]]], [[[["|", "|", "|", "|"], ["|", "|", "|", "|"], ["...", "...", "...", "..."]]]]]}
{"requirement": "def save(sizes, hd):\n\"\"\"Your task is to determine how many files of the copy queue you will be able to save into your Hard Disk Drive. The files must be saved in the order they appear in the queue. \n\n### Input:\n\n* Array of file sizes `(0 <= s <= 100)`\n* Capacity of the HD `(0 <= c <= 500)`\n\n### Output:\n\n* Number of files that can be fully saved in the HD. \n\n### Examples:\n\n```\nsave([4,4,4,3,3], 12) -> 3\n# 4+4+4 <= 12, but 4+4+4+3 > 12\n```\n\n```\nsave([4,4,4,3,3], 11) -> 2\n# 4+4 <= 11, but 4+4+4 > 11\n```\n\nDo not expect any negative or invalid inputs.\n\"\"\"", "inputs": [[[4, 4, 4, 3, 3], 12], [[4, 4, 4, 3, 3], 11], [[4, 8, 15, 16, 23, 42], 108], [[13], 13], [[1, 2, 3, 4], 250], [[100], 500], [[11, 13, 15, 17, 19], 8], [[45], 12]], "outputs": [[3], [2], [6], [1], [4], [1], [0], [0]], "starter_code": "def save(sizes, hd):", "canonical_solution": "def save(sizes, hd):\n    for i, s in enumerate(sizes):\n        if hd < s:\n            return i\n        hd -= s\n    return len(sizes)", "entry_point": "save", "task_id": "TACO_lite/706", "input_output_examples": [[[[4, 4, 4, 3, 3], 12], [[4, 4, 4, 3, 3], 11]], [[3], [2]]]}
{"requirement": "def getmatrixproduct(a, b):\n\"\"\"In mathematics, a matrix (plural matrices) is a rectangular array of numbers. Matrices have many applications in programming, from performing transformations in 2D space to machine learning. \n\nOne of the most useful operations to perform on matrices is matrix multiplication, which takes a pair of matrices and produces another matrix – known as the dot product. Multiplying matrices is very different to multiplying real numbers, and follows its own set of rules. \n\nUnlike multiplying real numbers, multiplying matrices is non-commutative: in other words, multiplying matrix ```a``` by matrix ```b``` will not give the same result as multiplying matrix ```b``` by matrix ```a```.\n\nAdditionally, not all pairs of matrix can be multiplied. For two matrices to be multipliable, the number of columns in matrix ```a``` must match the number of rows in matrix ```b```.\n\nThere are many introductions to matrix multiplication online, including at Khan Academy, and in the classic MIT lecture series by Herbert Gross. \n\nTo complete this kata, write a function that takes two matrices - ```a``` and ```b``` - and returns the dot product of those matrices. If the matrices cannot be multiplied, return ```-1``` for JS/Python, or `null` for Java.\n\nEach matrix will be represented by a two-dimensional list (a list of lists). Each inner list will contain one or more numbers, representing a row in the matrix.\n\nFor example, the following matrix:\n\n```|1 2|``````|3 4|```\n\nWould be represented as:\n\n```[[1, 2], [3, 4]]```\n\nIt can be assumed that all lists will be valid matrices, composed of lists with equal numbers of elements, and which contain only numbers. The numbers may include integers and/or decimal points.\n\"\"\"", "inputs": [[[[2, -2], [5, 3]], [[-1, 4], [7, -6]]], [[[1]], [[3]]], [[[1, 2], [3, 4]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[7, 3], [2, 5], [6, 8], [9, 0]], [[7, 4, 9], [8, 1, 5]]], [[[1, 0.5], [-0.5, 1]], [[5, 0.25], [2, 0.5]]]], "outputs": [[[[-16, 20], [16, 2]]], [[[3]]], [-1], [[[73, 31, 78], [54, 13, 43], [106, 32, 94], [63, 36, 81]]], [[[6.0, 0.5], [-0.5, 0.375]]]], "starter_code": "def getmatrixproduct(a, b):", "canonical_solution": "import numpy as np\n\ndef getmatrixproduct(a, b):\n    try:\n        return np.matmul(a, b).tolist()\n    except:\n        return -1", "entry_point": "getmatrixproduct", "task_id": "TACO_lite/707", "input_output_examples": [[[[[2, -2], [5, 3]], [[-1, 4], [7, -6]]]], [[[[-16, 20], [16, 2]]]]]}
