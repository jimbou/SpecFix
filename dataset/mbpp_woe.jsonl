{"task_id": "Mbpp/2", "requirement": "def similar_elements(test_tup1: tuple, test_tup2: tuple) -> tuple:\"\"\"\nWrite a function to find the shared elements from the given two lists.\"\"\"", "entry_point": "similar_elements", "canonical_solution": "\ndef similar_elements(test_tup1, test_tup2):\n  return tuple(set(test_tup1) & set(test_tup2))\n", "base_input": [[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3, 4], [5, 4, 3, 7]], [[11, 12, 14, 13], [17, 15, 14, 13]]], "plus_input": [[[], []], [[1, 2, 3], []], [[], [4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]], [[1, 2, 2, 3, 3, 4, 4, 5, 5], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[100, 200, 300, 400, 500], [100, 200, 400, 500]], [[10, 20, 30, 40, 50], [50, 60, 70, 80]], [[1, 2, 3, 4, 4, 5, 5], [4, 5, 6]], [[], [true, false, false, false, false, true]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[1, 2, 3, 1], []], [["kx", "DHBNiditD"], [4, 5, 6]], [[1, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[false, false, false, false, true], [false, false, false, false, false]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[8.514020219858878, -25.802494572247724, 5.873698915603498, 38.044354120134614, 11.222647627029431, 26.914534243589074, 78.41454157921689, -80.88414039955265], ["ceRuVEV", "aAXslGdbD", "DHBNiditD", "fHRtFowQVh", "ITntCqEvPi", "SmJpP", "DHBNiditD", "kx", "x"]], [[false, false, false, false, false], [false, false, false, false, false]], [[], [5, 6]], [[1, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3, 2], [1, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3, 2]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10], [1, 3, 4, 5, 6, 7, 8, 9, 0, 10]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10], [1, 3, 4, 5, 6, 7, 8, 9, 0, 10]], [[], [true, false, false, false]], [[4, 5, 16, 5], [1, 6, 3, 4, 4, 5, 5]], [["DRwvS", "FdzAtAvnsS", "ITntCqEvPi", "nlUsIhET", "ITntCqEvPi", "x"], [true, false, true, false, true, false, true]], [[1, 2, 20], []], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10], [300, 1, 3, 4, 5, 6, 7, 8, 9, 0, 9]], [[false, false, false, false, false], [false, false, false, false]], [[1, 400, 3, 4, 4, 5, 5], [1, 400, 3, 4, 4, 5, 5, 5]], [[], [6]], [[1, 2, 2, 3, 3, 4, 4, 5, 5], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 7]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10], [1, 2, 3, 4, 5, 6, 7, 8, 60, 10, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 4, 6, 7, 8, 9, 10]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 3], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[100, 200, 300, 400, 500, 400, 300], [100, 200, 400, 500]], [["DRwvS", "ITntCqEvPi", "tUqF", "ITntCqEvPi"], [4, 6, 6]], [[5, 2, 3], [1, 2, 3]], [[], [500, -45, 96, 22]], [[1, 2, 2, 70, 3, 4, 4, 5, 69, 5, 4, 3, 2], [1, 2, 2, 70, 3, 4, 4, 5, 69, 5, 4, 3, 2]], [[5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 7], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[1, 2, 2, 2, 70, 3, 4, 4, 5, 5, 4, 3], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 3], [1, 2, 2, 3, 3, 4, 4, 5, 5, 3]], [["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "ITntCqEvPi"], [4, 6, 6]], [[5, 5, 6, 6, 7, 8, 9, 9], [5, 5, 6, 6, 7, 7, 8, 9, 9]], [[1, 2, 20], [1, 2, 20]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[12, 2, 20], [1, 2, 19]], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15, 20]], [[12, 2, 21], [12, 2, 20]], [[1, 2, 3, 5, 6, 12, 7, 8, 9, 10, 10], [1, 2, 3, 4, 5, 6, 12, 7, 8, 12, 0, 10, 10]], [[12, 2, 20, 20], [12, 2, 20]], [[6], [6]], [["LsgdJOGUO", "nsDO", "ceRuVEV", "BohovaWqz", "vovSNBB", "BohovaWqz"], [true, false, false]], [["DRwvS", "ITntCqEvPi", "SmJpP", "DRwvS"], ["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "ITntCqEvPi"]], [[300, 1, 3, 4, 5, 6, 8, 9, 0, 9], [300, 1, 3, 4, 5, 6, 7, 8, 9, 0, 9]], [[false, true, false, true, false, false, true, false, true], [false, true, false, true, false, false, true, false, true]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 15]], [[1, 3, 2, 3], [1, 3, 2, 3]], [[false, false, false, false, false], [false, false, false, false, true, false]], [["kx", "DHBNiditD", "DHBNiditD"], [4, 5, 6]], [[1, 1, 2, 3, 1], []], [[1, 2, 3, 5, 6, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, -45, 8, 9, 2, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 10]], [[26, true, 26.914534243589074, -44], []], [[11, 12, 13, 14, 15, 70, 17, 18, 19, 20, 15], [11, 12, 13, 14, 15, 70, 17, 18, 19, 20, 15]], [[300, 1, 3, 2, 4, 5, 6, 8, 9, 0, 9], [300, 1, 3, 4, 5, 6, 7, 8, 9, 0, 9]], [[100, 201, 300, 400, 500], [100, 200, 300, 400, 500]], [[1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10], [7, 1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10]], [[false, true, false, false], [false, false, false, false]], [[7, 1, 2, 3, 4, 4, 6, 12, 7, 8, 9, 0, 10, 10], [7, 1, 2, 3, 4, 5, 6, 12, 7, 8, 9, 0, 10, 10]], [[4, 16, 5], [4, 5, 16, 5]], [[1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 9], [1, 2, 3, 5, 6, 6, 7, 8, 9, 10]], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15], [11, 12, 13, 4, 15, 16, 17, 19, 20, 15, 20]], [[7, 7], [6]], [[1, 2, 2, 3, 3, 4, 4, 5, 5, 3, 4], [5, 5, 6, 6, 7, 7, 8, 8, 9, 9]], [[100, 200, 300, 400, 500, 400, 300], [499, 200, 400, 500]], [[false, false, false, false, false, false], [false, false, false, false, false, false]], [[], [4, 6, 6]], [[4, 5, 6], [4, 4, 5, 6]], [[12, 2, 20, 20, 2], [12, 2, 20, 20]], [[11, 12, 13, 14, 15, 16, 17, 19, 20, 15, 11], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[16, 1, 2, 3], [1, 2, 3]], [[1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10], [1, 2, 3, 5, 6, 6, 7, 8, 9, 10]], [[30.445411706111912, 18.10848826924409, 24.97646124690165, -55.873347006206544], [500, -45, 96, 22]], [[12, 2, 20], [12, 2, 20, 20]], [[2, 3], [1, 2, 3]], [[1, 3, 2, 3], [1, 3, 3]], [[12, 20], [12, 18, 20]], [[false, false, false, false, false], [false, true, false, false, false, false]], [[4, 6, 6, 4], [4, 6, 6]], [[1, 1, 2, 3, 4, 5, 6, 7, 8, 9], [11, 15, 12, 13, 14, 15, 16, 17, 18, 19, 20, 16]], [[5, 5, 19, 6, 6, 7, 7, 8, 9, 9], [5, 5, 6, 6, 7, 7, 8, 9, 9]], [[5, 19, 5, 16, 5], [1, 6, 3, 4, 4, 5, 5]], [[-95.16136488545524, 8.514020219858878, -25.802494572247724, 5.873698915603498, 38.044354120134614, 11.222647627029431, 26.914534243589074, 78.41454157921689, -80.88414039955265], ["ceRuVEV", "aAXslGdbD", "DHBNiditD", "fHRtFowQVh", "ITntCqEvPi", "SmJpP", "DHBNiditD", "kx", "x"]], [[100, 200, 300, 400], [100, 200, 300, 400]], [[1, 2, 20, 2], [1, 2, 20]], [[false, false, false, false], [false, true, false, false]], [[1, 2, 3, 4, 4, 6, 7, 8, 9, 10], [1, 2, 3, 4, 4, 6, 7, 8, 9, 10]], [[false, false, false, false], [false, true, false, false, true]], [[1, 400, 3, 4, 4, 5, 5, 5, 3], [1, 400, 3, 4, 12, 4, 5, 5, 5, 3]], [["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "tUqF"], ["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "tUqF"]], [[1, 2, 3, 5, 6, 12, 7, 8, 9, 0, 10], [1, 3, 4, 5, 6, 7, 8, 9, 0, 10]], [["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "SmITntCqEvPiJpP", "tUqF"], ["DRwvS", "ITntCqEvPi", "SmJpP", "tUqF", "kx", "tUqF"]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 12, 13, 14, 15, 26, 16, 17, 19, 20, 15], [11, 12, 13, 14, 15, 16, 17, 19, 20, 15]], [[5, 19, 5, 16, 5, 5], [5, 19, 5, 6, 5]], [[1, 2, 3, 6, 12, 7, 8, 9, 10, 10], [1, 2, 3, 5, 6, 12, 7, 8, 9, 10, 10]]], "input_output_examples": "[[[(3, 4, 5, 6), (5, 7, 4, 10)]], [[4, 5]]]", "starter_code": "def similar_elements(test_tup1: tuple, test_tup2: tuple) -> tuple:"}
{"task_id": "Mbpp/3", "requirement": "import math\ndef is_not_prime(n: int) -> bool:\"\"\"\nWrite a python function to identify non-prime numbers.\"\"\"", "entry_point": "is_not_prime", "canonical_solution": "\nimport math\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False\n", "base_input": [[1], [2], [10], [35], [37]], "plus_input": [[7919], [10007], [524287], [7920], [true], [10006], [524288], [7921], [10008], [10005], [7918], [524289], [10004], [524286], [524290], [7922], [7923], [10009], [7917], [524285], [7916], [10003], [524284], [7924], [10010], [7915], [524283], [7925], [10011], [10002], [7914], [7926], [524291], [10012], [10001], [524292], [10000], [7927], [7928], [9999], [7929], [524293], [7913], [10013], [10014], [524282], [7912], [63], [9998], [62], [524281], [23], [64], [58], [60], [16], [59], [9997], [57], [10015], [61], [20], [56], [21], [7930], [55], [7911], [54], [19], [53], [9996], [524280], [22], [9995], [96], [9994], [7931], [10016], [524279], [97], [9993], [15], [94], [65], [93], [29], [66], [30], [92], [41], [95], [91], [14], [6], [524294], [4], [524278], [524277], [90], [524275], [5], [524295], [3]], "input_output_examples": "[[[2]], [[False]]]", "starter_code": "def is_not_prime(n: int) -> bool:"}
{"task_id": "Mbpp/4", "requirement": "import heapq as hq\ndef heap_queue_largest(nums: list, n: int) -> list:\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\"\"\"", "entry_point": "heap_queue_largest", "canonical_solution": "\nimport heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums\n", "base_input": [[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 2], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 5]], "plus_input": [[[9, 8, 7, 6, 5, 4, 3, 2, 1], 3], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 7], [[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 3], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], 4], [[-10, 50, 0, -20, 30, -40, 60, -70, 80, -90, 100], 6], [[-10, 50, 0, -20, 30, -40, 60, -70, 80, -90, 100, -70], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 25], 7], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 100], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100], 9], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 7], [[10, 20, 30, 40, 50, 70, 80, 100], 3], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 6], 9], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 11], 7], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 7], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 6], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 11], 8], [[1000, 900, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[1, 3, 5, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 8], [[1, 3, 5, 6, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 6], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 8], [[1, 3, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11], 7], [[1000, 900, 800, 700, 600, 500, 400, 300, 4, 100], 5], [[70, 900, 800, 700, 600, 500, 400, 300, 200, 100], 4], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 9], [[8, 7, 6, 5, 4, 2, 1], 2], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[100, 200, 300, 400, 500, 600, 4, 700, 800, 900, 1000], 5], [[1, 3, 5, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 1], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 6], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400], 9], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25], 2], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100], 5], [[10, 20, 40, 30, 40, 50, 60, 70, 80, 90, 100], 3], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 199, 100], 9], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400], 10], [[8, 7, 6, 5, 5, 4, 2, 1], 2], [[1000, 800, 700, 600, 500, 400, 300, 4, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 24], 6], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 9], [[9, 8, 7, 6, 4, 3, 2, 1], 4], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 7], 2], [[1, 3, 5, 7, 9, 11, 13, 14, 15, 17, 19, 21, 23, 25], 8], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 100, 100], 5], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 24, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 25], 7], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 4], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701], 4], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 10], [[10, 21, 30, 40, 50, 70, 80, 100], 3], [[1, 3, 5, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 8], [[1000, 900, 800, 700, 600, 500, 400, 300, 199, 701, 701], 4], [[1, 3, 5, 25, 7, 9, 11, 13, 15, 16, 19, 21, 23, 25], 7], [[1, 3, 5, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 2], [[1000, 900, 90, 800, 700, 600, 500, 400, 300, 199, 701, 99], 4], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 6], 8], [[101, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000], 5], [[100, 200, 400, 500, 600, 800, 900, 1000], 5], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 200, 100], 5], [[1000, 900, 800, 700, 600, 21, 500, 400, 300, 199, 800, 100], 9], [[8, 7, 6, 5, 5, 4, 2, 0], 2], [[100, 200, 300, 400, 500, 599, 700, 800, 900, 1000], 1], [[1, 3, 5, 7, 21, 11, 13, 15, 17, 19, 21, 23, 25, 21], 7], [[1000, 8, 7, 6, 5, 4, 3, 2, 1, 6, 5], 9], [[101, 100, 200, 300, 3, 400, 500, 600, 700, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 7], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 25, 7], 7], [[1000, 900, 800, 700, 900, 600, 500, 400, 300, 199, 100], 4], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 7], [[1000, 8, 7, 6, 5, 4, 3, 2, 1, 6], 9], [[101, 100, 200, 300, 3, 400, 500, 600, 700, 800, 40, 1000], 5], [[1, 23, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 1, 23, 25, 25, 11, 11], 8], [[1000, 900, 800, 700, 600, 15, 500, 400, 300, 4, 100, 400], 5], [[1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 17, 19, 21, 23, 25, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 18, 19, 21, 23, 25, 25, 11, 24, 11, 21], 7], [[8, 7, 6, 5, 4, 2, 1, 8], 2], [[1000, 900, 800, 400, 700, 600, 500, 400, 300, 199, 701, 100, 100], 5], [[1000, 900, 800, 700, 600, 500, 400, 1001, 300, 200, 100], 9], [[1000, 8, 7, 6, 5, 4, 3, 99, 2, 1, 6], 9], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 9], [[-10, 900, 800, 700, 600, 500, 400, 300, 200, 100, 800], 3], [[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25], 5], [[1, 3, 5, 9, 11, 13, 15, 17, 21, 23, 40, 25, 25], 8], [[1, 3, 5, 9, 900, 13, 15, 17, 19, 21, 19, 25, 25, 7], 7], [[1, 3, 5, 6, 14, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25, 40], 2], [[9, 8, 7, 6, 5, 4, 3, 2, 1, 4, 7], 4], [[3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 40, 24, 25], 8], [[1, 3, 5, 7, 9, 11, 13, 15, 13, 21, 1, 23, 25, 25, 11, 11], 8], [[100, 200, 400, 500, 800, 900, 1000], 5], [[1, 3, 5, 7, 9, 11, 22, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 40, 25, 25], 8], [[3, 5, 8, 9, 11, 17, 19, 21, 23, 40, 24, 25], 7], [[100, 200, 300, 400, 30, 600, 700, 800, 900, 1000], 4], [[900, 700, 600, 500, 500, 400, 300, 200, 100, 800, 400, 900], 10]], "input_output_examples": "[[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]], [[[85, 75, 65]]]]", "starter_code": "def heap_queue_largest(nums: list, n: int) -> list:"}
{"task_id": "Mbpp/6", "requirement": "def is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int, b: int) -> bool:\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\"\"\"", "entry_point": "differ_At_One_Bit_Pos", "canonical_solution": "\ndef is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int,b: int):\n    return is_Power_Of_Two(a ^ b)\n", "base_input": [[13, 9], [15, 8], [2, 4], [2, 3], [5, 1], [1, 5]], "plus_input": [[0, 0], [-10, 10], [100, 100], [-50, -100], [123456789, -987654321], [-123456789, -987654321], [1000000000, 1000000001], [0, 1], [-100, -100], [-123456789, 0], [-10, -987654321], [1000000000, 100], [10, 0], [-101, -100], [1000000000, 1000000000], [10, 10], [-1, 0], [-101, 100], [-2, -2], [-123456789, -10], [-50, -50], [-50, -101], [-101, 1000000001], [1, -987654320], [-101, -101], [-11, -987654321], [-50, -102], [-3, 1], [-987654321, -987654320], [-987654321, -100], [0, 1000000001], [-50, -987654321], [-102, -987654321], [-102, 1], [1000000000, 10], [123456789, 1], [-10, -10], [10, -987654320], [-1, 1], [-101, -102], [-11, 0], [-1, -100], [-3, -987654320], [1, -50], [-123456789, -50], [-2, -1], [123456789, -2], [-2, -4], [-101, 10], [-2, 123456789], [-2, -987654321], [-1, -1], [1000000001, 1000000001], [-1, -2], [-50, 1000000000], [-3, -987654321], [-51, -50], [1, -1], [-100, -2], [1000000000, 101], [1000000000, -51], [-49, -102], [-102, -100], [-123456789, -123456789], [-51, -51], [-9, 10], [-4, -101], [-102, -101], [2, 2], [-50, -99], [-1, 101], [-2, -11], [-3, -2], [-987654321, -10], [-100, -49], [false, true], [true, true], [-987654321, -987654321], [123456789, -4], [123456789, 100], [9, 10], [-987654321, 1], [-3, -1], [-102, -102], [101, -101], [11, 10], [-50, -49], [false, false], [123456789, -50], [-10, 1], [-3, -51], [1, -10], [-10, 11], [-102, 2], [8, 8], [123456787, 1], [-987654321, 101], [9, -123456788], [8, -50], [-101, -3], [-123456788, 1000000000], [-12, 0], [-50, -1], [-987654320, 2], [-4, -123456789], [-2, -10], [-12, -101], [-9, -1]], "input_output_examples": "[[[13, 9]], [[True]]]", "starter_code": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:"}
{"task_id": "Mbpp/7", "requirement": "import re\nfrom typing import List\ndef find_char_long(text: str) -> List[str]:\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\"\"\"", "entry_point": "find_char_long", "canonical_solution": "\nimport re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))\n", "base_input": [["Please move back to stream"], ["Jing Eco and Tech"], ["Jhingai wulu road Zone 3"]], "plus_input": [[""], ["This is a very long string with no words that are at least 4 characters long."], ["words"], ["with"], ["4"], ["ve"], ["This is a very long string with no arewords that are along.t least 4 charatacters long.is"], ["arewords"], ["This is a very long string with no words that are at llongeast 4 characters long."], ["arrewords"], ["This is a very long strigng with no words that are at least 4 characters long."], ["least"], ["arerwordsThis"], ["stralong.t"], ["stralonwith.t"], ["vate"], ["Thicharatactercss"], ["wosrds"], ["vwosrds"], ["llongeast"], ["along.t"], ["vcharacterse"], ["This is a very long string with no arords that are along.t least 4 charatacters long.is"], ["Thicharatactercsvcharacterse"], ["ThicharatacterThis is a very long strigng with no words that are at least 4 characters long.csvcharacterse"], ["ThicharatacterT4his is a very long strigng with no words that are at least 4 characters long.csvcharacterse"], ["arords"], ["This is a very long string with no arewords that are along.t least 4 charatacters lonThis vwosrdsis a very long string with no words that are at least 4 characters long.g.is"], ["long.with"], ["Thicharattactercss"], ["This is a very long string with no alrords that are along.t least 4 charatacters long.is"], ["Thicharataercss"], ["arewds"], ["This is a very long string with no arords that are along.t least 4 charatacters long.isarords"], ["thatvcharacterse"], ["is"], ["tat"], ["stralong..t"], ["s"], ["string"], ["long.g.is"], ["This is a very long gstrigng with no words that are at least 4 characters long."], ["This is a very long string with no words that are at llongeast 4 charactThis is a very long string with no arewords that are along.t least 4 charatacters lonThis vwosrdsis a very long string with no words that are at least 4 characters long.g.iss long."], ["vwords"], ["that"], ["characters"], ["woords"], ["vworrds"], ["ThicharatacterThis is a very long strigng  least 4 characters long.csvcharacterse"], ["srtring"], ["This is a very long sarrewordstring with no words that are at llongeast 4 characters long."], ["long.alrordsg.is"], ["wossrds"], ["This is a very long strigng with no words that are at least 4 characters longcharactThis."], ["arerwordsThis is a voery long gstrigng with no words that are at least 4 characters long.This"], ["vwdorrdwossrdss"], ["This is a very long string with no words that are at llongeast Thicharatactercssters long."], ["longlong.This.gwith"], ["vworrrds"], ["charactThis"], ["Tchicharatactercsvcharacterse"], ["stralon"], ["alrords"], ["tast"], ["44"], ["avworrds"], ["srtring44"], ["leaet"], ["ThicharatacterThis"], ["ThicharacterscharattractercssarerwordsThis"], ["vcherse"], ["alrordlonThiss"], ["This is a very long string with no words that are at llongeast Thcharactersicharatactercssters long."], ["ttat"], ["witth"], ["along.longcharactThis.t"], ["a"], ["at"], ["alrordlonThisllongeasts"], ["tlong.This"], ["ThicharatacterT4his is a very long strigng with no words that arevery at least 4 charactiers long.csvcharacterse"], ["srtrinrg"], ["tlong.TgstrignThcharactersicharatactercsstersghis"], ["wwith"], ["stringtast"], ["wilong.alrordsg.is"], ["long.This"], ["osrds"], ["stringtaststralong.t"], ["srtnoring"], ["vee"], ["ThicharatacterThis is a very long strigng with no words that are at least t4 characters long.csvcharacterse"], ["averyrewords"], ["thavworrdsat"], ["This is a very long string with no words that are at lllongeastcharacters long."], ["stralong..ts"], ["thatvcharaccharactiersterthavworrdsatse"], ["loleaetg"], ["wwitThish"], ["aa"], ["atare"], ["avaeryrewords"]], "input_output_examples": "[[['Please move back to stream']], [[{'back', 'Please', 'stream', 'move'}]]]", "starter_code": "from typing import List\ndef find_char_long(text: str) -> List[str]:"}
{"task_id": "Mbpp/8", "requirement": "from typing import List\ndef square_nums(nums: List[int]) -> List[int]:\"\"\"\nWrite a function to find squares of individual elements in a list.\"\"\"", "entry_point": "square_nums", "canonical_solution": "\ndef square_nums(nums):\n return [i**2 for i in nums]\n", "base_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 20, 30]], [[12, 15]]], "plus_input": [[[]], [[-3, -2, -1, 0, 1, 2, 3]], [[9, 17, 5, 23, 10, 13, 19, 7, 2, 4]], [[-2, 17, 5, 23, 10, 13, 19, 7, 2, 4]], [[17, -3, -2, -1, 0, 1, 2, 3]], [[-2, 17, 5, 24, 10, 13, 19, 7, 2, 4]], [[-3, -2, -1, 0, 1, 2]], [[17, -3, -2, 1, 0, 1, 2, 3]], [[-3, -2, -1, 0, 1, 7, 2, 3]], [[-3, 1, -1, 0, 1, 2, 3]], [[17, -2, 1, -92, -36, 69, 18]], [[17, -2, 1, -92, -36, 69, 18, -36]], [[-3, 1, -1, 0, 1, 2, 3, 1]], [[false, true, false, true, false, true, true, true, false, false, false]], [[17, -3, -2, -1, 0, 1, 69, 3]], [[17, 4, -2, -1, 0, 1, 10, 3]], [[9, 17, 23, 10, 13, 19, 7, 7, 2, 4]], [[9, 17, 23, 10, 13, 19, 7, 7, 2, 9]], [[15, 17, -2, 1, -92, -36, 69, 18]], [[17, 1, 1, -92, -36, 69, 18, 17]], [[17, -3, -2, -1, 0, 1, 69, 17, 3]], [[-3, -2, -1, 0, 2, 1]], [[17, -2, 1, 1, -36, 69, 18]], [[-3, -2, -1, 0, 1, 69, 17, 3, -2]], [[-2, 17, 5, 24, 13, 19, 7, 2, 4]], [[false, true, false, true, false, true, true, true, false, false]], [[17, -2, 1, 1, -36, 18]], [[9, 17, 5, 12, 23, 10, 13, 19, 7, 2, 4]], [[17, -2, 1, -92, 18, -36, 17, -2]], [[17, -3, -2, -1, 0, 1, 2, 2, 3]], [[17, -2, 1, -92, -36, 69, 18, 17]], [[-2, 17, 24, 13, 19, 7, 2, 4]], [[24, 9, 17, 5, 12, 23, 10, 13, 19, 7, 2, 4]], [[17, -3, -2, 5, -1, 1, 2, 2, 3]], [[17, -2, 1, -92, -36, 69, 18, 17, 17]], [[17, -2, 1, -91, -92, -36, 69, 18]], [[17, -2, 1, -92, 18, -36, 17, 24, -2, -2]], [[17, -3, -2, 5, -1, 1, 2, 3, 3]], [[17, -3, -2, -1, 0, 1, 69, 3, -2]], [[-3, -2, -1, 2, 18, 1, 18, 7, 2, 3]], [[-3, -2, 15, 0, 2]], [[17, 4, -2, -1, 0, 3, 1, 3, 3]], [[17, 1, -1, 1, -92, -36, 69, 18, 1, 1]], [[-3, -2, -1, 0, 1, 69, 17, 3, -2, 17]], [[9, 17, 5, 12, 23, 10, 13, 19, 7, 4]], [[-3, -1, -2, -1, 0, 1, 2, 3, -1]], [[-3, -2, -1, 0, 1, 69, 3, -2, 17]], [[3, 17, 24, 13, 19, 7, 2, 4]], [[17, -2, 1, 18, -36, 17, -2]], [[4, -2, -1, 0, 3, 1, 3, 3]], [[-2, 17, 5, 23, 10, 13, 19, 7, 2, 4, 13]], [[17, -2, 1, -92, -36, 69, 18, 17, 18]], [[17, -1, -3, -2, -1, 0, 1, 2, 3, -1]], [[17, -3, -2, 4, 1, 0, 1, 2, 3]], [[17, -2, 1, 1, -35, 69, 18]], [[-2, 17, 5, 0, 23, 10, 13, 19, 7, 2, 4]], [[17, -3, -2, -1, 1, 69, 17, 3]], [[-2, 17, 5, 24, 13, 19, 7, 2, 3]], [[24, 9, 17, 6, 12, 23, 10, 13, 19, 7, 2, 4]], [[17, -2, 1, 18, -36, 17]], [[17, -2, -1, 0, 1, 7, 2, 3]], [[17, -2, 1, -36, 17, -2]], [[-2, 1, 18, -36, 16, -2]], [[24, 9, 17, 6, 12, 10, 13, 19, 7, 2, 4]], [[24, 10, 9, 17, 6, 12, 10, 13, 19, 7, 2, 4]], [[24, 9, 19, 6, 12, 10, 6, 13, 19, 7, 2, 4, 2, 6]], [[17, -3, 4, 1, 7, 1, 2, 3]], [[-3, 1, -1, 1, 2, 3, 1]], [[68, 17, -2, 1, -92, -36, 69, 1, 18]], [[6, 9, 17, 5, 12, 23, 10, 13, 19, 7, 4]], [[17, -3, -1, 0, 1, 69, 3, -2]], [[24, 9, -1, 19, 6, 12, 10, 6, 13, 19, 7, 2, 4, 2, 6, 2, -1]], [[24, 9, 17, 12, 10, 13, 19, 7, 2, 4, 68, 9]], [[17, -2, -91, -92, 18, -36, 17, 24, 7, -2, -2]], [[9, 17, 23, 10, 13, 19, 7, 7, 2, 9, 9]], [[17, -2, 4, 1, 0, 1, 2, 3]], [[17, -3, 4, 1, 7, 2, 3]], [[-2, 17, 5, 0, 10, 13, 19, 7, 2, 4]], [[-2, 10, -3, 18, -36, 16, -2]], [[17, -2, 4, 1, 18, -3, -36, 17, -2]], [[17, 17, 1, -92, -36, 69, 18, -36]], [[17, -2, -91, -92, 18, -36, 17, 24, 7, -2, -2, 24]], [[17, -3, -1, 0, 1, 69, 3, -2, 17]], [[-2, -91, 5, 0, 10, 14, 19, 7, 2, 4, -2]], [[17, -3, -2, -1, 0, 1, 69, -2]], [[17, 16, 6, 17, 1, -92, -36, 69, 18, -36]], [[24, 9, -2, 19, 6, 12, 10, 6, 13, 19, 7, 2, 4, 2, 6, 2, -1]], [[-3, -3, -2, -1, 0, 2, 3]], [[9, 17, 23, 10, 9, 13, 19, 7, 7, 2, 9]], [[17, -2, -91, -92, 18, -36, 17, -1, 24, 7, -2, -2, 24]], [[9, -3, -2, 5, -1, 1, 2, 2, 3]], [[-3, 1, -1, 0, 1, 2, 3, 1, 1]], [[24, 9, 17, 12, 23, 13, 19, 7, 2, 4]], [[16, 6, 17, 1, -92, -3, -36, 69, 18, -36]], [[-2, 1, 18, -36, 15, -2]], [[16, 17, 1, -92, -3, -36, 69, 18, -36, 1]], [[-2, 17, 3, 13, 23, 10, 13, 19, 7, 2, 4]], [[19, -3, -2, -1, 2, 1, 18, 7, 2, 3]], [[17, -2, 1, 68, 1, -35, 69, 18]], [[-2, 17, -2, 1, -92, -36, 69, 18, 17, 17]], [[-2, 1, 18, -3, -36, 15, -2, 18, -36]], [[-2, 17, 15, 5, 24, -2, 13, 7, 2, 3]], [[-3, -2, -1, 2, 18, -92, 18, 7, 2, 3]]], "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]]]]", "starter_code": "from typing import List\ndef square_nums(nums: List[int]) -> List[int]:"}
{"task_id": "Mbpp/9", "requirement": "def find_Rotations(s: str) -> int:\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\"\"\"", "entry_point": "find_Rotations", "canonical_solution": "\ndef find_Rotations(s): \n    n = len(s)\n    s += s\n    for i in range(1, n + 1):\n        if s[i: i + n] == s[0: n]:\n            return i\n    return n\n", "base_input": [["aaaa"], ["ab"], ["abc"]], "plus_input": [["aaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaab"], ["aaaaaaaaaaaaaaaaababab"], ["aaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaab"], ["aaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaabaab"], ["aaaaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaabaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabb"], ["aaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaababab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaababab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaabaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaabaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaababab"], ["aaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaabaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaabaaababaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaabaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaabaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["pmUjgIomJ"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaabaaaaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabababaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaaaaaaaabaaaaaaaaaaaaaaaaaaabaabaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaaabaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabababaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaabaaaaaaabbaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaabaaaaabaaab"], ["aaaaaaaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabbabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaabaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaabaaaaaaaabaab"], ["pmUaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaabaaabjgmIomJ"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabababaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabababaaaaaaaaaaabaaaaaaababaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabaaaaaaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabababaaaaaaaaaaabaaaaaaababaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaabaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaabababaaaaaaaaaaaaabaab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaabaaaaaaabb"], ["aaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaabaaaaaaabaabaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaabab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabab"], ["aaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaabaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaabaaaaaaaabaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaababaaaaaaaaaaaaabababaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaabaabaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaabaababaaaabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbabb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaabaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaabaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaab"], ["pmaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaabaaaaaaaaaaaaaaaaabUjgIomJ"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabaaaaaaaaa"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaababaaabaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaababaaaabaabaaaaaaaaaaaaaaaaabUjgIomJb"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaaababaaaabaaabaaaaaaaaaaaaaaaaab"], ["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaabbaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaabaaaaaaaaaaaaaaaaaaaaaabaaaaaaaaaaaaaabaaaaabaaab"]], "input_output_examples": "[[['aaaa']], [[1]]]", "starter_code": "def find_Rotations(s: str) -> int:"}
{"task_id": "Mbpp/11", "requirement": "def remove_Occ(s: str, ch: str) -> str:\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\"\"\"", "entry_point": "remove_Occ", "canonical_solution": "\ndef remove_Occ(s,ch): \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s \n", "base_input": [["hello", "l"], ["abcda", "a"], ["PHP", "P"]], "plus_input": [["a", "a"], ["aaa", "a"], ["hello world", "x"], ["worlda", "a"], ["x", "x"], ["hello world", "a"], ["world", "x"], ["xx", "x"], ["xworlaaada", "x"], ["axworlaaada", "x"], ["waaaorlda", "a"], ["xhello world", "a"], ["xxx", "x"], ["worlda", "x"], ["world", "a"], ["hwllo world", "a"], ["axx", "a"], ["hwllo world", "x"], ["hwllo", "a"], ["hwl", "a"], ["ahwllo world", "a"], ["xxx", "a"], ["hwll", "a"], ["hhwl", "a"], ["ahwllo", "x"], ["whwlloorld", "a"], ["wda", "x"], ["hwl", "x"], ["xrworlaaada", "x"], ["aahwllo", "a"], ["a", "x"], ["xxwaaaorlda", "x"], ["wda", "a"], ["hxworlaaadawllo", "a"], ["aaaa", "a"], ["xrworworldalaaadax", "x"], ["aaawda", "x"], ["hello worldx", "x"], ["xrworworldalaaadax", "a"], ["xrworlaaadaworldx", "x"], ["aahwllo", "x"], ["xworlaaadaaaaa", "a"], ["xxxx", "a"], ["xhello worlda", "a"], ["xrworworaldalaaadax", "a"], ["xaaaa", "x"], ["xxwaahello worldxaorlda", "x"], ["axworlaaada", "a"], ["worldxaorlda", "x"], ["hellloa", "a"], ["xaaa", "x"], ["aa", "a"], ["xhello", "a"], ["xrworlaaaada", "x"], ["axxxaawda", "x"], ["hello worldxxhello worlda", "a"], ["xhello", "x"], ["hxworlaaadawlolo", "a"], ["aa", "x"], ["lo", "x"], ["xaaaa", "a"], ["waaaorllda", "a"], ["ahwllao", "x"], ["aaa", "x"], ["xxhello", "x"], ["wdaa", "a"], ["xrworworaldalaaadaxa", "a"], ["waaaorlxxwaaaorlda", "a"], ["aahwllao", "x"], ["hello worldx", "a"], ["lo", "a"], ["hellloa", "x"], ["helwdalloa", "x"], ["worldxxhellox", "x"], ["hello", "x"], ["l", "x"], ["waaaorlldalo", "x"], ["xrwax", "x"], ["waaaorllda", "x"], ["whwlloorld", "x"], ["aahhwla", "x"], ["waaaorlda", "x"], ["llo", "l"], ["axaahwllaoworlaaada", "a"], ["hwllor world", "a"], ["xworlaaadaaaaa", "x"], ["waaaorlldal", "a"], ["aahawllao", "x"], ["lllo", "l"], ["worlaaaadxaorlda", "x"], ["hello worldxxhhelloworlda", "a"], ["hwlll", "a"], ["xrworwoxxxraldalaaadaxa", "a"], ["ll", "x"], ["aaahwllaoo", "a"], ["worldx", "a"], ["xrworworaldalaaadaxa", "x"], ["hxworlaaadawlolo", "x"], ["whello world", "x"], ["ahwllo", "a"], ["ahxworlaaadawlolo", "a"], ["whello", "x"], ["ax", "a"]], "input_output_examples": "[[['hello', 'l']], [['heo']]]", "starter_code": "def remove_Occ(s: str, ch: str) -> str:"}
{"task_id": "Mbpp/12", "requirement": "from typing import List\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\"\"\"", "entry_point": "sort_matrix", "canonical_solution": "\ndef sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result\n", "base_input": [[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[1, 2, 3], [-2, 4, -5], [1, -1, 1]]], [[[5, 8, 9], [6, 4, 3], [2, 1, 4]]]], "plus_input": [[[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991]]], [[[9, 8, 7], [6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5]]], [[[5, -2, 4], [1, -3, 7], [-6, 8, -1], [0, 9, -5]]], [[[11, -5, 23, 0], [6, 9, -8, 15], [-2, 10, 7, -4], [20, -3, 1, 18]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992], [999997, 999996, 999995]]], [[[-2, 10, 7, -4], [20, -3, 1, 18]]], [[[1, -3, 7], [-6, 8, -1]]], [[[6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5]]], [[[-5, -8, -9], [-6, -4, -3], [-5, -8, -9]]], [[[-5, -8, -9]]], [[[1000000, 999999, 999998], [999994, 999993, 999999998], [999997, 999996, 999995], [999994, 999993, 999999998], [999997, 999996, 999995]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997], [999999999, 999999998, 999999997]]], [[[-5, -8, -9, -9]]], [[[-6, -4, -3], [-2, -1, -4]]], [[[-5, -8, -9, -9, -5]]], [[[-5, -8, -9, -9], [-5, -8, -9, -9]]], [[[20, -3, 1, 18]]], [[[6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992], [1000000, 999999, 999998]]], [[[3, 2, 1], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[-6, -4, -3], [-2, -1, -4], [-2, -1, -4]]], [[[-5, -8, -9], [-2, -1, -4]]], [[[999995, -1, -2], [6, 5, 4], [3, 2, 1], [999995, -1, -2], [-3, -4, -5], [999995, -1, -2]]], [[[-5, -8, -9], [999999999, -1, -4]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[1000000, 999999, 999998], [999997, 999996, 999995]]], [[[-5, -8, -9, -9, -5], [-5, -8, -9, -9, -5]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[-5, -8, -9], [-6, -4, -3], [-5, -8, -9], [-5, -8, -9]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999994, 999993, 1], [999997, 999996, 999995], [999994, 999993, 1], [999997, 999996, 999995]]], [[[5, -2, 4], [-6, 8, -1], [0, 9, -5]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 999992], [999997, 999996, 999995], [1000000, 999999, 999998]]], [[[-5, -8, 999999991], [-6, -4, -3], [-5, -8, 999999991], [-5, -8, 999999991]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999994, 999993, 1], [999997, 999996, 999995], [999997, 999996, 999995], [999997, 999996, 999995]]], [[[-9, 20, -3, 1, 18]]], [[[5, -2, 4], [-6, 8, -1]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999994, 999993, 1], [999995, 999996, 999995], [999995, 999996, 999995], [999995, 999996, 999995]]], [[[999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997]]], [[[9, 8, 7], [6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [3, 2, 1]]], [[[0, 0, -6, 8, -1], [0, 0, -6, 8, -1], [0, 0, -6, 8, -1]]], [[[-1, 999999999, -1, -4], [-1, 999999999, -1, -4]]], [[[6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [3, 2, 1]]], [[[-5, -8, 2, -9], [-5, -8, 2, -9], [-5, -8, 2, -9]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [-3, -4, -5], [3, 2, 1], [3, 2, 1]]], [[[-5, -8, -9, -9], [-5, -8, -9, -9], [-5, -8, -9, -9]]], [[[9, 8, 7], [6, 5, 4], [3, 2, 1], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[-7, -4, -3], [-7, -4, -3]]], [[[999999996, 999999994, 999999994], [999999993, 999999992, 999999991]]], [[[-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991], [-5, 999999995, 10, 999999991]]], [[[0, 6, 0, -6, 8, -1], [0, 6, 0, -6, 8, -1], [0, 6, 0, -6, 8, -1]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [-3, -4, -5], [5, 2, 1], [5, 2, 1], [0, -1, -2]]], [[[-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5], [-5, 999999995, 10, 999999991, -5]]], [[[0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1]]], [[[-5, -8, -9, -5]]], [[[-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6], [-9, -5, -8, -8, -9, 18, -8, -6]]], [[[6, 5, 4], [0, -1, -2], [-3, -4, -5], [0, -1, -2]]], [[[10, -1, -2], [3, 2, 1], [10, -1, -2], [10, -1, -2], [-3, -4, -5], [10, -1, -2], [10, -1, -2]]], [[[1000000, 999999, 999998], [999994, 999993, 999999998], [999997, 999996, 999995], [999994, 999993, 999999998], [999997, 999996, 999995], [999994, 999993, 999999998]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [3, 2, 1], [3, 2, 1]]], [[[999997, 999996, 999995]]], [[[20, -3, 18]]], [[[999999996, 999999995, 999999994], [-1, 999999992, 999999991], [-1, 999999992, 999999991], [999999999, 999999998, 999999997]]], [[[-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8]]], [[[-5, -9, -8, -9, -9, -5], [-5, -9, -8, -9, -9, -5]]], [[[5, -2, 4], [-6, 8, -1], [5, -2, 4]]], [[[999994, 999993, 1], [999994, 999993, 1], [999995, 999996, 999995], [999995, 999996, 999995], [999995, 999996, 999995]]], [[[-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8], [-5, -8, -8, -9, 18, -8, -6, -8]]], [[[-5, -9, 2, -9], [-5, -9, 2, -9], [-5, -9, 2, -9]]], [[[20, -3, 1, 18], [20, -3, 1, 18]]], [[[-3, 1, 18], [-3, 1, 18], [-3, 1, 18], [-3, 1, 18]]], [[[999997, 999996, 999995], [999994, 10, 999992], [999997, 999996, 999995]]], [[[9, 8, 7], [6, 5, 4], [0, -1, -2], [-3, -4, -5]]], [[[0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1], [0, 3, 3, -6, 8, -1]]], [[[-5, -8, -9], [-5, -8, -9]]], [[[-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4], [-2, -1, -4]]], [[[1000000, 999999, 999998], [999997, 999996, 999995], [1000000, 999999, 999998]]], [[[-6, 8, -1, -1]]], [[[9, 8, 7], [0, -1, -2], [-3, -4, -5]]], [[[0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8], [0, 999999992, 0, -6, 8, -1, 8]]], [[[-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9]]], [[[999999999, 999999998, 999999997], [999999996, 999999995, 999999994], [999999993, 999999992, 999999991], [999999999, 999999998, 999999997], [999999996, 999999995, 999999994]]], [[[-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8], [-8, -8, -9, 18, -8, -6, -8]]], [[[6, 5, 4], [0, 0, -2], [3, 2, 1], [0, 0, -2], [-3, -4, -5], [0, 0, -2]]], [[[-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18], [-2, 2, -3, 1, 18]]], [[[11, -5, 23, 0], [-2, 10, 7, -4]]], [[[-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10], [-5, 999999995, 10, 999999991, 999999995, 10]]], [[[8, 1, 7], [8, 1, 7], [8, 1, 7], [-6, 8, -1]]], [[[-1, 999999999, -1, -4], [-1, 999999999, -1, -4], [-1, 999999999, -1, -4]]], [[[-5, -8, -9], [-6, -4, -3], [-2, -1, -4], [-5, -8, -9]]], [[[-4, -3], [-4, -3], [-4, -3]]], [[[0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1], [0, 3, -6, 8, -1]]], [[[-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6], [-5, -8, -8, -9, 18, -8, -6]]], [[[999994, 999993, 1], [1000000, 999999, 999998], [999997, 999996, 999995], [999994, 999993, 1], [999997, 999996, 999995]]], [[[-1, 999999999, -1, 2, -4, 2], [-1, 999999999, -1, 2, -4, 2]]], [[[999999998, -8, -8, -9, 18, -8, -6], [999999998, -8, -8, -9, 18, -8, -6]]], [[[-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9], [-5, -8, -8, -9, 18, -8, 20, -8, 11, -9]]], [[[-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9], [-5, -8, -7, -9, 18, -8, -6, -8, -9]]], [[[-9, 20, -3, 1, 1000000, 18]]], [[[-5, -8, 2], [-5, -8, 2], [-5, -8, 2]]], [[[-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9], [-5, -8, -8, -9, 18, -8, -6, -8, -9]]]], "input_output_examples": "[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[1, 1, 1], [1, 2, 3], [2, 4, 5]]]]", "starter_code": "from typing import List\ndef sort_matrix(M: List[List[int]]) -> List[List[int]]:"}
{"task_id": "Mbpp/14", "requirement": "def find_Volume(l: float, b: float, h: float) -> float:\"\"\"\nWrite a python function to find the volume of a triangular prism.\"\"\"", "entry_point": "find_Volume", "canonical_solution": "\ndef find_Volume(l,b,h) : \n    return ((l * b * h) / 2) \n", "base_input": [[10, 8, 6], [3, 2, 2], [1, 2, 1]], "plus_input": [[100, 50, 10], [0.5, 0.2, 0.1], [123456789, 987654321, 12345], [15, 12, 18], [7.5, 3.5, 5.2], [50, 25, 35.5], [6.7, 4.9, 3.2], [2.3, 5.6, 4.1], [987654320, 12, 18], [12, 987654320, 987654320], [0.5, 0.4312792507522603, 0.5], [987654321, 14, 51], [0.8922229171130629, 0.2, 0.1], [10, 12, 12345], [12345, 12, 12346], [15, 12, 987654321], [12, 50, 987654320], [0.5307408226774875, 0.4312792507522603, 0.5], [0.5307408226774875, 0.6321031729360945, 0.5], [6.7, 1.2712163559940908, 0.37719260113270303], [50, 13, 15], [11, 12, 18], [987654320, 15, 987654320], [12, 15, 987654320], [1.2712163559940908, 3.5, 0.37719260113270303], [2.3, 7.5, 4.1], [0.1, 0.2, 0.2], [50, 10, 50], [25, 35.5, 35.5], [10, 12, 13], [0.8922229171130629, 0.24784643921729696, 0.1], [6.7, 7.093315941766064, 0.37719260113270303], [11, 12, 987654321], [12, 987654322, 15], [0.8922229171130629, 0.2, 0.2], [11, 12, 987654320], [25, 12346, 35.53719707762832], [0.5307408226774875, 4.9, 3.2], [5.8654364659053835, 4.9, 3.2], [12, 12346, 987654320], [12345, 25, 35.5], [6.7, 0.1, 4.9], [6.7, 7.114857913414879, 0.33367901527186616], [0.8922229171130629, 0.24784643921729696, 0.8922229171130629], [12, 18, 987654320], [987654322, 10, 987654322], [12345, 25, 12346], [50, 25, 50], [0.5, 0.5, 0.5], [1.8063834584596086, 1.2712163559940908, 0.1], [6.7, 6.958640279396424, 0.30093484569499246], [1.8063834584596086, 0.6356356838493147, 0.1], [7.5, 4.737243560970565, 5.2], [11, 15, 987654321], [35.5, 6.958640279396424, 6.958640279396424], [987654321, 15, 51], [0.5307408226774875, 0.2246713952032357, 0.4312792507522603], [6.7, 7.114857913414879, 0.6721959532506382], [7.5, 1.2712163559940908, 5.2], [2.3, 7.0513497877662985, 4.1], [50, 987654322, 10], [0.1, 4.9, 4.9], [987654321, 12346, 14], [123456789, 12345, 12345], [12345, 11, 12345], [2.3, 0.4312792507522603, 2.3], [10, 12, 12], [50, 100, 50], [2.3, 0.24784643921729696, 0.8922229171130629], [51, 100, 50], [12345, 25, 18], [26, 25, 12346], [25, 10, 35.5], [100, 26, 50], [12345, 25, 11], [0.4267076249145146, 0.4312792507522603, 7.093315941766064], [0.6721959532506382, 6.958640279396424, 6.958640279396424], [0.8922229171130629, 0.6356356838493147, 0.1], [123456789, 12345, 123456789], [50, 10, 12346], [35.5, 35.5, 35.5], [0.2, 35.5, 0.2], [26, 25, 12345], [0.6721959532506382, 0.6356356838493147, 0.1], [2.3, 0.1, 5.6], [0.2, 4.1, 4.1], [12345, 12345, 12345], [12, 12, 987654320], [0.5, 0.2, 0.30093484569499246], [50, 12345, 12345], [0.4267076249145146, 0.2804796558775843, 7.093315941766064], [987654321, 14, 987654321], [2.3, 0.16891917418428634, 0.8922229171130629], [51, 12, 50], [10, 12345, 11], [0.5, 0.2, 0.41099804295162595], [987654320, 14, 51], [1.2712163559940908, 7.5, 0.1], [0.41099804295162595, 0.33505200659362044, 0.6356356838493147], [10, 11, 11], [12346, 15, 51], [987654319, 987654320, 987654320], [2.3, 5.6, 0.5050561846753878], [4.748972607227519, 0.2, 0.1], [0.2, 0.1, 0.2], [7.058489893691628, 7.0513497877662985, 7.058489893691628], [7.058489893691628, 7.058489893691628, 2.3], [25, 12347, 987654320]], "input_output_examples": "[[[10, 8, 6]], [[240]]]", "starter_code": "def find_Volume(l: float, b: float, h: float) -> float:"}
{"task_id": "Mbpp/16", "requirement": "import re\ndef text_lowercase_underscore(text: str) -> bool:\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\"\"\"", "entry_point": "text_lowercase_underscore", "canonical_solution": "\nimport re\ndef text_lowercase_underscore(text):\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))\n", "base_input": [["aab_cbbbc"], ["aab_Abbbc"], ["Aaab_abbbc"]], "plus_input": [["a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z"], ["abc_def_ghi_jkl_mno_pqr_stu_vwx_yz"], ["_"], ["_abc"], ["abc_"], ["abc_def_ghi_"], ["A__B_ccC_dDd_eE_fFF_g_hhH_iJj"], ["a"], ["abc_DEF_ghi"], ["abc"], ["abc_def_"], ["_abc_def"], ["_abc_def_"], ["a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_"], ["_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yz"], ["ab_abc_def_c_"], ["_abc_deaf"], ["abc_def_ghi_jkl_mno_pqr_stu_vwxyz"], ["abdc_def_ghi_jkl_mno_pqr_stuu_vwx_yz"], ["A__B_cc_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yzC_dDd_eE_fFF_g_hhH_iJj"], ["abdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["_abcabc_d_ghi_jkl_mno_pqr_stu_vwx_yz"], ["abdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno__pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno__pqr_stu_vwx_yz_mno_pqrabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz_stuu_vwx_yzstuu_vwx_yz"], ["_abcabc_def_ghi_jkl_mno_pqr_stu_vwxq_yz"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pqr_stuu_vwx_yz"], ["wJz"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yztuu_vwx_yz"], ["abc_def_ghiabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abc_def_ghie_"], ["abc_def_ghi_jkl_mno_pqr_stu_vabc_def_ghie_wxyz"], ["aba_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_abc_def_ghi_jkl_mno_pqr_stu_vwxyzc_def_"], ["_abcabc_def_ghi_jkl_mno_pqr_stu_vwxq_yabdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yztuu_vwx_yzz"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_afbc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yzabc_def_z"], ["PfGhQdq"], ["c"], ["ab_abc_A__B_ccC_dDd_eE_fFF_g_hhH_iJjdef_c_"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc_defi_jkl_abcabmno_pqr_stuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abdc_def_ghi_jkl_abcabc_def_ghi__jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc__def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pq_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno__pqr_stu_vwx_yz_mno_pqrabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz_stuu_vwx_yzstuu_vwx_yz_yyz_mno_pqr_stuu_vwx_yz"], ["A__B_cc_abcabc_def_ghi_jk_l_mno_pqr_stu_vwx_yzC_dDd_eE_fFF_g_hhH_iJj"], ["ac_"], ["abc_DEF_ghia"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno__pqr_stu_vwx_yz_mno_pqrabdc_def_xghi_jkl_abcabc_def_ghabc_def_ghi_jkl_mno_pqr_stu_vwxyztuu_vwx_yz_stuu_vwx_yzstuu_vwx_yz_yyz_mno_pqr_stuu_vwx_yz"], ["cc"], ["_abcabc_d_ghi_jkl_mno_pqr_stu_vmwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEaba_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_abc_def_ghi_jkl_mno_pqr_stu_vwxyzc_def_F_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abc_d_abcabc_def_ghi_jkl_mno_pqr_stu_vwxq_yabdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yztuu_vwx_yzzef_ghi_"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_abc_defi_jkl_abcbabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yztuu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc_defi_jkl_abcaxbmno_pqr_stuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["_abcabc_def_ghi_jkl_mnao_pqr_stu_vwx_yz"], ["no_pqr_stuu_vwx_yzz"], ["abc_def_ghi_jkl_mnoc_pqr_stu_vabc_def_ghie_wxyz"], ["_ab_abc_defc_def_"], ["a_b_c_d_e_f_g_hf_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z"], ["abc_DEF_ghDia"], ["L"], ["abdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_afbc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yzabc_def_qz"], ["abc_def_ghi_jkl_mno_pqr_stmu_vwxyz"], ["_abcabc_def_ghi_jkl_mno_pqr_stmu_vwxyz_deaf"], ["A__B_cc_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yzC_dDd_eE_fFF_g_hhH_iJLj"], ["_abcabc_def_ghi_jkl_mno_pqr_stu_vwxq_yabdc_def_gh_abc_defi_jkl_abcabmino_pqr_sabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yztuu_vwx_yzz"], ["no__abc_deafpqr_stuu_vwx_LPfGhQdqyzz"], ["_aabc"], ["abc_defabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc_defi_jkl_abcabmno_pqr_stuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["A__B_cc_abcabc_def_ghi__jkl_mno_pqr_stu_vwx_yzC_dDd_eE_fFF_g_hhH_iJj"], ["PfGhQQdq"], ["abc_DEF_PfGhQdqghDia"], ["abc_def_ghiabdc_def_gh_abc_defi_ijkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abc_def__ghi_jkl_mnoc_pqr_stu_vabc_def_ghie_wxyz"], ["aabc"], ["ano_pqr_stuu_vwx_yzzbc_def_ghie_"], ["PfGhQQdq_abcabc_d_ghi_jkl_mno_pqr_stu_vmwx_yz"], ["abc_DEF_PfGhQdqghQDia"], ["abc_def_ghai_"], ["abdc_def_ghi_pqr_stuu_vwx_yz"], ["abc_defabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc_defi_jkl_abcabmno_pqr_stabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yzuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["abc_def_ghiabdc_def_gh_abc_defi_ijkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_spqr_stuu_vwx_yz"], ["abdc_def_ghi_jkl_abcabc_def_ghi__jkl_mno_pqr_ustu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["_abPfGhQQdqcabc_def_ghi_jkl_mno_pqr_stmu_vwxyz_deaf"], ["_ab_abc_defc_defabdc_def_ghi_jkl_abcabc_def_ghi_jkl_mno__pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abdbc_def_ghi_jkl_abcabc_def_ghi__jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["abc_def_ghi_jk_l_mno_spqr_stu_vwx_yz"], ["abc_defabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc__defi_jkl_abcabmno_pqr_stuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["A__B_cc_aghi_jk_l_mno_pqr_stu_vwx_yzC_da_b_tc_d_e_f_g_hf_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_zDd_eE_fFF_g_hhH_iJj"], ["vabc_def_ghi_jkl_mno_pqr_stu_vwx_yz"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mx_yz"], ["abc_def_abdc_def_gh_abc_defi_jkl_abcabmno_pqr_sabdc_def_gh_afbc_defi_jkl_abcabc_def_ghi_jkl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yzabc_def_qzghiabdc_def_gh_abc_defi_ijkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_spqr_stuu_vwx_yz"], ["abdc_def_ghi_jkl_mno_p_abc_def_qr_stuuPfGhQQdq_abcabc_d_ghi_jkl_mno_pqr_stu_vmwx_yz_vwx_yz"], ["_abcabc_d_ghi_jkl_mno_abc_def_ghai_pqr_stu_vwx_yz"], ["yz"], ["abdc_def_ghi_jkl_mno_p_abc_abc_defabdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEabcF_ghiqr_stabdc_def_gh_abc__defi_jkl_abcabmno_pqr_stuu_vwx_yzu_vwx_yyz_mno_pqr_stuu_vwx_yzdef_qr_stuuPfGhQQdq_abcabc_d_ghi_jkl_mno_pqr_stu_vmwx_yz_vwx_yz"], ["abdc_Edef_gh_abc_defi_jkl_abcabc__def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yyz_mno_pqr_stuu_vwx_yz"], ["bc_def_"], ["abc_def_dghi_"], ["abdcc_def_ghi_jkl_abcabc_def_ghi__jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"], ["_acbc_def_"], ["abdc_Edef_gh_abc_defi_jkl_abcabc__def_ghi_jkl_yz"], ["habcghia"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_jkl_mno_pabc_DEF_ghiqr_stu_vwx_yeyz_mx_yz"], ["_abcabc_d_ghi_jkl_mno_pqr_stu_x_yz"], ["a_b_c_d_e_f_g_h_i_j_aba_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_abc_def_ghi_jkl_mno_pqr_stu_vwxyzc_def_m_n_o_p_q_r_s_t_u_v_w_x_y_z"], ["abdc_def_gh_abc_bdefi_jkl_abcabmno_pq_yz"], ["an_pqr_stuu_vwx_yzzbc_def_ghie_"], ["PfGhQdqL"], ["_abcabc_d_ghi_jkl_mno_pqr_stu_z"], ["abc_DEF_PhQdqghQDia"], ["abdc_def_gh_abc_defi_jkl_abcabc_def_ghi_abdbc_def_ghi_jkl_abcabc_def_ghi__jkl_mno_pqr_stu_vwx_yz_mno_pqr_stuu_vwx_yzl_mno_pa_abcbc_DEF_ghiqr_stu_vwx_yz_mno_pqr_stuu_vwx_yz"]], "input_output_examples": "[[['aab_cbbbc']], [[True]]]", "starter_code": "def text_lowercase_underscore(text: str) -> bool:"}
{"task_id": "Mbpp/17", "requirement": "def square_perimeter(a: float) -> float:\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\"\"\"", "entry_point": "square_perimeter", "canonical_solution": "\ndef square_perimeter(a):\n  return 4*a\n", "base_input": [[10], [5], [4]], "plus_input": [[3.5], [3.867338210205425], [4.017438434643324], [4.487089891527536], [2.6642890317066636], [5.887984312046749], [6.072194086423373], [3.642116465724614], [3.695469856787123], [4.141400647038825], [6.035071486216641], [3.271150304405481], [true], [84], [22], [5.654807546008664], [4.820511953305605], [6.577316776519947], [5.002581120259965], [6.969535253031167], [3.718379579422467], [6.322289576625546], [5.632673587071418], [5.3345589524375985], [6.725440141493683], [6.516564500761447], [8.993452545033046], [5.319836337788916], [6.043399656495942], [6.185578656467972], [4.217038121909214], [87], [4.005528059933441], [6.208925187146142], [85], [2.5181655036830994], [82], [4.1150925428079805], [5.484648231650928], [6.701524882996955], [21], [5.568439992700058], [88], [6.843276090129513], [3.4382125488926367], [6.388475480286746], [7.660073820339544], [2.769573374810499], [6.898645835852767], [7.826927755593033], [2.4985782322950842], [5.8695983810477985], [4.773486580932547], [3.001034234443808], [5.395838439745376], [3.577918724597513], [5.170120644837316], [6.99185332198154], [3.449246178521576], [5.5411783354818605], [6.436883135688541], [3.49384577169542], [5.015277110821801], [3.4631036701381923], [3.38643188343381], [1.9894160159593337], [1.837789735808722], [5.245639801999035], [4.465805726769371], [5.309603748296835], [3.3070853809486187], [8.803439557651616], [5.447584681806455], [2.6402987239829994], [5.81268658921342], [2.203529850744147], [2.413369661283704], [2.8444882558095452], [2.9679176613024727], [5.635919297098677], [7.106142255754484], [3.673088666908028], [11.501115163046252], [3.3172795455753574], [3.2120053514572735], [6.650019959695511], [23], [2.413305987922484], [3.453597614102104], [6.8216792009730725], [1.2676205462665886], [6.866125113001431], [4.423165960786375], [1.9765423457339029], [4.395641502661771], [2.9248802236697493], [1.6520153932594805], [8.099418388939899], [5.066661526673157], [6.345597309471013], [2.66964983620433]], "input_output_examples": "[[[10]], [[40]]]", "starter_code": "def square_perimeter(a: float) -> float:"}
{"task_id": "Mbpp/18", "requirement": "def remove_dirty_chars(string: str, second_string: str) -> str:\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\"\"\"", "entry_point": "remove_dirty_chars", "canonical_solution": "\ndef remove_dirty_chars(string, second_string): \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string\n", "base_input": [["probasscurve", "pros"], ["digitalindia", "talent"], ["exoticmiles", "toxic"]], "plus_input": [["The quick brown fox jumps over the lazy dog", "fox"], ["This is a sample string", "i a"], ["1234567890", "01234"], ["abcd efgh", "ab cd"], ["This is a sampile string", "i a"], ["abcd efgh", "This is a sampile string"], ["a", "01234"], ["This is a sample string", "a"], ["abcabgh", "ab"], ["i a", "This is a sampile string"], ["dog", "This is a sampile string"], ["01234", "01234"], ["abcabgh", "a"], ["The quick brown fox jumps otver the lazy dog", "fox"], ["do", "This is a sampile string"], ["abcabggh", "a"], ["This is a sample string", "This"], ["ia", "This is a sampile string"], ["ia", "This is a sample stringsample"], ["This is a sasmple string", "This is a sample strin1234567890g"], ["sis", "dog"], ["abcd efgh", "bab cd"], ["bab cd", "bab cd"], ["bab cd", "This is a sample stringsample"], ["This is a sampile string", "This is a sampile string"], ["do", "do"], ["This is a sample stringsample", "Thish is a sampile string"], ["a", "1234567890"], ["dog", "dog"], ["Thiss is a sampring", "This is a sampring"], ["The quick brown fox jumps over the lazy dog", "This is a sampile string"], ["brownabcd", "iaquick"], ["This is a sasmple string", "This is a sample strin1234567g"], ["This is a sample stringsamplae", "This is a sample stringsample"], ["Thish is a sampile string", "Thish is a sampile string"], ["1234567890", "1234567890"], ["a", "0123"], ["This is a sample stringsam", "This is a sample stringsample"], ["This is a sample stringsample", "stringsam"], ["bab cd", "bdab cd"], ["This is a sampThis is a sample stringsamplele stringsample", "Thish is a sampile string"], ["i a", "i a"], ["aa", "a"], ["1234567890", "This is a sampThis is a sample stringsamplele stringsample"], ["a", "dog"], ["i a", "ia"], ["The quickfox jumps otver the lazy dog", "fox"], ["bdab", "The quick brown fox jumps over the lazy dog"], ["This is a sample stringsample", "bab cd"], ["This is a sasmple string", "Thiss is a sampring"], ["The quickfox jumpsg otver the latzy dog", "The quickfox jumpsg otver the latzy dog"], ["This is a sample stringsam", "stringsam"], ["The quick brown fox jumps otver the lazy dog", "The quickfox jumpsg otver the latzy dog"], ["Tthis is a sampile sstring", "This is a sampile string"], ["The quick brown fox jumps otver the lazy dog", "sampile"], ["Thish is a sampile string", "This is a sampile string"], ["0123", "01234"], ["012strin1234567g34", "01234"], ["aab", "ab"], ["abdog", "ab"], ["stringsamplea", "a"], ["stringsamplea", "stringsamplea"], ["1234567890", "This is asampThis sampThis is a sample stringsamplele stringsample"], ["The quick brown fox jumps otver the lazy dog", "foox"], ["Thiss is a sampring", "The quickfox jumpsg otver the latzy dog"], ["dThis is a sampile stri", "dThis is a sampile stri"], ["ab cd", "ab cd"], ["jumpsg", "jumpsg"], ["fstringsampleaox", "fox"], ["the", "01234"], ["bdab cd", "1234567890"], ["This is a sample stringsample", "This is a sample stringsample"], ["stri", "stringsam"], ["brownabcd", "brownabcd"], ["This issasmple a sampile string", "This is a sampile string"], ["0123", "0123"], ["bdabb cd", "1234567890"], ["over", "The quickfox jumpsg otver the latzy dog"], ["01234", "0134"], ["This is a sasmring", "This is a sasmple string"], ["bdab cd", "bdab cd"], ["ia", "ia"], ["fstrix", "The quickfox jumps otver the lazy dog"], ["aasampThisb", "ab"], ["Thiss", "bab cd"], ["stri", "sampile"], ["This is a sample strimplae", "This is a sample stringsample"], ["a", "a"], ["bab cd", "babstringsamplea cd"], ["abrownabcd", "The quickfox jumps otver the lazy dog"], ["bdabcdab", "This is a sample strin1234567g"], ["i aThis is a sasmple string", "This is a sample strin1234567g"], ["Thish is a sampile string", "stringsam"], ["bdabb cd", "0123"], ["This is a sampring", "This is a sample strin1234567g"], ["The quick brown fox jumg", "The quickfox jumpsg otver the latzy dog"], ["This is a sasmple string", "This is a sample stringsample"], ["1234567890", "fox"], ["foox", "This is a sample strimplae"], ["This is a sasmple sstringstring", "This is a sasmple sstringstring"], ["03134", "0134"], ["0123", "llae"], ["bdabb cd", "01223"], ["aquickfox", "dog"]], "input_output_examples": "[[['probasscurve', 'pros']], [['bacuve']]]", "starter_code": "def remove_dirty_chars(string: str, second_string: str) -> str:"}
{"task_id": "Mbpp/19", "requirement": "from typing import List\ndef test_duplicate(arraynums: List[int]) -> bool:\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\"\"\"", "entry_point": "test_duplicate", "canonical_solution": "\ndef test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))\n", "base_input": [[[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 4]], [[1, 1, 2, 2, 3, 3, 4, 4, 5]]], "plus_input": [[[2, 5, 1, 4, 3, 6, 7, 8, 9, 10]], [[]], [[-81, true, false]], [[-81, false, true, false]], [[2, 5, 1, 4, 3, 3, 6, false, 7, 8, 9, 10, 7]], [[false, -81, true, false]], [[false, -81, true, true, false, true]], [[false, -81, true, true, false, true, true]], [[-82, true, false]], [[false, -81, true, false, true, true, true]], [[5, 1, 4, 3, 6, 7, 8, 9, 10]], [[false, true, true, false, true, true]], [[-81, false, false]], [[2, 5, 1, 6, 4, 3, 6, 7, 8, 9, 10]], [[true, true, -81, true, false, true, true, true]], [[false, -81, true, false, true, true, true, false]], [[true, false, -81, false, true, true, true]], [[true, false, false, true, true, true, true]], [[2, 5, 1, 4, 3, 3, 6, false, 3, 8, 9, 10, 7]], [[false, -81, false, true, true, true, true]], [[-81, true, true, false, false]], [[false, false, true, true, false, true, true]], [[false, false, false]], [[false, -81, true, false, true]], [[true, false, false, true, true, true, true, true, true]], [[true, false, true, true, true, true, true, true]], [[true, true, true, -81, true, false, true, true, true]], [[2, 5, 1, 4, 3, 6, 7, 9, 10, 10]], [[-81, false, false, false, -81]], [[true, true, true, -81, true, false, true, true, true, true]], [[false, -81, true, false, true, true, true, false, -81, false]], [[false, true, false]], [[false, 9, false, true, false, true, true, true, false]], [[2, 1, 4, 3, 3, 6, false, 7, 8, 9, 10, 7]], [[false, -81, true, false, true, true, false, true, false]], [[false, false, -81, true, false, true]], [[-56, 3, 7, 10, 3, 7]], [[-56, 3, -82, 10, 3, 7]], [[false, false]], [[true, false, false, true, true, true, true, true]], [[false, false, -81, true, true, false, true, true]], [[-56, 3, -82, 4, 10, 3, 7, 10]], [[false, -81, true, false, true, true, true, true]], [[2, 5, 1, 4, 3, 1, 7, 9, 10, 10]], [[2, 5, 1, 6, 4, 3, 6, 7, 5, 9, 10, 7]], [[2, 5, 1, 4, 3, 6, 7, 8, 9, 10, 3]], [[-81, false, false, false]], [[false, -81, false, true, true, true, true, true]], [[-56, 3, 10, -56, 3, 7]], [[false, -81, true, true, false, true, true, true, true]], [[2, 5, 1, 6, 3, 4, 3, 6, 7, 9, 10, 8]], [[false, false, -81, false, false, false, false, true, false]], [[true, false, true, false]], [[-82, true, false, false, false]], [[2, -82, 1, 10, 3, 3, 6, false, 7, 8, 9, 10, 7, 10]], [[2, 5, 1, 9, 4, 3, 3, 6, false, 2, 8, 9, 10, 7, 3]], [[2, 5, 3, 4, 3, 3, 6, false, 3, 8, 9, 10, 7]], [[false, -81, true, false, true, true, false, true, false, false, false]], [[2, 5, 1, 9, 4, 3, 3, 6, false, 2, 8, 9, 10, 3]], [[2, -82, 1, 10, 4, 3, 6, false, 7, 8, 9, 10, 7, 10]], [[false, false, true, false, false, true, true]], [[2, 5, 1, false, 3, 4, 3, 6, 7, 9, 10, 8]], [[2, 5, 1, 6, 5, 3, 6, 7, 9, 10, 8, 9]], [[2, 5, 1, false, 3, 4, 3, 6, 7, 9, 10, 8, 3]], [[false, true, false, -81, true, true, false, true, true]], [[5, 1, 4, 3, 6, 7, 8, 9, 11]], [[false, -81, false]], [[false, -81, true, false, true, true, true, false, false, -81]], [[false, -81, true, false, true, -81]], [[2, 5, 1, 9, 4, 3, 6, false, 2, 8, 9, 10, 7, 3]], [[true, -81, true, true, false, true, true, true, true]], [[true, false, -81, false, true, true]], [[2, 5, 1, 4, 3, 6, 7, 8, 9, 10, 3, 9]], [[false, -81, true, false, true, false, true, false]], [[false, false, true, false, true]], [[2, 1, 3, 3, 6, false, 7, 8, 9, 10, 7]], [[false, true, false, true, false, true, false]], [[2, 5, 1, 9, 6, 4, 3, 6, 7, 4, 9, 10, 7]], [[false, -81, true, false, true, false]], [[2, 1, 3, 3, 6, 8, false, 7, 8, 9, 10, 7]], [[5, 9, 6, 4, 3, 6, 7, 4, 9, 10, 7]], [[-80, false, true, false, true]], [[false, false, true, false, true, false]], [[5, 1, 4, 3, 6, 7, 8, 9, 11, 3]], [[false, -81, true, false, true, true, false, false]], [[5, 1, 4, 3, 6, 7, 8, 9, 10, 3, 9, 6]], [[5, 1, 4, 3, 6, 7, 5, 9, 10, 7, 8]], [[-81, true, false, true, true, false, -81, false]], [[-82, true, false, false]], [[5, 9, 6, 4, 3, 6, 7, 4, 9, 8, 7]], [[true, -81, true, true, false, true, true, true, true, true]], [[false, -81, false, true, true, true, true, true, true]], [[-56, 3, 7, 10, 11, 3, 7, 3]], [[true, false, -81, false, false, false, false, false, true, false]], [[2, 1, 3, 3, 6, false, 8, false, 7, 8, 9, 10, 7]], [[-82, 7, true, false, false, false]], [[10, 2, 5, 1, 4, 3, 3, 6, false, 7, 8, 5, 9, 10, 7]], [[false, true, false, true]], [[-81, true, false, false, false, -81]], [[-81, true, false, true, true, false, true, false, false, false]], [[10, 2, 5, 1, false, 3, 3, 6, false, 7, 8, 5, 9, 10, 7]], [[false, true, false, false]]], "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[False]]]", "starter_code": "from typing import List\ndef test_duplicate(arraynums: List[int]) -> bool:"}
{"task_id": "Mbpp/20", "requirement": "def is_woodall(x: int) -> bool:\"\"\"\nWrite a function to check if the given number is woodball or not.\"\"\"", "entry_point": "is_woodall", "canonical_solution": "\ndef is_woodall(x): \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False\n", "base_input": [[383], [254], [200]], "plus_input": [[123456789], [123456788], [123456790], [-71], [-43.858003490436445], [-29.61114685387961], [123456791], [true], [-26.959954047393943], [-36.19806730921029], [false], [123456792], [123456793], [-29.871125367901588], [-29.522652685174876], [-28.83173048562741], [-36.46340914477242], [-21.3952610510801], [-54.31098212859848], [-29.97825041127243], [-69.13149487461008], [-69.25331473635698], [-30.672425597981977], [-70], [-31.492472971818966], [-23.37512371019188], [-26.87584184061303], [-68.8018442158572], [-72], [-68.9582596167829], [-38.639304621786174], [-36.762574512172826], [-29.71114112102485], [-29.147181618179903], [-45.96312293984687], [-62.29011681998471], [-102.18510964864885], [-37.926042220673814], [-21.669838537346024], [-58.62219921432578], [-49.3200214561046], [-20.415110882873073], [-70.16424320159742], [-40.25945493003661], [-70.28083008878951], [-29.42426596564329], [-36.42835541123631], [-68.24706572951847], [-69.41855382525948], [-14.166058474029754], [-62.72457764448362], [-67.51407654646718], [-43.87699809663642], [-20.51986489168823], [-15.085356836638901], [-67.0567942382996], [-19.580182972529585], [-39.15390942077779], [-35.784031914737916], [-60.94797432645206], [-30.593131467080347], [-28.30344245006401], [-29.774227963592523], [88.42189273276318], [123456794], [-31.744787544004495], [-68.40811941759871], [-56.99871844685891], [92.98004923674453], [-29.38824771469962], [-28.112821077251972], [-59.66653455441657], [-28.408958976827417], [-34.246016042728264], [-37.459933039490544], [-69.08278583390873], [-31.39943780262713], [-27.08300242071865], [-32.23443641065063], [-16.35377974137643], [-34.49166282951802], [-80.04075575777426], [-15.990708397802807], [-37.17075988866512], [-12.266024087946377], [-42.995821326318705], [-36.571652101601906], [-36.40347054615233], [-70.43269469508628], [-28.726570985744708], [-14.941982364755784], [-26.521563448513206], [-52.0451679843239], [-41.16822642698813], [-27.427877745731756], [93.65722410276985], [-61.5774096007493], [-32.14674769877757], [-21.464380924877055], [-67.55449156821463], [91.99125730826226]], "input_output_examples": "[[[383]], [[True]]]", "starter_code": "def is_woodall(x: int) -> bool:"}
{"task_id": "Mbpp/56", "requirement": "def check(n: int) -> bool:\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\"\"\"", "entry_point": "check", "canonical_solution": "\ndef check(n):    \n    return n == 2 * int(str(n)[::-1]) - 1\n", "base_input": [[70], [23], [73]], "plus_input": [[0], [1], [9], [10], [20], [100], [1000], [11], [22], [33], [44], [55], [66], [77], [88], [99], [12], [21], [34], [43], [56], [65], [78], [87], [90], [8], [999], [45], [102], [42], [103], [79], [64], [41], [54], [72], [73], [23], [71], [13], [76], [98], [2], [86], [40], [57], [39], [7], [89], [63], [46], [70], [53], [67], [38], [101], [80], [74], [15], [91], [37], [35], [24], [32], [75], [19], [14], [104], [3], [82], [6], [25], [1001], [85], [81], [5], [92], [18], [4], [83], [52], [105], [31], [30], [93], [36], [1002], [97], [1003], [95], [26], [1004], [27], [84], [68], [51], [96], [998], [47], [62], [50], [58], [49], [1005], [69], [29], [997], [17], [94], [28], [59], [48], [16], [60], [61], [107], [1006], [106], [996], [108], [1007], [995], [1008], [109], [110]], "input_output_examples": "[[[70]], [[False]]]", "starter_code": "def check(n: int) -> bool:"}
{"task_id": "Mbpp/57", "requirement": "from typing import List\ndef find_Max_Num(arr: List[int]) -> int:\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\"\"\"", "entry_point": "find_Max_Num", "canonical_solution": "\ndef find_Max_Num(arr) : \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))\n", "base_input": [[[1, 2, 3]], [[4, 5, 6, 1]], [[1, 2, 3, 9]]], "plus_input": [[[9, 3, 2, 1]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[9, 9, 3, 2, 2, 1]], [[9, 9, 3, 2, 2, 1, 1]], [[9, 8, 7, 6, 5, 4, 3, 3, 2, 1]], [[9, 8, 8, 7, 7, 6, 6, 5, 3, 3, 2]], [[9, 3, 3, 2, 1]], [[9, 3, 3, 3, 2, 1]], [[9, 3, 3, 3, 2, 2, 1]], [[9, 8, 7, 6, 5, 4, 3, 2, 2, 1]], [[9, 3, 2, 2, 1]], [[9, 9, 9, 3, 2, 2, 1]], [[9, 4, 3, 2, 1]], [[9, 5, 3, 2, 1]], [[9, 3, 2, 2, 2, 1]], [[9, 9, 9, 3, 2, 2, 1, 1]], [[9, 5, 2, 1]], [[9, 3, 2, 2, 2, 2, 1]], [[9, 9, 3, 3, 3, 2, 2, 1]], [[9, 8, 7, 6, 5, 4, 4, 3, 2, 1]], [[9, 4, 3, 2, 2, 2, 1]], [[9, 9, 9, 3, 2, 2, 1, 1, 1, 1]], [[9, 8, 7, 6, 5, 4, 4, 4, 3, 2, 1]], [[9, 9, 3, 2, 1]], [[9, 9, 3, 2, 2, 2]], [[9, 9, 9, 3, 2, 2, 2]], [[9, 8, 7, 6, 5, 5, 4, 2, 1]], [[9, 5, 5, 2, 1]], [[9, 9, 3, 3, 3, 3, 2, 2, 1]], [[9, 4, 3, 2, 2, 1, 1]], [[9, 4, 3, 3, 2]], [[9, 9, 3, 2, 2, 1, 1, 1]], [[9, 9, 3, 2, 2]], [[9, 8, 7, 6, 5, 4, 3, 2, 2, 1]], [[9, 8, 7, 6, 5, 4, 3, 3, 1]], [[9, 9, 9, 3, 2, 2]], [[9, 9, 7, 2, 1]], [[9, 4, 4, 3, 2, 1]], [[9, 9, 7, 3, 2, 2]], [[9, 6, 3, 2, 1, 1]], [[9, 3, 3, 3, 2, 1, 1]], [[9, 4, 3, 2, 1, 1]], [[9, 6, 3, 2, 2, 1, 1]], [[8, 7, 7, 6, 5, 4, 3, 2, 2, 1]], [[6, 5, 3, 2, 1, 1]], [[9, 6, 3, 2, 2, 2, 1, 1]], [[9, 9, 3, 3, 3, 3, 2, 2, 1, 1]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[9, 9, 9, 3, 2, 2, 2, 2]], [[9, 9, 3, 3, 2]], [[9, 5, 3, 2, 2, 1]], [[9, 9, 5, 2, 1]], [[9, 9, 3, 3, 2, 1]], [[9, 5, 2, 2]], [[9, 9, 4, 4, 2, 2, 1]], [[9, 9, 1]], [[9, 3, 3, 2, 2, 2, 1]], [[9, 4, 3, 3, 2, 0]], [[9, 8, 7, 6, 6, 5, 3, 3, 2]], [[9, 5, 5, 2, 1, 1, 1, 1]], [[9, 9, 2, 0]], [[9, 8, 6, 5, 4, 3, 2, 1]], [[6, 5, 3, 2, 2, 1, 1]], [[9, 3, 2, 2, 2, 2, 1]], [[9, 9, 3, 2, 2, 1]], [[9, 9, 7, 7, 2, 1]], [[6, 5, 3, 3, 2, 2, 2, 1]], [[9, 3, 3, 2, 2, 1]], [[9, 3, 3, 2, 2, 2, 2, 1]], [[9, 3, 3, 2, 2, 2]], [[9, 9, 9, 3, 2, 2, 1, 1, 1]], [[9, 6, 5, 4, 3, 2, 1]], [[9, 6, 3, 2, 1, 1, 0]], [[9, 8, 7, 6, 5, 4, 4, 3, 3, 2, 1]], [[9, 3, 3, 2, 2, 1]], [[9, 9, 3, 3, 2, 2, 1, 1, 1]], [[9, 6, 3, 2, 2, 1, 1, 1]], [[9, 8, 7, 6, 5, 4, 4, 3, 2, 1, 1]], [[9, 4, 3, 3, 1, 1]], [[6, 4, 3, 2, 2, 1, 1, 1]], [[9, 5, 4, 3, 2, 2, 1, 1]], [[9, 8, 7, 5, 5, 4, 2, 1]], [[8, 7, 7, 6, 5, 4, 2, 2, 1]], [[9, 9, 3, 3, 2, 2, 1]], [[9, 9, 7, 3, 2, 2, 1, 1]], [[9, 9, 3, 2, 2, 1]], [[9, 9, 3, 3, 3, 3, 3, 2, 2, 1, 1]], [[9, 6, 3, 1, 1, 0]], [[9, 8, 7, 7, 6, 5, 4, 3, 2, 2, 1]], [[9, 9, 9, 3, 3, 2, 2]], [[9, 9, 3, 3, 3, 3, 3, 2, 2, 1, 1]], [[9, 5, 5, 2]], [[9, 5, 5, 2, 1]], [[9, 9, 9, 9, 3, 3, 2, 2, 1, 1, 1]], [[9, 3, 3, 2, 2, 2, 1]], [[9, 9, 9, 3, 2, 2, 2, 1, 1, 1]], [[9, 9, 3, 2, 2, 1]], [[9, 8, 7, 6, 5, 4, 3, 3, 3, 2, 1]], [[9, 9, 3, 3, 3, 3, 2, 1, 1]], [[8, 7, 7, 6, 5, 5, 4, 2, 2, 1]], [[9, 9, 3, 3, 2, 2, 1, 1, 1, 1]], [[9, 6, 5, 2, 1]]], "input_output_examples": "[[[[1, 2, 3]]], [[321]]]", "starter_code": "from typing import List\ndef find_Max_Num(arr: List[int]) -> int:"}
{"task_id": "Mbpp/58", "requirement": "def opposite_Signs(x: int, y: int) -> bool:\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\"\"\"", "entry_point": "opposite_Signs", "canonical_solution": "\ndef opposite_Signs(x,y): \n    return ((x ^ y) < 0) \n", "base_input": [[1, -2], [3, 2], [-10, -10], [-2, 2]], "plus_input": [[1000000000000, -1000000000000], [999999999999, -999999999999], [1000000000, -1000000000], [999999999, -999999999], [987654321, -987654321], [1000000000000, -1000000000], [-1000000000, 999999999], [-987654321, -987654321], [1000000000000, 987654321], [1000000000000, 987654322], [999999999, -1000000000000], [999999999, 999999999], [999999999999, 1000000000000], [-1000000000000, -987654321], [-1000000000000, -1000000000000], [-999999999999, -1000000000000], [987654321, 987654321], [1000000000, 999999999999], [1000000000, -1000000000000], [987654321, 987654322], [-987654319, -987654320], [-999999998, -999999999], [987654321, 1000000000000], [-1000000000, -1000000000], [1000000000000, 1000000000000], [1000000000001, -1000000000000], [1000000000000, -1000000000001], [999999999999, -987654319], [-1000000000, 987654321], [999999999999, 999999999999], [987654322, 987654322], [-987654321, -999999998], [-987654322, -987654321], [999999999, -987654321], [-1000000000000, -987654320], [-987654320, -987654320], [-999999999, -999999999], [-1000000000001, -1000000000000], [-1000000000000, 999999999], [-987654322, -1000000000000], [987654320, -1000000000000], [-987654322, -987654322], [-999999998, -1000000000000], [999999999999, -1000000000], [-987654320, -987654319], [987654321, -1000000000001], [987654321, 987654323], [1000000000000, -987654322], [-987654322, 1000000000000], [1000000000000, -1000000000002], [-1000000000000, 1000000000000], [-999999999999, -999999999999], [-1000000000002, -1000000000000], [1000000000001, -987654321], [-999999999999, -999999999998], [-999999998, -1000000000002], [-987654321, -987654322], [-987654319, -1000000000000], [1000000000000, 999999999999], [-999999998, -1000000000], [999999999999, 987654322], [-1000000000002, -1000000000002], [-1000000000000, 987654323], [1000000000000, 1000000000], [-1000000000000, -987654319], [987654321, -999999999999], [1000000000001, 987654321], [-1000000000000, 987654322], [-987654319, -1000000000002], [-987654319, -1000000000001], [999999999, -999999998], [-999999999, 987654321], [987654321, -987654322], [987654321, 1000000000], [-1000000000001, -1000000000001], [-999999999, -1000000000002], [-1000000000000, 999999998], [1000000000002, -987654319], [1000000000, 987654321], [999999998, -999999998], [-1000000001, 987654321], [999999999999, 1000000000002], [-1000000000003, -987654321], [-987654319, -987654319], [-999999998, -987654321], [-1000000001, -999999999999], [-1000000000004, -1000000000002], [1000000000002, -1000000000001], [-1000000000002, 987654322], [-987654319, -1000000000003], [-1000000000, 987654323], [-1000000000003, 1000000000000], [-1000000000, 999999999999], [-1000000001, -1000000000], [1000000000000, 1000000000001], [-1000000000003, -1000000000000], [1000000000000, -987654319], [987654320, 987654321], [-1000000000001, -1000000000002], [987654322, 987654323], [-999999997, -1000000000], [-987654319, 999999999999], [-999999997, 1000000000000], [-1000000000000, -987654322], [1000000000001, 1000000000002]], "input_output_examples": "[[[1, -2]], [[True]]]", "starter_code": "def opposite_Signs(x: int, y: int) -> bool:"}
{"task_id": "Mbpp/59", "requirement": "def is_octagonal(n: int) -> bool:\"\"\"\nWrite a function to find the nth octagonal number.\"\"\"", "entry_point": "is_octagonal", "canonical_solution": "\ndef is_octagonal(n): \n\treturn 3 * n * n - 2 * n \n", "base_input": [[5], [10], [15]], "plus_input": [[100], [99], [98], [96], [101], [97], [102], [22], [true], [23], [103], [104], [21], [95], [105], [20], [7], [9], [10], [8], [6], [5], [4], [106], [24], [19], [11], [94], [25], [3], [26], [93], [12], [108], [92], [42], [41], [43], [107], [2], [1], [13], [14], [38], [39], [53], [37], [52], [18], [54], [91], [55], [51], [50], [40], [90], [89], [56], [17], [76], [109], [110], [111], [27], [16], [44], [15], [57], [88], [77], [58], [75], [28], [113], [112], [87], [59], [78], [70], [71], [69], [86], [72], [45], [47], [46], [49], [29], [60], [36], [30], [85], [48], [73], [84], [114], [31], [35], [34], [79], [83]], "input_output_examples": "[[[5]], [[65]]]", "starter_code": "def is_octagonal(n: int) -> bool:"}
{"task_id": "Mbpp/61", "requirement": "from collections import defaultdict\ndef count_Substrings(s: str) -> int:\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\"\"\"", "entry_point": "count_Substrings", "canonical_solution": "\nfrom collections import defaultdict\ndef count_Substrings(s):\n    n, count, sum = len(s), 0, 0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - i - 1]\n        mp[sum - i - 1] += 1\n    return count\n", "base_input": [["112112"], ["111"], ["1101112"]], "plus_input": [["12233445566778899"], ["12345678987654321"], ["122338445566778899"], ["1252338445566778899"], ["122338412233344556677889945566778899"], ["12523384345566778899"], ["1252899122338445566778899"], ["1223384455667718899"], ["122334475566778899"], ["1258233843778899"], ["12781899"], ["122338412233334455667788994123456789876543215566778899"], ["122833445566778899"], ["1223318445566779"], ["1228334475566778899"], ["1223384122333344554667788994123456789876543215566778899"], ["122334455667788919"], ["12523383445566778899"], ["12528991223638445566778899"], ["12283344512233844556677188399566778899"], ["412233445566778899"], ["12233125823384377889984455667718899"], ["1122338445566778899252338445566778899"], ["12345678987"], ["1252899122363848899"], ["1223311223344556677889925823384377889984455667718899"], ["12523384345122338445566778899566778899"], ["122331122334455667788992582338437788998445566771881234567898799"], ["1223384122333344556677889941234567898765432155668778899"], ["1223381223344556677889941223333445566778899412345678987654321556677889122833445122338445566771883995667788999"], ["122122338412233334455667788994123456789876543215566778899338445566778899"], ["1252899122363848899122334475566778899"], ["122338412233344556677889945566778899122334475566778899"], ["1229833445566778841223344556677889999"], ["1223384122333445566677889945566778899"], ["122331122334455667798799"], ["412523384345122338445566778899566778899"], ["12233445566778"], ["125233843445122338445566778899566778899"], ["122233445566778899"], ["12233841223334245566677889945566778899"], ["12233112212523384455667788993344556677889925823384377889984455667718812233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889991234567898799"], ["12528991223318445566778899"], ["12233445566771272338412233334455667788994123456789876543215566778899"], ["41252338412233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889995122338445566778899566778899"], ["12233841223333445546677889941231456789876543215566778899"], ["812582338437788989"], ["12233841223333445546677889941231456788987654321556123456789876778899"], ["122335184455667125289912236384889912233447556677889979"], ["1228334455664778899"], ["812582312233445566778891938437788989"], ["122983341228334451223384455667718839956677889989999"], ["122983341212233841223334455667788994556677889928334451223384455667718839956677889989999"], ["125233843455667758899"], ["12233841223334122338122334455667788994122333344556677889941234567898765432155667788912283344512233844556677188399566778899966778899"], ["1221223384112233112233445566778899258233843778899844556677188992233334455667788994123456789876543215566778899338445566778899"], ["122338412233334455667788994123456789876543215566877899"], ["125233843455566778899"], ["81258233843177888989"], ["156748912233447556677889987"], ["1229833412122338412233314455667788994556677889928334451223384455667718839956677889989999"], ["12125289912233844556677889"], ["1223311223344556677889925823384377889984455667718821234567898799"], ["1223366778899"], ["122334455667712723384122333344556677889122122338411223311223344556677889925823384377889984455667718899223333445566778899412345678987654321556677889933844556677889994123456789876543215566778899"], ["122331256823384377889984455667718899"], ["122338412233344556677889945566778899125233843455667758899122334475566778899"], ["1212528991223455667788"], ["122334455667878899"], ["12523384344512781899122338445566778899566778899"], ["12582338431223384112233841223333445566778899412345678987654321556687788992233334455667788994123456789876543215566877899778899"], ["1125289912236384889925233843445127818919122338445566778899566778899"], ["1252338344556671252338434512233844556677889956677889978899"], ["12125289912677889"], ["12233841223334455666778899455667781223366778899899"], ["122334455667788299"], ["12298334455667784841223344556677889999"], ["122982334455667784841223344556677889999"], ["1567489122334125289912233844556677889947556677889987"], ["1223344556673788919"], ["41252338434512212345678987338445566778899566778899"], ["412523384345122123456789873384455667799"], ["4125233843451221234567898733844512528991223318445566778899566778899566778899"], ["125233893445566778899"], ["1125289912236384455667788992781899"], ["4125237384345122123456789873384455667799"], ["122338412233344556677889945566712233841223333445566778899412345678987654321556677889999"], ["125289912236384455667788899"], ["12283344512233844556612233445566787889966778899"], ["122667878899"], ["1122338445566778899252338"], ["124455667788919"], ["122983312233841223334122338122334455667788994122333344556677889941234567898765432155667788912283344512233844556677188399566778899966778899445566778841223344556677889999"], ["12528991223638445566778889"], ["125233812212233841122331122334455667788992582338437788998445566771889922333344556677889941234567898765432155667788993384455667788994344512233812781899445566778899566778899"], ["1223344556679788919"], ["1252338125233843455667788998899"], ["12233445556673788919"], ["122983341212233841223334455667788994556677889928334451223384455667718839912233844556677188997889989999"], ["12528991223638445566778125233893445566778899899"], ["12223312233112212523384455667788993344556677889925823384377889984455667718812233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889991234567898799445566778899"], ["41252399566778899"]], "input_output_examples": "[[['112112']], [[6]]]", "starter_code": "def count_Substrings(s: str) -> int:"}
{"task_id": "Mbpp/62", "requirement": "from typing import List\ndef smallest_num(xs: List[int]) -> int:\"\"\"\nWrite a python function to find smallest number in a list.\"\"\"", "entry_point": "smallest_num", "canonical_solution": "\ndef smallest_num(xs):\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)\n", "base_input": [[[10, 20, 1, 45, 99]], [[1, 2, 3]], [[45, 46, 50, 60]]], "plus_input": [[[10]], [[10, 10, 10]], [[10, 9, 10]], [[10, 9, 10, 9]], [[10, 10, 10, 10]], [[10, 9, 10, 10]], [[10, 10]], [[10, 10, 10, 9]], [[10, 10, 10, 9, 10]], [[10, 9, 10, 10, 10]], [[9, 10]], [[10, 9, 9, 10]], [[10, 10, 10, 10, 9]], [[10, 10, 10, 9, 10, 10]], [[9, 10, 10, 10, 10]], [[10, 9, 9]], [[10, 10, 9, 10, 9]], [[9, 10, 10]], [[11, 10, 9, 10, 9, 10]], [[10, 9, 10, 9, 9]], [[11, 10, 10]], [[9, 9, 10, 10]], [[10, 11, 10, 9]], [[10, 9, 9, 10, 9]], [[11, 10, 9, 10, 10, 10, 10, 10]], [[9, 10, 10, 9, 10]], [[9, 10, 10, 10, 9, 10, 10]], [[10, 9, 9, 9]], [[9, 10, 10, 10]], [[11, 10, 10, 9]], [[10, 10, 9, 10]], [[9, 9, 10]], [[9, 10, 9, 9, 10]], [[11, 11, 10, 10, 9]], [[10, 10, 8, 10, 9, 10]], [[8, 9, 10, 10, 9]], [[8, 10, 10]], [[10, 9, 8, 9, 10, 9]], [[8, 10]], [[10, 9, 9, 10, 9, 10]], [[11, 10, 10, 8, 9]], [[11, 11, 10, 10, 10, 9]], [[11, 11, 10, 10, 9, 10]], [[10, 10, 10, 11, 10, 10]], [[11]], [[12, 8, 11, 10]], [[10, 9, 10, 8, 10]], [[10, 10, 8, 10, 9, 10, 10]], [[9, 10, 9, 9, 10, 9, 9]], [[10, 9, 8, 9, 10]], [[11, 11, 10, 10, 10, 10]], [[9, 10, 10, 9, 8, 10]], [[8, 10, 9]], [[7, 8, 10]], [[8]], [[10, 10, 10, 8, 10, 9, 10, 10]], [[11, 10, 10, 10, 8, 10, 9, 10, 10]], [[11, 10, 10, 8]], [[11, 11, 10, 10, 11, 10, 9]], [[11, 11, 10, 10, 11, 10, 8]], [[10, 9, 8, 10]], [[10, 7, 9, 10]], [[11, 10, 10, 11, 9]], [[10, 10, 10, 11, 9, 10]], [[9, 10, 9, 9, 9, 10, 8, 9]], [[9, 10, 9, 9]], [[9, 10, 10, 9]], [[11, 8, 10, 10]], [[9, 10, 9, 8, 9, 10, 9]], [[11, 9, 10, 9, 10, 10, 9, 10]], [[11, 10, 10, 10, 8, 10, 11, 9, 10, 10]], [[11, 9, 9]], [[9, 9, 9, 10, 10, 9]], [[11, 9, 10, 10, 10, 9]], [[11, 10, 10, 11, 9, 10]], [[10, 10, 11, 10, 10]], [[9, 12, 10]], [[10, 9, 10, 10, 9]], [[11, 8, 10, 11, 10]], [[11, 10, 8, 9, 10]], [[12, 12, 8, 11, 10]], [[11, 10, 10, 10, 8, 10, 11, 8, 9, 10, 10, 10]], [[10, 9, 10, 9, 10]], [[11, 10, 7, 8]], [[7, 9, 10, 9, 10, 9, 10]], [[9, 10, 10, 10, 9, 10]], [[10, 10, 10, 9, 10, 10, 10, 10]], [[9, 10, 9, 9, 10, 9, 9, 10]], [[11, 11, 10, 10, 9, 9]], [[11, 9, 10]], [[9, 11, 9, 9, 10, 9, 9]], [[11, 11, 10, 10, 11, 10, 10]], [[10, 9, 9, 8, 9]], [[10, 9, 10, 10, 10, 10, 10]], [[11, 10, 9]], [[12, 12, 8, 11, 10, 12]], [[10, 9, 8, 9, 11, 10]], [[10, 7, 9]], [[10, 12, 9, 10, 9]], [[-115.40386094393058, 13.801990543244983, -90.4732800288427, -75.81228356592653]], [[7, 7, 8, 10]]], "input_output_examples": "[[[[10, 20, 1, 45, 99]]], [[1]]]", "starter_code": "from typing import List\ndef smallest_num(xs: List[int]) -> int:"}
{"task_id": "Mbpp/63", "requirement": "from typing import List\nfrom typing import Tuple\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\"\"\"", "entry_point": "max_difference", "canonical_solution": "\ndef max_difference(test_list):\n  return max(abs(a - b) for a, b in test_list)\n", "base_input": [[[[3, 5], [1, 7], [10, 3], [1, 2]]], [[[4, 6], [2, 17], [9, 13], [11, 12]]], [[[12, 35], [21, 27], [13, 23], [41, 22]]]], "plus_input": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]], [[[1, 2], [4, 5], [7, 8], [10, 11]]], [[[100, -100], [0, 200], [-50, 50], [300, 100]]], [[[0, 1], [2, 4], [3, 6], [5, 7]]], [[[-10, -5], [-3, 0], [2, 6], [9, 15]]], [[[1, 1000], [500, 700], [300, 900], [200, 800]]], [[[-3, -2], [-8, -7], [-5, -1], [-10, -9]]], [[[50000000, 100000000], [60000000, 110000000], [70000000, 120000000], [80000000, 130000000]]], [[[-10, 10], [-100, 100], [0, 1000], [-1000, 500]]], [[[100, -50], [-200, 200], [300, -300], [-400, 400]]], [[[1000000, -1000000], [999999, -999999], [-100000000, 100000000], [-5000000, 5000000]]], [[[1, -1], [100, -100], [1000, -1000], [10000, -10000]]], [[[0, -100], [100, -200], [1000, -300], [10000, -400]]], [[[1, 1], [2, 2], [3, 3], [4, 4]]], [[[5, 10], [15, 20], [25, 30], [35, 40]]], [[[100, 100], [200, 200], [300, 300], [400, 400]]], [[[500, 600], [700, 800], [900, 1000], [1100, 1200]]], [[[1000, 900], [800, 700], [600, 500], [400, 300]]], [[[10, 20], [30, 40], [50, 60], [70, 80]]], [[[101, 105], [200, 210], [300, 320], [400, 420]]], [[[1000, 1001], [2000, 2004], [3000, 3010], [4000, 4005]]], [[[500, 600], [700, 800], [1100, 1200]]], [[[999999, -999999], [70, 100000000], [-5000000, 5000000]]], [[[-10, -5], [-3, 0], [9, 15]]], [[[1, -1], [100, -100], [10000, -10000]]], [[[-10, -5], [-3, 70], [-3, 0], [-3, 0]]], [[[100, -100], [7, 200], [-50, 50], [300, 100]]], [[[100, -100], [0, 200], [-50, 50], [300, 100], [100, -100]]], [[[1, -1], [100, -100], [1000, -1000], [30, -1], [10000, -10000]]], [[[1000, 15], [-10, -5], [-3, 0], [2, 6], [9, 15]]], [[[0, -100], [100, -200], [1000, -300], [10000, -400], [10000, -400]]], [[[-200, 200], [100, -50], [-200, 200], [300, -300], [-400, 400], [100, -50]]], [[[-10, -5], [9, 15]]], [[[-10, -5], [2, 6], [9, 15]]], [[[-10, 5000000], [-3, 0], [2, 6], [9, 15]]], [[[999999, -999999], [999999, -999999], [70, 100000000], [-5000000, 5000000]]], [[[5, 10], [15, 20], [25, 30], [35, 40], [5, 10]]], [[[500, 600], [500, 80], [700, 800], [1100, 1200]]], [[[1, 2], [4, 5], [7, 8], [10, 11], [10, 11]]], [[[100, -50], [-200, 200], [300, -100000000], [-400, 400]]], [[[-300, -1], [100, -100], [10000, -10000]]], [[[-10, -5], [-3, 70], [-3, 0], [-3, 0], [-3, 0]]], [[[101, 105], [300, 320], [400, 420]]], [[[10, 20], [30, 40], [50, 60], [70, 80], [30, 40]]], [[[100, 100], [200, 200], [300, 300], [300, 300], [400, 400]]], [[[100, -100], [7, 200], [-50, 50], [300, 100], [100, -100]]], [[[100, -50], [-200, 200], [300, -100000000], [-400, 400], [300, -100000000]]], [[[1, 2], [4, 5], [7, 9], [10, 11]]], [[[-10, -5], [2, 6], [3010, 15], [9, 15]]], [[[300, 320], [400, 420]]], [[[-3, -2], [-8, -7], [-5, -1], [-8, -7], [-5, -1]]], [[[1, -1], [10000, 4], [100, -100], [30, -1], [10000, -10000]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400]]], [[[2000, 2004], [2004, 2004], [3000, 3010], [4000, 4005]]], [[[100, 100], [200, 200], [400, 400]]], [[[50000000, 100000000], [70000000, 120000000], [80000000, 130000000]]], [[[1, 2], [4, 5], [10, 11], [4, 5]]], [[[1000, 900], [400, 100000000], [800, 700], [600, 500], [400, 300]]], [[[0, 1], [2, 4], [3, 6], [5, 7], [5, 7]]], [[[-10, 5000000], [-3, 0], [2, 6]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400], [200, 200]]], [[[4005, 100000000], [999999, -999999], [70, 100000000], [-5000000, 5000000]]], [[[1000, 15], [-10, -5], [2, 6], [9, 15]]], [[[999999, -999999], [69, 100000000], [-5000000, 5000000]]], [[[100, -100], [7, 200], [-50, 50], [300, 100], [100, -100], [100, -100]]], [[[4, 9], [1, 1], [2, 2], [3, 3], [4, 4]]], [[[999999, 1000], [70, 100000000], [-5000000, 5000000]]], [[[50000000, 100000000], [60000000, 110000000], [70000000, 120000000], [80000000, 130000000], [50000000, 100000000]]], [[[10, 20], [30, 40], [50, 60], [1, 80]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400], [-3, 100], [200, 200]]], [[[100, 100], [300, 300], [400, 400]]], [[[500, 600], [700, 800], [900, 1000], [1100, 1200], [500, 600]]], [[[0, -100], [100, -200], [1000, -300], [10000, -400], [0, -100]]], [[[4, 5], [7, 8], [10, 11]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400], [100, 100]]], [[[100, -100], [7, 200], [-50, 50], [300, 100], [7, 200]]], [[[2000, 2004], [2004, 2004], [3000, 3010], [4000, 4005], [2004, 2004]]], [[[15, 20], [35, 40]]], [[[-10, 5000000], [-3, 0], [2, 6], [2, 6], [2, 6]]], [[[1000, 1001], [2000, 2004], [3000, 3010], [4000, 4005], [4000, 4005]]], [[[4, 9], [1, 1], [2, 2], [3, 3], [4, 4], [4, 4], [3, 3]]], [[[1, 1000], [500, 700], [300, 900], [200, 800], [300, 900]]], [[[500, 600], [500, 80], [700, 800], [1100, -8]]], [[[-8, -7], [-8, -7], [-5, -1]]], [[[1, -1], [10000, 4], [100, -100], [30, -1], [10000, -10000], [10000, -10000]]], [[[4, 9], [1, 1], [2, 2], [3, 3], [4, 4], [4, 4], [3, 3], [1, 1]]], [[[200, 200], [300, 300], [400, 400], [400, 400], [400, 400], [400, 400]]], [[[1000000, -1000000], [999999, -999999], [-100000000, 100000000]]], [[[1, 1], [3, 3], [4, 4], [3, 3]]], [[[500, 600], [700, 800], [900, 1000], [1100, 1200], [700, 800], [500, 600]]], [[[-10, 10], [-100, 100], [0, 1000], [-1000, 500], [-100, 100]]], [[[100, 15], [100, -100], [-50, 50], [300, 100], [100, -100], [-50, 50]]], [[[4, 9], [1, 1], [2, 2], [3, 3], [4, 4], [4, 4], [3, 3], [1, 1], [1, 1], [4, 4]]], [[[7, 8], [10, 11]]], [[[10, 20], [30, 40], [50, 60], [70, 80], [50, 60]]], [[[1000, 900], [400, 100000000], [800, 700], [400, 300]]], [[[1000, 15], [-10, -5], [-3, 0], [9, 15]]], [[[500, 600], [700, 800], [900, 1000], [1100, 1200], [700, 800], [500, 600], [900, 1000]]], [[[1, 2], [4, 5], [7, 9], [10, 11], [10, 11]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400], [-3, 100], [200, 200], [200, 200]]], [[[-201, 200], [100, -50], [-200, 200], [300, -300], [-400, 400], [100, -50], [100, -50]]], [[[3, 6], [1000, 15], [-10, -5], [2, 6], [9, 15]]], [[[-10, -5], [2, 6], [3010, 15], [9, 15], [-10, -5]]], [[[50000000, 100000000], [60000000, 110000000], [70000000, 120000000], [80000000, 130000000], [50000000, 100000000], [50000000, 100000000]]], [[[4, 9], [1, 1], [2, 2], [4, 4], [4, 4], [3, 3], [4, 4], [1, 1]]], [[[50000000, 100000000], [60000000, 110000000], [80000000, 130000000]]], [[[1, 1], [3, 3], [4, 4], [3, 3], [4, 4]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [100, 100], [300, 300], [400, 400]]], [[[4, 5], [7, 8], [10, 11], [4, 5]]], [[[1000000, -1000000], [999999, -999999], [-100000000, 100000000], [-300, 5000000]]], [[[1000000, -1000000], [999999, -999999], [-100000000, 100000000], [-5000000, 5000000], [-100000000, 100000000]]], [[[4, 9], [1, 1], [2, 2], [3, 3], [4, 4], [1, 1]]], [[[1000, -7], [-3, -2], [-8, -7], [-5, -1], [-8, -7], [-5, -1]]], [[[200, 200], [300, 300], [400, 400], [100, 100], [300, 300], [400, 400]]], [[[1000000, 999999], [10000000, 9999999], [100000000, 99999999]]], [[[1, -1], [10000, 4], [10000, 3], [100, -100], [30, -1], [10000, -10000], [10000, -10000]]], [[[1000000, -1000000], [999999, -999999], [-100000000, 100000000], [999999, -999999]]], [[[99, -50], [-200, 200], [300, -100000000], [-400, 400]]], [[[1, -1], [10000, 4], [100, -100], [10000, -10000], [10000, -10000]]], [[[100, -100], [300, 100]]], [[[100, 100], [200, 200], [300, 300], [400, 400], [400, 400], [100, 100], [300, 300]]]], "input_output_examples": "[[[(3, 5), (1, 7), (10, 3), (1, 2)]], [[7]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:"}
{"task_id": "Mbpp/64", "requirement": "from typing import List\nfrom typing import Tuple\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\"\"\"", "entry_point": "subject_marks", "canonical_solution": "\ndef subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks\n", "base_input": [[[["English", 88], ["Science", 90], ["Maths", 97], ["Social sciences", 82]]], [[["Telugu", 49], ["Hindhi", 54], ["Social", 33]]], [[["Physics", 96], ["Chemistry", 97], ["Biology", 45]]]], "plus_input": [[[]], [[["English", 88]]], [[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82], ["Maths", 85], ["Science", 88], ["Computer Science", 91]]], [[["Social sciences", 82], ["English", 88], ["Science", 90], ["Maths", 90]]], [[["Maths", 82], ["Social sciences", 82], ["English", 88], ["Science", 90], ["Computer Science", 90]]], [[["Biology", 45], ["Maths", 85], ["Science", 88], ["Physics", 96], ["Physics", 96], ["Chemistry", 97]]], [[["Physics", 90], ["Chemistry", 90], ["Biology", 90]]], [[["Physics", -76], ["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["Chemistry", 92]]], [[["Geography", 70], ["History", 77], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96]]], [[["Chemistry", 68], ["Biology", 72], ["History", 75], ["Physics", 78], ["Science", 79], ["Geography", 80], ["English", 82], ["Maths", 84], ["Social sciences", 86], ["Computer Science", 88]]], [[["Art", 70], ["History", 78], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94], ["Biology", 95]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96], ["Physics", 96]]], [[["Chemistry", -9], ["Physics", -3], ["Geography", 65], ["History", 73], ["Biology", 77], ["English", 81], ["Science", 82], ["Computer Science", 88], ["Maths", 94]]], [[["Computer Science", 75], ["English", 77], ["Physics", 78], ["Economics", 79], ["Chemistry", 80], ["Maths", 80], ["Science", 84], ["Geography", 85], ["Biology", 88], ["History", 92]]], [[["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96], ["Maths", 98]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Chemistry", 92]]], [[["Biology", 72], ["History", 75], ["Physics", 78], ["Science", 79], ["Geography", 80], ["English", 82], ["Social sciences", 86], ["Computer Science", 88]]], [[["Social sciences", 82], ["Computer Science", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["Computer Science", 90], ["Physics", 93], ["Maths", 96]]], [[["Art", 70], ["History", 78], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94, "Computer Science"], ["Biology", 95]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Maths", 85], ["Chemistry", 92]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82], ["Maths", 85], ["Science", 88], ["Computer Science", 91, 91], ["Computer Science", 91], ["English", 95]]], [[["Geography", 70], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82], ["Maths", 85, 85], ["Science", 88], ["Computer Science", 91]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90], ["Physics", 93], ["Maths", 96]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Maths", 96], ["Physics", 96]]], [[["Geography", 70], ["History", 77], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["Chemistry", 94], ["English", 95], ["Physics", 98]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["Computer Science", 90], ["Physics", 93], ["Physics", 93]]], [[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97], ["Maths", 97]]], [[["Geography", 78], ["Geography", 78, "Geography"], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96]]], [[["Social sciences", 82], ["English", 88], ["Mathas", 90], ["Science", 90], ["Maths", 90]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["Physics", 98]]], [[["Social sciences", 82], ["English", 88], ["Mathas", 90], ["Science", 90], ["Maths", 90], ["Science", 92]]], [[["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95], ["History", 96]]], [[["Art", 70], ["History", 78], ["Chemistry", 81], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94], ["Biology", 95]]], [[["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95], ["History", 96]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82], ["Maths", 85, 85], ["Computer Science", 91]]], [[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["Maths", 97], ["Maths", 97]]], [[["Maths", 82], ["Social sciences", 82], ["Science", 90], ["Computer Science", 90]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Maths", 85], ["ChemistrMathasy", 92], ["Chemistry", 92]]], [[["Social sciences", 82], ["English", 88], ["English", 88], ["Mathas", 90], ["Science", 90], ["Maths", 90]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 85, "Biology"], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Physics", -76], ["Computer Science", 82], ["Maths", 85], ["Chemistry", 92]]], [[["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Biology", 92, "Biology"], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Social sciences", 82], ["Computer Science", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90, 90], ["Physics", 93], ["Maths", 96]]], [[["Maths", 85], ["Science", 88], ["Physics", 96], ["Physics", 96], ["Chemistry", 97]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Chemistry", 92], ["Chemistry", 92]]], [[["Chemistry", -9], ["Physics", -3], ["Geography", 65], ["History", 73], ["Biology", 77], ["Biology", 77], ["English", 81], ["Computer Science", 88], ["Maths", 94]]], [[["Geography", 70], ["Geography", 70], ["Geography", 70, 70], ["History", 77], ["Biology", 85, "Biology"], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Art", 70], ["History", 78], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Geography", 92], ["Computer Science", 94, "Computer Science"], ["Biology", 95]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82, "Chemistry"], ["Chemistry", 82], ["Maths", 85], ["Science", 88], ["Computer Science", 91, 91], ["Computer Science", 91], ["English", 95]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90, 90], ["Maths", 92], ["Physics", 93], ["Maths", 96]]], [[["Geography", 78], ["Biology", 81, "Biology"], ["Biology", 81], ["Chemistry", 85], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90, 90], ["Maths", 92], ["Physics", 93], ["Maths", 96]]], [[["Geography", 78], ["Geography", 78, "Geography"], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96]]], [[["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95]]], [[["English", 87], ["English", 87, "English"], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Biology", 92, "Biology"], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Physics", 76], ["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Geography", 78], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 96]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 85, "Biology"], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Social sciences", 82], ["Social sciences", 82], ["English", 88], ["Science", 90], ["Maths", 90]]], [[["Social sciences", 82], ["Mathas", 90], ["Science", 90], ["Maths", 90]]], [[["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95]]], [[["Geography", 78], ["Chemistry", 85], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90, 90], ["Physics", 93], ["Maths", 96]]], [[["Art", 70], ["History", 78], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94, "Computoer Science", "Computer Science"], ["Computer Science", 94, "Computoer Science", "Computer Science"], ["Biology", 95]]], [[["Geography", 78], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96], ["Physics", 96]]], [[["Physics", 76], ["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Maths", 85], ["ChemistrMathasy", 92], ["Chemistry", 92], ["Chemistry", 92]]], [[["Biology", 45], ["Maths", 85], ["Physics", 96], ["Physics", 96], ["Physics", 96], ["Chemistry", 97]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 85, "Biology"], ["Maths", 88], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Biology", 45], ["Maths", 85], ["Science", 88], ["Physics", 96], ["Physics", 96]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Computer Science", 90], ["Physics", 93], ["Physics", 93], ["Physics", 93]]], [[["Science", 45], ["Science", 45], ["Social sciences", 82], ["Computer Science", 82], ["Computer Science", 82], ["English", 88], ["Science", 90], ["Maths", 97]]], [[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["Maths", 97]]], [[["Art", 70], ["History", 78], ["Chemistry", 81], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 89], ["Geography", 92], ["Computer Science", 94], ["Biology", 95]]], [[["Social sciences", 82], ["Computer Science", 82], ["English", 88], ["English", 88], ["Science", 90], ["Maths", 97]]], [[["Art", 70], ["History", 75], ["History", 78], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94, "Computer Science"], ["Biology", 95]]], [[["English", 87], ["English", 87, "English"], ["Physics", 90], ["Geography", 91], ["Geography", 91], ["Biology", 92], ["Biology", 92, "Biology"], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Geography", 70], ["Geography", 70], ["Geography", 70, 70], ["History", 77], ["Biology", 85, "Biology"], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["Computer Science", 92], ["English", 95, "English"], ["Physics", 98]]], [[["Economics", 89], ["Physics", 90], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["History", 96]]], [[["Geography", 70], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Biology", 72], ["Biology", 72, "Biology"], ["History", 75], ["Physics", 78], ["Science", 79], ["Geography", 80], ["English", 82], ["Social sciences", 86], ["Computer Science", 88]]], [[["Biology", -45], ["Computer Science", 82], ["Maths", 85], ["MaMusicths", 85], ["Maths", 85], ["Maths", 85], ["Chemistry", 92]]], [[["English", 87], ["English", 87, "ChemistrMathasy"], ["Physics", 90], ["Geography", 91], ["Geography", 91], ["Biology", 92], ["Biology", 92, "Biology"], ["Science", 93], ["Computer Science", 94], ["Chemistry", 95], ["History", 96]]], [[["Geography", 70], ["English", 70], ["History", 77], ["Biology", 85], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["Chemistry", 94], ["English", 95], ["Physics", 98]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Maths", 96], ["Physics", 96]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82, "Chemistry"], ["Chemistry", 82], ["Maths", 85], ["Science", 88], ["Computer Science", 91, 91], ["Computer Science", 91]]], [[["Maths", 82], ["Social sciences", 82], ["English", 88], ["English", 88], ["Science", 90], ["Computer Science", 90]]], [[["Physics", 90], ["Biology", 90]]], [[["Social sciences", 82], ["Computer Science", 82], ["Computer Science", 82], ["Social sciences", 82], ["English", 88], ["Maths", 97]]], [[["Physics", -76, "Physics"], ["Computer Science", 82], ["Maths", 85]]], [[["Geography", 78], ["Biology", 81], ["History", 88], ["History", 88], ["History", 88], ["Computer Science", 90], ["Physics", 93, 93], ["Physics", 93], ["Maths", 96]]], [[["Economics", 89], ["Physics", 90], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95]]], [[["Geography", 70], ["Geography", 70, 70], ["History", 77], ["Biology", 85, "Biology"], ["Chemistry", 90], ["Computer Science", 92], ["Computer Science", 92], ["English", 95, "English"], ["Physics", 98], ["Physics", 98]]], [[["Maths", 82], ["Social sciences", 82], ["Science", 90]]], [[["Computer Science", 65], ["Biology", 72], ["History", 75], ["Physics", 78], ["Science", 79], ["Geography", 80], ["nEnglish", 82], ["English", 82], ["Social sciences", 86]]], [[["Geography", 78], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["English", 92, 92], ["Physics", 93], ["Physics", 93], ["Maths", 96], ["Physics", 96]]], [[["Geography", 78], ["Geography", 78, "Geography"], ["Biology", 81], ["Chemistry", 85], ["Science", 87], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Physics", 93], ["Maths", 96]]], [[["Art", 70], ["Chemistry", 80], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90, 90], ["Geography", 92], ["Computer Science", 94, "Computoer Science", "Computer Science"], ["Computer Science", 94, "Computoer Science", "Computer Science"], ["Biology", 95]]], [[["Economics", 89, 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Computer Science", 94, "Computer Science"], ["Chemistry", 95], ["History", 96]]], [[["Social sciences", 72], ["Computer Science", 82], ["English", 88], ["Maths", 97]]], [[["Maths", 82], ["Social sciences", 82], ["English", 88], ["English", 88], ["English", 88], ["Science", 90], ["Computer Science", 90]]], [[["Physics", 76], ["English", 87], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Science", 93], ["Computer Science", 94], ["History", 96]]], [[["Geography", 70], ["Geography", 70, 70], ["History", 77], ["Biology", 85, "Biology"], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["English", 95], ["Physics", 98]]], [[["Geography", 78], ["Science", 87], ["History", 88], ["English", 92], ["Physics", 93], ["Maths", 96], ["Physics", 96]]], [[["Physics", 76], ["Economics", 89], ["Physics", 90], ["Geography", 91], ["Biology", 92], ["Science", 93], ["Science", 93, "Science"], ["Computer Science", 94], ["Physics", 95], ["Chemistry", 95], ["History", 96]]], [[["Geography", 70], ["Geography", 70], ["Geography", 70, 70], ["History", 77], ["Maths", 88], ["Chemistry", 90], ["Computer Science", 92], ["Computer Science", 92], ["English", 95, "English"], ["Physics", 98]]], [[["English", 72], ["Physics", 76], ["History", 78], ["Geography", 80], ["Chemistry", 82, "Chemistry"], ["Chemistry", 82], ["Science", 88], ["Computer Science", 91, 91], ["Computer Science", 91]]], [[["Geography", 78], ["Chemistry", 85], ["Science", 87], ["History", 88], ["Computer Science", 90], ["English", 92], ["Physics", 93], ["Maths", 96]]], [[["Geography", 70], ["Geography", 70], ["History", 77], ["Biology", 84, "Biology"], ["Maths", 88], ["Computer Science", 92], ["English", 95, "English"], ["Physics", 98], ["Physics", 98]]], [[["Social sciences", 82], ["Social sciences", 82, 82], ["Computer Science", 82], ["English", 88], ["Maths", 97], ["Maths", 97]]], [[["Art", 70], ["History", 78], ["Chemistry", 81], ["Music", 82], ["Maths", 85], ["English", 87], ["Physics", 90], ["Geography", 92], ["Computer Science", 94], ["BiolComputoer Scienceogy", 95], ["Biology", 95]]], [[["Maths", 82], ["Social sciences", 82], ["Maths", 82], ["Science", 90]]]], "input_output_examples": "[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]], [[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:"}
{"task_id": "Mbpp/65", "requirement": "from typing import List\nfrom typing import Union\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:\"\"\"\nWrite a function to flatten a list and sum all of its elements.\"\"\"", "entry_point": "recursive_list_sum", "canonical_solution": "\ndef recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total\n", "base_input": [[[1, 2, [3, 4], [5, 6]]], [[7, 10, [15, 14], [19, 41]]], [[10, 20, [30, 40], [50, 60]]]], "plus_input": [[[1, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]]]], [[]], [[[], []]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[[[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]]]]]], [[[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]]]], [[[[[[1], [2]], [3]], [[4], [5]]], [[[[6], [7]], [8]], [[9], [10]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[[[[10, 11], [12, 13]], [[14, 15], [16, 17]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]]]], [[[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[22, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[1, [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[1, [1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1]], [[17, 17]], [[1, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]], 1]], [[2, [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]]], [21, [22, [23]]]]], [[[-63.05154180027262, -88.35789773161446, -67.78402311731799, -68.79245553684203, -70.3295437860673, -92.8058245239063, -93.56332101454589, -79.03594591232238, 26.92003787542201], [], []]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21], [21], [21]]], [[0, [1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[5, 1, [1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[[[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]], [[10, 11], [12, 13]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]]]], [[[21, [22, [23]], 21], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21]]], [[1]], [[[[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]], [[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]]]], [[[[[10, 11], [12, 13]], [[16, 17]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[10, 11], [12, 13]], [[16, 17]]]]], [[[[[22, 23], [24, 25]]], [[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[22, 23], [24, 25]]]]], [[[22, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1, [22, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]]], [[[[[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11], [11]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11], [11]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]], [[10, 11], [12, 13]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]], [[10, 11], [12, 13]]]]], [[[], [], [], []]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 20, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 20, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[], [], [-63.05154180027262, -88.35789773161446, -67.78402311731799, -68.79245553684203, -70.3295437860673, -92.8058245239063, -93.56332101454589, -79.03594591232238, 26.92003787542201, -67.78402311731799]]], [[[[[10, 11], [12, 13]], [[16, 17]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]], [[[10, 11], [12, 13]], [[16, 17]]], [[[10, 11], [12, 13]], [[16, 17]]], [[[18, 19], [20, 21]], [[22, 23], [24, 25]]]]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]]], [[[[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]]], [[1, [1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]], 1]], [[0, 1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[1, 0, 2, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]]]], [[0, 1, 28, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[[21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[[4], [5], [5]], [[[1], [2]], [25, 3], [25, 3]], [[4], [5], [5]]], [[[4], [5], [5]], [[[1], [2]], [25, 3], [25, 3]], [[4], [5], [5]]], [[[[6], [7]], [8]], [[9], [10]]]]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[18, 19], [20, 21]], [[24, 22, 23], [24, 22, 23], [24, 25]], [[24, 22, 23], [24, 22, 23], [24, 25]]], [[[18, 19], [20, 21]], [[24, 22, 23], [24, 22, 23], [24, 25]], [[24, 22, 23], [24, 22, 23], [24, 25]]]]], [[[[[[[5, 6, 5], [[1, 2], [3, 4]], [5, 6, 5]], [7, [8, 9]]], [[[5, 6, 5], [[1, 2], [3, 4]], [5, 6, 5]], [7, [8, 9]]]]]]], [[12, 20, 16, 97, 4, 28, -13]], [[18, [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [[3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[12, 20, 16, 97, 4, 28, -13, -13]], [[[[[10, 11], [12, 13]], [[14, 15], [16, 17]], [[10, 11], [12, 13]]], [[[18, 18], [18, 18], [20, 21]], [[18, 18], [18, 18], [20, 21]], [[22, 23], [24, 25]]], [[[18, 18], [18, 18], [20, 21]], [[18, 18], [18, 18], [20, 21]], [[22, 23], [24, 25]]]]], [[[[[[1], [2]], [3]], [[4], [5]]], [[[[6], [7]], [8]], [[9], [10]]], [[[[6], [7]], [8]], [[9], [10]]]]], [[[[[[1], [2]], [3]], [[-13], [-13], [5]]], [[[[1], [2]], [3]], [[-13], [-13], [5]]], [[[[6], [7]], [8]], [[9], [10]]]]], [[[[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21]]], [[[[[10, 11], [12, 13]], [[14, 15], [16, 17]]]]], [[[[[[6], [7]], [8]], [[9], [10]]], [[[[6], [7]], [8]], [[9], [10]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 2, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 2, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 2, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[[[[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]], [[[[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[1, 2, 3], [4, 5, 6], [1, 2, 3]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]]]], [[[1, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]], 2, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[[[[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]], [12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]]], [[[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]], [12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]]], [[[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]], [12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[2, 27, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], 1, [2, 27, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[[1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]], 1, [1, 2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]], [[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 20, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[[1, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]], 2, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]], [1, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]], 2, [11, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21]]]]]]]]]]]]]]]]]]]]]], [[[[[5, 6]], [[5, 6]], [7, [8, 9]]], [[[5, 6]], [[5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]], [[10, 11], [12, 13]]], [[[18, 19], [20, 21, 20]], [[18, 19], [20, 21, 20]], [[22, 23], [24, 25]]]]], [[[[[[1], [2]], [3]], [[-13], [5]]], [[[[1], [2]], [3]], [[-13], [5]]], [[[[1], [2]], [3]], [[-13], [5]]], [[[9], [10]]]]], [[1, 1]], [[12, 20, 16, 97, 4, 28, -13, 12]], [[[21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9, 8], [7, 8, 9, 8], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9, 8], [7, 8, 9, 8], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]]]]], [[[2, 27, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], 1, [2, 27, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [2, 27, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [22, 21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [22, 21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [12, 13]], [[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [12, 13]], [[12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [12, 13]], [[1, 2], [[3, 4], [[5, 6], [[7, 8], [[9, 10], 11]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[[22, 21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [22, 21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1], [11], [11]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1], [11], [11]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1], [11], [11]], [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[22, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1, [22, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], [22, 2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [[12, 20, 16, 97, 3, 28, -13, -13]], [[[[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]], [[[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[19, 20, 21], [22, 23, 24]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [[[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], 21, [[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], 21, [[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], 21, [[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]], 21, [[23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]], [[[[1, 2]], [[1, 2]], [[12, 20, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]], 1, 1]], [[[2, 26, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], 0, [2, 26, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [2, 26, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [2, 26, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[22]], [[12, 20, 16, 97, 4, 28, -13, 12, 12]], [[0, [2, [3, [4, [5, [6, [7, [8, 9]]]]]]], 1, 1]], [[12, 20, 18, 16, 97, 4, 28, -13, 12]], [[[[[[1, 2], [3, 4]], [5, 6]], [7, [8, 9]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]], [[[10, 11], [12, 13]], [[14, 15], [16, 17]]]]], [[[2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]], 1]], [[[[[[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]]], [[[[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]], [[13, 14, 15], [16, 17, 18]]]]]], [[1, 11, 1]], [[[[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21], [21, [22, [23]], 21]]], [[[22, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [22, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]], [[22, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[1, 23, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]], [[[[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]], [[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]], [[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]]], [21, [22, [23]]], [[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]], [[[[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]], [[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]], [[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]], [[9, 12, 13], [[14, 15], [[16, 17], [[18, 19], [20, 21]]]], [9, 12, 13]]]], [[[[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]], [1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [21, [22, [23]], 21], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]], [1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]], [21, [22, [23]], 21], [[1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]], [1, 0, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]]]], [[[[1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]], [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]], [21, [22, [23]], 21], [21, [22, [23]], 21]]], [[[[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]], [[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]], [[[[13, 14, 15], [16, 17, 18]]], [[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]], [[[13, 14, 15], [16, 17, 18]]]]]], [[22, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]], 23, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]]], "input_output_examples": "[[[[1, 2, [3, 4], [5, 6]]]], [[21]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef recursive_list_sum(data_list: List[Union[int, List[int]]]) -> int:"}
{"task_id": "Mbpp/66", "requirement": "from typing import List\ndef pos_count(l: List[int]) -> int:\"\"\"\nWrite a python function to count the number of positive numbers in a list.\"\"\"", "entry_point": "pos_count", "canonical_solution": "\ndef pos_count(l):\n  return len([x for x in l if x > 0])\n", "base_input": [[[1, -2, 3, -4]], [[3, 4, 5, -1]], [[1, 2, 3, 4]]], "plus_input": [[[0, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10]], [[]], [[1]], [[-1, -2, -3, 0, 1, 2, 3, 3, 2, 1, 0, -1]], [[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[10, 20, 30, 40]], [[0, 1]], [[-5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]], [[-1, -2, -3, 0, 1, 2, 1, 3, 2, 1, 0, -1]], [[10, 20, 10, 30, 40]], [[-5, -4, -3, -2, -1, -1, 1, 2, 4, 5]], [[-2, -3, 0, 1, 2, 1, 3, 2, 1, 0, -1]], [[0, -1, 2, -3, 4, -5, 6, 8, -9, 10]], [[10, 20, -9, 40]], [[-5, -4, 3, -2, -1, 0, 1, 2, 3, 4, 5]], [[-1, -2, -3, 0, 1, 2, 1, 3, -1, 2, 1, 0, -1]], [[0, 1, 1]], [[0, -1, 2, -3, 4, -5, 6, 6, -7, 8, -9, 10]], [[2, 3, 4, 5]], [[-5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 4, 5]], [[-5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 0]], [[-2, -3, 0, 1, 2, 1, 3, 2, 1, -4, 0, -1]], [[10, -9, 40]], [[-5, -4, -3, -2, -1, 1, 2, 4, 5, 5]], [[10, 19, 30]], [[-1, -2, -3, 0, 1, 2, 1, 3, 1, 0, -1]], [[10, 30, 40, 10]], [[0, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4]], [[0, -1, 2, -2, -3, 4, -5, 6, 8, -9, 10, 4]], [[0, -1, 2, 4, -5, 6, 8, -9, 10, 4]], [[10, -2, -9, 40]], [[0, -1, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4, 4]], [[2, 3, 4, 2, 4]], [[3, 2, 3, 4, 2, 4, 2]], [[0, -1, 2, -3, 4, -5, 6, -7, 8, 10]], [[0, -1, 2, -3, 4, -5, 6, 8, -10, -9, 10, 4]], [[3, 2, 3, 4, 2, 5, 2]], [[-4, -2, -1, 1, 2, 4, 5, 5]], [[-1, -2, -3, 0, 1, 2, 10, 3, 3, 2, 1, 0, -1, 2]], [[-5, 3, -4, 3, -2, -1, 0, 1, 2, 3, -9, 4, 5]], [[-2, -2, 0, 1, 2, 1, 3, 1, -4, 0, -1, -1]], [[10, 20, -9]], [[0, -1, 2, -3, 4, -5, 6, 8, 2, 10]], [[30, 3, 4, 5, 3]], [[0, -1, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4, 4, 6]], [[-9, -4, -2, -1, -1, 1, 2, 4, 5]], [[-1, -2, -3, 0, 1, 2, 1, 3, 2, 1, 0, -1, 2]], [[-5, 3, -4, 3, -2, -1, 0, 1, 3, -9, 4, 5]], [[0, -1, -1, 1, -3, 4, -5, 6, 8, -9, 10, 4, 4]], [[-97.00921686941055, -62.31826514441987, -47.8901822007769, 27.86472361019527, 59.008009822655055]], [[9, 10, 10, 30]], [[10, 21, 20, -9]], [[10, 20, -9, 39]], [[0, -1, 2, -3, 4, -5, 6, -7, 8, 10, -7]], [[-1, -2, -3, 0, 1, 2, 10, 3, 3, 2, 1, 0, -1, 2, 2]], [[10, -9, 40, 40]], [[0, -1, 2, 4, -5, 6, -7, 8, 10]], [[-5, 3, -4, 3, -2, -1, -3, 0, 1, 2, 3, -9, 4, 5, 0]], [[3, 3, 2, 4, 2, 4, 2]], [[-5, -4, -3, -2, -1, -1, 1, 2, 3, 4, 5]], [[0, -1, 2, 4, 1, -5, 6, -7, 8, 10]], [[-5, -4, 3, -2, -1, 0, 1, 2, 3, 4, 5, 5]], [[-1, -2, -3, 3, 0, 1, 2, 3, 3, 2, 1, 0, -1, -3]], [[0, -1, 2, 4, -5, 6, 8, -9, 10, 4, -1]], [[-5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -4]], [[0, -1, -1, 2, 4, -3, 4, -5, 8, -9, 10, 4, 4]], [[0, -1, 2, 4, -5, 6, -7, 8, 10, 2]], [[9, 10, 11, 30]], [[9, 30, 5, 40, 10]], [[0, -1, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4, 4, 2]], [[0, -1, 2, 4, 6, 8, -9, 10, 4]], [[-1, -2, -3, 0, 1, 2, 1, 3, -2, 2, 1, 0, -1, 3]], [[-2, -5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -4]], [[-1, -2, -3, 0, 1, 10, 3, 3, 2, 1, 3, 0, -1, 2]], [[-5, -4, -3, -2, -1, -1, 1, 2, 39, 4, 5, 5]], [[-5, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, -4, -1]], [[-1, -2, -3, 0, 1, 3, 3, 2, 1, 3, 0, -1, 2]], [[10, 20, 10, 9, 30, 5]], [[0, -1, -2, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4, 4, 2]], [[-2, -3, 0, 1, 2, 1, 3, 1, -4, -1, -1]], [[10, 20, 11, 39]], [[0, -1, 2, 4, 1, -5, 6, -7, 8, 10, 10]], [[10, 19, -9, 40, 40, 40]], [[-5, -3, -4, -3, -2, -1, 0, -2, 1, 2, 3, 4, 5, -4]], [[10, 20, -9, 39, 20]], [[0, -1, 20, -3, 4, -5, 6, 6, -7, 8, -9, 10]], [[-5, -3, -4, -3, -2, -1, 1, 2, 3, 4, 5]], [[0, -1, -1, 2, -3, 4, -5, 6, 8, -9, 10, 4, 4, -9]], [[-2, -3, 0, 1, 2, 1, 3, 2, 1, -4, 0, -1, 0]], [[10, -9, 40, 40, 40]], [[10, 0, -2, -9, 40, -2]], [[-5, -4, -3, -2, -1, -1, 3, 1, 2, 4, 5, 1]], [[-1, -3, -3, 0, 1, 2, 3, 11, 3, 2, 1, 0, -1, 3]], [[-9, -4, -2, -1, 1, 2, 4, 5]], [[0, -1, 2, 3, -3, 4, -5, 6, 8, -10, -9, 10, 4]], [[0, -1, 2, -3, -1, 4, -5, 6, 8, -10, -9, 10, 4]], [[10, 21, 20, -4, -9]], [[10, 20, -9, 40, -9]], [[-5, -3, -3, -3, -2, -1, 0, 1, 3, 4, 5, 0]], [[-11.074239280905289, 59.008009822655055, -62.31826514441987, 27.86472361019527, 59.008009822655055, -97.00921686941055]], [[10, 20, 19, -9, 40, -9]], [[-5, -3, -3, -2, -1, 0, 1, 2, 3, 4, 5, -4, -1]], [[0, -1, 2, -2, -3, 4, -5, 6, 8, -9, 10, 4, -3]], [[-9, -4, -2, -1, 1, 5, 2, 2, 4, 5, -1]], [[0, -1, 2, 4, -5, 6, -7, 8, 10, 2, 6]], [[10, 20, 10, 30, 5]]], "input_output_examples": "[[[[1, -2, 3, -4]]], [[2]]]", "starter_code": "from typing import List\ndef pos_count(l: List[int]) -> int:"}
{"task_id": "Mbpp/67", "requirement": "def bell_number(n: int) -> int:\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\"\"\"", "entry_point": "bell_number", "canonical_solution": "\ndef bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0] \n", "base_input": [[2], [10], [56]], "plus_input": [[0], [100], [99], [true], [false], [98], [1], [2], [3], [97], [96], [11], [12], [92], [95], [94], [14], [13], [10], [55], [17], [15], [93], [16], [9], [91], [54], [25], [18], [4], [5], [6], [8], [90], [53], [7], [19], [64], [20], [21], [56], [63], [52], [24], [57], [22], [62], [89], [51], [50], [88], [58], [49], [45], [65], [23], [87], [46], [59], [26], [44], [61], [48], [47], [60], [30], [27], [86], [28], [31], [29], [66], [67], [85], [70], [71], [43], [69], [82], [83], [72], [68], [81], [73], [32], [33], [42], [74], [84], [41], [80], [79], [75], [40], [76], [34], [35], [78], [77], [39], [38], [36]], "input_output_examples": "[[[2]], [[2]]]", "starter_code": "def bell_number(n: int) -> int:"}
{"task_id": "Mbpp/68", "requirement": "from typing import List\ndef is_Monotonic(A: List[int]) -> bool:\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\"\"\"", "entry_point": "is_Monotonic", "canonical_solution": "\ndef is_Monotonic(A): \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))\n", "base_input": [[[6, 5, 4, 4]], [[1, 2, 2, 3]], [[1, 3, 2]]], "plus_input": [[[]], [[9, 3, 7, 2, 5, 1, 6]], [[9, 7, 7, 2, 5, 5, 1, 6]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005]], [[43.01465662466188, -69.38224302373561, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, -9.527847657655224, -10.481407073259263, -34.902913681824856, -9.527847657655224]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -9.527847657655224, -10.481407073259263, -64.57664800604005]], [[43.01465662466188, -69.73647736308538, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, -10.481407073259263, -69.73647736308538, 43.01465662466188]], [[43.01465662466188, -34.902913681824856, 42.59716035619264, -69.38224302373561, -9.527847657655224, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[-10.481407073259263, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263]], [[43.01465662466188, -10.481407073259263]], [[9, 5, 3, 7, 2, 5, 1, 1, 2, 6]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263]], [[43.01465662466188, -98.52620778096008, -69.73647736308538, -10.481407073259263]], [[9, 7, 7, 2, 5, 5, 3, 6]], [[-47.55433018390211, -10.481407073259263, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005, -34.902913681824856]], [[-34.902913681824856, -69.38224302373561, -10.481407073259263, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -47.55433018390211, -64.57664800604005]], [[43.01465662466188, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005]], [[41.82235199511542, -68.76772490153975, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005, -69.38224302373561]], [[43.01465662466188, -69.38224302373561, -69.88165026016243, -10.481407073259263, -69.73647736308538, 43.01465662466188, -69.88165026016243]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[-10.481407073259263, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005, -10.481407073259263]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005]], [[-34.902913681824856, -10.481407073259263, -69.38224302373561, -10.481407073259263]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[false, false, false]], [[-34.902913681824856, -69.38224302373561, -10.481407073259263, -94.97100584944054]], [[-34.902913681824856, -10.481407073259263, -94.97100584944054]], [[43.01465662466188, -69.38224302373561, -10.481407073259263, 43.01465662466188]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[-94.97100584944054, -10.481407073259263, -10.481407073259263]], [[43.01465662466188, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, 27.4121976200018, -64.57664800604005]], [[-34.902913681824856, -10.481407073259263, -69.88165026016243, -94.97100584944054]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, 43.01465662466188]], [[42.59716035619264, -68.76772490153975, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561]], [[-34.902913681824856, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005]], [[-34.902913681824856, -9.527847657655224, -10.481407073259263, -94.97100584944054, -34.902913681824856]], [[7, 3, 7, 2, 5, 5, 3, 6]], [[42.59716035619264, -68.76772490153975, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561, 43.01465662466188]], [[false, false, false, false]], [[9, 5, 7, 2, 5, 1, 1, 2, 6]], [[27.4121976200018, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[9, 7, 7, 2, 5, 5, 3, 6, 5]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -94.97100584944054, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -34.902913681824856]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -11.141086666406599, -10.481407073259263, -69.38224302373561]], [[-9.527847657655224, -34.902913681824856, 43.01465662466188, -69.38224302373561, -10.493584737965575, -64.57664800604005]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -9.527847657655224, -10.481407073259263, 27.4121976200018, -64.57664800604005]], [[-34.902913681824856, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005, -10.768528666126521]], [[9, 3, 5, 1, 1]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[-34.902913681824856, 42.81869869284685, -69.38224302373561, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -69.88165026016243, -64.57664800604005, -34.902913681824856]], [[-34.902913681824856, 43.01465662466188, -64.57664800604005, -10.481407073259263, -64.57664800604005]], [[-34.902913681824856, 42.81869869284685, -69.38224302373561, -10.481407073259263, 43.01465662466188]], [[-96.47330712486206, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[7, 3, 5, -11, -4, 2, 54]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, 43.411858408450954, -10.768528666126521, -35.65861283942265]], [[-96.47330712486206, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -10.768528666126521]], [[-12.580228512164316, 42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -10.481407073259263]], [[9, 4, 3, 7, 2, 5, 1, 1, 2, 6]], [[-34.902913681824856, -69.38224302373561, -10.481407073259263, -94.97100584944054, -34.902913681824856, -10.481407073259263, -94.97100584944054]], [[42.59716035619264, 43.01465662466188, -69.14764750208506, -69.38224302373561, -10.481407073259263, -69.38224302373561]], [[43.01465662466188, -34.902913681824856, -49.529210259810306, 42.59716035619264, -69.38224302373561, -9.527847657655224, -10.481407073259263, -64.57664800604005, 43.01465662466188]], [[42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263]], [[43.01465662466188, -69.38224302373561, 42.81869869284685, -69.88165026016243, -10.481407073259263, -69.73647736308538, 43.01465662466188, -69.88165026016243]], [[43.01465662466188, -34.902913681824856, -35.42913486984109, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005]], [[true, false, false, false, false]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -64.57664800604005, 43.01465662466188, 43.01465662466188]], [[-96.47330712486206, 43.01465662466188, -96.47330712486206, -10.768528666126521, -35.65861283942265, -10.768528666126521]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, 43.411858408450954, -10.768528666126521, -35.65861283942265, 43.411858408450954]], [[42.87694882226923, -12.580228512164316, 42.59716035619264, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -10.481407073259263]], [[-34.967048506901335, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005]], [[43.01465662466188, -69.38224302373561, -69.88165026016243, -10.481407073259263, -69.73647736308538, -69.88165026016243]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005, -47.55433018390211]], [[-34.902913681824856, -9.527847657655224, -10.481407073259263, -94.97100584944054]], [[-10.902910189585176, -34.902913681824856, 43.01465662466188, -69.38224302373561, -10.481407073259263, -10.481407073259263, -34.902913681824856]], [[43.01465662466188, -10.481407073259263, 43.01465662466188]], [[42.59716035619264, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561]], [[-34.902913681824856, 43.01465662466188, -69.38224302373561, -64.57664800604005, -69.38224302373561]], [[9, 3, 3, 7, 2, 5, 1, 1, 2, 6]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265, -69.14764750208506]], [[42.59716035619264, 43.01465662466188, 41.82235199511542, -10.481407073259263, -69.38224302373561, -10.481407073259263]], [[-34.902913681824856, 43.01465662466188, -34.902913681824856, 43.411858408450954, -10.768528666126521, -35.65861283942265, 43.411858408450954, -34.902913681824856]], [[-34.902913681824856, -34.902913681824856, -10.768528666126521, -35.65861283942265, -47.55433018390211, -64.57664800604005, -10.768528666126521, -10.768528666126521]], [[-34.902913681824856, -35.42913486984109, -34.967048506901335, 43.01465662466188, -34.902913681824856, -10.481407073259263, -64.57664800604005, -34.902913681824856]], [[9, 5, 4, 7, 2, 5, 1, 1, 2, 6]], [[42.81869869284685, 43.01465662466188, -96.47330712486206, -10.768528666126521, -35.65861283942265, -10.323022141346687]], [[-34.902913681824856, 43.01465662466188, -69.6514466229769, -10.481407073259263, 43.01465662466188]], [[-96.47330712486206, -34.902913681824856, 43.01465662466188, -34.902913681824856]], [[-9.527847657655224, -34.902913681824856, 43.01465662466188, -10.902910189585176, -10.493584737965575, -64.57664800604005]], [[43.01465662466188, -98.52620778096008, -69.73647736308538, -10.481407073259263, -10.481407073259263, 43.01465662466188]], [[-96.47330712486206, 42.87694882226923, 43.01465662466188, -34.902913681824856, -10.768528666126521, -35.65861283942265]], [[43.01465662466188, -34.902913681824856, 43.01465662466188, -34.902913681824856, -10.481407073259263, -9.527847657655224, -64.57664800604005, 43.01465662466188]], [[-10.768528666126521, -9.527847657655224, -10.481407073259263, -94.97100584944054, -34.902913681824856, -34.902913681824856]]], "input_output_examples": "[[[[6, 5, 4, 4]]], [[True]]]", "starter_code": "from typing import List\ndef is_Monotonic(A: List[int]) -> bool:"}
{"task_id": "Mbpp/69", "requirement": "from typing import List\ndef is_sublist(l: List[Any], s: List[Any]) -> bool:\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\"\"\"", "entry_point": "is_sublist", "canonical_solution": "\ndef is_sublist(l, s):\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))\n", "base_input": [[[2, 4, 3, 5, 7], [3, 7]], [[2, 4, 3, 5, 7], [4, 3]], [[2, 4, 3, 5, 7], [1, 6]]], "plus_input": [[[], []], [[], [1]], [["r"], []], [["sfIngs", "GYVu", "r"], []], [["r", "sfIngs", "GYVu"], [false, "klXTmRZyQ"]], [[false, 99.97028427774339, 82, "GYVu", false, "Ok", null, [1, -71.80691717114227]], []], [["r", "sfIngs", "GYVu", "GYVu"], ["r", "sfIngs", "GYVu", "GYVu"]], [["r", "sgfIngs", "GYVu", "GYVu"], ["r", "sgfIngs", "GYVu", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GYVu"], ["r", "sfIngs", "GYVu", "GYVu", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu"]], [["r", "sfIngs", "GYVu"], ["r", "sfIngs", "GYVu"]], [["sfIngs", "GYVu"], ["sfIngs", "GYVu"]], [["sgfIngs", "sfIngs", "GYVu", "r", "r", "sfIngs"], ["sgfIngs", "sfIngs", "GYVu", "r", "r", "sfIngs"]], [["r", "GYVu", "r"], []], [["r", "GYVu", "r"], ["r", "GYVu", "r"]], [["sgfIngs", "sfIngs", "GYVu", "sfIngsr", "GYV", "r", "sfIngs"], ["sgfIngs", "sfIngs", "GYVu", "sfIngsr", "GYV", "r", "sfIngs"]], [[1], [1]], [[null, false, {"sfIngsr": 42.34905566158099, "FHvMaMnTCg": -74.03921201241215, "hKRFjm": -74.21853866002988, "rKQ": 40.63712034844792}, {"24.822944608944297": "pfIhkuLtSg", "-22.735241874996206": "s", "-13.009939375362165": "sfIngsr", "-71.80691717114227": "VtqKcYvzg", "99.97028427774339": "DBzU", "68.8678541991217": "GYVu", "-83.5332401941628": "PctAoxwD"}, [66, 1, -51, 1, -59, 1, false, -71], true, "sfIngs", 1], []], [["GYVu", "pfIhkuLtSg", "O", "Odpagl", "Casb"], []], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "GYV"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "GYV"]], [[-42, 8, -83.5332401941628, -82, 38.16772877208774, {"VtqKcYvzg": 47.40072133316414, "sLmQQSONWn": -13.009939375362165, "O": 36, "rKQ": [48, -59]}, -40], []], [[8, null, false, {"sfIngsr": 42.34905566158099, "FHvMaMnTCg": -74.03921201241215, "hKRFjm": -74.21853866002988, "rKQ": 40.63712034844792}, {"24.822944608944297": "pfIhkuLtSg", "-22.735241874996206": "s", "-13.009939375362165": "sfIngsr", "-71.80691717114227": "VtqKcYvzg", "99.97028427774339": "DBzU", "68.8678541991217": "GYVu", "-83.5332401941628": "PctAoxwD"}, [66, 1, -51, 1, -59, 1, false, -71], true, "sfIngs", 1], []], [["r", "sfIngs", "s"], [false, "klXTmRZyQ"]], [["r", "sgfIngs", "GYVu", "pfIhkuLtSgr", "GYVu"], ["r", "sgfIngs", "GYVu", "pfIhkuLtSgr", "GYVu"]], [[[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 90.16807182684596, "qyujtuO", 82, 75.22089802044161, 82], [[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 90.16807182684596, "qyujtuO", 82, 75.22089802044161, 82]], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "r"]], [["GYVur", "sgfIngs", "GYVu", "GYVu"], ["GYVur", "sgfIngs", "GYVu", "GYVu"]], [["sfIngsGYVu", "sfIngs", "GYVu"], ["sfIngsGYVu", "sfIngs", "GYVu"]], [["r", "GYVu", "r", "r"], ["r", "GYVu", "r", "r"]], [["sfIngSFVGYVVgWCfDjsGYVu", "sfIngSFVVgWCfDjsGYVu", "sfIngs", "GYVu"], ["sfIngSFVGYVVgWCfDjsGYVu", "sfIngSFVVgWCfDjsGYVu", "sfIngs", "GYVu"]], [["r", "GYVu", "r"], [true, true, true, false, true, false, false, true]], [["r"], ["r"]], [["r", "GSFVVgWCfDju", "GYVu", "r"], ["r", "GSFVVgWCfDju", "GYVu", "r"]], [["sgfIngs", "sfIngs", "GYVu", "sfIngsr", "GYV", "r", "GYV"], ["sgfIngs", "sfIngs", "GYVu", "sfIngsr", "GYV", "r", "GYV"]], [[], [true, false, true]], [["r", "GYVu", "r"], [-49.293443668830214, 11.89338685730192, 38.68012886425632, 64.91527494125927, -74.03921201241215, 0.3374408817541621]], [["r", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu"], ["r", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu"]], [[90.16807182684596, "qyujtuO", 82, 75.22089802044161, 82], [90.16807182684596, "qyujtuO", 82, 75.22089802044161, 82]], [["r", "sfIngs", "GYVu", "r", "r"], ["r", "sfIngs", "GYVu", "r", "r"]], [[90.16807182684596, "qyujtuO", 75.22089802044161, "sfIngSFVGYVVgWCfDjsGYVu", 82], [90.16807182684596, "qyujtuO", 75.22089802044161, "sfIngSFVGYVVgWCfDjsGYVu", 82]], [["r", "GYVu", "r"], [-49.293443668830214, 11.89338685730192, 38.68012886425632, 64.91527494125927, -74.03921201241215, 0.3374408817541621, -74.03921201241215]], [["GYVur", "sgfIngs", "GYVu", "GYVu", "GYVu"], ["GYVur", "sgfIngs", "GYVu", "GYVu", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GYYVu", "GYV", "GYVu", "GYV"], ["r", "sfIngs", "GYVu", "GYVu", "GYYVu", "GYV", "GYVu", "GYV"]], [["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVu", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVu", "r"]], [[-42, 9, -83.5332401941628, -82, 38.16772877208774, {"VtqKcYvzg": 47.40072133316414, "sLmQQSONWn": -13.009939375362165, "O": 36, "rKQ": [48, -59]}, -40], [-42, 9, -83.5332401941628, -82, 38.16772877208774, {"VtqKcYvzg": 47.40072133316414, "sLmQQSONWn": -13.009939375362165, "O": 36, "rKQ": [48, -59]}, -40]], [["r", "sfIngs", "GYVu"], [false]], [["GSFVVgWCfDju", "r", "sfIngs", "GYVu", "r", "r", "GSFVVgWCfDju", "r"], ["GSFVVgWCfDju", "r", "sfIngs", "GYVu", "r", "r", "GSFVVgWCfDju", "r"]], [["sfIngs", "PctAoxwD", "GYVu"], ["sfIngs", "PctAoxwD", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r"]], [["sfIngs", "PctAoxwD", "GVYVu", "GYVu", "PctAoxwD"], ["sfIngs", "PctAoxwD", "GVYVu", "GYVu", "PctAoxwD"]], [["r", "sfIngs", "u", "GYV", "GYVu"], ["r", "sfIngs", "u", "GYV", "GYVu"]], [["r", "VtqKcYvzg", "r"], []], [["GYVur", "GYYVur", "sgfIngs", "GYVu", "GYVu"], ["GYVur", "GYYVur", "sgfIngs", "GYVu", "GYVu"]], [[true, true, true, false, true, false, false, true, true], [true, true, true, false, true, false, false, true, true]], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "rGSFVVgWCfDju", "GYVu", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "rGSFVVgWCfDju", "GYVu", "r"]], [["r", "sfIngs", "GYVu", "r"], ["r", "sfIngs", "GYVu", "r"]], [[-74.03921201241215, 75.22089802044161, -38.48806518576453], []], [[false], [true, false, true]], [["sfIngs", "GYVu", "r"], ["sfIngs", "GYVu", "r"]], [["r", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu"], ["r", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu", "GYVu"]], [["sfIngsGYVu", "sfIngs", "GYVu", "sfIngs", "sfIngsGYVu"], ["sfIngsGYVu", "sfIngs", "GYVu", "sfIngs", "sfIngsGYVu"]], [["r", "GYVu", "r"], [true, true, true, true, false, false, true]], [["r", "sfInVtqKcYvzggs", "GYVu"], ["r", "sfInVtqKcYvzggs", "GYVu"]], [["r", "GYVu", "r", "r"], [true, true, true, false, true, false, false, true]], [[[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 65.5370586539689, "qyujtuO", 82, 75.22089802044161, 82, 82], [[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 65.5370586539689, "qyujtuO", 82, 75.22089802044161, 82, 82]], [["r", "sfIngs", "GYVVu", "GYVu", "r", "r"], ["r", "sfIngs", "GYVVu", "GYVu", "r", "r"]], [["r", "sfIngs", "s"], ["klXTmRZyQ"]], [["r", "GYYVu", "GYVu"], ["r", "GYYVu", "GYVu"]], [[[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 90.16807182684596, "qyujtuO", 82, 82], [[95.17158052544048, "SFVVgWCfDj", -0.3414328935261324], 90.16807182684596, "qyujtuO", 82, 82]], [[[95.17158052544048, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 65.5370586539689, [95.17158052544048, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], "qyujtuO", 82, 75.22089802044161, 82], [[95.17158052544048, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 65.5370586539689, [95.17158052544048, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], "qyujtuO", 82, 75.22089802044161, 82]], [["r", "sfIngs", "GYVu", "GYVusfIngSFVGYVVgWCfDjsGYVu", "GYVu", "r"], ["r", "sfIngs", "GYVu", "GYVusfIngSFVGYVVgWCfDjsGYVu", "GYVu", "r"]], [["r", "sfIngs", "s"], ["klXTmRZyQ", "klXTmRZyQ"]], [["sfIngsGYVu", "sfIngs", "GYVu", "ssfIngs", "sfIngsGYVu"], ["sfIngsGYVu", "sfIngs", "GYVu", "ssfIngs", "sfIngsGYVu"]], [[-49.293443668830214, -0.4410790823334596, 11.89338685730192, 38.68012886425632, 64.91527494125927, 47.40072133316414, -74.03921201241215, 0.3374408817541621], [-49.293443668830214, -0.4410790823334596, 11.89338685730192, 38.68012886425632, 64.91527494125927, 47.40072133316414, -74.03921201241215, 0.3374408817541621]], [["r", "GYVu", "FHvMaMnTCg", "rr"], ["r", "GYVu", "FHvMaMnTCg", "rr"]], [["klXTmRZyQr", "sfIngs", "GYVu", "GYVu", "sfIsngs", "GYVu"], ["klXTmRZyQr", "sfIngs", "GYVu", "GYVu", "sfIsngs", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r", "r"]], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "GYV", "GYVu"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "GYV", "GYVu"]], [["r", "sfIngs", "GYVVu", "GYVu", "r", "r", "GYVu"], ["r", "sfIngs", "GYVVu", "GYVu", "r", "r", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GYYVu", "GYV", "GYVVu", "GYV"], ["r", "sfIngs", "GYVu", "GYVu", "GYYVu", "GYV", "GYVVu", "GYV"]], [["r", "GYVu", "r", "r"], [true, true, true, true, false, false, true]], [[90.16807182684596, "qyujtuO", 75.22089802044161, "sfIngSFVGYVVgWCfDjsGYVu", "GYYVur", 82], [90.16807182684596, "qyujtuO", 75.22089802044161, "sfIngSFVGYVVgWCfDjsGYVu", "GYYVur", 82]], [["r", "snfInVtqKcYvzggs", "sfInVtqKcYvzggs", "GYVu"], ["r", "snfInVtqKcYvzggs", "sfInVtqKcYvzggs", "GYVu"]], [["rGYV", "GYVu"], ["rGYV", "GYVu"]], [["r", "rGYV", "GYVu"], ["r", "rGYV", "GYVu"]], [[false], [false]], [["sfIngsGYVu", "GSFVVgWCfDjusfIngs", "sfIngs", "GYVu", "sfIngsGYVu"], ["sfIngsGYVu", "GSFVVgWCfDjusfIngs", "sfIngs", "GYVu", "sfIngsGYVu"]], [["r", "sfIngs", "GYVVu", "GYVu", "r", "r", "GYVu", "r"], ["r", "sfIngs", "GYVVu", "GYVu", "r", "r", "GYVu", "r"]], [["r", "GYVu"], ["r", "GYVu"]], [["r", "sgfIngs", "s", "GYVu", "pfIhkuLtSgr", "GYVu"], ["r", "sgfIngs", "s", "GYVu", "pfIhkuLtSgr", "GYVu"]], [["GYVGu", "r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r"], ["GYVGu", "r", "sfIngs", "GYVu", "GYVu", "GOkV", "GYVGu", "r"]], [["r", "sfIngs", "GYVu", "GYVusfIngSFVGYVVgWCfDjsGYVu", "s", "Casb", "GYVu", "r"], ["r", "sfIngs", "GYVu", "GYVusfIngSFVGYVVgWCfDjsGYVu", "s", "Casb", "GYVu", "r"]], [["sfIngs", "GYVu", "sfIngrrs", "GYVu", "GOkV", "GYVGu", "rr"], ["sfIngs", "GYVu", "sfIngrrs", "GYVu", "GOkV", "GYVGu", "rr"]], [["YrGYV", "GYVu", "GOku"], ["YrGYV", "GYVu", "GOku"]], [["GYVu", "pfIhkuLtSg", "O", "Odpagl", "Casb", "GYVu"], [[87.8259025409381, "GYVusfIngSFVGYVVgWCfDjsGYVu", [true, true], {"-51": -74.03921201241215, "60": 40.71791810053759, "false": 5.735570485483905, "-10": 24.822944608944297, "8": 0.3374408817541621, "41": 64.91527494125927, "-82": -25.52239838327162, "-36": -41.74691632795968, "61": -74.21853866002988, "-83": 99.97028427774339}, false, [66, 68, -71, -71, -82, -65, -51], {"GSFVVgWCfDjusfIngs": "ssfIngs", "GYYVu": "GOkV", "uTw": "GYVGu", "s": "SFVVgWCfDj", "klXTmRZyQr": "FHvMaMnTCg", "sfIngrrs": "mXw", "HGEtjdFe": "sfIsngs", "DBzU": "EV", "sfIngSFVGYVVgWCfDjsGYVu": "WpVzXU", "Xf": "sfIngrrs"}], [], -10, -29, null]], [[true, true, true, false, true, false, false, true, true, false], [true, true, true, false, true, false, false, true, true, false]], [["r", "sfIngs", "r", "GYVVu", "GYVu", "r", "r"], ["r", "sfIngs", "r", "GYVVu", "GYVu", "r", "r"]], [["r", "sfInsfIngSFVGYVVgWCfDjsGYVugs", "u", "GYV", "GYVu"], ["r", "sfInsfIngSFVGYVVgWCfDjsGYVugs", "u", "GYV", "GYVu"]], [["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "ssfIngs", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GYV", "GYVu", "ssfIngs", "r"]], [["r", "sfIngs", "GYVu", "GYVu", "GOkV", "WpVzXU", "r", "r"], ["r", "sfIngs", "GYVu", "GYVu", "GOkV", "WpVzXU", "r", "r"]], [[[94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 65.5370586539689, [94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], "qyujtuO", 82, [94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 75.22089802044161, 82], [[94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 65.5370586539689, [94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], "qyujtuO", 82, [94.17409950967779, "SFVVgWCfDj", "SFVVgWCfsgfIngsDj", -0.3414328935261324], 75.22089802044161, 82]], [["sgfIngs", "s", "GYVu", "pfIhkuLtSgr"], ["sgfIngs", "s", "GYVu", "pfIhkuLtSgr"]]], "input_output_examples": "[[[[2, 4, 3, 5, 7], [3, 7]]], [[False]]]", "starter_code": "from typing import List\ndef is_sublist(l: List[Any], s: List[Any]) -> bool:"}
{"task_id": "Mbpp/70", "requirement": "from typing import List\ndef get_equal(Input: List[str]) -> bool:\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\"\"\"", "entry_point": "get_equal", "canonical_solution": "\ndef get_equal(Input):\n  return len(set(len(item) for item in Input)) == 1\n", "base_input": [[[[11, 22, 33], [44, 55, 66]]], [[[1, 2, 3], [4, 5, 6, 7]]], [[[1, 2], [3, 4]]]], "plus_input": [[[[1, 2, 3], [], [4, 5]]], [[[1, 2, 3], [], [4, 5], [6, 7, 8]]], [[[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]], [[[1], [2, 3], [4, 5, 6], [7]]], [[[1, 2, 3, 4], [5, 6], [7, 8, 9]]], [[[], [1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]], [[[1, 2, 3], [4, 5], [], [6, 7, 8], [9, 10]]], [[[1, 2, 3], [4], [5, 6, 7], [8, 9, 10], [11, 12, 13]]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [4, 5], [6, 7], [8, 9], [10]]], [[[1], [2, 3], [], [4, 5, 6, 7], [8, 9, 10]]], [[[1, 2, 3, 4, 5], [6, 7, 8], [9, 10, 11, 12]]], [[[1, 2], [3, 4], [5, 6], [7, 8]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11]]], [[[1, 2], [3, 4], [5, 6, 7], [8]]], [[[1, 2], [3, 4], [5, 6, 7]]], [[[1], [2, 3], [4, 5], [6, 7, 8]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4]]], [[[1, 1], [2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [2, 3]]], [[[1, 2], [1, 2, 3], [], [4, 5], [6, 7, 8]]], [[[1, 2, 3], [4], [5, 6, 7], [8, 9, 10], [8, 10], [11, 12, 13]]], [[[1, 2, 3, 4, 5], [6, 7, 8], [9, 10, 11, 12], [9, 10, 11, 12, 12]]], [[[1], [2, 3, 2], [], [4, 5, 6, 7], [8, 9, 10]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11], [4, 5]]], [[[], [], [2, 3], [4, 5, 6], [7, 8, 9, 10], []]], [[[1, 2, 3], [], [4, 4, 5]]], [[[2, 3, 2, 3], [1], [2, 3, 2], [], [4, 5, 6, 7], [8, 11, 10], [8, 9, 10]]], [[[1], [8, 3], [4, 5], [6, 7, 8]]], [[[1, 2, 3], [3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [4], [5, 7], [8, 9, 10], [8, 10], [11, 12, 13], [1, 2, 3]]], [[[1], [2, 3, 2], [4, 5, 6, 7], [8, 9, 10]]], [[[1, 2], [3, 4], [5, 6, 7], [8], [8]]], [[[1, 2], [3, 4, 4], [3, 4], [5, 6, 7], [11, 4], [3, 4]]], [[[1, 2, 3], [], [4], [6, 7, 8]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4], [1, 2]]], [[[1, 2, 3], [4, 5], [6, 7], [8, 9], [], [10]]], [[[1, 2], [3, 4, 3], [5, 6, 7], [8]]], [[[1], [4, 5], [6, 7, 8]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 5, 11]]], [[[1, 2, 3, 3], [], [9, 10]]], [[[1, 2], [1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 5, 11], [1, 2]]], [[[1, 2], [3], [5, 6, 5, 7], [8], [8]]], [[[2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [14, 2, 3]]], [[[1, 2, 3, 4], [5, 6], [8, 9]]], [[[1, 2, 3], [], []]], [[[1, 2, 3], [4, 5, 6], [4, 5, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2], [3, 4], [5, 6, 7], [1, 2]]], [[[1, 2, 3], [4], [5, 7], [8, 10], [11, 12, 13], [1, 2, 3]]], [[[3, 1, 2], [1, 2], [3, 4], [5, 6, 7], [8]]], [[[1, 2, 3], [4], [7, 6, 7], [8, 9], [10]]], [[[4, 5]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4], [5, 6, 7]]], [[[1, 2, 3], [4, 5], [5], [6, 7, 8], [9, 10, 11], [4, 5]]], [[[1, 2, 3], [4, 5, 6], [4, 5, 5, 6], [7, 8, 9], [10, 11, 12], [7, 8, 9]]], [[[1, 2], [3, 4, 4], [3, 4], [5, 6, 7], [11, 4], [3, 4], [11, 11, 4]]], [[[1, 2, 3], [], [4, 5], [7, 8], [7, 8]]], [[[1, 2, 3], [4], [5, 6, 7], [8, 9, 10], [8, 10], [11, 12, 13], [8, 10]]], [[[1, 2, 3], [7, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11], [4, 5]]], [[[1], [4, 5, 6], [2, 3, 2], [], [4, 5, 6, 7], [8, 9, 10]]], [[[1, 2], [3, 4], [5, 6, 7], [5, 6, 7]]], [[[2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [14, 2, 3], [11, 12, 13, 14, 15]]], [[[1], [4, 5, 6], [], [4, 5, 6, 7], [8, 9, 10]]], [[[2], [3, 4], [5, 6, 7], [3, 4, 4], [3, 4, 4], [3, 4]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4], [5, 6, 7], [5, 6, 7]]], [[[], [3], [1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [2, 3], [1]]], [[[], [3], [1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [1]]], [[[1], [2, 2], [3], [], [4, 5, 6, 7], [8, 9, 9, 10]]], [[[1, 1], [2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [2, 3], [1, 1]]], [[[1, 2], [3, 4, 4], [3, 4], [3, 4, 4], [5, 6, 7], [11, 4], [3, 4], [11, 11, 4]]], [[[1], [2, 2], [2], [3], [4, 5, 6, 7], [8, 9, 9, 10]]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2], [1, 2], [3, 4, 5]]], [[[1], [8, 3], [4, 5], [4, 1, 5], [6, 7, 8]]], [[[2], [3, 4], [5, 6, 7], [2, 2], [3, 4, 4], [3, 4, 4], [3, 4]]], [[[1, 1], [2, 3], [4, 5, 6], [11, 12, 13, 14, 15]]], [[[2, 2], [1, 2], [3]]], [[[1], [4, 5, 6], [4, 5, 6, 7], [8, 9, 10]]], [[[9, 10, 11, 10], [1, 2, 3], [4, 5], [6], [5], [6, 7, 8], [9, 10, 11], [4, 5]]], [[[1], [4, 5, 6], [2, 3, 2], [], [4, 5, 6, 7], [8, 9, 10], [4, 5, 6, 7]]], [[[], ["D", "DgNw"], [], [2, 3], [4, 5, 6], [], []]], [[[1], [4, 5], [6, 7, 8], [1]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4], [8], [8]]], [[[4, 5, 5], [1, 2, 3], [], [6, 7, 8], [4, 5]]], [[[4, 5, 5], [1, 2, 3], [], [1, 14, 3], [6, 7, 8], [4, 5]]], [[[1], [4, 5, 6], [2, 3, 2], [], [8, 9, 10]]], [[[4], [4, 5]]], [[[1, 2], [3, 4], [5, 6, 7], [7], [3, 4], [8], [8], [8]]], [[[1, 2, 3], [4, 5], [6, 7, 8], [6, 7, 8, 6], [9, 10, 11]]], [[[1, 2, 3, 4], [5, 6], [6, 8, 9]]], [[[1, 1], [2, 3], [2, 3, 3], [4, 5, 6], [11, 12, 13, 14, 15], [2, 3], [1, 1]]], [[[1, 2, 3], [3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13], [1, 2, 3], [11, 12, 13], [3, 4]]], [[[2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [14, 2, 3], [11, 12, 13, 14, 15], [11, 12, 13, 14, 15]]], [[[1], [4, 5, 6], [4, 5, 6, 7], [1]]], [[[9, 10, 11, 10], [1, 2, 3], [4, 5], [5], [6, 7, 8], [9, 10, 11], [4, 5, 5], [5]]], [[[1, 1], [2], [4, 5, 6, 4], [11, 12, 13, 14, 15], [2, 3]]], [[[1, 2, 3], [7, 8, 9], [10, 11, 12]]], [[[3, 3], [1, 1], [2, 3], [4, 5, 6], [5, 12, 13, 14, 15, 12], [2, 3]]], [[[1], [4, 6, 6], [4, 5, 6, 7], [4, 5, 6, 7, 7], [1]]], [[[1, 2, 2], [3, 4], [1, 2]]], [[[], ["D", "DgNw"], [true, true, true, false, true, true], [2, 3], [4, 5, 6], [], [], []]], [[[1, 2], [3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]]], [[[1, 2, 3], [4, 5, 5], [4, 5], [6, 7, 8], [6, 7, 8, 6], [9, 10, 11]]], [[[4, 5], [1, 2, 3], [], [4, 5], [7, 8], [7, 8]]], [[[9, 10, 11, 10], [1, 2, 3], [4, 5], [6, 7, 8], [9, 10, 11], [4, 5, 5], [4, 14], [5]]], [[[1, 2, 3], [3, 4], [5, 6, 7], [8, 9, 10]]], [[[2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [14, 2, 13, 3], [11, 12, 13, 12, 14, 15]]], [[[2, 3, 2, 3], [1], [2, 3, 2], [{"-50": -92, "-31": 10, "24": 8, "12": 5}, "DgNw", true, -66, -77.47956663455827, null, null, false, "DgNw"], [4, 5, 6, 7], [8, 11, 10], [8, 9, 10]]], [[[6, 7], [6, 7], [1, 2], [3, 4], [5, 6, 7], [1, 2]]], [[[2, 3], [4, 5, 6], [11, 12, 13, 14, 15], [2, 3], [1, 1]]], [[[1, 2, 3, 4], [5, 6], [5, 6, 6], [5, 6]]], [[[1, 2, 3], [1, 7, 2, 3], [3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13], [1, 2, 3], [11, 12, 13], [3, 4], [1, 2, 3], [8, 9, 10]]], [[[1], [4, 5], [6, 7, 8], [4, 5]]], [[[1], [6, 7, 8], [1]]], [[[2], [3, 4], [5, 6, 7], [2, 2], [3, 4, 4], [3, 4, 4], [2, 3, 2], [3, 4]]], [[[], [1], [4, 5, 6], [4, 5, 6, 7, 5], [1]]], [[[1, 2], [3, 4], [5, 6, 7], [3, 4], [3, 4]]], [[[1, 2, 3], []]], [[[9, 10, 11, 11], [1, 2, 3], [4, 5], [6, 8], [6, 7, 8, 6], [9, 10, 11]]]], "input_output_examples": "[[[((11, 22, 33), (44, 55, 66))]], [[True]]]", "starter_code": "from typing import List\ndef get_equal(Input: List[str]) -> bool:"}
{"task_id": "Mbpp/71", "requirement": "from typing import List\ndef comb_sort(nums: List[int]) -> List[int]:\"\"\"\nWrite a function to sort a list of elements.\"\"\"", "entry_point": "comb_sort", "canonical_solution": "\ndef comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums\n", "base_input": [[[5, 15, 37, 25, 79]], [[41, 32, 15, 19, 22]], [[99, 15, 13, 47]]], "plus_input": [[[500, 1000, 1500, 2000, 3000]], [[444444444, 555555555, 777777777, 888888888, 999999999]], [[1000000000, 2000000000, 5000000000, 10000000000]], [[1, 2, 2, 3, 4, 7, 8, 8]], [[1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 22, 33, 44, 55, 66, 77, 88, 99]], [[11, 22, 33, 44, 55, 66, 77, 88, 99]], [[99, 444444444, 777777777, 888888888, 999999999]], [[11, 22, 31, 32, 33, 55, 66, 77, 88]], [[500, 999, 1500, 3000]], [[11, 22, 33, 55, 66, 77, 88, 99, 10000000000]], [[11, 22, 31, 32, 33, 55, 66, 66, 77, 77]], [[1, 2, 3, 4, 4, 5, 7, 8, 9, 10]], [[11, 22, 33, 44, 44, 55, 66, 77, 88, 99]], [[11, 22, 33, 33, 55, 66, 77, 88, 99, 9999999999]], [[11, 22, 32, 33, 33, 55, 66, 66, 77, 77]], [[11, 22, 22, 31, 32, 32, 33, 55, 66, 77, 88]], [[1, 2, 3, 4, 5, 6, 6, 7, 9, 9, 10]], [[11, 11, 22, 33, 44, 55, 66, 66, 88, 99]], [[11, 11, 22, 44, 55, 66, 66, 89, 99]], [[2, 3, 4, 5, 6, 6, 7, 9, 9, 10, 6999]], [[11, 11, 44, 55, 66, 66, 89, 99]], [[11, 11, 22, 22, 22, 33, 55, 66, 77, 99, 10000000000]], [[1000000000, 2000000000, 2000000000, 10000000000]], [[1, 2, 3, 4, 4, 7, 8, 8]], [[1, 2, 3, 4, 7, 8, 8, 77]], [[500, 500, 1000, 3001, 4000, 5000, 6000, 7000, 8000, 9000, 10000]], [[11, 22, 33, 44, 55, 66, 66, 77, 88, 99]], [[1, 2, 3, 4, 4, 5, 7, 8, 9, 9, 10]], [[1, 2, 2, 3, 4, 7, 8, 8, 1000000000]], [[1999999999, 2000000000, 5000000000, 10000000000]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10]], [[11, 33, 44, 44, 55, 66, 77, 88, 88, 99]], [[11, 22, 31, 32, 33, 55, 66, 67, 77, 77]], [[11, 22, 33, 33, 44, 55, 66, 66, 77, 88, 99]], [[8, 11, 22, 33, 44, 66, 77, 88, 99]], [[500, 500, 1000, 3001, 4000, 5000, 6000, 7000, 8000, 8000, 9000, 10000]], [[1, 2, 3, 4, 4, 5, 7, 8, 9, 9, 10, 99]], [[11, 33, 44, 44, 55, 66, 77, 88, 88, 99, 99]], [[99, 6999, 444444444, 777777777, 888888888, 888888889, 999999999]], [[1999999999, 2000000000, 9999999999, 10000000000]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 6, 8, 9, 9, 10]], [[11, 22, 33, 33, 44, 55, 65, 66, 77, 88, 99]], [[1, 2, 3, 5, 6, 7, 9, 9, 10, 888888888, 888888888]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10]], [[11, 22, 33, 33, 44, 55, 65, 66, 77, 88, 99, 4000]], [[11, 22, 33, 33, 44, 55, 65, 66, 77, 88, 99, 4000, 444444444]], [[1999999999, 2000000000, 5000000000, 5000000000, 10000000000]], [[11, 22, 31, 32, 33, 55, 66, 66, 66, 77, 77]], [[22, 33, 1999999999, 2000000000, 10000000000]], [[11, 22, 33, 33, 44, 55, 65, 66, 77, 99]], [[500, 500, 1000, 3000, 3001, 4000, 5000, 6000, 7000, 7001, 8000, 8000, 9000, 10000]], [[1, 23, 33, 1999999999, 2000000000, 9999999999, 10000000000]], [[11, 33, 43, 44, 54, 55, 66, 77, 77, 88, 88, 99, 99]], [[10, 22, 33, 33, 44, 55, 65, 65, 66, 77, 99]], [[55, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]], [[1, 2, 3, 4, 4, 4, 7, 7, 8]], [[11, 22, 33, 44, 44, 55, 66, 66, 77, 88, 99]], [[11, 22, 32, 33, 34, 66, 66, 77, 77]], [[1, 2, 3, 4, 4, 7, 7, 8, 8]], [[1, 2, 3, 4, 4, 5, 7, 8, 9, 10, 100]], [[99, 6999, 444444444, 777777777, 888888888, 888888888, 888888889, 999999999]], [[11, 11, 44, 55, 66, 89, 99]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 9, 10]], [[11, 22, 33, 33, 65, 66, 77, 88, 99, 4000, 444444444]], [[11, 22, 23, 31, 32, 32, 33, 55, 66, 77, 88]], [[99, 6999, 444444444, 888888888, 888888889, 999999999, 9999999999]], [[11, 11, 44, 44, 55, 66, 66, 89, 89, 99]], [[1, 2, 3, 4, 4, 5, 6, 8, 9, 10, 888888889]], [[11, 22, 32, 33, 33, 55, 66, 77, 88, 9999999999]], [[11, 22, 32, 33, 33, 66, 66, 88, 9999999999]], [[11, 22, 32, 33, 33, 55, 66, 77, 88, 9999999999]], [[4000, 444444444, 1000000000, 2000000000, 2000000000, 5000000000, 10000000000]], [[11, 22, 33, 44, 55, 66, 77, 88, 99, 10000000000]], [[11, 22, 32, 33, 33, 33, 55, 66, 77, 77]], [[11, 22, 33, 33, 44, 55, 65, 77, 99]], [[11, 22, 33, 33, 65, 66, 77, 88, 99, 500, 501, 4000, 444444444]], [[55, 777777777, 888888888, 999999999]], [[11, 33, 33, 44, 55, 65, 66, 77, 77, 99, 4000, 444444444]], [[1, 2, 3, 4, 4, 4, 5, 7, 8, 9, 9, 9, 10, 99]], [[11, 23, 33, 44, 55, 66, 77, 88, 99, 10000000000]], [[44, 500, 500, 1000, 3001, 4000, 5000, 6000, 7000, 8000, 9000, 10000]], [[11, 22, 31, 32, 33, 33, 55, 66, 66, 77, 77]], [[1, 2, 3, 4, 5, 5, 6, 6, 8, 9, 9, 10]], [[11, 22, 31, 32, 32, 33, 55, 66, 77, 88]], [[1999999999, 2000000000, 2000000000, 9999999999, 10000000000]], [[444444444, 777777777, 888888888, 999999999, 1000000000]], [[65, 4000, 444444444, 1000000000, 2000000000, 2000000000, 5000000000, 10000000000]], [[33, 33, 44, 55, 65, 66, 77, 99, 4000, 444444444]], [[500, 500, 1000, 3000, 3001, 4000, 5000, 6000, 7000, 7001, 8000, 9000, 10000]], [[500, 999, 1500, 1500, 3000]], [[5, 11, 33, 33, 44, 55, 66, 77, 77, 99, 4000, 444444444]], [[44, 100, 500, 500, 1000, 3001, 5000, 6000, 7000, 8000, 9000, 10000]], [[1, 2, 3, 4, 4, 4, 4, 5, 7, 8, 8, 9, 9, 9, 10, 99]], [[3, 11, 22, 31, 32, 33, 55, 66, 66, 77, 77]], [[11, 11, 22, 33, 44, 66, 66, 88, 99]], [[1, 2, 3, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10]], [[100, 500, 1000, 3001, 4000, 5000, 6000, 7000, 8000, 8000, 9000, 10000]], [[8, 11, 22, 31, 32, 33, 33, 55, 66, 66, 77, 77, 77]], [[1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 9, 10]], [[4, 99, 6999, 444444444, 777777777, 888888888, 888888888, 888888889, 999999999]], [[11, 22, 30, 32, 32, 33, 55, 66, 77, 88, 5000000000]], [[1, 2, 5, 6, 7, 8, 9, 9, 10, 888888888, 888888888]], [[11, 33, 44, 44, 55, 66, 77, 88, 88, 99, 100]], [[11, 32, 33, 33, 44, 55, 65, 66, 77, 77, 99, 4000, 444444444]], [[64, 65, 4000, 444444444, 1000000000, 2000000000, 2000000000, 5000000000, 10000000000]]], "input_output_examples": "[[[[5, 15, 37, 25, 79]]], [[[5, 15, 25, 37, 79]]]]", "starter_code": "from typing import List\ndef comb_sort(nums: List[int]) -> List[int]:"}
{"task_id": "Mbpp/72", "requirement": "def dif_Square(n: int) -> bool:\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\"\"\"", "entry_point": "dif_Square", "canonical_solution": "\ndef dif_Square(n): \n    # see https://www.quora.com/Which-numbers-can-be-expressed-as-the-difference-of-two-squares\n    return n % 4 != 2\n", "base_input": [[5], [10], [15]], "plus_input": [[991], [567], [13], [24], [568], [992], [569], [990], [566], [true], [989], [25], [14], [565], [23], [15], [988], [12], [11], [16], [17], [993], [564], [563], [22], [10], [994], [9], [21], [995], [996], [20], [18], [997], [8], [987], [45], [562], [570], [26], [561], [998], [19], [77], [7], [76], [560], [986], [27], [44], [571], [28], [75], [46], [78], [74], [985], [29], [572], [984], [73], [983], [79], [573], [47], [50], [982], [981], [5], [71], [49], [80], [51], [999], [30], [81], [6], [1000], [980], [1001], [1002], [82], [1003], [52], [574], [53], [1004], [70], [575], [69], [576], [979], [83], [72], [68], [43], [89], [42], [977], [33], [4], [36], [978], [3]], "input_output_examples": "[[[5]], [[True]]]", "starter_code": "def dif_Square(n: int) -> bool:"}
{"task_id": "Mbpp/74", "requirement": "def is_samepatterns(colors: str, patterns: str) -> bool:\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\"\"\"", "entry_point": "is_samepatterns", "canonical_solution": "\ndef is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    pattern_color_dict = {pattern: set() for pattern in patterns}\n    for color, pattern in zip(colors, patterns):\n        pattern_color_dict[pattern].add(color)\n    return all(len(pattern_color_dict[pattern]) == 1 for pattern in patterns)\n", "base_input": [[["red", "green", "green"], ["a", "b", "b"]], [["red", "green", "greenn"], ["a", "b", "b"]], [["red", "green", "greenn"], ["a", "b"]]], "plus_input": [[["red", "green", "blue"], ["a", "b", "c"]], [["red", "red", "red"], ["a", "a", "a"]], [["red", "blue", "green"], ["a", "b", "c"]], [["red", "green", "blue", "red"], ["a", "b", "c", "a"]], [["red", "red", "blue", "blue"], ["a", "a", "b", "b"]], [["red", "green", "green", "blue"], ["a", "b", "b", "c"]], [["red", "red", "red", "red"], ["a", "a", "a", "a"]], [["red", "red", "green", "blue"], ["a", "a", "b", "c"]], [["red", "green", "green", "green"], ["a", "b", "b", "b"]], [[], ["a", "b", "c"]], [[], []], [["red", "green", "blue", "yellow"], ["a", "b", "b", "c"]], [["red", "green", "blue", "yellow"], ["a", "b", "c", "a"]], [["red", "red", "red", "red", "red", "red"], ["a", "b", "c", "a", "b", "c"]], [["red", "green", "blue", "red", "green", "blue"], ["a", "b", "c", "a", "b", "c"]], [["red", "green", "blue", "red", "red", "red"], ["a", "b", "c", "a", "b", "c"]], [["red", "green", "blue", "red", "blue", "green"], ["a", "b", "c", "a", "b", "c"]], [["a", "b", "cc", "c", "a"], ["a", "b", "cc", "c", "a"]], [["red", "green", "yellow"], ["a", "b", "c", "a"]], [["b", "c", "a", "b", "c"], ["red", "red", "red", "red", "bluered", "red"]], [["blue", "red", "red", "red", "red"], ["a", "a", "a", "a"]], [["a", "a", "b", "b", "b"], ["a", "a", "b", "b", "b"]], [["blue", "red", "red", "red", "red"], ["ared", "a"]], [["red", "red", "red", "red", "red", "red"], ["a", "b", "ared", "c", "a", "b", "c"]], [["red", "green", "blue", "red", "red", "red", "red"], ["a", "b", "ccc", "a", "b"]], [["red", "green", "bluue", "red", "red", "red"], ["red", "green", "bluue", "red", "red", "red"]], [["red", "red", "red"], ["red", "red", "red"]], [[false, true, false], [false, true, false]], [["red", "green", "blue", "yellow"], ["red", "green", "blue", "yellow"]], [["a", "b", "", "c"], ["a", "b", "", "c"]], [["ared", "a"], ["blue", "red", "red", "red", "red"]], [["blue", "red", "red", "red", "red"], ["blue", "red", "red", "red", "red"]], [["bluered", "red", "yellow", "red", "reyellow", "cc", "red"], ["bluered", "red", "yellow", "red", "reyellow", "cc", "red"]], [["ared", "rred", "green"], ["ared", "rred", "green"]], [[false], [false]], [["red", "green", "green", "green"], ["ccc", "b", "b", "b"]], [["blueccc", "blue", "red", "red", "red", "cc"], ["bluue", "a", "a", "a", "a"]], [["red", "green", "bluue", "red", "red"], ["red", "green", "bluue", "red", "red"]], [["red", "green", "blue", "eblue", "yellow", "blue"], ["red", "green", "blue", "eblue", "yellow", "blue"]], [["blueccc", "blue", "red", "red", "red", "cc"], ["bluue", "a", "a", "a"]], [["a", "a", "b", "bblueccc", "b", "b"], ["a", "a", "b", "bblueccc", "b", "b"]], [["red", "green", "blue", "yellow"], ["a", "b", "c", "a", "a"]], [["blue", "red", "red", "red", "red"], ["a", "a", "cc", "a"]], [["blueccc", "ared", "a"], ["blue", "red", "red", "red", "red"]], [[false, true, false, false], [false, true, false, false]], [["belue", "red", "red", "green", "blue", "red"], ["belue", "red", "red", "green", "blue", "red"]], [["red", "greeen", "blue", "red", "red", "red", "red", "red"], ["red", "greeen", "blue", "red", "red", "red", "red", "red"]], [["red", "green", "blue", "yellow"], ["a", "b", "c", "a", "a", "aa"]], [["red", "blue", "green"], ["a", "byellow", "c"]], [["red", "green", "green"], ["ccc", "b", "b", "b"]], [["red", "green", "blue", "red", "blue", "green"], ["b", "c", "a", "b", "c"]], [["blueccc", "blue", "red", "red", "blcccueccc", "red", "cc"], ["blueccc", "blue", "red", "red", "blcccueccc", "red", "cc"]], [["red", "rred", "green", "blue", "yellw", "eblue", "yellow", "blue"], ["red", "rred", "green", "blue", "yellw", "eblue", "yellow", "blue"]], [["gbluered", "yellow", "red", "blue", "green"], ["gbluered", "yellow", "red", "blue", "green"]], [[true, false], [true, false]], [["red", "green", "red"], ["a", "b", "c", "a"]], [["belue", "a"], ["belue", "a"]], [["green", "rred", "yellw", "green"], ["green", "rred", "yellw", "green"]], [["bluaredue", "red", "green", "bluue", "red", "red", "red"], ["bluaredue", "red", "green", "bluue", "red", "red", "red"]], [["bluue", "a", "a", "a"], ["bluue", "a", "a", "a"]], [["a", "bb", "c", "a"], ["a", "bb", "c", "a"]], [["a", "b", "c", "a", "b", "c"], ["a", "b", "c", "a", "b", "c"]], [["red", "greeen", "blue", "red", "red", "red", "red", "red", "greeen"], ["red", "greeen", "blue", "red", "red", "red", "red", "red", "greeen"]], [["blueccc", "blue", "red", "red", "blueccc", "red", "cc", "red", "red", "blueccc"], ["blueccc", "blue", "red", "red", "blueccc", "red", "cc", "red", "red", "blueccc"]], [["a", "red", "b", "rred", "c"], ["a", "red", "b", "rred", "c"]], [["a", "b", "c", "a", "a", "aa"], ["red", "green", "blue", "yellow"]], [["red", "green", "red"], ["a", "b", "c", "a", "a"]], [["ared", "rred", "green", "green"], ["ared", "rred", "green", "green"]], [["red", "blue", "yellow", "red"], ["red", "blue", "yellow", "red"]], [["red", "green", "blue", "bluue", "red", "red", "red"], ["red", "green", "blue", "bluue", "red", "red", "red"]], [["red", "red", "gbegen", "gbeen", "blue"], ["a", "a", "b", "c"]], [["red", "green", "blue", "red", "red", "red", "green", "green"], ["red", "green", "blue", "red", "red", "red", "green", "green"]], [["green", "c", "yellw", "green", "green"], ["green", "c", "yellw", "green", "green"]], [["red", "green", "blue", "bluue", "red", "red"], ["red", "green", "blue", "bluue", "red", "red"]], [["a", "b", "aa", "c", "a"], ["a", "b", "aa", "c", "a"]], [["red", "greeen", "red", "red", "red", "red", "red"], ["red", "greeen", "red", "red", "red", "red", "red"]], [["red", "red", "red", "red", "red", "yellow", "red"], ["red", "red", "red", "red", "red", "yellow", "red"]], [["green", "rred", "yellw"], ["green", "rred", "yellw"]], [["gbluered", "yellow", "belue", "blue", "green"], ["gbluered", "yellow", "belue", "blue", "green"]], [["gbluered", "yellow", "red", "blue", "green", "red"], ["gbluered", "yellow", "red", "blue", "green", "red"]], [["red", "green", "blue", "red", "red", "dred", "red"], ["red", "green", "blue", "red", "red", "dred", "red"]], [["gbluered", "yellow", "byellow", "breyellowyellow", "blue", "green", "red"], ["gbluered", "yellow", "byellow", "breyellowyellow", "blue", "green", "red"]], [["red", "green", "blue", "red", "red", "red"], ["red", "green", "blue", "red", "red", "red"]], [["red", "green", "yellow"], ["red", "green", "yellow"]], [["gbegen", "a", "b", "", "c"], ["gbegen", "a", "b", "", "c"]], [["blue", "red", "red", "blueccc", "cc", "red", "red", "blueccc"], ["blue", "red", "red", "blueccc", "cc", "red", "red", "blueccc"]], [["red", "green", "blue", "yellow"], ["a", "b", "b", "c", "b", "a"]], [["red", "green", "blue", "red", "blue", "green"], ["b", "c", "bb", "a", "b", "c"]], [["green", "blue", "yellow", "green"], ["a", "b", "c", "a", "a"]], [["green", "blue", "bluue", "red", "red", "red"], ["green", "blue", "bluue", "red", "red", "red"]], [["red", "red", "red", "gbegen"], ["a", "a", "a", "a"]], [["red", "red", "rebd", "red", "bluered", "red", "red"], ["red", "red", "rebd", "red", "bluered", "red", "red"]], [["red", "green", "blue", "eblue", "yellw", "yellow", "blue", "blue"], ["red", "green", "blue", "eblue", "yellw", "yellow", "blue", "blue"]], [["aa", "bluue", "a", "a", "a"], ["aa", "bluue", "a", "a", "a"]], [["red", "rred", "green", "blue", "yellw", "eblue", "yelolow", "blue"], ["red", "rred", "green", "blue", "yellw", "eblue", "yelolow", "blue"]], [["a", "b", "", "c", "a", "a", "aa"], ["red", "green", "blue", "yellow"]], [["red", "green", "red", "green", "blue"], ["red", "green", "red", "green", "blue"]], [["red", "green", "blue", "yellow"], ["a", "b", "c", "green", "a", "a"]], [["red", "yellow", "red"], ["red", "yellow", "red"]], [["red", "green", "green", "green", "green"], ["red", "green", "green", "green", "green"]], [["green", "rred", "yellw", "breyellowyellow", "green"], ["green", "rred", "yellw", "breyellowyellow", "green"]], [["green", "blue", "yellow", "green"], ["a", "b", "c", "a"]], [["reed", "blue", "red", "red", "red"], ["reed", "blue", "red", "red", "red"]], [["blueccc", "blue", "red", "red", "blueccc", "red", "cc", "red", "blueccc", "red"], ["blueccc", "blue", "red", "red", "blueccc", "red", "cc", "red", "blueccc", "red"]], [["red", "green", "green", "green", "bb"], ["ccc", "b", "b", "b", "ccc"]], [["b", "green", "rred", "yellw", "breyellowyellow", "breyellowyellow", "green"], ["b", "green", "rred", "yellw", "breyellowyellow", "breyellowyellow", "green"]], [["gbluered", "yellow", "bb", "belue", "rebd", "blue", "green", "yellow"], ["gbluered", "yellow", "bb", "belue", "rebd", "blue", "green", "yellow"]], [["red", "greeen", "blue", "red", "red", "reyellowd", "red"], ["red", "greeen", "blue", "red", "red", "reyellowd", "red"]], [["red", "blue", "yellow", "yellow"], ["red", "blue", "yellow", "yellow"]], [["red", "green", "eblue", "blue"], ["a", "b", "b", "c"]], [["red", "green", "gbluered", "blue", "bluue", "gbluered", "red", "red"], ["red", "green", "gbluered", "blue", "bluue", "gbluered", "red", "red"]], [["ared"], ["blue", "red", "red", "red", "red"]], [["red", "red", "red", "red", "red", "red", "red", "red"], ["a", "b", "ared", "c", "a", "b", "c", "a"]], [["red", "red", "red", "red", "red", "red", "red", "rrebded"], ["a", "b", "ared", "c", "a", "b", "c", "a"]], [["a", "b", "abluered", "aa", "c", "aa", "aa"], ["a", "b", "abluered", "aa", "c", "aa", "aa"]], [["a", "", "a", "b", "b"], ["a", "", "a", "b", "b"]], [["gbegen", "a", "b", "c", "c"], ["gbegen", "a", "b", "c", "c"]]], "input_output_examples": "[[[['red', 'green', 'green'], ['a', 'b', 'b']]], [[True]]]", "starter_code": "def is_samepatterns(colors: str, patterns: str) -> bool:"}
{"task_id": "Mbpp/75", "requirement": "from typing import List\ndef find_tuples(test_list: List[List[int]], K: int) -> List[List[int]]:\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\"\"\"", "entry_point": "find_tuples", "canonical_solution": "\ndef find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res\n", "base_input": [[[[6, 24, 12], [7, 9, 6], [12, 18, 21]], 6], [[[5, 25, 30], [4, 2, 3], [7, 8, 9]], 5], [[[7, 9, 16], [8, 16, 4], [19, 17, 18]], 4]], "plus_input": [[[[12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 3], [[], 4], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 11], [[[11, 22, 33, 44, 55], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 11], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 3], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 4], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 65], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 33], [[], 5], [[[12, 24, 36, 48, 60], [15, 30, 13, 60, 75], [22, 33, 44, 55, 66], [15, 30, 45, 60, 75, 75], [8, 16, 24, 32, 40]], 4], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [4, 8, 12, 16, 20]], 55], [[[12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 16], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 8], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 3], [[], 6], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 65], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [9, 18, 27, 36, 45]], 3], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 45], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 45], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [15, 30, 45, 60, 75]], 65], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 20], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 27], [[[22, 33, 65, 44, 55, 66], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [15, 30, 45, 60, 75]], 65], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [65, 32, 48, 64], [6, 12, 18]], 27], [[[13, 39, 66, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 11], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 10, 32, 40], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 44], [[[12, 24, 36, 59, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 4], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 32], [[[13, 26, 39, 52, 65], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 33], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 12], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 65], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18], [11, 12, 24, 36]], 20], [[[4, 8, 12, 16, 20], [4, 8, 12, 16, 20, 16], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 3], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 40], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66, 66], [8, 16, 24, 32, 40]], 40], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 18]], 27], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75, 15], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 65], [[[22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 65], [[[12, 24, 36], [5, 15, 20], [18, 9, 27, 27], [32, 48, 64], [6, 12, 18]], 16], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [48, 64], [6, 18, 6]], 13], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [48, 64], [18, 9, 27], [6, 18, 6]], 13], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [22, 33, 44, 55, 66]], 40], [[[15, 30, 45, 60, 75], [8, 16, 24, 32, 40, 16], [22, 33, 44, 55, 66], [8, 16, 10, 32, 40], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 44], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45], [6, 12, 18, 24, 30]], 32], [[[11, 22, 33, 44, 55], [17, 34, 51, 68, 85, 85], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 11], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 25, 32, 40], [22, 33, 44, 55, 66]], 40], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [27, 26, 39, 52, 65], [9, 18, 27, 36, 45]], 48], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75, 15], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 65], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 8], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55, 44], [11, 22, 33, 44, 55]], 3], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [4, 8, 12, 16, 20], [9, 18, 27, 36, 45]], 55], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 9], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45], [6, 44, 18, 24, 30], [6, 12, 18, 24, 30]], 32], [[[5, 15, 20, 20], [11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [48, 64], [6, 18, 6]], 8], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 85], [[[12, 24, 36, 48, 60, 48], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40], [15, 30, 45, 60, 75]], 4], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 27], [48, 64], [18, 9, 27], [6, 18, 6]], 13], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 24], [[], 3], [[[5, 15, 20, 20], [11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [11, 12, 24, 33], [18, 9, 27], [48, 64], [6, 18, 6]], 8], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45], [6, 44, 18, 24, 30], [6, 12, 18, 24, 30]], 55], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 66], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [9, 18, 27, 36, 45]], 85], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 34], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 48], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 41], [[[11, 22, 33, 44, 55], [17, 34, 51, 68, 6, 85, 85], [17, 34, 51, 68, 85, 85], [11, 54, 22, 33, 44, 55], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 52], [[[11, 12, 24, 36], [12, 24, 36], [18, 9, 27], [48, 64], [18, 9, 27], [6, 18, 6]], 40], [[[13, 26, 39, 53, 52, 65], [11, 22, 33, 44, 55], [17, 34, 51, 68, 85, 85], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 11], [[[13, 26, 39, 53, 52, 65], [11, 22, 33, 44, 55], [17, 34, 51, 68, 85, 85], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 9], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 10, 32, 40], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 45], [[[6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [27, 26, 39, 52, 65], [9, 18, 27, 36, 45]], 48], [[], 51], [[[13, 26, 39, 51, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 32], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45], [9, 18, 27, 36, 45]], 11], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 16, 24, 32, 40]], 8], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 28], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [65, 32, 48, 64], [6, 12, 18]], 3], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [6, 12, 18, 24, 30]], 8], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [8, 18, 24, 32, 40], [8, 16, 24, 32, 40]], 65], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [48, 64], [6, 18, 6]], 12], [[], 34], [[[12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 20], [[[15, 30, 45, 60, 75], [22, 33, 22, 44, 55, 66], [8, 16, 24, 32, 40], [15, 30, 45, 60, 75]], 65], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55], [9, 18, 27, 36, 45]], 64], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 48], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45], [9, 18, 27, 36, 45], [9, 18, 27, 36, 45]], 24], [[[13, 26, 39, 52, 65], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [22, 33, 44, 55, 66], [9, 18, 27, 36, 45]], 41], [[[5, 15, 20, 20], [11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [11, 12, 24, 33], [18, 9, 27], [48, 64], [6, 18, 6]], 64], [[[11, 12, 24, 36], [12, 24, 36], [20, 5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 28], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45, 45], [9, 18, 27, 36], [11, 22, 33, 44, 55]], 18], [[[12, 24, 36], [6, 12, 18], [5, 15, 20], [18, 9, 27, 27], [32, 48, 64], [6, 12, 18]], 10], [[[4, 8, 12, 16, 20], [4, 8, 12, 16, 20, 16], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55]], 3], [[[4, 8, 12, 16, 20], [4, 8, 12, 16, 20, 16], [6, 12, 18, 24, 30], [9, 18, 15, 27, 36, 45], [11, 22, 33, 44, 55]], 3], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [32, 48, 64], [6, 12, 18]], 9], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75, 15], [45, 33, 44, 55, 66], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 65], [[[15, 30, 45, 60, 75], [22, 33, 44, 55, 66], [44, 8, 16, 10, 32, 40], [8, 16, 10, 32, 40], [8, 16, 24, 32, 40], [8, 16, 24, 32, 40]], 45], [[[5, 15, 20, 20], [11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [48], [18, 9, 27], [48, 64], [6, 18, 6]], 8], [[[12, 24, 36, 48, 60], [15, 30, 45, 60, 75, 15], [22, 33, 44, 55, 66], [8, 16, 24, 32], [8, 16, 24, 32, 40], [15, 30, 45, 60, 75, 15], [22, 33, 44, 55, 66]], 65], [[[4, 8, 12, 16, 20], [4, 8, 12, 16, 20, 16], [6, 12, 18, 24, 30], [9, 18, 15, 27, 36, 45], [11, 22, 33, 44, 55]], 2], [[[11, 12, 24, 36], [12, 24, 36], [64], [5, 15, 20], [18, 9, 27], [48, 64], [6, 18, 6]], 13], [[[11, 12, 24, 36], [12, 24, 36], [5, 15, 20], [18, 9, 27], [65, 32, 48, 64, 64], [6, 12, 18]], 3], [[[11, 22, 33, 44, 55], [17, 34, 51, 68, 85, 85], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 68], [[[4, 8, 12, 16, 20], [6, 12, 18, 24, 30], [9, 18, 27, 36, 45], [11, 22, 33, 44, 55, 44], [11, 22, 33, 44, 55]], 2], [[[17, 34, 51, 68, 85, 85], [13, 26, 39, 52, 65], [17, 34, 51, 68, 85], [5, 10, 15, 20, 25]], 16], [[[4, 8, 12, 16, 20], [4, 8, 12, 16, 20, 16], [6, 12, 18, 24, 30], [9, 18, 15, 27, 36, 45]], 2]], "input_output_examples": "[[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6]], [[[6, 24, 12]]]]", "starter_code": "from typing import List\ndef find_tuples(test_list: List[List[int]], K: int) -> List[List[int]]:"}
{"task_id": "Mbpp/77", "requirement": "def is_Diff(n: int) -> bool:\"\"\"\nWrite a python function to find whether a number is divisible by 11.\n\"\"\"", "entry_point": "is_Diff", "canonical_solution": "\ndef is_Diff(n): \n    return n % 11 == 0 \n", "base_input": [[12345], [1212112], [1212]], "plus_input": [[12345678901234567890], [98765432109876543210], [-1212], [-12345], [-12345678901234567890], [987654321098765432109876543210], [-123456789012345678901234567890], [123456789012345678901234567890], [-987654321098765432109876543210], [9876543210987654321098765432110], [9876543210987654321098765432101], [-9876543210987654321098765432110], [-9876543210987654321098765432101], [-1000], [1001], [0], [-65], [1002], [-12345678901234567889], [true], [-56], [98765432109876543209], [9876543210987654321098765432102], [-64], [-9876543210987654321098765432100], [-12344], [-63], [987654321098765432109876543211], [false], [-999], [98765432109876543211], [-57], [-66], [-55], [-123456789012345678901234567891], [-987654321098765432109876543211], [123456789012345678901234567891], [-67], [-39], [61], [987654321098765432109876543209], [-12343], [987654321098765432109876543208], [-54], [-58], [987654321098765432109876543212], [9876543210987654321098765432103], [-12345678901234567891], [-62], [-9876543210987654321098765432111], [-12345678901234567888], [12345678901234567891], [12345678901234567892], [1], [987654321098765432109876543214], [98765432109876543212], [-9876543210987654321098765432102], [-9876543210987654321098765432099], [81], [987654321098765432109876543213], [9876543210987654321098765432105], [-9876543210987654321098765432112], [123456789012345678901234567889], [9876543210987654321098765432104], [-59], [-61], [-9876543210987654321098765432098], [-1213], [96], [1000], [98765432109876543208], [12345678901234567889], [-123456789012345678901234567892], [-38], [-987654321098765432109876543208], [-123456789012345678901234567893], [-987654321098765432109876543212], [12345678901234567893], [999], [-60], [987654321098765432109876543215], [-40], [-53], [100], [82], [-12346], [80], [-52], [-78], [-123456789012345678901234567889], [-12342], [60], [-68], [9876543210987654321098765432100], [-9876543210987654321098765432113], [-123456789012345678901234567888], [1003], [47], [79], [59], [9876543210987654321098765432108], [36], [37], [9876543210987654321098765432107], [2], [12345678901234567894], [98765432109876543213], [-12347], [-1211], [-88], [1004], [98765432109876543214], [-51], [-998], [-50], [-9876543210987654321098765432109]], "input_output_examples": "[[[12345]], [[False]]]", "starter_code": "def is_Diff(n: int) -> bool:"}
{"task_id": "Mbpp/79", "requirement": "def word_len(s: str) -> bool:\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\"\"\"", "entry_point": "word_len", "canonical_solution": "\ndef word_len(s): \n    return len(s) % 2 == 1\n", "base_input": [["Hadoop"], ["great"], ["structure"]], "plus_input": [["a"], ["longstringwithmixture"], ["lonlongstringwithmixturegstringwithmixture"], ["lonlongstringwithmixturegstringwithmixturlongstringwithmixturee"], ["lonlongstringwithmixturegstringwithmxture"], ["longstringwithmiixtiure"], ["lnongstringwithmixture"], ["alongstringwithmiixtiure"], ["lonlongstringwitlongstringwithmiixtiurehmixturegstringwithmxture"], ["lonlongstringwithmixturegstringwithlongstringwithmixturemixture"], ["lonlongstringwitringwithmixture"], ["lnongstringwithmixturea"], ["mlongstringwithmiixtiure"], ["lonlongstrringwithmixturegstringwithlongstringwitnhmixturemixture"], ["longstringwithmiixlonlongstringwithmixturegstringwithmxturetiure"], ["lonlongstringwitringwhithmixture"], ["lonlongstringwithmixturegstringwithmixturlongstringwithmixturelongstringwithmiixlonlongstringwithmixturegstringwithmxturetiuree"], ["lonlongstringwithmixlonlongstringwithmixturegstringwithmixtureturegstringwithmixture"], ["lonlongstringwitringwithmixtongtstringwitringwhithmixture"], ["lnongstringwithmixlonlongstringwithmixturegstringwithmxtureturea"], ["lnmlongstringwithmiixtiureongstringwithmixturea"], ["longstringwithmiixlonlongstringwithmixturegstlringwithmxturetiure"], ["TtYAzEr"], ["lonlongstrlonlongstrringwithmixturegstringwithlongstringwitnhmixturemixtureingwithmixturegstringwithmxture"], ["lnmlongstringwithmiixtiureongstringwithmixturelonlongstringwitringwhithmixturea"], ["longstlongstringwithmiixlonlongstringwithmixturegstringwithmxturetiureringwithmiixtiure"], ["lonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnhmixturemixtureingwithmixturegstrinhmtxture"], ["aa"], ["longastringwithmiixtiure"], ["longastringxwithmiixtiure"], ["liongastringwithmixtiure"], ["lonlongstringwithmixlonlongstrilongstringwithmixturengwithmixturegstringwithmixtureturegstringwithmixture"], ["lnongstriengwithmixturea"], ["longstringwithmiixlonlongstringwithmialongstringwithmiixtiurexturegstringwithmxturetiure"], ["longstringwithmiixlonnlongstringwithmixturegstringwithmxturetiure"], ["alongslongastringwithmiixtiuretringwithmiixtiure"], ["lonlongstringwithmixturegstrinurlongstringwithmixturee"], ["longstringwithmiixlonlongstrinlonlongstringwithmixturelongstringwithmiixlonlongstringwithmixturegstringwithmxturetiuregstringwithlongstringwithmixturemixturethmxturetiure"], ["lonlongstringwitringwithmixtongtstringwitringwhitthmixture"], ["longstringwithmiixlonlongstringwithmialongstrilnmlongstringwithmiixtiureongstringwithmixtureangwithmiixtiurexturegstringwithmxturetiure"], ["lonlongstrinlonlongstringwithmixturegstringwithmxturegwitringwhithmixture"], ["lonlongstringwitringwithmixlonlongstringwithmixturegstringwithmxtureture"], ["mlongstringwithmiiwxtiure"], ["lionglongastringxwithmiixtiureastringwithmixtiure"], ["lonlongstringwitringwiithmixture"], ["longstlongstringwithmiixlonlongstringwithmixturegstringwithmxturetiurerinigwithmiixtiure"], ["mlongstringwwithmiixtiure"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiureonlongstrlonlongstrringwithmixturegstringwithlongstringwitnhmixturemixtureingwithmixturegstringwithmxtureingwitnhmixturemixture"], ["lnongstringwithmirea"], ["lonlongstringwithmixturegstringwithmixturlongstlonlongstrlonlongstrringwithmixturegstringwitlonlongstringwitringwithmixlonlongstringwithmixturegstringwithmxtureturegwithmixturee"], ["mxlongstringwithmiixtiure"], ["lonlongstringwithmixturegstringwithmxturlongstringwithmixturee"], ["lnmlongstringwithmiixtiureongstringwithmixtulongstlongstringwithmiixlonlongstringwithmixturegstringwithmxturetiurerinigwithmiixtiure"], ["mlongstrintgwwithmiixtiure"], ["lonlongstringwitringwithmixtongtstringwitringwhtithmixture"], ["lonlongstringwithmixturegstringwithmixturlongstlonlongstringwithmixturegstringwithmixturlongstringwithmixturelongstringwithmiixlonlongstringwithmixturegstringwithmxturetiureeringwithmixturelongstringwithmiixlonllonlongstringwitringwiithmixturegstringwithmxturetiuree"], ["lonlongstrhingwithmixlonlongstrilongstringwithmixturengwithmixturegstrhgingwithmixtureturegstringwithmixture"], ["ltiongastringwithmixtiure"], ["liongastringwithmtixtiure"], ["lnongstringwgithlnongstringwithmixtureturegstringwithmxtureturea"], ["lgstringwithmixturee"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiureonlongstrlonlongstrringwithmixturegstringwithlongstringwiwithmxtureingwitnhmixturemixture"], ["alonlongstringwithmixturegstringwithmixturlongstlonlongstrlonlongstrringwithmixturegstringwitlonlongstringwitringwithmixlonlongstringwithmixturegstringwithmxtureturegwithmixtureea"], ["lonlongstrhingwithmixlonlongstrilongstringwithmixturengwithmixturegstrhgingwithmixturture"], ["lonlongstrinlonlongstringwithmixturegstringwithmxturegwitringwhithmlongstringwithmiixlonlongstringwithmixturegstlringwithmxturetiureixture"], ["lnmlongstringwithmiixtiurreonwgstringwithmixturelonlongstringwitringwhithmixturea"], ["lonlongstrlongstringwithmiixlonlongstrinlonlongstringwithmixturelongstringwithmiixlonlongstringwithmixturegstringwithmxturetiuregstringwithlongstringwithmixturemixturethmxturetiureingwitringwithmixture"], ["lonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnlongastringxwithmiixtiurehmixturemixtureingwithmixturegstrinhmtxture"], ["lonlongstringwitringwlonlongstrringwithmgwitnhmixturemixturehithmixture"], ["lonlongstringwitritngwithmixture"], ["lnongs"], ["alongslonlongstrlonlongstrrinlonlongstringwithmixturegstringwithmixturlongstringwithmixtureegwithmixturegstringwithlongstringwitnhmixturemixtureingwithmixturegstringwithmxturelongastringwithmiixtiuretringwithmiixtiure"], ["lnongstrilonlongstrringwithmixturegstringwithlongstringwitnhmixturemixturengwithmixlonlongstringwithmixturelonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnlongastringxwithmiixtiurehmixturemixtureingwithmixturegstrinhmtxturegstringwithmxtureturea"], ["longastringxwithmiixtiurliongastringwithmtixtiuree"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiulreonlongstrlonlongstrringwithmixturegstringwithlongstringwiwithmxtureingwitnhmixturemixture"], ["longstringwithmiixlonlongstringwitlongstringwithmiixtiuremixturegstlringwithmxturetiure"], ["lonlongstringwithmixturegstrinurlongstringwithhmixturee"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiureonlongstrlonlongstrringwithmixturegstringwithlongstringwiwithmxtureingwitnhmixturemixre"], ["ltiongastringwithmixtinure"], ["lonlongstringwithmixturegstringwithmixturlongstlonlongstrlonlthmixturegstringwithmxtureturegwithmixturee"], ["lonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnhmixtulonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiureonlongstrlonlongstrringwithmixturegstringwithlongstringwiwithmxtureingwitnhmixturemixreremixtureingwithmixturegstrinhmtxture"], ["lonlongstringwitrinthmixtongtstrinigwitringwhtithmixture"], ["longstringwitlongstringwithmiixlonlongstringwithmilonlongstringwitringwithmxturexturegstlringwithmxturetiurehmiixtiure"], ["mxllonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnhmixturemixtustrinhmtxtureongstringwithmiixtiure"], ["lonlongstrlongstringwithmiixlonlongstrinlonlongstringwithmixturelongstringwithmiixlonlongstringwithmixturegstringwithmxturetiuoregstringwithlongstringwithmixturemixturethmxturetiureingwitringwithmixture"], ["lnmlongstringwithmiixtiureongstringwithmixturealonlongstringwithmixturegstringwithmixturlongstringwithmixturee"], ["longstlongstrsingwithmiixlonlongstringwithmixturegstringwithmxturetiuaare"], ["lgstringwithmlonlongstringwithmixturegstringwithmxtureixturee"], ["alongslonlongstrlonlongstrrinlonlongstringwithmixturegstringwithmixturlongstringwithmixtureegwithmixturegstringwithlongstringwitnhmtixturemixtureingwithmixturegstringwithmxturelongastringwithmiixtiuretringwithmiixtiure"], ["lithmiixtgwithmxturetiure"], ["lnmlongstringwithmiixtiurreonwgstringwithmixturelonlongstringwitlongstlongstringwithmiixlonlongstringwithmixturegstringwithmxturetiurerinigwithmiixtiureringwhithmixturlongstringwitlongstlonlongstringwitringwiithmixtureringwithmiixlonlongstringwithmilonlongstringwitringwithmxturexturegstlringwithmxturetiurehmiixtiureea"], ["mxllonlongstrlonlongstrringwithmixturegstringwithlongstringwitwnhmixturemixtustrinhmtxlonlongstringwithmixturegstringwithmixturlongstlonlongstrlonlthmixturegstringwithmxtureturegwithmixtureetureongstringwithmiixtiure"], ["lonlongstrlonlongstrringhwithmixturegstringwithlongstringwitnhmixturemixtureingwithmixturegstringwithure"], ["longstlongstrsingwithmiixlonlongsxtringwithmiithmxturetiuaare"], ["lgstringwithmixtlnongstringwithmireareelnmlongstringwithmiixtiureongstringwithmixturelonlongstringwitringwhithmixturea"], ["lolongastringxwithmiixtiurliongastringwithmtixtiureengstringwithmiixlonlongstrinlonlongstringwithmixturelongstringwithmiixlonlongstringwithmixturelongstringwithmiixlonnlongstringwithmixturegstringwithmxturetiuregstringwithmxturetiuregstringwithlongstringwithmixturemixturethmxturetiure"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiulreonlongstrlonlongstrringwithmixturegstringwlonlongstringwitringwithmixturethmxtureingwitnhmixturemixture"], ["lnmlongstringwithmiimxtiureongstringwithmixturea"], ["lonlongstrringwithmixturegstringwithlongstrllongstringwithmiixtiulreliongastringwithmtixtiureonlongstrlonlongstrringwithmixturegstringwithlongstringwiwithmxtureingwitnhmixturemixture"], ["longstrinithmixture"], ["lgstringwithmixtlnongstringwithmireareelnmlongstringwithmiixtiurheongstringwithmixturelonlongstringwitringwhithmixturea"], ["longasntringxwithmiixtiure"]], "input_output_examples": "[[['Hadoop']], [[False]]]", "starter_code": "def word_len(s: str) -> bool:"}
{"task_id": "Mbpp/80", "requirement": "def tetrahedral_number(n: int) -> float:\"\"\"\nWrite a function to find the nth tetrahedral number.\"\"\"", "entry_point": "tetrahedral_number", "canonical_solution": "\ndef tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6\n", "base_input": [[5], [6], [7]], "plus_input": [[10], [11], [true], [false], [12], [13], [9], [14], [8], [15], [16], [73], [17], [7], [74], [75], [76], [29], [78], [18], [77], [19], [72], [28], [30], [6], [55], [56], [5], [3], [2], [57], [79], [4], [20], [31], [1], [71], [84], [54], [95], [85], [53], [39], [58], [80], [70], [59], [52], [32], [40], [38], [83], [82], [26], [60], [61], [62], [37], [33], [86], [81], [66], [41], [36], [96], [27], [35], [87], [69], [88], [97], [68], [65], [21], [34], [64], [94], [89], [67], [42], [98], [100], [22], [99], [90], [91], [43], [101], [0], [92], [63], [25], [23], [44], [51], [93], [24], [102], [50], [45]], "input_output_examples": "[[[5]], [[35]]]", "starter_code": "def tetrahedral_number(n: int) -> float:"}
{"task_id": "Mbpp/82", "requirement": "import math\ndef volume_sphere(r: float) -> float:\"\"\"\nWrite a function to find the volume of a sphere.\"\"\"", "entry_point": "volume_sphere", "canonical_solution": "\nimport math\ndef volume_sphere(r):\n  return (4./3.) * math.pi * (r**3)\n", "base_input": [[10], [25], [20]], "plus_input": [[3.5], [1000000.0], [3.141], [10000000000.0], [3.14159265], [4.623802984914555], [3.3559788784471767], [66], [4.869200998343475], [3.8682074878773713], [918660.8851175675], [67], [2.882805679516125], [5.334665111091932], [3.3742973741685773], [1370408.3632012897], [2.1679948447223243], [6.1937397356958686], [68], [2.5343594560319853], [2.3432251842864593], [4.61675941883145], [4.371968506027651], [5.592539737328484], [745764.3921613692], [2.9898806623772485], [1300062.0481719284], [2.5896160698519415], [3.315962725294531], [8.526243131220685], [7.966847190064601], [3.4948208700163326], [3.092435587548573], [980845.2335352049], [2.161534559679202], [6.337453960004688], [918661.1231404628], [1.708581242035472], [6.268623349038191], [4.445885418463103], [69], [1206585.2634025752], [70], [5.253217457458149], [2.574352689612276], [8.876033871274153], [2.217295171366912], [5.148340229570737], [5.7430353597257335], [6.798195121344899], [918660.6321974591], [2.714392744717933], [1206585.7451337874], [4.454238599875553], [4.532844704583202], [2.9221428096017963], [5.9095950914668425], [1354585.0574878817], [1.3593066232553286], [870299.1979522441], [4.589385338378119], [2.111585416266776], [0.9463990934397435], [true], [82.06805292937108], [5.3222759634147385], [3.9025520292716678], [2.1319562379470947], [1206584.7863918154], [4.051515228306216], [2.760921157223623], [745765.2991203185], [980845.1688878584], [2.803507749709366], [1.862378605627123], [1.3300722837430694], [96.33023854016932], [2.9049275477536], [1000000.8406259468], [53], [2.9211190247221785], [8.442873354975713], [6.9904770599923065], [5.394810798758247], [6.555694849044899], [2.591536041748832], [2.121870489897608], [1054792.4194213152], [4.146640167841869], [1.7582778285009857], [3.716476256173695], [4.990472347611788], [9.380605161871557], [7.081577583743362], [3.2232571533460854], [1370408.265351601], [4.789548148841643], [5.40747011739556], [2.2367969243507684], [2.6601406350111847], [4.772435918308454], [1.5596351962154023], [3.150384912225208], [10.09894030966326], [7.0674793300609355]], "input_output_examples": "[[[10]], [[4188.790204786391]]]", "starter_code": "def volume_sphere(r: float) -> float:"}
{"task_id": "Mbpp/84", "requirement": "def sequence(n: int) -> int:\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\"\"\"", "entry_point": "sequence", "canonical_solution": "\ndef sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]\n", "base_input": [[10], [2], [3]], "plus_input": [[100], [1000], [10000], [1000000], [49284], [76589], [92346], [109872], [92345], [76590], [1001], [10001], [109871], [true], [101], [99], [109873], [76588], [109870], [999999], [999998], [28], [9999], [109874], [49283], [102], [76591], [98], [92344], [29], [999], [109869], [109868], [97], [109867], [49285], [9998], [109866], [88], [49282], [30], [109876], [87], [31], [49280], [92343], [32], [92342], [49281], [103], [76592], [999997], [85], [95], [76587], [25], [86], [89], [104], [96], [27], [109875], [84], [1000001], [9997], [997], [49286], [1002], [105], [11], [9996], [1000002], [92341], [9], [8], [1000003], [76586], [109865], [12], [76585], [26], [996], [33], [49287], [10], [92340], [76593], [92347], [76584], [7], [92348], [34], [92339], [106], [6], [76594], [109864], [92338], [998], [49288], [76595], [92337], [76583], [13], [83], [1004], [23], [82]], "input_output_examples": "[[[10]], [[6]]]", "starter_code": "def sequence(n: int) -> int:"}
{"task_id": "Mbpp/85", "requirement": "import math\ndef surfacearea_sphere(r: float) -> float:\"\"\"\nWrite a function to find the surface area of a sphere.\"\"\"", "entry_point": "surfacearea_sphere", "canonical_solution": "\nimport math\ndef surfacearea_sphere(r):\n  return 4 * math.pi * (r**2)\n", "base_input": [[10], [15], [20]], "plus_input": [[0.5], [1000], [1.25], [1e-10], [10000000000.0], [true], [0.8797935814628997], [0.5598154120615232], [1.099652034619149], [1.4666806892181193e-10], [0.30075595752911943], [0.14131211326255033], [1.5957056333538597], [2.8446633646372703], [1.0135226864402946], [999], [0.4652485633326504], [1.6160933440485161], [1.2395141071553297], [1001], [1.371623122065585], [6.016010239335242e-11], [0.3416547044021554], [1.4012158763654516], [0.2151302194789502], [0.9610743975015349], [1.2824168057024987], [1.2350343793427891], [1.741473062111801], [0.8328344786121058], [1.183605703278993], [0.3611170633175245], [0.7555326580733448], [97.62730112830147], [0.2732793706097826], [0.7951715096838966], [1.5501230356650713], [0.6842351453078037], [1.0317072568457641], [1.8059908182330324], [0.5075339315400214], [0.7681946087260797], [2.0852972065009174], [1.2988601893200238], [0.603044867219653], [1.4026942852103004], [0.523212033970379], [1.4597394961162697], [0.35775373645335146], [2.0479628632355526e-10], [35], [78], [0.6507313974062889], [4.365800974062854], [1.8456085367711623], [5.158707823383085], [79], [98.55913813353447], [1.4247236940537644], [1.9675371646406168], [0.9005697011096585], [1.8552473563367964], [2.012892104151268], [0.3631985979165624], [1.4033799197683636], [0.9268500963761888], [0.316208014117482], [1.2705215198025646e-10], [1002], [2.2262142172391357], [1.0831631055569682], [0.345186802549617], [0.4137398550418435], [0.5767615986315501], [2.07943497754721], [0.48838279998965645], [0.3271784231301367], [0.623788870153854], [0.5543692007776275], [9.149067620466951], [2.3096767309847452], [1.5560367329991556], [0.3202451092926611], [1.8404062689910736], [0.5726009377678422], [0.8357084454950721], [0.4686710492184495], [1.1902208721405216], [0.9609380264864483], [9857375230.431854], [1.6292570499973758], [0.776765114340302], [0.2810143961710297], [0.6386231930163654], [0.7825150182275014], [0.8887021798812079], [0.2705076454130074], [0.7063890179953193], [0.9919682715828331], [0.18724175315316485], [0.47251742847046363], [0.34091721710471784], [0.48848524318350334], [60.94952675176301], [0.34974511524935736]], "input_output_examples": "[[[10]], [[1256.6370614359173]]]", "starter_code": "def surfacearea_sphere(r: float) -> float:"}
{"task_id": "Mbpp/86", "requirement": "def centered_hexagonal_number(n: int) -> int:\"\"\"\nWrite a function to find nth centered hexagonal number.\"\"\"", "entry_point": "centered_hexagonal_number", "canonical_solution": "\ndef centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1\n", "base_input": [[10], [2], [9]], "plus_input": [[1000000], [true], [1000001], [1000002], [999999], [79], [999998], [999997], [80], [1000003], [81], [78], [82], [999996], [77], [84], [83], [999995], [85], [999994], [76], [999993], [86], [75], [1000004], [74], [88], [93], [94], [92], [999992], [87], [999991], [91], [999989], [89], [999987], [90], [97], [52], [96], [53], [95], [999990], [1000005], [999986], [98], [999985], [51], [999984], [54], [50], [999982], [999988], [73], [999981], [49], [99], [38], [48], [37], [20], [21], [36], [72], [35], [55], [999983], [100], [70], [71], [1000006], [33], [19], [31], [32], [22], [30], [23], [101], [18], [24], [34], [56], [47], [102], [17], [29], [57], [69], [39], [103], [40], [58], [999980], [15], [104], [16], [28], [105], [27]], "input_output_examples": "[[[10]], [[271]]]", "starter_code": "def centered_hexagonal_number(n: int) -> int:"}
{"task_id": "Mbpp/87", "requirement": "import collections as ct\ndef merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\"\"\"", "entry_point": "merge_dictionaries_three", "canonical_solution": "\nimport collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict\n", "base_input": [[{"R": "Red", "P": "Pink"}, {"G": "Green"}, {"O": "Orange", "W": "White", "B": "Black"}], [{"R": "Red", "P": "Pink"}, {"G": "Green", "W": "White"}, {"L": "lavender", "B": "Blue"}], [{"R": "Red", "P": "Pink"}, {"L": "lavender", "B": "Blue"}, {"G": "Green", "W": "White"}]], "plus_input": [[{}, {}, {}], [{}, {"A": "Apple"}, {}], [{"A": "Apple"}, {}, {}], [{}, {}, {"A": "Apple"}], [{"A": {"B": {"C": {"D": "Apple"}}}}, {}, {}], [{"R": {"B": {"P": {"M": "Red"}}}}, {"L": {"B": "Blue"}}, {"G": {"W": "Green"}}], [{}, {"A": {"X": {"Y": {"Z": "Apple"}}}}, {}], [{"R": {"B": {"P": {"M": "Red"}}}}, {"G": {"W": "White"}}, {"L": {"B": "Blue"}}], [{"-20.518312632449252": -16, "-0.31776260008138024": 65}, {}, {}], [{"A": {"B": {"C": {"D": "Apple"}}}}, {"B": "yS", "bXTSGefP": "zqKImWxAN"}, {}], [{}, {"-59": -20.518312632449252, "65": -16}, {}], [{}, {"A": "C", "W": "Appple"}, {}], [{}, {"-59": -20.518312632449252, "65": -16}, {"-73.06068215185819": 37, "-20.518312632449252": -49, "-50.80098800326578": -49}], [{"-24.325512454128287": "ngwPYYUsW", "-0.31776260008138024": "R", "64.10081127712078": ""}, {}, {}], [{"-24.325512454128287": "ngwPYYUsW", "-0.31776260008138024": "R", "64.10081127712078": ""}, {}, {"-34": true, "-86": -73.06068215185819, "74": {"37": false, "-95": false, "58": true, "65": true, "-85": true, "98": false, "51": true}, "-61": null, "-49": "CjqqZMMy", "-47": -16, "65": "D", "-59": true}], [{}, {"W": "bXTSGefP"}, {}], [{}, {"A": {}, "MA": {}, "AMA": {"HzgYlcGpOG": "White", "ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}, "MAA": {"HzgYlcGpOG": "White", "ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}}, {}], [{}, {"-59": -20.518312632449252}, {}], [{"R": {"B": {"P": {"M": "Red", "DM": "R"}}, "": {"P": {"M": "Red", "DM": "R"}}}}, {}, {"G": {"W": "White", "WW": "WHzgYlcGpOGhite"}, "GG": {"W": "White", "WW": "WHzgYlcGpOGhite"}}], [{}, {}, {"-17": false, "98": true, "-49": false, "35": true}], [{}, {}, {"-17": false, "98": true, "-49": false, "35": true}], [{"A": {"B": {"C": {"D": "Appe"}}, "Red": {"C": {"D": "Appe"}}}}, {"B": "yS", "bXTSGefP": "zqKImWxAN"}, {}], [{}, {"false": "IANrUc", "-55": "", "-16": "BdGTYTf", "-47": "b", "87": "HTv", "81": "Green", "-59": "yS", "65": "AYC"}, {"A": {"B": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "Red": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "BlueB": {"C": {"D": "Appe", "Appe": "lCjSZS"}}}, "P": {"B": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "Red": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "BlueB": {"C": {"D": "Appe", "Appe": "lCjSZS"}}}}], [{}, {}, {"-73.06068215185819": 37, "-20.518312632449252": -49, "-50.80098800326578": -49}], [{"-24.325512454128287": "ngwPYYUsW", "-0.31776260008138024": "R", "64.10081127712078": "", "-20.518312632449252": "ngwPYYPUsW"}, {}, {"-34": true, "-86": -73.06068215185819, "74": {"37": false, "-95": false, "58": true, "65": true, "-85": true, "98": false, "51": true}, "-61": null, "-49": "CjqqZMMy", "-47": -16, "65": "D", "-59": true, "58": -16}], [{}, {}, {"-20.518312632449252": -16, "-0.31776260008138024": 65}], [{}, {"-59": -50.80098800326578}, {"-56": -95, "27": true}], [{}, {"R": {}, "RR": {}}, {"G": {"W": "White"}}], [{"ayuEVhTX": "C", "apglGpJ": "klLihKVK", "P": "Awnq", "OvdlVN": "P", "ngwPYYUsW": "Y", "W": "Luto"}, {}, {"-17": false, "98": false, "-49": false, "35": false}], [{}, {}, {"-17": false, "-49": true, "35": false}], [{}, {"-50.80098800326578": -37.99257891277086, "-24.325512454128287": 70.78935461953051, "-0.31776260008138024": -50.80098800326578, "-50.392470117934096": -20.518312632449252}, {}], [{"35": -59}, {"R": {"B": {"P": {"M": "Red", "lCjSZS": "RRed"}}}, "Red": {"B": {"P": {"M": "Red", "lCjSZS": "RRed"}}}}, {}], [{"D": 97, "MAA": 56, "HTv": 65}, {"42.54365262109431": 12, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807}, {"IWhN": "V"}], [{"37": false}, {}, {"NH": true, "CjqqZMMy": true, "ngwPYYUsW": false, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": false, "Z": true, "Red": false, "Y": false, "White": false}], [{"A": "Apple"}, {"btabmgZJMp": "bkk"}, {}], [{"D": 97, "MAA": 56, "HTv": 65}, {"42.54365262109431": 37, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807}, {"IWhN": "V"}], [{}, {"-59": -20.518312632449252}, {"BlueB": "B", "GyqTxRqw": "IWhN", "apglGpJ": "TkzQdZezp"}], [{"R": {"B": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "WW": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}}, "": {"B": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "WW": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}}}, {}, {"G": {"W": "White", "WW": "WHzgYlcGpOGhite"}, "GG": {"W": "White", "WW": "WHzgYlcGpOGhite"}}], [{}, {}, {"-50.80098800326578": -37.99257891277086, "-24.325512454128287": 70.78935461953051, "-0.31776260008138024": -50.80098800326578, "-50.392470117934096": -20.518312632449252, "-73.06068215185819": 42.54365262109431, "-24.096762660953626": 71.37539857958085, "-23.830002499577663": -19.83610846406233}], [{"R": {"B": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "WW": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}}, "": {"B": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}, "WW": {"P": {"M": "Red", "DM": "R", "MDM": "RR"}, "White": {"M": "Red", "DM": "R", "MDM": "RR"}}}}, {}, {"G": {"W": "White", "WW": "WHzgYlcGpOGhite"}}], [{"37": false}, {"17.73931516433271": "oxcd", "42.54365262109431": 23.795747795363283}, {"NH": true, "CjqqZMMy": true, "ngwPYYUsW": false, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": false, "Z": true, "Red": false, "Y": false, "White": false}], [{"-59": -20.518312632449252}, {"-3.700287742454634": false, "-38.26014318376585": null, "17.73931516433271": false, "62.77802727777075": ["apglGpJ", "bz", "DM", "bN", "BlueB", "lwkww", "IITWMS", "DVeAQTRIZV"], "-67.57915780584574": 37.65070836123044, "-50.80098800326578": "Awnq", "-71.19218925050797": -1.1152135632978002, "-70.6746308928394": -54.08169240148757}, {}], [{}, {}, {"A": {}, "MA": {"-61.83059892834244": -21.3703814092123, "-74.60156534154282": 64.10081127712078, "17.73931516433271": -67.57915780584574}, "AMA": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}, "MORPBKquPA": {"-67.57915780584574": -68, "70.78935461953051": 15, "89.92770337658328": 2, "-40.8169187894486": 20, "-53.026275322982166": -16, "64.10081127712078": 98, "-50.392470117934096": -4, "-89.55492254635429": 35}, "OvdlVN": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}}], [{"37": false}, {"17.73931516433271": "oxcd", "42.54365262109431": 23.795747795363283}, {"NH": true, "CjqqZMMy": true, "ngwPYYUsW": false, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": false, "Z": true, "Red": false, "Y": false, "White": true}], [{}, {"W": "bXTSGefP", "OvdlVN": "bXTSefP"}, {}], [{"-81.67842976641": "Red", "-61.83059892834244": "oxcd", "-21.3703814092123": "V", "92.50540451758502": "GG", "-27.722667031889188": "NubHsqVl", "-53.026275322982166": "Y", "89.92770337658328": "ayuEVhTX", "-24.096762660953626": "Awnq", "-53.805001572422206": "VyMQgZV"}, {}, {"-17": false, "-49": false, "35": true}], [{}, {}, {"-17": false, "35": false}], [{"-59": -20.518312632449252, "65": -16}, {}, {}], [{}, {"-59": -50.80098800326578}, {}], [{}, {}, {"ayuEVhTX": "C", "apglGpJ": "klLihngwPYYUsWKVK", "P": "Awnq", "OvdlVN": "P", "ngwPYYUsW": "Y", "W": "Luto"}], [{"-81.67842976641": "Red", "-61.83059892834244": "oxcd", "-21.3703814092123": "V", "92.50540451758502": "GG", "-27.722667031889188": "NubHsqVl", "-53.026275322982166": "Y", "89.92770337658328": "ayuEVhTX", "-24.096762660953626": "Awnq"}, {}, {"-17": false, "-49": false, "35": true}], [{}, {}, {"-34": true, "-86": -73.06068215185819, "74": {"37": false, "-95": false, "58": true, "65": true, "-85": true, "98": false, "51": true}, "-61": null, "-49": "CjqqZMMy", "-47": -16, "65": "D", "-59": true, "58": -16, "35": -73.71456655267669}], [{}, {"17.73931516433271": "oxcd", "42.54365262109431": 23.795747795363283, "-53.805001572422206": 23.72761067835703}, {"37": false}], [{}, {"-81.67842976641": "Red", "-61.83059892834244": "oxcd", "-21.3703814092123": "V", "92.50540451758502": "GG", "-27.722667031889188": "NubHsqVl", "-53.026275322982166": "Y", "89.92770337658328": "ayuEVhTX", "-24.096762660953626": "Awnq"}, {"-17": true, "35": true, "-50": false}], [{}, {}, {"A": {}, "MA": {"-61.83059892834244": -21.3703814092123, "-74.60156534154282": 64.10081127712078}, "AMA": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}, "MORPBKquPA": {"-67.57915780584574": -68, "70.78935461953051": 15, "89.92770337658328": 2, "-40.8169187894486": 20, "-53.026275322982166": -16, "64.10081127712078": 98, "-50.392470117934096": -4, "-89.55492254635429": 35}, "OvdlVN": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}}], [{"-59": -20.518312632449252, "65": -16, "-17": -89.55492254635429}, {}, {}], [{"D": 97, "MAA": 56, "HTv": 65}, {"42.54365262109431": 37, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807}, {"IWhN": "V", "IWGhN": "lCjSZS"}], [{}, {}, {"-17": true, "35": false, "36": true}], [{"-22.979929602255183": false, "-53.805001572422206": true, "-91.20082277315413": false, "-24.325512454128287": false, "-96.49581018651745": true}, {"-59": -20.518312632449252, "65": -16}, {"98": "lCjSZS", "-61": "BdGTYTf", "-83": "IITWMS", "99": "cU", "-55": "bkk", "-80": "Red", "-16": "Xhr"}], [{"D": 97, "MAA": 56, "HTv": 65}, {"42.54365262109431": 37, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807, "-72.6127463653807": false}, {"IWhN": "V"}], [{}, {}, {"-17": false, "98": false, "-49": false, "35": true}], [{}, {"false": "IANrUc", "-55": "", "-16": "BdGTYTf", "87": "HTv", "81": "Green", "-59": "yS", "65": "AYC"}, {"A": {"B": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "Red": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "BlueB": {"C": {"D": "Appe", "Appe": "lCjSZS"}}}, "P": {"B": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "Red": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "BlueB": {"C": {"D": "Appe", "Appe": "lCjSZS"}}}}], [{"-26.51617320630959": 70.78935461953051, "-81.67842976641": -30.321108218462143, "46.636170318669855": -96.49581018651745, "27.84449804744338": 42.54365262109431, "-63.86477732020253": -50.80098800326578, "-87.04295405175097": -42.95773384196735, "92.7915796198375": 17.73931516433271, "56.10336306263682": 54.480351980114875, "-30.818290306420366": -19.83610846406233, "-31.734037590181316": -91.20082277315413}, {}, {"-17": false, "98": false, "-49": false, "35": true, "36": false}], [{}, {"A": "C", "W": "klLihKVK"}, {}], [{}, {"D": 97, "MAA": 56}, {"IWhN": ""}], [{}, {"-17": false, "-49": false, "35": true}, {"-81.67842976641": "Red", "-61.83059892834244": "oxcd", "-21.3703814092123": "V", "92.50540451758502": "GG", "-27.722667031889188": "NubHsqVl", "-53.026275322982166": "Y", "89.92770337658328": "ayuEVhTX", "-24.096762660953626": "Awnq"}], [{}, {}, {"G": {}}], [{}, {"-22.979929602255183": false, "-53.805001572422206": true, "-91.20082277315413": false, "-24.325512454128287": false, "-96.49581018651745": true}, {"-61": "BdGTYTf", "-83": "IITWMS", "99": "cU", "-55": "bkk", "-80": "Red", "-16": "Xhr"}], [{}, {}, {"-17": true, "35": true, "51": true}], [{}, {}, {"-0.31776260008138024": 65}], [{}, {"-20.518312632449252": -16}, {}], [{}, {}, {"-86": -73.06068215185819, "74": {"37": false, "-95": false, "58": true, "65": true, "-85": true, "98": false, "51": true}, "-61": null, "-49": "CjqqZMMy", "-47": -16, "65": "D", "-59": true, "58": -16, "35": -73.71456655267669}], [{"-24.325512454128287": "ngwPYYUsW", "-0.31776260008138024": "R", "64.10081127712078": ""}, {"-3.700287742454634": -42.95773384196735, "23.72761067835703": 66.12204806310575, "46.636170318669855": -63.86477732020253, "10.719925945826475": 92.7915796198375, "-42.95773384196735": 92.50540451758502}, {}], [{"-3.700287742454634": -42.95773384196735, "23.72761067835703": 66.12204806310575, "46.636170318669855": -63.86477732020253, "10.719925945826475": 92.7915796198375, "-42.95773384196735": 92.50540451758502}, {}, {}], [{}, {}, {"A": {}, "MA": {"-61.83059892834244": -21.3703814092123}, "AMA": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW", "D": "Z", "ZfhiHxllwkwwH": ""}, "MORPBKquPA": {"-67.57915780584574": -68, "70.78935461953051": 15, "89.92770337658328": 2, "-40.8169187894486": 20, "-53.026275322982166": -16, "64.10081127712078": 98, "-50.392470117934096": -4, "-89.55492254635429": 35}, "OvdlVN": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW", "D": "Z", "ZfhiHxllwkwwH": ""}}], [{"-24.325512454128287": "ngwPYYUsW", "-0.31776260008138024": "R", "64.10081127712078": "NubHsqVl"}, {"-3.700287742454634": -42.95773384196735, "23.72761067835703": 66.12204806310575, "46.636170318669855": -63.86477732020253, "10.719925945826475": 92.7915796198375, "-42.95773384196735": 92.50540451758502}, {}], [{}, {"-26.51617320630959": 70.78935461953051, "-81.67842976641": -30.321108218462143, "46.636170318669855": 56.10336306263682, "27.84449804744338": 42.54365262109431, "-63.86477732020253": -50.80098800326578, "-87.04295405175097": -42.95773384196735, "92.7915796198375": 17.73931516433271, "56.10336306263682": 54.480351980114875, "-30.818290306420366": -19.83610846406233, "-31.734037590181316": -91.20082277315413}, {"-17": true, "-49": false, "35": true, "36": false}], [{}, {}, {"A": {"92.50540451758502": false, "-74.60156534154282": false, "27.84449804744338": false, "-42.29433098762265": true, "48.24737545722277": false}, "MA": {"-61.83059892834244": -21.3703814092123, "-74.60156534154282": 64.10081127712078, "17.73931516433271": -67.57915780584574}, "AMA": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}, "MORPBKquPA": {"-67.57915780584574": -68, "70.78935461953051": 15, "89.92770337658328": 2, "-40.8169187894486": 20, "-53.026275322982166": -16, "64.10081127712078": 98, "-50.392470117934096": -4, "-89.55492254635429": 35}, "OvdlVN": {"ZfhiHxlH": "Y", "lCjSZS": "C", "x": "ngwPYYUsW", "Green": "", "A": "ngwPYYPUsW"}}], [{}, {}, {"ayuEVhTX": "C", "apglGpJ": "klLihngwPYYUsWKVK", "OvdlVN": "P", "ngwPYYUsW": "Y", "W": "Luto", "ngPYYUsW": "AYC", "ngPYYUW": "CjqqZMMyY"}], [{}, {"-81.67842976641": "Red", "-61.83059892834244": "oxcd", "-21.3703814092123": "V", "92.50540451758502": "GG", "-27.722667031889188": "NubHsqVl", "-53.026275322982166": "Y", "89.92770337658328": "ayuEVhTX", "-24.096762660953626": "Awnq"}, {"35": true, "-50": false}], [{"R": {"B": {"P": {"M": "Red"}}}}, {}, {"G": {"W": "Green"}}], [{}, {"-59": -20.518312632449252, "-58": -21.336793526122136}, {}], [{"-59": -23.830002499577663, "-68": -0.31776260008138024}, {"-3.700287742454634": false, "-38.26014318376585": null, "17.73931516433271": false, "62.77802727777075": ["apglGpJ", "bz", "DM", "bN", "BlueB", "lwkww", "IITWMS", "DVeAQTRIZV"], "-67.57915780584574": 37.65070836123044, "-50.80098800326578": "Awnq", "-71.19218925050797": -1.1152135632978002, "-70.6746308928394": -54.08169240148757}, {}], [{"R": {"B": {"P": {"M": "klLihngwPYYUsWKVK"}, "MAAP": {"M": "klLihngwPYYUsWKVK"}}}, "BlueB": {"B": {"P": {"M": "klLihngwPYYUsWKVK"}, "MAAP": {"M": "klLihngwPYYUsWKVK"}}}}, {"G": {"W": "White"}}, {"L": {"B": "Blue"}}], [{"37": false}, {"-24.325512454128287": -63.86477732020253, "-20.518312632449252": 37.726530699576074, "-48.80497257880159": -0.31776260008138024, "86.95668320734566": -24.325512454128287, "18.83911988396234": 23.795747795363283}, {"NH": true, "CjqqZMMy": true, "ngwPYYUsW": false, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": true, "Z": true, "Red": false, "Y": false, "White": false}], [{}, {}, {"-17": true, "-49": false, "35": true, "36": false, "-16": false}], [{"37": false}, {"17.73931516433271": "oxcd", "42.54365262109431": 23.795747795363283}, {"NH": true, "CjqqZMMy": true, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": false, "Z": true, "Red": false, "Y": false, "White": true}], [{}, {}, {"-3.700287742454634": false, "-38.26014318376585": null, "17.73931516433271": false, "62.77802727777075": ["apglGpJ", "bz", "DM", "bN", "BlueB", "lwkww", "IITWMS", "DVeAQTRIZV"], "-67.57915780584574": 37.65070836123044, "-50.80098800326578": "Awnq", "-71.19218925050797": -1.1152135632978002, "-70.6746308928394": -54.08169240148757}], [{}, {"bKIhM": -67, "bKI": 99}, {"HKpALgf": "HVI", "DVeAQTRIZV": "sjrFOEki"}], [{}, {"jqhlQTZUP": false, "cPCszApk": false, "YSRdUU": false, "DVeAQTRIZV": true, "ngPYYUW": false, "x": false, "zqKImWxAN": false, "HTv": false}, {"-17": false, "98": true, "-49": false, "35": true}], [{}, {}, {"ayuEVhTX": "C", "apglGpJ": "klLihngwPYYUsWKVK", "OvdlVN": "P", "ngwPYYUsW": "Y", "W": "Luto", "ngPYYUsW": "AYC", "ngPYYUW": "CjqqZMMyY", "RRed": "klLibtabmgZJMphngwPYYUsWKVK"}], [{}, {}, {"17.73931516433271": "jqhlQTZUPoxcd", "42.54365262109431": 23.795747795363283, "-54.08169240148757": -91.20082277315413}], [{}, {"false": "IANrUc", "-55": "", "-16": "BdGTYTf", "-47": "b", "87": "HTv", "81": "Green", "-59": "yS", "65": "AYC"}, {"P": {"B": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "Red": {"C": {"D": "Appe", "Appe": "lCjSZS"}}, "BlueB": {"C": {"D": "Appe", "Appe": "lCjSZS"}}}}], [{"MAAP": "wSiRX", "pasZZ": "HVI", "MAA": "IANrUc", "White": "FP", "klLihKVK": "sbejlq"}, {}, {}], [{}, {}, {"bKIhM": -67, "bKI": 99}], [{"R": {"B": {"P": {"M": "ngPYYUsW"}}}}, {}, {}], [{}, {"D": -79, "fhesfV": 12, "x": 39, "MAA": 98, "mSkrz": -2, "hbbqUT": 43, "bKI": 99}, {"35": -59}], [{}, {"35": -59}, {"D": -79, "fhesfV": 12, "x": 39, "MAA": 98, "mSkrz": -2, "bKI": 99}], [{}, {"NH": true, "CjqqZMMy": true, "ngwPYYUsW": false, "ORPBKquP": false, "XryExq": true, "DVeAQTRIZV": true, "Z": true, "Red": false, "Y": false, "White": false}, {"-24.325512454128287": -63.86477732020253, "-20.518312632449252": 37.726530699576074, "-48.80497257880159": -0.31776260008138024, "86.95668320734566": -24.325512454128287, "18.83911988396234": 23.795747795363283}], [{"61.34541925801071": 80, "-53.19664788882594": -47, "-57.0298375483274": 51, "-40.8169187894486": -80}, {"A": {"B": {"C": {"D": "Apple"}}}}, {}], [{}, {"42.54365262109431": 37, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807, "-72.6127463653807": false}, {"IWhN": "V"}], [{}, {"-3.700287742454634": false, "-38.26014318376585": null, "17.73931516433271": false, "62.77802727777075": ["apglGpJ", "bz", "DM", "bN", "BlueB", "lwkww", "IITWMS", "DVeAQTRIZV"], "-67.57915780584574": 37.65070836123044, "-50.80098800326578": "Awnq", "-71.19218925050797": -1.1152135632978002, "-70.6746308928394": -54.08169240148757}, {"-36": 54.45723754406529, "20": -80.33591878282283, "35": -26.51617320630959, "50": -61.05878653629404, "96": 92.7915796198375, "-68": -16.90079965432814, "74": -25.688963057095627}], [{}, {}, {"ayuEVhTX": "C", "apglGpJ": "klLihngwPYYUsWKVK", "OvdlVN": "P", "ngwPYYUsW": "Y", "W": "Luto", "ngPYYUsW": "AYC", "ngPYYUW": "CjqqZMMyY", "Appple": "ORPBKquP"}], [{}, {"-20.518312632449252": -17, "-0.31776260008138024": 65, "-20.71434154199882": -67}, {}], [{"D": 97, "MAA": 56, "HTv": 65}, {"42.54365262109431": false, "-73.06068215185819": 99, "64.10081127712078": false, "-71.19218925050797": -27.722667031889188, "-70.6746308928394": 83.83304478046807, "-72.6127463653807": false}, {"IWhN": "V"}], [{}, {"-3.700287742454634": false, "-38.26014318376585": null, "17.73931516433271": false, "62.77802727777075": ["apglGpJ", "bz", "DM", "bN", "BlueB", "lwkww", "IITWMS", "DVeAQTRIZV"], "-67.57915780584574": 37.65070836123044, "-71.19218925050797": -1.1152135632978002, "-70.6746308928394": -54.08169240148757}, {"-36": 54.45723754406529, "20": -80.33591878282283, "35": -26.51617320630959, "50": -61.05878653629404, "96": 92.7915796198375, "-68": -16.90079965432814, "74": -25.688963057095627, "39": -42.95773384196735}], [{}, {"-59": -20.518312632449252}, {"BlueB": "B", "GyqTxRqw": "IWhN"}], [{}, {"G": {}}, {}]], "input_output_examples": "[[[{'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}]], [[{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}]]]", "starter_code": "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:"}
{"task_id": "Mbpp/88", "requirement": "import collections\nfrom typing import List\ndef freq_count(list1: List[Hashable]) -> Counter[Hashable]:\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\"\"\"", "entry_point": "freq_count", "canonical_solution": "\nimport collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count\n", "base_input": [[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]], [[1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4]], [[5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5]]], "plus_input": [[[]], [[1, 1, 1, 1, 1]], [[1, "a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b"]], [[1, "a", 2, "b", 1, "aa", "a", 3, 2, "b", 1, 3, "a", "b", 1]], [[2, 60, 1, 1, -18]], [[1, 1, 1, 1]], [[1, 1, 1, -18, 1]], [[2, 60, 60, 1, 1, -18]], [[1, "a", 2, "baa", 1, "a", 3, 2, "b", 1, 3, "a", "b"]], [[1, 1, 1, -18, 1, 1]], [[1, 1, 2, 1, 1, 1]], [[1, "a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b", "a"]], [[60, 1, 1, 1, -18, 1, 1]], [[1, 2, 1, 1, 1, 1]], [[2, 60, 1, 1, -18, 1]], [[60, 1, 1, 60, 1, -18, 1, 1]], [[1, 2, 1, 1, 1]], [[1, "a", 2, "b", 1, 3, 2, "b", 3, "a", "b", "a"]], [[1, "a", 2, "baa", 1, "a", 3, 2, "b", 1, 3, "a"]], [[1, 1, 1, 1, 1, 1]], [[1, "a", 2, "b", 1, 3, 2, "b", 3, "a", "b", "a", 1, 3]], [[2, 60, 60, 1, -18]], [[1, "a", 2, "b", 2, 1, 3, 2, "b", 3, "a", "b", "a"]], [[1, "a", 2, "b", 1, 3, 2, "b", 3, "aa", "b", "a", 1, 3]], [[2, "b", 1, "a", 3, 2, "b", 1, 3, "a", ""]], [[1, "a", 2, "baa", 1, "a", 60, 3, 2, "b", 1, 3, "a"]], [["a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b", "a"]], [[1, 0, 2, 1, 1, 1]], [[60, 1, 1, 0, -18, 1, 1]], [[1, "a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b", "a", 1]], [[1, "a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b", 2, "a", 1, 2]], [[3, "b", 1, "a", 3, 2, 1, 3, "a", ""]], [[1, 1, 1, 1, 2]], [[60, 1, 1, 1, -18, 1, 1, 1]], [[60, 2, 60, 1, 1, -18, 2]], [[1, "a", 2, "baa", 1, "a", 3, 2, 1, 3, "a"]], [[1, "a", 2, "b", 2, 1, 3, 2, 3, "a", "b", "a"]], [[1, "a", 2, "b", 2, 1, 2, "b", 3, "a", "b", "a"]], [[1, "a", "a", 2, "baa", 1, "a", 60, 3, 2, "b", 1, 3, "a", "a"]], [[60, 1, 1, 1, -18, 1]], [[60, 1, 1, 60, 1, -18, 1, 60, 1]], [[1, 2, 1, -18, 1, 1, 1]], [[1, 2, 1, 0, 1]], [[3, "bb", 1, "a", 3, 2, 1, 1, 3, "a", ""]], [[1, 1, 1, -18, 1, 1, 1]], [[1, 2, 1, 1, 60, 2]], [[2, 60, 60, 1, -18, 60]], [[60, 0, 1, 60, 1, -18, 1, 1, 1]], [[1, 1, -1, 2, 1, 0, 1, 1]], [[60, 0, 1, 60, 1, -18, 1, 1, 1, 1, 1, 60]], [[1, "a", "a", 2, "baa", 1, "a", 60, 3, 2, "b", 1, "a", 3, "a", "a"]], [[1, 1, 1]], [[1, "a", 2, "b", 60, 1, 2, "b", 3, "a", "b", "a"]], [[60, 1, 1, 1, 0, -18, 1, 1]], [[1, "a", 2, "b", 1, "aa", 3, 2, "b", 1, 3, "a", "b", 1]], [[60, 1, 1, 60, 1, -18, -18, 61, 60, 1]], [[1, "a", 2, "b", 2, 1, 2, "b", 3, "a", "", "a"]], [[1, "a", 2, "baa", 1, "a", 60, 3, 2, 1, 3, "a", 1]], [["a", 2, 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "b", "a"]], [[1, "a", 2, "baa", 1, "a", 60, 3, 2, 1, 3, "aa", "a", 1, 3]], [[60, 1, 1, 60, 1, -18, 61, 60, 1]], [[1, "a", 2, "b", 1, 3, 2, "b", "aa", "b", "a", 1, 3]], [[1, "a", 2, 1, "a", 60, 3, 2, 1, 3, "aa", "a", 1, 3, 1]], [[1, 2, 1, -18, 1, 0, 3]], [[1, 2, 1, 2]], [[60, 1, 1, 1, -18, 1, 1, 1, 1]], [[1, "a", 2, "baa", 1, "a", 60, 3, 2, 1, "aa", "a", 1, 3, 3, "aa"]], [[60, 0, 1, 60, 1, -18, 1, 1, 1, 1, 1, 60, -18]], [[1, 1, 1, 1, 0, 0, -1]], [[1, "a", 2, "b", 1, 3, 2, "b", "aa", "b", "a", 1, 1, 3, "a", "a"]], [[1, 60, 1, 1, 1, 1]], [[1, "a", 2, "b", 1, "baa", "a", 3, 2, "b", 1, 3, "a", "b", 1]], [[1, "a", "a", 2, "baa", 1, "a", 60, 3, 2, "b", 1, "a", "a", "a"]], [[1, "a", 2, "baa", 1, "a", 60, 3, 2, "aa", "a", 1, 3, 3, "aa"]], [[1, 1, 1, 0, 1]], [[2, 1, "a", 3, 2, "b", 1, 3, "a"]], [[1, 1, -18, 1, -18, 1, 1, 1]], [["a", 2, "b", 1, "a", 3, 2, "b", 1, 3, "a", "", 2, "a", 2]], [[1, 1, 60, 1, -18, 0, 1, 1]], [[1, 1]], [[1, "baa", 2, "b", 2, 1, 3, 2, 3, "a", "b", "a"]], [[2, 60, 1, -18]], [[1, "a", 2, "b", 60, 2, 2, "b", 3, "a", "b", "a"]], [[1, 2, "baa", 1, "a", 3, 2, "b", 1, 3, "a"]], [[-1, 1, 0, 1, 1]], [[1, "a", 2, "b", 1, "aa", "a", 3, 2, "b", 1, "a", "b", 1]], [[1, "a", 2, "baa", 1, "a", 60, 3, 60, 2, -18, 1, 3, "aa", "a", 3]], [[0, 2, 1, 1, 1]], [[60, 1, 1, 1, -18, 1, 1, 60, 60]], [[60, 1, 1, 60, 60, -18, 61, 1]], [[1, "a", 2, "baa", 1, "a", "bba", 60, 3, 2, "b", 1, 3, "a", "a"]], [[1, "a", 2, "b", 0, 3, 2, "b", "aa", "b", "a", 1, 3]], [[1, 2, 1, 1, 1, 1, 1]], [["a", 2, 3, "baa", 1, "a", 60, 3, 2, 1, 3, "aa", "a", 1, 3]], [[60, 1, 1, 1, -18, 1, 1, 1, 60]], [[0, 2, 1, -18, 1, 0, 3, 3, 3]], [[1, -18, 1, 1, 1, 1, 1, -18]], [[1, 60, 1, -18, 1, 1, 1]], [[60, 1, 60, 1, 1, 1, 1]], [[1, "a", 2, "b", 2, 1, 4, 2, 3, "a", "b", "a"]], [["a", 2, 3, "baa", 1, "a", 60, 3, "aabaa", 1, 3, "aa", "a", 1, 3]], [[60, 1, 1, -18, 1, 1]], [[1, -18, -18, 1, 1, 1, 1, 1, -18]]], "input_output_examples": "[[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]]], [[{10: 4, 20: 4, 40: 2, 50: 2, 30: 1}]]]", "starter_code": "from typing import List\ndef freq_count(list1: List[Hashable]) -> Counter[Hashable]:"}
{"task_id": "Mbpp/89", "requirement": "def closest_num(N: int) -> int:\"\"\"\nWrite a function to find the closest smaller number than n.\"\"\"", "entry_point": "closest_num", "canonical_solution": "\ndef closest_num(N):\n  return (N - 1)\n", "base_input": [[11], [7], [12]], "plus_input": [[-5], [0], [true], [false], [-4], [-3], [-1], [-39], [-37], [-36], [-35], [-38], [47], [-20], [46], [-34], [45], [-40], [-33], [-21], [88], [89], [-2], [1], [2], [-59], [-41], [-32], [-58], [-31], [-6], [-42], [-60], [-7], [3], [-53], [4], [72], [-19], [-43], [5], [-52], [44], [52], [-51], [-54], [43], [-55], [55], [42], [-28], [-95], [-22], [-96], [-50], [73], [-97], [90], [-94], [53], [-49], [-23], [-98], [54], [6], [-29], [-30], [41], [91], [56], [63], [-56], [60], [-8], [-68], [48], [87], [86], [-27], [92], [51], [-24], [61], [-44], [-69], [84], [-70], [40], [-61], [-18], [-9], [39], [-93], [62], [64], [-62], [59], [-26], [-99], [-45], [-92], [-10]], "input_output_examples": "[[[11]], [[10]]]", "starter_code": "def closest_num(N: int) -> int:"}
{"task_id": "Mbpp/90", "requirement": "from typing import List\ndef len_log(list1: List[str]) -> int:\"\"\"\nWrite a python function to find the length of the longest word.\"\"\"", "entry_point": "len_log", "canonical_solution": "\ndef len_log(list1):\n    return max(len(x) for x in list1)\n", "base_input": [[["python", "PHP", "bigdata"]], [["a", "ab", "abc"]], [["small", "big", "tall"]]], "plus_input": [[["Longest", "word", "length"]], [["This", "is", "a", "complex", "example", "to", "test", "the", "function"]], [["elephant", "fox", "monkey", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["fox", "monkey", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["elephant", "fox", "monkey", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["fox", "Longest", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["fox", "monkey", "zebra", "lion", "This", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "monkey"]], [["elephant", "fox", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["elephant", "fox", "monkey", "zebra", "tiger", "giraffe", "p", "kangaroo", "bear", "panda", "hippopotamus"]], [["i", "This", "is", "a", "complex", "example", "to", "test", "the", "ttoo", "function"]], [["elephant", "fox", "monkey", "zebra", "lion", "tiger", "gireaffe", "kangaroo", "panda", "hippopotamus"]], [["elephant", "fox", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger", "tiger"]], [["elephant", "fox", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangamonkeyroo", "bear", "panda", "hippopotamus", "tiger"]], [["fox", "monkey", "zebra", "tiger", "giraffe", "p", "kangaroo", "bear", "panda", "hippopotamus"]], [["This", "is", "a", "complex", "example", "to", "test", "the", "function", "a"]], [["Longest", "length"]], [["fox", "Longest", "zebra", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["fox", "monkey", "zebra", "tiger", "giraffe", "", "p", "kangaroo", "foelephantx", "bear", "panda", "hippopotamus"]], [["fox", "Longest", "zebra", "pandaa", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["Longest", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["Longest", "length", "Longest"]], [["fox", "monkey", "zebra", "tiger", "giraffe", "", "p", "kangaroo", "foelephantx", "bear", "panda", "hippopotamus", "giraffe"]], [["elephant", "fox", "monkey", "function", "zebra", "lion", "tiger", "gireaffe", "kangaroo", "panda", "hippopotamus"]], [["length", "LongestThis", "Longest"]], [["elephant", "fox", "monkey", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["This", "is", "", "a", "complex", "example", "to", "test", "the", "function", "the"]], [["This", "is", "a", "complex", "example", "to", "the", "aa", "function", "a"]], [["This", "is", "a", "complex", "example", "to", "test", "the", "function", "a", "a"]], [["elephant", "fox", "teiger", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["elephant", "fox", "monkey", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["elephant", "fx", "monkey", "zebra", "lion", "tiger", "giraffe", "giraff", "kangaroo", "bear", "panda", "hippopotamus"]], [["elephant", "fox", "zebra", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["This", "is", "a", "complex", "example", "is", "test", "the", "function", "a", "a"]], [["This", "is", "", "a", "complex", "example", "to", "test", "the"]], [["fox", "monkey", "zebra", "lion", "tigttooer", "giraffe", "kangaroo", "bear", "hippopotamus"]], [["Longest", "word", "length", "Longest"]], [["This", "a", "complex", "example", "to", "test", "thte", "function", "a", "a"]], [["monkey", "zebra", "tiger", "giraffe", "", "p", "kangaroo", "foelephantx", "bear", "panda", "hippopotamus"]], [["Longest", "Lonngest", "length", "Longest"]], [["leth", "LongestThis", "Longest"]], [["fnunction", "This", "is", "a", "complex", "example", "to", "the", "aa", "function", "a"]], [["elephant", "fox", "monkey", "LongestThis", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger", "tiger"]], [["This", "is", "elephant", "complex", "example", "is", "test", "the", "function", "a", "a"]], [["fox", "monkey", "zebra", "lion", "This", "giraffe", "kangaroo", "bear", "panda", "giraffbeare", "hippopotamus", "monkey"]], [["elephant", "fox", "monkey", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "hippopotamus", "tiger"]], [["This", "a", "complex", "giraffbeare", "to", "test", "thte", "function", "a", "a"]], [["Longest", "word", "Lonpgest", "length", "Longest", "Longest"]], [["Longest", "word", "length", "word"]], [["This", "is", "a", "complex", "example", "to", "test", "function", "a", "a"]], [["This", "is", "a", "complex", "example", "to", "test", "oto", "function", "a", "a", "is"]], [["Longest"]], [["fox", "monkey", "zebra", "lion", "giraffe", "kangaroo", "bear", "hippopotamus"]], [["leth", "LongestThis", "leelephantth", "Longest"]], [["Lot", "word", "length", "word"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "kangaroo", "bear", "hippopotamus"]], [["elephant", "fx", "monkey", "zebra", "foelephantx", "lion", "tiger", "giraffe", "giraff", "kangaroo", "bear", "panda", "hippopotamus"]], [["This", "a", "example", "to", "test", "thte", "function", "a", "a"]], [["This", "a", "complex", "the", "to", "test", "thte", "function", "a", "a"]], [["is", "a", "complex", "example", "to", "test", "the", "function", "a", "a"]], [["This", "a", "complex", "the", "to", "apandaa", "test", "thte", "function", "a", "a"]], [["Longest", "word", "length", "Longest", "Longest"]], [["Lonpgest", "monkey", "", "length", "length"]], [["lgth", "Longest", "length", "Longest", "length"]], [["elephant", "fox", "monkey", "zebra", "zebralengthn", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger", "tiger", "elephant"]], [["is", "a", "complex", "word", "to", "test", "the", "function", "a", "a"]], [["This", "TThis", "is", "a", "t", "complex", "example", "to", "test", "the", "function", "the"]], [["LLot", "word", "length", "word", "word"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "bear", "hippopotamus"]], [["is", "a", "complex", "", "example", "to", "test", "the", "function", "a", "a"]], [["This", "a", "complex", "the", "to", "apandaa", "test", "thtte", "function", "", "a"]], [["Longest", "lion", "tigerLongest", "giraffe", "bbr", "kangaroo", "bbear", "bear", "hippopotamus"]], [["Longest", "word", "length", "Longest", "Longest", "word", "Longest"]], [["Lot", "fox", "monkey", "zebra", "zera", "giraffe", "hiippopotamus", "kangaroo", "bear", "hippopotamus"]], [["This", "is", "elephant", "example", "is", "test", "the", "function", "a", "a"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "bearr", "hippopotamus", "fnunction"]], [["LLot", "word", "length", "word", "panda"]], [["fox", "LongestThis", "Longsest", "example"]], [["elephant", "giraff", "monkey", "lion", "tiger", "mlengthonkey", "giraffe", "kangaroo", "bear", "panda", "pada", "hippopotamus"]], [["elephant", "fox", "zebra", "zebra", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger"]], [["This", "a", "complex", "the", "to", "apandaa", "length", "test", "thtte", "function", "", "a"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "kangaroo", "bear", "hippopotamus", "fnunction"]], [["Longetst", "zebra", "lion", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus"]], [["a", "complex", "giraffbeare", "to", "test", "thte", "function", "a", "a"]], [["zera", "Lot", "word", "length", "word", "zera"]], [["oto", "This", "is", "a", "complex", "example", "to", "the", "aa", "function", "a"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "fnuncction", "bear", "hippopotamus"]], [["oto", "This", "a", "complex", "example", "aa", "to", "aa", "function", "a"]], [["This", "is", "elephant", "example", "is", "test", "the", "function", "elephant", "a"]], [["lgth", "Longest", "length", "Longest", "length", "Longest"]], [["elephant", "fox", "monkey", "LongestThis", "zebran", "tiger", "giraffe", "kangaroo", "bear", "panda", "hippopotamus", "tiger", "kangamonkeyroo"]], [["oto", "This", "is", "a", "complex", "exampl", "to", "the", "aa", "function", "hthe", "a"]], [["fox", "p", "zebra", "tiger", "giraffe", "p", "kangaroo", "foelephantx", "bear", "panda", "hippopotamus", "giraffe"]], [["elephant", "fox", "monkey", "LongestThis", "zebran", "tiger", "kangaroo", "bear", "panda", "hippopotamus", "tiger", "kangamonkeyroo", "monkey"]], [["fox", "Longest", "zebra", "lion", "tiger", "girafffoelephantx", "kangaroo", "bear", "panda", "hippopotamus"]], [["elephant", "fox", "monkey", "function", "zebra", "lion", "tiger", "gireaffe", "to", "kangaroo", "panda", "hippopotamus"]], [["This", "a", "complex", "the", "to", "apandaa", "test", "thte", "function", "a", "a", "apandaa"]], [["fnunction", "This", "is", "a", "complex", "example", "to", "the", "aa", "function", "a", "to", "to"]], [["is", "a", "complex", "", "to", "test", "the", "function", "a", "a"]], [["This", "a", "complex", "the", "to", "apandaa", "test", "thtte", "function", "", "a", "complex"]], [["This", "is", "", "a", "complex", "example", "to", "test", "the", "function", "the", "th", "a"]], [["elephant", "fox", "monkey", "function", "zebra", "lion", "tiger", "gireaffe", "kangaroo", "panda", "girafffoelephantx", "hippopotamus"]], [["Longest", "fnunction", "lion", "tigerLongest", "giraffe", "bearr", "fnunction"]], [["Longest", "lion", "tigerLongest", "giraffe", "bearr", "fnunction"]]], "input_output_examples": "[[[['python', 'PHP', 'bigdata']]], [[7]]]", "starter_code": "from typing import List\ndef len_log(list1: List[str]) -> int:"}
{"task_id": "Mbpp/91", "requirement": "from typing import List\ndef find_substring(str1: List[str], sub_str: str) -> bool:\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\"\"\"", "entry_point": "find_substring", "canonical_solution": "\ndef find_substring(str1, sub_str):\n   return any(sub_str in s for s in str1)\n", "base_input": [[["red", "black", "white", "green", "orange"], "ack"], [["red", "black", "white", "green", "orange"], "abc"], [["red", "black", "white", "green", "orange"], "ange"]], "plus_input": [[[], "abc"], [[], ""], [[], "abac"], [[], "aabac"], [["aabac", "", "aabac", "mHUIYqZU"], "aabac"], [[], "acbc"], [[], "aabaac"], [[], "acbacbcc"], [["aabac", "", "aabac"], "aabac"], [["acbc", "acbacbcc"], "acbacbcc"], [["acbc", "acbacbcc"], "acbacbccacbacbcc"], [["acabcbc", "acbacbcc"], "acbacbccacbacbcc"], [["mHUIYqZU", "acabcbc", "acbacbcc"], "acbacbccacbacbcc"], [["aabac", "", "aabac", "mHUIYqZU"], "aacbac"], [["acbacbccacbacbcc", "acbacbcc"], "acbacbccaacbacbcc"], [["aabac", "", "aabac", "mHUIYqZU"], "aabaac"], [["acabcbc", "acbabcbc", "acbacbcc"], "acbacbccacbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaacbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaaccbacbcc"], [["amHUIYqZUcbc", "acbc", "acbacbcc"], "acbacbccacbacbcc"], [["acabcbc", "acbacbcc", "acbacbcc"], "acbacbccacbacbcc"], [[], "abcbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "mHUIYqZU"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "amHUIYqZUcbc", "abc", "acbacbccacbacbcc"], "acbacbccaaccbacbcc"], [["acbacbccacbcacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaaccbacbcc"], [["acbacbccacbcacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaaccacbacbccaaccbacbccbacbcc"], [[], "aacbacacbacbccacbacbcc"], [["acbacbccacbacbcc", "acbacbcc"], "acbacbccaacbaccc"], [[], "accbc"], [[], "acbacbccacbcacbcc"], [["aabac", "", "aabac", "mHUIYqZU"], "aacb"], [["", "aabac", "mHUIYqZU"], "aabaac"], [["aabac", "abc", "aabac", "mHUIYqZU"], "aabaac"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "mHUIYqZU"], [["acbaccbcc"], "acbacbccaacbacbcc"], [["acbacbccacbacbcc", "mHUIYqZU"], "abcaacb"], [["acabcbc", "acbacbccaacbacbcc", "acbacbcc"], "acbacbccacbacbcc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac"], "acbaccbccaacb"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "acbaccbccaacb"], [["acabcbc", "acbacbcc", "acbacbcc"], "acbacbccaaccacbacbccaaccbacbccbacbcc"], [["acacbc", "acbacbcc"], "acbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "mHUIZU"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "aacbb"], [["acabcbc", "acbabcbc", "acbacbcc"], "acbacbccacbacacbacbccaacbacbccbcc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "mHUIYamHUIYqZUcbcqZU"], [["acbacbccacbacbcc", "amHUIYqZUcbc", "acbc", "acbacbcc"], "acbacbccacbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaaccbacbaacbacacbacbccacbacbcccc"], [[], "acbcbacbcc"], [["acbacbccaaccacbacbccaaccbacbccbacbcc", "acabcbc", "acbabcbc", "acbacbcc"], "acbacbccacbacacbacbccaacbacbccbcc"], [["aabac", "", "mHUIYqZU"], "aacbac"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], ""], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc"], "mHUIYmHUIYqZUqZU"], [["acbacbccacbcacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc", "acbacbcc"], "acbacbccaaccacbacbccaaccbacbccbacbcc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "mHaacbacacbacbccacbacbccUIYamHUIYqZUcbcqZU", "aabac", "mHUIYamHUIYqZUcbcqZU"], "mHUIYamHUIYqZUcbcqZU"], [["aabac", "", "aabac", "mHUIYqZU"], "acbaccbccaacb"], [["acabcbc", "acbabcbc", "acbacbcc", "acbabcbc"], "acbacbccacbacacbacbccaacbacbccbcc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "aacbac"], [["aacbabcbcabac", "aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "mHUIYqZU"], [["aabac", "", "mHUIYqZU"], "aabaacbbaac"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbc", "aacbacacbacbccacbacbcc", "acbacbcc"], "mHUIYqZU"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "amHUIYqZUcbc", "acbcbacbcc", "abc", "acbacbccacbacbcc"], "acbacbccaaccbacbcc"], [["aabac", "", "aabac", "mHUIYqZU"], "acbc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbcabcaacbcacbacbcc"], "acbacbccaaccbacbaacbacacbacbccacbacbcccc"], [["acabcbc", "acbabcbc", "acbacbcc"], "acbaccbccaacb"], [["acbacbccacbacbcc", "acbacbcc"], "acbacbccaacba"], [["acabcbc", "acbabcbc", "acbacbcc", "acabcbc"], "acbaccbccaacb"], [["acbacbccacbacbcc", "mHUIYqZU"], "amHUIZUbcaacb"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "abcaacb", "mHUIYamHUIYqZUcbcqZU"], "mHUIYamHUIYqZUcbcqZU"], [["acbacbccaaccacbacbccaaccbacbccbacbcc", "acabcbc", "acbabcbc", "acbacbcc"], "acbacbccacbacacbacbacbccaaccacbacbccaaccbacbccbacbccacbccaacbacbccbcc"], [["aabac", "", "mHUIZU", "aabac", "mHUIYqZU"], "aabaac"], [["acbacbccacbacbcc", "amHUIYqZUcbc", "acbc", "acbacbcc"], "acbacbcccacbacbcc"], [["acbacbccacbcacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc", "acbacbccacbcacbcc"], "acbacbccaaccbacbcc"], [["aabac", "", "aabac", "mHUIYqZU"], "aaabaac"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "aacbacacbacbccacbacbcc"], "abc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "amHUIYqZUcbc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "acbaccbabcbacbccccaacb"], [["aabac", "aaac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "aacbac"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU", "aabac"], "acbaccbabcbacbccccaacb"], [["acabcbc", "acbacbcc", "acbacbcc", "acbacbcc"], "amHUIYqZUcbc"], [["aabaacbacbccacbcacbccc", "mHUaacbacacbacbccacbacbcIYqZU", "", "mHUIZU", "aabac", "mHUIYqZU"], "acbacbccaacbaccc"], [["aabac", "", "mHUIaacbabcbcabacYqZU"], "aacbac"], [["acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbacbccacbacbcc"], "acbacbccaaccbacbaacbacacbacbccacbacbcccc"], [["acbacbccaaccacbacbccaaccbacbccbacbcc", "acabcbc", "acbabcbc", "acbacbcc"], "acbacbccacbacacbacbacbccaaccacbacbccaaccbacbcccbacbccacbccaacbacbccbcc"], [["aabac", "acbacbcc"], "acbacbcc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "aacbacacbacbccacbacbcc"], "aabc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbccacc", "acbacbcc", "acbacbccacbacbcc"], "mHUIYqZU"], [["aabac", "", "aabac", "mHUIYqZU"], "aacbacabcbcac"], [["acbacbccacbacacbacbccaacbacbccbcc", "acbacbccaaccbacbcc"], "aabaacbbaac"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "aacbacacbacbccacbacbcc"], "abbc"], [["acbacbccacbcacbcc", "acbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "aacbacacbacbccacbacbcc"], "a"], [["accbc", "aabac", "", "aabac", "mHUIYqZU"], "aacb"], [["acbacbccaaccacbacbccaaccbacbccbacbcc", "acabcbc", "acbabcbc"], "acbacbccacbacacbacbacbccaaccacbacbccaaccbacbcccbacbccacbccaacbacbccbcc"], [["aabac", "", "mHUIZU", "aabac", "mHUIYqZU"], "acbacbcccacbacbcc"], [["acbacbccacbcacbcc", "aacbbacbacbccacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc", "acbaccbcc", "acbacbccacbacbcc"], "amHUIYqZUcbc"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "abcaacb", "mHUIYamHUIYqZUcbcqZU"], "mHUIYamHUIYqZmUcbcqZU"], [[], "aacbbacbacbccacbacbcc"], [["acbacbccacbcacbcc", "acbacbcacbaccbccaacbcacbacbcc", "aacbacacbacbccacbacbcc", "acbacbcc"], "mHUIYmHUIYqZUqZU"], [["aabac", "", "mHUIYqZU"], "aabaacbaac"], [["acabcbc", "acbabccbc", "acbacbcc"], "acbacbccacbacacbacbccaacbacbccbcc"], [[], "acaabaacbbaacbc"], [["acbacbccacbacbcc", "mHUIYqZU", "mHUIYqZU"], "amHUIZUbcaacb"], [["aabac", "aabac", "mHUIYqZU", "mHUIYamHUIYqZUcbcqZU", "aabac", "aabac", "mHUIYamHUIYqZUcbcqZU"], "acbacbcabcaacbcacbacbcc"]], "input_output_examples": "[[[['red', 'black', 'white', 'green', 'orange'], 'ack']], [[True]]]", "starter_code": "from typing import List\ndef find_substring(str1: List[str], sub_str: str) -> bool:"}
{"task_id": "Mbpp/92", "requirement": "def is_undulating(n: int) -> bool:\"\"\"\nWrite a function to check whether the given number is undulating or not.\"\"\"", "entry_point": "is_undulating", "canonical_solution": "\ndef is_undulating(n): \n\tdigits = [int(digit) for digit in str(n)]\n\tif len(set(digits)) != 2:\n\t\treturn False\n\treturn all(a != b for a, b in zip(digits, digits[1:]))\n", "base_input": [[1212121], [1991], [121]], "plus_input": [[2121212121212121], [2121212121212122], [2121212121212119], [2121212121212123], [2121212121212124], [2121212121212125], [2121212121212120], [2121212121212118], [2121212121212126], [2121212121212117], [2121212121212127], [82], [40], [83], [39], [81], [2121212121212116], [2121212121212128], [2121212121212115], [41], [80], [19], [20], [42], [84], [18], [2121212121212129], [43], [21], [62], [17], [85], [2121212121212130], [79], [12], [2121212121212131], [86], [44], [52], [16], [11], [53], [63], [10], [78], [51], [61], [87], [50], [77], [54], [92], [55], [49], [22], [96], [38], [97], [56], [23], [91], [2121212121212114], [15], [93], [24], [48], [89], [60], [64], [65], [37], [76], [59], [35], [88], [2121212121212132], [58], [14], [94], [9], [47], [95], [66], [57], [36], [8], [13], [25], [45], [90], [2121212121212113], [67], [46], [7], [68], [75], [34], [2121212121212133], [2121212121212134], [26], [74]], "input_output_examples": "[[[1212121]], [[True]]]", "starter_code": "def is_undulating(n: int) -> bool:"}
{"task_id": "Mbpp/93", "requirement": "def power(a: float, b: float) -> float:\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\"\"\"", "entry_point": "power", "canonical_solution": "\ndef power(a, b):\n\treturn a ** b\n", "base_input": [[3, 4], [2, 3], [5, 5]], "plus_input": [[4, -2], [-2, 3], [0, 5], [-3, -4], [0, 10], [10, -1], [0, 0], [2, -3], [1, 100], [-1, 100], [5, 10], [5, 0], [2, 3], [-3, 2], [0, 9], [-1, 10], [0, 4], [5, -2], [4, 9], [-2, -2], [1, 99], [100, 5], [99, 2], [100, 100], [-4, -2], [100, 3], [0, 3], [5, 11], [4, 1], [-2, 0], [4, 4], [100, 6], [100, 4], [11, 5], [-4, -4], [5, 9], [11, 99], [100, -1], [6, 6], [-1, -1], [3, 0], [2, 2], [9, -1], [-4, 2], [5, 5], [-2, 5], [6, 0], [5, 4], [-1, 0], [99, 4], [-1, 9], [5, 2], [99, 1], [11, -1], [-4, 7], [7, 0], [98, 3], [100, -2], [99, -1], [3, 7], [-3, -3], [1, 6], [3, 1], [3, 8], [99, 99], [100, 9], [-1, 98], [7, -1], [9, 99], [5, 8], [11, 3], [3, -3], [2, 5], [99, -4], [5, 101], [9, 9], [8, 3], [99, -3], [1, 10], [7, 1], [101, 100], [8, 0], [100, 101], [4, 8], [2, 4], [3, 3], [8, 4], [101, -2], [98, 102], [8, 8], [2, -4], [-2, 101], [-1, -2], [100, 7], [-3, -2], [1, 2], [9, 3], [7, 7], [4, 3], [2, -2], [11, 10], [1, 0], [5, -3], [99, 3], [98, 2], [8, 7], [3, 6], [1, -1], [-1, 8], [101, 6]], "input_output_examples": "[[[3, 4]], [[81]]]", "starter_code": "def power(a: float, b: float) -> float:"}
{"task_id": "Mbpp/94", "requirement": "from operator import itemgetter \nfrom typing import List\nfrom typing import Tuple\ndef index_minimum(test_list: List[Tuple[Any, Any]]) -> Any:\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\"\"\"", "entry_point": "index_minimum", "canonical_solution": "\nfrom operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res) \n", "base_input": [[[["Rash", 143], ["Manjeet", 200], ["Varsha", 100]]], [[["Yash", 185], ["Dawood", 125], ["Sanya", 175]]], [[["Sai", 345], ["Salman", 145], ["Ayesha", 96]]]], "plus_input": [[[["John", 100]]], [[["Alice", 100], ["Bob", 100], ["Charlie", 100]]], [[["Alice", 100], ["Bob", 200], ["Charlie", 300], ["John", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false]]], [[["Adam", 150], ["Benjamin", 100], ["Charlie", 100], ["David", 125]]], [[["John", 100], ["Jane", 150], ["Jim", 200], ["Jill", 175]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false]]], [[["John", 100, 100], ["John", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true, "Chicago"], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false]]], [[["John", 100], ["Jane", 150], ["Jim", 200]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", true, false, 100], ["David", 125, "Miami", false]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true, "Charlie"], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false]]], [[["Adam", 150], ["Benjamin", 100], ["Charlie", 100], ["Adam", 150, 150]]], [[["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true, "Charlie"], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Adam", 150], ["Benjamin", 100], ["Charlie", 100], ["Benjamin", 100, "Benjamin"], ["David", 125]]], [[["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false]]], [[["Adam", 150, "NYC", "NYBenjamin", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", true, false, 100], ["David", 125, "Miami", false]]], [[["John", 100], ["Jane", 150], ["Jim", 200], ["Jill", 175], ["John", 100], ["Jim", 200]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Charlie", 200, "Chicago", true]]], [[["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bob", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true, "Chicago"], ["David", 125, "Miami", false]]], [[["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Benjamin", true, 100], ["Charlie", 300], ["Benjamin", 100], ["John", 100]]], [[["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100], ["John", 100]]], [[["Alice", 100], ["Charlie", 101], ["Alice", 100], ["John", 100], ["Charlie", 100]]], [[["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100], ["John", 100], ["John", 100]]], [[["Alice", 100], ["Alice", 101], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Benjamin", 100]]], [[["Alice", 100], ["Charlie", 100], ["Alice", 100]]], [[["John", 100], ["Jim", 200], ["Jill", 175]]], [[["John", 100], ["John", 100]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bobb", 100], ["Alice", 100]]], [[["Alice", 101, 100], ["John", 300], ["Alice", true, 100], ["Bob", 200], ["John", 100], ["John", 100], ["Bob", 200]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false, false]]], [[["Adam", 150, "NYC", "NYBenjamin", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", true, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false, false]]], [[["Bob", 100], ["Charlie", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Adam", 150, "NYC", true]]], [[["Adam", 150, "NYC", "NYBenjamin", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", true, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Bob", 100], ["Charlie", 100], ["Bob", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Adam", false, 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["Charlie", 200, "Chicago", true, "Charlie"], ["David", 125, "Miami", false]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Alice", 175], ["Benjamin", 100]]], [[["Alice", 100], ["Bob", 200], ["Charlie", 300], ["John", 100], ["Bob", 200]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Benjamin", 100]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["John", 100]]], [[["Charlie", 100], ["Adam", 150, 150]]], [[["Adam", 150], ["Benjamin", 100], ["David", 125]]], [[["AlNYCice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Alice", 100]]], [[["Charlie", 100], ["Bob", 100]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Benjamin", true, 100], ["Charlie", 300], ["Benjamin", 100], ["Bob", 200, "Bob"]]], [[["Alice", 100], ["Alice", 175], ["Benjamin", 100]]], [[["Adam", 150, "NYC", "NYBenjamin", true], ["Benjamin", 100, "LA", false, false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", true, false, 100], ["Benjamin", 100, "LA", false, false]]], [[["Alice", 100], ["Bob", 100]]], [[["Alice", 100], ["Bob", 200, "oBob", "Bob"], ["Charlie", 300], ["Alice", 175], ["Benjamin", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true, "Chicago"], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA", false]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Benjamin", true, 100, true], ["Charlie", 300], ["Benjamin", 100], ["Bob", 200, "Bob"]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["Charlie", 200, "Chicago", true, "Charlie"], ["David", 125, "Miami", false]]], [[["Alice", 100], ["Charlie", 300]]], [[["John", 100], ["Jane", 150], ["Jim", 200], [300, 175]]], [[["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Benjamin", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["Charlie", 200, "Chicago", true, "Charlie"], ["David", 125, "Miami", true]]], [[["AlNYCice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Alice", 100], ["Bob", 200, "Bob"]]], [[["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100], ["John", 100], ["John", 100], ["John", 100], ["Alice", 100]]], [[["Alice", 100], ["Alice", 101], ["Bob", 200, "Bob"], ["Charlie", 300], ["John", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true, "Chicago", "Charlie"], ["David", 125, "Miami", false]]], [[["Alice", 100], ["BoAlNYCiceb", 100], ["Bob", 100], ["Bob", 100]]], [[["Alice", 101, 100, "Alice"], ["John", 300], ["Alice", true, 100], ["Bob", 200], ["John", 100], ["John", 100], ["Bob", 200]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100, 100], ["Charlie", 100], ["Bobb", 100], ["Alice", 100], ["Bob", 100, 100]]], [[["Adam", 150, "NYC", true, "Adam"], ["AdaJanem", 150, "NYC", true, 150], ["AdaJanem", 150, "NYC", true], ["Adam", 150, "NYC", true]]], [[["Alice", 100], ["Bob", 200], ["Charlie", 300], ["John", 100], ["Bob", 200], ["Charlie", 300], ["Charlie", 300]]], [[["Charlie", 100], ["Adam", 150, 149]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100, 100], ["Charlie", 100], ["Bobb", 100], ["Alice", 100], ["Bob", 100, 100], ["Charlie", 101], ["Charlie", 100], ["Bob", 100, 100]]], [[["Charlie", 300], ["John", 100], ["Bob", 200]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false], ["David", 125, "Miami", false]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, false], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Bob", 300, 300], ["Charlie", 300, 300], ["Benjamin", 100]]], [[["Adam", 150, "NYC", true], ["Charlie", 200, "Chicago", true], ["Adam", 150, "NYC", true]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, false], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Alice", 100], ["John", 100], ["John", 100], ["John", 100]]], [[["John", true], ["Alice", 100], ["Bob", 200], ["John", 100], ["John", 100], ["John", 100]]], [[["Adam", 150], ["Benjamin", 100], ["Charlie", 100], ["David", 124, 125]]], [[["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false]]], [[["Jane", 150], ["Jim", 200]]], [[["AlNYCice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Alice", 100], ["Bob", 200, "Bob"], ["AlNYCice", 100]]], [[["Charlie", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, false], ["Adam", 150, "NYC", true, true], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bobb", 100], ["Alice", 100], ["Bobb", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["BenLAjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["John", 100], ["Jane", 150], ["Jill", 175]]], [[["Adam", 150, "NYC", true, "Adam"], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["Charlie", 200, "Chicago", true, "Charlie"]]], [[["John", 100, 100], ["John", 100], ["John", 100, 100]]], [[["John", 100], ["Jill", 175]]], [[["Jane", 150], ["Jill", 175], ["Jane", 150]]], [[["AlNYCice", 100], ["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bob", 100]]], [[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["LA", 150, "NYC", true], ["Charlie", 200, "Chicago", true, "Chicago"], ["David", 125, "Miami", false]]], [[["Bob", 100], ["Charlie", 100], ["Bob", 100], ["Bob", 100], ["Bob", 100], ["Bob", 100]]], [[["Charlie", 101], ["Alice", 100], ["Bob", 100], ["Charlie", 100], ["Bobb", 100], ["Alice", 100], ["Bobb", 100], ["Bobb", 100]]], [[["Alice", 100], ["Charlie", 300], ["Benjamin", 100]]], [[["Alice", 100], ["Bob", 200, "Bob"], ["Charlie", 300], ["Bob", 300, 300], ["Benjamin", 100]]], [[["Bob", 200, "Bob"], ["Charlie", 300], ["Charlie", 300, 300], ["Benjamin", 100], ["Benjamin", 100, "Benjamin"]]], [[["Benjamin", 100, "LA", false, false, 100], ["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, false], ["BenLAjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["NYBenjamin", 100, "LA", false, false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]], [[["Benjamin", 100, "LA", false, false, 100], ["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false, 100], ["Benjamin", 100, "LA", false, false], ["BenLAjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false, 100], ["David", 125, "Miami", false], ["NYBenjamin", 100, "LA", false, false], ["Benjamin", 100, "LA"], ["Benjamin", 100, "LA", false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false], ["Benjamin", 100, "LA", false, false]]]], "input_output_examples": "[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]], [['Varsha']]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef index_minimum(test_list: List[Tuple[Any, Any]]) -> Any:"}
{"task_id": "Mbpp/95", "requirement": "from typing import List\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\"\"\"", "entry_point": "Find_Min_Length", "canonical_solution": "\ndef Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength \n", "base_input": [[[[1], [1, 2]]], [[[1, 2], [1, 2, 3], [1, 2, 3, 4]]], [[[3, 3, 3], [4, 4, 4, 4]]]], "plus_input": [[[[], [], [], [], [], []]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[], [], [], [], []]], [[[], [], []]], [[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[4, 1, 2, 3], [4, 5], [4, 1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13]]], [[[], [], [9, 2, -89, 83, 13], [], [], [], []]], [[[]]], [[[], [], [], [true, false, 84.98850542252845, true], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13]]], [[[false], [false]]], [[[84.98850542252845, -78.5618531155085]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [6, 7, 8, 5, 9]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13], [1, 2, 3]]], [[[4, 1, 2, 3], [4, 8], [4, 1, 2, 3], [6, 11, 7, 8, 9, 10], [11, 12, 13]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [true, true, true, true, false, true, true]]], [[[], [], [], [true, false, 84.98850542252845, true], [], [], [], [], [], [], [false, false, false, true, true], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [1, 2, 3]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [1, 2, 3]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [true, true, true, true, false, true, true], [85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10]]], [[[1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 8, 5, 9], [6, 8, 5, 9], [4, 5], [6, 8, 5, 9], [11, 12, 13], [11, 12, 13]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [true, true, true, true, false, true, true, true], [85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[1, 2, 3], [6, 7, 8, 9, 10], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 13], [4, 5], [6, 7, 8, 5, 13], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 5, 9], [6, 7, 5, 9]]], [[[4, 1, 2, 3], [4, 8], [4, 1, 2, 3], [11, 12, 13]]], [[[], [], [], [], [], [], [], ["nmUTpTB", "LqgBbFug", "A", "YmVhY"], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13], [11, 12, 13]]], [[[], [], [], [-89, 12, 11], [false], [], []]], [[[4, 1, 3, 3], [4, 8], [4, 1, 3, 3], [4, 1, 3, 3], [11, 12, 13]]], [[[6, 7, 8, 9], [4, 5], [6, 7, 8, 9]]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13], [11, 12, 13]]], [[[84.98850542252845, -78.5618531155085, -78.5618531155085], [84.98850542252845, -78.5618531155085, -78.5618531155085]]], [[[], [false, true, false, false, false, true, false, true], [], [], [], [], [], []]], [[[1, 2, 3], [6, 8, 5, 9], [6, 8, 5, 9], [6, 8, 5, 9], [11, 12, 13], [11, 12, 13], [1, 2, 3]]], [[[6, 7, 5, 9], [6, 7, 5, 9]]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13], [11, 12, 13], [11, 12, 13]]], [[[6, 7, 5, 9], [6, 7, 5, 9], [6, 7, 5, 9]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 8, 10, 9], [6, 7, 8, 8, 10, 9], [11, 12, 13], [1, 2, 3]]], [[[], [33, 9, -70, false, -84, -42, false, -64, 7, -66], [], [], []]], [[[4, 2, 3], [6, 11, 7, 8, 9, 10], [4, 8], [4, 2, 3], [6, 11, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 9, 10], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 8, 5, 9, 8], [6, 8, 5, 9, 8], [6, 8, 5, 9, 8], [6, 8, 5, 9, 8], [11, 12, 13], [11, 12, 13], [1, 2, 3], [6, 8, 5, 9, 8]]], [[[84.98850542252845, -78.5618531155085, -78.5618531155085]]], [[[6, 7, 8, 9], [4, 5], [6, 7, 8, 9], [6, 7, 8, 9]]], [[[4, 1, 2, 3], [4, 5], [4, 1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13], [4, 1, 2, 3], [6, 7, 8, 9, 10]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.52239660663136, -78.5618531155085], [true, true, true, true, false, true, true]]], [[[false]]], [[[], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84], [], [], [], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84]]], [[[1, 2, 2, 3], [4, 5], [11, 12, 13], [1, 2, 2, 3], [6, 7, 8, 9, 10]]], [[[33, 9, -70, false, -84, -42, false, -64, 7, -66], [], [], [90, 33, 2, 13, 69, 3, 83, 2]]], [[[2, -84, 3], [5], [5], [6, 7, 8, 9, 10], [2, -84, 3], [11, 12, 13]]], [[[3, 2, 3], [3, 2, 3], [6, 7, 8, 5, 9], [3, 2, 3], [4, 4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13], [3, 2, 3]]], [[[], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84], [], [], [], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84], [33, 9, -70, false, -84, -42, false, -64, 7, -66, -84], []]], [[[6, 7, 8], [4, 5], [6, 7, 8]]], [[[1, 2, 3], [6, 7, 8, 9], [6, 7, 8, 9], [6, 7, 8, 9], [11, 12, 13], [6, 7, 8, 9], [11, 12, 13], [1, 2, 3]]], [[[], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [1, 3, 6, 7, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10]]], [[[], [33, 9, false, -70, false, -84, -42, false, -64, 7, -66], [], [], []]], [[[4, 1, 2, 3], [4, 5], [4, 1, 2, 3], [6, 7, 8, 9, 10], [11, 12, 13], [11, 12, 13]]], [[[false, true, true, true, true, false, false, false], [], []]], [[[2, 9, 63, 9, 4, 2, -83, -84, -78], [33, 9, -70, false, -84, -42, false, -64, 7, -66], [], [], []]], [[[4, 1, 2, 2, 3], [4, 5], [4, 1, 2, 2, 3], [4, 1, 2, 2, 3], [6, 7, 8, 9, 10], [11, 12], [4, 1, 2, 2, 3]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13, 12], [11, 12, 13, 12]]], [[[], [33, 9, -70, false, -84, -42, false, -64, 7, -66], [], [], [], []]], [[[3, 2, 3, 3], [3, 2, 3, 3], [6, 7, 8, 5, 9], [3, 2, 3, 3], [4, 4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [11, 12, 13], [3, 2, 3, 3]]], [[[6, 7, -84, 8, 9], [6, 7, -84, 8, 9], [4, 5], [6, 7, -84, 8, 9]]], [[[4, 1, 2, 2, 3], [4, 5], [4, 1, 2, 2, 3], [4, 1, 2, 2, 3], [11, 12], [4, 1, 2, 2, 3]]], [[[4, 1, 2, 3, 4], [4, 1, 2, 3, 4], [4, 8], [11, 12, 13, 13], [4, 1, 2, 3, 4], [11, 12, 13, 13]]], [[[-58.13858535192631, 85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [-58.13858535192631, 85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [true, true, true, true, false, true, true, true], [true, true, true, true, false, true, true, true]]], [[[6, 11, 7, 8, 6, 10], [4, 2, 3], [6, 11, 7, 8, 6, 10], [4, 8], [4, 2, 3], [6, 11, 7, 8, 6, 10], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 9, 10, 7], [6, 7, 8, 9, 10, 7], [6, 7, 8, 9, 10, 7], [11, 12, 13], [6, 7, 8, 9, 10, 7], [11, 12, 13]]], [[[4, 5, 4], [6, 7, 8, 5, 13], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 13, 13, 12], [11, 13, 13, 12]]], [[[], [], [], [], [], [], [], ["nmUTpTB", "LqgBbFug", "A", "YmVhY"], ["LqgBbFug", "ADAvRmZZL", "A", ""], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], []]], [[[2, -84, 3], [5], [5], [6, 7, 8, 9, 10], [2, -84, 3], [11, 12, 13], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 8, 9], [4, 5, 5], [6, 7, 8, 5, 8, 9], [11, 12, 13]]], [[[1, 2, 3], [5, 7, 8, 5], [5, 7, 8, 5], [5, 7, 8, 5], [5, 7, 8, 5]]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13], [6, 7, 8, 9, 10], [1, 2, 3]]], [[[], [33, 9, false, -84, -42, false, -64, 7, -66, -84], [], [], [], []]], [[[1, 2, 3], [6, 7, 8, 5, 9], [4, 5], [6, 7, 8, 5, 9], [11, 12, 13], [1, 2, 3], [6, 7, 8, 5, 9]]], [[[6, 11, 7, 8, 6, 10], [4, 2, 3], [6, 11, 7, 8, 6, 10], [4, 8], [6, 11, 7, 8, 6, 10], [11, 12, 13], [4, 8]]], [[[1, 2, 3], [6, 7, 5, 9], [4, 5], [6, 7, 5, 9], [12, 13, 12], [12, 13, 12]]], [[[1, 2, 3], [6, 9, 8, 9, 10], [6, 9, 8, 9, 10], [11, 12, 13], [6, 9, 8, 9, 10], [11, 12, 13]]], [[[], [false, true, false, false, false, true, false, true], [], [], [], [], [], [], []]], [[[false], [false], [false]]], [[[4, 1, 2, 2, 3], [4], [4, 1, 2, 2, 3], [4, 1, 2, 2, 3], [11, 12], [4, 1, 2, 2, 3]]], [[[1, 2, 3], [6, 8, 5, 9], [6, 8, 5, 9], [4, 5], [6, 8, 5, 9], [11, 12, 13, 11], [11, 12, 13, 11], [11, 12, 13, 11], [6, 8, 5, 9]]], [[[3, 2, 3, 3], [3, 2, 3, 3], [6, 7, 8, 5, 9, 8], [6, 7, 8, 5, 9, 8], [3, 2, 3, 3], [4, 4, 5], [6, 7, 8, 5, 9, 8], [11, 12, 13], [11, 12, 13], [3, 2, 3, 3], [11, 12, 13]]], [[[1, 2, 3], [6, 7, 8, 5, 9], [5], [11, 12, 13], [11, 12, 13], [6, 7, 8, 5, 9], [11, 12, 13]]], [[[], [], [], [true, false, 84.98850542252845, true], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [69, 8, -42, 6], [], [], [], [], [], []]], [[[85.61630620077268, -90.47064487499253, 87.92412950816434, 84.98850542252845, -78.5618531155085], [85.61630620077268, -90.47064487499253, 87.92412950816434, 84.98850542252845, -78.5618531155085]]], [[[false, true, false, false, false, true, false, true], [], [], [], [], [], []]], [[[85.61630620077268, 84.98850542252845, 84.98850542252845, -78.5618531155085], [true, true, true, true, false, true, true, true], [85.61630620077268, 84.98850542252845, 84.98850542252845, -78.5618531155085], [85.61630620077268, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[1, 2, 2, 3, 1], [4, 5], [11, 12, 13], [1, 2, 2, 3, 1], [1, 2, 2, 3, 1], [6, 7, 8, 9, 10], [1, 2, 2, 3, 1]]], [[[6, 11, 7, 8, 6, 10], [4, 2, 3], [6, 11, 7, 8, 6, 10], [8], [6, 11, 7, 8, 6, 10], [11, 12, 13], [8]]], [[[4, 1, 2, 3, 4], [4, 8], [7, 11, 12, 13, 13], [4, 1, 2, 3, 4], [7, 11, 12, 13, 13]]], [[[4, 5, 4], [6, 7, 8, 5, 13], [11, 12, 13], [4, 5, 4]]], [[[85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085], [85.61630620077268, -90.47064487499253, 84.98850542252845, 84.98850542252845, -78.5618531155085]]], [[[62.65634626917724, -78.5618531155085], [62.65634626917724, -78.5618531155085], [62.65634626917724, -78.5618531155085]]], [[[], [], [true, "ERSEFXmEb", [-90.47064487499253, -61.40371790488326, 84.52239660663136], false, {"-80": null, "-78": -1.574803399508525, "47": 6, "-81": 4.848176964479563, "82": false, "6": 5}, -58.13858535192631, true, null, "ERSEFXmEb"], [], [], [], []]]], "input_output_examples": "[[[[1], [1, 2]]], [[1]]]", "starter_code": "from typing import List\ndef Find_Min_Length(lst: List[List[Any]]) -> int:"}
{"task_id": "Mbpp/96", "requirement": "def divisor(n: int) -> int:\"\"\"\nWrite a python function to find the number of divisors of a given integer.\"\"\"", "entry_point": "divisor", "canonical_solution": "\ndef divisor(n):\n  return sum(1 for i in range(1, n + 1) if n % i == 0)\n", "base_input": [[15], [12], [9]], "plus_input": [[79337], [79336], [86], [87], [88], [85], [79335], [79334], [79333], [79332], [true], [89], [79331], [95], [90], [79338], [91], [92], [93], [84], [94], [83], [79330], [82], [46], [47], [44], [48], [49], [81], [43], [42], [96], [41], [45], [97], [79], [78], [79329], [80], [50], [40], [79328], [51], [17], [98], [39], [16], [18], [99], [38], [79327], [19], [20], [79325], [77], [15], [79339], [37], [36], [79324], [79340], [79341], [35], [34], [79323], [73], [79322], [21], [22], [79320], [52], [23], [74], [65], [79326], [79321], [33], [79319], [76], [32], [14], [75], [57], [100], [62], [67], [72], [58], [59], [60], [66], [56], [53], [101], [54], [68], [63], [55], [61], [64]], "input_output_examples": "[[[15]], [[4]]]", "starter_code": "def divisor(n: int) -> int:"}
{"task_id": "Mbpp/97", "requirement": "from typing import List\nfrom typing import Dict\ndef frequency_lists(list1: List[List[Any]]) -> Dict[Any, int]:\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\"\"\"", "entry_point": "frequency_lists", "canonical_solution": "\ndef frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    return {x: list1.count(x) for x in list1}\n", "base_input": [[[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]], [[[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]]]], "plus_input": [[[[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 8], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 8], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 8]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 4, 5, 5, 5]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 8, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 3]]], [[[1, 2, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 6, 7, 8, 9, 9], [1, 2, 3, 4, 6, 7, 8, 9, 9]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5], [1, 1, 1, 2, 2, 2, 3, 3, 3]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6]]], [[[2, 2, 2, 3, 4, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 3, 4, 5, 6, 7, 8, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9, 9, 3]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 8, 5, 5], [3, 3, 3, 4, 4, 4, 8, 5, 5]]], [[[1, 1, 1, 1], [2, 2, 6, 2, 2]]], [[[2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 8], [2, 3, 1, 4, 5, 6, 7, 8, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 8], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[2, 3, 1, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5], [1, 1, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 8, 5, 5]]], [[[7, 1, 2, 3, 4, 5, 6, 7, 8, 2, 9, 9, 3], [7, 1, 2, 3, 4, 5, 6, 7, 8, 2, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 8], [7, 1, 2, 3, 4, 5, 6, 7, 8, 2, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 8], [1, 2, 3, 4, 5, 6, 7, 8, 8], [7, 1, 2, 3, 4, 5, 6, 7, 8, 2, 9, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 8]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [2, 3, 9, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 9, 4, 5, 6, 7, 8, 9], [2, 3, 9, 4, 5, 6, 7, 8, 9], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7], [1, 2, 4, 7, 6, 2, 7, 8, 9, 7]]], [[[2, 2, 2, 2], [3, 3, 3, 3]]], [[[1, 2, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5], [1, 1, 1, 2, 2, 2, 3, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[1, 3, 1, 1, 1, 2, 2, 3, 3, 3], [1, 3, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [8, 3, 3, 3, 4, 4, 4, 5, 5, 7], [2, 2, 2, 3, 3, 3, 4, 4, 4], [8, 3, 3, 3, 4, 4, 4, 5, 5, 7]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3, 1], [1, 1, 1, 2, 2, 2, 3, 3, 3, 1], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9]]], [[[1, 7, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 5, 5, 5], [1, 7, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 5, 5, 5]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5], [2, 2, 2, 3, 3, 3, 4, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 5], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 5], [2, 2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 5], [2, 2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[1, 2, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 4, 5, 6, 7, 8, 9]]], [[[2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6], [2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 3, 1, 1, 1, 2, 2, 3, 3, 3], [1, 3, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [1, 3, 1, 1, 1, 2, 2, 3, 3, 3]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 8, 8, 8], [2, 3, 1, 4, 5, 6, 7, 8, 8, 8, 8], [2, 3, 1, 4, 5, 6, 7, 8, 8, 8, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 1, 4, 5, 6, 7, 8, 8, 8, 8], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9]]], [[[1, 2, 3, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 4], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[0, 1, 1, 1, 1], [0, 1, 1, 1, 1], [2, 2, 6, 2, 2]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6]]], [[[1, 3, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [1, 3, 1, 1, 1, 2, 2, 3, 3, 3]]], [[[2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6], [2, 3, 4, 5, 6, 7, 8, 9]]], [[[1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 4, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 1, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4, 4, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 2, 3, 4, 5, 6, 2, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 3, 2, 2, 3, 3, 2], [1, 1, 1, 3, 2, 2, 3, 3, 2], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 3, 1, 1, 1, 2, 2, 5, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [2, 2, 2, 3, 3, 3, 4, 9, 4, 4], [1, 3, 1, 1, 1, 2, 2, 5, 3, 3, 3], [1, 3, 1, 1, 1, 2, 2, 5, 3, 3, 3]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 6, 6, 7, 8, 9], [1, 2, 3, 4, 6, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3], [1, 2, 3, 4, 6, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 9, 3]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5], [2, 2, 2, 3, 3, 3, 4, 4, 4]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 4, 4, 5, 6, 7, 8, 9], [1, 2, 4, 4, 5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 3, 2, 2, 3, 3, 2], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]]], [[[1, 2, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9], [1, 2, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9]]], [[[1, 3, 2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 3, 2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 8, 5, 5]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [8, 3, 3, 3, 4, 4, 4, 5, 5, 7], [2, 2, 2, 3, 3, 3, 4, 4, 4], [8, 3, 3, 3, 4, 4, 4, 5, 5, 7]]], [[[1, 7, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 5, 5, 5], [1, 7, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 5, 5, 5], [3, 3, 3, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 1]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 7, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 5, 5, 5]]], [[[2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6], [2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6], [1, 2, 3, 4, 6, 5, 6, 7, 8, 9, 6]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 1, 1, 2, 2, 2, 3, 3, 3], [2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 3, 4, 4, 4, 5, 5, 5], [1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 3, 3]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [3, 3, 4, 4, 4, 5, 5, 5], [1, 1, 1, 8, 2, 2, 3, 3, 3, 1], [1, 1, 1, 8, 2, 2, 3, 3, 3, 1], [3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 7, 8, 6], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]]], [[[2, 2, 2, 3, 3, 3, 4, 4, 4], [1, 1, 1, 2, 2, 2, 3, 3, 3], [1, 1, 1, 2, 2, 2, 3, 3, 3], [3, 3, 3, 4, 4, 4, 5, 5, 5], [3, 3, 3, 4, 4, 4, 5, 5, 5]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9, 1], [1, 2, 3, 4, 5, 6, 7, 8, 9, 9]]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9], [1, 2, 4, 5, 6, 2, 7, 8, 9]]]], "input_output_examples": "[[[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]], [[{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}]]]", "starter_code": "from typing import List\nfrom typing import Dict\ndef frequency_lists(list1: List[List[Any]]) -> Dict[Any, int]:"}
{"task_id": "Mbpp/98", "requirement": "from typing import List\nfrom typing import Union\ndef multiply_num(numbers: List[Union[int, float]]) -> float:\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\"\"\"", "entry_point": "multiply_num", "canonical_solution": "\ndef multiply_num(numbers):  \n    from functools import reduce\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)\n", "base_input": [[[8, 2, 3, -1, 7]], [[-10, -20, -30]], [[19, 15, 18]]], "plus_input": [[[100000, 2, 3]], [[2.5, 1.5, 0, -3, 4.2]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]], [[1, 10, 100, 1000, 10000, 100000]], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]], [[0, 0]], [[2, 3, 4, -2, 0]], [[1000000, 2000000, 3000000, -1000000]], [[5, 5, 5, 5]], [[1, -2, 3, -4, 5]], [[1, -2, 3, -4, 5, -2]], [[2, -2, 3, -6, -2, 0]], [[0, 0, 0]], [[2, 3, 4, -2, 0, 2]], [[2, 2, 3, 4, -2, 0]], [[2, 3, 4, -2, 0, -2]], [[3, 100000, 2, 3]], [[1, 10, 100, 1000, 10000, 100000, 100000]], [[1, 10, 100, 1000, 10000, 100000, 10]], [[2, 3, 0, -2, 0, 2]], [[2, 1, -2, 0, 2]], [[1000000, 2000000, 3000000, -1000000, -1000000]], [[-1, -2, -3, -5, -6, -7, -8, -9, -10]], [[1000000, 2000000, -1000000]], [[100000, 2]], [[0]], [[1000000, 2000000, -9, -1000000, 1000000]], [[-9, -1, -2, -3, -4, -5, -7, -8, -9, -10]], [[2, -2, 3, -7, -6, -2, 0]], [[0.5, 0.75, 0.1, 0.2, 0.2734396265136305, 0.3, 0.4, 0.5, 0.6, 0.7]], [[-1, -2, -1, -3, -4, -5, -6, -7, -8, -9, -10, -1]], [[2, 3, -2, 0]], [[2, 3, -1, -6, -2, 0]], [[1000000, -1000000]], [[5, 5, 5]], [[5, 5]], [[-1, -2, -3, 0, -5, -6, -7, -8, -9, -10, -1]], [[100000, 2, 100001, 3]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.5, 0.1027137544003226, 0.6, 0.7, 0.3]], [[2, 3, -4, 4, -2, 0]], [[100001, 2, -2, 0]], [[0.5, 0.75, 0.7, 0.1, 0.2, 0.3, 0.4, 0.5, 1.5, 0.6, 0.7]], [[-5, -2, 2, 5]], [[-1]], [[2, 3, -3, 4, -2, 0, -2]], [[1, 9, 10, 100, 1000, 10000, 100000, 10000, 1000]], [[2.5, 1.5, 0]], [[100000, 3]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.5, 0.1027137544003226, 0.6, 0.7, 0.3, 0.7]], [[2, 3, -3, 4, -2, 0, -3]], [[-2, 2, -1, 5]], [[0.5, 0.75, 1.5, 0.2, 0.2734396265136305, 0.3, 0.4, 0.5, 0.6, 0.7]], [[1, 10, 100, 1000, 10000, -9]], [[1.6805641411244991, 2.5, 1.5, 0]], [[3000000, 2, 3, 4, 0, 1]], [[0, 6, 5, 5]], [[1, 10, 100, 1000, 10000, 100000, 100000, 1]], [[2.5, 0, 2.5]], [[-6, 0]], [[1000000, 2000000, 3000000, -1000000, -1000000, 3000000]], [[2, 3, -2, 0, 3]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.4, 0.2734396265136305, 0.5, 0.1027137544003226, 1.0039341653341238, 0.3, 0.7]], [[2, 3, -6, -2, 0]], [[1]], [[-9, 1000000, 2000000, 3000000, -1000000]], [[-5, -1, 2, 5]], [[5, 5, 1, 5]], [[100000, 2, 4]], [[1, 10, 101, 100, 1000, 10000, -9]], [[2, 3, 0, 2]], [[2, 3, -2, 0, 3, 3]], [[-1, -2, -1, -3, -4, -5, -6, -8, -8, -9, -10, -1]], [[1000000, 2000000, -9, -1000000, 1000000, 2000000]], [[0.5, 0.75, 0.1, 0.2, 0.3, 0.3408682932336746, 0.4, 0.2734396265136305, 0.5, 0.1027137544003226, 1.0039341653341238, 0.3, 0.7]], [[2, 3, 0, 100000, 2]], [[1000000, -1000000, 1000000]], [[-1, -2, -1, -3, -4, -5, -6, -8, -8, -9, -10, 9, -1]], [[2.5, 1.5, 0, 1.5]], [[2, 3, 4, -2, -10, 0, 2]], [[0, 0, 1000000, 0, 0]], [[1, 1]], [[2, 3, 4, 1, -2, 0]], [[100000, -2, 3, 100000]], [[2, 3, 0, -10, -2, 0, 2]], [[1.6805641411244991, 1.5, 0]], [[3]], [[2.5, 1.5]], [[1, 11, 101, 100, 1000, 10000, -9, 1]], [[1.6805641411244991, 1.6805641411244991]], [[-1, -2, -1, -3, -4, -5, -7, -8, -9, -10, -1]], [[1000000, 5]], [[1, 10, 100, 1000, -9, 9999, -9]], [[-6, -6]], [[2, -2, 3, -6, -2]], [[0.5, 0.75, 0.1, 0.2, 0.75, 0.4, 0.5, 0.6, 0.7]], [[2, 3, 4, -1, 1]], [[2000000, -9, -1000000, 1000000]], [[1, 10, 100, 1000, 100000]], [[-1000000, 1, 10, 100, 1000, -9, -9]], [[1, 3, 4, -2, -10, 0, 2]], [[2, 3, 4, -2, -10, 0, 2, -3, 2]], [[1, 10, 100, 10000, 100000, 100000, 1]], [[2.5, 0.1027137544003226, 1.5, 0]], [[2, 3, 0, -10, -2, 0, 3, 2]], [[1000001, 2000000, -9, -1000000, 1000000]], [[2, 2, 3, 0, -2, 0, 2]], [[1, 10, 100, 10000, 100000, 1]], [[2, 1, -2, 0, -2]], [[2.5, 1.5, 0, 1]], [[-5, -1, 1, 5]]], "input_output_examples": "[[[(8, 2, 3, -1, 7)]], [[-67.2]]]", "starter_code": "from typing import List\nfrom typing import Union\ndef multiply_num(numbers: List[Union[int, float]]) -> float:"}
{"task_id": "Mbpp/99", "requirement": "def decimal_to_binary(n: int) -> str:\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\"\"\"", "entry_point": "decimal_to_binary", "canonical_solution": "\ndef decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\") \n", "base_input": [[8], [18], [7]], "plus_input": [[0], [-5], [999999999999999999999999999999999999999999], [-1000000000000000000000000000000000000000000], [-33], [false], [-1], [-1000000000000000000000000000000000000000001], [999999999999999999999999999999999999999998], [-999999999999999999999999999999999999999999], [true], [-6], [-68], [-34], [-1000000000000000000000000000000000000000002], [1000000000000000000000000000000000000000000], [2], [26], [1], [-69], [80], [-87], [-2], [-3], [79], [-7], [-1000000000000000000000000000000000000000003], [-999999999999999999999999999999999999999998], [3], [-999999999999999999999999999999999999999997], [-999999999999999999999999999999999999999996], [4], [1000000000000000000000000000000000000000001], [1000000000000000000000000000000000000000002], [25], [-97], [-35], [27], [999999999999999999999999999999999999999997], [28], [81], [-70], [-32], [55], [78], [77], [-999999999999999999999999999999999999999993], [-24], [-96], [-71], [-86], [-23], [-25], [24], [29], [-72], [86], [82], [46], [-98], [-26], [-95], [30], [23], [56], [999999999999999999999999999999999999999996], [-999999999999999999999999999999999999999995], [-4], [85], [-36], [57], [87], [58], [83], [-1000000000000000000000000000000000000000004], [999999999999999999999999999999999999999995], [84], [54], [20], [31], [-999999999999999999999999999999999999999994], [-73], [-37], [-22], [45], [13], [-74], [75], [88], [71], [-31], [-99], [-100], [22], [76], [14], [59], [-88], [74], [-1000000000000000000000000000000000000000005], [-94], [-49], [1000000000000000000000000000000000000000003], [-93]], "input_output_examples": "[[[8]], [['1000']]]", "starter_code": "def decimal_to_binary(n: int) -> str:"}
{"task_id": "Mbpp/100", "requirement": "def next_smallest_palindrome(num: int) -> int:\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\"\"\"", "entry_point": "next_smallest_palindrome", "canonical_solution": "\ndef next_smallest_palindrome(num):\n    if all(digit == '9' for digit in str(num)):\n        return num + 2\n    else:\n        num = [int(digit) for digit in str(num)]\n        n = len(num)\n        mid = n // 2\n        left_smaller = False\n        # if n is odd, ignore the middle digit at first\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n        while i >= 0 and num[i] == num[j]:\n            i -= 1\n            j += 1\n        # stop if traverse end or difference found\n        if i < 0 or num[i] < num[j]:\n            left_smaller = True\n        # copy left to right\n        while i >= 0:\n            num[j] = num[i]\n            j += 1\n            i -= 1\n        # the middle digit must be incremented\n        if left_smaller:\n            carry = 1\n            i = mid - 1\n            if n % 2:\n                num[mid] += carry\n                carry = num[mid] // 10\n                num[mid] %= 10\n                j = mid + 1\n            else:\n                j = mid\n            while i >= 0:\n                num[i] += carry\n                carry = num[i] // 10\n                num[i] %= 10\n                num[j] = num[i]\n                j += 1\n                i -= 1\n    return int(\"\".join(map(str, num)))\n", "base_input": [[99], [1221], [120]], "plus_input": [[0], [45678], [1], [45679], [2], [3], [45681], [4], [5], [45683], [45682], [45677], [6], [45676], [45675], [45680], [34], [45674], [33], [45673], [7], [32], [8], [58], [45672], [57], [55], [9], [31], [36], [56], [45684], [30], [29], [87], [45671], [40], [45685], [54], [35], [10], [45670], [96], [45669], [28], [11], [97], [59], [98], [27], [37], [45686], [41], [60], [53], [99], [13], [26], [14], [52], [51], [25], [12], [50], [24], [85], [23], [45687], [39], [86], [88], [61], [38], [45668], [95], [84], [45667], [22], [45688], [42], [45666], [89], [15], [83], [45665], [90], [91], [49], [100], [45689], [94], [45664], [82], [62], [81], [16], [93], [101], [80], [102], [20], [48]], "input_output_examples": "[[[99]], [[101]]]", "starter_code": "def next_smallest_palindrome(num: int) -> int:"}
{"task_id": "Mbpp/101", "requirement": "from typing import List\ndef kth_element(arr: List[int], k: int) -> int:\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\"\"\"", "entry_point": "kth_element", "canonical_solution": "\ndef kth_element(arr, k):\n  return arr[k-1]\n", "base_input": [[[12, 3, 5, 7, 19], 2], [[17, 24, 8, 23], 3], [[16, 21, 25, 36, 4], 4]], "plus_input": [[[100, 99, 98, 97, 96], 5], [[50, 40, 30, 20, 10], 1], [[1000, 999, 998, 997, 996], 3], [[1000000, 500000, 100000, 50000, 10000], 4], [[50, 40, 30, 20, 10, 40], 1], [[100, 99, 98, 20, 97, 96], 5], [[100, 99, 98, 20, 97, 96], 6], [[100, 99, 98, 97, 96, 98], 5], [[51, 40, 99, 41, 30, 41, 20, 10], 1], [[500000, 100000, 50000, 10000], 4], [[1000, 999, 998, 997, 996, 999], 3], [[100, 99, 98, 97, 96], 4], [[100, 100, 98, 20, 97, 96, 100], 7], [[500000, 500000, 100000, 50000, 10000], 4], [[50, 40, 10, 20, 10, 40], 4], [[100, 99, 98, 98, 97, 96], 5], [[100, 99, 98, 20, 97], 5], [[100, 99, 96, 20, 97, 96], 6], [[100, 99, 96, 20, 97, 96], 5], [[100, 99, 99, 98, 97, 96], 4], [[51, 40, 99, 41, 30, 41, 20, 10], 7], [[100, 96, 20, 97, 96], 4], [[1000, 3, 999, 998, 997, 996, 999], 3], [[999, 100, 99, 98, 97, 96], 5], [[100, 99, 99, 98, 97], 4], [[1000, 3, 999, 998, 997, 996, 999], 4], [[100, 99, 99, 98, 96], 4], [[100, 99, 98, 99, 20, 97], 5], [[100, 99, 98, 20, 97, 100], 5], [[1000, 999, 998, 997, 996, 999], 4], [[51, 40, 99, 20, 41, 30, 41, 20, 10], 1], [[100, 99, 98, 97, 96, 98], 6], [[1000, 3, 999, 998, 997, 996, 998], 4], [[7, 100, 100, 98, 20, 97, 96, 100], 7], [[100, 99, 98, 97, 1000000, 96], 4], [[100, 19, 96, 20, 97, 96], 4], [[7, 100, 100, 98, 97, 19, 96, 100], 7], [[100, 99, 98, 20, 7, 97, 100], 4], [[100, 99, 98, 20, 96, 96], 5], [[500000, 100000, 50000, 10000], 3], [[7, 100, 100, 98, 97, 19, 96, 100], 8], [[7, 100, 100, 98, 97, 19, 96, 100], 3], [[51, 40, 99, 41, 30, 20, 10], 1], [[50, 997, 40, 30, 20, 10], 1], [[100, 99, 98, 97, 1000000, 96], 2], [[100, 95, 1, 98, 97, 1000000, 96], 4], [[51, 40, 99, 41, 30, 20, 10], 2], [[100, 100, 98, 20, 97, 96, 10000], 1], [[100, 99, 99, 98, 97], 5], [[100, 99, 98, 98, 97, 96], 6], [[100, 100, 98, 20, 97], 5], [[100, 99, 96, 19, 97, 96], 4], [[50, 40, 30, 20, 11], 1], [[100, 96, 99, 97, 20, 97, 96], 7], [[100, 99, 96, 10000, 20, 96], 3], [[50, 40, 30, 20, 7], 1], [[1000, 3, 999, 998, 997, 996, 999, 999], 3], [[100, 99, 98, 98, 97, 96, 100], 5], [[50, 40, 6, 20, 10, 40], 2], [[7, 100, 100, 98, 20, 97, 96, 100, 97], 7], [[100, 99, 96, 19, 97, 96, 99], 4], [[100, 99, 98, 4, 96, 96], 5], [[100, 99, 98, 20, 95, 96], 5], [[100, 19, 96, 20, 97, 96, 96], 4], [[41, 100, 100, 98, 20, 97, 96, 10000], 1], [[7, 100, 100, 6, 98, 97, 19, 96, 100], 8], [[7, 100, 100, 98, 20, 97, 96, 100, 100], 7], [[50, 997, 97, 40, 30, 20, 10], 1], [[100, 96, 20, 96, 96], 5], [[1000, 998, 997, 996, 999], 3], [[7, 51, 100, 98, 20, 97, 96, 100], 7], [[100, 19, 30, 20, 97, 96], 4], [[1000, 3, 999, 998, 997, 5, 996, 999], 3], [[7, 100, 100, 98, 11, 97, 96, 100, 100], 7], [[100, 99, 96, 20, 97, 95], 6], [[7, 100, 100, 98, 20, 97, 96, 100, 100], 6], [[100, 98, 98, 97, 96], 5], [[100, 99, 98, 98, 97, 96, 100, 99], 5], [[50, 40, 20, 10, 40], 1], [[51, 40, 99, 41, 30, 41, 20, 10], 6], [[51, 40, 99, 20, 41, 30, 41, 20, 10], 7], [[7, 100, 100, 98, 20, 30, 96, 100], 7], [[7, 51, 100, 98, 20, 30, 97, 96, 100], 7], [[101, 99, 98, 97, 96], 4], [[100, 99, 99, 98, 96], 3], [[50, 40, 20, 10, 40, 20], 1], [[50, 40, 20, 7], 1], [[100, 99, 98, 20, 95, 96], 4], [[7, 100, 100, 98, 20, 97, 10000, 96, 100], 7], [[97, 100, 99, 98, 97, 96, 98], 6], [[100, 96, 20, 97, 998, 96], 4], [[51, 3, 999, 998, 997, 996, 999], 3], [[101, 99, 98, 97, 96], 1], [[7, 100, 41, 98, 20, 30, 96, 100], 7], [[7, 100, 100, 96, 97, 19, 96, 100], 8], [[7, 51, 100, 20, 20, 97, 96, 100], 7], [[6, 7, 100, 100, 98, 97, 19, 96, 100], 7], [[100, 99, 98, 4, 96], 5], [[51, 3, 999, 998, 997, 996, 999], 4], [[7, 100, 98, 97, 19, 96, 100, 100], 7], [[100, 99, 98, 20, 7, 97, 100], 5], [[1000000, 100, 96, 20, 97, 96], 4], [[100, 99, 98, 20, 95], 5], [[1000, 998, 997, 996], 3]], "input_output_examples": "[[[[12, 3, 5, 7, 19], 2]], [[3]]]", "starter_code": "from typing import List\ndef kth_element(arr: List[int], k: int) -> int:"}
{"task_id": "Mbpp/102", "requirement": "def snake_to_camel(word: str) -> str:\"\"\"\nWrite a function to convert a snake case string to camel case string.\"\"\"", "entry_point": "snake_to_camel", "canonical_solution": "\ndef snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))\n", "base_input": [["python_program"], ["python_language"], ["programming_language"]], "plus_input": [["___python_program"], ["__12_python__language___"], ["your_programming__langu__age___"], ["another__ex44ample___"], ["_"], ["word"], ["no_underscores"], ["_leading"], ["trailing_"], ["__multiple_consecutive__underscores__"], ["__12_python__languag_"], ["___p_ythonram"], ["your_nprogramming__langu__age___"], ["your_nprogramming_another__ex44ample____langu__age___"], ["__12_pythonno_underscores__languag_"], ["_lwordeading"], ["your_nprogramming_another__ex4no_underscores4ample____langu__age___"], ["your_programming__langu____12_python__languag_age___"], ["__12_pyth_"], ["__1__12_python__languag_2_pythonno_underscores__languag_"], ["___pgram"], ["_lwordeadin__12_python__language___g"], ["your_prtrailing___"], ["__12_pythonno_underscores__langu_ag_"], ["aiN"], ["worod"], ["_lwordeadin__12_python__languaage___g"], ["qaiNnJa"], ["aiN_lwordeading"], ["_lwordeadin__1_2_python__language___g"], ["your_nprogrammi__12_pyth_ng_another__ex4no_underscores4ample____langu__age___your_nprogramming__langu__age___"], ["your_pryour_nprogramming_another__ex4no_underscores4ample____langu__age___iling___"], ["__1____12_pythonno_underscores__langu_ag_12_python__languag_2_pythonno_underscores__languag_"], ["CVh"], ["_leadin_lwordeadin__12_python__languaage___gg"], ["_th_"], ["_lwordeadin__1_2_py__language___g"], ["trailing__12_python__languag__"], ["your_pr_th_ogramming__langu____12_python__languag_age___"], ["your_pryour_nprogramming_another__aiNex4no_underscores4ample____langu__age___iling___"], ["__12_python__language_g__"], ["aiN_lwordeadin__12_python__layour_nprogramming_another__ex4no_underscores4ample____langu__age___wordeading"], ["_lwordeadin__1_2_py__lawordnguaage___g"], ["__12_pythonno_underscores__lanuag_"], ["_____12_pyth_ram"], ["__1____12_pythonno_underscores__langu_a_lwordeadingg_12_python__languag_2_pythonno_underscores__languag_"], ["__"], ["_leadilng"], ["___python_progr__1____12_pythonno_underscores__langu_ag_12_python__l__languag_m"], ["__12_pythonno_underscores__langua_g_"], ["your_nprogramming_another__ex44ample_____12_pythonno_underscores__languag__langu__age___"], ["__12_python__l__"], ["__multiprlne_consecutive__underscores__"], ["___12_pyth_"], ["__1____12_pythonno_undngu_a_lwordeadingg_12_python__languag_2_pythonno_underscores__languag_"], ["your_nprogramming_another__ex44ample_____12_py___12_pyth_thonno_underscores__languag__langu__age___"], ["_____multiple_consecutive__underscores__python_program"], ["yo_ur_nprogr_amming_another__ex44ample____langu__age___"], ["_leadin_lwnordeadin__12_python__languaage___gg"], ["jzAx"], ["_leadin____12_pyth_lwordeadin__12_python__languaage___gg"], ["yo_ur_nprogr_amming_another__ex44am__multiprlne_consecutive__underscores__ple___1__12_python__languag_2_pythonno_underscores__languag___langu__age___"], ["__1____12_pythonno_underscores__langu_ag_12_python__languag_2_pythonno_underscores__languag_word"], ["_lwordeadin__12_python__lanuguage___g"], ["trailing___python_progr__1____12_pythonno_underscores__langu_ag_12_python__l__languag_m__12_python__languag__"], ["trailianguag_2_pythonno_underscores__languag__"], ["__1_2_p"], ["_leadil__multiple_consecutive__underscores__ng"], ["__1_2_qaiNnJap"], ["a__1_2_piN_lwordeading"], ["__NnJap"], ["__12_peythonno_underscores__lanuag_"], ["trailinig_"], ["trailiyour_yo_ur_nprogr_amming_another__ex44ample____langu__age___pryour_nprogramming_another__aiNex4no_underscores4ample____langu__ayour_nprogrammi__12_pyth_ng_another__ex4no_underscores4ample____langu__age___your_nprogramming__langu__age___ge___iling___"], ["X"], ["_leadin____12_pyth_lwordeadin__12_python__languaage___g1g"], ["_lwordeadin__1_2_py__lawordnguaage___g__1_2_p"], ["your_programming__langu____1y2_python__languag_age___"], ["your_pr_th_ogramming__langu____12__lwordeadingpython__languag_age___"], ["your_pr_th_ogramming__langu____12_your_programming__langu____1y2_python__languag_age____lwordeadingpython__languag_age___"], ["aiN_lwordeadiwordn__12_python__layour_nprogramming_another__ex4no_underscores4ample____langu__age___wordeading"], ["your_nprogr_lwordeadingammi__12_pyth_ng_another__ex4no_underscores4ample____langu__age___your_nprogramming__langu__age___"], ["___p_ythqaiNnJaonram"], ["12_python__l__"], ["_lwordeadin__12_python__lan_lwordeadin__12_python__languaage___gguaage___g"], ["__12_pythonaiN_lwordeading__l__"], ["trailing__12_python__layo_ur_nprogr_amming_another__ex44ample____langu__age___nguag__"], ["your__12_pythonno_underascores__langu_ag__nprogramming_another__ex4no_underscores4ample____langu__age"], ["your_pryour_nprotrailing__12_python__layo_ur_nprogr_amming_another__ex44ample____langu__age___nguag__gramming_another__ex4no_underscores4ample____langu__age___iling___"], ["__12n_pythonno_un_"], ["_____12_pyth__python_program"], ["_lwon__1__12_python__l__2_python__lanuguage___g"], ["your_programming__langu____12_python__languag_ag___pgram___"], ["____12n_pythonno_un_1_2_p"], ["_lwordeadin__12_python__lanugu_lwordeadingage___g"], ["aiyour_pryour_nprogramming_another__aiNex4no_undersco_lwordeadingres4ample____langu__age___iling___N"], ["__1_d___12_pythonno_underscores__langu_ag_12_python__languag_2_pythonno_underscores__languag_"], ["your_pr_th_ogramming__langu____12_your_programming__langu____1y2_python__languingpython__languag_age___"], ["your_nprogrammi__12__pyth_ng_another__ex4no_underscores4ample____langu__age___your_nprogramming__langu__age___"], ["your_pr_th_ogramming__langu____12_your_programming__langu____1y2_pythotn__languag_age____lwordeadingpython__languag_age___"], ["qaiNnJ_lwordeadin__1_2_py__language________12_pyth_ram"], ["your_pr_th_ogrammingyo_ur_nprogr_amming_another__ex44ample____langu__age_____langu____12_your_programming__langu____h1y2_python__languingpython__languag_age___"], ["____12n_pythonaiNno_un_1_2_p"], ["_lwordeadin__12_python__lanuguage_____pgram_g"], ["AOqPHkjh"], ["_lwon__1__12_python__l__2_python__lanuguage_no_underscores"], ["_____12_pyth_h_python_program_leadin_lwnordeadin__12_python__languaage___g"], ["your_pr_th_ogrammingyo_ur_nprogr_amming_another__ex44ample____langu__age_____ur_programming__langu____h1y2_python__languingpython__languag_age___"], ["your_pryour_nprotrailing__12_python__layo_ur_nprogr_amming_eanother__ex44ample____langu__age___nguag__gramming_another__ex4no_underscores4ample____langu__age___iling___"], ["your_pr_th_ogrammingyo_ur_nprogr_amming_another__ex44ample____langu__age_____ur_programming__langu____h1y2_python__lang__1_d___12_pythonno_underscores__langu_ag_12_python__languag_2_pythonno_underscores__languag_uingpython__languag_age___"]], "input_output_examples": "[[['python_program']], [['PythonProgram']]]", "starter_code": "def snake_to_camel(word: str) -> str:"}
{"task_id": "Mbpp/103", "requirement": "def eulerian_num(n: int, m: int) -> int:\"\"\"\nWrite a function to find the Eulerian number a(n, m).\"\"\"", "entry_point": "eulerian_num", "canonical_solution": "\ndef eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)\n", "base_input": [[3, 1], [4, 1], [5, 3]], "plus_input": [[0, 0], [1, 1], [1, 2], [1, 0], [0, 2], [0, 1], [2, 1], [2, 0], [2, 2], [2, 3], [3, 2], [1, 3], [0, 3], [2, 4], [1, 4], [4, 2], [4, 4], [3, 1], [4, 0], [4, 1], [3, 0], [0, 4], [3, 4], [5, 4], [3, 3], [5, 2], [4, 5], [5, 0], [1, 5], [false, true], [5, 5], [5, 1], [true, true], [6, 6], [2, 6], [0, 5], [6, 2], [4, 3], [6, 1], [3, 5], [5, 3], [7, 3], [4, 6], [7, 4], [5, 6], [5, 7], [6, 3], [6, 7], [0, 6], [false, false], [3, 6], [6, 4], [7, 6], [0, 7], [7, 2], [8, 7], [8, 2], [6, 5], [true, false], [7, 0], [2, 7], [8, 5], [6, 0], [0, 8], [4, 8], [7, 1], [8, 1], [7, 7], [4, 7], [2, 5], [8, 4], [10, 9], [9, 9], [10, 3], [10, 10], [3, 9], [10, 2], [2, 8], [8, 3], [5, 8], [9, 10], [8, 8], [2, 9], [4, 9], [9, 6], [7, 8], [8, 9], [1, 8], [1, 10], [11, 10], [5, 9], [11, 9], [5, 11], [9, 2], [7, 5], [8, 0], [6, 8], [1, 9], [8, 6], [9, 8], [9, 4]], "input_output_examples": "[[[3, 1]], [[4]]]", "starter_code": "def eulerian_num(n: int, m: int) -> int:"}
{"task_id": "Mbpp/104", "requirement": "from typing import List\ndef sort_sublists(input_list: List[List[int]]) -> List[List[int]]:\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\"\"\"", "entry_point": "sort_sublists", "canonical_solution": "\ndef sort_sublists(input_list):\n    return [sorted(x) for x in input_list]\n", "base_input": [[[["green", "orange"], ["black", "white"], ["white", "black", "orange"]]], [[[" red ", "green"], ["blue ", " black"], [" orange", "brown"]]], [[["zilver", "gold"], ["magnesium", "aluminium"], ["steel", "bronze"]]]], "plus_input": [[[]], [[["apple", "banana", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple", "banana"]]], [[["orange", "green", "green"], ["black", "white", "black", "white"], ["white", "orange", "orange", "green"]]], [[["apple", "banana", "cherry"], [], ["cherry", "apple", "banana"]]], [[["apple", "banana", "banana"], ["pear", "pear"], ["orange", "orange", "orange"]]], [[["apple", "banana", "cherry"], [], ["orange", "plum", "peach"]]], [[["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"], ["monkey"]]], [[["pear", "banana", "banana"], ["apple", "orange"], ["kiwi"], ["grape", "mango", "apple"]]], [[["red", "green", "blue"], ["yellow", "orange"], ["purple", "pink", "teal", "brown"]]], [[["a", "b"], ["c", "d"], ["e", "f"], ["g", "h"], ["i", "j"], ["k", "l"], ["m", "n"], ["o", "p"], ["q", "r"], ["s", "t"], ["u", "v"], ["w", "x"], ["y", "z"]]], [[[], [], []]], [[["apple", "banana", "cherry"], ["orange", "plum", "peach"]]], [[["cherry", "apple", "banana"], ["orange", "peach", "plum"], ["banana", "cherry", "apple"]]], [[["blue", "red", "green"], ["brown", "purple", "pink", "teal"], ["orange", "yellow"]]], [[["orange", "green"], ["white", "black"], ["black", "white", "orange"]]], [[["apple", "zebra", "cat"], ["dog", "elephant"], ["giraffe", "lion", "banana"]]], [[["red", "green", "blue"], [], ["orange", "purple", "brown"]]], [[["cat", "dog", "elephant"], ["giraffe", "tiger", "zebra"], ["monkey", "lion", "tiger"], ["banana"]]], [[["cherry", "banana", "apple"], ["peach", "orange", "plum"], ["cherry", "banana", "apple"]]], [[["elephant", "ant", "bee"], ["dog", "camel", "cat"], ["zebra", "giraffe", "lion"]]], [[["red", "green", "blue"], [], ["orange", "purple", "brown"], ["yellow", "pink", "teal"]]], [[["red", "green", "bpinklue", "blue"], ["yellow", "orange"]]], [[["blue", "red", "green"], ["brown", "purple", "pink", "teal"], ["brown", "purple", "pink", "teal"]]], [[["pear", "banana", "banana"], ["apple", "orange"], ["kiwi"], ["grape", "mango", "apple"], ["grape", "mango", "apple"]]], [[["apple", "banana", "cherry"], ["cherry", "appl", "banana"], ["apple", "banana", "cherry"], ["apple", "banana", "cherry"]]], [[["apple", "orange"], ["kiwi"], ["grape", "mango", "apple"]]], [[["apple", "orange"], ["kiwi"], ["grape", "mango", "apple"], ["grape", "mango", "apple"]]], [[["cat", "dog", "elephant"], [], ["zebra", "lion", "tiger"], ["monkey"]]], [[["orange", "green", "green"], ["white", "orange", "green"], ["black", "white", "black", "white"], ["white", "orange", "green"]]], [[["red", "green", "blue"], ["yellow", "pink"], [], ["orange", "purple", "brown"], ["yellow", "pink"], ["red", "green", "blue"]]], [[[], ["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"], []]], [[["banaa", "cherry", "banana", "apple"], ["peach", "orange", "plum"], ["cherry", "banana", "apple"]]], [[["cherry", "apple", "bsanana", "banana"], ["apple", "banana", "cherry", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple", "bsanana", "banana"]]], [[["orange", "green", "green"], ["black", "white", "black", "white"], ["white", "orange", "bsanana", "orange", "green"], ["black", "white", "black", "white"]]], [[["elephant", "ant", "bee"], ["zebra", "giraffe", "lion"]]], [[["white", "black"], ["black", "white", "orange"]]], [[["cherry", "banana", "p"], ["cherry", "banana", "p"], ["cherry", "banana", "p"], ["peach", "orange", "plum"], ["cherry", "banana", "apple"]]], [[["banana", "cherry"], ["cherry", "apple"], ["cherry", "apple", "banana"]]], [[["elephant", "ant", "bee"]]], [[["IODiWvh", "e", "f", "dog", "r", "cat", "a"], ["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"]]], [[["red", "green", "blue"], ["yellow", "orange"]]], [[["apple", "banana", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple", "banana"], ["banana", "cherry", "apple"]]], [[["cherry", "banana", "p"], ["cherry", "banana", "p"], ["cherry", "banana", "p"], ["peach", "orange", "plum"], ["cherry", "banana", "apple", "apple"], ["cherry", "banana", "apple", "apple"]]], [[["elephant", "ant", "bee"], ["elephant", "ant", "bee"]]], [[["cherry", "apple", "banana", "apple"], ["banana", "cherry"], ["cherry", "apple"], ["cherry", "apple", "banana", "apple"]]], [[[]]], [[["cherry", "banana", "p"], ["cherry", "banana", "p"], ["cherry", "banana", "p"], ["cherry", "banana", "apple", "apple"], ["cherry", "banana", "apple", "apple"]]], [[["cherry", "apple", "bsanana", "banana"], ["apple", "banana", "cherry", "cherry"]]], [[["dog", "elephant", "elephant"], ["dog", "elephant", "elephant"], ["giraffe", "lion", "banana"]]], [[["cherry", "apple", "banana"], ["orange", "peach", "plum"], ["banana", "cherry", "apple"], ["banana", "cherry", "apple"], ["banana", "cherry", "apple"], ["orange", "peach", "plum"]]], [[["cherry", "apple", "banana", "apple"], ["cherry", "apple"], ["cherry", "apple", "banana", "apple"]]], [[["apple", "banana", "cherry"], ["cherry", "appl", "banana", "banana"], ["apple", "banana", "cherry"], ["cherry", "appl", "banana", "banana"], ["apple", "banana", "cherry"]]], [[["cherry", "banana", "apple"], ["peach", "orange", "plum"], ["cherry", "banana", "apple"], ["peach", "orange", "plum"]]], [[[], ["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"], [], [], [], []]], [[["orange", "green", "green"], ["white", "orange", "green"], ["black", "white", "black", "white"], ["white", "orange", "green"], ["black", "white", "black", "white"]]], [[["red", "green"], ["red", "green"], ["yellow", "orange"]]], [[["red", "green", "blue", "green"], ["yellow"], ["red", "green", "blue", "green"], ["yellow"]]], [[["apple", "banana", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple", "banana"], ["cherry", "apple", "banana"]]], [[["black", "orange", "green"], ["white", "black"], ["black", "orange", "green"], ["black", "white", "orange"]]], [[["cbpinklueherry", "cherry", "apple", "bsanana", "banana"], ["banana", "cherry", "apple"], ["cbpinklueherry", "cherry", "apple", "bsanana", "banana"]]], [[["orange", "green"]]], [[["cherry", "apple", "bsanana", "banana"], ["orange", "peach", "plum"], ["banana", "cherry", "apple"], ["cherry", "apple", "bsanana", "banana"], ["banana", "cherry", "apple"], ["banana", "cherry", "apple"], ["orange", "peach", "plum"]]], [[["apple", "orange"], ["grape", "mango", "apple", "grape"], ["grape", "mango", "apple", "grape"], ["grape", "mango", "apple", "grape"]]], [[["zebra", "lion", "tiger", "zebra"], ["cat", "dog", "elephant"], ["giraffe"], ["zebra", "lion", "tiger", "zebra"], ["monkey"]]], [[["cherry", "banana", "apple"], ["peach", "orage", "plum"], ["peach", "orage", "plum"], ["cherry", "banana", "apple"]]], [[["red", "green"], ["red", "green"], ["yellow", "orange"], ["red", "green"]]], [[["red", "green", "blue", "green"], ["yellow", "yellow"], ["red", "green", "blue", "green"], ["yellow", "yellow"], ["yellow", "yellow"]]], [[["ngeant", "nge"]]], [[["red", "green", "blue"], ["yellow", "orange"], ["purple", "pink", "teal", "brown"], ["red", "green", "blue"]]], [[["apple", "banana", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple"], ["cherry", "apple"], ["cherry", "apple"]]], [[["IODiWvh", "e", "f", "dog", "r", "cat", "a"], ["cat", "dog", "helephant", "elephant"], ["cat", "dog", "helephant", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"]]], [[["red", "green", "blue", "red"], ["yellow", "orange"]]], [[["IODiWvh", "e", "f", "dog", "r", "cat", "a", "e"], ["cat", "dog", "elephant"], ["IODiWvh", "e", "f", "dog", "r", "cat", "a", "e"], [], [], ["zebra", "lion", "tiger"]]], [[[], ["cat", "dog", "elephant"], ["zebra", "lion"], ["giraffe"], ["zebra", "lion"], []]], [[["banana", "cherry", "apple"], ["cherry", "apple", "banana"], ["cherry", "apple", "banana"]]], [[["apple", "green"], ["apple", "green"], ["apple", "green"], ["black", "white", "black", "white"], ["white", "orange", "orange", "green"], ["white", "orange", "orange", "green"]]], [[["cat", "dog", "elephant"], [], ["zebra", "lion", "tiger"], ["monkey"], []]], [[["apple", "banana", "banana"], ["ant", "pear", "pear", "pear"], ["ant", "pear", "pear", "pear"], ["orange", "orange", "orange", "orange"], ["orange", "orange", "orange", "orange"]]], [[["cherry", "apple", "banana", "apple"], ["banana", "cherry", "banana"], ["banana", "cherry", "banana"], ["cherry", "apple"], ["cherry", "apple", "banana", "apple"]]], [[["cat", "dog", "elephant"], ["giraffe", "tiger", "zebra"], ["monkey", "lion", "tiger"]]], [[["cherry", "apple", "apple"], ["banana", "cherry", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"]]], [[[], ["orange", "purple", "brown"], ["yellow", "teai", "pink", "teal"]]], [[["appletiger", "banana", "cherry", "cherry"], ["cherry", "apple", "bsanana", "banana"], ["appletiger", "banana", "cherry", "cherry"], ["banana", "cherry", "apple"], ["cherry", "apple", "bsanana", "banana"]]], [[["apple", "banana", "mango"], ["apple", "banana", "mango"], ["cherry", "appl", "banana"], ["apple", "banana", "mango"], ["apple", "banana", "mango"]]], [[["orange", "orabluenge", "e"], ["apple", "banana", "banana"], ["orange", "orabluenge", "e"], ["pear", "pear"], ["orange", "orabluenge", "e"], ["apple", "banana", "banana"]]], [[["apple", "banana", "banana"], ["pear", "pear"], ["orange", "orange"]]], [[["red", "green", "orange", "blue"], [], ["orange", "purple", "brown"], ["yellow", "pink", "teal"]]], [[["banana", "cherry", "apple"], ["cdherry", "apple", "banana"], ["cdherry", "apple", "banana"]]], [[["black", "orange", "green"], ["white", "black"], ["black", "orange", "green"], ["black", "white", "orange"], ["black", "white", "orange"]]], [[["orange", "green", "green", "orange"], ["black", "white", "black", "white"], ["white", "orange", "bsanana", "orange", "green"], ["black", "white", "black", "white"]]], [[["apple", "green"], ["apple", "green"], ["apple", "green"], ["black", "white", "black", "white"], ["white", "orange", "orange", "green"], ["white", "orange", "orange", "green"], ["apple", "green"], ["apple", "green"]]], [[["blue", "red", "green"], ["orange", "yellow", "orange"], ["brown", "purple", "pink", "teal"], ["orange", "yellow", "orange"]]], [[["elephant", "ant", "bee"], ["dog", "camel", "cat"], ["zebra", "giraffe", "lion"], ["dog", "camel", "cat"]]], [[["cherry", "apple", "bsanana", "banana"], ["orange", "kiwi", "plum", "plum"], ["banana", "cherry", "apple", "cherry"], ["cherry", "apple", "bsanana", "banana"], ["orange", "kiwi", "plum", "plum"], ["banana", "cherry", "apple", "cherry"], ["banana", "cherry", "apple", "cherry"], ["orange", "kiwi", "plum", "plum"]]], [[["banana", "cherry"], ["cherry", "apple"], ["cherry", "apple", "banana"], ["banana", "cherry"]]], [[["red"], ["red"], ["red"], ["yellow", "orange"], ["red"]]], [[["a", "b"], ["c", "d"], ["e", "f"], ["g", "h"], ["i", "j", "j"], ["k", "l"], ["m", "n"], ["o", "p"], ["q", "r"], ["s", "t"], ["u", "v"], ["w", "x"], ["y", "z"]]], [[["red", "green", "blue", "green", "green"], ["red", "green", "blue", "green", "green"], ["red", "green", "blue", "green", "green"], ["yellow", "yellow"], ["yellow", "yellow"], ["red", "green", "blue", "green", "green"]]], [[["pear", "bakna", "banana"], ["apple", "orange"], ["kiwi"], ["grape", "mango", "apple"], ["grape", "mango", "apple"]]], [[["pear", "banana", "banana"], ["apple", "orange"], ["kiwi"], ["grape", "pgrape", "mango", "apple"]]], [[["a", "orabluenge", "e"], ["pear", "pear", "pear"], ["apple", "banana", "banana"], ["a", "orabluenge", "e"], ["pear", "pear", "pear"], ["a", "orabluenge", "e"], ["a", "orabluenge", "e"], ["apple", "banana", "banana"]]], [[["cherry", "apple", "apple"], ["banana", "chlrry", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"]]], [[["cat", "banana", "apple"], ["cherry", "banana", "apple"], ["peach", "orange", "plum"], ["cat", "banana", "apple"]]], [[["orange", "yellow", "orange", "orange"], ["blue", "red", "green"], ["orange", "yellow", "orange", "orange"], ["brown", "purple", "pink", "teal"], ["orange", "yellow", "orange", "orange"]]], [[["banana", "cherry"], ["cherry", "apple"]]], [[["red", "green", "p", "green"], ["yellow"], ["red", "green", "p", "green"], ["yellow"], ["red", "green", "p", "green"]]], [[["cherry", "apple", "banana", "apple"], ["banana", "cherry", "banana"], ["banana", "cherry", "banana"], ["cherry", "apple", "banana", "apple"]]], [[["pear", "banana", "banana"], ["apple", "orange"], ["kiwi"], ["grape", "apple"], ["grape", "apple"], ["grape", "apple"]]], [[["red", "green", "orange", "blue"], [], ["orange", "purple"], ["orange", "purple"], ["yellow", "pink", "teal"]]], [[["cat", "dog", "elephant"], ["IODiWvh", "e", "f", "dog", "r", "cat", "a", "e"], [], [], ["zebra", "lion", "tiger"], ["zebra", "lion", "tiger"], ["zebra", "lion", "tiger"]]], [[["cherry", "apple", "apple"], ["banana", "chlrry", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"], ["cherry", "apple", "apple"]]], [[["cherry", "apple", "banana"], ["orange", "peach", "plum"], ["banana", "cherry", "apple"], ["banana", "cherry", "apple"], ["orange", "peach", "plum"]]], [[["apple", "banana"], ["orange", "orabluenge", "e"], ["apple", "banana"], ["orange", "orabluenge", "e"], ["pear", "pear"], ["orange", "orabluenge", "e"], ["apple", "banana"]]], [[["cherry", "apple", "bsanana", "banana"], ["orange", "kiwi", "plum", "plum"], ["banana", "cherry", "apple", "abanana", "cherry"], ["cherry", "apple", "bsanana", "banana"], ["orange", "kiwi", "plum", "plum"], ["banana", "cherry", "apple", "abanana", "cherry"], ["orange", "kiwi", "plum", "plum"]]], [[["a", "b"], ["c", "d"], ["e", "f"], ["g", "h"], ["i", "j", "j"], ["k", "l"], ["m", "n"], ["o", "p"], ["q", "r"], ["s", "t"], ["u", "v"], ["w", "x"]]], [[["red", "green", "blue", "green", "green"], ["red", "green", "blue", "green", "green"], ["red", "green", "blue", "green", "green"], ["yellow", "yellow"], ["yellow", "yellow"], ["red", "green", "blue", "green", "green"], ["yellow", "yellow"]]], [[["cat", "banana", "apple"], ["cherry", "banana", "apple"], ["peach", "orange", "plum", "plum"], ["peach", "orange", "plum", "plum"]]], [[["IODiWvh", "e", "f", "dog", "r", "cat", "a"], ["cat", "dog", "helephant", "elephant"], ["cat", "dog", "helephant", "elephant"], ["giraffe"], ["zebra", "lion", "tiger"], ["cat", "dog", "helephant", "elephant"]]], [[["apple", "orange"], ["grape", "mango", "n", "grape"], ["grape", "mango", "n", "grape"], ["grape", "mango", "n", "grape"]]], [[["dog", "camel", "cat"], ["zebra", "giraffe", "lion"]]], [[["apple", "green"], ["apple", "green"], ["apple", "green"], ["black", "white", "black", "white"], ["white", "orange", "green"], ["white", "orange", "green"]]]], "input_output_examples": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]]]", "starter_code": "from typing import List\ndef sort_sublists(input_list: List[List[int]]) -> List[List[int]]:"}
{"task_id": "Mbpp/105", "requirement": "from typing import List\ndef count(lst: List[int]) -> int:\"\"\"\nWrite a python function to count true booleans in the given list.\"\"\"", "entry_point": "count", "canonical_solution": "\ndef count(lst):   \n    return sum(lst) \n", "base_input": [[[true, false, true]], [[false, false]], [[true, true, true]]], "plus_input": [[[]], [[false, false, false, false]], [[false, true, false, true, true, false, true, false]], [[false, true, true, true, true, false, true, false]], [[false, false, false, false, false]], [[false, true, false, false, false, false]], [[false, false, false, false, false, false]], [[false, true, false, false, false, false, false]], [[false, true, false, false, false, true, true]], [[false, true, false, false, false, false, false, false]], [[false, true, false, true, false, false, false]], [[false, false, false, false, false, false, false]], [[true, false, false, false, false, false, false]], [[true, false, false, false, false]], [[false, true, false, true, false, true, false, false]], [[false, true, true, false, true, true, false, true, false]], [[false, false, false, false, false, false, false, false]], [[true, false, false, false, false, false, false, false]], [[true, false, true, false, true, false, false, false]], [[true, false, true, true, true, false, true, false]], [[false, false, false, true, false, false]], [[false, true, true, false, false, true, true]], [[false, false, false, false, false, false, true, false]], [[true, false, false, false, false, false, false, false, false]], [[false, false, false]], [[false, true, false, true, true, true, true, false]], [[true, false, true, true, false, false, true, true, false, true, true]], [[false, false, false, false, true, false, true, false]], [[false, true, false, false]], [[false, false, false, false, false, false, false, false, false]], [[true, false, true, true, true, false, false, false, true]], [[false, true, false, false, true, false, false, true]], [[false, true, false, false, false, false, false, false, false]], [[false, true, false, false, true, false, false]], [[true, false, true, true, true, true, false, false, false, false, true]], [[true, false, false, false, false, false]], [[false, false, false, false, false, false, true, false, false]], [[true, false, false, true, true, false, true, false]], [[false, false, true, false, true, false, false]], [[false, false, false, false, false, false, false, false, false, false, false]], [[true, false, true, false, false, false, false]], [[true, false, true, false, false]], [[false, true, true, true, true, false, false]], [[false, false, false, false, false, false, false, false, false, false]], [[false, false, true, false, true, false, false, false, false]], [[false, true, false, false, true, true, true]], [[false, true, false, true, false, false, false, true, true]], [[false, false, true, false, true, false, false, false]], [[false, false, false, true, false, false, false, false, false, false, false, false]], [[false, true, false, true, true, false, true, true, false, false]], [[false, true, false, true, true, false, false, false]], [[false, true, true, false, false, false]], [[false, true, false, true, true, false, true, false, false, false]], [[false, true, false, false, true, false, false, false]], [[false, true, false, true, false, false, false, false]], [[false, true, true, true, true, false, true, false, false]], [[false, false, false, false, false, false, false, false, false, false, false, false]], [[false, false, true, true, true, true, false, true, true, false]], [[false, true, false, true, false, false, false, false, true, true]], [[false, true, false, true, false, false, false, false, false]], [[false, false, false, false, true, false, false, false, false]], [[false, true, false, false, true, false, false, false, true, true]], [[false, true, false, false, false, true, true, false, false, true]], [[false, true, false, true, true, false, true, false, false]], [[true, false, true, false, false, false, false, false]], [[true, false, true, false, false, false]], [[false, false, false, true, true, false]], [[false, true, true, true, false, false, true, true]], [[true, false, true, false, true, false, false]], [[false, true, false, false, true, true, true, false, true]], [[false, false, false, true, false, false, false, false, false, true, false, false]], [[false, true, false, false, false]], [[false, false, false, false, false, true, false]], [[false, false, false, true, true, true, true, false, true, false]], [[false, false, false, false, false, true]], [[true, false, false, true, true, false, true, false, false]], [[false, true, false, true, false, true, false, false, false]], [[true, false, true, false, true, true, false, false, false]], [[false, true, true, false, false, true, true, true]], [[true, false, true, true, false, true, false]], [[true, false, false, true, true, true, true, false, false, false, false, true]], [[false, true, true, false, false, true, true, true, true]], [[false, true, false, true, true, false, false]], [[true, false, false, true, false, true, false, false, true, false]], [[false, true, false, true, false, false, true]], [[false, true, true, true, true, false, false, false, true]], [[true, false, true, true, false, false, true, true, false, true, true, false]], [[false, true, true, true, true, false, true, true, false]], [[false, true, true, false, true, false, true, false]], [[true, false, true, true, true, false, false, false, true, true]], [[true, false, true, true, true, false, false, false, false, true]], [[true, false, true, true, true, true, false, true, false]], [[false, true, false, true, false, false, false, false, true, true, false, true]], [[true, false, true, false, true, true, false, true, false, false]], [[false, true, true, false, false, true, false, false, false]], [[true, false, true, true, false, false, true, true, false, false, true, true]], [[false, false, true, false, true, false, false, true, true]], [[false, false, true, false, true, false, false, false, false, false]], [[false, true, false, false, false, false, true]], [[true, false, true, false, false, true]], [[false, false, false, false, true, false, false, false, false, false]], [[true, false, true, true, true, true, false, false, true]], [[true, false, true, true, false, true, true, true, false]]], "input_output_examples": "[[[[True, False, True]]], [[2]]]", "starter_code": "from typing import List\ndef count(lst: List[int]) -> int:"}
{"task_id": "Mbpp/106", "requirement": "from typing import List\nfrom typing import Tuple\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\"\"\"\nWrite a function to append the given list to the given tuples.\"\"\"", "entry_point": "add_lists", "canonical_solution": "\ndef add_lists(test_list, test_tup):\n  return test_tup + tuple(test_list)\n", "base_input": [[[5, 6, 7], [9, 10]], [[6, 7, 8], [10, 11]], [[7, 8, 9], [11, 12]]], "plus_input": [[[], [1, 2, 3]], [[1, [2, 3], {"a": 4}], [5, [6, 7], {"b": 8}]], [[], []], [[1, 2, 3], []], [[0.5, [1, 2], {"x": 3}], [4.5, [5, 6], {"y": 7}]], [[[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 13]]]], [[[], [1, 2], {"a": [3, 4]}], [5, [6, 7], {"b": [8, [9]]}]], [[{"x": [1, 2]}, {"y": [{"z": [3]}, 4]}], [[5, 6, [7]], [{"a": 8}]]], [[[[1], 2], {"3": [4]}, [5, 6, 7]], [8, [9, [10]], {"a": 11}]], [[[], [], []], [[], [], []]], [[[], [[]], [[], []]], [[[], []], [[]], [[], []]]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, [8, [9]], {"a": 10, "b": 11}]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]], [[[1, 2], [3, 4]], [[5, 6], {"a": [7, [8, 9]]}]], [[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [[7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[[1], 4, [1]], {"3": [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7]], [8, [9, [10]]]], [[[1, 2], [4]], [[5, 6], {"a": [7, [8, 9]]}]], [[[], [[]], [[], []]], [[[], [], []], [[]], [[], []]]], [[[[1, 2], [3, 4]], [[5, 6], [7, 8]], [[5, 6], [7, 8]]], [[[9, 10], [11, 12]], [[13, 14], [15, 16]]]], [[1, 2], [[7, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[true, true, true, true, true, true, false], [4.5, 44.32264550231051, 0.5, 0.5, -1.6326583229058826, 4.5, 55.52796338743434]], [[[], [1, 2], {"a": [3, 4]}], [[6, 7], {"b": [8, [9]]}]], [[2], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[3, 4]], [[5, 6], {"a": [7, [8, 9]]}]], [[[[1], 2], {"3": [4]}, [5, 6, 7]], [9, [9, [10]], {"a": 11}]], [[[1, 2], [4]], [[5, 6], {"a": [7, [8, 9]]}, [5, 6]]], [[[[1], 2], {"3": [4]}], [9, [9, [10]], {"a": 11}]], [[[1, 2], [3, 4, 4], [3, 4, 4]], [[5, 6], {"a": [7, [8, 9]]}]], [[15], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, 7, 7, [8, [9]], {"a": 10, "b": 11}]], [[[], [[]], [[], []]], [[[], [], []], [[]], [[], []], [[]]]], [[[3, 4]], [[5, 6], {"a": [7, [8, 9]]}, [5, 6]]], [[], [{"a": [7, 14, [8, 9]], "hello": [7, 14, [8, 9]]}, {"a": [7, 14, [8, 9]], "hello": [7, 14, [8, 9]]}]], [[{"3": [4]}, [5, 6, 7]], [9, [9, [10]], {"a": 11}]], [[[], [1, 2], {"a": [3, 4]}], [6, [6, 7], {"b": [8, [9]]}]], [[], [1, 2]], [[], [[4, 5, 6, 6], [4, 5, 6, 6], {"a": [7, [8, 9]]}]], [[[1, 2], [3, 4], [3, 4]], [[5, 6], {"a": [7, [8, 9]]}]], [[[], [], []], [[], [true, true, false, false, true]]], [[true, true, true, true, true, true, false], [4.5, 44.32264550231051, 0.5, 0.4020733226756738, -1.6326583229058826, 4.5, 55.52796338743434, 0.5]], [[1, 2, [3, 4, {"a": {"b": [5, 6]}}], 1], [[7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[1, 2, 3], [false, true]], [[1, 2, 3], [false, false, true, true]], [[[1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]], [[5, 6], {"a": [7, [8, 9]]}]], [[], [false, true, false, false]], [[-96.96084131931524, -94.69555233395306, -95.59861164068568, -1.6326583229058826, 92.24778790461318], [1, 2]], [[69, -68, -26, 99, 9, -10, -55, 65, 13, 64], [1, 2]], [[true, false, false], [false, true, false, false]], [[1, 2], [[7, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 7, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[], [], [], []], [[], [], []]], [[["c", "Tbzkr"], [], [], []], [[], [], []]], [[0, 2, 3], []], [[[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 1, 13], [12, 1, 13]]]], [[15], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, [8, [9]], {"a": 10, "b": 11}, 7]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, 7, 7, [8, [9]], {"a": 10, "b": 11}, {"a": 10, "b": 11}]], [[[], [[], []], [[], []], [[], []]], [[[], []], [[]], [[], []]]], [[[], [[]], [[], []]], [[], [[], [], []], [], [[], []]]], [[[1, 2, [3, 4, {"a": {"b": [5, 6]}}]]], [[[12, 13]]]], [[[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 13], [12, 13]]]], [[[7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 1, 13], [12, 1, 13]]]], [[], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[{"3": [4]}, [5, 6, 7], [5, 6, 7]], [8, [9, [10]], {"a": 11}]], [[[[1], 4, [1]], {"3": [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7], [[1], 4, [1]]], [8, [9, [10], 9], [9, [10], 9]]], [[[], [[], []], [[], []], []], [[[], []], [], [[], []]]], [[[[1], 4, [1]], {"3": [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7], {"3": [4]}], [8, [9, [10]]]], [[[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [7, 8, {}, {}]], [[[12, 13]], [[12, 13]]]], [[[], [], [[], []]], [[[], [], []], [[]], [[], []]]], [[[7, 9, {}, {}]], [[[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]]]], [["hello", "z", "ZJgH"], [{"a": [7, 14, [8, 9]]}, {"a": [7, 14, [8, 9]]}]], [[1, 2, 7, 3], [false, false, true, true, true]], [[[], [], [], []], [[], [], [36.685637329178746], [36.685637329178746]]], [[1, 2, 2], [[9, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[], 12, "pOEmwo", 0.5, ["z", "T"], "Iuy", 7], [1, 2, 2]], [[{"x": [1, 2]}, {"y": [{"z": [3]}, 4]}, {"x": [1, 2]}], [[5, 6, [7]], [{"a": 8}]]], [[{"3": []}, [5, 6, 7], [5, 6, 7]], [8, {"a": 11}]], [[], [false, true, false, false, false]], [[0.5, [1, 2], {"x": 3, "ZJgHx": 4}], [4.5, [5, 6], {"y": 7}]], [[[2, 3], {"a": 4}], [5, [6, 7], {"b": 8}]], [[[], [1, 2], {"a": [3, 4]}], [6, [6, 7], {}]], [[15], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}]]], [[], [-94.69555233395306, -96.96084131931524, -1.6326583229058826, 79.36778956924633, -42.0626870759427, 4.5, 94.66425529755756, -96.96084131931524]], [[[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 1, 13], [12, 1, 13], [12, 1, 13]], [[12, 1, 13], [12, 1, 13], [12, 1, 13]]]], [[1, -55], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[], [[], []], [[], []], [[], []]], [[[], []], [[]], [[]], [[]]]], [[1, 1, 2, 3], [false, true]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, 7, 7, {"a": 10, "b": 11}, {"a": 10, "b": 11}]], [[[7, 9, {}, {}]], [[[12, 13], [12, 13]], [[12, 13], [12, 13]]]], [[-55], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[-5, 13, 99], [], []], [[], [true, true, false, false, true]]], [[[1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]], [[5, 6]]], [[[1, 2], [3, 4, 4], [3, 4, 4]], [{"a": [7, [8, 9]]}]], [[[7, 9, {}, {}]], [[[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]], [[12, 13], [12, 13]]]], [[[[1], 4, [1]], {"3": [4]}, [5, 6, 7], [[1], 4, [1]], [5, 6, 7]], [[9, [10]]]], [[], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}]]], [[true, false, false], [true, true, false, false]], [[[1, 2], [3, 4, 4], [3, 4, 4], [3, 4, 4]], [[5, 6], {}]], [[[7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]], [[[12, 13], [12, 13]], [[12, 13], [12, 13]]]], [[1, 2, [3, 4, {"a": {"b": [5, 6]}}]], [[7, 8, {"c": {"d": [9], "ZJgHx": [9]}, "ZJgH": {"d": [9], "ZJgHx": [9]}}, {"c": {"d": [9], "ZJgHx": [9]}, "ZJgH": {"d": [9], "ZJgHx": [9]}}], [7, 8, {"c": {"d": [9], "ZJgHx": [9]}, "ZJgH": {"d": [9], "ZJgHx": [9]}}]]], [[false, false, false, false, true, true, true], [-94.69555233395306, -96.96084131931524, -1.6326583229058826, 79.36778956924633, -42.0626870759427, 4.5, 94.66425529755756, -96.96084131931524]], [[[1, 2], [], [1, 2]], [[5, 6], {"a": [7, [8, 9]]}, [5, 6]]], [[[], [], [], [], []], [[], [true, true, false, false, true]]], [[], [{"a": [7, [8, 9]], "hello": [7, [8, 9]]}, {"a": [7, [8, 9]], "hello": [7, [8, 9]]}]], [[[], [], [], []], [[], [true, true, false, false, true]]], [[1, 2, [3, 4, {"a": {"b": [5, 6]}}, 3], 1], [[7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[[7, 9, {}, {}]], [[[12], [12], [12]], [[12], [12], [12]], [[12], [12], [12]], [[12], [12], [12]]]], [[[3, 4]], [[5], {"a": [7, [8, 9]]}, [5], [5], [5]]], [[[], [1, 2], {"a": [3, 4]}, [1, 2]], [5, [6, 7], {"b": [8, [9]]}]], [["hello", "z", "ZJgH", "z", "hello"], [{"a": [7, 14, [8, 9]]}, {"a": [7, 14, [8, 9]]}]], [[[], [1, 2], {"a": [3, 4]}], [6, [6, 7], {"b": [8, [9]]}, 6]], [["hello", [1, [2, 3]], {"x": [4, 5, {"y": {"z": 6}}]}], [7, 7, 7, {"a": 9, "b": 11}, {"a": 9, "b": 11}]], [[[1, 2], [4]], [{"a": [7, [8, 9]]}, [5, 6]]], [[[3, 3, 4]], [[5], {"a": [7, [8, 9]]}, [5], [5], [5]]], [[], [[7, 8, {"c": {"d": [9, [10, 11]]}}], [8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}], [7, 8, {"c": {"d": [9, [10, 11]]}}]]], [[true, true, true, true, true, false, false], [4.5, 44.32264550231051, 0.5, 0.4020733226756738, -1.6326583229058826, 4.5, 55.52796338743434, 0.5]]], "input_output_examples": "[[[[5, 6, 7], (9, 10)]], [[(9, 10, 5, 6, 7)]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:"}
{"task_id": "Mbpp/108", "requirement": "import heapq\nfrom typing import List\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\"\"\"\nWrite a function to merge three lists into a single sorted list.\"\"\"", "entry_point": "merge_sorted_list", "canonical_solution": "\nimport heapq\ndef merge_sorted_list(num1,num2,num3):\n  return sorted(num1 + num2 + num3)\n", "base_input": [[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]], [[1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], [[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41]]], "plus_input": [[[1000, 999, 998, 997, 996], [1001, 1002, 1003, 1004], [1000, 999, 998, 997, 996]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]], [[100, 200, 300, 400, 500, 600], [25, 50, 75, 200, 225, 250, 275], [350, 400, 450, 500, 550, 600, 650, 700]], [[5, 10, 15, 20, 25, 30, 35], [1, 2, 3, 4, 5, 6, 7], [50, 45, 40, 35, 30, 25, 20, 15, 10]], [[], [], []], [[-10, -9, -8, -7, -6, -5], [1000, 2000, 3000], [-100, -200, -300, -400, -500]], [[1.5, 2.5, 3.5, 4.5, 5.5], [0.5, 1.5, 2.5, 3.5, 4.5], [-5.5, -4.5, -3.5, -2.5, -1.5]], [[10, 20, 30, 40, 50], [5, 15, 25, 35, 45], [1, 2, 3, 4, 5]], [[100, 200, 300, 400, 500], [-100, -200, -300, -400, -500], [0.1, 0.2, 0.3, 0.4, 0.5]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3]], [[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 3, 5, 2, 4]], [[10, 20, 30, 40, 50, 60, 70], [5, 15, 25, 35, 45, 55, 65, 75], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[10, 15, 20, 25, 30], [5, 10, 15, 20, 25], [1, 2, 3, 4, 5]], [[100, 200], [50, 150, 250], [80, 160, 240]], [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], [10, 20, 30, 40, 50]], [[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9]], [[100, 200, 300, 400, 500], [250, 350, 450, 550, 650], [100, 200, 300, 400, 500]], [[1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], [3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]], [[12, 80, 160, 240], [650, 200], [12, 80, 160, 240]], [[650, 38], [650, 38], [12, 80, 160, 240]], [[10, 20, 30, 50, 60, 70], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 3, 3, 2, 3]], [[1, 2, 3, 4, 5], [1, 3, 5, 3, 2, 4], [1, 3, 5, 3, 2, 4]], [[999, 998, 997, 996], [1001, 1002, 1003, 1004], [1000, 999, 998, 997, 996]], [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55, 25], [15, 25, 35, 45, 55, 25]], [[11, 239, 80, 41, 240], [650, 38, 650], [11, 239, 80, 41, 240]], [[1, 2, 3, 60, 4, 5], [5, 4, 3, 2, 24], [1, 2, 3, 60, 4, 5]], [[650, 37], [650, 37], [12, 80, 160, 240]], [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9]], [[100, 300, 400, 500, 600], [25, 50, 75, 200, 225, 250, 275], [350, 400, 450, 500, 550, 600, 650, 700]], [[], [], [50, 150, 250]], [[12, 80, 160, 240], [200], [12, 80, 160, 240]], [[1, 3, 5, 7, 9], [2, 6, 8, 10], [1, 3, 5, 7, 9]], [[1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [2, 4, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], [3, 5, 7, 9, 11, 13, 15, 17, 19, 15, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]], [[10, 15, 20, 25, 30], [5, 10, 15, 20], [1, 1, 3, 4, 5]], [[2, 3, 3, 3, 3, 2, 2, 4, 3], [1, 1, 1, 1, 1, 1, 1], [2, 3, 3, 3, 3, 2, 2, 4, 3]], [[12, 81, 160, 240], [12, 81, 160, 240], [201, 200]], [[12, 81, 160, 240], [201], [201]], [[1, 2, 3, 60, 4, 5], [5, 4, 3, 3, 2, 24], [1, 2, 3, 60, 4, 5]], [[1, 3, 5, 7, 9], [1, 3, 5, 9], [1, 3, 5, 9]], [[650, 37], [12, 80, 160, 240], [650, 37]], [[-10, -9, -8, -7, -6, -5], [-100, -200, -300, -400, -500], [-100, -200, -300, -400, -500]], [[1, 2, 3, 4, 5, 6, 7, 9, 10, 3, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]], [[11, 239, 81, 41, 240], [650, 38, 650], [650, 38, 650]], [[23, 650], [23, 650], [12, 80, 160, 39]], [[5, 10, 15, 20, 25, 30, 35], [1, 2, 3, 4, 1, 6, 7], [50, 45, 40, 35, 30, 25, 20, 15, 10]], [[650, 36], [650, 36], [12, 80, 160, 240]], [[12, 3, 160, 240], [12, 3, 160, 240], [12, 3, 160, 240]], [[10, 20, 30, 40, 50, 60, 70], [10, 20, 30, 40, 50, 60, 70], [10, 20, 30, 40, 50, 60, 70]], [[100, 200], [50, 250], [50, 250]], [[1000, 999, 998, 997, 996], [1000, 999, 998, 997, 996], [1001, 1002, 1003, 1004]], [[1, 1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 2, 3]], [[81, 160, 240], [81, 160, 240], [81, 160, 240]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2], [3, 3, 3, 4, 2, 3]], [[200, 200], [200, 200], [50, 250, 50]], [[1, 1, -6, 1, 1, 1, 1, 1], [1, 1, -6, 1, 1, 1, 1, 1], [3, 3, 3, 3, 3, 2, 3]], [[1, 3, 5, 7, 27, 9], [1, 3, 5, 7, 27, 9], [3, 5, 9]], [[650, 38, 38], [650, 38, 38], [650, 38, 38]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9, 6, 7]], [[12, 160, 240], [12, 160, 240], [201, 200]], [[11, 239, 80, 41, 240], [650, 38, 649, 650], [650, 38, 649, 650]], [[1, 18, 3, 5, 9], [1, 18, 3, 5, 9], [1, 18, 3, 5, 9]], [[50, 150], [50, 150], [80, 160, 240]], [[651, 23, 650, 23], [651, 23, 650, 23], [12, 80, 160, 39]], [[1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3]], [[10, 20, 30, 50, 60, 70], [1, 2, 3, 4, 5, 6, 8, 9], [1, 2, 3, 4, 5, 6, 8, 9]], [[650, 38, 37], [650, 38, 37], [650, 38, 37]], [[200], [12, 80, 240], [12, 80, 240]], [[650, 38, 650, 649, 650, 650], [650, 38, 650, 649, 650, 650], [650, 38, 650, 649, 650, 650]], [[0.5, 1.5, 2.5, 3.5, 4.5], [-5.5, -4.5, -3.5, -1.5], [0.5, 1.5, 2.5, 3.5, 4.5]], [[200], [12, 80, 160, 240], [12, 80, 160, 240]], [[1, 2, 3, 4, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 4, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 4, 5, 6, 8, 9, 6, 7, 6]], [[1, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50], [2, 4, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50], [3, 5, 7, 9, 11, 13, 15, 19, 15, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]], [[650, 37], [650, 37], [650, 37]], [[50, 13, 150, 13], [50, 13, 150, 13], [50, 13, 150, 13]], [[12, 81, 160, 240, 81], [], [12, 81, 160, 240, 81]], [[1, 1, -6, 1, 1, 1, 1, 1], [4, 3, 3, 3, 3, 2, 3], [4, 3, 3, 3, 3, 2, 3]], [[160, 240], [160, 240], [-100, 200]], [[1, 1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 3, 2, 2, 2], [3, 3, 3, 3, 3, 3, 3]], [[10, 20, 30, 400, 40, 50], [5, 15, 25, 35, 45], [1, 2, 3, 4, 5]], [[1, 2, 100, 3, 4, 5, 6, 7, 9, 10, 3, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]], [[650, 38, 650, 650, 650], [650, 38, 650, 650, 650], [650, 38, 650, 650, 650]], [[1, 2, 3, 4, 1, 6, 29], [50, 45, 40, 35, 30, 25, 20, 15, 10], [1, 2, 3, 4, 1, 6, 29]], [[12, 160, 240, 81], [], [12, 160, 240, 81]], [[651, 23], [651, 23], [651, 23]], [[650, 38, 650], [650, 38, 650], [11, 239, 81, 41, 240]], [[10, 20, 30, 40, 50, 10], [15, 25, 35, 45, 55, 25, 15, 25], [15, 25, 35, 45, 55, 25, 15, 25]], [[1, 3, 4, 5], [10, 20, 30, 40], [1, 3, 4, 5]], [[1, 2, 3, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 5, 6, 8, 9, 6, 7, 6], [1, 2, 3, 5, 6, 8, 9, 6, 7, 6]], [[2, 2, 2, 2, 2, 2, 2], [1, 1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2]], [[1, 1, -6, 1, 1, 1, 1, 1], [4, 3, 3, 3, 2, 3], [4, 3, 3, 3, 2, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9, 2], [1, 2, 3, 4, 5, 6, 7, 8, 9, 2]], [[1, 3, 5, 9], [1, 3, 5, 9], [1, 3, 5, 9]], [[1, 2, 3, 4, 5, 6, 7, 9, 3, 11, 12], [], [13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 13]], [[1, 3, 5, 7, 9], [2, 6, 8, 10], [1, 60, 5, 7, 9]], [[10, 20, 30, 400, 40, 50, 10], [10, 20, 30, 400, 40, 50, 10], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 1, 6, -9], [1, 2, 3, 4, 1, 6, -9], [50, 45, 40, 35, 30, 25, 20, 15, 10]], [[-100, -200, -300, -400, -500], [-100, -200, -300, -400, -500], [-100, -200, -300, -400, -500]], [[10, 20, 30, 40, 50], [10, 20, 30, 40], [10, 20, 30, 40]], [[0.5, 1.5, 2.5, 3.5, 4.5], [-4.5, -3.5, -1.5], [0.5, 1.5, 2.5, 3.5, 4.5]], [[12, 27, 240, 15, 81], [12, 27, 240, 15, 81], [12, 27, 240, 15, 81]], [[40, 27, 240, 15, 81], [40, 27, 240, 15, 81], [40, 27, 240, 15, 81]], [[10, 20, 30, 50], [10, 20, 30, 40], [10, 20, 30, 40]], [[1, 1, 1, 1, 38, 1, 1, 1], [1, 1, 1, 1, 38, 1, 1, 1], [3, 3, 3, 3, 3, 2, 3]], [[11, 239, 80, 41, 240], [650, 651, -5, 38, 649, 650], [650, 651, -5, 38, 649, 650]], [[81, 240], [81, 240], [81, 240]], [[200], [12, 80, 160, 12, 240], [12, 80, 160, 12, 240]], [[-7, 12, 160, 37, 81], [-7, 12, 160, 37, 81], [-7, 12, 160, 37, 81]], [[1, 2, 3, 4, 1, 6, 29], [50, 45, 40, 35, 30, 25, 20, 15, 10, 10], [1, 2, 3, 4, 1, 6, 29]], [[1, 3, 3, 60, 4, 5], [5, 4, 3, 3, 2, 24], [1, 3, 3, 60, 4, 5]], [[200, 100, 200, 300, 400, 500], [-100, -200, -300, -400, -500], [0.1, 0.2, 0.3, 0.4, 0.5, 0.3]], [[81, 160, 159, 240], [81, 160, 159, 240], [81, 160, 159, 240]], [[-6, 81, 160, 240], [-6, 81, 160, 240], [-6, 81, 160, 240]], [[38, 650, 649, 650, 650], [38, 650, 649, 650, 650], [38, 650, 649, 650, 650]], [[10, 20, 40, -500, 50], [10, 20, 40, -500, 50], [10, 20, 40, -500, 50]], [[651, -7, 652, 23], [651, -7, 652, 23], [651, -7, 652, 23]], [[1, 1, 1, 1, 38, 1, 1, 1], [4, 3, 3, 3, 3, 3, 2, 3], [4, 3, 3, 3, 3, 3, 2, 3]], [[-100, -100, -200, -300, -400, -500], [-100, -100, -200, -300, -400, -500], [-100, -100, -200, -300, -400, -500]]], "input_output_examples": "[[[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]]], [[[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]]]]", "starter_code": "from typing import List\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:"}
{"task_id": "Mbpp/109", "requirement": "def odd_Equivalent(s: str, n: int) -> int:\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\"\"\"", "entry_point": "odd_Equivalent", "canonical_solution": "\ndef odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count \n", "base_input": [["011001", 6], ["11011", 5], ["1010", 4]], "plus_input": [["1100110011", 5], ["0000", 3], ["10000100110011", 5], ["10000100110011", 3], ["11001100111100110011", 5], ["00011001100110", 4], ["1000110011100110", 4], ["11001100111100110011", 3], ["000110011000", 4], ["110011001111001100110001100111001101", 5], ["000110011000", 5], ["1000110011100110", 3], ["110011001111001100111100110011", 5], ["11001100111110011001111001100110001100111001101100110011", 5], ["00011001100110", 3], ["10001110011100110", 4], ["1000011001100111001100111100111001111001100110001100111001101", 5], ["10001100111001110001100111001100", 3], ["10001100111001110001100111001100", 5], ["110011001111001100111100110011", 4], ["11001100111110011001111001100110001100111001101100110011", 4], ["110011001111001100111100110011", 6], ["11001100111100110011", 6], ["1100110011110011001110100110011", 4], ["110011001111100110011110011001100001100110011", 4], ["1000000110011000110011100110", 4], ["110011001111100110011110011001100011001110101101100110011", 4], ["11001100111100110011", 7], ["110011001111001100110001100111001101", 7], ["1100110011110011001100110011110011001111", 7], ["1000111001111001100111100110011100110", 3], ["1000000110011000110011100110", 3], ["110011001111100110011110011001100011001110101101100110011", 7], ["1000011001100111001100111100111001111001100110001100111001101", 7], ["11001100111100110011110011001", 4], ["00011001100110", 5], ["1000011001100111001100111100111001111001100110001100111001101", 6], ["0001100110010", 5], ["1110011001111001100111100110011001100111110011001111001100110001100111001101100110011", 5], ["1100110011110011001100110011110011001111100110011110011001100011001110011011", 7], ["1100110011110011001111", 4], ["00110011001111001100111010011001100", 3], ["0001100110010", 7], ["11001100111100111100110011110011001100110011110011001111100110011110011001100011001110011011001111", 4], ["1000111001111001100111100110011100110", 4], ["1100110011110011001100110011110011001111", 4], ["11001100111100111000010011001100111100110011", 5], ["00110011001111001100111010011001100", 5], ["10001100111001110001100111001100", 2], ["1100110011110011100001001100110011110011001100110011001111001100111010011001100", 5], ["1000110011100110", 5], ["11001100111100110011110011001", 7], ["001100110011110011001110100110110011001111001100110011001111001100111110011001111001100110001100111001101101100", 5], ["00011110011001111100110011110011001100011001110011011001100110011000", 4], ["1100110011110011001111", 6], ["10001110011110011001111001100011100110", 4], ["11001100111110011001111001100110001100111001101100110011", 3], ["1000000110011000110011100110", 2], ["1100110011110011001100110011110011001111", 2], ["10000100110011", 7], ["1100110001111100110011110011001100011001110101101100110011", 7], ["110011001111001100110001100111001101", 6], ["110011001111001", 4], ["1110011001111001100111100110011001100111110011001111001100110001100111001101100110011", 7], ["11001100011111001100111100110001100011001110101101100110011", 7], ["11001100111100111000010011001100111100110011", 4], ["11001100111100110011101001010011", 3], ["1000110011100110", 6], ["000110011000110011001000110", 4], ["1000110011100111000110011100110011001111001100111100110011100", 7], ["11001100111100110011101001010011", 2], ["110011001111001100011101001010011", 2], ["000110011000110011001000110", 2], ["11001100111100110011101001010011", 1], ["110011001111001110000100110011001111100110011", 5], ["110011001111001100101000110011000111110011001111001100011000110011101011011001100111100111001101", 5], ["1100110011001100111100110011110011001001100101000110011000111001111001100011000110011101011011001100111100111001101", 5], ["111001100111100110011110010110011", 5], ["110011001111001100110011001111001110000100110011001111100110011011101001010011", 5], ["1000011001100111001100111100111001111001100110001100111001101", 4], ["110011001111001100110001100111001101", 8], ["110011001111001100110011001111001110000100110011001111100110011011101001010011", 1], ["1000110011100110", 7], ["110011001111100110011110011001100001100110011", 7], ["11001110011001111001100110001100111001101100111100111000010011001100111100110011", 6], ["1100110011110011000111001001010011", 5], ["110011001111001100111001001010011", 2], ["0001100011000110011001000110", 8], ["1100110011110011100001001100110011111100110011110011001110100110011100110011", 5], ["1000000110011000110011100110", 7], ["001100110011110011001110100110110011001111001100110011001111001100111110011001111001100110001100111001101101100", 4], ["11001100111100110011110011001", 8], ["000110011000110011001000110", 5], ["110011001111001100011101001100110011110011001110100110110011001111001100110011001111001100111110011001111001100110001100111001101101100001010011", 2], ["11001100111100111100110011110011001100110011110011001111100110011110011001100011001110011011001111", 7], ["1100110100110011", 6], ["111001100111100110011110010110011", 7], ["110011001111001100111001001010011", 6], ["11001100111100110011110011001", 5], ["11100110011110011001111001100110011001111100110011110011001100011001110011100110011110011001111001100110011001111100110011110011001100011001110011011001100111", 7], ["11001100111110011001111001100110001100111001101100110011", 6], ["0001110000001100110001100111001101001000110", 4]], "input_output_examples": "[[['011001', 6]], [[3]]]", "starter_code": "def odd_Equivalent(s: str, n: int) -> int:"}
{"task_id": "Mbpp/111", "requirement": "from typing import List\ndef common_in_nested_lists(nestedlist: List[List[Hashable]]) -> List[Hashable]:\"\"\"\nWrite a function to find the common elements in given nested lists.\"\"\"", "entry_point": "common_in_nested_lists", "canonical_solution": "\ndef common_in_nested_lists(nestedlist):\n    return list(set.intersection(*map(set, nestedlist)))\n", "base_input": [[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]], [[[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]], [[[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]]]], "plus_input": [[[[], [], []]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [5, 6, 7, 8, 9]]], [[[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[], [], [], []]], [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6, 3], [3, 4, 5, 6, 3]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [6, 7, 8, 9]]], [[[], []]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4], [2, 15, 4, 5], [2, 15, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5]]], [[[1, 2, 3, 2], [4, 5, 6], [7, 8, 9], [1, 2, 3, 2], [10, 11, 12], [13, 14, 15]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3], [2, 4, 5, 6, 3], [1, 2, 3, 4]]], [[[1, 2, 3, 4, 5], [2, 6, 8, 10], [1, 3, 5, 7, 9]]], [[[], ["pesDUr", "hHJC", "tENrXrt", "dFybnG", "z", "UymdT", "G", "UbwECYme"], [], []]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 6], [3, 4, 5, 6, 7, 6], [4, 5, 6, 7, 8]]], [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6, 3], [3, 4, 5, 6, 3], [3, 4, 5, 6, 3]]], [[[1, 2, 3, 2], [4, 5, 6], [7, 8, 9], [1, 2, 3, 2], [10, 11, 12], [13, 14, 15], [13, 14, 15]]], [[[1, 2, 2], [4, 5, 6], [6, 7, 8, 9], [1, 2, 2], [10, 11, 12], [13, 14, 15]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10]]], [[[9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [13, 6, 7, 8, 9]]], [[[9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 5, 13, 6, 7, 8, 9], [5, 5, 13, 6, 7, 8, 9], [9, 8, 7, 6, 5], [13, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 4], [2, 15, 4, 5, 4], [2, 15, 4, 5, 4], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5, 4], [2, 15, 4, 5, 4]]], [[[2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4], [2, 15, 4, 5, 4, 4], [2, 15, 4, 5, 4, 4], [2, 15, 4, 5, 4, 4], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5, 4, 4], [2, 15, 4, 5, 4, 4], [4, 5, 6, 7]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 8, 9, 9], [10, 11, 12], [7, 8, 9, 9], [13, 14, 15]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5, 9], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4], [2, 15, 4, 5], [2, 15, 4, 5], [3, 4, 5, 6], [5, 5, 6, 7], [2, 15, 4, 5]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9, 9], [5, 6, 7, 8, 9, 9], [9, 8, 7, 6, 5], [9, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1]]], [[[9, 2, 3], [4, 5, 6], [8, 9, 9], [10, 11, 12], [8, 9, 9], [8, 9, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5]]], [[[9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [13, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 14, 8, 10], [2, 4, 14, 8, 10], [2, 4, 6, 8, 10], [2, 4, 14, 8, 10]]], [[[4, 5, 6, 7, 8, 8], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8, 8]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5]]], [[[1, 2, 3, 4, 5], [4, 5, 6, 7], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 6], [4, 5, 6, 7]]], [[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6]]], [[[13, 15, 14, 15], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 15, 14, 15]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 8, 7, 6], [3, 4, 5, 6, 8, 7, 6], [3, 4, 5, 6, 8, 7, 6], [4, 5, 6, 7, 8]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 4, 5], [4, 3, 4, 5, 6], [4, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10]]], [[[4, 4, 6], [1, 2, 3], [4, 4, 6], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [1, 2, 3, 4, 5], [2, 4, 6, 8, 10]]], [[[1, 2, 3], [7, 8, 9], [10, 11, 12]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1]]], [[[5, 6, 7, 8, 9], [9, 8, 7, 6, 5]]], [[[7, 7, 9, 9], [1, 2, 3, 3], [4, 5, 6], [7, 7, 9, 9], [10, 11, 12], [7, 7, 9, 9], [13, 14, 15]]], [[[1, 2, 3, 2], [4, 5, 6], [7, 8, 9], [1, 2, 3, 2], [10, 1, 11, 12], [13, 14, 15], [1, 2, 3, 2]]], [[[12, 1, 2, 3, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 8, 9, 9], [11, 10, 11, 12], [11, 10, 11, 12], [7, 8, 9, 9], [13, 14, 15]]], [[[2, 15, 4, 5], [2, 15, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [2, 15, 4, 5]]], [[[1, 2, 3, 4, 5], [3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [3, 4, 5, 6], [1, 2, 3, 4, 5]]], [[[12, 1, 2, 3, 3], [4, 5, 6], [10, 11, 11, 12], [7, 2, 8, 9]]], [[[1, 2, 3, 4, 5, 1], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[10, 8, 11, 12], [12, 1, 2, 3, 3, 3], [4, 5, 6], [10, 8, 11, 12], [7, 8, 9], [10, 8, 11, 12]]], [[[2, 3, 4, 5], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[1, 2, 3, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9], [7, 8, 9]]], [[[10, 8, 7, 6, 5], [9, 8, 7, 6, 4], [5, 6, 7, 8, 9], [10, 8, 7, 6, 5]]], [[[87.07763738802882], [], [], []]], [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 15, 6, 7, 6], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8]]], [[[3, 4, 5, 6, 3], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7, 8], [1, 2, 3, 4, 5]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [2, 4, 8, 10]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9, 1]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9]]], [[[5, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [9, 8, 7, 6, 5]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]]], [[[7, 8, 13], [1, 2, 3], [4, 5, 6], [7, 8, 13]]], [[[1, 2, 3], [7, 8, 9], [10, 11, 12], [10, 11, 12]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5]]], [[[1, 2, 3, 4, 5], [2, 2, 4, 8, 10], [1, 3, 5, 7, 9], [1, 3, 5, 7, 9], [2, 2, 4, 8, 10]]], [[[9, 8, 4, 7, 6, 5], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 3, 5, 7, 9], [2, 4, 8, 10], [2, 4, 8, 10]]], [[[9, 8, 7, 6, 5, 8], [9, 8, 7, 6, 5, 8], [5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [9, 8, 7, 6, 5, 8]]], [[[5, 6, 7, 8, 9], [9, 8, 7, 6, 5], [5, 6, 7, 8, 9]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9, 8], [9, 8, 7, 6, 5], [6, 7, 8, 9]]], [[[4, 5, 6], [6, 7, 8, 9], [1, 2, 2], [10, 11, 12], [13, 14, 15], [1, 2, 2]]], [[[1, 2, 3, 4, 5], [2, 4, 8, 10], [1, 4, 5, 7, 9], [1, 4, 5, 7, 9], [2, 4, 8, 10]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 7, 9, 9], [7, 7, 9, 9], [13, 14, 15]]], [[[1, 2, 3, 3], [4, 5, 6], [7, 8, 9]]], [[[9, 8, 7, 6, 5], [5, 6, 7, 8, 9, 6], [5, 6, 7, 8, 9, 6]]], [[[4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[13, 15, 14, 15], [1, 2, 3], [4, 5, 6], [7, 13, 8, 9], [7, 13, 8, 9], [10, 11, 12], [13, 15, 14, 15]]], [[[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [2, 4, 6, 8]]], [[[1, 2, 3, 4, 5, 3], [2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], [[[5, 6, 7, 8, 9, 6], [9, 8, 7, 6, 5]]], [[[10, 8, 11, 2, 12], [12, 1, 4, 3, 3, 3], [4, 5], [12, 1, 4, 3, 3, 3], [10, 8, 11, 2, 12], [7, 8, 9], [10, 8, 11, 2, 12]]], [[[1, 2, 3, 4, 5], [1, 3, 5, 4, 9, 1], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [1, 3, 5, 4, 9, 1]]], [[[1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 6, 7], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 6, 7], [3, 4, 5, 6, 7, 6, 7], [4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 6, 7]]], [[[5, 2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 2, 3, 4, 5], [3, 4, 5, 15, 6, 7, 6], [4, 5, 6, 7], [3, 4, 5, 6], [5, 2, 3, 4, 5], [3, 4, 5, 6]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]]], "input_output_examples": "[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]], [[18, 12]]]", "starter_code": "from typing import List\ndef common_in_nested_lists(nestedlist: List[List[Hashable]]) -> List[Hashable]:"}
{"task_id": "Mbpp/113", "requirement": "def check_integer(text: str) -> bool:\"\"\"\nWrite a function to check if a string represents an integer or not.\"\"\"", "entry_point": "check_integer", "canonical_solution": "\ndef check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()\n", "base_input": [["python"], ["1"], ["12345"]], "plus_input": [[""], ["-5"], ["10"], ["-100"], ["100000"], ["   15"], ["25    "], ["  -200   "], ["123a"], ["-b456"], ["!7890@"], ["12ab34"], ["5@678"], ["123.45"], ["1,000"], ["1,0"], ["+123"], ["-987"], ["   1   2   3   "], ["  1  2  "], ["  "], ["-b45b6"], ["   "], ["-9+1237"], ["6-b456"], ["5  1  2  @678"], ["    1  2   "], ["123.4  -200   "], ["12ab324"], ["5  1  2   @678"], ["125,000"], ["123.4.5"], ["12ab341"], ["5"], ["--5"], ["1235"], ["6-b    1  2   456"], ["456"], ["12ab1235341"], ["-97"], ["6-b    1  2 1235  456"], ["   1   2    3   "], ["123.4  -200  4 "], ["1423.45"], ["4"], ["1423.5"], ["123.4  -212ab34100   "], ["12ab1235123.4  -200  4 341"], ["-212ab34100"], ["12ab13235123.4  -200  4 341"], ["-2132ab341012ab3240"], ["@@678"], ["  12ab324  1 1 2   "], ["@678"], ["44"], ["-9+14422371,000"], ["12ab21235341"], ["6-b    1  -2002 12355  456"], ["-2005"], ["12ab1235123.4"], ["-2-9+123712ab34100"], ["  -2000   "], ["VuNmzvmS"], ["3"], ["12ab123512312ab1235123.4.4"], ["1,0456"], ["     "], ["12ab3-b45641"], ["142443.45"], ["9-97"], ["123.4123.4  -2120ab34100   "], ["123.46-b4565"], ["125,000-20004"], ["123.4"], ["  12ab324  1 1    "], ["!790@"], ["-b412ab123-53415b6"], ["123.5"], ["0  -2000   "], ["    12ab324  1 1    "], ["11,0"], ["444"], ["6-b 12ab13235123.4  -200  4 341   1  2   456"], ["12aab13235123.4"], ["123.4  -206-b    1  2 1235  4560   "], ["-2123.5132ab341012ab3240"], ["-200"], ["-212a123.4  -212ab34100   34100"], ["    15"], ["  12ab324 a123.45 1 1 2   "], ["@@7678"], ["6-b    1  2 1235  456!790@"], ["15"], ["0  -2000 0  "], ["--55"], ["  1  2   "], ["141,045623.5"], ["1123.4    1  2   5"], ["12ab123512312a2b1235123.4.4"], ["0  -2000 0  -100"], ["  12ab324 a123.4    12ab324  1 1    2   "], ["12a1123.4    1  2   5b123.4..54"], ["6-b    VuNmzvmS1  2 1235  456"], ["456!790@"], ["12ab212351,000341"], ["b-b45b6"], ["1123.4  VuNmzvmS  1  2   5"], ["12ab133235123.4"], ["12ab3-b  12ab324 a123.45 1 1 2   4564"], ["12a1123.4"], ["2ab34 1  2   5"], ["2 5    "], ["DJm"], ["3VuNmzvmS1"], ["12136-b    1  -2002 12355  456a"], ["b-b456"], ["6-b    VuNmzNvmS1  2 1235  456"], ["125,00    150004"], ["12136-b    1-2000  -2002 12355  456a"], ["0   -2000   "], ["115"]], "input_output_examples": "[[['python']], [[False]]]", "starter_code": "def check_integer(text: str) -> bool:"}
{"task_id": "Mbpp/116", "requirement": "from typing import Tuple\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\"\"\"", "entry_point": "tuple_to_int", "canonical_solution": "\ndef tuple_to_int(nums):\n    return int(''.join(map(str,nums)))\n", "base_input": [[[1, 2, 3]], [[4, 5, 6]], [[5, 6, 7]]], "plus_input": [[[123, 456, 789]], [[987, 654, 321]], [[999, 888, 777]], [[10000000000000000000, 9999999999999999999, 8888888888888888888]], [[1234567891011121314, 9876543210987654321, 1111111111111111111]], [[999999999999999999, 999999999999999998, 999999999999999997]], [[123456789123456789, 987654321987654321, 123456789123456789]], [[77777777777777777777, 88888888888888888888, 99999999999999999999]], [[123456789123456789123456789, 987654321987654321987654321, 123456789123456789123456789]], [[9999999999999999998, 9876543210987654321, 1111111111111111111]], [[123456789123456789, 987654321987654321, 123456789123456789, 123456789123456789]], [[789, 1234567891011121314, 9876543210987654321, 1111111111111111111]], [[10000000000000000000, 8888888888888888888]], [[10000000000000000000, 8888888888888888888, 10000000000000000000]], [[123456789123456789, 987654321987654321, 123456789123456789, 9999999999999999999]], [[123456789123456789, 999999999999999998, 77777777777777777777]], [[123456789123456789, 123456789123456789]], [[999, 888, 1234567891011121314]], [[987654321987654321]], [[123456789123456789, 123456789123456789, 123456789123456789]], [[1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111]], [[456, 789]], [[10000000000000000000, 8888888888888888888, 10000000000000000000, 77777777777777777777, 10000000000000000000]], [[987, 321]], [[321, 322]], [[1111111111111111111]], [[1111111111111111110, 1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111]], [[999, 888]], [[1111111111111111112]], [[10000000000000000000, 9999999999999999999, 322, 77777777777777777777, 10000000000000000000]], [[999, 654, 888, 777, 888]], [[987, 321, 987]], [[10000000000000000000, 9999999999999999999, 8888888888888888889, 8888888888888888887, 8888888888888888888]], [[10000000000000000000, 8888888888888888889, 8888888888888888888]], [[987, 321, 321]], [[987, 77777777777777777777, 321]], [[999999999999999999, 654]], [[888, 123456789123456789, 123456789123456789]], [[10000000000000000000, 1111111111111111110, 8888888888888888889, 8888888888888888887, 8888888888888888888]], [[1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111, 1234567891011121314, 1234567891011121314]], [[788, 789, 1234567891011121314, 9876543210987654321, 1111111111111111111]], [[987654321987654321, 987654321987654321]], [[123456789123456789, 8888888888888888887]], [[123, 456, 122, 789]], [[987, 321, 987, 987, 987]], [[789, 1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111]], [[987]], [[987654321987654321, 987654321987654321, 987654321987654321]], [[999999999999999998, 123456789123456789, 123456789123456789, 123456789123456789]], [[788, 789, 1234567891011121314, 9876543210987654321, 1111111111111111111, 789]], [[124, 456, 789]], [[123, 456, 789, 123]], [[10000000000000000000]], [[9876543210987654321, 987, 321]], [[999999999999999999, 987654321987654321, 987654321987654321]], [[88888888888888888888, 77777777777777777777, 88888888888888888888, 99999999999999999999, 88888888888888888888]], [[123456789123456788, 123456789123456789, 123456789123456789123456789]], [[1111111111111111111, 1111111111111111111]], [[999, 888, 1234567891011121314, 999]], [[999, 987654321987654321987654321, 888]], [[77777777777777777777, 88888888888888888887, 99999999999999999999]], [[123, 456, 1234567891011121314, 123]], [[123, 456, 123]], [[777, 8888888888888888889, 8888888888888888888]], [[9999999999999999999, 10000000000000000000]], [[88888888888888888888, 987654321987654321, 987654321987654321]], [[123456789123456789, 9999999999999999999, 123456789123456789]], [[999, 123456789123456789, 987654321987654321, 998, 123456789123456789, 123456789123456789]], [[987, 321, 987, 987, 986, 987]], [[123456789123456789, 987654321987654321, 123456789123456789, 123456789123456789, 123456789123456789]], [[9876543210987654321, 654, 321]], [[123456789123456789, 999999999999999998, 77777777777777777777, 123456789123456789]], [[9999999999999999998, 9876543210987654321]], [[1234567891011121314, 9876543210987654321, 1234567891011121314, 1111111111111111111, 9999999999999999998, 1234567891011121313, 1234567891011121314]], [[788, 789, 9876543210987654321, 1111111111111111111, 789, 789]], [[987, 987]], [[123456789123456789, 987654321987654321, 123456789123456788, 123456789123456789, 123456789123456789]], [[123456789123456789, 987654321987654321, 77777777777777777777, 123456789123456789]], [[123456789123456789, 88888888888888888887, 987654321987654321, 123456789123456789, 123456789123456789, 123456789123456789, 88888888888888888887]], [[123456789123456789, 987654321987654321, 123456789123456788, 123456789123456789]], [[123456789123456790, 987654321987654321, 123456789123456789, 9999999999999999999]], [[321]], [[987, 8888888888888888888, 321]], [[88888888888888888888, 77777777777777777777, 88888888888888888888, 99999999999999999999, 9876543210987654321, 99999999999999999998, 88888888888888888888]], [[123456789123456789, 123456789123456788, 8888888888888888887]], [[88888888888888888888, 987654321987654321, 987654321987654321, 987654321987654321]], [[1000000000000000000, 999999999999999998, 456]], [[88888888888888888888, 987654321987654321, 987654321987654321, 987654321987654321, 987654321987654321]], [[9876543210987654321, 987, 321, 321]], [[999, 1000, 888, 1234567891011121314]], [[999, 123456789123456789, 987654321987654321, 998, 987654321987654321, 123456789123456789, 123456789123456789]], [[123456789123456789, 987654321987654321, 8888888888888888888, 123456789123456789, 123456789123456789]], [[123, 456, 124, 789, 789, 123]], [[987, 987, 654, 321]], [[999999999999999999, 999999999999999998, 999999999999999997, 999999999999999999]], [[999, 888, 999]], [[1000000000000000000, 124, 456, 789, 789]], [[888, 123456789123456789, 123456789123456789, 123456789123456789]], [[88888888888888888888, 77777777777777777777, 88888888888888888888, 99999999999999999998, 88888888888888888888]], [[999999999999999999, 999999999999999998, 999999999999999997, 999999999999999999, 999999999999999999]], [[1234567891011121314, 9876543210987654321, 888, 1111111111111111111, 9999999999999999998, 1234567891011121313, 1234567891011121314]], [[123456789123456789, 999999999999999999, 8888888888888888887]], [[10000000000000000000, 8888888888888888889, 8888888888888888888, 10000000000000000000]], [[9876543210987654321, 986, 986, 321]], [[123, 124, 456, 789]], [[10000000000000000001, 123456789123456788, 10000000000000000000, 9999999999999999999, 8888888888888888888]], [[1234567891011121314, 9876543210987654322, 1234567891011121314, 1111111111111111111, 1234567891011121314, 1234567891011121314]], [[999999999999999999, 999999999999999998, 999999999999999999]], [[788, 789, 9876543210987654321, 1111111111111111111, 789, 789, 9876543210987654321]]], "input_output_examples": "[[[(1, 2, 3)]], [[123]]]", "starter_code": "from typing import Tuple\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:"}
{"task_id": "Mbpp/118", "requirement": "from typing import List\ndef string_to_list(string: str) -> List[str]:\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\"\"\"", "entry_point": "string_to_list", "canonical_solution": "\ndef string_to_list(string): \n    return string.split(\" \")\n", "base_input": [["python programming"], ["lists tuples strings"], ["write a program"]], "plus_input": [[""], ["   python      programming    "], ["1234 5678 9101"], ["string1,string2,string3"], ["My favorite programming language is Python"], ["string1,     string2,       string3"], ["string1,string2,strin3"], ["language"], ["1234 5678 91string1,string2,string301"], ["string1,string2,3"], ["My"], ["1234"], ["l"], ["5678"], ["192314 5678 9101"], ["python"], ["12314"], ["   ng    "], ["56678"], ["favorite"], ["string2,"], ["AeFmnNDd"], ["56"], ["programming"], ["pronggrammin12314g"], ["prog"], ["5striing1,stringg2,strin3"], ["language  ng    "], ["favorit"], ["gvZn"], ["languPythonage  ng    "], ["Python"], ["SfDBdGHKU"], ["is"], ["5stprogriing1,stringg2,strin3"], ["fvorrite"], ["porog"], ["pAeFmnNDdor"], ["propg"], ["languag5678e  ng    "], ["My favorite programming lamnguage is Python"], ["12My favorite programming language is Python34 5678 9101"], ["programmming"], ["My favorite prolanguPythonagegramminlg language is Python"], ["te"], ["fvorrrite"], ["string1,     string2,       sstring3"], ["1234 5678  9101"], ["556is78"], ["My favorite prol anguPythonagegramminlg lanage is Python"], ["vksoeiMq"], ["12My favorite programming language is Python34 5678string2,"], ["5striing1,My favorite proMye ythonpstringg2,strin3"], ["1234 5678 91string1,sPython342,string301"], ["fvorofrite"], ["fvorrreite"], ["favoritprogrammming"], ["Python34"], ["556iss78"], ["peMsMC"], ["ffvorrreite"], ["5striing1,My favorite proMylanguagee ythonpstringg2,strin3"], ["556iss788"], ["spythonring2"], ["string3"], ["Pstring3ython"], ["My favorit5678e prol anguPythonagegramminlg lanage is Pgython"], ["12334 5678  9101"], ["prol"], ["langua g5678e  ng    "], ["rfvorrrite"], ["PlanguPythonage"], ["123My favorite prolanguPythonagegramminlg language is Python4 5678 9101"], ["12 334 5678  9101"], ["fvorofritre"], ["192314"], ["string1,     st ring2,,       string3"], ["lanage"], ["gprolanguPythonagegramminlgvZ12n"], ["fvoorrite"], ["st"], ["anguPythonagegramminlg"], ["12My favorite programming glanguage is Python34 5678string2,"], ["12python3My"], ["languPythonage  ngn    "], ["gg5678e"], ["rfvorrtristring1,     st ring2,,       string3te"], ["languag5678e"], ["string1,     st ring2,languag5678e  ng      string3"], ["5stprogriing1,stiringg2,strin3"], ["My favorite programming language is PytlanguPythonagehon"], ["programmmipng"], ["flvorofrite"], ["tt"], ["1212314M3y"], ["pronggrrammin12314g"], ["string1,     st ring2,,        string3"], ["123My favorite prolanguPythonagegramminlg language is Pythstring1,     string2,       string3on4 5678 9101"], ["fvsstring3e"], ["Pst3ring3ython"], ["string1,     st ring2,languag5678e  ng      string"], ["lan12334 5678  9101gua g5678e  ng    "], ["faorite"], ["91nstring1,string2,string301"], ["prrfvorrtristring1,     st ring2,,       string3teol"], ["556667string1,string2,string3"]], "input_output_examples": "[[['python programming']], [[['python', 'programming']]]]", "starter_code": "from typing import List\ndef string_to_list(string: str) -> List[str]:"}
{"task_id": "Mbpp/119", "requirement": "from typing import List\ndef search(arr: List[int]) -> int:\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\"\"\"", "entry_point": "search", "canonical_solution": "\ndef search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)\n", "base_input": [[[1, 1, 2, 2, 3]], [[1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8]], [[1, 2, 2, 3, 3, 4, 4]]], "plus_input": [[[]], [[2, 2, 2, 2, 2, 2]], [[1, 1, 1, 1, 1, 1]], [[6]], [[1, 2, 3, 4, 5, 6]], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15]], [[5]], [[1, 1, 4, 4, 5, 6]], [[0, 1, 4, 4, 5, 6]], [[4, 5, 5]], [[4, 4, 5]], [[1, 1, 4, 4, 6]], [[0, 1, 4, 4, 5]], [[2, 2, 2, 2, 2]], [[1, 1, 4, 6]], [[0, 4, 4, 5, 6]], [[4, 5]], [[1, 1, 4, 4, 5]], [[1, 1, 1, 1, 1]], [[1, 2, 4, 6]], [[5, 5]], [[4, 5, 5, 5]], [[1, 1, 1, 1, 1, 1, 1]], [[1, 1, 1, 1, 1, 1, 1, 1]], [[2, 2, 2, 2, 2, 2, 2, 2]], [[2, 2, 2, 2, 2, 2, 2, 2, 2]], [[1, 1, 1]], [[1, 1, 4, 4]], [[0, 1, 4, 4, 8]], [[2, 2, 2, 2, 2, 2, 2, 15]], [[4, 4, 4]], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15]], [[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], [[false, false]], [[6, 6, 6]], [[1, 4, 4]], [[5, 5, 5]], [[4, 5, 5, 5, 5]], [[1, 4]], [[1, 1]], [[6, 6]], [[1, 1, 1, 1, 1, 1, 1, 1, 1]], [[2, 2, 2, 2, 2, 2, 2, 2, 15]], [[1, 2, 3, 3, 4, 5, 6]], [[0, 4, 4, 8]], [[1, 1, 4]], [[1, 4, 6]], [[0, 1, 1, 1, 1, 1, 1, 1, 1]], [[4, 6]], [[false, true]], [[1, 1, 11]], [[1, 1, 2]], [[0, 1, 4, 8]], [[0, 4, 4, 4, 6, 6]], [[2, 2, 2, 2, 2, 2, 2, 2, 2, 15]], [[1, 5]], [[4, 4, 4, 4, 4]], [[3, 5, 5]], [[5, 5, 5, 5]], [[1, 1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 15, 15]], [[1, 3, 5, 5, 6]], [[0, 4, 8]], [[4, 4, 6]], [[0, 1, 4, 4, 6]], [[1, 1, 4, 4, 5, 5]], [[1, 1, 2, 2]], [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 11, 11]], [[true]], [[4, 4]], [[false, true, true, true, true, true]], [[5, 11]], [[1, 1, 1, 4, 4]], [[4, 4, 4, 4]], [[2, 2, 2, 2, 2, 2, 2]], [[1, 2, 4, 6, 6]], [[4, 4, 8]], [[0, 2, 2, 2, 2]], [[1, 2, 3, 3, 11]], [[4, 4, 6, 6]], [[3, 5]], [[2, 5]], [[0, 1, 1, 1, 1, 1, 1, 1]], [[3, 6]], [[1, 4, 4, 6]], [[0, 2, 2, 2]], [[0, 1, 1]], [[1, 3, 4, 7]], [[1, 4, 6, 6]], [[1, 4, 4, 4]], [[false]], [[1, 1, 10, 11, 11]], [[0, 4, 5, 5]], [[0, 1, 4, 5, 6]], [[1, 4, 4, 5, 6]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 6, 6, 6]], [[4]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[1, 1, 12]], [[0, 2, 6, 6]], [[9]], [[1, 1, 1, 4, 4, 4]], [[1, 11, 11]], [[1, 1, 4, 4, 5, 9]], [[3, 6, 6]], [[1, 3, 3, 5, 13]]], "input_output_examples": "[[[[1, 1, 2, 2, 3]]], [[3]]]", "starter_code": "from typing import List\ndef search(arr: List[int]) -> int:"}
{"task_id": "Mbpp/120", "requirement": "from typing import List\nfrom typing import Tuple\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\"\"\"", "entry_point": "max_product_tuple", "canonical_solution": "\ndef max_product_tuple(list1):\n    return max(abs(x * y) for x, y in list1)\n", "base_input": [[[[2, 7], [2, 6], [1, 8], [4, 9]]], [[[10, 20], [15, 2], [5, 10]]], [[[11, 44], [10, 15], [20, 5], [12, 9]]]], "plus_input": [[[[-10, 20], [15, -2], [-5, 10]]], [[[1000000, 500000], [2000000, 1000000], [3000000, 1500000]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[-10, 0], [0, 5]]], [[[-100, 100], [0, 10]]], [[[0, -100], [0, 100]]], [[[-1000000, 1000000], [0, 100000]]], [[[1, 0], [-0.5, 0.5], [2, -2]]], [[[0.1, 0.1], [0.5, -0.5], [0.2, 0.2]]], [[[-9999999, 9999999], [1e-06, 1000000]]], [[[1000000, -1000000000], [-1000000000, 1000000]]], [[[-1000000, -1000000], [-999, 0]]], [[[0, 0]]], [[[-1000000, 1000000], [0, 99999]]], [[[-10, 20], [15, -2]]], [[[0.5, -0.5], [0.2, 0.2]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000]]], [[[-1000001, -1000000], [0, 100000]]], [[[-999, 0]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[-10, 20], [15, -2], [-5, 9], [-5, 10]]], [[[0.5, -0.5], [0.2, 0.2], [0.5, -0.5]]], [[[10, -1000000]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[-10, 20]]], [[[0.1, 0.1], [0.5, 0.1], [0.2, 0.2]]], [[[-10, 0], [0, 100000]]], [[[-10, 20], [100000, -2]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000]]], [[[3000000, 1500000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000]]], [[[-10, 20], [-10, 20]]], [[[-10, 20], [15, -2], [15, -2]]], [[[-9, 20]]], [[[-100, 100], [0, 10], [0, 10]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000001, 1000000], [-1000000000, 1000000], [1000000, -1000000000]]], [[[0.5, -0.5], [0.2, 0.2], [0.5, -0.5], [0.2, 0.2]]], [[[-100, 100]]], [[[0.1, 0.1], [0.5, 0.1], [0.2, 0.2], [0.1, 0.1]]], [[[-999, 0], [-999, 0]]], [[[10, -1000001]]], [[[-1000000000, 1000000]]], [[[-10, 20], [15, -2], [-5, 9], [-5, 10], [-5, 9]]], [[[-2, 0], [0, 5]]], [[[-1000000000, 1000000], [-1000000000, 1000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [1000000, -1000000000]]], [[[-10, 20], [100000, -2], [-10, 20]]], [[[0.1, 0.1], [0.5, -0.5], [0.1, 0.1], [0.1, 0.1]]], [[[0, -101], [0, -100], [0, 100], [0, -100], [0, 100]]], [[[1000000, -1000000000], [9999999, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000]]], [[[-10, 20], [15, -2], [-5, 9], [-5, 10], [-5, 9], [-5, 9]]], [[[0, 100000], [0, 100000]]], [[[1000000, 9999999], [1000000, 500000], [2000000, 1000000], [3000000, 1500000], [3000000, 1500000]]], [[[-10, 20], [15, -2], [-5, 9]]], [[[15, -2], [-5, 9], [-5, 10], [-5, 9], [-5, 9]]], [[[-10, 20], [-10, 20], [-10, 20]]], [[[1000000, -1000000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [3000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000]]], [[[-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, 0], [1, -1], [1, -1]]], [[[15, -2], [-5, 9]]], [[[0.1, 0.1], [0.5, 0.1], [0.2, 0.2], [0.1, 0.1], [0.5, 0.1]]], [[[0.2, 0.2], [0.2, 0.2]]], [[[0.1, 0.1], [0.5, 0.1], [0.1, 0.14655870166177412], [0.2, 0.2]]], [[[0, 100000]]], [[[0.1, 0.1], [0.2, 0.2], [0.1, 0.1], [0.2, 0.2]]], [[[0.1, 0.1], [0.2, 0.2], [0.1, 0.1], [0.2, 0.2], [0.1, 0.1]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000001, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [-1000000001, 1000000]]], [[[0.5, -0.5]]], [[[1, 0], [-0.5, 0.5], [2, -2], [2, -2]]], [[[1000000, 500000], [2000000, 1000000], [3000000, 1500000], [2000000, 1000000]]], [[[0.2, 0.2]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000001, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [-1000000001, 1000000], [-1000000001, 1000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -999], [1000000, -1000000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000001, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [1000000, -1000000000]]], [[[0.1, 0.1], [0.5, -0.5], [0.1, 0.1], [0.1, 0.1], [0.5, -0.5]]], [[[0.1, 0.1], [0.5, 1e-06], [0.5, -0.5], [0.1, 0.1], [0.1, 0.1], [0.5, -0.5]]], [[[-2, 0], [0, 5], [0, 5]]], [[[1000000, -1000000000], [9999999, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [9999999, 10], [-1000000000, 1000000], [1000000, -1000000000]]], [[[-10, 0], [-10, 0]]], [[[1000000, -1000000000], [-1000000000, 1000000], [3000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [1000000, -1000000000]]], [[[0.14228615811571196, 0.1], [0.5, 0.1], [0.2, 0.2]]], [[[10, -1000000], [10, -1000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 999999], [-1000000001, 1000000], [-1000000000, 1000000], [1000000, -1000000000]]], [[[-1000000, 1000000], [0, 99999], [-1000000, 1000000]]], [[[-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000]]], [[[0.2, 0.2], [0.2, 0.2], [0.2, 0.2], [0.2, 0.2]]], [[[-10, 20], [15, -2], [14, -2]]], [[[0, 10], [-100, 100], [0, 10], [0, 10]]], [[[0.1, 0.1], [0.5, -0.5], [0.1, 0.1], [0.1, 0.1], [0.5, -0.5], [0.1, 0.1]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[-10, 20], [15, -2], [-5, 9], [-5, 9]]], [[[100000, -2], [-10, 20]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 0]]], [[[0, 99999], [-1000000, 1000000]]], [[[1000000, -1000000000], [-1000000000, 1000000], [1000000, -999999999], [-1000000000, 0]]], [[[0.14228615811571196, 0.1], [0.5, 0.1], [0.2, 0.2], [0.14228615811571196, 0.1]]], [[[0.2, 0.2], [0.1, 0.1], [0.2, 0.2]]], [[[1000000, -1000000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -999], [1000000, -1000000000]]], [[[100000, -2], [-10, 3000000], [100000, -2]]], [[[0.2, 0.2], [0.2, 0.2], [0.2, 0.2]]], [[[15, -2], [-5, 9], [-5, 10], [-5, 9], [-5, 9], [15, -2]]], [[[15, -2], [-5, 9], [-5, 10], [-5, 9], [-5, 9], [15, -2], [-5, 9]]], [[[1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1], [1, -1]]], [[[100000, -2], [-10, 3000000], [100000, -2], [100000, -2]]], [[[0.1, 0.1], [0.1, 0.1], [0.2, 0.2]]], [[[-999, 0], [-999, 0], [-999, 0]]], [[[0.1, 0.1], [0.5, -0.5], [0.1, 0.1]]], [[[-1000000000, 1000000], [3000000, 1000000], [-1000000000, 1000000], [-1000000000, 1000000], [1000000, -1000000000], [1000000, -1000000000], [-1000000000, 1000000]]], [[[0.1, 0.1], [0.2, 0.2], [0.1, 0.1], [0.2, 0.2], [0.1, 0.1], [0.2, 0.2]]], [[[-10, 20], [15, -2], [-10, 21], [15, -2]]]], "input_output_examples": "[[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[36]]]", "starter_code": "from typing import List\nfrom typing import Tuple\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:"}
{"task_id": "Mbpp/123", "requirement": "def div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit: int) -> int:\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\"\"\"", "entry_point": "amicable_numbers_sum", "canonical_solution": "\ndef div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)\n", "base_input": [[999], [9999], [99]], "plus_input": [[10000], [5000], [4999], [4998], [5001], [90], [92], [89], [91], [10001], [93], [5002], [4997], [true], [94], [4996], [4995], [10002], [9999], [88], [10003], [5003], [5004], [21], [87], [22], [4994], [95], [86], [96], [20], [9998], [4993], [23], [47], [97], [5005], [10004], [9], [9997], [10005], [85], [8], [46], [9996], [84], [7], [19], [9995], [98], [10006], [18], [99], [100], [101], [24], [68], [61], [69], [44], [43], [17], [5006], [16], [6], [10], [45], [10007], [66], [15], [83], [48], [9994], [81], [60], [74], [5007], [67], [28], [80], [72], [79], [70], [29], [49], [9993], [65], [4992], [4991], [11], [10008], [73], [12], [62], [71], [4990], [5008], [78], [50], [59], [77], [10009]], "input_output_examples": "[[[999]], [[504]]]", "starter_code": "def amicable_numbers_sum(limit: int) -> int:"}
{"task_id": "Mbpp/125", "requirement": "def find_length(string: str) -> int:\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\"\"\"", "entry_point": "find_length", "canonical_solution": "\ndef find_length(string): \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum\n", "base_input": [["11000010001"], ["10111"], ["11011101100101"]], "plus_inputinput_output_examples": "[[['11000010001']], [[6]]]", "starter_code": "def find_length(string: str) -> int:"}
{"task_id": "Mbpp/126", "requirement": "import math\ndef sum(a: int, b: int) -> int:\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\"\"\"", "entry_point": "sum", "canonical_solution": "\nimport math\ndef sum(a,b): \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum\n", "base_input": [[10, 15], [100, 150], [4, 6]], "plus_input": [[27, 81], [12, 18], [123, 456], [555, 1111], [987, 654], [10, 3], [987654321, 123456789], [555, 456], [987654322, 81], [555, 987654322], [3, 987654321], [555, 555], [123, 1111], [987654321, 987654321], [456, 456], [81, 555], [123456790, 123456790], [123456789, 987654322], [123, 3], [12, 1111], [123456789, 81], [555, 554], [81, 456], [455, 456], [81, 457], [555, 987654323], [556, 553], [80, 456], [555, 553], [123456789, 456], [456, 987654323], [987, 986], [987654320, 987654321], [987654323, 987654322], [987654323, 987654323], [987654322, 987654321], [987654323, 10], [455, 987654320], [987654322, 987654322], [123456789, 123456790], [554, 457], [26, 82], [11, 3], [986, 987654323], [123, 123], [555, 81], [987654324, 987], [987654321, 18], [987654319, 987654318], [654, 654], [123456790, 455], [3, 987654322], [80, 987654321], [553, 553], [556, 457], [988, 654], [455, 123456789], [654, 987654321], [123456790, 654], [11, 123], [556, 1111], [27, 26], [80, 124], [556, 456], [987, 987], [457, 456], [553, 80], [81, 458], [123456789, 123456789], [457, 457], [457, 3], [123456789, 986], [985, 987], [986, 986], [987654320, 987654320], [456, 458], [2, 3], [124, 987654323], [987654320, 81], [12, 12], [987654321, 987654320], [125, 555], [81, 2], [654, 81], [654, 123456788], [987654319, 80], [81, 554], [457, 554], [987654323, 456], [456, 26], [81, 81], [556, 556], [654, 80], [987654319, 986], [123, 4], [556, 987654320], [456, 556], [987654320, 456], [987654321, 2], [126, 2], [556, 987654322], [18, 123456789], [2, 654], [457, 987654323], [985, 456], [2, 18], [3, 556]], "input_output_examples": "[[[10, 15]], [[6]]]", "starter_code": "def sum(a: int, b: int) -> int:"}
{"task_id": "Mbpp/127", "requirement": "def multiply_int(x: int, y: int) -> int:\"\"\"\nWrite a function to multiply two integers.\"\"\"", "entry_point": "multiply_int", "canonical_solution": "\ndef multiply_int(x, y):\n    return x * y\n", "base_input": [[10, 20], [5, 10], [4, 8]], "plus_input": [[10000000000000000, 9999999999999999], [999999999999999999, 999999999999999999], [0, 999999999999999999], [-999999999999999999, 999999999999999999], [9999999999999999, -999999999999999999], [9999999999999999, 9999999999999999], [0, 0], [10000000000000000, 9999999999999998], [999999999999999998, 999999999999999998], [999999999999999999, 999999999999999998], [-999999999999999999, -999999999999999999], [-999999999999999999, -1000000000000000000], [0, 9999999999999999], [-999999999999999999, -999999999999999998], [10000000000000000, 999999999999999999], [10000000000000000, 10000000000000000], [1000000000000000000, 999999999999999999], [10000000000000001, -999999999999999999], [1000000000000000000, 0], [10000000000000000, -999999999999999998], [999999999999999999, 10000000000000001], [10000000000000001, 10000000000000001], [9999999999999999, 999999999999999999], [10000000000000000, -999999999999999999], [9999999999999999, 9999999999999998], [1, 0], [9999999999999999, 10000000000000000], [999999999999999998, 0], [9999999999999999, 0], [-2, 0], [-999999999999999997, -999999999999999998], [10000000000000000, 999999999999999998], [0, 9999999999999998], [-1, -1], [9999999999999999, -999999999999999998], [-999999999999999999, -1], [-999999999999999999, 0], [-1000000000000000000, 0], [-999999999999999999, 10000000000000000], [9999999999999998, 10000000000000000], [-1000000000000000000, 1000000000000000000], [1, 10000000000000001], [-2, 999999999999999999], [9999999999999998, 9999999999999999], [10000000000000001, 10000000000000000], [-999999999999999999, 999999999999999998], [999999999999999997, 999999999999999998], [10000000000000000, 999999999999999997], [9999999999999997, 9999999999999997], [9999999999999998, 1000000000000000000], [0, -1], [10000000000000001, 0], [9999999999999999, -2], [9999999999999999, 1], [10000000000000000, 10000000000000001], [10000000000000001, -1], [10000000000000001, 9999999999999998], [9999999999999998, 9999999999999998], [-1, 0], [-999999999999999997, -999999999999999997], [1000000000000000000, -999999999999999998], [-3, -1], [999999999999999997, 10000000000000000], [1000000000000000000, 1000000000000000000], [10000000000000000, -1], [1000000000000000001, -999999999999999998], [999999999999999998, -999999999999999999], [-3, 9999999999999997], [1, 1], [1000000000000000000, 9999999999999997], [false, false], [10000000000000000, 0], [1, 999999999999999999], [-999999999999999999, 999999999999999997], [1000000000000000000, -999999999999999997], [1, 1000000000000000001], [1, -999999999999999998], [999999999999999998, 10000000000000000], [0, 10000000000000001], [1, 2], [999999999999999996, 999999999999999998], [-999999999999999998, -3], [9999999999999999, 10000000000000001], [999999999999999998, 10000000000000001], [-999999999999999998, -999999999999999999], [10000000000000000, 1000000000000000000], [-1, 1000000000000000001], [-999999999999999998, -999999999999999998], [1, -1], [10000000000000002, -2], [9999999999999999, 1000000000000000001], [-999999999999999997, 999999999999999998], [-999999999999999998, 0], [10000000000000000, -2], [-1, -999999999999999998], [9999999999999997, -1], [9999999999999997, -999999999999999998], [2, 1], [-1, 1], [999999999999999997, 1000000000000000001], [9999999999999998, 9999999999999997], [-999999999999999998, 10000000000000000], [999999999999999999, -999999999999999998], [-3, -999999999999999998]], "input_output_examples": "[[[10, 20]], [[200]]]", "starter_code": "def multiply_int(x: int, y: int) -> int:"}
{"task_id": "Mbpp/128", "requirement": "from typing import List\ndef long_words(n: int, s: str) -> List[str]:\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\"\"\"", "entry_point": "long_words", "canonical_solution": "\ndef long_words(n, s):\n    return list(filter(lambda x: len(x) > n, s.split(' ')))\n", "base_input": [[3, "python is a programming language"], [2, "writing a program"], [5, "sorting list"]], "plus_input": [[0, "abc  def  ghi  jklm  nopqrs   tuvwxyz"], [0, ""], [10, "thisisaverylongword testing wordlengths"], [100, "hello python is a programming language"], [0, "is"], [100, "thisisaverylongwordw testing wordlengths"], [0, "jklm"], [100, "thisisaverylongwordw teseting wordlengths"], [0, "thisisaverylongword testing wordlengths"], [10, "is"], [10, "hello python is a programming language"], [1, "thisisaverylongword testing wordlengths"], [0, "jklam"], [100, "tuvwxyz"], [0, "hello"], [0, "jkjlam"], [100, ""], [1, "jklam"], [100, "thisisaverylongwordnopqrsw teseting wordlengths"], [10, "heogramming language"], [10, ""], [100, "i"], [11, "thisisaverylongword testing wordlengths"], [100, "thisisaverylongword"], [2, ""], [2, "heogramming language"], [2, "hello python is a programming language"], [100, "ii"], [1, "thisisaverylongwordw teseting wordlengths"], [100, "thisisaveriylongwordw testing wordlengths"], [9, "jklm"], [100, "is"], [10, "helloh python is a programming language"], [100, "abc  def  ghi  jklm  nopqrs   tuvwxyz"], [2, "heogramming laneguage"], [0, "ajklamteseting"], [100, "thisisaveriylongwordw"], [100, "thisisaverylongwordw testheogramming languageing wordlengths"], [0, "thisisaverylongwordnopqrsw teseting wordlengths"], [99, "thisisaveriylongwordw"], [0, "a"], [0, "hello python is a programming language"], [0, "aa"], [0, "thisisaveriylongwordw"], [10, "python"], [10, "jkl"], [1, "hello python is a programming language"], [1, "jkllm"], [100, "thisisaverylongwordnopqrsw teseting wordlengthsi"], [101, "thisisaverylongwordw testing wordlengths"], [99, "thisisaverylongwordw teseting wordlengths"], [99, "heogramming langualaneguagege"], [0, "ii"], [101, "thisisaverylongwordw testheogramming languageing wordlengths"], [11, "jkl"], [1, ""], [101, "abc  def  ghi  jklm  nopqrs   tuvwx yz"], [0, "thisisaveriylongwoordw"], [0, "hlello"], [0, "heogramming language"], [1, "heogramming language"], [101, "is"], [9, "thisisaverylongwordnopqrsw teseting wordlengths"], [99, "hello python is a programming language"], [1, "thisisalanguageverylongwordw teseting wordleths"], [10, "jkjlam"], [0, "hlelllo"], [100, "yz"], [0, "ajheogramming languageklamteseting"], [9, "helloh python is a programminlaneguageg language"], [11, "thisisaveriylongwordw"], [2, "thisisaverylongwordw teseting wordlengths"], [2, "hlelllo"], [1, "hello python is a prthisisaverylongwordnopqrsw teseting wordlengthsiogramming language"], [0, "abc  def  ghi  jklm  thisisaveriylongwordwnopqrs   tuvwxyz"], [101, "aaa"], [11, "heogramming language"], [2, "wordlengthsiogramming"], [1, "thisisalanguageverylthisisaverylongwordnopqrsw teseting wordlengthsiongwordw teseting wordleths"], [11, "wordlengthsiongwordw"], [1, "heogramminghelloh python is a programming languagelanguage"], [11, "thisisaverylongword"], [11, "ljkl"], [99, "thisisalanguageverylongwordw"], [1, "ajheogramming languageklamteseting"], [0, "wordlengthsi"], [100, "thisisaveriylongwordwnopqrs"], [102, "aaa"], [102, "aaaa"], [10, "thisisaveriylongwordw testing wordlengths"], [0, "jkl"], [10, "thisisaverylongwordnopqrsw teseting wordlengths"], [10, "jk"], [100, "thisisaverylongwordnopqrsw tegseting wordlengthsi"], [101, "thisisajklmverylongwordw testing wordlengths"], [1, "heogramming laneguage"], [1, "ajklamteseting"], [100, "thisisaverylongwordw testheogramming languagein wordlengths"], [102, "thisisaveriylongwordw testing wordlengths"], [100, "thisisavongwordw"], [100, "hlello"], [0, "hello python is heogramming laneguagea programming language"], [10, "wlengthsiongwordw"], [99, "hello pylanguage"]], "input_output_examples": "[[[3, 'python is a programming language']], [[['python', 'programming', 'language']]]]", "starter_code": "from typing import List\ndef long_words(n: int, s: str) -> List[str]:"}
{"task_id": "Mbpp/129", "requirement": "from typing import List\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\"\"\"", "entry_point": "magic_square_test", "canonical_solution": "\ndef magic_square_test(my_matrix):\n    s = sum(my_matrix[0])\n    # row\n    if any(sum(row) != s for row in my_matrix):\n        return False\n    # column\n    if any(sum(row[i] for row in my_matrix) != s for i in range(len(my_matrix[0]))):\n        return False\n    # diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != s:\n        return False\n    # anti-diagonal\n    if sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))) != s:\n        return False\n    return True\n", "base_input": [[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 8]]], [[[2, 7, 6], [9, 5, 1], [4, 3, 7]]]], "plus_input": [[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5]]], [[[-2, 7, 6], [9, -5, 1], [4, 3, -7]]], [[[4, 19, -3], [12, 7, 1], [0, 9, -16]]], [[[1, 2, 3], [4, 5, 6]]], [[[4, 19, -3], [0, 9, -16]]], [[[7, 12, 1, 14], [2, 13, 8, 11]]], [[[7, 1, 14], [7, 1, 14]]], [[[7, 1, 14]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [2, 13, 8, 11]]], [[[7, 12, 1, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[4, 19, -3], [12, 7, 1], [-16, 9, -16], [12, 7, 1]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[-2, 7, 6], [9, -5, 1]]], [[[1, 2, 3], [4, 5, 6], [4, 5, 6]]], [[[4, 19, -3], [12, 7, 1], [0, 9, -16], [12, 7, 1]]], [[[11, 12, 1, 14], [11, 12, 1, 14], [11, 12, 1, 14], [11, 12, 1, 14], [11, 12, 1, 14]]], [[[4, 19, -3], [12, 7, 1], [12, 7, 1]]], [[[4, 5, 6]]], [[[-2, 7, 6], [9, -5, 1], [4, 3, -7], [9, -5, 1]]], [[[0, 9, -16], [4, 19, -3], [12, 7, 1], [0, 9, -16]]], [[[0, 9, -16], [4, 19, -3], [12, 7, 1], [0, 9, -16], [0, 9, -16]]], [[[9, -5, 1], [4, 3, -7]]], [[[7, 12, 1, 2, 14], [7, 12, 1, 2, 14]]], [[[7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12], [7, 12, 1, 14, 12]]], [[[7, 1, 14, 1], [7, 1, 14, 1]]], [[[7, 12, 1, 2], [7, 12, 1, 2]]], [[[7, 14]]], [[[12, 7, -3], [4, 19, -3], [12, 7, -3], [0, 9, -16], [12, 7, -3]]], [[[12, 7, -3], [4, 19, -3], [12, 7, -3], [12, 7, -3]]], [[[9, -5, 1, 9]]], [[[7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12], [7, 12, 2, 14, 12]]], [[[1, 14], [1, 14], [1, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 1, 14, 1]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [2, 13, 8, 11], [7, 12, 1, 14]]], [[[0, 9, -16], [4, 19, -3], [12, 7, 1]]], [[[2, 8, 11, 2], [2, 8, 11, 2], [2, 8, 11, 2]]], [[[7, 14, 14]]], [[[7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12], [7, 12, 1, 12]]], [[[7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6]]], [[[0, 9, -16], [4, 19, -3], [0, 9, -16], [0, 9, -16]]], [[[7, 12, 1, 14], [16, 3, 10, 5], [2, 13, 8, 11]]], [[[7, 12, 16], [7, 12, 16], [7, 12, 16], [7, 12, 16]]], [[[7, 7], [7, 7]]], [[[7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13]]], [[[9, -5, 1], [4, 3, -6]]], [[[7, 12, 1, 2, 14]]], [[[12, 8, 7, 1], [12, 8, 7, 1]]], [[[7, -5, 14], [7, -5, 14], [7, -5, 14], [7, -5, 14]]], [[[7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14], [7, 12, 1, 14]]], [[[7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13], [7, 12, 2, 14, 13]]], [[[8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14], [8, 12, 1, 14]]], [[[7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12], [7, 12, 1, 14, 12, 12]]], [[[4, 19, -16], [12, 7, 1]]], [[[4, 19, -3], [12, 7, 1], [0, 9, -16], [0, 9, -16]]], [[[7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15], [7, 12, 2, 15]]], [[[6, 4, 5, 6]]], [[[7, 7, 7], [7, 7, 7], [7, 7, 7]]], [[[-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12], [-6, 7, 12, 1, 12, 12]]], [[[7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12]]], [[[7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12]]], [[[7, 12, 1, 2], [7, 12, 1, 2], [7, 12, 1, 2]]], [[[-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7], [-6, 7, 12, 1, 12, 12, 7]]], [[[14], [14], [14]]], [[[7, 12, 1, 1, 14], [7, 12, 1, 1, 14], [7, 12, 1, 1, 14], [7, 12, 1, 1, 14]]], [[[6, 12, 1, 14], [16, 3, 10, 5], [2, 13, 8, 11]]], [[[7, 1, 1, 14], [7, 1, 1, 14], [7, 1, 1, 14], [7, 1, 1, 14]]], [[[-2, 7, 6]]], [[[-5, 13, 8, 11], [7, 12, 1, 14], [-5, 13, 8, 11], [16, 3, 10, 5]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [2, 13, 8, 11]]], [[[7, 12, 1, 2, 14], [7, 12, 1, 2, 14], [7, 12, 1, 2, 14], [7, 12, 1, 2, 14]]], [[[1, -16, 3], [4, 5, 6], [4, 5, 6]]], [[[7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12]]], [[[7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6], [7, 12, 1, 6]]], [[[7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2], [7, 12, 2, 15, 2]]], [[[7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12]]], [[[7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12], [7, 8, 14, 12]]], [[[7, 15, 1, 2, 14], [7, 15, 1, 2, 14], [7, 15, 1, 2, 14]]], [[[12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15], [12, 2, 15]]], [[[7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13]]], [[[7, 12, 1, 14], [14, 13, 8, 11], [16, 3, 10, 5], [14, 13, 8, 11]]], [[[7, 14, 14], [7, 14, 14]]], [[[7, 12, 1, 14, 14], [7, 12, 1, 14, 14]]], [[[7, 12, 1, 14], [2, 13, 8, 11], [2, 13, 8, 11], [2, 13, 8, 11]]], [[[6, 12, 1, 1, 14], [6, 12, 1, 1, 14], [6, 12, 1, 1, 14], [6, 12, 1, 1, 14], [6, 12, 1, 1, 14]]], [[[7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12], [7, 12, 2, 13, 14, 12]]], [[[7, 12, 1], [7, 12, 1], [7, 12, 1], [7, 12, 1], [7, 12, 1]]], [[[12, 7, -3], [4, 19, -3], [12, 7, -3], [12, 7, -3], [12, 7, -3]]], [[[7, 12, 1, 14], [16, 3, 10, 5], [14, 13, 8, 11]]], [[[7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11], [7, 12, 1, 14, 12, 11]]], [[[2, 8, 2], [2, 8, 2], [2, 8, 2], [2, 8, 2]]], [[[7, 15, 1, 2, 14], [7, 15, 1, 2, 14]]], [[[7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12], [7, 12, 1, 12, 12]]], [[[7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7], [7, 8, 14, 12, 7]]], [[[7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12], [7, 12, 14, 12]]], [[[7, 12, 1, 14, 14]]], [[[7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13], [7, 11, 2, 14, 13]]], [[[7, 12, 1, 10, 14]]], [[[6, 1, 1, 14], [6, 1, 1, 14], [6, 1, 1, 14], [6, 1, 1, 14]]], [[[7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12], [7, 12, 1, 14, 12, 12, 12]]]], "input_output_examples": "[[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]], [[True]]]", "starter_code": "from typing import List\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:"}
{"task_id": "Mbpp/130", "requirement": "from collections import defaultdict\nfrom typing import List\ndef max_occurrences(nums: List[int]) -> int:\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\"\"\"", "entry_point": "max_occurrences", "canonical_solution": "\nfrom collections import defaultdict\ndef max_occurrences(nums):\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)\n", "base_input": [[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]], [[2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 18]], [[10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10]]], "plus_input": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 5]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 542, 347, 347, 72, 687, 542]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 542]], [[72, 1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 14]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541]], [[542, 347, 687, 789, 72, 235, 348, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542]], [[542, 347, 687, 789, 3, 72, 348, 235, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 71, 687, 542]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 4]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 5, 7, 8, 9, 11, 11, 12, 13, 14, 15]], [[1, 2, 3, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 6]], [[1, 2, 3, 4, 347, 6, 7, 8, 9, 10, 11, 12, 13, 14, 4]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10]], [[542, 347, 687, 789, 72, 235, 348, 542, 542, 687, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 14]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 72, 687, 1, 542]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 12, 10, 11, 12, 13, 14, 15]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[72, 1, 2, 3, 4, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 12, 14]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 12, 3]], [[1, 2, 3, 4, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15]], [[72, 1, 2, 3, 4, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 235, 14]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 3]], [[1, 2, 3, 4, 5, 7, 8, 9, 11, 11, 12, 72, 14, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 2]], [[72, 1, 2, 3, 4, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 235, 14, 8]], [[1, 2, 3, 4, 5, 7, 8, 9, 11, 11, 12, 687, 72, 14, 15, 1]], [[1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 72, 14, 15]], [[542, 5, 687, 72, 235, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 2, 10, 11, 12, 14]], [[72, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 14]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 541, 347, 347, 687, 542]], [[72, 1, 2, 3, 4, 15, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 235, 14, 8]], [[542, 6, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 541, 347, 347, 687, 542]], [[1, 2, 3, 4, 5, 7, 8, 9, 11, 11, 12, 13, 14, 15, 1, 1]], [[542, 5, 687, 72, 236, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[72, 1, 2, 3, 4, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 3, 14]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 542, 347, 347, 72, 687, 542, 542]], [[542, 347, 687, 72, 235, 348, 542, 542, 687, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542, 347]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 12, 13, 542, 14, 15, 3]], [[1, 2, 3, 4, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 9]], [[1, 3, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 13, 2]], [[542, 71, 347, 687, 789, 72, 235, 348, 542, 542, 687, 789, 789, 542, 72, 542, 543, 347, 347, 72, 687, 542]], [[1, 3, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 13, 2, 7]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 7, 14, 15]], [[1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 72, 14, 15, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 11, 12, 13, 14, 15, 10]], [[1, 3, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 13, 2, 7, 14]], [[542, 347, 687, 789, 72, 235, 542, 789, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[542, 5, 687, 72, 72, 236, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 72, 14, 15, 11]], [[1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 13, 14, 15, 1, 1]], [[542, 5, 687, 72, 236, 542, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347, 542, 542, 789]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 14, 8]], [[72, 8, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 14]], [[542, 347, 687, 789, 3, 72, 348, 235, 542, 542, 687, 789, 789, 542, 72, 542, 347, 347, 71, 687, 542]], [[1, 2, 3, 4, 6, 7, 8, 8, 9, 10, 11, 11, 13, 3, 15]], [[1, 2, 3, 347, 5, 6, 71, 8, 9, 10, 11, 12, 13, 14]], [[1, 2, 3, 4, 4, 5, 6, 8, 9, 10, 11, 3, 235, 13, 14, 15]], [[1, 2, 3, 4, 4, 5, 6, 7, 8, 10, 12, 13, 542, 14, 15, 3, 542]], [[542, 347, 687, 789, 72, 235, 542, 789, 542, 687, 789, 789, 542, 542, 2, 347, 347, 72, 687, 541, 347]], [[72, 8, 2, 3, 4, 347, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 8]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 5, 7, 8, 11, 11, 12, 72, 14, 15, 8]], [[1, 543, 2, 3, 0, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[72, 1, 2, 3, 3, 4, 347, 15, 6, 3, 8, 9, 10, 11, 12, 13, 14]], [[1, 2, 3, 347, 5, 6, 71, 8, 9, 10, 11, 12, 13, 14, 12]], [[1, 2, 3, 4, 15, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9, 10, 11, 12, 13, 14, 15, 10, 10, 10]], [[542, 347, 687, 789, 72, 235, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 72, 542]], [[1, 2, 3, 4, 71, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15]], [[542, 347, 687, 789, 3, 72, 348, 235, 542, 542, 687, 789, 789, 542, 72, 542, 347, 347, 71, 687, 4, 542, 347]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 2, 12]], [[1, 2, 3, 4, 0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 7, 14, 15]], [[72, 1, 2, 3, 4, 347, 5, 6, 3, 8, 9, 10, 11, 12, 13, 3, 14, 3]], [[1, 2, 3, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 12, 3]], [[1, 2, 3, 4, 5, 7, 9, 11, 11, 12, 13, 14, 235, 15]], [[1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 12, 3, 12, 14]], [[1, 2, 3, 4, 14, 5, 7, 8, 9, 11, 11, 12, 13, 14, 15, 1, 1, 1]], [[542, 347, 687, 789, 235, 542, 542, 687, 789, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542]], [[1, 2, 3, 4, 4, 6, 8, 9, 10, 11, 12, 13, 14, 15]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 5, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 10]], [[3, 347, 687, 789, 72, 235, 542, 542, 687, 789, 542, 542, 541, 347, 347, 687, 542, 789]], [[2, 3, 347, 5, 6, 71, 8, 9, 11, 12, 13, 14]], [[1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 10, 9, 5]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 542, 14, 15, 3]], [[1, 2, 3, 4, 347, 6, 7, 9, 10, 11, 12, 13, 14, 4, 13, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 10, 10, 11, 12, 13, 14, 15, 5, 9, 1]], [[3, 347, 687, 789, 72, 235, 542, 687, 789, 542, 542, 541, 347, 348, 687, 542, 789]], [[542, 347, 5, 687, 72, 72, 236, 542, 687, 789, 789, 542, 542, 347, 347, 72, 687, 541, 347]], [[0, 1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 72, 14, 15, 9]], [[1, 2, 4, 5, 7, 8, 9, 1, 11, 11, 12, 13, 14, 15, 1, 1, 13]], [[1, 2, 4, 5, 7, 8, 9, 11, 11, 12, 72, 15, 9]], [[542, 71, 789, 72, 235, 542, 542, 687, 789, 789, 542, 542, 542, 347, 72, 687, 542]], [[14, 1, 2, 3, 4, 347, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 12, 3]], [[542, 347, 687, 789, 73, 235, 348, 542, 542, 687, 789, 542, 72, 542, 542, 347, 347, 72, 687, 542]]], "input_output_examples": "[[[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]]], [[2]]]", "starter_code": "from typing import List\ndef max_occurrences(nums: List[int]) -> int:"}
{"task_id": "Mbpp/131", "requirement": "def reverse_vowels(str1: str) -> str:\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\"\"\"", "entry_point": "reverse_vowels", "canonical_solution": "\ndef reverse_vowels(str1):\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)\n\t\t\n", "base_input": [["Python"], ["USA"], ["ab"]], "plus_input": [[""], ["BCDFG"], ["BCDFCCG"], ["BCDFC"], ["BDCBDFC"], ["BDFG"], ["BCDCBDFC"], ["BCDFCCGBCDCBDFC"], ["BCDFCCGBCDCBDFCBCDFCCG"], ["BDFGG"], ["BCDBFC"], ["BCBDCBDFCDBFC"], ["BCBDCBDFCDBBCDCBDFCC"], ["BCDFCCGBCDBDFC"], ["BCBDCBCDFCDBFC"], ["BFGG"], ["BCBDCBDFCBCDFCCGBCDCBDFGCBCDFCCGDBFC"], ["CDFCCGBCDBDFC"], ["BBBCBDCBDFCDBBCDCBDFCCDCBDDFC"], ["BCBCDFCDFC"], ["BCCCGBCDBCDFC"], ["DBCBDCBDFCDBBCDCBDFCC"], ["BBCBDCBCBCDFCDFCBDFCDBFC"], ["BCBBCBDCBDFCDBFCDCBDFCDBBCDCBDFCC"], ["DBCDBDCBDFCDBCBDCBDFCDBBCDCBDFCCBBCDCBDFCC"], ["BDCBDCBCDFCDB"], ["BCBDCBCDBFCDBFC"], ["BCDFCCGBCDBD"], ["BBBCBDCBDCBDCBCDFCDBBDFCDBBCDCBDFCCDCBDDFC"], ["BDFGGBCBDCBCDBBBCDFCCGFCDBFC"], ["BCDFCCBGBCDCBDFC"], ["BBBBCBDCBDFCDBBCDCBDFCCDCBDDFC"], ["BBCBDCBCBCDFCBCDBFCDFCBDFCDBFC"], ["CBDFCDBBCDCBDFCC"], ["BBCBDCBCBCDFCBCDBFCDCFCBDFCDBFC"], ["BG"], ["BCDFCCGBDCDBDFC"], ["DDBCBDCBDFCDBBCDCBDFCC"], ["BDBFG"], ["BDDFGG"], ["BDFGDBCBDCBDFCDBBCDCBDFCCG"], ["BBBCBDCBDCBDCBCDFCDBBDFBDDFC"], ["BCDFCCGBCDCBDFCBDFGDBCBDCBDFCDBBCDCBDFCCG"], ["BBFC"], ["CDFCCGBCDBDFCBG"], ["CDFCCGBCDDBDFC"], ["BCDFCCGBCGDBD"], ["BCBDCBCDBFCDBFCC"], ["pzpAwF"], ["DDBCBDCBDFCDBBCDCBDFCBCDFCCGBCDCBDFCBCDFCCGC"], ["BCBDCBCDBFCFDBFC"], ["DDDBCBDCBDFCDBBCDCBDFCC"], ["BCBCDFCCGBDCDBDFCBDCBCDFCDBFC"], ["BCDFCCGBCDCBDFCBCCG"], ["BCDDFCCGBCDBD"], ["CDCFCCGBCDBDFCBG"], ["BBBCBDCBDCBDCBCDFCDBCBDDFC"], ["BCBDCBDFCDBFFC"], ["CDFCCGBCFDBBBBBCBDDCBDFCCDCBDDFCDBDFC"], ["BCBDCBDFCBCDFCCGBCDCBDFGCBCDFCDBFC"], ["DDBCBDCBDFCDBBCDCBDFCBCDFCCGBCDBDFGDFCCGC"], ["DDBCBDCBDFCDBBCDCBDFCCDFCCGBCDDBDFCBCDFCCGBCDBDFGDFCCGC"], ["BCDBFBCBCDFCDFCC"], ["BCDFCCGBCDCBDFCBCCCG"], ["BDCBDCBCDFCD"], ["DDDBCBDCBBCDCBDFCC"], ["BCBDCBDFCBCDFCCGBCDCBDFGCBCDFCFDBFC"], ["BCDCBDBCBDCBCDFCDBFCFC"], ["BCDDFCCGBCCDBD"], ["BCBDCBCDBFCFDBFDC"], ["BDBCDFCCGBDCDBDFCGG"], ["BCDBBFC"], ["DDDBCBDCBBCDCCBDFCC"], ["BCDBCCCGBCDBCDFCCCBGBCDCBDFC"], ["BCCDFCCGBCDDBDFCDDFCCGBCDBD"], ["BBBCBDCBDCBDCGBCDDDBCDBDCBDFCDBCBDCBDFCDBBCDCBDFCCBBCDCBDFCCBDFCC"], ["BCBCDBFCDFCCGBDCDBFDFC"], ["BCCCGBCDBCDFCC"], ["FIswIZeBBCBDCBDFCBCDFCCGBCDCBDFGCBCDFCFDBFCCDCBDFCD"], ["BCBDCBBCDBFCDBFCC"], ["BCDFCDDBCBDCBDFCDBBCDCBDFCBCDFCCGBCDBDFGDFCCGCCGBCGDBD"], ["BCDFCCGBCDCBDFCBCD"], ["CBDFCDBBBBBCBDCBDFCDBBCDCBDFCCDCBDDFCCDCBDFCC"], ["BCCDFCCGBCDDBDFCDDBDFGCGFCCGBCDBD"], ["BCDFCCGDBCDCBDFCBCD"], ["wqfXCaCb"], ["BCDFCDDBCBDCBDFCDBBCDCBDFCBCDFCCGBCDFCCGBCDCBDFCBCDBCDBDFGDFCCGCCGBCGDBD"], ["BDFGDBCBDCBDFCDG"], ["BCCDFCCBGBCDCBDFC"], ["BCDFCCGBCBCDBFCDBD"], ["BBBBCBDCBDFCDBBCDCBBCBDCBDFCDBFCDFCCDCBDDFC"], ["BCCBDCBCDFCDBFC"], ["BCDFCCDDBD"], ["BDBBFG"], ["BCDFCCGBCDCBBDFCBCD"], ["BBBBCBDCBDFCDBBCDCBBpzpAwFCBDCBDFCDBFFCDFCCDCBDDF"], ["BCBDCBDFCBCDFCCGBCDCBDFGCBCDFCDCBFC"], ["BCBDCBDFCBCDFCCGBCDCBDFGCBCDFCCDBFC"], ["BCCDFCCBGBCDCCBDFC"], ["FIswIZeBBCBDCBDFCBCDFCCGBCDCBDFGCBCDFCFBCDFCDDBCBDCBDFCDBBCDCBDFCBCDFCCGBCDFCCGBCDCBDFCBCDBCDBDFGDFCCGCCGBCGDBDDBFCCDCBDFCD"], ["BCDFCCBBCDFCCBGBCDCBDFCDCBDFC"], ["BDFGGBCBDCBCDBBBCDFC"]], "input_output_examples": "[[['Python']], [['Python']]]", "starter_code": "def reverse_vowels(str1: str) -> str:"}
{"task_id": "Mbpp/132", "requirement": "from typing import Tuple\ndef tup_string(tup1: Tuple[str, ...]) -> str:\"\"\"\nWrite a function to convert a tuple to a string.\"\"\"", "entry_point": "tup_string", "canonical_solution": "\ndef tup_string(tup1):\n  return ''.join(tup1)\n", "base_input": [[["e", "x", "e", "r", "c", "i", "s", "e", "s"]], [["p", "y", "t", "h", "o", "n"]], [["p", "r", "o", "g", "r", "a", "m"]]], "plus_input": [[[]], [["a"]], [["a", "a"]], [["Z", "a", "ZvCAMhN", "a", "a", "a"]], [["Z", "a", "ZvCAMhN", "a", "aa", "a"]], [["Z", "a", "ZvCAMhN", "a", "aa", "a", "aa"]], [["ZZ", "a", "ZvCAMhN", "a", "a", "a"]], [["a", "ZvCAMhN", "aaZ", "a", "aa", "a"]], [["mKxDJT", "VekfW", "ZvCAMhN", "aaZ", "FiUaYFBklh", "PBEOJoMiY", "aFELUEp", "aaZ", "ZZ"]], [["Z", "a", "ZvCAMhN", "a", "a", "a", "a"]], [["ZZ", "", "ZvCAMhN", "aa", "a", "a"]], [["aa", "mKxDJTaa", "a"]], [["aa", "ZvCAMhN", "a"]], [["aa", "VekfW", "a"]], [["Z", "ZvCAMhN", "a", "a", "a", "Z", "a"]], [["ZZZ", "a", "ZvCAMhN", "a", "a", "a"]], [["ZZZ", "a", "ZvCAMhN", "a", "a"]], [["aFELUEpZ", "a", "ZvCAMhN", "a", "aa", "a", "aa"]], [["aa", "mKxDJTaa", "aa"]], [["a", ""]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "tDuJm", "IWSYg", "Z"]], [["aa", "ZvCAMhN", "a", "aa"]], [["ZZ", "ZvCAMhN", "aa", "a", "a"]], [["Z", "a", "ZvCAMhN", "a", "aa", "a", "a"]], [["mKxDJT", "ZvCAMhN", "aaZ", "a", "aa", "a"]], [["aa", "aFELUEpZ"]], [["mKxDJT", "ZvCAMhN", "aZ", "ZZ", "a", "aa", "a"]], [["Z", "aaZ", "a", "ZvCAMhN", "a", "a", "a", "a"]], [["ZZZ", "a", "ZvCAMhN", "a", "aFELUEpa", "a", "a"]], [["aFELUEp", "ZvCAMhN", "a", "aa", "a"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "a", "a", "a", "a"]], [["aZZ", "aFELUEpZ"]], [["ZZZ", "tDuJma", "a", "ZvCAMhN", "a", "a", "ZZ"]], [["ZZ", "ZvCAMhN", "aa", "a", "a", "ZvCAMhN"]], [["aa", "ZvCAMhN", "aa"]], [["Z", "a", "a", "a", "a"]], [["aa", "ZvCAMhN", "aa", "aa"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "PBEOJoMiYa", "a", "a", "a"]], [["", "ZvCAMhN", "aa", "a", "a", "ZvCAMhN"]], [["a", "aa", "a"]], [["amKxDJTaa", "Z", "mKxDJTaaa", "ZvCAMhN", "a", "aa", "a"]], [["Z", "a", "ZvCAMhN", "a", "a", "FiUaYFBklh"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "tDuJm", "IWSYg", "Z", "Z"]], [["Z", "a", "a", "a", "Z", "a"]], [["ZZ", "aaZa", "ZvCAMhN", "aa", "a"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "SkSpnaC", "aFELUEp", "tDuJm", "IWSYg", "Z", "Z"]], [["ZvCAMhN", "aaa", "aa", "aa", "aa"]], [["aa", "a"]], [["ZZ", "aaZa", "ZvCAMhN", "aa", "a", "aa"]], [["aFELUEpZ", "a", "ZvCAMhN", "a", "aa", "a", "aa", "a"]], [["a", "IWSYga", "ZvCAMhN", "IWSYg", "aVekfW", "a", "aa", "a"]], [["ZZ", "a", "ZvCAMhN", "a", "aa", "a", "ZvCAMhN"]], [["", "a", "a", "a", "Z", "a"]], [["mKxDJT", "ZvCAMhN", "aZ", "ZZ", "mKxDJT", "aa", "aa", "a"]], [["ZZ", "SkpnaC", "FiUaYFBklh", "a", "a", "a", "a"]], [["Z", "a", "ZvCAMhN", "a", "a", "a", "a", "a"]], [["a", "", ""]], [["ZZ", "a", "ZvCAMhN", "a", "a"]], [["ZZZ", "a", "a", "aFELUEpa", "a"]], [["", "a"]], [["ZZ", "ZvCAMhN", "PBEOJoMiYa", "aa", "a", "a", "ZvCAMhN"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "IWSYga", "a", "a", "a"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "IWSYga", "a", "a"]], [["ZZZ", "a", "ZvCAMhN", "a", "aFFELUEpa", "a"]], [["ZZ", "ZvCAMhN", "a", "aa", "a"]], [["SkpnaC", "a", "qHPQEqCm", "PyvCTG", "SkSpnaC", "aFELUEp", "tDuJm", "IWSYg", "Z", "Z"]], [["a", "PBEOJoMiY", ""]], [["Z", "a", "ZvCAMhN", "a", "a", "a", "a", "a", "a"]], [["Z", "ZvCAMhN", "a", "aa", "a", "a", "Z", "a"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "aZZ", "tDuJm", "IWSYg", "Z"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "IWSYga", "a", "a", "a", "a"]], [["aFELUEpZ", "a", "ZvCAMhN", "a", "a", "aa", "mKxDJTaa", "a"]], [["aa", "VekfW", "aa"]], [["IWSYg", "ZZZ", "a", "a", "aFELUEpa", "a"]], [["ZZ", "SkpnaC", "FiUaYFBklh", "a", "a", "a", "a", "a"]], [["ZZ", "aa", "a", "aa", "aa"]], [["aa", "SkpVekfWnaC", "aa"]], [["mKxDJT", "VekfW", "ZvCAMhN", "aaZ", "FiUaYFBklh", "PBEOJoMiY", "aFELUEp", "aaZamKxDJTaa", "ZZ", "VekfW", "PBEOJoMiY"]], [["SkpnaC", "ZZ", "aa", "a", "aa", "aa", "aa"]], [["SkpnaC", "ZZ", "aa", "aPBEOJoMiYaa", "a", "aa", "aa", "aa"]], [["aa", "SkfpVekfWnaC", "aa"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "aZZ", "tDuJm", "IWSYg", "aaZamKxDJTaa"]], [["ZZ", "SkpnaC", "FiUaYFBklh", "aaFELUEpa", "a", "a", "a", "a"]], [["ZZ", "ZvCAMhN", "PBEOJoMiYa", "aa", "a", "a", "ZvCAMhN", "a"]], [["Z", "ZvCAMhN", "aPBEOJoMiYaa", "a", "aa", "a", "Z", "a"]], [["aFELUEpZ", "a", "ZvCAMhN", "a", "ZvCACMhN", "aa", "a", "aaFELUEpZ", "aa"]], [["ZZ", "a", "ZvCAMhN", "a", "ZZZ", "a", "a"]], [["ZZ", "a", "tDuJma", "PBEOJoMiY", "a", "aa"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "aZZ", "IWSYg", "Z"]], [["Z", "aaZ", "a", "ZvCAMhN", "a", "a", "a", "a", "a"]], [["mKxDJT", "ZvCAMhN", "aZ", "ZZ", "mKxDJT", "aa", "SkfpVekfWnaC", "aZtDuJm", "aa", "a"]], [["ZvCAMhN", "ZvCAaFELUEpMhN", "aaa", "aaa", "aa", "aa"]], [["mKxDJT", "VekfW", "ZvCAMhN", "aaZ", "aZ", "PBEOJoMiY", "aFELUEp", "aaZ", "ZZ"]], [["ZZZ", "a", "ZvCAMhN", "a", "aFELUEpa", "a", "ZmKxDJTaaavCAMhN", "a"]], [["ZvCNAMhN"]], [["SkpnaC", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "tDuJm", "IWSYg", "Z", "Z"]], [["Z", "aaZ", "IWSYga", "a", "ZvCAMhN", "IWSYga", "a", "a", "a", "a", "a"]], [["ZvCAMhN", "aaa", "aa", "aa", "ZMvCAMhN", "aa"]], [["SkpnaC", "Z", "a", "qHPQEqCm", "PyvCTG", "aFELUEp", "aZZ", "IWSYg", "Z", "Z"]], [["ZvCAMhN", "a", "aa", "aa"]], [["Z", "VekfW", "ZvCAMhN", "aaa", "a", "a", "a"]], [["ZZZ", "a", "aFELUEpa"]]], "input_output_examples": "[[[('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')]], [['exercises']]]", "starter_code": "from typing import Tuple\ndef tup_string(tup1: Tuple[str, ...]) -> str:"}
{"task_id": "Mbpp/133", "requirement": "from typing import List\ndef sum_negativenum(nums: List[int]) -> int:\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\"\"\"", "entry_point": "sum_negativenum", "canonical_solution": "\ndef sum_negativenum(nums):\n  return sum(x for x in nums if x < 0)\n", "base_input": [[[2, 4, -6, -9, 11, -12, 14, -5, 17]], [[10, 15, -14, 13, -18, 12, -20]], [[19, -65, 57, 39, 152, -639, 121, 44, 90, -190]]], "plus_input": [[[]], [[1, 2, 3, 4, 5]], [[-1, -2, -3, -4, -5]], [[10, 15, 14, 13, 18, 12, 20]], [[3, -5, 1, -7, 2, -8, 4, -6]], [[-10]], [[3, -5, 1, -7, 2.5, -8.9, 4, -6]], [[-10, 15, -14.2, 13, -18, 12, -20.7]], [[3, -5, 1, -7, 2.5, -8.9, 4, -6, 1]], [[2, 3, 4, 5]], [[2, 3, -7, 6]], [[3, 2, -5, 1, -7, 2.5, 4, -6, 1]], [[5, 2, 3, 4, 5]], [[10, 15, 14, 13, 18, 12, 20, 20]], [[10, -1, -2, -3, -4, -5]], [[20, 2, 3, 4, 5]], [[3, -5, 1, -7, 2.5, -8.9, 4, -6, 1, 1]], [[10, 15, 14, 13, 13, 18, 12, 20, 20, 15, 18]], [[10, 15, 14, 13, 18, 12, 20, 14, 20]], [[10, -1, -2, -4, -5]], [[-6, 3, -5, 1, -7, 2, -8, 4, 2, -6]], [[3, 2, -5, 1, -7, 4, -6, 1]], [[1, 2, 3, 1, 5, 1]], [[1, 2, 4, 5, 2, 2]], [[0, 2, -5, 1, -7, 4, -6, 1]], [[1, 2, 3, 0, 1, 5, 1]], [[10, 14, 15, 14, 13, 18, 12, 20, 20]], [[10, 15, 14, 1, 13, 18, 12, 20, 14, 20]], [[5, 2, 20, 4, 4, 6]], [[3, 2, -5, 1, -7, 2.5, 4, 10, 1]], [[1, -8, 2, -10, 4, 5, 2, 2]], [[3, -5, 1, -7, -2, 2.5, -8.9, 4, -6, 1, 1]], [[2, 10, 14, 15, 14, 13, 18, 12, 20, 20]], [[-6, 3, -5, 1, -7, 2, -8, 2, 2, -6]], [[0, 2, -5, 1, -7, 4, 1]], [[0, 2, -5, 1, -7, 1, 4, 1, -7]], [[3, -5, 0, -7, 2.5, -8.9, 4, -6]], [[1, 2, 3, 4, 2, 5, 2, 3]], [[-7, 5, 3, -5, 1, -7, 2, -8, 2, 2, -6]], [[-6, 3, -5, 1, -7, -8, 2, -4, 2, -6]], [[0, 2, -5, 1, -5, -7, 1, 4, 1, -7]], [[0, 2, -5, 1, -5, -7, 1, 4, -4, 1, -7]], [[1, 2, 3, 4, 2, 5, 3]], [[10, -1, -2, -3, -4, 9, -5, -4]], [[5, 2, 20, 4, 4]], [[10, -1, -2, -3, -4, 9, -4]], [[0, 2, -5, 1, -7, 4, 1, 4, 1, -7]], [[1, 2, 3, 4, 4]], [[-10, 15, -14.2, 13, -18, 12, -20.7, 12]], [[10, 14, 15, 14, 13, 21, 18, 12, 20, 20]], [[-6, 3, -5, 1, -7, 2, -8, 4, 1, -6]], [[1, 21, 2, 3, 3, 1, 1, 1]], [[3, -5, 0, -7, 2.5, -8.9, 4, -6, 0]], [[-1, -2, -3, -4, -5, -1]], [[10, 14, -5, 15, 14, 13, 21, 18, 12, 20, 20, 14]], [[-10, -10]], [[-10, 15, 16, -14.2, 13, -18, 12, -20.7]], [[-6, 3, -5, -7, 2, -8, 4, 2, -6]], [[-1, -2, -3, -4, -5, -4]], [[3, -5, 1, -7, 2, 16, -8, 4, -6]], [[3, 2, -5, 1, -7, 2.5, 4, -6, 1, 2]], [[3, -5, -6, 1, -7, 2, 16, 0, 4, -6, 1]], [[-1, -2, -3, -4, -5, -5]], [[3, -5, 0, -7, 2.5, -8.9, 4, -6, 0, 4]], [[3, -5, 0, -7, 2.5, -8.686091893944287, 4, -6, 4]], [[10, 15, 14, 13, 14, 12, 20, 10]], [[1, 2, 3, 3, 3, 4, 4]], [[-6, 3, -5, 1, -7, 2, -8, 4, 1, -6, -7]], [[10, -1, -2, -3, -4, 9, -1, -1, -5]], [[10, -2, -1, -2, -3, -4, 9, -1, -1, -5]], [[10, -1, -2, 16, -4, 9, -4]], [[3, -9.674408997541613, -5, 1, -7, 2.5, -8.9, 4, -6, 1, 1]], [[10, -1, -2, -3, -4, -5, 10]], [[3, -5, 1, -7, 2, 16, -8, 20, -6]], [[10, 15, 14, 13, 13, 18, 12, 20, 20, 15, 18, 12]], [[-7, 3, -7, 6]], [[10, 15, 1, 13, 18, 12, 20, 14, 20]], [[3, -5, 1, -7, 2, 16, 4, -6]], [[10, -1, -2, -3, -4, -5, -1]], [[10, -1, -2, -3, -4, 5, -4]], [[2, 3, 4, 5, 2]], [[3, 2, -5, 1, -7, 2.5, 20, 4, 10, 1]], [[10, -1, -2, 16, -4, 9]], [[1, -6, 2, 3, 4, 2, 5, 3]], [[2, 10, 15, 14, 13, 18, 12, 20, 20]], [[-8, 2, -4, -10, 4, 5, 2]], [[10, 15, 14, 1, 13, 18, 13, 12, 20, 14, 19, 20]], [[-1, -2, -5, -3, -4, -5, -1]], [[10, -2, -2, -3, -4, 9, -1, -1]], [[0, 2, -5, 1, -5, -7, 1, 4, -4, 1, -7, 1]], [[10, 15, 13, 18, 12, 20, 20]], [[1, 2, 3, 4, 2, 5, 4]], [[1, 2, 3, 4, 2, 5, 2, 3, 5, 5]], [[1, 2, 3, 4, 2, 5, 4, 2, 2]], [[-18, 2, 3, 1, 5, 1]], [[2, 9, 15, 21, 18, 12, 20, 20]], [[3, 2, 1, -7, 2.5, 4, -6, 1, 1]], [[1, 21, 3, 3, 1, 1, 1]], [[2, 3, 5, 2]], [[2, 5, 3, 5, 2]], [[-1, -3, -4, -5]], [[10, 14, 15, 14, 13, 21, 18, 12, 20, 20, 14]], [[-2, 16, -3, -4, -5]], [[-10, 15, 16, -14.2, 13, -18, 12, -20.7, -18]], [[5, 2, 20, 4, 4, 2]], [[1, 2, 4, 3, 5, 2, 3]], [[3, 2, -5, 1, -7, 4, -6, 1, -6]], [[0, 2, -4, -5, 1, -7, 4, 1, 4, 1, -7]]], "input_output_examples": "[[[[2, 4, -6, -9, 11, -12, 14, -5, 17]]], [[-32]]]", "starter_code": "from typing import List\ndef sum_negativenum(nums: List[int]) -> int:"}
{"task_id": "Mbpp/135", "requirement": "def hexagonal_num(n: int) -> int:\"\"\"\nWrite a function to find the nth hexagonal number.\"\"\"", "entry_point": "hexagonal_num", "canonical_solution": "\ndef hexagonal_num(n): \n\treturn n * (2 * n - 1) \n", "base_input": [[10], [5], [7]], "plus_input": [[100], [1000], [10000], [9999], [9998], [10001], [99], [9997], [1001], [10002], [9996], [101], [true], [90], [98], [97], [1002], [10003], [102], [1003], [62], [1004], [false], [96], [103], [9995], [104], [63], [64], [91], [61], [1005], [89], [1006], [60], [105], [66], [59], [65], [87], [88], [10004], [9994], [58], [106], [1007], [22], [92], [10005], [10006], [86], [93], [67], [57], [23], [9993], [68], [85], [39], [21], [84], [5], [94], [40], [83], [999], [1008], [20], [41], [42], [10007], [38], [56], [6], [1009], [107], [69], [82], [55], [9992], [24], [7], [12], [8], [11], [108], [95], [25], [1], [9], [19], [10], [36], [0], [81], [52], [51], [109], [10008], [110], [1010], [10009], [43]], "input_output_examples": "[[[10]], [[190]]]", "starter_code": "def hexagonal_num(n: int) -> int:"}
{"task_id": "Mbpp/137", "requirement": "from typing import List\ndef zero_count(nums: List[int]) -> float:\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\"\"\"", "entry_point": "zero_count", "canonical_solution": "\ndef zero_count(nums):\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)\n", "base_input": [[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]], [[2, 4, -6, -9, 11, -12, 14, -5, 17]]], "plus_input": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], [[0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]], [[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1]], [[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]], [[0, 1, 0, 2, 0, 3, 0, 4, 0, 5]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, -2, -3, -4, -5, -5, -6, -7, -8, -9, -10]], [[0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, -7, 0, 0, 1, -7]], [[0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 1]], [[-5, 0, 1, 0, 0, 1, 0, 1, 0, 1, 1]], [[-1, -2, -4, -5, -5, -6, -7, -8, -9, -10, -2]], [[0, 0, 0, 0, 0, -1, 0, 0, 0, 1]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1]], [[0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]], [[0, 0, 0, 0, 0, 0, 0, -7, 0, 1, -7]], [[-5, 0, 1, 0, 0, 1, 0, 1, 0, 1, -3]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1]], [[0, 0, 1, 0, 1, 1, 1, 1, 1]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1]], [[0, 0, 0, 1, 1, 1, 1, 1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], [[-1, 0, 0, 0, 0, 0, 0, 0, 1]], [[-1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], [[0, 0, 0, 0, 0, 0, -7, 0, 0, 1]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], [[-1, -2, -4, -5, -5, -6, -7, -8, -9, -10, -1]], [[0, -1, 0, 0, -8, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1]], [[-5, 0, 1, 0, 1, 0, 1, 1, 1]], [[0, -1, 0, 0, 0, 1, 1, 1, 1, 1, 1]], [[-1, 0, 0, 0, 0, 0, -5, 0, 0, 1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 0]], [[-5, 0, 1, -1, 0, 1, 0, 1, 0, 1, 1]], [[-5, 0, 1, -1, 0, 1, -6, 0, 0, 1, 1]], [[0, 0, 1, 0, 1, 1, -2, 1, 1]], [[1, 1, -2, 1, 1, 1, 1, 1, 1, 1]], [[-5, 0, 0, 0, 0, 0, -1, 0, 0, 0, 1]], [[-5, 0, 0, 0, 0, -1, 0, 0, 0]], [[0, -1, 0, -1, -8, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 0, 1, -9, 1, 1, 2, 1, 2, 1]], [[0, 1, 0, 0, 1, 0, 1, 0, 1, 4, 1]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 1]], [[0, 1, 0, 1, 0, 1, 0, 1, 1, 0]], [[0, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0]], [[-5, 0, 1, 3, 0, 1, 0, 1, 0, 1, 1, 0, 1]], [[-1, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1]], [[0, 0, 0, 0, 0, 0, 1, -9, 1, 1, 2, 1, 2, 1]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, -9, 0, 2]], [[-1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 1, 0]], [[-1, -2, -4, -5, -5, -6, -7, -8, -9, -9, -10, -2]], [[0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0]], [[0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, -10, 0, 1, 1, 1, 2, 1, 1]], [[0, 0, 0, 0, 1, 1, 1, 1, 1]], [[-5, 1, 1, 0, 1, 0, 1, 1, 1]], [[0, -2, 0, 0, 0, 0, 0, 0, 0, 1]], [[-1, -2, -1, -1, -1, -1, -1, -1, -9, -1, -1, -1, -1]], [[0, -2, 0, 0, -10, 0, 1, 1, 1, 2, 1, 1]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1]], [[0, 0, 0, 0, -1, 1, 1, 1, 1, 1, 1]], [[5, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0]], [[-1, -1, -1, -1, -1, -1, -1, -1, 0, -1]], [[-1, -1, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1]], [[-5, 0, 0, 0, 0, -1, 0, 0]], [[0, 0, 0, 0, -1, 1, 1, 1, 1, -1, 1]], [[-2, -3, -5, -5, -6, -7, -8, -9, -10]], [[-5, 0, 1, -1, 0, 1, -6, 0, 0, 1, 1, 0]], [[-2, -3, -5, -5, -6, -7, -8, -9, -10, -3]], [[0, 0, 0, 0, 0, 0, 0, 0, -1]], [[0, -1, 0, -10, -1, -8, 0, 0, 0, 0, 1]], [[0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 0]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, -8, 0, 0]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1]], [[0, -6, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 0]], [[-1, -1, -1, -1, -1, 0, -1, -1, -1, -1, 0, -1]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 0, 2, 1]], [[-1, -2, -4, -5, -6, -7, -8, -9, -10, -2]], [[0, 0, 1, 0, 1, -9, 1, 1, 1, 1, 1]], [[0, 1, 0, -2, 2, 0, 3, 0, 4, 0, 1, 5]], [[-1, 0, 0, 0, 0, -8, 0, 0, 1]], [[-2, -3, -5, -5, -5, -7, -8, -9, -10]], [[0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], [[0, -2, 0, 0, -10, 0, 1, 1, 1, 2, 1, 1, 0]], [[-1, -2, -1, -10, -1, -1, -1, -1, -9, -1, -1, -1, -1]], [[1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]], [[0, 0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 0]], [[0, 0, 0, 0, 1, 1, 1, 2, 1, 2, 1, 1, 0, 1]], [[0, 3, 0, -2, 0, -10, 0, 1, 1, 1, 2, 1, 0]], [[-5, 0, 2, 0, 1, 0, 1, 1, 1, 0]], [[-1, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0]], [[0, 0, 0, 0, 0, 1, 1, 1, -5, 1, 2, 1, 0]], [[1, -5, 0, 1, -1, 0, 1, 0, 1, 0, 1, 1]], [[0, 0, 0, 0, 1, 0, 1, 2, 1, 2, 1, 1, 0, 1]], [[-5, 0, 1, 0, -10, -3, 1, 1]], [[-1, -2, -4, -5, -6, -7, -8, -9, -10, -2, -5]], [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 0, -1, -1]], [[-5, 0, 1, 3, 0, 1, 0, 1, 0, 1, 1, 0, 1, 1, 1]], [[0, 0, 0, 0, 0, 1, -7, 0, 0, 1, 0]], [[-5, 1, 1, 0, 1, 0, 1, 1]], [[0, 0, 0, 0, 1, 0, 1, 2, 1, 2, 1, 1, 0, 1, 1]]], "input_output_examples": "[[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]], [[0.181818]]]", "starter_code": "from typing import List\ndef zero_count(nums: List[int]) -> float:"}
{"task_id": "Mbpp/138", "requirement": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\"\"\"", "entry_point": "is_Sum_Of_Powers_Of_Two", "canonical_solution": "\ndef is_Sum_Of_Powers_Of_Two(n): \n    return n > 0 and n % 2 == 0\n", "base_input": [[10], [7], [14]], "plus_input": [[123456789], [-14], [-2147483648], [-15], [123456788], [-2147483647], [123456787], [-2147483649], [-2147483650], [true], [-2147483651], [-16], [false], [-2147483646], [123456786], [-17], [-88], [-18], [-19], [-20], [123456785], [-7], [-6], [-2147483652], [-2147483653], [-2147483645], [-2147483654], [123456784], [-86], [-2147483643], [-87], [123456783], [21], [-2147483655], [-85], [-9], [-21], [-10], [19], [-22], [-89], [10], [123456782], [-2147483642], [-23], [-2147483641], [-11], [-8], [-90], [18], [-5], [123456790], [-4], [20], [-2147483640], [9], [123456781], [123456791], [-2147483644], [123456780], [-2147483639], [8], [42], [123456792], [-2147483656], [-13], [-2147483657], [41], [43], [-91], [-2147483638], [-2147483637], [-12], [40], [123456779], [44], [123456793], [28], [29], [45], [123456778], [39], [-55], [82], [-92], [-43], [-3], [27], [11], [-2147483636], [-50], [12], [61], [17], [7], [-75], [81], [-44], [-36], [79], [-45], [-51], [46]], "input_output_examples": "[[[10]], [[True]]]", "starter_code": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:"}
{"task_id": "Mbpp/139", "requirement": "import math\ndef circle_circumference(r: float) -> float:\"\"\"\nWrite a function to find the circumference of a circle.\"\"\"", "entry_point": "circle_circumference", "canonical_solution": "\nimport math\ndef circle_circumference(r):\n  return 2 * math.pi * r\n", "base_input": [[10], [5], [4]], "plus_input": [[1000000], [1000001], [999999], [true], [1000002], [1000003], [999998], [999997], [19], [51], [999996], [18], [999995], [20], [999994], [50], [999993], [17], [49], [52], [21], [16], [78], [77], [48], [15], [1000004], [22], [1000005], [14], [999992], [53], [79], [76], [80], [81], [83], [43], [24], [13], [23], [75], [85], [55], [44], [47], [84], [46], [45], [82], [42], [1000006], [56], [86], [74], [41], [92], [1000007], [12], [25], [1000008], [87], [93], [73], [28], [91], [95], [54], [88], [57], [999991], [96], [97], [40], [26], [90], [2], [11], [89], [27], [94], [1000009], [10], [1000010], [72], [29], [59], [71], [58], [60], [1000011], [30], [98], [70], [3], [99], [31], [64], [9], [100], [33]], "input_output_examples": "[[[10]], [[62.830000000000005]]]", "starter_code": "def circle_circumference(r: float) -> float:"}
