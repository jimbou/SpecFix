{"task_id": "Mbpp/2", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"", "canonical_solution": "def similar_elements(test_tup1, test_tup2):\n  return tuple(set(test_tup1) & set(test_tup2))", "entry_point": "similar_elements", "input_output_examples": "[[[[3, 4, 5, 6], [5, 7, 4, 10]]], [[(4, 5)]]]"}
{"task_id": "Mbpp/3", "requirement": "def is_not_prime(n: int) -> bool:\n\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"", "canonical_solution": "import math\ndef is_not_prime(n):\n    if n == 1:\n        return True\n    for i in range(2, int(math.sqrt(n))+1):\n        if n % i == 0:\n            return True\n    return False", "entry_point": "is_not_prime", "input_output_examples": "[[[2]], [[False]]]"}
{"task_id": "Mbpp/4", "requirement": "def heap_queue_largest(nums: list, n: int) -> list:\n\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"", "canonical_solution": "import heapq as hq\ndef heap_queue_largest(nums: list,n: int) -> list:\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "entry_point": "heap_queue_largest", "input_output_examples": "[[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]], [[[85, 75, 65]]]]"}
{"task_id": "Mbpp/6", "requirement": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"", "canonical_solution": "def is_Power_Of_Two(x: int): \n    return x > 0 and (x & (x - 1)) == 0\ndef differ_At_One_Bit_Pos(a: int,b: int):\n    return is_Power_Of_Two(a ^ b)", "entry_point": "differ_At_One_Bit_Pos", "input_output_examples": "[[[13, 9]], [[True]]]"}
{"task_id": "Mbpp/7", "requirement": "from typing import List\n\n\ndef find_char_long(text: str) -> List[str]:\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"", "canonical_solution": "import re\ndef find_char_long(text):\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))", "entry_point": "find_char_long", "input_output_examples": "[[['Please move back to stream']], [[['Please', 'move', 'back', 'stream']]]]"}
{"task_id": "Mbpp/8", "requirement": "from typing import List\n\n\ndef square_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "canonical_solution": "def square_nums(nums):\n return [i**2 for i in nums]", "entry_point": "square_nums", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]]]]"}
{"task_id": "Mbpp/9", "requirement": "def find_Rotations(s: str) -> int:\n\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"", "canonical_solution": "def find_Rotations(s): \n    n = len(s)\n    s += s\n    for i in range(1, n + 1):\n        if s[i: i + n] == s[0: n]:\n            return i\n    return n", "entry_point": "find_Rotations", "input_output_examples": "[[['aaaa']], [[1]]]"}
{"task_id": "Mbpp/11", "requirement": "def remove_Occ(s: str, ch: str) -> str:\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"", "canonical_solution": "def remove_Occ(s,ch): \n    s = s.replace(ch, '', 1)\n    s = s[::-1].replace(ch, '', 1)[::-1]\n    return s", "entry_point": "remove_Occ", "input_output_examples": "[[['hello', 'l']], [['heo']]]"}
{"task_id": "Mbpp/12", "requirement": "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"", "canonical_solution": "def sort_matrix(M):\n    result = sorted(M, key=sum)\n    return result", "entry_point": "sort_matrix", "input_output_examples": "[[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]]], [[[[1, 1, 1], [1, 2, 3], [2, 4, 5]]]]]"}
{"task_id": "Mbpp/14", "requirement": "def find_Volume(l: float, b: float, h: float) -> float:\n\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"", "canonical_solution": "def find_Volume(l,b,h) : \n    return ((l * b * h) / 2)", "entry_point": "find_Volume", "input_output_examples": "[[[10, 8, 6]], [[240]]]"}
{"task_id": "Mbpp/16", "requirement": "def text_lowercase_underscore(text: str) -> bool:\n\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"", "canonical_solution": "import re\ndef text_lowercase_underscore(text):\n        return bool(re.match('^[a-z]+(_[a-z]+)*$', text))", "entry_point": "text_lowercase_underscore", "input_output_examples": "[[['aab_cbbbc']], [[True]]]"}
{"task_id": "Mbpp/17", "requirement": "def square_perimeter(a: int) -> int:\n\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"", "canonical_solution": "def square_perimeter(a):\n  return 4*a", "entry_point": "square_perimeter", "input_output_examples": "[[[10]], [[40]]]"}
{"task_id": "Mbpp/18", "requirement": "def remove_dirty_chars(string: str, second_string: str) -> str:\n\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"", "canonical_solution": "def remove_dirty_chars(string, second_string): \n\tfor char in second_string:\n\t\tstring = string.replace(char, '')\n\treturn string", "entry_point": "remove_dirty_chars", "input_output_examples": "[[['probasscurve', 'pros']], [['bacuve']]]"}
{"task_id": "Mbpp/19", "requirement": "from typing import List\n\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"", "canonical_solution": "def test_duplicate(arraynums):\n    return len(arraynums) != len(set(arraynums))", "entry_point": "test_duplicate", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[False]]]"}
{"task_id": "Mbpp/20", "requirement": "def is_woodall(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given number is woodall or not.\nassert is_woodall(383) == True\n\"\"\"", "canonical_solution": "def is_woodall(x): \n\tif not isinstance(x, int):\n\t\treturn False\n\tif x <= 0 or x % 2 == 0:\n\t\treturn False\n\tif (x == 1): \n\t\treturn True\n\tx += 1 \n\ti = 0\n\twhile (x % 2 == 0): \n\t\tx /= 2\n\t\ti += 1\n\t\tif (i == x): \n\t\t\treturn True\n\treturn False", "entry_point": "is_woodall", "input_output_examples": "[[[383]], [[True]]]"}
{"task_id": "Mbpp/56", "requirement": "def check(n: int) -> bool:\n\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"", "canonical_solution": "def check(n):    \n    return n == 2 * int(str(n)[::-1]) - 1", "entry_point": "check", "input_output_examples": "[[[70]], [[False]]]"}
{"task_id": "Mbpp/57", "requirement": "from typing import List\n\n\ndef find_Max_Num(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"", "canonical_solution": "def find_Max_Num(arr) : \n    arr.sort(reverse = True)\n    return int(\"\".join(map(str,arr)))", "entry_point": "find_Max_Num", "input_output_examples": "[[[[1, 2, 3]]], [[321]]]"}
{"task_id": "Mbpp/58", "requirement": "def opposite_Signs(x: int, y: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"", "canonical_solution": "def opposite_Signs(x,y): \n    return ((x ^ y) < 0)", "entry_point": "opposite_Signs", "input_output_examples": "[[[1, -2]], [[True]]]"}
{"task_id": "Mbpp/59", "requirement": "def is_octagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"", "canonical_solution": "def is_octagonal(n): \n\treturn 3 * n * n - 2 * n", "entry_point": "is_octagonal", "input_output_examples": "[[[5]], [[65]]]"}
{"task_id": "Mbpp/61", "requirement": "def count_Substrings(s: str) -> int:\n\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"", "canonical_solution": "from collections import defaultdict\ndef count_Substrings(s):\n    n, count, sum = len(s), 0, 0\n    mp = defaultdict(lambda : 0)\n    mp[0] += 1\n    for i in range(n):\n        sum += ord(s[i]) - ord('0')\n        count += mp[sum - i - 1]\n        mp[sum - i - 1] += 1\n    return count", "entry_point": "count_Substrings", "input_output_examples": "[[['112112']], [[6]]]"}
{"task_id": "Mbpp/62", "requirement": "from typing import List\n\n\ndef smallest_num(xs: List[int]) -> int:\n\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"", "canonical_solution": "def smallest_num(xs):\n  assert len(xs) > 0, \"invalid inputs\"\n  return min(xs)", "entry_point": "smallest_num", "input_output_examples": "[[[[10, 20, 1, 45, 99]]], [[1]]]"}
{"task_id": "Mbpp/63", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"", "canonical_solution": "def max_difference(test_list):\n  return max(abs(a - b) for a, b in test_list)", "entry_point": "max_difference", "input_output_examples": "[[[[(3, 5), (1, 7), (10, 3), (1, 2)]]], [[7]]]"}
{"task_id": "Mbpp/64", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"", "canonical_solution": "def subject_marks(subjectmarks):\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n subjectmarks.sort(key = lambda x: x[1])\n return subjectmarks", "entry_point": "subject_marks", "input_output_examples": "[[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]]], [[[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]]]]"}
{"task_id": "Mbpp/65", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"", "canonical_solution": "def recursive_list_sum(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == type([]):\n\t\t\ttotal = total + recursive_list_sum(element)\n\t\telse:\n\t\t\ttotal = total + element\n\treturn total", "entry_point": "recursive_list_sum", "input_output_examples": "[[[[1, 2, [3, 4], [5, 6]]]], [[21]]]"}
{"task_id": "Mbpp/66", "requirement": "from typing import List\n\n\ndef pos_count(l: List[int]) -> int:\n\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"", "canonical_solution": "def pos_count(l):\n  return len([x for x in l if x > 0])", "entry_point": "pos_count", "input_output_examples": "[[[[1, -2, 3, -4]]], [[2]]]"}
{"task_id": "Mbpp/67", "requirement": "def bell_number(n: int) -> int:\n\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"", "canonical_solution": "def bell_number(n):   \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1): \n        bell[i][0] = bell[i-1][i-1]  \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \n    return bell[n][0]", "entry_point": "bell_number", "input_output_examples": "[[[2]], [[2]]]"}
{"task_id": "Mbpp/68", "requirement": "from typing import List\n\n\ndef is_Monotonic(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"", "canonical_solution": "def is_Monotonic(A): \n    return all(a <= b for a, b in zip(A, A[1:])) or all(a >= b for a, b in zip(A, A[1:]))", "entry_point": "is_Monotonic", "input_output_examples": "[[[[6, 5, 4, 4]]], [[True]]]"}
{"task_id": "Mbpp/69", "requirement": "from typing import List\n\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"", "canonical_solution": "def is_sublist(l, s):\n\tif len(l) < len(s):\n\t\treturn False\n\treturn any(l[i:i+len(s)] == s for i in range(len(l)-len(s)+1))", "entry_point": "is_sublist", "input_output_examples": "[[[[2, 4, 3, 5, 7], [3, 7]]], [[False]]]"}
{"task_id": "Mbpp/70", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_equal(Input: List[Tuple]) -> bool:\n\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"", "canonical_solution": "def get_equal(Input):\n  return len(set(len(item) for item in Input)) == 1", "entry_point": "get_equal", "input_output_examples": "[[[[(11, 22, 33), (44, 55, 66)]]], [[True]]]"}
{"task_id": "Mbpp/71", "requirement": "from typing import List\n\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"", "canonical_solution": "def comb_sort(nums):\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    swapped = True\n    while gap > 1 or swapped:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = nums[i + gap], nums[i]\n                swapped = True\n    return nums", "entry_point": "comb_sort", "input_output_examples": "[[[[5, 15, 37, 25, 79]]], [[[5, 15, 25, 37, 79]]]]"}
{"task_id": "Mbpp/72", "requirement": "def dif_Square(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"", "canonical_solution": "def dif_Square(n): \n    # see https://www.quora.com/Which-numbers-can-be-expressed-as-the-difference-of-two-squares\n    return n % 4 != 2", "entry_point": "dif_Square", "input_output_examples": "[[[5]], [[True]]]"}
{"task_id": "Mbpp/74", "requirement": "from typing import List\n\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"", "canonical_solution": "def is_samepatterns(colors, patterns):    \n    if len(colors) != len(patterns):\n        return False    \n    pattern_color_dict = {pattern: set() for pattern in patterns}\n    for color, pattern in zip(colors, patterns):\n        pattern_color_dict[pattern].add(color)\n    return all(len(pattern_color_dict[pattern]) == 1 for pattern in patterns)", "entry_point": "is_samepatterns", "input_output_examples": "[[[['red', 'green', 'green'], ['a', 'b', 'b']]], [[True]]]"}
{"task_id": "Mbpp/75", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"", "canonical_solution": "def find_tuples(test_list, K):\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\n  return res", "entry_point": "find_tuples", "input_output_examples": "[[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6]], [[[(6, 24, 12)]]]]"}
{"task_id": "Mbpp/77", "requirement": "def is_Diff(n: int) -> bool:\n\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"", "canonical_solution": "def is_Diff(n): \n    return n % 11 == 0", "entry_point": "is_Diff", "input_output_examples": "[[[12345]], [[False]]]"}
{"task_id": "Mbpp/79", "requirement": "def word_len(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"", "canonical_solution": "def word_len(s): \n    return len(s) % 2 == 1", "entry_point": "word_len", "input_output_examples": "[[['Hadoop']], [[False]]]"}
{"task_id": "Mbpp/80", "requirement": "def tetrahedral_number(n: int) -> float:\n\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"", "canonical_solution": "def tetrahedral_number(n): \n\treturn (n * (n + 1) * (n + 2)) / 6", "entry_point": "tetrahedral_number", "input_output_examples": "[[[5]], [[35]]]"}
{"task_id": "Mbpp/82", "requirement": "def volume_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"", "canonical_solution": "import math\ndef volume_sphere(r):\n  return (4./3.) * math.pi * (r**3)", "entry_point": "volume_sphere", "input_output_examples": "[[[10]], [[4188.790204786391]]]"}
{"task_id": "Mbpp/84", "requirement": "def sequence(n: int) -> int:\n\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"", "canonical_solution": "def sequence(n): \n\tif n == 1 or n == 2: \n\t\treturn 1\n\tseq = [0] * (n + 1)\n\tseq[1] = seq[2] = 1\n\tfor i in range(3, n + 1):\n\t\tseq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n\treturn seq[n]", "entry_point": "sequence", "input_output_examples": "[[[10]], [[6]]]"}
{"task_id": "Mbpp/85", "requirement": "def surfacearea_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"", "canonical_solution": "import math\ndef surfacearea_sphere(r):\n  return 4 * math.pi * (r**2)", "entry_point": "surfacearea_sphere", "input_output_examples": "[[[10]], [[1256.6370614359173]]]"}
{"task_id": "Mbpp/86", "requirement": "def centered_hexagonal_number(n: int) -> int:\n\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"", "canonical_solution": "def centered_hexagonal_number(n):\n  return 3 * n * (n - 1) + 1", "entry_point": "centered_hexagonal_number", "input_output_examples": "[[[10]], [[271]]]"}
{"task_id": "Mbpp/87", "requirement": "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"", "canonical_solution": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\n    return merged_dict", "entry_point": "merge_dictionaries_three", "input_output_examples": "[[[{'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}]], [[{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}]]]"}
{"task_id": "Mbpp/88", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"", "canonical_solution": "import collections\ndef freq_count(list1):\n  freq_count= collections.Counter(list1)\n  return freq_count", "entry_point": "freq_count", "input_output_examples": "[[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]]], [[{10: 4, 20: 4, 40: 2, 50: 2, 30: 1}]]]"}
{"task_id": "Mbpp/89", "requirement": "def closest_num(N: int) -> int:\n\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"", "canonical_solution": "def closest_num(N):\n  return (N - 1)", "entry_point": "closest_num", "input_output_examples": "[[[11]], [[10]]]"}
{"task_id": "Mbpp/90", "requirement": "from typing import List\n\n\ndef len_log(list1: List[str]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"", "canonical_solution": "def len_log(list1):\n    return max(len(x) for x in list1)", "entry_point": "len_log", "input_output_examples": "[[[['python', 'PHP', 'bigdata']]], [[7]]]"}
{"task_id": "Mbpp/91", "requirement": "from typing import List\n\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"", "canonical_solution": "def find_substring(str1, sub_str):\n   return any(sub_str in s for s in str1)", "entry_point": "find_substring", "input_output_examples": "[[[['red', 'black', 'white', 'green', 'orange'], 'ack']], [[True]]]"}
{"task_id": "Mbpp/92", "requirement": "def is_undulating(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"", "canonical_solution": "def is_undulating(n): \n\tdigits = [int(digit) for digit in str(n)]\n\tif len(set(digits)) != 2:\n\t\treturn False\n\treturn all(a != b for a, b in zip(digits, digits[1:]))", "entry_point": "is_undulating", "input_output_examples": "[[[1212121]], [[True]]]"}
{"task_id": "Mbpp/93", "requirement": "def power(a: int, b: int) -> int:\n\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"", "canonical_solution": "def power(a, b):\n\treturn a ** b", "entry_point": "power", "input_output_examples": "[[[3, 4]], [[81]]]"}
{"task_id": "Mbpp/94", "requirement": "from typing import List\n\n\ndef index_minimum(test_list: List[tuple]) -> any:\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"", "canonical_solution": "from operator import itemgetter \ndef index_minimum(test_list):\n  res = min(test_list, key = itemgetter(1))[0]\n  return (res)", "entry_point": "index_minimum", "input_output_examples": "[[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]]], [['Varsha']]]"}
{"task_id": "Mbpp/95", "requirement": "from typing import List\n\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"", "canonical_solution": "def Find_Min_Length(lst):  \n    minLength = min(len(x) for x in lst )\n    return minLength", "entry_point": "Find_Min_Length", "input_output_examples": "[[[[[1], [1, 2]]]], [[1]]]"}
{"task_id": "Mbpp/96", "requirement": "def divisor(n: int) -> int:\n\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"", "canonical_solution": "def divisor(n):\n  return sum(1 for i in range(1, n + 1) if n % i == 0)", "entry_point": "divisor", "input_output_examples": "[[[15]], [[4]]]"}
{"task_id": "Mbpp/97", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"", "canonical_solution": "def frequency_lists(list1):\n    list1 = [item for sublist in list1 for item in sublist]\n    return {x: list1.count(x) for x in list1}", "entry_point": "frequency_lists", "input_output_examples": "[[[[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]]], [[{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}]]]"}
{"task_id": "Mbpp/98", "requirement": "from typing import List\n\n\ndef multiply_num(numbers: List[int]) -> float:\n\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"", "canonical_solution": "def multiply_num(numbers):  \n    from functools import reduce\n    return reduce(lambda x, y: x * y, numbers) / len(numbers)", "entry_point": "multiply_num", "input_output_examples": "[[[[8, 2, 3, -1, 7]]], [[-67.2]]]"}
{"task_id": "Mbpp/99", "requirement": "def decimal_to_binary(n: int) -> str:\n\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"", "canonical_solution": "def decimal_to_binary(n): \n    return bin(n).replace(\"0b\",\"\")", "entry_point": "decimal_to_binary", "input_output_examples": "[[[8]], [['1000']]]"}
{"task_id": "Mbpp/100", "requirement": "def next_smallest_palindrome(num: int) -> int:\n\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"", "canonical_solution": "def next_smallest_palindrome(num):\n    if all(digit == '9' for digit in str(num)):\n        return num + 2\n    else:\n        num = [int(digit) for digit in str(num)]\n        n = len(num)\n        mid = n // 2\n        left_smaller = False\n        # if n is odd, ignore the middle digit at first\n        i = mid - 1\n        j = mid + 1 if n % 2 else mid\n        while i >= 0 and num[i] == num[j]:\n            i -= 1\n            j += 1\n        # stop if traverse end or difference found\n        if i < 0 or num[i] < num[j]:\n            left_smaller = True\n        # copy left to right\n        while i >= 0:\n            num[j] = num[i]\n            j += 1\n            i -= 1\n        # the middle digit must be incremented\n        if left_smaller:\n            carry = 1\n            i = mid - 1\n            if n % 2:\n                num[mid] += carry\n                carry = num[mid] // 10\n                num[mid] %= 10\n                j = mid + 1\n            else:\n                j = mid\n            while i >= 0:\n                num[i] += carry\n                carry = num[i] // 10\n                num[i] %= 10\n                num[j] = num[i]\n                j += 1\n                i -= 1\n    return int(\"\".join(map(str, num)))", "entry_point": "next_smallest_palindrome", "input_output_examples": "[[[99]], [[101]]]"}
{"task_id": "Mbpp/101", "requirement": "from typing import List\n\n\ndef kth_element(arr: List[int], k: int) -> int:\n\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"", "canonical_solution": "def kth_element(arr, k):\n  return arr[k-1]", "entry_point": "kth_element", "input_output_examples": "[[[[12, 3, 5, 7, 19], 2]], [[3]]]"}
{"task_id": "Mbpp/102", "requirement": "def snake_to_camel(word: str) -> str:\n\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"", "canonical_solution": "def snake_to_camel(word):\n    return ''.join(x.capitalize() or '_' for x in word.split('_'))", "entry_point": "snake_to_camel", "input_output_examples": "[[['python_program']], [['PythonProgram']]]"}
{"task_id": "Mbpp/103", "requirement": "def eulerian_num(n: int, m: int) -> int:\n\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"", "canonical_solution": "def eulerian_num(n, m): \n\tif (m >= n or n == 0): \n\t\treturn 0 \n\tif (m == 0): \n\t\treturn 1 \n\treturn (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "entry_point": "eulerian_num", "input_output_examples": "[[[3, 1]], [[4]]]"}
{"task_id": "Mbpp/104", "requirement": "from typing import List\n\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "canonical_solution": "def sort_sublists(input_list):\n    return [sorted(x) for x in input_list]", "entry_point": "sort_sublists", "input_output_examples": "[[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]], [[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]]]]"}
{"task_id": "Mbpp/105", "requirement": "from typing import List\n\n\ndef count(lst: List[bool]) -> int:\n\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"", "canonical_solution": "def count(lst):   \n    return sum(lst)", "entry_point": "count", "input_output_examples": "[[[[True, False, True]]], [[2]]]"}
{"task_id": "Mbpp/106", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"", "canonical_solution": "def add_lists(test_list, test_tup):\n  return test_tup + tuple(test_list)", "entry_point": "add_lists", "input_output_examples": "[[[[5, 6, 7], (9, 10)]], [[(9, 10, 5, 6, 7)]]]"}
{"task_id": "Mbpp/108", "requirement": "from typing import List\n\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"", "canonical_solution": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n  return sorted(num1 + num2 + num3)", "entry_point": "merge_sorted_list", "input_output_examples": "[[[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]]], [[[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]]]]"}
{"task_id": "Mbpp/109", "requirement": "def odd_Equivalent(s: str, n: int) -> int:\n\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"", "canonical_solution": "def odd_Equivalent(s,n): \n    count=0\n    for i in range(0,n): \n        if (s[i] == '1'): \n            count = count + 1\n    return count", "entry_point": "odd_Equivalent", "input_output_examples": "[[['011001', 6]], [[3]]]"}
{"task_id": "Mbpp/111", "requirement": "from typing import List\n\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"", "canonical_solution": "def common_in_nested_lists(nestedlist):\n    return list(set.intersection(*map(set, nestedlist)))", "entry_point": "common_in_nested_lists", "input_output_examples": "[[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]]], [[[18, 12]]]]"}
{"task_id": "Mbpp/113", "requirement": "def check_integer(text: str) -> Optional[bool]:\n\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"", "canonical_solution": "def check_integer(text):\n text = text.strip()\n if len(text) < 1:\n    return None\n else:\n    if text[0] in '+-':\n        text = text[1:]\n    return text.isdigit()", "entry_point": "check_integer", "input_output_examples": "[[['python']], [[False]]]"}
{"task_id": "Mbpp/116", "requirement": "from typing import Tuple\n\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"", "canonical_solution": "def tuple_to_int(nums):\n    return int(''.join(map(str,nums)))", "entry_point": "tuple_to_int", "input_output_examples": "[[[(1, 2, 3)]], [[123]]]"}
{"task_id": "Mbpp/118", "requirement": "from typing import List\n\n\ndef string_to_list(string: str) -> List[str]:\n\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"", "canonical_solution": "def string_to_list(string): \n    return string.split(\" \")", "entry_point": "string_to_list", "input_output_examples": "[[['python programming']], [[['python', 'programming']]]]"}
{"task_id": "Mbpp/119", "requirement": "from typing import List\n\n\ndef search(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"", "canonical_solution": "def search(arr):\n    n = len(arr)\n    XOR = 0\n    for i in range(n) :\n        XOR = XOR ^ arr[i]\n    return (XOR)", "entry_point": "search", "input_output_examples": "[[[[1, 1, 2, 2, 3]]], [[3]]]"}
{"task_id": "Mbpp/120", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"", "canonical_solution": "def max_product_tuple(list1):\n    return max(abs(x * y) for x, y in list1)", "entry_point": "max_product_tuple", "input_output_examples": "[[[[(2, 7), (2, 6), (1, 8), (4, 9)]]], [[36]]]"}
{"task_id": "Mbpp/123", "requirement": "def amicable_numbers_sum(limit: int) -> int:\n\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n\nassert amicable_numbers_sum(999)==504\n\"\"\"", "canonical_solution": "def div_sum(num):\n    res = 1\n    i = 2\n    while i * i <= num:\n        if num % i == 0:\n            res += i\n            if i * i != num:\n                res += num / i\n        i += 1\n    return res\ndef amicable_numbers_sum(limit):\n    amicables = set()\n    for num in range(2, limit + 1):\n        if num in amicables:\n            continue\n        sum_fact = div_sum(num)\n        sum_fact2 = div_sum(sum_fact)\n        if num == sum_fact2 and num != sum_fact:\n            amicables.add(num)\n            amicables.add(sum_fact2)\n    return sum(amicables)", "entry_point": "amicable_numbers_sum", "input_output_examples": "[[[999]], [[504]]]"}
{"task_id": "Mbpp/124", "requirement": "def angle_complex(a: complex, b: complex) -> float:\n\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"", "canonical_solution": "import cmath\ndef angle_complex(a,b):\n  angle=cmath.phase(a+b)\n  return angle", "entry_point": "angle_complex", "input_output_examples": "[[[0, 1j]], [[1.5707963267948966]]]"}
{"task_id": "Mbpp/125", "requirement": "def find_length(string: str) -> int:\n\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"", "canonical_solution": "def find_length(string): \n\tcurrent_sum = 0\n\tmax_sum = 0\n\tfor c in string: \n\t\tcurrent_sum += 1 if c == '0' else -1\n\t\tif current_sum < 0: \n\t\t\tcurrent_sum = 0\n\t\tmax_sum = max(current_sum, max_sum) \n\treturn max_sum", "entry_point": "find_length", "input_output_examples": "[[['11000010001']], [[6]]]"}
{"task_id": "Mbpp/126", "requirement": "def sum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"", "canonical_solution": "import math\ndef sum(a,b): \n    sum = 0\n    n = math.gcd(a, b)\n    N = int(math.sqrt(n)) + 1\n    for i in range (1, N): \n        if (n % i == 0): \n            sum += i\n            if (n / i != i): \n                sum += (n / i)\n    return sum", "entry_point": "sum", "input_output_examples": "[[[10, 15]], [[6]]]"}
{"task_id": "Mbpp/127", "requirement": "def multiply_int(x: int, y: int) -> int:\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"", "canonical_solution": "def multiply_int(x, y):\n    return x * y", "entry_point": "multiply_int", "input_output_examples": "[[[10, 20]], [[200]]]"}
{"task_id": "Mbpp/128", "requirement": "from typing import List\n\n\ndef long_words(n: int, s: str) -> List[str]:\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"", "canonical_solution": "def long_words(n, s):\n    return list(filter(lambda x: len(x) > n, s.split(' ')))", "entry_point": "long_words", "input_output_examples": "[[[3, 'python is a programming language']], [[['python', 'programming', 'language']]]]"}
{"task_id": "Mbpp/129", "requirement": "from typing import List\n\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"", "canonical_solution": "def magic_square_test(my_matrix):\n    s = sum(my_matrix[0])\n    # row\n    if any(sum(row) != s for row in my_matrix):\n        return False\n    # column\n    if any(sum(row[i] for row in my_matrix) != s for i in range(len(my_matrix[0]))):\n        return False\n    # diagonal\n    if sum(my_matrix[i][i] for i in range(len(my_matrix))) != s:\n        return False\n    # anti-diagonal\n    if sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix))) != s:\n        return False\n    return True", "entry_point": "magic_square_test", "input_output_examples": "[[[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]]], [[True]]]"}
{"task_id": "Mbpp/130", "requirement": "from typing import List\n\n\ndef max_occurrences(nums: List[int]) -> int:\n\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"", "canonical_solution": "from collections import defaultdict\ndef max_occurrences(nums):\n    d = defaultdict(int)\n    for n in nums:\n        d[n] += 1\n    return max(d, key=d.get)", "entry_point": "max_occurrences", "input_output_examples": "[[[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]]], [[2]]]"}
{"task_id": "Mbpp/131", "requirement": "def reverse_vowels(str1: str) -> str:\n\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"", "canonical_solution": "def reverse_vowels(str1):\n\tis_vowel = lambda x: x in 'aeiouAEIOU'\n\tpos = [i for i, c in enumerate(str1) if is_vowel(c)]\n\treturn ''.join(c if not is_vowel(c) else str1[pos.pop()] for c in str1)", "entry_point": "reverse_vowels", "input_output_examples": "[[['Python']], [['Python']]]"}
{"task_id": "Mbpp/132", "requirement": "from typing import Tuple\n\n\ndef tup_string(tup1: Tuple[str]) -> str:\n\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"", "canonical_solution": "def tup_string(tup1):\n  return ''.join(tup1)", "entry_point": "tup_string", "input_output_examples": "[[[('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')]], [['exercises']]]"}
{"task_id": "Mbpp/133", "requirement": "from typing import List\n\n\ndef sum_negativenum(nums: List[int]) -> int:\n\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"", "canonical_solution": "def sum_negativenum(nums):\n  return sum(x for x in nums if x < 0)", "entry_point": "sum_negativenum", "input_output_examples": "[[[[2, 4, -6, -9, 11, -12, 14, -5, 17]]], [[-32]]]"}
{"task_id": "Mbpp/135", "requirement": "def hexagonal_num(n: int) -> int:\n\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"", "canonical_solution": "def hexagonal_num(n): \n\treturn n * (2 * n - 1)", "entry_point": "hexagonal_num", "input_output_examples": "[[[10]], [[190]]]"}
{"task_id": "Mbpp/137", "requirement": "from typing import List\n\n\ndef zero_count(nums: List[int]) -> float:\n\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"", "canonical_solution": "def zero_count(nums):\n    if all(x == 0 for x in nums):\n        return float('inf')\n    return sum(x == 0 for x in nums) / sum(x != 0 for x in nums)", "entry_point": "zero_count", "input_output_examples": "[[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]], [[0.181818]]]"}
{"task_id": "Mbpp/138", "requirement": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"", "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \n    return n > 0 and n % 2 == 0", "entry_point": "is_Sum_Of_Powers_Of_Two", "input_output_examples": "[[[10]], [[True]]]"}
{"task_id": "Mbpp/139", "requirement": "def circle_circumference(r: float) -> float:\n\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"", "canonical_solution": "import math\ndef circle_circumference(r):\n  return 2 * math.pi * r", "entry_point": "circle_circumference", "input_output_examples": "[[[10]], [[62.830000000000005]]]"}
{"task_id": "Mbpp/140", "requirement": "from typing import List\nfrom typing import Set\n\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"", "canonical_solution": "def extract_singly(test_list):\n  return set([item for sublist in test_list for item in sublist])", "entry_point": "extract_singly", "input_output_examples": "[[[[(3, 4, 5), (4, 5, 7), (1, 4)]]], [[{1, 3, 4, 5, 7}]]]"}
{"task_id": "Mbpp/141", "requirement": "from typing import List\n\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"", "canonical_solution": "def pancake_sort(nums):\n    arr_len = len(nums)\n    while arr_len > 1:\n        mi = nums.index(max(nums[0:arr_len]))\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\n        arr_len -= 1\n    return nums", "entry_point": "pancake_sort", "input_output_examples": "[[[[15, 79, 25, 38, 69]]], [[[15, 25, 38, 69, 79]]]]"}
{"task_id": "Mbpp/142", "requirement": "from typing import List\n\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"", "canonical_solution": "def count_samepair(list1,list2,list3):\n    return sum(m == n == o for m, n, o in zip(list1,list2,list3))", "entry_point": "count_samepair", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]]], [[3]]]"}
{"task_id": "Mbpp/145", "requirement": "from typing import List\n\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"", "canonical_solution": "def max_Abs_Diff(arr): \n    return max(arr) - min(arr)", "entry_point": "max_Abs_Diff", "input_output_examples": "[[[[2, 1, 5, 3]]], [[4]]]"}
{"task_id": "Mbpp/160", "requirement": "from typing import Tuple\nfrom typing import Union\n\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"", "canonical_solution": "def find_solution(a, b, n):\n\ti = 0\n\twhile i * a <= n:\n\t\tif (n - (i * a)) % b == 0: \n\t\t\treturn (i, (n - (i * a)) // b)\n\t\ti = i + 1\n\treturn None", "entry_point": "find_solution", "input_output_examples": "[[[2, 3, 7]], [[(2, 1)]]]"}
{"task_id": "Mbpp/161", "requirement": "from typing import List\n\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"", "canonical_solution": "def remove_elements(list1, list2):\n    return [x for x in list1 if x not in list2]", "entry_point": "remove_elements", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]]], [[[1, 3, 5, 7, 9, 10]]]]"}
{"task_id": "Mbpp/162", "requirement": "def sum_series(n: int) -> int:\n\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n\nassert sum_series(6) == 12\n\"\"\"", "canonical_solution": "def sum_series(n):\n  if n <= 0:\n    return 0\n  return sum(n - 2 * i for i in range(n // 2 + 1))", "entry_point": "sum_series", "input_output_examples": "[[[6]], [[12]]]"}
{"task_id": "Mbpp/165", "requirement": "def count_char_position(str1: str) -> int:\n\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"", "canonical_solution": "def count_char_position(str1): \n    return sum(ord(ch.lower()) - ord('a') == i for i, ch in enumerate(str1))", "entry_point": "count_char_position", "input_output_examples": "[[['xbcefg']], [[2]]]"}
{"task_id": "Mbpp/166", "requirement": "from typing import List\n\n\ndef find_even_pair(A: List[int]) -> int:\n\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"", "canonical_solution": "def find_even_pair(A): \n  if len(A) < 2: \n    return 0\n  return sum((a ^ b) % 2 == 0 for i, a in enumerate(A) for b in A[i + 1:])", "entry_point": "find_even_pair", "input_output_examples": "[[[[5, 4, 7, 2, 1]]], [[4]]]"}
{"task_id": "Mbpp/167", "requirement": "def next_power_of_2(n: int) -> int:\n\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"", "canonical_solution": "def next_power_of_2(n): \n  if n and not n & (n - 1):\n    return n\n  res = 1\n  while n != 0: \n    n >>= 1\n    res <<= 1\n  return res;", "entry_point": "next_power_of_2", "input_output_examples": "[[[0]], [[1]]]"}
{"task_id": "Mbpp/168", "requirement": "from typing import List\n\n\ndef frequency(a: List[int], x: int) -> int:\n\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"", "canonical_solution": "def frequency(a,x): \n    return a.count(x)", "entry_point": "frequency", "input_output_examples": "[[[[1, 2, 3], 4]], [[0]]]"}
{"task_id": "Mbpp/170", "requirement": "from typing import List\n\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"", "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    return sum(list1[m : n + 1])", "entry_point": "sum_range_list", "input_output_examples": "[[[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10]], [[29]]]"}
{"task_id": "Mbpp/171", "requirement": "def perimeter_pentagon(a: int) -> int:\n\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n\nassert perimeter_pentagon(5) == 25\n\"\"\"", "canonical_solution": "def perimeter_pentagon(a):\n  return 5 * a", "entry_point": "perimeter_pentagon", "input_output_examples": "[[[5]], [[25]]]"}
{"task_id": "Mbpp/172", "requirement": "def count_occurance(s: str) -> int:\n\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"", "canonical_solution": "def count_occurance(s):\n  return s.count('std')", "entry_point": "count_occurance", "input_output_examples": "[[['letstdlenstdporstd']], [[3]]]"}
{"task_id": "Mbpp/222", "requirement": "from typing import Tuple\n\n\ndef check_type(test_tuple: Tuple) -> bool:\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"", "canonical_solution": "def check_type(test_tuple):\n    return all(isinstance(item, type(test_tuple[0])) for item in test_tuple)", "entry_point": "check_type", "input_output_examples": "[[[(5, 6, 7, 3, 5, 6)]], [[True]]]"}
{"task_id": "Mbpp/223", "requirement": "from typing import List\n\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"", "canonical_solution": "from bisect import bisect_left, bisect_right\ndef is_majority(arr, n, x):\n\tif x not in arr:\n\t\treturn False\n\tl = bisect_left(arr, x)\n\tr = bisect_right(arr, x)\n\treturn r - l > n / 2", "entry_point": "is_majority", "input_output_examples": "[[[[1, 2, 3, 3, 3, 3, 10], 7, 3]], [[True]]]"}
{"task_id": "Mbpp/224", "requirement": "from typing import Set\n\n\ndef count_Set_Bits(n: int) -> int:\n\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"", "canonical_solution": "def count_Set_Bits(n): \n    return bin(n)[2:].count('1')", "entry_point": "count_Set_Bits", "input_output_examples": "[[[2]], [[1]]]"}
{"task_id": "Mbpp/226", "requirement": "def odd_values_string(str1: str) -> str:\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"", "canonical_solution": "def odd_values_string(str1):\n    return ''.join(str1[i] for i in range(0, len(str1), 2))", "entry_point": "odd_values_string", "input_output_examples": "[[['abcdef']], [['ace']]]"}
{"task_id": "Mbpp/227", "requirement": "def min_of_three(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"", "canonical_solution": "def min_of_three(a,b,c): \n  return min(a, b, c)", "entry_point": "min_of_three", "input_output_examples": "[[[10, 20, 0]], [[0]]]"}
{"task_id": "Mbpp/230", "requirement": "def replace_blank(str1: str, char: str) -> str:\n\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"", "canonical_solution": "def replace_blank(str1, char):\n    return str1.replace(' ', char)", "entry_point": "replace_blank", "input_output_examples": "[[['hello people', '@']], [['hello@people']]]"}
{"task_id": "Mbpp/232", "requirement": "from typing import List\n\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"", "canonical_solution": "import heapq\ndef larg_nnum(list1, n):\n    return heapq.nlargest(n,list1)", "entry_point": "larg_nnum", "input_output_examples": "[[[[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2]], [[[100, 90]]]]"}
{"task_id": "Mbpp/233", "requirement": "def lateralsuface_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"", "canonical_solution": "import math\ndef lateralsuface_cylinder(r, h):\n  return 2 * math.pi * r * h", "entry_point": "lateralsuface_cylinder", "input_output_examples": "[[[10, 5]], [[314.15000000000003]]]"}
{"task_id": "Mbpp/234", "requirement": "def volume_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"", "canonical_solution": "def volume_cube(l):\n  return l ** 3", "entry_point": "volume_cube", "input_output_examples": "[[[3]], [[27]]]"}
{"task_id": "Mbpp/235", "requirement": "def even_bit_set_number(n: int) -> int:\n\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"", "canonical_solution": "def even_bit_set_number(n): \n    mask = 2\n    while mask < n:\n        n |= mask\n        mask <<= 2\n    return n", "entry_point": "even_bit_set_number", "input_output_examples": "[[[10]], [[10]]]"}
{"task_id": "Mbpp/237", "requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"", "canonical_solution": "from collections import Counter \ndef check_occurences(test_list):\n  return dict(Counter(tuple(sorted(t)) for t in test_list))", "entry_point": "check_occurences", "input_output_examples": "[[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]]], [[{(1, 3): 2, (2, 5): 2, (3, 6): 1}]]]"}
{"task_id": "Mbpp/238", "requirement": "def number_of_substrings(str1: str) -> int:\n\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"", "canonical_solution": "def number_of_substrings(str1): \n\tstr_len = len(str1) \n\treturn str_len * (str_len + 1) // 2", "entry_point": "number_of_substrings", "input_output_examples": "[[['abc']], [[6]]]"}
{"task_id": "Mbpp/239", "requirement": "def get_total_number_of_sequences(m: int, n: int) -> int:\n\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"", "canonical_solution": "def get_total_number_of_sequences(m, n):\n\tT=[[0 for _ in range(n + 1)] for _ in range(m + 1)] \n\tfor i in range(m + 1): \n\t\tfor j in range(n + 1): \n\t\t\tif i==0 or j==0: \n\t\t\t\tT[i][j] = 0\n\t\t\telif i<j: \n\t\t\t\tT[i][j] = 0\n\t\t\telif j==1: \n\t\t\t\tT[i][j] = i \n\t\t\telse: \n\t\t\t\tT[i][j] = T[i-1][j] + T[i//2][j-1] \n\treturn T[m][n]", "entry_point": "get_total_number_of_sequences", "input_output_examples": "[[[10, 4]], [[4]]]"}
{"task_id": "Mbpp/240", "requirement": "from typing import List\n\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"", "canonical_solution": "def replace_list(list1, list2):\n    return list1[:-1] + list2", "entry_point": "replace_list", "input_output_examples": "[[[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], [[[1, 3, 5, 7, 9, 2, 4, 6, 8]]]]"}
{"task_id": "Mbpp/242", "requirement": "def count_charac(str1: str) -> int:\n\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"", "canonical_solution": "def count_charac(str1):\n    return len(str1)", "entry_point": "count_charac", "input_output_examples": "[[['python programming']], [[18]]]"}
{"task_id": "Mbpp/244", "requirement": "def next_Perfect_Square(N: int) -> int:\n\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"", "canonical_solution": "import math  \ndef next_Perfect_Square(N): \n    if N < 0:\n        return 0\n    nextN = math.floor(math.sqrt(N)) + 1\n    return nextN * nextN", "entry_point": "next_Perfect_Square", "input_output_examples": "[[[35]], [[36]]]"}
{"task_id": "Mbpp/245", "requirement": "from typing import List\n\n\ndef max_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"", "canonical_solution": "def max_sum(arr): \n\tMSIBS = arr[:] \n\tfor i in range(len(arr)): \n\t\tfor j in range(0, i): \n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \n\tMSDBS = arr[:] \n\tfor i in range(1, len(arr) + 1): \n\t\tfor j in range(1, i): \n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \n\tmax_sum = float(\"-Inf\") \n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \n\t\tmax_sum = max(max_sum, i + j - k) \n\treturn max_sum", "entry_point": "max_sum", "input_output_examples": "[[[[1, 15, 51, 45, 33, 100, 12, 18, 9]]], [[194]]]"}
{"task_id": "Mbpp/247", "requirement": "def lps(str1: str) -> int:\n\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"", "canonical_solution": "def lps(str1): \n\tn = len(str1)\n\tdp = [[0] * n for _ in range(n)]\n\tfor i in range(n - 1, -1, -1):\n\t\tdp[i][i] = 1\n\t\tfor j in range(i + 1, n):\n\t\t\tif str1[i] == str1[j]:\n\t\t\t\tdp[i][j] = dp[i + 1][j - 1] + 2\n\t\t\telse:\n\t\t\t\tdp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\treturn dp[0][n - 1]", "entry_point": "lps", "input_output_examples": "[[['TENS FOR TENS']], [[5]]]"}
{"task_id": "Mbpp/250", "requirement": "def count_X(tup: tuple, x: any) -> int:\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"", "canonical_solution": "def count_X(tup, x): \n    return tup.count(x)", "entry_point": "count_X", "input_output_examples": "[[[(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4]], [[0]]]"}
{"task_id": "Mbpp/251", "requirement": "from typing import List\n\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"", "canonical_solution": "def insert_element(list1, element):\n    list1 = [v for elt in list1 for v in (element, elt)]\n    return list1", "entry_point": "insert_element", "input_output_examples": "[[[['Red', 'Green', 'Black'], 'c']], [[['c', 'Red', 'c', 'Green', 'c', 'Black']]]]"}
{"task_id": "Mbpp/252", "requirement": "def convert(numbers: complex) -> tuple:\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"", "canonical_solution": "import cmath  \ndef convert(numbers):    \n  return cmath.polar(numbers)", "entry_point": "convert", "input_output_examples": "[[[1]], [[(1.0, 0.0)]]]"}
{"task_id": "Mbpp/253", "requirement": "from typing import List\n\n\ndef count_integer(lst: List[Any]) -> int:\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"", "canonical_solution": "def count_integer(list1):\n    return sum(isinstance(x, int) for x in list1)", "entry_point": "count_integer", "input_output_examples": "[[[[1, 2, 'abc', 1.2]]], [[2]]]"}
{"task_id": "Mbpp/255", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"", "canonical_solution": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    return list(combinations_with_replacement(l, n))", "entry_point": "combinations_colors", "input_output_examples": "[[[['Red', 'Green', 'Blue'], 1]], [[[('Red',), ('Green',), ('Blue',)]]]]"}
{"task_id": "Mbpp/256", "requirement": "def count_Primes_nums(n: int) -> int:\n\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"", "canonical_solution": "def count_Primes_nums(n):\n    return sum(all(i % j != 0 for j in range(2, i)) for i in range(2, n))", "entry_point": "count_Primes_nums", "input_output_examples": "[[[5]], [[2]]]"}
{"task_id": "Mbpp/257", "requirement": "def swap_numbers(a: int, b: int) -> tuple:\n\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"", "canonical_solution": "def swap_numbers(a,b):\n    return (b, a)", "entry_point": "swap_numbers", "input_output_examples": "[[[10, 20]], [[(20, 10)]]]"}
{"task_id": "Mbpp/259", "requirement": "from typing import Tuple\n\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"", "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\n  return tuple((max(a, c), max(b, d)) for (a, b), (c, d) in zip(test_tup1, test_tup2))", "entry_point": "maximize_elements", "input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))]], [[((6, 7), (4, 9), (2, 9), (7, 10))]]]"}
{"task_id": "Mbpp/260", "requirement": "def newman_prime(n: int) -> int:\n\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\nassert newman_prime(3) == 7\n\"\"\"", "canonical_solution": "def newman_prime(n): \n\tif n == 0 or n == 1: \n\t\treturn 1\n\ta = 1\n\tb = 1\n\tc = 1\n\tfor _ in range(2, n + 1):\n\t\tc = 2 * b + a\n\t\ta = b\n\t\tb = c\n\treturn c", "entry_point": "newman_prime", "input_output_examples": "[[[3]], [[7]]]"}
{"task_id": "Mbpp/261", "requirement": "from typing import Tuple\n\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"", "canonical_solution": "def division_elements(test_tup1, test_tup2):\n  return tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))", "entry_point": "division_elements", "input_output_examples": "[[[(10, 4, 6, 9), (5, 2, 3, 3)]], [[(2, 2, 2, 3)]]]"}
{"task_id": "Mbpp/262", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"", "canonical_solution": "def split_two_parts(list1, L):\n    return list1[:L], list1[L:]", "entry_point": "split_two_parts", "input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3]], [[([1, 1, 2], [3, 4, 4, 5, 1])]]]"}
{"task_id": "Mbpp/264", "requirement": "def dog_age(h_age: float) -> float:\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"", "canonical_solution": "def dog_age(h_age):\n\tif h_age <= 2:\n\t\td_age = h_age * 10.5\n\telse:\n\t\td_age = 21 + (h_age - 2) * 4\n\treturn d_age", "entry_point": "dog_age", "input_output_examples": "[[[12]], [[61]]]"}
{"task_id": "Mbpp/265", "requirement": "from typing import List\n\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"", "canonical_solution": "def list_split(S, step):\n    return [S[i::step] for i in range(step)]", "entry_point": "list_split", "input_output_examples": "[[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3]], [[[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]]]]"}
{"task_id": "Mbpp/266", "requirement": "def lateralsurface_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"", "canonical_solution": "def lateralsurface_cube(l):\n  return 4 * l * l", "entry_point": "lateralsurface_cube", "input_output_examples": "[[[5]], [[100]]]"}
{"task_id": "Mbpp/267", "requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"", "canonical_solution": "def square_Sum(n):  \n    return n * (4 * n * n - 1) / 3", "entry_point": "square_Sum", "input_output_examples": "[[[2]], [[10]]]"}
{"task_id": "Mbpp/268", "requirement": "def find_star_num(n: int) -> int:\n\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"", "canonical_solution": "def find_star_num(n): \n\treturn 6 * n * (n - 1) + 1", "entry_point": "find_star_num", "input_output_examples": "[[[3]], [[37]]]"}
{"task_id": "Mbpp/269", "requirement": "def ascii_value(k: str) -> int:\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"", "canonical_solution": "def ascii_value(k):\n  return ord(k)", "entry_point": "ascii_value", "input_output_examples": "[[['A']], [[65]]]"}
{"task_id": "Mbpp/270", "requirement": "from typing import List\n\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"", "canonical_solution": "def sum_even_and_even_index(arr):  \n    return sum(x for x in arr[::2] if x % 2 == 0)", "entry_point": "sum_even_and_even_index", "input_output_examples": "[[[[5, 6, 12, 1, 18, 8]]], [[30]]]"}
{"task_id": "Mbpp/271", "requirement": "def even_Power_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"", "canonical_solution": "def even_Power_Sum(n): \n    return sum(x ** 5 for x in range(2, 2 * n + 1, 2))", "entry_point": "even_Power_Sum", "input_output_examples": "[[[2]], [[1056]]]"}
{"task_id": "Mbpp/272", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"", "canonical_solution": "def rear_extract(test_list):\n  return [x[-1] for x in test_list]", "entry_point": "rear_extract", "input_output_examples": "[[[[(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]]], [[[21, 20, 19]]]]"}
{"task_id": "Mbpp/273", "requirement": "from typing import Tuple\n\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"", "canonical_solution": "def substract_elements(test_tup1, test_tup2):\n  return tuple(x - y for x, y in zip(test_tup1, test_tup2))", "entry_point": "substract_elements", "input_output_examples": "[[[(10, 4, 5), (2, 5, 18)]], [[(8, -1, -13)]]]"}
{"task_id": "Mbpp/274", "requirement": "def even_binomial_Coeff_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"", "canonical_solution": "import math  \ndef even_binomial_Coeff_Sum( n): \n    return 1 << (n - 1)", "entry_point": "even_binomial_Coeff_Sum", "input_output_examples": "[[[4]], [[8]]]"}
{"task_id": "Mbpp/276", "requirement": "def volume_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"", "canonical_solution": "import math\ndef volume_cylinder(r,h):\n  return math.pi * r * r * h", "entry_point": "volume_cylinder", "input_output_examples": "[[[10, 5]], [[1570.7500000000002]]]"}
{"task_id": "Mbpp/277", "requirement": "def dict_filter(dict1: dict, n: int) -> dict:\n\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"", "canonical_solution": "def dict_filter(dict1, n):\n    return {key : value for (key, value) in dict1.items() if value >=n}", "entry_point": "dict_filter", "input_output_examples": "[[[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170]], [[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}]]]"}
{"task_id": "Mbpp/278", "requirement": "from typing import Tuple\n\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"", "canonical_solution": "def count_first_elements(test_tup):\n  for count, ele in enumerate(test_tup):\n    if isinstance(ele, tuple):\n      break\n  return count", "entry_point": "count_first_elements", "input_output_examples": "[[[(1, 5, 7, (4, 6), 10)]], [[3]]]"}
{"task_id": "Mbpp/279", "requirement": "def is_num_decagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"", "canonical_solution": "def is_num_decagonal(n): \n\treturn 4 * n * n - 3 * n", "entry_point": "is_num_decagonal", "input_output_examples": "[[[3]], [[27]]]"}
{"task_id": "Mbpp/280", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"", "canonical_solution": "def sequential_search(dlist, item):\n    return item in dlist, (dlist.index(item) if item in dlist else -1)", "entry_point": "sequential_search", "input_output_examples": "[[[[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31]], [[(True, 3)]]]"}
{"task_id": "Mbpp/281", "requirement": "from typing import List\n\n\ndef all_unique(test_list: List[int]) -> bool:\n\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"", "canonical_solution": "def all_unique(test_list):\n    return len(test_list) == len(set(test_list))", "entry_point": "all_unique", "input_output_examples": "[[[[1, 2, 3]]], [[True]]]"}
{"task_id": "Mbpp/282", "requirement": "from typing import List\n\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"", "canonical_solution": "def sub_list(nums1,nums2):\n  return [num1 - num2 for num1, num2 in zip(nums1, nums2)]", "entry_point": "sub_list", "input_output_examples": "[[[[1, 2, 3], [4, 5, 6]]], [[[-3, -3, -3]]]]"}
{"task_id": "Mbpp/283", "requirement": "def validate(n: int) -> bool:\n\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"", "canonical_solution": "def validate(n): \n    digits = [int(digit) for digit in str(n)]\n    return all(digit >= digits.count(digit) for digit in digits)", "entry_point": "validate", "input_output_examples": "[[[1234]], [[True]]]"}
{"task_id": "Mbpp/284", "requirement": "from typing import List\n\n\ndef check_element(list1: List, element: Any) -> bool:\n\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"", "canonical_solution": "def check_element(list1, element):\n  return all(v == element for v in list1)", "entry_point": "check_element", "input_output_examples": "[[[['green', 'orange', 'black', 'white'], 'blue']], [[False]]]"}
{"task_id": "Mbpp/285", "requirement": "def text_match_two_three(text: str) -> bool:\n\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"", "canonical_solution": "import re\ndef text_match_two_three(text):\n    patterns = 'ab{2,3}'\n    return re.search(patterns, text) is not None", "entry_point": "text_match_two_three", "input_output_examples": "[[['ac']], [[False]]]"}
{"task_id": "Mbpp/286", "requirement": "from typing import List\n\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"", "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \n\tmodifed = a * k\n\tpre = 0\t# dp[i-1]\n\tres = modifed[0]\n\tfor n in modifed:\n\t\tpre = max(pre + n, n)\n\t\tres = max(pre, res)\n\treturn res", "entry_point": "max_sub_array_sum_repeated", "input_output_examples": "[[[[10, 20, -30, -1], 4, 3]], [[30]]]"}
{"task_id": "Mbpp/287", "requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"", "canonical_solution": "def square_Sum(n):  \n    return 2 * n * (n + 1) * (2 * n + 1) /3", "entry_point": "square_Sum", "input_output_examples": "[[[2]], [[20]]]"}
{"task_id": "Mbpp/290", "requirement": "from typing import List\n\n\ndef max_length(list1: List[List]) -> List:\n\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"", "canonical_solution": "def max_length(list1):\n    return max([(len(x), x) for x in list1], key=lambda x: x[0])", "entry_point": "max_length", "input_output_examples": "[[[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]]], [[(3, [13, 15, 17])]]]"}
{"task_id": "Mbpp/292", "requirement": "def find(n: int, m: int) -> int:\n\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"", "canonical_solution": "def find(n,m):  \n    return n // m", "entry_point": "find", "input_output_examples": "[[[10, 3]], [[3]]]"}
{"task_id": "Mbpp/293", "requirement": "def otherside_rightangle(w: float, h: float) -> float:\n\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"", "canonical_solution": "import math\ndef otherside_rightangle(w,h):\n  return math.sqrt(w * w + h * h)", "entry_point": "otherside_rightangle", "input_output_examples": "[[[7, 8]], [[10.63014581273465]]]"}
{"task_id": "Mbpp/294", "requirement": "def max_val(listval: list) -> int:\n\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"", "canonical_solution": "def max_val(listval):\n     max_val = max(i for i in listval if isinstance(i, int)) \n     return max_val", "entry_point": "max_val", "input_output_examples": "[[[['Python', 3, 2, 4, 5, 'version']]], [[5]]]"}
{"task_id": "Mbpp/296", "requirement": "from typing import List\n\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"", "canonical_solution": "def get_Inv_Count(arr): \n    # consider use merge sort, but for simplicity, use brute force\n    inv_count = 0\n    for i in range(len(arr)): \n        for j in range(i + 1, len(arr)): \n            if (arr[i] > arr[j]): \n                inv_count += 1\n    return inv_count", "entry_point": "get_Inv_Count", "input_output_examples": "[[[[1, 20, 6, 4, 5]]], [[5]]]"}
{"task_id": "Mbpp/297", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"", "canonical_solution": "def flatten_list(list1):\n\tresult = []\n\tfor item in list1:\n\t\tif isinstance(item, list):\n\t\t\tresult.extend(flatten_list(item))\n\t\telse:\n\t\t\tresult.append(item)\n\treturn result", "entry_point": "flatten_list", "input_output_examples": "[[[[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]]], [[[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]]]"}
{"task_id": "Mbpp/299", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"", "canonical_solution": "from collections import defaultdict\ndef max_aggregate(stdata):\n    temp = defaultdict(int)\n    for name, marks in stdata:\n        temp[name] += marks\n    return max(temp.items(), key=lambda x: x[1])", "entry_point": "max_aggregate", "input_output_examples": "[[[[('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]]], [[('Juan Whelan', 212)]]]"}
{"task_id": "Mbpp/300", "requirement": "def count_binary_seq(n: int) -> int:\n\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"", "canonical_solution": "def count_binary_seq(n): \n\tnCr = 1\n\tres = 1\n\tfor r in range(1, n + 1): \n\t\tnCr = (nCr * (n + 1 - r)) / r \n\t\tres += nCr * nCr \n\treturn res", "entry_point": "count_binary_seq", "input_output_examples": "[[[1]], [[2.0]]]"}
{"task_id": "Mbpp/301", "requirement": "def dict_depth(d: dict) -> int:\n\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"", "canonical_solution": "def dict_depth_aux(d):\n    if isinstance(d, dict):\n        return 1 + (max(map(dict_depth_aux, d.values())) if d else 0)\n    return 0\ndef dict_depth(d):\n    return dict_depth_aux(d)", "entry_point": "dict_depth", "input_output_examples": "[[[{'a': 1, 'b': {'c': {'d': {}}}}]], [[4]]]"}
{"task_id": "Mbpp/305", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"", "canonical_solution": "import re\ndef start_withp(words):\n    for w in words:\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\n        if m:\n            return m.groups()", "entry_point": "start_withp", "input_output_examples": "[[[['Python PHP', 'Java JavaScript', 'c c++']]], [[('Python', 'PHP')]]]"}
{"task_id": "Mbpp/306", "requirement": "from typing import List\n\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"", "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\n\tdp = [[0 for _ in range(n)] for _ in range(n)]\n\tfor i in range(n):\n\t\tif a[i] > a[0]:\n\t\t\tdp[0][i] = a[i] + a[0]\n\t\telse:\n\t\t\tdp[0][i] = a[i]\n\tfor i in range(1, n):\n\t\tfor j in range(n):\n\t\t\tif a[j] > a[i] and j > i:\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\n\t\t\t\telse:\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\n\t\t\telse:\n\t\t\t\tdp[i][j] = dp[i - 1][j]\n\treturn dp[index][k]", "entry_point": "max_sum_increasing_subseq", "input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], [[11]]]"}
{"task_id": "Mbpp/308", "requirement": "from typing import List\n\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"", "canonical_solution": "def large_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return result", "entry_point": "large_product", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], [[[60, 54, 50]]]]"}
{"task_id": "Mbpp/309", "requirement": "def maximum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"", "canonical_solution": "def maximum(a,b):   \n    return max(a, b)", "entry_point": "maximum", "input_output_examples": "[[[5, 10]], [[10]]]"}
{"task_id": "Mbpp/310", "requirement": "def string_to_tuple(str1: str) -> tuple:\n\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"", "canonical_solution": "def string_to_tuple(str1):\n    result = tuple(x for x in str1 if not x.isspace()) \n    return result", "entry_point": "string_to_tuple", "input_output_examples": "[[['python 3.0']], [[('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')]]]"}
{"task_id": "Mbpp/311", "requirement": "def set_left_most_unset_bit(n: int) -> int:\n\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"", "canonical_solution": "def set_left_most_unset_bit(n): \n    if not (n & (n + 1)): \n        return n \n    pos, temp, count = 0, n, 0 \n    while temp: \n        if not (temp & 1): \n            pos = count      \n        count += 1\n        temp >>= 1\n    return (n | (1 << (pos)))", "entry_point": "set_left_most_unset_bit", "input_output_examples": "[[[10]], [[14]]]"}
{"task_id": "Mbpp/312", "requirement": "def volume_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"", "canonical_solution": "import math\ndef volume_cone(r,h):\n  return (1.0 / 3) * math.pi * r * r * h", "entry_point": "volume_cone", "input_output_examples": "[[[5, 12]], [[314.15926535897927]]]"}
{"task_id": "Mbpp/388", "requirement": "def highest_Power_of_2(n: int) -> int:\n\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"", "canonical_solution": "def highest_Power_of_2(n): \n    i = 0\n    while ((1 << i) <= n): \n        i += 1\n    return (1 << (i - 1))", "entry_point": "highest_Power_of_2", "input_output_examples": "[[[10]], [[8]]]"}
{"task_id": "Mbpp/389", "requirement": "def find_lucas(n: int) -> int:\n\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"", "canonical_solution": "def find_lucas(n): \n\tif (n == 0): \n\t\treturn 2\n\tif (n == 1): \n\t\treturn 1\n\treturn find_lucas(n - 1) + find_lucas(n - 2)", "entry_point": "find_lucas", "input_output_examples": "[[[9]], [[76]]]"}
{"task_id": "Mbpp/390", "requirement": "from typing import List\n\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"", "canonical_solution": "def add_string(list_, string):\n    return [string.format(i) for i in  list_]", "entry_point": "add_string", "input_output_examples": "[[[[1, 2, 3, 4], 'temp{0}']], [[['temp1', 'temp2', 'temp3', 'temp4']]]]"}
{"task_id": "Mbpp/391", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"", "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\n     return result", "entry_point": "convert_list_dictionary", "input_output_examples": "[[[[\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92]]], [[[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]]]]"}
{"task_id": "Mbpp/392", "requirement": "def get_max_sum(n: int) -> int:\n\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"", "canonical_solution": "def get_max_sum (n):\n\t# if n = 0, f(0) = max(5(f(0), 0)), so f(0) = 5f(0) or f(0) = 0, for both cases f(0) = 0\n\tres = [0]\n\tfor i in range(1, n + 1):\n\t\tres.append(max(res[i // 2] + res[i // 3] + res[i // 4] + res[i // 5], i))\n\treturn res[n]", "entry_point": "get_max_sum", "input_output_examples": "[[[60]], [[106]]]"}
{"task_id": "Mbpp/394", "requirement": "def check_distinct(test_tup: tuple) -> bool:\n\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"", "canonical_solution": "def check_distinct(test_tup):\n  return len(test_tup) == len(set(test_tup))", "entry_point": "check_distinct", "input_output_examples": "[[[(1, 4, 5, 6, 1, 4)]], [[False]]]"}
{"task_id": "Mbpp/395", "requirement": "def first_non_repeating_character(str1: str) -> Optional[str]:\n\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"", "canonical_solution": "def first_non_repeating_character(str1):\n  for ch in str1:\n    if str1.count(ch) == 1:\n      return ch\n  return None", "entry_point": "first_non_repeating_character", "input_output_examples": "[[['abcabc']], [[None]]]"}
{"task_id": "Mbpp/397", "requirement": "def median_numbers(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"", "canonical_solution": "def median_numbers(a,b,c):\n    return sorted([a,b,c])[1]", "entry_point": "median_numbers", "input_output_examples": "[[[25, 55, 65]], [[55.0]]]"}
{"task_id": "Mbpp/398", "requirement": "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> int:\n\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"", "canonical_solution": "def sum_of_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "entry_point": "sum_of_digits", "input_output_examples": "[[[[10, 2, 56]]], [[14]]]"}
{"task_id": "Mbpp/404", "requirement": "def minimum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"", "canonical_solution": "def minimum(a,b):   \n    return min(a,b)", "entry_point": "minimum", "input_output_examples": "[[[1, 2]], [[1]]]"}
{"task_id": "Mbpp/405", "requirement": "def check_tuplex(tuplex: tuple, element: object) -> bool:\n\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"", "canonical_solution": "def check_tuplex(tuplex, element): \n  return element in tuplex", "entry_point": "check_tuplex", "input_output_examples": "[[[('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r']], [[True]]]"}
{"task_id": "Mbpp/406", "requirement": "def find_Parity(x: int) -> bool:\n\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"", "canonical_solution": "def find_Parity(x): \n    return x % 2 != 0", "entry_point": "find_Parity", "input_output_examples": "[[[12]], [[False]]]"}
{"task_id": "Mbpp/409", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"", "canonical_solution": "def min_product_tuple(list1):\n    return min(x * y for x, y in list1)", "entry_point": "min_product_tuple", "input_output_examples": "[[[[(2, 7), (2, 6), (1, 8), (4, 9)]]], [[8]]]"}
{"task_id": "Mbpp/410", "requirement": "from typing import List\nfrom typing import Union\n\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"", "canonical_solution": "def min_val(listval):\n     min_val = min(i for i in listval if isinstance(i, int))\n     return min_val", "entry_point": "min_val", "input_output_examples": "[[[['Python', 3, 2, 4, 5, 'version']]], [[2]]]"}
{"task_id": "Mbpp/412", "requirement": "from typing import List\n\n\ndef remove_odd(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"", "canonical_solution": "def remove_odd(l):\n    return [i for i in l if i % 2 == 0]", "entry_point": "remove_odd", "input_output_examples": "[[[[1, 2, 3]]], [[[2]]]]"}
{"task_id": "Mbpp/413", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List\n\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"", "canonical_solution": "def extract_nth_element(list1, n):\n    return [x[n] for x in list1]", "entry_point": "extract_nth_element", "input_output_examples": "[[[[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0]], [[['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']]]]"}
{"task_id": "Mbpp/414", "requirement": "from typing import List\n\n\ndef overlapping(list1: List, list2: List) -> bool:\n\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"", "canonical_solution": "def overlapping(list1,list2):  \n    return any(v in list2 for v in list1)", "entry_point": "overlapping", "input_output_examples": "[[[[1, 2, 3, 4, 5], [6, 7, 8, 9]]], [[False]]]"}
{"task_id": "Mbpp/415", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"", "canonical_solution": "def max_Product(arr): \n    pairs = [(a, b) for a in arr for b in arr if a != b]\n    return max(pairs, key=lambda x: x[0] * x[1])", "entry_point": "max_Product", "input_output_examples": "[[[[1, 2, 3, 4, 7, 0, 8, 4]]], [[(7, 8)]]]"}
{"task_id": "Mbpp/418", "requirement": "from typing import List\n\n\ndef Find_Max(lst: List[str]) -> str:\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"", "canonical_solution": "def Find_Max(lst): \n    return max(lst, key = len)", "entry_point": "Find_Max", "input_output_examples": "[[[[['A'], ['A', 'B'], ['A', 'B', 'C']]]], [[['A', 'B', 'C']]]]"}
{"task_id": "Mbpp/419", "requirement": "from typing import List\n\n\ndef round_and_sum(list1: List[float]) -> float:\n\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"", "canonical_solution": "def round_and_sum(list1):\n  l = len(list1)\n  return sum([round(i) for i in list1]) * l", "entry_point": "round_and_sum", "input_output_examples": "[[[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]]], [[243]]]"}
{"task_id": "Mbpp/420", "requirement": "def cube_Sum(n: int) -> int:\n\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"", "canonical_solution": "def cube_Sum(n): \n    return 2 * (n ** 2) * ((n + 1) ** 2)", "entry_point": "cube_Sum", "input_output_examples": "[[[2]], [[72]]]"}
{"task_id": "Mbpp/421", "requirement": "def concatenate_tuple(test_tup: tuple) -> str:\n\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"", "canonical_solution": "def concatenate_tuple(test_tup):\n    delim = \"-\"\n    res = ''.join([str(ele) + delim for ele in test_tup])\n    res = res[ : len(res) - len(delim)]\n    return (str(res))", "entry_point": "concatenate_tuple", "input_output_examples": "[[[('ID', 'is', 4, 'UTS')]], [['ID-is-4-UTS']]]"}
{"task_id": "Mbpp/422", "requirement": "def find_Average_Of_Cube(n: int) -> float:\n\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"", "canonical_solution": "def find_Average_Of_Cube(n):  \n    return sum([(i ** 3) for i in range(1, n + 1)]) / n", "entry_point": "find_Average_Of_Cube", "input_output_examples": "[[[2]], [[4.5]]]"}
{"task_id": "Mbpp/424", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"", "canonical_solution": "def extract_rear(test_tuple):\n  return [ele[-1] for ele in test_tuple]", "entry_point": "extract_rear", "input_output_examples": "[[[('Mers', 'for', 'Vers')]], [[['s', 'r', 's']]]]"}
{"task_id": "Mbpp/425", "requirement": "from typing import List\n\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"", "canonical_solution": "def count_element_in_list(list1, x): \n    return sum(x in sublist for sublist in list1)", "entry_point": "count_element_in_list", "input_output_examples": "[[[[[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1]], [[3]]]"}
{"task_id": "Mbpp/426", "requirement": "from typing import List\n\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"", "canonical_solution": "def filter_oddnumbers(nums):\n    return [n for n in nums if n % 2 == 1]", "entry_point": "filter_oddnumbers", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 3, 5, 7, 9]]]]"}
{"task_id": "Mbpp/427", "requirement": "def change_date_format(dt: str) -> str:\n\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"", "canonical_solution": "import re\ndef change_date_format(dt):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "entry_point": "change_date_format", "input_output_examples": "[[['2026-01-02']], [['02-01-2026']]]"}
{"task_id": "Mbpp/428", "requirement": "from typing import List\n\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"", "canonical_solution": "def shell_sort(my_list):\n    gap = len(my_list) // 2\n    while gap > 0:\n        for i in range(gap, len(my_list)):\n            current_item = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > current_item:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = current_item\n        gap //= 2\n    return my_list", "entry_point": "shell_sort", "input_output_examples": "[[[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]]], [[[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]]]]"}
{"task_id": "Mbpp/429", "requirement": "from typing import Tuple\n\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"", "canonical_solution": "def and_tuples(test_tup1, test_tup2):\n  return tuple(x & y for x, y in zip(test_tup1, test_tup2))", "entry_point": "and_tuples", "input_output_examples": "[[[(10, 4, 6, 9), (5, 2, 3, 3)]], [[(0, 0, 2, 1)]]]"}
{"task_id": "Mbpp/430", "requirement": "def parabola_directrix(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"", "canonical_solution": "def parabola_directrix(a, b, c): \n  return ((int)(c - ((b * b) + 1) * 4 * a ))", "entry_point": "parabola_directrix", "input_output_examples": "[[[5, 3, 2]], [[-198]]]"}
{"task_id": "Mbpp/432", "requirement": "def median_trapezium(base1: float, base2: float, height: float) -> float:\n\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"", "canonical_solution": "def median_trapezium(base1,base2,height):\n    return (base1 + base2) / 2", "entry_point": "median_trapezium", "input_output_examples": "[[[15, 25, 35]], [[20]]]"}
{"task_id": "Mbpp/433", "requirement": "from typing import List\n\n\ndef check_greater(arr: List[int], number: int) -> bool:\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"", "canonical_solution": "def check_greater(arr, number):\n  return all(number > el for el in arr)", "entry_point": "check_greater", "input_output_examples": "[[[[1, 2, 3, 4, 5], 4]], [[False]]]"}
{"task_id": "Mbpp/435", "requirement": "def last_Digit(n: int) -> int:\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"", "canonical_solution": "def last_Digit(n) :\n    if n < 0: \n        n = -n\n    return n % 10", "entry_point": "last_Digit", "input_output_examples": "[[[123]], [[3]]]"}
{"task_id": "Mbpp/436", "requirement": "from typing import List\n\n\ndef neg_nos(list1: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"", "canonical_solution": "def neg_nos(list1):\n  return [i for i in list1 if i < 0]", "entry_point": "neg_nos", "input_output_examples": "[[[[-1, 4, 5, -6]]], [[[-1, -6]]]]"}
{"task_id": "Mbpp/437", "requirement": "def remove_odd(s: str) -> str:\n\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"", "canonical_solution": "def remove_odd(str1):\n    return str1[1::2]", "entry_point": "remove_odd", "input_output_examples": "[[['python']], [['yhn']]]"}
{"task_id": "Mbpp/439", "requirement": "from typing import List\n\n\ndef multiple_to_single(L: List[int]) -> int:\n\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"", "canonical_solution": "def multiple_to_single(L):\n  return int(''.join(map(str,L)))", "entry_point": "multiple_to_single", "input_output_examples": "[[[[11, 33, 50]]], [[113350]]]"}
{"task_id": "Mbpp/440", "requirement": "from typing import Tuple\n\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"", "canonical_solution": "import re\ndef find_adverb_position(text):\n    for m in re.finditer(r\"\\w+ly\", text):\n        return (m.start(), m.end(), m.group(0))", "entry_point": "find_adverb_position", "input_output_examples": "[[['clearly!! we can see the sky']], [[(0, 7, 'clearly')]]]"}
{"task_id": "Mbpp/441", "requirement": "def surfacearea_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"", "canonical_solution": "def surfacearea_cube(l):\n  return 6 * l * l", "entry_point": "surfacearea_cube", "input_output_examples": "[[[5]], [[150]]]"}
{"task_id": "Mbpp/445", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"", "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\n  return tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))", "entry_point": "index_multiplication", "input_output_examples": "[[[[(1, 3), (4, 5), (2, 9), (1, 10)], [(6, 7), (3, 9), (1, 1), (7, 3)]]], [[((6, 21), (12, 45), (2, 9), (7, 30))]]]"}
{"task_id": "Mbpp/446", "requirement": "def count_Occurrence(tup: tuple, lst: list) -> int:\n\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"", "canonical_solution": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    return sum(tup.count(ele) for ele in lst)", "entry_point": "count_Occurrence", "input_output_examples": "[[[('a', 'a', 'c', 'b', 'd'), ['a', 'b']]], [[3]]]"}
{"task_id": "Mbpp/447", "requirement": "from typing import List\n\n\ndef cube_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"", "canonical_solution": "def cube_nums(nums):\n    return [n**3 for n in nums]", "entry_point": "cube_nums", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]]]]"}
{"task_id": "Mbpp/448", "requirement": "def cal_sum(n: int) -> int:\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"", "canonical_solution": "def cal_sum(n): \n\ta = 3\n\tb = 0\n\tc = 2\n\tif (n == 0): \n\t\treturn 3\n\tif (n == 1): \n\t\treturn 3\n\tif (n == 2): \n\t\treturn 5\n\tsum = 5\n\twhile (n > 2): \n\t\td = a + b \n\t\tsum = sum + d \n\t\ta = b \n\t\tb = c \n\t\tc = d \n\t\tn = n - 1\n\treturn sum", "entry_point": "cal_sum", "input_output_examples": "[[[9]], [[49]]]"}
{"task_id": "Mbpp/450", "requirement": "from typing import List\n\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"", "canonical_solution": "def extract_string(str1, l):\n    return [e for e in str1 if len(e) == l]", "entry_point": "extract_string", "input_output_examples": "[[[['Python', 'list', 'exercises', 'practice', 'solution'], 8]], [[['practice', 'solution']]]]"}
{"task_id": "Mbpp/451", "requirement": "def remove_whitespaces(text1: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from the given string.\n\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"", "canonical_solution": "import re\ndef remove_whitespaces(text1):\n  return text1.replace(' ', '')", "entry_point": "remove_whitespaces", "input_output_examples": "[[[' Google    Flutter ']], [['GoogleFlutter']]]"}
{"task_id": "Mbpp/453", "requirement": "def sumofFactors(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"", "canonical_solution": "import math \ndef sumofFactors(n) : \n    if (n % 2 != 0) : \n        return 0\n    return sum([i for i in range(2, n + 1) if n % i == 0 and i % 2 == 0])", "entry_point": "sumofFactors", "input_output_examples": "[[[18]], [[26]]]"}
{"task_id": "Mbpp/454", "requirement": "def text_match_wordz(text: str) -> bool:\n\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"", "canonical_solution": "import re\ndef text_match_wordz(text):\n        return 'z' in text", "entry_point": "text_match_wordz", "input_output_examples": "[[['pythonz.']], [[True]]]"}
{"task_id": "Mbpp/455", "requirement": "def check_monthnumb_number(monthnum2: int) -> bool:\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"", "canonical_solution": "def check_monthnumb_number(monthnum2):\n  return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "entry_point": "check_monthnumb_number", "input_output_examples": "[[[5]], [[True]]]"}
{"task_id": "Mbpp/456", "requirement": "from typing import List\n\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"", "canonical_solution": "def reverse_string_list(stringlist):\n    return [x[::-1] for x in stringlist]", "entry_point": "reverse_string_list", "input_output_examples": "[[[['Red', 'Green', 'Blue', 'White', 'Black']]], [[['deR', 'neerG', 'eulB', 'etihW', 'kcalB']]]]"}
{"task_id": "Mbpp/457", "requirement": "from typing import List\n\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"", "canonical_solution": "def Find_Min(lst): \n    return min(lst, key=len)", "entry_point": "Find_Min", "input_output_examples": "[[[[[1], [1, 2], [1, 2, 3]]]], [[[1]]]]"}
{"task_id": "Mbpp/458", "requirement": "def rectangle_area(l: float, b: float) -> float:\n\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"", "canonical_solution": "def rectangle_area(l,b):\n  return l * b", "entry_point": "rectangle_area", "input_output_examples": "[[[10, 20]], [[200]]]"}
{"task_id": "Mbpp/459", "requirement": "def remove_uppercase(str1: str) -> str:\n\"\"\"\nWrite a function to remove uppercase substrings from a given string.\n\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"", "canonical_solution": "def remove_uppercase(str1):\n  return ''.join(c for c in str1 if c.islower())", "entry_point": "remove_uppercase", "input_output_examples": "[[['cAstyoUrFavoRitETVshoWs']], [['cstyoravoitshos']]]"}
{"task_id": "Mbpp/460", "requirement": "from typing import List\n\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"", "canonical_solution": "def Extract(lst): \n    return [item[0] for item in lst]", "entry_point": "Extract", "input_output_examples": "[[[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]]], [[[1, 3, 6]]]]"}
{"task_id": "Mbpp/462", "requirement": "from typing import List\n\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"", "canonical_solution": "def combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "entry_point": "combinations_list", "input_output_examples": "[[[['orange', 'red', 'green', 'blue']]], [[[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}
{"task_id": "Mbpp/463", "requirement": "from typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"", "canonical_solution": "def max_subarray_product(arr):\n\tmax_so_far = min_ending = max_ending = arr[0]\n\tfor n in arr[1:]:\n\t\tmin_ending, max_ending = min(n, min_ending * n, max_ending * n), max(n, min_ending * n, max_ending * n)\n\t\tmax_so_far = max(max_so_far, max_ending)\n\treturn max_so_far", "entry_point": "max_subarray_product", "input_output_examples": "[[[[1, -2, -3, 0, 7, -8, -2]]], [[112]]]"}
{"task_id": "Mbpp/465", "requirement": "def drop_empty(dict1: dict) -> dict:\n\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"", "canonical_solution": "def drop_empty(dict1):\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\n  return dict1", "entry_point": "drop_empty", "input_output_examples": "[[[{'c1': 'Red', 'c2': 'Green', 'c3': None}]], [[{'c1': 'Red', 'c2': 'Green'}]]]"}
{"task_id": "Mbpp/468", "requirement": "from typing import List\n\n\ndef max_product(arr: List[int]) -> int:\n\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"", "canonical_solution": "def max_product(arr):   \n  # record the correspond ending element to maintain the increasing subsequence\n  ret = max_ending = min_ending = (arr[0], arr[0])\n  for n in arr[1:]:\n    if n > max_ending[1]:\n      max_ending = max((max_ending[0] * n, n), max_ending, key=lambda x: x[0])\n    else:\n      max_ending = (n, n)\n    if n > min_ending[1]:\n      min_ending = min((min_ending[0] * n, n), min_ending, key=lambda x: x[0])\n    else:\n      min_ending = (n, n)\n    ret = max(ret, max_ending, min_ending, key=lambda x: x[0])\n  return ret[0]", "entry_point": "max_product", "input_output_examples": "[[[[3, 100, 4, 5, 150, 6]]], [[3000]]]"}
{"task_id": "Mbpp/470", "requirement": "from typing import Tuple\n\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"", "canonical_solution": "def add_pairwise(test_tup):\n  return tuple(a + b for a, b in zip(test_tup, test_tup[1:]))", "entry_point": "add_pairwise", "input_output_examples": "[[[(1, 5, 7, 8, 10)]], [[(6, 12, 15, 18)]]]"}
{"task_id": "Mbpp/471", "requirement": "from typing import List\n\n\ndef find_remainder(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"", "canonical_solution": "def find_remainder(arr, n): \n    from functools import reduce\n    return reduce(lambda x, y: x * y, arr) % n", "entry_point": "find_remainder", "input_output_examples": "[[[[100, 10, 5, 25, 35, 14], 11]], [[9]]]"}
{"task_id": "Mbpp/472", "requirement": "from typing import List\n\n\ndef check_Consecutive(l: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"", "canonical_solution": "def check_Consecutive(l): \n    return sorted(l) == list(range(min(l),max(l)+1))", "entry_point": "check_Consecutive", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[True]]]"}
{"task_id": "Mbpp/473", "requirement": "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"", "canonical_solution": "def tuple_intersection(test_list1, test_list2):\n  return set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])", "entry_point": "tuple_intersection", "input_output_examples": "[[[[(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]]], [[{(4, 5), (5, 6), (3, 4)}]]]"}
{"task_id": "Mbpp/474", "requirement": "def replace_char(str1: str, ch: str, newch: str) -> str:\n\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"", "canonical_solution": "def replace_char(str1, ch, newch):\n    return str1.replace(ch, newch)", "entry_point": "replace_char", "input_output_examples": "[[['polygon', 'y', 'l']], [['pollgon']]]"}
{"task_id": "Mbpp/475", "requirement": "def sort_counter(dict1: dict) -> list:\n\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"", "canonical_solution": "def sort_counter(dict1):\n return sorted(dict1.items(), key=lambda x: x[1], reverse=True)", "entry_point": "sort_counter", "input_output_examples": "[[[{'Math': 81, 'Physics': 83, 'Chemistry': 87}]], [[[('Chemistry', 87), ('Physics', 83), ('Math', 81)]]]]"}
{"task_id": "Mbpp/476", "requirement": "from typing import List\n\n\ndef big_sum(nums: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"", "canonical_solution": "def big_sum(nums):\n      return max(nums) + min(nums)", "entry_point": "big_sum", "input_output_examples": "[[[[1, 2, 3]]], [[4]]]"}
{"task_id": "Mbpp/477", "requirement": "def is_lower(string: str) -> str:\n\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"", "canonical_solution": "def is_lower(string):\n    return string.lower()", "entry_point": "is_lower", "input_output_examples": "[[['InValid']], [['invalid']]]"}
{"task_id": "Mbpp/478", "requirement": "def remove_lowercase(str1: str) -> str:\n\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"", "canonical_solution": "import re\ndef remove_lowercase(str1):\n    return re.sub('[a-z]', '', str1)", "entry_point": "remove_lowercase", "input_output_examples": "[[['PYTHon']], [['PYTH']]]"}
{"task_id": "Mbpp/479", "requirement": "def first_Digit(n: int) -> int:\n\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"", "canonical_solution": "def first_Digit(n) :  \n    return int(str(n)[0])", "entry_point": "first_Digit", "input_output_examples": "[[[123]], [[1]]]"}
{"task_id": "Mbpp/554", "requirement": "from typing import List\n\n\ndef Split(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"", "canonical_solution": "def Split(l): \n    return list(filter(lambda x: x % 2 == 1, l))", "entry_point": "Split", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6]]], [[[1, 3, 5]]]]"}
{"task_id": "Mbpp/555", "requirement": "def difference(n: int) -> int:\n\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"", "canonical_solution": "def difference(n) :  \n    S = (n*(n + 1))//2;  \n    res = S*(S-1);  \n    return res;", "entry_point": "difference", "input_output_examples": "[[[3]], [[30]]]"}
{"task_id": "Mbpp/556", "requirement": "from typing import List\n\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"", "canonical_solution": "def find_Odd_Pair(A,N) : \n    oddPair = 0\n    for i in range(0,N) :  \n        for j in range(i+1,N) :  \n            if ((A[i] ^ A[j]) % 2 != 0):  \n                oddPair+=1  \n    return oddPair", "entry_point": "find_Odd_Pair", "input_output_examples": "[[[[5, 4, 7, 2, 1], 5]], [[6]]]"}
{"task_id": "Mbpp/557", "requirement": "def toggle_string(string: str) -> str:\n\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"", "canonical_solution": "def toggle_string(string):\n return string.swapcase()", "entry_point": "toggle_string", "input_output_examples": "[[['Python']], [['pYTHON']]]"}
{"task_id": "Mbpp/558", "requirement": "def digit_distance_nums(n1: int, n2: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"", "canonical_solution": "def digit_distance_nums(n1, n2):\n    return sum([abs(int(c1) - int(c2)) for c1, c2 in zip(str(n1), str(n2))])", "entry_point": "digit_distance_nums", "input_output_examples": "[[[1, 2]], [[1]]]"}
{"task_id": "Mbpp/559", "requirement": "from typing import List\n\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"", "canonical_solution": "def max_sub_array_sum(a, size):\n  max_so_far = 0\n  max_ending_here = 0\n  for i in range(0, size):\n    max_ending_here = max_ending_here + a[i]\n    if max_ending_here < 0:\n      max_ending_here = 0\n    elif (max_so_far < max_ending_here):\n      max_so_far = max_ending_here\n  return max_so_far", "entry_point": "max_sub_array_sum", "input_output_examples": "[[[[-2, -3, 4, -1, -2, 1, 5, -3], 8]], [[7]]]"}
{"task_id": "Mbpp/560", "requirement": "from typing import Tuple\n\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"", "canonical_solution": "def union_elements(test_tup1, test_tup2):\n  return tuple(sorted(set(test_tup1 + test_tup2)))", "entry_point": "union_elements", "input_output_examples": "[[[(3, 4, 5, 6), (5, 7, 4, 10)]], [[(3, 4, 5, 6, 7, 10)]]]"}
{"task_id": "Mbpp/562", "requirement": "from typing import List\n\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"", "canonical_solution": "def Find_Max_Length(lst):  \n    return len(max(lst, key = len))", "entry_point": "Find_Max_Length", "input_output_examples": "[[[[[1], [1, 4], [5, 6, 7, 8]]]], [[4]]]"}
{"task_id": "Mbpp/563", "requirement": "from typing import List\n\n\ndef extract_values(text: str) -> List[str]:\n\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"", "canonical_solution": "import re\ndef extract_values(text):\n return (re.findall(r'\"(.*?)\"', text))", "entry_point": "extract_values", "input_output_examples": "[[['\"Python\", \"PHP\", \"Java\"']], [[['Python', 'PHP', 'Java']]]]"}
{"task_id": "Mbpp/564", "requirement": "from typing import List\n\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"", "canonical_solution": "def count_Pairs(arr,n): \n    cnt = 0; \n    for i in range(n): \n        for j in range(i + 1,n): \n            if (arr[i] != arr[j]): \n                cnt += 1; \n    return cnt;", "entry_point": "count_Pairs", "input_output_examples": "[[[[1, 2, 1], 3]], [[2]]]"}
{"task_id": "Mbpp/565", "requirement": "from typing import List\n\n\ndef split(word: str) -> List[str]:\n\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"", "canonical_solution": "def split(word): \n    return list(word)", "entry_point": "split", "input_output_examples": "[[['python']], [[['p', 'y', 't', 'h', 'o', 'n']]]]"}
{"task_id": "Mbpp/566", "requirement": "def sum_digits(n: int) -> int:\n\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"", "canonical_solution": "def sum_digits(n):\n  return sum(map(int, str(n)))", "entry_point": "sum_digits", "input_output_examples": "[[[345]], [[12]]]"}
{"task_id": "Mbpp/567", "requirement": "from typing import List\n\n\ndef issort_list(lst: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"", "canonical_solution": "def issort_list(list1):\n    return all(a <= b for a, b in zip(list1, list1[1:]))", "entry_point": "issort_list", "input_output_examples": "[[[[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]]], [[True]]]"}
{"task_id": "Mbpp/568", "requirement": "from typing import List\n\n\ndef empty_list(length: int) -> List[dict]:\n\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"", "canonical_solution": "def empty_list(length):\n return [{} for _ in range(length)]", "entry_point": "empty_list", "input_output_examples": "[[[5]], [[[{}, {}, {}, {}, {}]]]]"}
{"task_id": "Mbpp/569", "requirement": "from typing import List\n\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "canonical_solution": "def sort_sublists(list1):\n    return list(map(sorted,list1))", "entry_point": "sort_sublists", "input_output_examples": "[[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]], [[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]]]]"}
{"task_id": "Mbpp/572", "requirement": "from typing import List\n\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"", "canonical_solution": "def two_unique_nums(nums):\n  return [n for n in nums if nums.count(n)==1]", "entry_point": "two_unique_nums", "input_output_examples": "[[[[1, 2, 3, 2, 3, 4, 5]]], [[[1, 4, 5]]]]"}
{"task_id": "Mbpp/573", "requirement": "from typing import List\n\n\ndef unique_product(list_data: List[int]) -> int:\n\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"", "canonical_solution": "def unique_product(list_data):\n    from functools import reduce\n    return reduce(lambda x, y: x*y, set(list_data))", "entry_point": "unique_product", "input_output_examples": "[[[[10, 20, 30, 40, 20, 50, 60, 40]]], [[720000000]]]"}
{"task_id": "Mbpp/576", "requirement": "from typing import List\n\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"", "canonical_solution": "def is_Sub_Array(A,B): \n    a = 0\n    b = 0\n    while a < len(A) and b < len(B):\n        if A[a] == B[b]:\n            a += 1\n            b += 1\n        else:\n            a += 1\n    return b == len(B)", "entry_point": "is_Sub_Array", "input_output_examples": "[[[[1, 4, 3, 5], [1, 2]]], [[False]]]"}
{"task_id": "Mbpp/577", "requirement": "def last_Digit_Factorial(n: int) -> int:\n\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"", "canonical_solution": "def last_Digit_Factorial(n): \n    if (n == 0): \n      return 1\n    elif (n <= 2): \n      return n  \n    elif (n == 3): \n      return 6\n    elif (n == 4): \n      return 4 \n    else: \n      return 0", "entry_point": "last_Digit_Factorial", "input_output_examples": "[[[4]], [[4]]]"}
{"task_id": "Mbpp/578", "requirement": "from typing import List\n\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"", "canonical_solution": "def interleave_lists(list1, list2, list3):\n    return [el for pair in zip(list1, list2, list3) for el in pair]", "entry_point": "interleave_lists", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]]], [[[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]]]]"}
{"task_id": "Mbpp/579", "requirement": "from typing import Tuple\n\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"", "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\n  return tuple(set(test_tup1) ^ set(test_tup2))", "entry_point": "find_dissimilar", "input_output_examples": "[[[(3, 4, 5, 6), (5, 7, 4, 10)]], [[(3, 6, 7, 10)]]]"}
{"task_id": "Mbpp/580", "requirement": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"", "canonical_solution": "def even_ele(test_tuple, ): \n\tres = tuple() \n\tfor ele in test_tuple: \n\t\tif isinstance(ele, tuple): \n\t\t\tres += (even_ele(ele), ) \n\t\telif ele % 2 == 0: \n\t\t\tres += (ele, ) \n\treturn res \ndef extract_even(test_tuple):\n\treturn even_ele(test_tuple)", "entry_point": "extract_even", "input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)]], [[(4, (6, (2, 4)), 6, 8)]]]"}
{"task_id": "Mbpp/581", "requirement": "def surface_Area(b: float, s: float) -> float:\n\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"", "canonical_solution": "def surface_Area(b,s): \n    return 2 * b * s + pow(b,2)", "entry_point": "surface_Area", "input_output_examples": "[[[3, 4]], [[33]]]"}
{"task_id": "Mbpp/583", "requirement": "def catalan_number(num: int) -> int:\n\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"", "canonical_solution": "def catalan_number(num):\n    if num <= 1:\n         return 1   \n    res_num = 0\n    for i in range(num):\n        res_num += catalan_number(i) * catalan_number(num - i - 1)\n    return res_num", "entry_point": "catalan_number", "input_output_examples": "[[[10]], [[16796]]]"}
{"task_id": "Mbpp/585", "requirement": "from typing import List\nfrom typing import Dict\n\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"", "canonical_solution": "import heapq\ndef expensive_items(items,n):\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\n  return expensive_items", "entry_point": "expensive_items", "input_output_examples": "[[[[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1]], [[[{'name': 'Item-2', 'price': 555.22}]]]]"}
{"task_id": "Mbpp/586", "requirement": "from typing import List\n\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"", "canonical_solution": "def split_Arr(l, n):\n  return l[n:] + l[:n]", "entry_point": "split_Arr", "input_output_examples": "[[[[12, 10, 5, 6, 52, 36], 2]], [[[5, 6, 52, 36, 12, 10]]]]"}
{"task_id": "Mbpp/587", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"", "canonical_solution": "def list_tuple(listx):\n  return tuple(listx)", "entry_point": "list_tuple", "input_output_examples": "[[[[5, 10, 7, 4, 15, 3]]], [[(5, 10, 7, 4, 15, 3)]]]"}
{"task_id": "Mbpp/588", "requirement": "from typing import List\n\n\ndef big_diff(nums: List[int]) -> int:\n\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"", "canonical_solution": "def big_diff(nums):\n     return max(nums) - min(nums)", "entry_point": "big_diff", "input_output_examples": "[[[[1, 2, 3, 4]]], [[3]]]"}
{"task_id": "Mbpp/589", "requirement": "from typing import List\n\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"", "canonical_solution": "import math\ndef perfect_squares(a, b):\n    if a > b:\n        a, b = b, a\n    if b < 0:\n        return []\n    if a < 0:\n        a = 0\n    return list(filter(lambda x: math.sqrt(x).is_integer(), range(a, b+1)))", "entry_point": "perfect_squares", "input_output_examples": "[[[1, 30]], [[[1, 4, 9, 16, 25]]]]"}
{"task_id": "Mbpp/590", "requirement": "from typing import Tuple\n\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"", "canonical_solution": "import cmath\ndef polar_rect(x,y):\n    cn = cmath.polar(complex(x, y))\n    cn1 = cmath.rect(2, cmath.pi)\n    return (cn, cn1)", "entry_point": "polar_rect", "input_output_examples": "[[[3, 4]], [[((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]"}
{"task_id": "Mbpp/591", "requirement": "from typing import List\n\n\ndef swap_List(newList: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"", "canonical_solution": "def swap_List(newList): \n    return newList[-1:] + newList[1:-1] + newList[:1]", "entry_point": "swap_List", "input_output_examples": "[[[[12, 35, 9, 56, 24]]], [[[24, 35, 9, 56, 12]]]]"}
{"task_id": "Mbpp/592", "requirement": "def sum_Of_product(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"", "canonical_solution": "def binomial_Coeff(n, k): \n    C = [0] * (k + 1); \n    C[0] = 1; # nC0 is 1 \n    for i in range(1,n + 1):  \n        for j in range(min(i, k),0,-1): \n            C[j] = C[j] + C[j - 1]; \n    return C[k]; \ndef sum_Of_product(n): \n    return binomial_Coeff(2 * n, n - 1);", "entry_point": "sum_Of_product", "input_output_examples": "[[[3]], [[15]]]"}
{"task_id": "Mbpp/593", "requirement": "def removezero_ip(ip: str) -> str:\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"", "canonical_solution": "import re\ndef removezero_ip(ip):\n return re.sub('\\.[0]*', '.', ip)", "entry_point": "removezero_ip", "input_output_examples": "[[['216.08.094.196']], [['216.8.94.196']]]"}
{"task_id": "Mbpp/594", "requirement": "from typing import List\n\n\ndef diff_even_odd(list1: List[int]) -> int:\n\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"", "canonical_solution": "def diff_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), -1)\n    first_odd = next((el for el in list1 if el%2!=0), -1)\n    return (first_even - first_odd)", "entry_point": "diff_even_odd", "input_output_examples": "[[[[1, 3, 5, 7, 4, 1, 6, 8]]], [[3]]]"}
{"task_id": "Mbpp/596", "requirement": "def tuple_size(tuple_list: tuple) -> int:\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"", "canonical_solution": "import sys \ndef tuple_size(tuple_list):\n  return sys.getsizeof(tuple_list)", "entry_point": "tuple_size", "input_output_examples": "[[[(\"A\", 1, \"B\", 2, \"C\", 3)]], [[88]]]"}
{"task_id": "Mbpp/597", "requirement": "from typing import List\n\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"", "canonical_solution": "def find_kth(arr1, arr2, k):\n\treturn sorted(arr1 + arr2)[k - 1]", "entry_point": "find_kth", "input_output_examples": "[[[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5]], [[6]]]"}
{"task_id": "Mbpp/598", "requirement": "def armstrong_number(number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"", "canonical_solution": "def armstrong_number(number):\n    order = len(str(number))\n    return sum([int(i) ** order for i in str(number)]) == number", "entry_point": "armstrong_number", "input_output_examples": "[[[153]], [[True]]]"}
{"task_id": "Mbpp/599", "requirement": "from typing import Tuple\n\n\ndef sum_average(number: int) -> Tuple[int, float]:\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"", "canonical_solution": "def sum_average(number):\n   sum_ = sum(range(1, number+1))\n   average = sum_/number\n   return sum_, average", "entry_point": "sum_average", "input_output_examples": "[[[10]], [[(55, 5.5)]]]"}
{"task_id": "Mbpp/600", "requirement": "def is_Even(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"", "canonical_solution": "def is_Even(n) : \n    return n % 2 == 0", "entry_point": "is_Even", "input_output_examples": "[[[1]], [[False]]]"}
{"task_id": "Mbpp/602", "requirement": "def first_repeated_char(str1: str) -> str:\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"", "canonical_solution": "def first_repeated_char(str1):\n  for index, c in enumerate(str1):\n    if str1[:index + 1].count(c) > 1:\n      return c\n  return None", "entry_point": "first_repeated_char", "input_output_examples": "[[['abcabc']], [['a']]]"}
{"task_id": "Mbpp/603", "requirement": "from typing import List\n\n\ndef get_ludic(n: int) -> List[int]:\n\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"", "canonical_solution": "def get_ludic(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "entry_point": "get_ludic", "input_output_examples": "[[[10]], [[[1, 2, 3, 5, 7]]]]"}
{"task_id": "Mbpp/604", "requirement": "def reverse_words(s: str) -> str:\n\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"", "canonical_solution": "def reverse_words(s):\n\treturn ' '.join(reversed(s.split()))", "entry_point": "reverse_words", "input_output_examples": "[[['python program']], [['program python']]]"}
{"task_id": "Mbpp/605", "requirement": "def prime_num(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"", "canonical_solution": "import math\ndef prime_num(num):\n  if num <= 1:\n    return False\n  for i in range(2, int(math.sqrt(num)) + 1):\n    if num % i == 0:\n      return False\n  return True", "entry_point": "prime_num", "input_output_examples": "[[[13]], [[True]]]"}
{"task_id": "Mbpp/606", "requirement": "def radian_degree(degree: float) -> float:\n\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"", "canonical_solution": "import math\ndef radian_degree(degree):\n    return degree * math.pi / 180", "entry_point": "radian_degree", "input_output_examples": "[[[90]], [[1.5707963267948966]]]"}
{"task_id": "Mbpp/607", "requirement": "from typing import Tuple\n\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"", "canonical_solution": "import re\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  if match is None:\n    return None\n  s = match.start()\n  e = match.end()\n  return (match.re.pattern, s, e)", "entry_point": "find_literals", "input_output_examples": "[[['The quick brown fox jumps over the lazy dog.', 'fox']], [[('fox', 16, 19)]]]"}
{"task_id": "Mbpp/608", "requirement": "def bell_Number(n: int) -> int:\n\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"", "canonical_solution": "def bell_Number(n): \n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell[n][0]", "entry_point": "bell_Number", "input_output_examples": "[[[2]], [[2]]]"}
{"task_id": "Mbpp/610", "requirement": "from typing import List\n\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"", "canonical_solution": "def remove_kth_element(list1, k):\n    return list1[:k-1] + list1[k:]", "entry_point": "remove_kth_element", "input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3]], [[[1, 1, 3, 4, 4, 5, 1]]]]"}
{"task_id": "Mbpp/611", "requirement": "from typing import List\n\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"", "canonical_solution": "def max_of_nth(test_list, N):\n  return max([sub[N] for sub in test_list])", "entry_point": "max_of_nth", "input_output_examples": "[[[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2]], [[19]]]"}
{"task_id": "Mbpp/612", "requirement": "from typing import List\n\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"", "canonical_solution": "def merge(lst):  \n    return [list(ele) for ele in list(zip(*lst))]", "entry_point": "merge", "input_output_examples": "[[[[['x', 'y'], ['a', 'b'], ['m', 'n']]]], [[[['x', 'a', 'm'], ['y', 'b', 'n']]]]]"}
{"task_id": "Mbpp/614", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"", "canonical_solution": "def cummulative_sum(test_list):\n  return sum(map(sum, test_list))", "entry_point": "cummulative_sum", "input_output_examples": "[[[[(1, 3), (5, 6, 7), (2, 6)]]], [[30]]]"}
{"task_id": "Mbpp/615", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"", "canonical_solution": "def average_tuple(nums):\n    result = [sum(x) / len(x) for x in zip(*nums)]\n    return result", "entry_point": "average_tuple", "input_output_examples": "[[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))]], [[[30.5, 34.25, 27.0, 23.25]]]]"}
{"task_id": "Mbpp/616", "requirement": "from typing import Tuple\n\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"", "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \n  return (res)", "entry_point": "tuple_modulo", "input_output_examples": "[[[(10, 4, 5, 6), (5, 6, 7, 5)]], [[(0, 4, 5, 1)]]]"}
{"task_id": "Mbpp/618", "requirement": "from typing import List\n\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"", "canonical_solution": "def div_list(nums1,nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "entry_point": "div_list", "input_output_examples": "[[[[4, 5, 6], [1, 2, 3]]], [[[4.0, 2.5, 2.0]]]]"}
{"task_id": "Mbpp/619", "requirement": "def move_num(test_str: str) -> str:\n\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"", "canonical_solution": "def move_num(test_str):\n  num_str = ''.join(i for i in test_str if i.isdigit())\n  else_str = ''.join(i for i in test_str if not i.isdigit())\n  return else_str + num_str", "entry_point": "move_num", "input_output_examples": "[[['I1love143you55three3000thousand']], [['Iloveyouthreethousand1143553000']]]"}
{"task_id": "Mbpp/620", "requirement": "from typing import List\n\n\ndef largest_subset(a: List[int]) -> int:\n\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"", "canonical_solution": "def largest_subset(a):\n\tn = len(a)\n\tdp = [0 for _ in range(n)]\n\tdp[n - 1] = 1; \n\tfor i in range(n - 2, -1, -1):\n\t\tmxm = 0\n\t\tfor j in range(i + 1, n):\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\n\t\t\t\tmxm = max(mxm, dp[j])\n\t\tdp[i] = 1 + mxm\n\treturn max(dp)", "entry_point": "largest_subset", "input_output_examples": "[[[[1, 3, 6, 13, 17, 18]]], [[4]]]"}
{"task_id": "Mbpp/622", "requirement": "from typing import List\n\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"", "canonical_solution": "def get_median(arr1, arr2, n):\n  i = 0\n  j = 0\n  m1 = -1\n  m2 = -1\n  count = 0\n  while count < n + 1:\n    count += 1\n    if i == n:\n      m1 = m2\n      m2 = arr2[0]\n      break\n    elif j == n:\n      m1 = m2\n      m2 = arr1[0]\n      break\n    if arr1[i] <= arr2[j]:\n      m1 = m2\n      m2 = arr1[i]\n      i += 1\n    else:\n      m1 = m2\n      m2 = arr2[j]\n      j += 1\n  return (m1 + m2)/2", "entry_point": "get_median", "input_output_examples": "[[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], [[16.0]]]"}
{"task_id": "Mbpp/623", "requirement": "from typing import List\n\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "canonical_solution": "def nth_nums(nums, n):\n nth_nums = list(map(lambda x: x ** n, nums))\n return nth_nums", "entry_point": "nth_nums", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2]], [[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]]]]"}
{"task_id": "Mbpp/624", "requirement": "def is_upper(string: str) -> str:\n\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"", "canonical_solution": "def is_upper(string):\n  return string.upper()", "entry_point": "is_upper", "input_output_examples": "[[['person']], [['PERSON']]]"}
{"task_id": "Mbpp/626", "requirement": "def triangle_area(radius: float) -> float:\n\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"", "canonical_solution": "def triangle_area(r) :  \n    if r < 0 : \n        return None\n    return r * r", "entry_point": "triangle_area", "input_output_examples": "[[[-1]], [[None]]]"}
{"task_id": "Mbpp/628", "requirement": "def replace_spaces(string: str) -> str:\n\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"", "canonical_solution": "def replace_spaces(string):\n  return string.replace(\" \", \"%20\")", "entry_point": "replace_spaces", "input_output_examples": "[[['My Name is Dawood']], [['My%20Name%20is%20Dawood']]]"}
{"task_id": "Mbpp/629", "requirement": "from typing import List\n\n\ndef Split(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"", "canonical_solution": "def Split(l): \n    return [num for num in l if num % 2 == 0]", "entry_point": "Split", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[[2, 4]]]]"}
{"task_id": "Mbpp/630", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"", "canonical_solution": "def adjac(ele, sub = []): \n  if not ele: \n     yield sub \n  else: \n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \n                for idx in adjac(ele[1:], sub + [j])] \ndef get_coordinates(test_tup):\n  return list(adjac(test_tup))", "entry_point": "get_coordinates", "input_output_examples": "[[[(3, 4)]], [[[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]]]]"}
{"task_id": "Mbpp/631", "requirement": "def replace_spaces(text: str) -> str:\n\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"", "canonical_solution": "def replace_spaces(text):\n  return \"\".join(\" \" if c == \"_\" else (\"_\" if c == \" \" else c) for c in text)", "entry_point": "replace_spaces", "input_output_examples": "[[['Jumanji The Jungle']], [['Jumanji_The_Jungle']]]"}
{"task_id": "Mbpp/632", "requirement": "from typing import List\n\n\ndef move_zero(num_list: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"", "canonical_solution": "def move_zero(num_list):\n    zeros = [0] * num_list.count(0)\n    front = [i for i in num_list if i != 0]\n    return front + zeros", "entry_point": "move_zero", "input_output_examples": "[[[[1, 0, 2, 0, 3, 4]]], [[[1, 2, 3, 4, 0, 0]]]]"}
{"task_id": "Mbpp/633", "requirement": "from typing import List\n\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"", "canonical_solution": "def pair_xor_Sum(arr,n) : \n    ans = 0 \n    for i in range(0,n) :    \n        for j in range(i + 1,n) :   \n            ans = ans + (arr[i] ^ arr[j])          \n    return ans", "entry_point": "pair_xor_Sum", "input_output_examples": "[[[[5, 9, 7, 6], 4]], [[47]]]"}
{"task_id": "Mbpp/635", "requirement": "from typing import List\n\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"", "canonical_solution": "import heapq as hq\ndef heap_sort(iterable):\n    hq.heapify(iterable)\n    return [hq.heappop(iterable) for _ in range(len(iterable))]", "entry_point": "heap_sort", "input_output_examples": "[[[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]]], [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]]]"}
{"task_id": "Mbpp/637", "requirement": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"", "canonical_solution": "def noprofit_noloss(actual_cost, sale_amount): \n  return actual_cost == sale_amount", "entry_point": "noprofit_noloss", "input_output_examples": "[[[1500, 1200]], [[False]]]"}
{"task_id": "Mbpp/638", "requirement": "def wind_chill(v: float, t: float) -> int:\n\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"", "canonical_solution": "import math\ndef wind_chill(v,t):\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\n return int(round(windchill, 0))", "entry_point": "wind_chill", "input_output_examples": "[[[120, 35]], [[40]]]"}
{"task_id": "Mbpp/639", "requirement": "from typing import List\n\n\ndef sample_nam(sample_names: List[str]) -> int:\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"", "canonical_solution": "def sample_nam(sample_names):\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\n  return len(''.join(sample_names))", "entry_point": "sample_nam", "input_output_examples": "[[[['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']]], [[16]]]"}
{"task_id": "Mbpp/641", "requirement": "def is_nonagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"", "canonical_solution": "def is_nonagonal(n): \n\treturn int(n * (7 * n - 5) / 2)", "entry_point": "is_nonagonal", "input_output_examples": "[[[10]], [[325]]]"}
{"task_id": "Mbpp/643", "requirement": "def text_match_wordz_middle(text: str) -> bool:\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"", "canonical_solution": "import re\ndef text_match_wordz_middle(text):\n\treturn re.search(r'\\Bz\\B',  text) is not None", "entry_point": "text_match_wordz_middle", "input_output_examples": "[[['pythonzabc.']], [[True]]]"}
{"task_id": "Mbpp/644", "requirement": "from typing import List\n\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"", "canonical_solution": "def reverse_Array_Upto_K(input, k): \n  return input[k-1::-1] + input[k:]", "entry_point": "reverse_Array_Upto_K", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], 4]], [[[4, 3, 2, 1, 5, 6]]]]"}
{"task_id": "Mbpp/720", "requirement": "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"", "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\n  return test_tup + (test_dict, )", "entry_point": "add_dict_to_tuple", "input_output_examples": "[[[(4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3}]], [[(4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})]]]"}
{"task_id": "Mbpp/721", "requirement": "from typing import List\n\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"", "canonical_solution": "def maxAverageOfPath(cost):\n  N = len(cost)\n  dp = [[0 for _ in range(N + 1)] for _ in range(N + 1)]\n  dp[0][0] = cost[0][0]\n  for i in range(1, N):\n    dp[i][0] = dp[i - 1][0] + cost[i][0]\n  for j in range(1, N):\n    dp[0][j] = dp[0][j - 1] + cost[0][j]\n  for i in range(1, N):\n    for j in range(1, N):\n      dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n  # all paths are of length 2 * N - 1, so just divide by that\n  return dp[N - 1][N - 1] / (2 * N - 1)", "entry_point": "maxAverageOfPath", "input_output_examples": "[[[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]]], [[5.2]]]"}
{"task_id": "Mbpp/722", "requirement": "from typing import Dict\nfrom typing import Tuple\n\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"", "canonical_solution": "def filter_data(students,h,w):\n    return {k: s for k, s in students.items() if s[0] >= h and s[1] >= w}", "entry_point": "filter_data", "input_output_examples": "[[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70]], [[{'Cierra Vega': (6.2, 70)}]]]"}
{"task_id": "Mbpp/723", "requirement": "from typing import List\n\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"", "canonical_solution": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    result = sum(map(eq, nums1, nums2))\n    return result", "entry_point": "count_same_pair", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]]], [[4]]]"}
{"task_id": "Mbpp/724", "requirement": "def power_base_sum(base: int, power: int) -> int:\n\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"", "canonical_solution": "def power_base_sum(base, power):\n    return sum([int(i) for i in str(pow(base, power))])", "entry_point": "power_base_sum", "input_output_examples": "[[[2, 100]], [[115]]]"}
{"task_id": "Mbpp/725", "requirement": "from typing import List\n\n\ndef extract_quotation(text1: str) -> List[str]:\n\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"", "canonical_solution": "import re\ndef extract_quotation(text1):\n  return re.findall(r'\"(.*?)\"', text1)", "entry_point": "extract_quotation", "input_output_examples": "[[['Cortex \"A53\" Based \"multi\" tasking \"Processor\"']], [[['A53', 'multi', 'Processor']]]]"}
{"task_id": "Mbpp/726", "requirement": "from typing import Tuple\n\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"", "canonical_solution": "def multiply_elements(test_tup):\n  return tuple(i * j for i, j in zip(test_tup, test_tup[1:]))", "entry_point": "multiply_elements", "input_output_examples": "[[[(1, 5, 7, 8, 10)]], [[(5, 35, 56, 80)]]]"}
{"task_id": "Mbpp/728", "requirement": "from typing import List\n\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"", "canonical_solution": "def sum_list(lst1,lst2):\n  return [a + b for a, b in zip(lst1, lst2)]", "entry_point": "sum_list", "input_output_examples": "[[[[10, 20, 30], [15, 25, 35]]], [[[25, 45, 65]]]]"}
{"task_id": "Mbpp/730", "requirement": "from typing import List\n\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"", "canonical_solution": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    return [key for key, _ in groupby(nums)]", "entry_point": "consecutive_duplicates", "input_output_examples": "[[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]], [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]]]]"}
{"task_id": "Mbpp/731", "requirement": "def lateralsurface_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"", "canonical_solution": "import math\ndef lateralsurface_cone(r,h):\n  l = math.sqrt(r * r + h * h)\n  return math.pi * r  * l", "entry_point": "lateralsurface_cone", "input_output_examples": "[[[5, 12]], [[204.20352248333654]]]"}
{"task_id": "Mbpp/732", "requirement": "def replace_specialchar(text: str) -> str:\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"", "canonical_solution": "import re\ndef replace_specialchar(text):\n return re.sub(\"[ ,.]\", \":\", text)", "entry_point": "replace_specialchar", "input_output_examples": "[[['Python language, Programming language.']], [['Python:language::Programming:language:']]]"}
{"task_id": "Mbpp/733", "requirement": "from typing import List\n\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"", "canonical_solution": "def find_first_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "entry_point": "find_first_occurrence", "input_output_examples": "[[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5]], [[1]]]"}
{"task_id": "Mbpp/734", "requirement": "from typing import List\n\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. \nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"", "canonical_solution": "def sum_Of_Subarray_Prod(arr):\n    result = 0  # final result\n    partial = 0 # partial sum\n    # stimulate the recursion\n    while arr != []:\n        partial = arr[-1] * (1 + partial)\n        result += partial\n        arr.pop()\n    return result", "entry_point": "sum_Of_Subarray_Prod", "input_output_examples": "[[[[1, 2, 3]]], [[20]]]"}
{"task_id": "Mbpp/735", "requirement": "def toggle_middle_bits(n: int) -> int:\n\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. \nassert toggle_middle_bits(9) == 15\n\"\"\"", "canonical_solution": "def toggle_middle_bits(n): \n    binary = bin(n)[2:]\n    toggled = ''.join(['0' if i == '1' else '1' for i in binary[1:-1]])\n    return int(binary[0] + toggled + binary[-1], 2)", "entry_point": "toggle_middle_bits", "input_output_examples": "[[[9]], [[15]]]"}
{"task_id": "Mbpp/736", "requirement": "from typing import List\n\n\ndef left_insertion(a: List[int], x: int) -> int:\n\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. \nassert left_insertion([1,2,4,5],6)==4\n\"\"\"", "canonical_solution": "import bisect\ndef left_insertion(a, x):\n    return bisect.bisect_left(a, x)", "entry_point": "left_insertion", "input_output_examples": "[[[[1, 2, 4, 5], 6]], [[4]]]"}
{"task_id": "Mbpp/737", "requirement": "def check_str(s: str) -> bool:\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"", "canonical_solution": "import re \ndef check_str(string): \n\tregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n\treturn re.search(regex, string)", "entry_point": "check_str", "input_output_examples": "[[['annie']], [[True]]]"}
{"task_id": "Mbpp/739", "requirement": "def find_Index(n: int) -> int:\n\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. \nassert find_Index(2) == 4\n\"\"\"", "canonical_solution": "import math \ndef find_Index(n): \n    x = math.sqrt(2 * math.pow(10,(n - 1)))\n    return round(x)", "entry_point": "find_Index", "input_output_examples": "[[[2]], [[4]]]"}
{"task_id": "Mbpp/740", "requirement": "from typing import Dict\nfrom typing import Tuple\n\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. \nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"", "canonical_solution": "def tuple_to_dict(test_tup):\n  return dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))", "entry_point": "tuple_to_dict", "input_output_examples": "[[[(1, 5, 7, 10, 13, 5)]], [[{1: 5, 7: 10, 13: 5}]]]"}
{"task_id": "Mbpp/741", "requirement": "def all_Characters_Same(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"", "canonical_solution": "def all_Characters_Same(s) :\n    return all(ch == s[0] for ch in s[1:])", "entry_point": "all_Characters_Same", "input_output_examples": "[[['python']], [[False]]]"}
{"task_id": "Mbpp/742", "requirement": "def area_tetrahedron(side: float) -> float:\n\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"", "canonical_solution": "import math\ndef area_tetrahedron(side):\n  return math.sqrt(3)*(side*side)", "entry_point": "area_tetrahedron", "input_output_examples": "[[[3]], [[15.588457268119894]]]"}
{"task_id": "Mbpp/743", "requirement": "from typing import List\n\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. \nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"", "canonical_solution": "def rotate_right(l, m):\n  return l[-m:] + l[:-m]", "entry_point": "rotate_right", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3]], [[[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]]]]"}
{"task_id": "Mbpp/744", "requirement": "from typing import Tuple\n\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"", "canonical_solution": "def check_none(test_tup):\n  return any(ele is None for ele in test_tup)", "entry_point": "check_none", "input_output_examples": "[[[(10, 4, 5, 6, None)]], [[True]]]"}
{"task_id": "Mbpp/745", "requirement": "from typing import List\n\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"", "canonical_solution": "def divisible_by_digits(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) \\\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]", "entry_point": "divisible_by_digits", "input_output_examples": "[[[1, 22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]]]]"}
{"task_id": "Mbpp/748", "requirement": "def capital_words_spaces(str1: str) -> str:\n\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"", "canonical_solution": "import re\ndef capital_words_spaces(str1):\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)", "entry_point": "capital_words_spaces", "input_output_examples": "[[['Python']], [['Python']]]"}
{"task_id": "Mbpp/749", "requirement": "from typing import List\n\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. \nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"", "canonical_solution": "def sort_numeric_strings(nums_str):\n    return sorted([int(x) for x in nums_str])", "entry_point": "sort_numeric_strings", "input_output_examples": "[[[['4', '12', '45', '7', '0', '100', '200', '-12', '-500']]], [[[-500, -12, 0, 4, 7, 12, 45, 100, 200]]]]"}
{"task_id": "Mbpp/750", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"", "canonical_solution": "def add_tuple(test_list, test_tup):\n  return test_list + list(test_tup)", "entry_point": "add_tuple", "input_output_examples": "[[[[5, 6, 7], (9, 10)]], [[[5, 6, 7, 9, 10]]]]"}
{"task_id": "Mbpp/751", "requirement": "from typing import List\n\n\ndef check_min_heap(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check if the given array represents min heap or not. \nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"", "canonical_solution": "def check_min_heap_helper(arr, i):\n    if 2 * i + 2 > len(arr):\n      return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or  \\\n                (arr[i] <= arr[2 * i + 2] and \\\n                 check_min_heap_helper(arr, 2 * i + 2))\n    return left_child and right_child\ndef check_min_heap(arr):\n  return check_min_heap_helper(arr, 0)", "entry_point": "check_min_heap", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6]]], [[True]]]"}
{"task_id": "Mbpp/752", "requirement": "def jacobsthal_num(n: int) -> int:\n\"\"\"\nWrite a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"", "canonical_solution": "def jacobsthal_num(n): \n\tdp = [0] * (n + 1) \n\tdp[0] = 0\n\tdp[1] = 1\n\tfor i in range(2, n+1): \n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \n\treturn dp[n]", "entry_point": "jacobsthal_num", "input_output_examples": "[[[5]], [[11]]]"}
{"task_id": "Mbpp/753", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n\"\"\"\nWrite a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"", "canonical_solution": "def min_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return (res)", "entry_point": "min_k", "input_output_examples": "[[[[('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2]], [[[('Akash', 2), ('Akshat', 4)]]]]"}
{"task_id": "Mbpp/754", "requirement": "from typing import List\n\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"", "canonical_solution": "def extract_index_list(l1, l2, l3):\n    return [a for a, b, c in zip(l1, l2, l3) if a == b == c]", "entry_point": "extract_index_list", "input_output_examples": "[[[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]]], [[[1, 7]]]]"}
{"task_id": "Mbpp/755", "requirement": "from typing import List\n\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"", "canonical_solution": "def second_smallest(numbers):\n  sorted_set = sorted(set(numbers))\n  if len(sorted_set) < 2:\n    return None\n  return sorted_set[1]", "entry_point": "second_smallest", "input_output_examples": "[[[[1, 2, -8, -2, 0, -2]]], [[-2]]]"}
{"task_id": "Mbpp/757", "requirement": "from typing import List\n\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. \nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"", "canonical_solution": "def count_reverse_pairs(test_list):\n  return sum(test_list[i+1:].count(s[::-1]) for i, s in enumerate(test_list))", "entry_point": "count_reverse_pairs", "input_output_examples": "[[[['julia', 'best', 'tseb', 'for', 'ailuj']]], [[2]]]"}
{"task_id": "Mbpp/758", "requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"", "canonical_solution": "def unique_sublists(list1):\n    return {tuple(x): list1.count(x) for x in list1}", "entry_point": "unique_sublists", "input_output_examples": "[[[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]]], [[{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}]]]"}
{"task_id": "Mbpp/759", "requirement": "def is_decimal(num: str) -> bool:\n\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"", "canonical_solution": "def is_decimal(num):\n    import re\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\n    return dnumre.search(num) is not None", "entry_point": "is_decimal", "input_output_examples": "[[['123.11']], [[True]]]"}
{"task_id": "Mbpp/760", "requirement": "from typing import List\n\n\ndef unique_Element(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"", "canonical_solution": "def unique_Element(arr):\n    return arr.count(arr[0]) == len(arr)", "entry_point": "unique_Element", "input_output_examples": "[[[[1, 1, 1]]], [[True]]]"}
{"task_id": "Mbpp/762", "requirement": "def check_monthnumber_number(month_number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n\nassert check_monthnumber_number(6)==True\n\"\"\"", "canonical_solution": "def check_monthnumber_number(monthnum3):\n  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11", "entry_point": "check_monthnumber_number", "input_output_examples": "[[[6]], [[True]]]"}
{"task_id": "Mbpp/763", "requirement": "from typing import List\n\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. \nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"", "canonical_solution": "def find_min_diff(arr,n): \n    arr = sorted(arr) \n    diff = 10**20 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff", "entry_point": "find_min_diff", "input_output_examples": "[[[(1, 5, 3, 19, 18, 25), 6]], [[1]]]"}
{"task_id": "Mbpp/764", "requirement": "def number_ctr(s: str) -> int:\n\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"", "canonical_solution": "def number_ctr(s):\n    return sum(c.isdigit() for c in s)", "entry_point": "number_ctr", "input_output_examples": "[[['program2bedone']], [[1]]]"}
{"task_id": "Mbpp/765", "requirement": "def is_polite(n: int) -> int:\n\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"", "canonical_solution": "import math \ndef is_polite(n): \n\tn = n + 1\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2)))", "entry_point": "is_polite", "input_output_examples": "[[[7]], [[11]]]"}
{"task_id": "Mbpp/766", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"", "canonical_solution": "def pair_wise(l1):\n    return list(zip(l1, l1[1:]))", "entry_point": "pair_wise", "input_output_examples": "[[[[1, 1, 2, 3, 3, 4, 4, 5]]], [[[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]]]]"}
{"task_id": "Mbpp/767", "requirement": "from typing import List\n\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"", "canonical_solution": "def get_pairs_count(arr, sum_):\n    cnt = 0\n    for n in arr:\n        cnt += arr.count(sum_ - n)\n        if sum_ - n == n:\n            cnt -= 1\n    return cnt / 2", "entry_point": "get_pairs_count", "input_output_examples": "[[[[1, 1, 1, 1], 2]], [[6]]]"}
{"task_id": "Mbpp/769", "requirement": "from typing import List\n\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"", "canonical_solution": "def Diff(li1,li2):\n    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))", "entry_point": "Diff", "input_output_examples": "[[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]]], [[[10, 20, 30, 15]]]]"}
{"task_id": "Mbpp/770", "requirement": "def odd_num_sum(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"", "canonical_solution": "def odd_num_sum(n) : \n    j = 0\n    sm = 0\n    for i in range(1,n + 1) : \n        j = (2*i-1) \n        sm = sm + (j*j*j*j)   \n    return sm", "entry_point": "odd_num_sum", "input_output_examples": "[[[2]], [[82]]]"}
{"task_id": "Mbpp/771", "requirement": "def check_expression(expression: str) -> bool:\n\"\"\"\nWrite a function to check if the given expression is balanced or not. \nassert check_expression(\"{()}[{}]\") == True\n\"\"\"", "canonical_solution": "from collections import deque\ndef check_expression(exp):\n    if len(exp) == 0 or len(exp) % 2 == 1:\n        return False\n    stack = deque()\n    for ch in exp:\n        if ch == '(' or ch == '{' or ch == '[':\n            stack.append(ch)\n        if ch == ')' or ch == '}' or ch == ']':\n            if not stack:\n                return False\n            top = stack.pop()\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\n                return False\n    return not stack", "entry_point": "check_expression", "input_output_examples": "[[['{()}[{}]']], [[True]]]"}
{"task_id": "Mbpp/772", "requirement": "def remove_length(test_str: str, K: int) -> str:\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"", "canonical_solution": "def remove_length(test_str, K):\n  return ' '.join([i for i in test_str.split() if len(i) != K])", "entry_point": "remove_length", "input_output_examples": "[[['The person is most value tet', 3]], [['person is most value']]]"}
{"task_id": "Mbpp/773", "requirement": "from typing import Tuple\n\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"", "canonical_solution": "import re\ndef occurance_substring(text,pattern):\n for match in re.finditer(pattern, text):\n    s = match.start()\n    e = match.end()\n    return (text[s:e], s, e)\n return None", "entry_point": "occurance_substring", "input_output_examples": "[[['python programming, python language', 'python']], [[('python', 0, 6)]]]"}
{"task_id": "Mbpp/775", "requirement": "from typing import List\n\n\ndef odd_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"", "canonical_solution": "def odd_position(nums):\n\treturn all(n % 2 == 1 for n in nums[1::2])", "entry_point": "odd_position", "input_output_examples": "[[[[2, 1, 4, 3, 6, 7, 6, 3]]], [[True]]]"}
{"task_id": "Mbpp/777", "requirement": "from typing import List\n\n\ndef find_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"", "canonical_solution": "def find_sum(arr): \n    return sum(set(arr))", "entry_point": "find_sum", "input_output_examples": "[[[[1, 2, 3, 1, 1, 4, 5, 6]]], [[21]]]"}
{"task_id": "Mbpp/778", "requirement": "from typing import List\n\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"", "canonical_solution": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    return [list(group) for _, group in groupby(list1)]", "entry_point": "pack_consecutive_duplicates", "input_output_examples": "[[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]], [[[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]]]]"}
{"task_id": "Mbpp/780", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"", "canonical_solution": "from itertools import combinations \ndef find_combinations(test_list):\n  return [tuple(map(sum, zip(*t))) for t in combinations(test_list, 2)]", "entry_point": "find_combinations", "input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]]], [[[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}
{"task_id": "Mbpp/781", "requirement": "def count_divisors(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the count of divisors is even. \nassert count_divisors(10)\n\"\"\"", "canonical_solution": "import math \ndef count_divisors(n) : \n    cnt = 0\n    for i in range(1, (int)(math.sqrt(n)) + 1) : \n        if (n % i == 0) : \n            if (n / i == i) : \n                cnt = cnt + 1\n            else : \n                cnt = cnt + 2\n    return cnt % 2 == 0", "entry_point": "count_divisors", "input_output_examples": "[[[10]], [[True]]]"}
{"task_id": "Mbpp/782", "requirement": "from typing import List\n\n\ndef odd_length_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays. \nassert odd_length_sum([1,2,4]) == 14\n\"\"\"", "canonical_solution": "def odd_length_sum(arr):\n    sum_ = 0\n    n = len(arr)\n    for i in range(n):\n        # arr[i] occurs (i + 1) * (n - i) times in all subarrays\n        times = ((i + 1) * (n - i) + 1) // 2\n        sum_ += arr[i] * times\n    return sum_", "entry_point": "odd_length_sum", "input_output_examples": "[[[[1, 2, 4]]], [[14]]]"}
{"task_id": "Mbpp/784", "requirement": "from typing import List\n\n\ndef mul_even_odd(list1: List[int]) -> int:\n\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"", "canonical_solution": "def mul_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0),-1)\n    first_odd = next((el for el in list1 if el%2!=0),-1)\n    return (first_even*first_odd)", "entry_point": "mul_even_odd", "input_output_examples": "[[[[1, 3, 5, 7, 4, 1, 6, 8]]], [[4]]]"}
{"task_id": "Mbpp/785", "requirement": "def tuple_str_int(test_str: str) -> tuple:\n\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"", "canonical_solution": "def tuple_str_int(test_str):\n  return tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))", "entry_point": "tuple_str_int", "input_output_examples": "[[['(7, 8, 9)']], [[(7, 8, 9)]]]"}
{"task_id": "Mbpp/786", "requirement": "def right_insertion(a: list, x: int) -> int:\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"", "canonical_solution": "import bisect\ndef right_insertion(a, x):\n    return bisect.bisect_right(a, x)", "entry_point": "right_insertion", "input_output_examples": "[[[[1, 2, 4, 5], 6]], [[4]]]"}
{"task_id": "Mbpp/787", "requirement": "def text_match_three(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"", "canonical_solution": "import re\ndef text_match_three(text):\n        patterns = 'ab{3}?'\n        return re.search(patterns,  text)", "entry_point": "text_match_three", "input_output_examples": "[[['ac']], [[None]]]"}
{"task_id": "Mbpp/788", "requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"", "canonical_solution": "def new_tuple(test_list, test_str):\n  return tuple(test_list + [test_str])", "entry_point": "new_tuple", "input_output_examples": "[[[['WEB', 'is'], 'best']], [[('WEB', 'is', 'best')]]]"}
{"task_id": "Mbpp/790", "requirement": "from typing import List\n\n\ndef even_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"", "canonical_solution": "def even_position(nums):\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "entry_point": "even_position", "input_output_examples": "[[[[3, 2, 1]]], [[False]]]"}
{"task_id": "Mbpp/791", "requirement": "def remove_nested(test_tup: tuple) -> tuple:\n\"\"\"\nWrite a function to remove tuples from the given tuple.\n\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"", "canonical_solution": "def remove_nested(test_tup):\n  return tuple(e for e in test_tup if not isinstance(e, tuple))", "entry_point": "remove_nested", "input_output_examples": "[[[(1, 5, 7, (4, 6), 10)]], [[(1, 5, 7, 10)]]]"}
{"task_id": "Mbpp/792", "requirement": "from typing import List\n\n\ndef count_list(input_list: List[Any]) -> int:\n\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"", "canonical_solution": "def count_list(input_list): \n    return sum(isinstance(e, list) for e in input_list)", "entry_point": "count_list", "input_output_examples": "[[[[[1, 3], [5, 7], [9, 11], [13, 15, 17]]]], [[4]]]"}
{"task_id": "Mbpp/793", "requirement": "from typing import List\n\n\ndef last(arr: List[int], x: int) -> int:\n\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"", "canonical_solution": "def last(arr,x):\n    return len(arr)-arr[::-1].index(x) - 1", "entry_point": "last", "input_output_examples": "[[[[1, 2, 3], 1]], [[0]]]"}
{"task_id": "Mbpp/794", "requirement": "def text_starta_endb(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"", "canonical_solution": "import re\ndef text_starta_endb(text):\n    patterns = 'a.*?b$'\n    return re.search(patterns,  text)", "entry_point": "text_starta_endb", "input_output_examples": "[[['aabbbb']], [[None]]]"}
{"task_id": "Mbpp/796", "requirement": "def return_sum(d: dict) -> int:\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"", "canonical_solution": "def return_sum(d):\n  return sum(d.values())", "entry_point": "return_sum", "input_output_examples": "[[[{'a': 100, 'b': 200, 'c': 300}]], [[600]]]"}
{"task_id": "Mbpp/797", "requirement": "def sum_in_range(l: int, r: int) -> int:\n\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"", "canonical_solution": "def sum_odd(n): \n    terms = (n + 1) // 2\n    sum1 = terms * terms \n    return sum1  \ndef sum_in_range(l,r): \n    return sum_odd(r) - sum_odd(l - 1)", "entry_point": "sum_in_range", "input_output_examples": "[[[2, 5]], [[8]]]"}
{"task_id": "Mbpp/798", "requirement": "from typing import List\n\n\ndef _sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"", "canonical_solution": "def _sum(arr):  \n    return sum(arr)", "entry_point": "_sum", "input_output_examples": "[[[[1, 2, 3]]], [[6]]]"}
{"task_id": "Mbpp/799", "requirement": "def left_rotate(n: int, d: int) -> int:\n\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"", "canonical_solution": "def left_rotate(n,d):   \n    INT_BITS = 32\n    return (n << d)|(n >> (INT_BITS - d))", "entry_point": "left_rotate", "input_output_examples": "[[[16, 2]], [[64]]]"}
{"task_id": "Mbpp/800", "requirement": "def remove_all_spaces(text: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from a string.\n\n\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"", "canonical_solution": "def remove_all_spaces(text):\n return text.replace(' ', '')", "entry_point": "remove_all_spaces", "input_output_examples": "[[['python  program']], [['pythonprogram']]]"}
{"task_id": "Mbpp/801", "requirement": "def test_three_equal(x: int, y: int, z: int) -> int:\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\n\nassert test_three_equal(1,1,1) == 3\n\"\"\"", "canonical_solution": "def test_three_equal(x,y,z):\n  result = set([x,y,z])\n  if len(result) == 3:\n    return 0\n  elif len(result) == 2:\n    return 2\n  else:\n    return 3", "entry_point": "test_three_equal", "input_output_examples": "[[[1, 1, 1]], [[3]]]"}
{"task_id": "Mbpp/803", "requirement": "def is_perfect_square(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is a perfect square or not. \nassert not is_perfect_square(10)\n\"\"\"", "canonical_solution": "def is_perfect_square(n) :\n    if n < 0:\n        return False\n    return n**(1/2) == int(n**(1/2))", "entry_point": "is_perfect_square", "input_output_examples": "[[[10]], [[False]]]"}
{"task_id": "Mbpp/804", "requirement": "from typing import List\n\n\ndef is_product_even(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"", "canonical_solution": "def is_product_even(arr): \n    return any(x % 2 == 0 for x in arr)", "entry_point": "is_product_even", "input_output_examples": "[[[[1, 2, 3]]], [[True]]]"}
{"task_id": "Mbpp/805", "requirement": "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"", "canonical_solution": "def max_sum_list(lists):\n return max(lists, key=sum)", "entry_point": "max_sum_list", "input_output_examples": "[[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]]], [[[10, 11, 12]]]]"}
{"task_id": "Mbpp/806", "requirement": "def max_run_uppercase(test_str: str) -> int:\n\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"", "canonical_solution": "def max_run_uppercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper():\n      cnt += 1\n    else:\n      res = cnt\n      cnt = 0\n  if test_str[len(test_str) - 1].isupper():\n    res = cnt\n  return res", "entry_point": "max_run_uppercase", "input_output_examples": "[[['GeMKSForGERksISBESt']], [[5]]]"}
{"task_id": "Mbpp/807", "requirement": "from typing import List\n\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"", "canonical_solution": "def first_odd(nums):\n  first_odd = next((el for el in nums if el%2!=0), None)\n  return first_odd", "entry_point": "first_odd", "input_output_examples": "[[[[1, 3, 5]]], [[1]]]"}
{"task_id": "Mbpp/808", "requirement": "def check_K(test_tup: tuple, K: any) -> bool:\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"", "canonical_solution": "def check_K(test_tup, K):\n  return K in test_tup", "entry_point": "check_K", "input_output_examples": "[[[(10, 4, 5, 6, 8), 6]], [[True]]]"}
{"task_id": "Mbpp/809", "requirement": "from typing import Tuple\n\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"", "canonical_solution": "def check_smaller(test_tup1, test_tup2):\n  return all(x > y for x, y in zip(test_tup1, test_tup2))", "entry_point": "check_smaller", "input_output_examples": "[[[(1, 2, 3), (2, 3, 4)]], [[False]]]"}
