{"task_id": "Mbpp/2", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the shared elements from the given two lists.\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))\n\"\"\"", "entry_point": "similar_elements", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1).intersection(set(test_tup2)))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1).intersection(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1).intersection(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1).intersection(set(test_tup2)))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1).intersection(set(test_tup2)))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1).intersection(set(test_tup2)))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1).intersection(set(test_tup2)))", "from typing import List, Tuple\n\ndef similar_elements(test_tup1: List[int], test_tup2: List[int]) -> Tuple[int, ...]:\n    return tuple(set(test_tup1) & set(test_tup2))"], "outputs": "[[(4, 5)], [()], [(8, 9, 7)], [()], [()], [()], [(1, 2, 3)], [(40,)], [(1, 2, 3, 4)], [(0, -3, -2, -1)], [(8, 5, 6, 7)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 4, 5, 6], [5, 7, 4, 10]], [[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [9, 7, 8]], [[], []], [[1, 2, 3], []], [[], [4, 5, 6]], [[1, 1, 2, 2, 3, 3], [3, 3, 2, 2, 1, 1]], [[10, 20, 30, 40], [40, 50, 60, 70]], [[1, 2, 3, 4], [4, 3, 2, 1]], [[0, -1, -2, -3], [-3, -2, -1, 0]], [[5, 6, 7, 8], [5, 6, 7, 8]]]", "input_output_examples": "[[[[3, 4, 5, 6], [5, 7, 4, 10]]], [[(4, 5)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9981981981981981, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/3", "original_requirement": "def is_not_prime(n: int) -> bool:\n\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_not_prime(n: int) -> bool:\n\"\"\"\nWrite a python function to identify non-prime numbers.\nassert is_not_prime(2) == False\n\"\"\"", "entry_point": "is_not_prime", "cluster_list": [{"programs_str": ["import math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    import math\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "def is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return True\n    for i in range(3, isqrt(n) + 1, 2):\n        if n % i == 0:\n            return True\n    return False", "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "from math import isqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n < 2:\n        return True\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return True\n    return False", "from math import sqrt\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False", "import math\n\ndef is_not_prime(n: int) -> bool:\n    if n <= 1:\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return True\n    return False"], "outputs": "[[False], [False], [True], [False], [True], [False], [True], [True], [True], [False], [True], [True], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [0], [1], [-1], [-5], [13]]", "input_output_examples": "[[[2]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/4", "original_requirement": "def heap_queue_largest(nums: list, n: int) -> list:\n\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def heap_queue_largest(nums: list, n: int) -> list:\n\"\"\"\nWrite a function to find the n largest integers from a given list of numbers, returned in descending order.\n\n\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]\n\"\"\"", "entry_point": "heap_queue_largest", "cluster_list": [{"programs_str": ["from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return nlargest(n, nums)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "from heapq import nlargest\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)", "import heapq\n\ndef heap_queue_largest(nums: list, n: int) -> list:\n    return sorted(heapq.nlargest(n, nums), reverse=True)"], "outputs": "[[[85, 75, 65]], [[50, 40]], [[9, 8, 7, 6, 5]], [[100]], [[5, 5, 5]], [[]], [[]], [[85, 75, 65, 35, 25]], [[10]], [[85, 75, 65, 58, 35, 25, 22, 22, 14]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3], [[10, 20, 30, 40, 50], 2], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 5], [[100, 90, 80, 70, 60], 1], [[5, 5, 5, 5, 5], 3], [[1, 2, 3], 0], [[], 3], [[25, 35, 85, 65, 75], 10], [[10], 1], [[25, 35, 22, 85, 14, 65, 75, 22, 58], 9]]", "input_output_examples": "[[[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]], [[[85, 75, 65]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/6", "original_requirement": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"", "repaired_requirement": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n    Write a Python function to check whether the two numbers differ at exactly one bit position in their binary representation.\n    \n    The function should return:\n    - True if the binary representations of `a` and `b` differ at exactly one bit position, or if `a` and `b` are identical (no differing bits).\n    - False otherwise, including cases where the binary representations differ at more than one bit position.\n\n    The function uses the XOR operation (`a ^ b`) to determine the differing bits and checks if the result is a power of 2, which indicates a single differing bit position. For identical numbers (`a == b`), the XOR result is `0`, which is treated as satisfying the condition.\n\n    Example:\n    assert differ_At_One_Bit_Pos(13, 9) == True\n    \"\"\"", "original_clusters": {"requirement": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n\"\"\"\nWrite a python function to check whether the two numbers differ at one bit position only or not.\nassert differ_At_One_Bit_Pos(13,9) == True\n\"\"\"", "entry_point": "differ_At_One_Bit_Pos", "cluster_list": [{"programs_str": ["def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0"], "outputs": "[[True], [True], [True], [True], [True], [True], [False], [True], [True], [True]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return (a ^ b) & (a ^ b) - 1 == 0 and a != b", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 1"], "outputs": "[[True], [True], [True], [True], [True], [True], [False], [False], [False], [True]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[13, 9], [8, 10], [7, 6], [0, 1], [255, 254], [1024, 1025], [15, 0], [27, 27], [1, 1], [32, 33]]", "input_output_examples": "[[[13, 9]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    \"\"\"\n    Write a Python function to check whether the two numbers differ at exactly one bit position in their binary representation.\n    \n    The function should return:\n    - True if the binary representations of `a` and `b` differ at exactly one bit position, or if `a` and `b` are identical (no differing bits).\n    - False otherwise, including cases where the binary representations differ at more than one bit position.\n\n    The function uses the XOR operation (`a ^ b`) to determine the differing bits and checks if the result is a power of 2, which indicates a single differing bit position. For identical numbers (`a == b`), the XOR result is `0`, which is treated as satisfying the condition.\n\n    Example:\n    assert differ_At_One_Bit_Pos(13, 9) == True\n    \"\"\"", "entry_point": "differ_At_One_Bit_Pos", "cluster_list": [{"programs_str": ["def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    x = a ^ b\n    return x == 0 or x & x - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor = a ^ b\n    return xor == 0 or xor & xor - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    difference = a ^ b\n    return difference == 0 or difference & difference - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    return a == b or (a ^ b != 0 and (a ^ b) & (a ^ b) - 1 == 0)", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor = a ^ b\n    return xor == 0 or xor & xor - 1 == 0", "def differ_At_One_Bit_Pos(a: int, b: int) -> bool:\n    xor_result = a ^ b\n    return xor_result == 0 or xor_result & xor_result - 1 == 0"], "outputs": "[[True], [True], [True], [True], [True], [True], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[13, 9], [8, 10], [7, 6], [0, 1], [255, 254], [1024, 1025], [15, 0], [27, 27], [1, 1], [32, 33]]", "input_output_examples": "[[[13, 9]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.09999999999999998, "original_avg_pass_rate": 0.8710526315789474, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.8333333333333334, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/7", "original_requirement": "from typing import List\n\n\ndef find_char_long(text: str) -> List[str]:\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef find_char_long(text: str) -> List[str]:\n\"\"\"\nWrite a function to find all words which are at least 4 characters long in a string.\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])\n\"\"\"", "entry_point": "find_char_long", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    words = text.split()\n    return [word for word in words if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]", "from typing import List\n\ndef find_char_long(text: str) -> List[str]:\n    return [word for word in text.split() if len(word) >= 4]"], "outputs": "[[['Please', 'move', 'back', 'stream']], [['quick', 'brown', 'jumps', 'over', 'lazy']], [['Short', 'words']], [['longerword', 'this']], [[]], [['12345', '6789']], [['Spaces', 'over', 'here']], [['abcdefgh']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Please move back to stream'], ['A quick brown fox jumps over the lazy dog'], ['Short words'], ['One longerword in this'], [''], ['12345 6789'], ['Spaces all over     here'], ['a b c abcdefgh']]", "input_output_examples": "[[['Please move back to stream']], [[['Please', 'move', 'back', 'stream']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.6571428571428571, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/8", "original_requirement": "from typing import List\n\n\ndef square_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef square_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find squares of individual elements in a list.\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "entry_point": "square_nums", "cluster_list": [{"programs_str": ["from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [x ** 2 for x in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]", "from typing import List\n\ndef square_nums(nums: List[int]) -> List[int]:\n    return [num ** 2 for num in nums]"], "outputs": "[[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]], [[0]], [[100]], [[1, 4, 9]], [[]], [[0, 25, 9, 49]], [[10000, 40000, 90000]], [[4, 4, 4, 4]], [[1]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[0]], [[10]], [[-1, -2, -3]], [[]], [[0, -5, 3, 7]], [[100, 200, 300]], [[2, 2, 2, 2]], [[1]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/9", "original_requirement": "def find_Rotations(s: str) -> int:\n\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def find_Rotations(s: str) -> int:\n\"\"\"\nWrite a python function to find the minimum number of rotations (greater than 0) required to get the same string.\nassert find_Rotations(\"aaaa\") == 1\n\"\"\"", "entry_point": "find_Rotations", "cluster_list": [{"programs_str": ["def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    for i in range(1, len(s)):\n        if s[i:] + s[:i] == s:\n            return i\n    return len(s)", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        rotated = s[i:] + s[:i]\n        if rotated == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    for i in range(1, len(s) + 1):\n        if s[i:] + s[:i] == s:\n            return i", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n + 1):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s == s[i:] + s[:i]:\n            return i\n    return n", "def find_Rotations(s: str) -> int:\n    n = len(s)\n    for i in range(1, n):\n        if s[i:] + s[:i] == s:\n            return i\n    return n"], "outputs": "[[1], [3], [6], [2], [1], [5], [4], [3], [4], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['aaaa'], ['abcabc'], ['abcdef'], ['abab'], ['a'], ['aaaab'], ['abca'], ['abcabcabc'], ['abcdabcd'], ['zzzz']]", "input_output_examples": "[[['aaaa']], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/11", "original_requirement": "def remove_Occ(s: str, ch: str) -> str:\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"", "repaired_requirement": "```python\ndef remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n    Write a Python function to remove the first and last occurrence of a given character from the string.\n    \n    - If the character appears only once in the string, remove that single occurrence.\n    - If the character does not exist in the string, return the original string unchanged.\n    - If the string is empty or the character is an empty string, return the original string unchanged.\n    - Ensure that overlapping indices are handled correctly, i.e., the first and last occurrence must be distinct for both to be removed.\n    \n    Examples:\n    assert remove_Occ(\"hello\", \"l\") == \"heo\"\n    assert remove_Occ(\"banana\", \"a\") == \"bnan\"\n    \"\"\"\n```", "original_clusters": {"requirement": "def remove_Occ(s: str, ch: str) -> str:\n\"\"\"\nWrite a python function to remove first and last occurrence of a given character from the string.\n\n\nassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\"\"\"", "entry_point": "remove_Occ", "cluster_list": [{"programs_str": ["def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    if last_occurrence != -1 and last_occurrence > first_occurrence:\n        s = s[:last_occurrence - 1] + s[last_occurrence:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    if last_occurrence != -1:\n        s = s[:last_occurrence - 1] + s[last_occurrence:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1:\n        last_occ -= 1 if last_occ > first_occ else 0\n        s = s[:last_occ] + s[last_occ + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1:\n        s = s[:last_occ - 1] + s[last_occ:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1 and last_occ != first_occ:\n        s = s[:last_occ - 1] + s[last_occ:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1 and last_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1 and last_occ != first_occ:\n        s = s[:last_occ - 1] + s[last_occ:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    try:\n        first_occurrence = s.index(ch)\n        last_occurrence = s.rindex(ch)\n        s = s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]\n        return s\n    except ValueError:\n        return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1 and first_occ != last_occ:\n        s = s[:last_occ - 1] + s[last_occ:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1 or last_occ == -1 or first_occ == last_occ:\n        return s\n    return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1 and last_occ != first_occ:\n        s = s[:last_occ - 1] + s[last_occ:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1:\n        s = s[:last_occ - 1] + s[last_occ:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1 and last_occ != first_occ:\n        s = s[:last_occ - 1] + s[last_occ:]\n    return s"], "outputs": "[['heo'], ['bnan'], ['bracadabr'], ['mssissipp'], ['aaaa'], ['es'], ['world'], [''], ['ingle']]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1:\n        s = s[:last_occ] + s[last_occ + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index != -1:\n        s = s[:first_index] + s[first_index + 1:]\n    if last_index != -1:\n        s = s[:last_index] + s[last_index + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1 and last_occ < len(s):\n        s = s[:last_occ] + s[last_occ + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index != -1:\n        s = s[:first_index] + s[first_index + 1:]\n    if last_index != -1 and last_index < len(s):\n        s = s[:last_index] + s[last_index + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence != -1:\n        s = s[:first_occurrence] + s[first_occurrence + 1:]\n    if last_occurrence != -1:\n        s = s[:last_occurrence] + s[last_occurrence + 1:]\n    return s"], "outputs": "[['hel'], ['bnana'], ['bracadabra'], ['mssissippi'], ['aaaaa'], ['est'], ['world'], [''], ['ingle']]", "probability": 0.25, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['hello', 'l'], ['hel'], ['heo']]]"}, {"programs_str": ["def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1 and last_occ < len(s):\n        last_occ = s.rfind(ch)\n        s = s[:last_occ] + s[last_occ + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ != -1:\n        s = s[:first_occ] + s[first_occ + 1:]\n    if last_occ != -1 and last_occ < len(s):\n        last_occ = s.rfind(ch)\n        s = s[:last_occ] + s[last_occ + 1:]\n    return s"], "outputs": "[['heo'], ['bnana'], ['bracadabra'], ['mssissippi'], ['aaaaa'], ['est'], ['world'], [''], ['ingle']]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7799302846668992, "llm_generated_inputs": "[['hello', 'l'], ['banana', 'a'], ['abracadabra', 'a'], ['mississippi', 'i'], ['aaaaaa', 'a'], ['test', 't'], ['world', 'z'], ['', 'x'], ['single', '']]", "input_output_examples": "[[['hello', 'l']], [['heo']]]", "weighted_test_consistency": 0.75, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef remove_Occ(s: str, ch: str) -> str:\n    \"\"\"\n    Write a Python function to remove the first and last occurrence of a given character from the string.\n    \n    - If the character appears only once in the string, remove that single occurrence.\n    - If the character does not exist in the string, return the original string unchanged.\n    - If the string is empty or the character is an empty string, return the original string unchanged.\n    - Ensure that overlapping indices are handled correctly, i.e., the first and last occurrence must be distinct for both to be removed.\n    \n    Examples:\n    assert remove_Occ(\"hello\", \"l\") == \"heo\"\n    assert remove_Occ(\"banana\", \"a\") == \"bnan\"\n    \"\"\"\n```", "entry_point": "remove_Occ", "cluster_list": [{"programs_str": ["def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_idx = s.find(ch)\n    last_idx = s.rfind(ch)\n    if first_idx == -1:\n        return s\n    if first_idx == last_idx:\n        return s[:first_idx] + s[first_idx + 1:]\n    else:\n        return s[:first_idx] + s[first_idx + 1:last_idx] + s[last_idx + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    if first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch or ch not in s:\n        return s\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ + 1:]\n    return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch or ch not in s:\n        return s\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    else:\n        return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1:\n        return s\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ + 1:]\n    return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    elif first_occurrence == last_occurrence:\n        return s[:first_occurrence] + s[first_occurrence + 1:]\n    else:\n        return s[:first_occurrence] + s[first_occurrence + 1:last_occurrence] + s[last_occurrence + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_occurrence = s.find(ch)\n    last_occurrence = s.rfind(ch)\n    if first_occurrence == -1:\n        return s\n    s = s[:first_occurrence] + s[first_occurrence + 1:]\n    if first_occurrence != last_occurrence:\n        s = s[:last_occurrence - 1] + s[last_occurrence:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch or s.count(ch) == 0:\n        return s\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1:\n        return s\n    result = s[:first_occ] + s[first_occ + 1:] if first_occ != last_occ else s[:first_occ] + s[first_occ + 1:]\n    if first_occ != last_occ:\n        result = result[:last_occ - 1] + result[last_occ:]\n    return result", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    s = s[:first_index] + s[first_index + 1:]\n    last_index = s.rfind(ch)\n    if last_index != -1:\n        s = s[:last_index] + s[last_index + 1:]\n    return s", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1:\n        return s\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ + 1:]\n    return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index == -1:\n        return s\n    if first_index == last_index:\n        return s[:first_index] + s[first_index + 1:]\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "from typing import str\n\ndef remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch:\n        return s\n    first_idx = s.find(ch)\n    last_idx = s.rfind(ch)\n    if first_idx == -1:\n        return s\n    if first_idx == last_idx:\n        return s[:first_idx] + s[first_idx + 1:]\n    return s[:first_idx] + s[first_idx + 1:last_idx] + s[last_idx + 1:]", "def remove_Occ(s: str, ch: str) -> str:\n    if not s or not ch or len(ch) != 1:\n        return s\n    first_occ = s.find(ch)\n    last_occ = s.rfind(ch)\n    if first_occ == -1:\n        return s\n    if first_occ == last_occ:\n        return s[:first_occ] + s[first_occ + 1:]\n    return s[:first_occ] + s[first_occ + 1:last_occ] + s[last_occ + 1:]"], "outputs": "[['heo'], ['bnan'], ['bracadabr'], ['mssissipp'], ['aaaa'], ['es'], ['world'], [''], ['single']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['hello', 'l'], ['banana', 'a'], ['abracadabra', 'a'], ['mississippi', 'i'], ['aaaaaa', 'a'], ['test', 't'], ['world', 'z'], ['', 'x'], ['single', '']]", "input_output_examples": "[[['hello', 'l']], [['heo']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.9018867924528301, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/12", "original_requirement": "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a function to sort a given matrix in ascending order according to the sum of its rows.\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\"\"\"", "entry_point": "sort_matrix", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))", "from typing import List\n\ndef sort_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return sorted(matrix, key=lambda row: sum(row))"], "outputs": "[[[[1, 1, 1], [1, 2, 3], [2, 4, 5]]], [[[1, 1, 1], [2, 2, 2], [3, 3, 3]]], [[[5, 5], [10, 20], [15, 15]]], [[[3], [10, 5], [7, 8, 9]]], [[[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]]], [[[5, 5, 5], [5, 5, 5], [5, 5, 6]]], [[[100]]], [[]], [[[-2, -2], [0, 0, 0], [1, -1, 0]]], [[[2], [1, 2], [6], [3, 4, 5]]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]], [[[3, 3, 3], [1, 1, 1], [2, 2, 2]]], [[[10, 20], [5, 5], [15, 15]]], [[[7, 8, 9], [10, 5], [3]]], [[[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]]], [[[5, 5, 5], [5, 5, 5], [5, 5, 6]]], [[[100]]], [[]], [[[0, 0, 0], [1, -1, 0], [-2, -2]]], [[[1, 2], [2], [3, 4, 5], [6]]]]", "input_output_examples": "[[[[[1, 2, 3], [2, 4, 5], [1, 1, 1]]]], [[[[1, 1, 1], [1, 2, 3], [2, 4, 5]]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/14", "original_requirement": "def find_Volume(l: float, b: float, h: float) -> float:\n\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def find_Volume(l: float, b: float, h: float) -> float:\n\"\"\"\nWrite a python function to find the volume of a triangular prism.\nassert find_Volume(10,8,6) == 240\n\"\"\"", "entry_point": "find_Volume", "cluster_list": [{"programs_str": ["from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return l * (b * h / 2)", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import Union\n\ndef find_Volume(l: Union[float, int], b: Union[float, int], h: Union[float, int]) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "def find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l", "from typing import float\n\ndef find_Volume(l: float, b: float, h: float) -> float:\n    return 0.5 * b * h * l"], "outputs": "[['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10.0, 8.0, 6.0], [0.0, 8.0, 6.0], [10.0, 0.0, 6.0], [10.0, 8.0, 0.0], [0.0, 0.0, 0.0], [1.0, 1.0, 1.0], [1000.0, 500.0, 300.0], [5.5, 3.2, 7.1], [-10.0, 8.0, 6.0], [10.0, -8.0, 6.0], [10.0, 8.0, -6.0]]", "input_output_examples": "[[[10, 8, 6]], [[240]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/16", "original_requirement": "def text_lowercase_underscore(text: str) -> bool:\n\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"", "repaired_requirement": "```python\ndef text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n    Write a function that returns True if the input string consists of one or more sequences of \n    lowercase letters, where each sequence may optionally be joined by a single underscore. \n    The string must not start or end with an underscore, and consecutive underscores are not allowed.\n    Return False otherwise.\n\n    Examples:\n    - A single sequence of lowercase letters without underscores (e.g., \"abcdef\") is valid and should return True.\n    - Multiple sequences of lowercase letters joined by single underscores (e.g., \"abc_def_ghi\") are valid and should return True.\n    - Strings with leading or trailing underscores, consecutive underscores, or containing characters other than lowercase letters and underscores are invalid and should return False.\n\n    assert text_lowercase_underscore(\"aab_cbbbc\") == True\n    \"\"\"\n```", "original_clusters": {"requirement": "def text_lowercase_underscore(text: str) -> bool:\n\"\"\"\nWrite a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\nassert text_lowercase_underscore(\"aab_cbbbc\")==(True)\n\"\"\"", "entry_point": "text_lowercase_underscore", "cluster_list": [{"programs_str": ["import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+_[a-z]+', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+_[a-z]+', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+_[a-z]+', text))"], "outputs": "[[True], [True], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)+', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)+', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)+', text))"], "outputs": "[[True], [True], [False], [False], [False], [False], [True], [False], [False], [False], [False], [False], [False], [True]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(?:_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(?:_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(?:_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(?:_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(?:_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(?:_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(?:_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [False], [False], [False], [False], [False], [False], [True]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7453115759478262, "llm_generated_inputs": "[['aab_cbbbc'], ['abc_def'], ['abcdef'], ['abc_123'], ['ABC_DEF'], ['abc__def'], ['abc_def_ghi'], ['abc_defG_hi'], ['_abc_def'], ['abc_def_'], [''], ['_'], ['__'], ['a_b_c_d_e']]", "input_output_examples": "[[['aab_cbbbc']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef text_lowercase_underscore(text: str) -> bool:\n    \"\"\"\n    Write a function that returns True if the input string consists of one or more sequences of \n    lowercase letters, where each sequence may optionally be joined by a single underscore. \n    The string must not start or end with an underscore, and consecutive underscores are not allowed.\n    Return False otherwise.\n\n    Examples:\n    - A single sequence of lowercase letters without underscores (e.g., \"abcdef\") is valid and should return True.\n    - Multiple sequences of lowercase letters joined by single underscores (e.g., \"abc_def_ghi\") are valid and should return True.\n    - Strings with leading or trailing underscores, consecutive underscores, or containing characters other than lowercase letters and underscores are invalid and should return False.\n\n    assert text_lowercase_underscore(\"aab_cbbbc\") == True\n    \"\"\"\n```", "entry_point": "text_lowercase_underscore", "cluster_list": [{"programs_str": ["import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    if not text or text.startswith('_') or text.endswith('_'):\n        return False\n    if '__' in text:\n        return False\n    pattern = re.compile('^[a-z]+(_[a-z]+)*$')\n    return bool(pattern.match(text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return re.match(pattern, text) is not None", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(?:_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(?:_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(?:_[a-z]+)*$'\n    return bool(re.fullmatch(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(?:_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(?:_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    pattern = '^[a-z]+(?:_[a-z]+)*$'\n    return bool(re.match(pattern, text))", "import re\n\ndef text_lowercase_underscore(text: str) -> bool:\n    return bool(re.fullmatch('[a-z]+(_[a-z]+)*', text))"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [False], [False], [False], [False], [False], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['aab_cbbbc'], ['abc_def'], ['abcdef'], ['abc_123'], ['ABC_DEF'], ['abc__def'], ['abc_def_ghi'], ['abc_defG_hi'], ['_abc_def'], ['abc_def_'], [''], ['_'], ['__'], ['a_b_c_d_e']]", "input_output_examples": "[[['aab_cbbbc']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.9732758620689654, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/17", "original_requirement": "def square_perimeter(a: int) -> int:\n\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def square_perimeter(a: int) -> int:\n\"\"\"\nWrite a function that returns the perimeter of a square given its side length as input.\nassert square_perimeter(10)==40\n\"\"\"", "entry_point": "square_perimeter", "cluster_list": [{"programs_str": ["def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "def square_perimeter(a: int) -> int:\n    return 4 * a", "from typing import int\n\ndef square_perimeter(a: int) -> int:\n    return 4 * a"], "outputs": "[[4], [0], [-4], [40], [400], [8589934588], [-8589934592]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [0], [-1], [10], [100], [2147483647], [-2147483648]]", "input_output_examples": "[[[10]], [[40]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/18", "original_requirement": "def remove_dirty_chars(string: str, second_string: str) -> str:\n\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def remove_dirty_chars(string: str, second_string: str) -> str:\n\"\"\"\nWrite a function to remove characters from the first string which are present in the second string.\n\n\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\"\"\"", "entry_point": "remove_dirty_chars", "cluster_list": [{"programs_str": ["def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in set(second_string)))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join([char for char in string if char not in set(second_string)])", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join([char for char in string if char not in set(second_string)])", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    dirty_set = set(second_string)\n    return ''.join(filter(lambda char: char not in dirty_set, string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join(filter(lambda char: char not in set(second_string), string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join([char for char in string if char not in set(second_string)])", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    dirty_set = set(second_string)\n    return ''.join((char for char in string if char not in dirty_set))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    dirty_chars = set(second_string)\n    return ''.join((char for char in string if char not in dirty_chars))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join([char for char in string if char not in second_string])", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in set(second_string)))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in second_string))", "from typing import str\n\ndef remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in set(second_string)))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((char for char in string if char not in set(second_string)))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join([char for char in string if char not in second_string])", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((c for c in string if c not in second_string))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join((ch for ch in string if ch not in set(second_string)))", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join([char for char in string if char not in set(second_string)])", "def remove_dirty_chars(string: str, second_string: str) -> str:\n    return ''.join([char for char in string if char not in second_string])"], "outputs": "[['bacuve'], ['he'], ['abcdefgh'], ['abcd'], ['pil$$3'], ['15'], ['empty'], [''], [''], ['alluppercase'], ['MXDAE']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['probasscurve', 'pros'], ['hello', 'world'], ['abcdefgh', 'xyz'], ['abcdef', 'efghijk'], ['special$$charact3rs', 'characters'], ['12345', '234'], ['empty', ''], ['', 'nonempty'], ['', ''], ['alluppercase', 'ALLUPPERCASE'], ['MiXeDcAsE', 'mixedcase']]", "input_output_examples": "[[['probasscurve', 'pros']], [['bacuve']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/19", "original_requirement": "from typing import List\n\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n\"\"\"\nWrite a function to find whether a given array of integers contains any duplicate element.\nassert test_duplicate(([1,2,3,4,5]))==False\n\"\"\"", "entry_point": "test_duplicate", "cluster_list": [{"programs_str": ["from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))", "from typing import List\n\ndef test_duplicate(arraynums: List[int]) -> bool:\n    return len(arraynums) != len(set(arraynums))"], "outputs": "[[False], [True], [True], [False], [True], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[1, 1, 2, 3, 4]], [[0, -1, -1, 2, 3]], [[]], [[100000, 200000, 100000]], [[1]], [[1, 2, 3, 3, 4, 5, 6]], [[-3, -2, -1, 0, 1, 2, 3]], [[2147483647, -2147483648, 0, 2147483647]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/20", "original_requirement": "def is_woodall(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given number is woodall or not.\nassert is_woodall(383) == True\n\"\"\"", "repaired_requirement": "def is_woodall(num: int) -> bool:\n    \"\"\"\n    Write a function to check if the given number is a Woodall number or not.\n\n    A Woodall number is defined by the formula: W(n) = n * 2^n - 1, where n is a non-negative integer (n >= 0).\n    The function should determine if the input number matches any Woodall number generated by this formula.\n\n    Behavior:\n    1. The function accepts any integer input, including negative numbers, zero, and positive numbers.\n    2. The function returns `True` if the input number matches a Woodall number, and `False` otherwise.\n    3. For negative inputs, the function evaluates whether they match the formula for any valid non-negative n (e.g., -1 matches W(0) because W(0) = 0 * 2^0 - 1 = -1). \n       The function performs an exhaustive search over non-negative n, starting from n = 0, and stops when the generated Woodall number exceeds the input number.\n    4. The function does not raise exceptions for invalid inputs; it always returns a boolean value. Non-integer inputs are considered invalid and return `False`.\n\n    Examples:\n    assert is_woodall(383) == True\n    ### Test 1\n    Input: [-1]\n    Expected Output: [True]\n    ### Test 2\n    Input: [0]\n    Expected Output: [False]\n    \"\"\"", "original_clusters": {"requirement": "def is_woodall(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given number is woodall or not.\nassert is_woodall(383) == True\n\"\"\"", "entry_point": "is_woodall", "cluster_list": [{"programs_str": ["from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    if num < 1:\n        return False\n    n = floor(log2(num + 1))\n    return num == n * 2 ** n - 1", "from math import log2\n\ndef is_woodall(num: int) -> bool:\n    if num <= 0:\n        return False\n    n = int(log2(num + 1))\n    return num == n * 2 ** n - 1", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    if num < 1:\n        return False\n    n = floor(log2(num + 1))\n    return num == n * 2 ** n - 1", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    if num <= 0:\n        return False\n    n = floor(log2(num + 1))\n    return num == n * 2 ** n - 1"], "outputs": "[[False], [False], [True], [False], [False], [False], [False], [False], [False], [False]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[383], [False], [True]]]"}, {"programs_str": ["import math\n\ndef is_woodall(num: int) -> bool:\n    n = 0\n    while True:\n        woodall_num = n * 2 ** n - 1\n        if woodall_num == num:\n            return True\n        if woodall_num > num:\n            return False\n        n += 1", "import math\n\ndef is_woodall(num: int) -> bool:\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 0\n    while True:\n        woodall_num = n * 2 ** n - 1\n        if woodall_num > num:\n            return False\n        if woodall_num == num:\n            return True\n        n += 1", "import math\n\ndef is_woodall(num: int) -> bool:\n    n = 0\n    while True:\n        woodall = n * 2 ** n - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1", "import math\n\ndef is_woodall(num: int) -> bool:\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "import math\n\ndef is_woodall(num: int) -> bool:\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    import math\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1"], "outputs": "[[False], [True], [True], [False], [True], [True], [True], [False], [False], [False]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    if num <= 0:\n        return False\n    n = floor(log2(num))\n    return 2 ** n * n - 1 == num", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    if num <= 0:\n        return False\n    n = floor(log2(num))\n    return num == n * 2 ** n - 1", "from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    if num <= 0:\n        return False\n    n = floor(log2(num))\n    return num == n * 2 ** n - 1"], "outputs": "[[False], [False], [False], [False], [True], [False], [False], [False], [False], [False]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[383], [False], [True]]]"}, {"programs_str": ["import math\n\ndef is_woodall(num: int) -> bool:\n    for n in range(num):\n        woodall_num = n * 2 ** n - 1\n        if woodall_num == num:\n            return True\n        if woodall_num > num:\n            break\n    return False", "import math\n\ndef is_woodall(num: int) -> bool:\n    if num <= 0:\n        return False\n    for n in range(1, int(math.log2(num)) + 1):\n        woodall = n * 2 ** n - 1\n        if woodall == num:\n            return True\n        elif woodall > num:\n            break\n    return False"], "outputs": "[[False], [False], [False], [False], [True], [True], [True], [False], [False], [False]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef is_woodall(num: int) -> bool:\n    for n in range(int(math.log2(num))):\n        if num == n * 2 ** n - 1:\n            return True\n    return False"], "outputs": "[['ValueError'], ['ValueError'], [False], [False], [False], [True], [True], [False], [False], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import log2\n\ndef is_woodall(num: int) -> bool:\n    if num < 0:\n        return False\n    n = log2(num + 1)\n    return n.is_integer() and num == int(n * (2 ** n - 1))"], "outputs": "[[True], [False], [True], [False], [False], [False], [False], [False], [False], [False]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[383], [False], [True]]]"}, {"programs_str": ["from math import log2, floor\n\ndef is_woodall(num: int) -> bool:\n    if num <= 0:\n        return False\n    n = floor(log2(num / (log2(num) + 1)))\n    return num == n * 2 ** n - 1"], "outputs": "[[False], [False], [False], [False], [False], [False], [False], [False], [False], [False]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[383], [False], [True]]]"}], "entropy": 0.8492633763712859, "llm_generated_inputs": "[[0], [-1], [1], [3], [7], [23], [383], [12287], [100], [104857]]", "input_output_examples": "[[[383]], [[True]]]", "weighted_test_consistency": 0.55, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def is_woodall(num: int) -> bool:\n    \"\"\"\n    Write a function to check if the given number is a Woodall number or not.\n\n    A Woodall number is defined by the formula: W(n) = n * 2^n - 1, where n is a non-negative integer (n >= 0).\n    The function should determine if the input number matches any Woodall number generated by this formula.\n\n    Behavior:\n    1. The function accepts any integer input, including negative numbers, zero, and positive numbers.\n    2. The function returns `True` if the input number matches a Woodall number, and `False` otherwise.\n    3. For negative inputs, the function evaluates whether they match the formula for any valid non-negative n (e.g., -1 matches W(0) because W(0) = 0 * 2^0 - 1 = -1). \n       The function performs an exhaustive search over non-negative n, starting from n = 0, and stops when the generated Woodall number exceeds the input number.\n    4. The function does not raise exceptions for invalid inputs; it always returns a boolean value. Non-integer inputs are considered invalid and return `False`.\n\n    Examples:\n    assert is_woodall(383) == True\n    ### Test 1\n    Input: [-1]\n    Expected Output: [True]\n    ### Test 2\n    Input: [0]\n    Expected Output: [False]\n    \"\"\"", "entry_point": "is_woodall", "cluster_list": [{"programs_str": ["def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_num = n * 2 ** n - 1\n        if woodall_num == num:\n            return True\n        if woodall_num > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall = n * 2 ** n - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            break\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall = n * 2 ** n - 1\n        if woodall == num:\n            return True\n        elif woodall > num:\n            return False\n        n += 1", "import math\n\ndef is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1", "from typing import Union\n\ndef is_woodall(num: Union[int, float]) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall = n * 2 ** n - 1\n        if woodall == num:\n            return True\n        elif woodall > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_num = n * 2 ** n - 1\n        if woodall_num == num:\n            return True\n        if woodall_num > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall = n * 2 ** n - 1\n        if woodall == num:\n            return True\n        elif woodall > num:\n            break\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            break\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        elif woodall_number > abs(num):\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_num = n * 2 ** n - 1\n        if woodall_num == num:\n            return True\n        if woodall_num > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall = n * 2 ** n - 1\n        if woodall == num:\n            return True\n        if woodall > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            break\n        n += 1\n    return False", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_number = n * 2 ** n - 1\n        if woodall_number == num:\n            return True\n        if woodall_number > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_num = n * 2 ** n - 1\n        if woodall_num == num:\n            return True\n        if woodall_num > num:\n            return False\n        n += 1", "def is_woodall(num: int) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall = n * 2 ** n - 1\n        if woodall == num:\n            return True\n        elif woodall > num:\n            return False\n        n += 1", "from typing import Union\n\ndef is_woodall(num: Union[int, float]) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall_num = n * 2 ** n - 1\n        if woodall_num == num:\n            return True\n        if woodall_num > num:\n            return False\n        n += 1", "from typing import Any\n\ndef is_woodall(num: Any) -> bool:\n    if not isinstance(num, int):\n        return False\n    n = 0\n    while True:\n        woodall = n * 2 ** n - 1\n        if woodall == num:\n            return True\n        elif woodall > num:\n            return False\n        n += 1"], "outputs": "[[False], [True], [True], [False], [True], [True], [True], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [-1], [1], [3], [7], [23], [383], [12287], [100], [104857]]", "input_output_examples": "[[[383]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.6, "original_avg_pass_rate": 0.9096153846153847, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/56", "original_requirement": "def check(n: int) -> bool:\n\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def check(n: int) -> bool:\n\"\"\"\nWrite a python function to check if a given number is one less than twice its reverse.\nassert check(70) == False\n\"\"\"", "entry_point": "check", "cluster_list": [{"programs_str": ["def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n\n    def reverse_number(num: int) -> int:\n        return int(str(num)[::-1])\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_number = int(str(n)[::-1])\n    return n == 2 * reversed_number - 1", "def check(n: int) -> bool:\n\n    def reverse_number(num: int) -> int:\n        return int(str(num)[::-1])\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reversed_n = int(str(n)[::-1])\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n    reverse_n = int(str(n)[::-1])\n    return n == 2 * reverse_n - 1", "def check(n: int) -> bool:\n\n    def reverse_number(x: int) -> int:\n        return int(str(x)[::-1])\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1", "def check(n: int) -> bool:\n\n    def reverse_number(x: int) -> int:\n        return int(str(x)[::-1])\n    reversed_n = reverse_number(n)\n    return n == 2 * reversed_n - 1"], "outputs": "[[False], [False], [True], [False], [False], [False], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[12], [21], [1], [70], [11], [123], [321], [101], [202], [0]]", "input_output_examples": "[[[70]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/57", "original_requirement": "from typing import List\n\n\ndef find_Max_Num(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef find_Max_Num(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the largest number that can be formed with the given list of digits.\nassert find_Max_Num([1,2,3]) == 321\n\"\"\"", "entry_point": "find_Max_Num", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    sorted_arr = sorted(arr, reverse=True)\n    max_num_str = ''.join(map(str, sorted_arr))\n    return int(max_num_str)", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    arr = sorted(arr, reverse=True)\n    return int(''.join(map(str, arr)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    sorted_arr = sorted(arr, reverse=True)\n    max_number = int(''.join(map(str, sorted_arr)))\n    return max_number", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))", "from typing import List\n\ndef find_Max_Num(arr: List[int]) -> int:\n    return int(''.join(sorted(map(str, arr), reverse=True)))"], "outputs": "[[321], [9851], [0], [321], [7640], [1], [9], [987654321], [777], ['ValueError'], [100101]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[9, 1, 5, 8]], [[0, 0, 0]], [[3, 2, 1]], [[6, 7, 0, 4]], [[1]], [[9]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[7, 7, 7]], [[]], [[1, 10, 100]]]", "input_output_examples": "[[[[1, 2, 3]]], [[321]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/58", "original_requirement": "def opposite_Signs(x: int, y: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"", "repaired_requirement": "```python\ndef opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n    Write a Python function to check whether the given two integers have opposite signs or not.\n\n    Two integers are considered to have opposite signs if one is strictly positive and the other is strictly negative, \n    or if one is zero (treated as non-negative) and the other is strictly negative. \n    This determination is based on the binary representation of the integers, where the most significant bit (MSB) \n    indicates the sign: 0 for non-negative numbers (including zero) and 1 for negative numbers.\n\n    Examples:\n    - opposite_Signs(1, -2) -> True (1 is positive, -2 is negative)\n    - opposite_Signs(0, -5) -> True (0 is non-negative, -5 is negative)\n    - opposite_Signs(0, 5) -> False (both are non-negative)\n    - opposite_Signs(3, 7) -> False (both are positive)\n    - opposite_Signs(-3, -7) -> False (both are negative)\n\n    Note:\n    - Zero (0) is treated as non-negative (neutral) in this context.\n    - The function uses bitwise XOR (`^`) to determine opposite signs based on the MSB of the integers.\n\n    assert opposite_Signs(1, -2) == True\n    \"\"\"\n```", "original_clusters": {"requirement": "def opposite_Signs(x: int, y: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given two integers have opposite sign or not.\nassert opposite_Signs(1,-2) == True\n\"\"\"", "entry_point": "opposite_Signs", "cluster_list": [{"programs_str": ["def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)"], "outputs": "[[True], [True], [True], [True], [False], [False], [False], [True], [True]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def opposite_Signs(x: int, y: int) -> bool:\n    return x < 0 and y > 0 or (x > 0 and y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x < 0 and y > 0 or (x > 0 and y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x > 0 and y < 0 or (x < 0 and y > 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x < 0 and y > 0 or (x > 0 and y < 0)"], "outputs": "[[True], [True], [False], [False], [False], [False], [False], [True], [True]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[1, -2], [-10, 15], [0, -5], [-5, 0], [-3, -7], [4, 0], [0, 0], [100, -100], [-1, 1]]", "input_output_examples": "[[[1, -2]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef opposite_Signs(x: int, y: int) -> bool:\n    \"\"\"\n    Write a Python function to check whether the given two integers have opposite signs or not.\n\n    Two integers are considered to have opposite signs if one is strictly positive and the other is strictly negative, \n    or if one is zero (treated as non-negative) and the other is strictly negative. \n    This determination is based on the binary representation of the integers, where the most significant bit (MSB) \n    indicates the sign: 0 for non-negative numbers (including zero) and 1 for negative numbers.\n\n    Examples:\n    - opposite_Signs(1, -2) -> True (1 is positive, -2 is negative)\n    - opposite_Signs(0, -5) -> True (0 is non-negative, -5 is negative)\n    - opposite_Signs(0, 5) -> False (both are non-negative)\n    - opposite_Signs(3, 7) -> False (both are positive)\n    - opposite_Signs(-3, -7) -> False (both are negative)\n\n    Note:\n    - Zero (0) is treated as non-negative (neutral) in this context.\n    - The function uses bitwise XOR (`^`) to determine opposite signs based on the MSB of the integers.\n\n    assert opposite_Signs(1, -2) == True\n    \"\"\"\n```", "entry_point": "opposite_Signs", "cluster_list": [{"programs_str": ["def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0 or (x == 0 and y < 0) or (y == 0 and x < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0 or (x >= 0 and y < 0) or (x < 0 and y >= 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return (x < 0) != (y < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0 or (x == 0 and y < 0) or (y == 0 and x < 0)", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0", "def opposite_Signs(x: int, y: int) -> bool:\n    return x ^ y < 0"], "outputs": "[[True], [True], [True], [True], [False], [False], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1, -2], [-10, 15], [0, -5], [-5, 0], [-3, -7], [4, 0], [0, 0], [100, -100], [-1, 1]]", "input_output_examples": "[[[1, -2]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/59", "original_requirement": "def is_octagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_octagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth octagonal number.\nassert is_octagonal(5) == 65\n\"\"\"", "entry_point": "is_octagonal", "cluster_list": [{"programs_str": ["def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)", "def is_octagonal(n: int) -> int:\n    return n * (3 * n - 2)"], "outputs": "[[1], [65], [280], [1160], [0], [5], [2999992000005]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [5], [10], [20], [0], [-1], [999999]]", "input_output_examples": "[[[5]], [[65]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/61", "original_requirement": "def count_Substrings(s: str) -> int:\n\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_Substrings(s: str) -> int:\n\"\"\"\nWrite a python function to count the number of substrings with the sum of digits equal to their length.\nassert count_Substrings('112112') == 6\n\"\"\"", "entry_point": "count_Substrings", "cluster_list": [{"programs_str": ["from typing import List\n\ndef count_Substrings(s: str) -> int:\n\n    def sum_of_digits(sub: str) -> int:\n        return sum((int(char) for char in sub))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub = s[i:j]\n            if sum_of_digits(sub) == len(sub):\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n\n    def digit_sum(sub):\n        return sum((int(ch) for ch in sub))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n\n    def digit_sum(substr: str) -> int:\n        return sum((int(ch) for ch in substr))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substr = s[i:j]\n            if digit_sum(substr) == len(substr):\n                count += 1\n    return count", "from typing import List\n\ndef count_Substrings(s: str) -> int:\n\n    def sum_digits(substring: str) -> int:\n        return sum(map(int, substring))\n    n = len(s)\n    count = 0\n    for start in range(n):\n        for end in range(start + 1, n + 1):\n            substring = s[start:end]\n            if sum_digits(substring) == len(substring):\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n\n    def digit_sum(substr: str) -> int:\n        return sum((int(char) for char in substr))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    return count", "from typing import List\n\ndef count_Substrings(s: str) -> int:\n\n    def digit_sum(sub: str) -> int:\n        return sum((int(char) for char in sub))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j + 1]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    return count", "from typing import List\n\ndef count_Substrings(s: str) -> int:\n\n    def digit_sum(sub: str) -> int:\n        return sum((int(ch) for ch in sub))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n\n    def digit_sum(substring: str) -> int:\n        return sum((int(char) for char in substring))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    return count", "from typing import Any\n\ndef count_Substrings(s: str) -> int:\n\n    def substring_sum_and_length(sub: str) -> tuple[int, int]:\n        return (sum((int(ch) for ch in sub)), len(sub))\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            sub = s[i:j]\n            digit_sum, length = substring_sum_and_length(sub)\n            if digit_sum == length:\n                count += 1\n    return count", "from typing import List\n\ndef count_Substrings(s: str) -> int:\n\n    def digit_sum(sub: str) -> int:\n        return sum((int(char) for char in sub))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n\n    def digit_sum(substring):\n        return sum((int(ch) for ch in substring))\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j + 1]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    return count", "from typing import List\n\ndef count_Substrings(s: str) -> int:\n\n    def digit_sum(substr: str) -> int:\n        return sum((int(ch) for ch in substr))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if digit_sum(s[i:j]) == j - i:\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n\n    def digit_sum(s: str) -> int:\n        return sum((int(ch) for ch in s))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n\n    def sum_of_digits(substring: str) -> int:\n        return sum((int(char) for char in substring))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            if sum_of_digits(s[i:j]) == len(s[i:j]):\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n\n    def digit_sum(sub):\n        return sum((int(c) for c in sub))\n    count = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n\n    def sum_of_digits(substring: str) -> int:\n        return sum((int(char) for char in substring))\n    n = len(s)\n    count = 0\n    for start in range(n):\n        for end in range(start + 1, n + 1):\n            substring = s[start:end]\n            if sum_of_digits(substring) == len(substring):\n                count += 1\n    return count", "from typing import List\n\ndef count_Substrings(s: str) -> int:\n\n    def sum_of_digits(sub: str) -> int:\n        return sum((int(ch) for ch in sub))\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n + 1):\n            substring = s[i:j]\n            if sum_of_digits(substring) == len(substring):\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n\n    def digit_sum(substring: str) -> int:\n        return sum((int(ch) for ch in substring))\n    count = 0\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            substring = s[i:j]\n            if digit_sum(substring) == len(substring):\n                count += 1\n    return count", "def count_Substrings(s: str) -> int:\n    n = len(s)\n    total_count = 0\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                total_count += 1\n    return total_count", "def count_Substrings(s: str) -> int:\n\n    def digit_sum(substring: str) -> int:\n        return sum((int(d) for d in substring))\n    n = len(s)\n    count = 0\n    for start in range(n):\n        for end in range(start + 1, n + 1):\n            if digit_sum(s[start:end]) == len(s[start:end]):\n                count += 1\n    return count"], "outputs": "[[6], [1], [6], [0], [0], [3], [1], [0], [1], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['112112'], ['1234'], ['111'], ['000'], ['222'], ['101010'], ['10'], ['9999'], ['1'], ['']]", "input_output_examples": "[[['112112']], [[6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/62", "original_requirement": "from typing import List\n\n\ndef smallest_num(xs: List[int]) -> int:\n\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef smallest_num(xs: List[int]) -> int:\n\"\"\"\nWrite a python function to find smallest number in a list.\nassert smallest_num([10, 20, 1, 45, 99]) == 1\n\"\"\"", "entry_point": "smallest_num", "cluster_list": [{"programs_str": ["from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)", "from typing import List\n\ndef smallest_num(xs: List[int]) -> int:\n    return min(xs)"], "outputs": "[[1], [-2], [100], [-25], ['ValueError'], [10]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[10, 20, 1, 45, 99]], [[5, 7, -2, 0, 3]], [[100]], [[10, -15, 20, -25, 30]], [[]], [[10, 10, 10]]]", "input_output_examples": "[[[[10, 20, 1, 45, 99]]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/63", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum difference between available pairs in the given tuple list.\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\"\"\"", "entry_point": "max_difference", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(b - a) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(b - a) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(x - y) for x, y in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))", "from typing import List, Tuple\n\ndef max_difference(test_list: List[Tuple[int, int]]) -> int:\n    return max((abs(a - b) for a, b in test_list))"], "outputs": "[[7], [10], [50], [0], ['ValueError'], [0], [1], [9], [20]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[(3, 5), (1, 7), (10, 3), (1, 2)]], [[(0, 10), (15, 5), (7, 7), (3, 8)]], [[(100, 50), (75, 25), (40, 20), (10, 5)]], [[(1, 1), (2, 2), (3, 3), (4, 4)]], [[]], [[(3, 3)]], [[(1, 2), (2, 1), (3, 4), (4, 3)]], [[(-5, -3), (-10, -1), (-7, -5)]], [[(-10, 10), (5, -5), (-7, 7), (3, -3)]]]", "input_output_examples": "[[[[(3, 5), (1, 7), (10, 3), (1, 2)]]], [[7]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/64", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n\"\"\"\nWrite a function to sort a list of tuples using the second value of each tuple.\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\"\"\"", "entry_point": "subject_marks", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])", "from typing import List, Tuple\n\ndef subject_marks(subjectmarks: List[Tuple[str, int]]) -> List[Tuple[str, int]]:\n    return sorted(subjectmarks, key=lambda x: x[1])"], "outputs": "[[[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]], [[('Maths', 50), ('English', 50), ('Science', 75), ('History', 75)]], [[('Physics', 92)]], [[('English', 58), ('History', 72), ('Maths', 85), ('Art', 85), ('Science', 90)]], [[]], [[('Math', 100), ('Science', 100), ('Art', 100)]], [[('English', 0)]], [[('Science', -1), ('English', 82), ('Maths', 88), ('History', 90)]], [[('Subject2', 40), ('Subject4', 40), ('Subject1', 60), ('Subject3', 60)]], [[('SubjectC', 32), ('SubjectA', 33), ('SubjectB', 34), ('SubjectD', 35)]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]], [[('Maths', 50), ('Science', 75), ('English', 50), ('History', 75)]], [[('Physics', 92)]], [[('Maths', 85), ('Science', 90), ('English', 58), ('History', 72), ('Art', 85)]], [[]], [[('Math', 100), ('Science', 100), ('Art', 100)]], [[('English', 0)]], [[('Maths', 88), ('Science', -1), ('History', 90), ('English', 82)]], [[('Subject1', 60), ('Subject2', 40), ('Subject3', 60), ('Subject4', 40)]], [[('SubjectA', 33), ('SubjectB', 34), ('SubjectC', 32), ('SubjectD', 35)]]]", "input_output_examples": "[[[[('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]]], [[[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/65", "original_requirement": "from typing import List\nfrom typing import Union\n\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Union\n\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\"\"\"\nWrite a function to flatten a list and sum all of its elements.\nassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\"\"\"", "entry_point": "recursive_list_sum", "cluster_list": [{"programs_str": ["from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(data):\n        if isinstance(data, int):\n            return data\n        elif isinstance(data, list):\n            return sum((flatten_and_sum(item) for item in data))\n    return flatten_and_sum(data_list)", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(data):\n        total = 0\n        for item in data:\n            if isinstance(item, list):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    return flatten_and_sum(data_list)", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(lst: List[Union[int, List]]) -> int:\n        total = 0\n        for item in lst:\n            if isinstance(item, list):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    return flatten_and_sum(data_list)", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(lst):\n        total = 0\n        for item in lst:\n            if isinstance(item, list):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    return flatten_and_sum(data_list)", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(lst: List[Union[int, List]]) -> int:\n        total = 0\n        for item in lst:\n            if isinstance(item, list):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    return flatten_and_sum(data_list)", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(lst: List[Union[int, List]]) -> int:\n        total = 0\n        for item in lst:\n            if isinstance(item, list):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    return flatten_and_sum(data_list)", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(data):\n        total = 0\n        for item in data:\n            if isinstance(item, list):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    return flatten_and_sum(data_list)", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(data):\n        total = 0\n        for elem in data:\n            if isinstance(elem, list):\n                total += flatten_and_sum(elem)\n            else:\n                total += elem\n        return total\n    return flatten_and_sum(data_list)", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(lst):\n        total = 0\n        for item in lst:\n            if isinstance(item, list):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    return flatten_and_sum(data_list)", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for item in data_list:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(lst):\n        total = 0\n        for item in lst:\n            if isinstance(item, list):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    return flatten_and_sum(data_list)", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n    total = 0\n    for element in data_list:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total", "from typing import List, Union\n\ndef recursive_list_sum(data_list: List[Union[int, List]]) -> int:\n\n    def flatten_and_sum(data):\n        total = 0\n        for item in data:\n            if isinstance(item, list):\n                total += flatten_and_sum(item)\n            else:\n                total += item\n        return total\n    return flatten_and_sum(data_list)"], "outputs": "[[6], [15], [0], [15], [10], [6], [0], [-10], [21], [28], [0], [10]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[1, [2, 3], [4, 5]]], [[]], [[[[1, 2], 3], [4, [5]]]], [[10]], [[[1], [2], [3]]], [[0, [0, [0]], [0]]], [[-1, [-2, [-3]], [-4]]], [[1, [2, [3, [4, [5, [6]]]]]]], [[1, [2, [3, [4, [5, [6]]]]], 7]], [[[], [], []]], [[1, [2, [3, [4, []]]]]]]", "input_output_examples": "[[[[1, 2, [3, 4], [5, 6]]]], [[21]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/66", "original_requirement": "from typing import List\n\n\ndef pos_count(l: List[int]) -> int:\n\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef pos_count(l: List[int]) -> int:\n\"\"\"\nWrite a python function to count the number of positive numbers in a list.\nassert pos_count([1,-2,3,-4]) == 2\n\"\"\"", "entry_point": "pos_count", "cluster_list": [{"programs_str": ["from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return len([x for x in l if x > 0])", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return len([x for x in l if x > 0])", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return len([x for x in l if x > 0])", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return len([x for x in l if x > 0])", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return len([x for x in l if x > 0])", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))", "from typing import List\n\ndef pos_count(l: List[int]) -> int:\n    return sum((1 for x in l if x > 0))"], "outputs": "[[2], [0], [4], [0], [0], [0], [2], [1], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, -2, 3, -4]], [[0, -1, -2, -3]], [[1, 2, 3, 4]], [[]], [[-1, -5, -10]], [[0, 0, 0]], [[999, -999, 100000, -100000]], [[1]], [[-1]], [[0]]]", "input_output_examples": "[[[[1, -2, 3, -4]]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/67", "original_requirement": "def bell_number(n: int) -> int:\n\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"", "repaired_requirement": "```python\ndef bell_number(n: int) -> int:\n    \"\"\"\n    Write a function to compute the nth Bell number, which represents the number of ways \n    to partition a set of n elements. The input `n` must be a non-negative integer.\n\n    - If `n` is negative, the function is expected to raise an `IndexError` due to invalid indexing.\n    - The function uses a dynamic programming approach to calculate the Bell number.\n    - The Bell number for a set of size `n` is defined as the number of distinct ways to partition \n      the set into non-empty subsets.\n\n    Example:\n    assert bell_number(2) == 2  # The second Bell number is 2, representing the partitions of a set of 2 elements.\n\n    Input constraints:\n    - `n` must be a non-negative integer (`n >= 0`).\n    - Behavior for negative inputs is undefined in terms of explicit error handling, but the function \n      will raise an `IndexError` due to invalid indexing.\n\n    Edge cases:\n    - For `n = 0`, the Bell number is 1 (the empty set has one partition: itself).\n    - For `n < 0`, the function will raise an `IndexError`.\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [-1]\n    Expected Output: ['IndexError']\n    \"\"\"\n```", "original_clusters": {"requirement": "def bell_number(n: int) -> int:\n\"\"\"\nWrite a function to find the number of ways to partition a set of Bell numbers.\nassert bell_number(2)==2\n\"\"\"", "entry_point": "bell_number", "cluster_list": [{"programs_str": ["from math import comb\n\ndef bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from math import factorial\n\ndef bell_number(n: int) -> int:\n    bell_triangle = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell_triangle[0][0] = 1\n    for i in range(1, n + 1):\n        bell_triangle[i][0] = bell_triangle[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell_triangle[i][j] = bell_triangle[i - 1][j - 1] + bell_triangle[i][j - 1]\n    return bell_triangle[n][0]", "from math import factorial\n\ndef bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from math import factorial\n\ndef bell_number(n: int) -> int:\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = sum((bell[j] * factorial(i - 1) // (factorial(j) * factorial(i - 1 - j)) for j in range(i)))\n    return bell[n]", "from math import comb\n\ndef bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from math import factorial\n\ndef bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from math import factorial\n\ndef bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "import math\n\ndef bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from typing import List\n\ndef bell_number(n: int) -> int:\n    bell: List[List[int]] = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from math import factorial\n\ndef bell_number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from math import factorial\n\ndef bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from math import factorial\n\ndef bell_number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"], "outputs": "[[1], [1], [2], [5], [52], [115975], ['IndexError']]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import factorial\n\ndef bell_number(n: int) -> int:\n\n    def stirling_second_kind(n, k):\n        if n == k == 0:\n            return 1\n        if n == 0 or k == 0:\n            return 0\n        return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n    return sum((stirling_second_kind(n, k) for k in range(n + 1)))", "from math import factorial\n\ndef bell_number(n: int) -> int:\n\n    def stirling_second_kind(n, k):\n        total = 0\n        for i in range(k + 1):\n            total += (-1) ** (k - i) * factorial(k) // (factorial(i) * factorial(k - i)) * i ** n\n        return total // factorial(k)\n    bell_number = 0\n    for i in range(n + 1):\n        bell_number += stirling_second_kind(n, i)\n    return bell_number", "from math import factorial\n\ndef bell_number(n: int) -> int:\n\n    def stirling_second_kind(n, k):\n        return sum(((-1) ** (k - i) * factorial(k) // (factorial(i) * factorial(k - i)) * i ** n for i in range(k + 1))) // factorial(k)\n    return sum((stirling_second_kind(n, k) for k in range(n + 1)))"], "outputs": "[[1], [1], [2], [5], [52], [115975], [0]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import factorial\n\ndef bell_number(n: int) -> int:\n\n    def stirling_second_kind(n, k):\n        return sum(((-1) ** (k - i) * factorial(k) // (factorial(i) * factorial(k - i)) * i ** n for i in range(k + 1)))\n    return sum((stirling_second_kind(n, k) for k in range(n + 1)))", "from math import factorial\n\ndef bell_number(n: int) -> int:\n\n    def stirling_second_kind(n, k):\n        return sum(((-1) ** (k - i) * factorial(k) // (factorial(i) * factorial(k - i)) * i ** n for i in range(k + 1)))\n    return sum((stirling_second_kind(n, k) for k in range(n + 1)))"], "outputs": "[[1], [1], [3], [13], [541], [102247563], [0]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [3], [2]]]"}, {"programs_str": ["from typing import List\n\ndef bell_number(n: int) -> int:\n    if n < 0:\n        return 0\n    bell: List[int] = [0] * (n + 1)\n    bell[0] = 1\n    for i in range(1, n + 1):\n        bell[i] = bell[i - 1]\n        for j in range(i - 1, 0, -1):\n            bell[j] += bell[j - 1]\n    return bell[n]"], "outputs": "[[1], [1], [1], [1], [1], [1], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [1], [2]]]"}], "entropy": 0.659517637169433, "llm_generated_inputs": "[[0], [1], [2], [3], [5], [10], [-1]]", "input_output_examples": "[[[2]], [[2]]]", "weighted_test_consistency": 0.85, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef bell_number(n: int) -> int:\n    \"\"\"\n    Write a function to compute the nth Bell number, which represents the number of ways \n    to partition a set of n elements. The input `n` must be a non-negative integer.\n\n    - If `n` is negative, the function is expected to raise an `IndexError` due to invalid indexing.\n    - The function uses a dynamic programming approach to calculate the Bell number.\n    - The Bell number for a set of size `n` is defined as the number of distinct ways to partition \n      the set into non-empty subsets.\n\n    Example:\n    assert bell_number(2) == 2  # The second Bell number is 2, representing the partitions of a set of 2 elements.\n\n    Input constraints:\n    - `n` must be a non-negative integer (`n >= 0`).\n    - Behavior for negative inputs is undefined in terms of explicit error handling, but the function \n      will raise an `IndexError` due to invalid indexing.\n\n    Edge cases:\n    - For `n = 0`, the Bell number is 1 (the empty set has one partition: itself).\n    - For `n < 0`, the function will raise an `IndexError`.\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [-1]\n    Expected Output: ['IndexError']\n    \"\"\"\n```", "entry_point": "bell_number", "cluster_list": [{"programs_str": ["def bell_number(n: int) -> int:\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Invalid input: n must be non-negative.')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Negative index not allowed')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Negative index not allowed')\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Negative index not allowed')\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Negative input value is not allowed')\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('n should be a non-negative integer')\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Invalid input: n must be a non-negative integer')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Undefined for negative values')\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Negative indexing leads to undefined Bell number for negative n.')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('n must be a non-negative integer.')\n    bell = [[0 for _ in range(n + 1)] for __ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Invalid input, n must be non-negative')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Index out of range. The input must be a non-negative integer.')\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Negative index error')\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('n must be a non-negative integer.')\n    bell_triangle = [[0] * (n + 1) for _ in range(n + 1)]\n    bell_triangle[0][0] = 1\n    for i in range(1, n + 1):\n        bell_triangle[i][0] = bell_triangle[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell_triangle[i][j] = bell_triangle[i - 1][j - 1] + bell_triangle[i][j - 1]\n    return bell_triangle[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Index out of range')\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Negative index is not allowed for Bell numbers')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Negative index')\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('Negative index')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_number(n: int) -> int:\n    if n < 0:\n        raise IndexError('n must be a non-negative integer.')\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"], "outputs": "[[1], [1], [2], [5], [52], [115975], ['IndexError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [5], [10], [-1]]", "input_output_examples": "[[[2]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.30000000000000004, "original_avg_pass_rate": 0.5076190476190476, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 0.9, "repaired_avg_pass_rate": 0.9019047619047619, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/68", "original_requirement": "from typing import List\n\n\ndef is_Monotonic(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef is_Monotonic(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given array is monotonic or not.\nassert is_Monotonic([6, 5, 4, 4]) == True\n\"\"\"", "entry_point": "is_Monotonic", "cluster_list": [{"programs_str": ["from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            increasing = False\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if all((arr[i] <= arr[i + 1] for i in range(len(arr) - 1))) or all((arr[i] >= arr[i + 1] for i in range(len(arr) - 1))):\n        return True\n    return False", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if len(arr) <= 1:\n        return True\n    is_increasing = None\n    for i in range(1, len(arr)):\n        if arr[i] != arr[i - 1]:\n            is_increasing = arr[i] > arr[i - 1]\n            break\n    if is_increasing is None:\n        return True\n    for i in range(1, len(arr)):\n        if is_increasing and arr[i] < arr[i - 1] or (not is_increasing and arr[i] > arr[i - 1]):\n            return False\n    return True", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    return all((arr[i] <= arr[i + 1] for i in range(len(arr) - 1))) or all((arr[i] >= arr[i + 1] for i in range(len(arr) - 1)))", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    return all((arr[i] <= arr[i + 1] for i in range(len(arr) - 1))) or all((arr[i] >= arr[i + 1] for i in range(len(arr) - 1)))", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    is_increasing = True\n    is_decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            is_decreasing = False\n        if arr[i] < arr[i - 1]:\n            is_increasing = False\n    return is_increasing or is_decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if len(arr) < 2:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if not arr:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    if len(arr) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        elif arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef is_Monotonic(arr: List[int]) -> bool:\n    increasing = decreasing = True\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            decreasing = False\n        if arr[i] < arr[i - 1]:\n            increasing = False\n    return increasing or decreasing"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [False], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[6, 5, 4, 4]], [[1, 2, 2, 3]], [[3, 3, 3, 3]], [[5, 3, 1]], [[1]], [[1, 2]], [[2, 1]], [[1, 1, 1, 1]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 3, 2]], [[3, 2, 4]], [[]]]", "input_output_examples": "[[[[6, 5, 4, 4]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/69", "original_requirement": "from typing import List\n\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a list contains the given sublist or not.\nassert is_sublist([2,4,3,5,7],[3,7])==False\n\"\"\"", "entry_point": "is_sublist", "cluster_list": [{"programs_str": ["from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    n, m = (len(l), len(s))\n    for i in range(n - m + 1):\n        if l[i:i + m] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if not l:\n        return False\n    sublist_length = len(s)\n    for i in range(len(l) - sublist_length + 1):\n        if l[i:i + sublist_length] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    len_s = len(s)\n    return any((l[i:i + len_s] == s for i in range(len(l) - len_s + 1)))", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    len_s, len_l = (len(s), len(l))\n    for i in range(len_l - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if not l:\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    sub_len = len(s)\n    for i in range(len(l) - sub_len + 1):\n        if l[i:i + sub_len] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if not l:\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if not l:\n        return False\n    sub_len = len(s)\n    for i in range(len(l) - sub_len + 1):\n        if l[i:i + sub_len] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    len_s = len(s)\n    for i in range(len(l) - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if not l:\n        return False\n    len_s = len(s)\n    for i in range(len(l) - len_s + 1):\n        if l[i:i + len_s] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    len_s = len(s)\n    return any((l[i:i + len_s] == s for i in range(len(l) - len_s + 1)))", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if not l:\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False", "from typing import List\n\ndef is_sublist(l: List[int], s: List[int]) -> bool:\n    if not s:\n        return True\n    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False"], "outputs": "[[False], [True], [True], [True], [False], [True], [False], [False], [True], [True], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 4, 3, 5, 7], [3, 7]], [[1, 2, 3, 4, 5], [2, 3]], [[], []], [[1, 2, 3], []], [[], [1, 2]], [[1, 2, 3, 4], [1, 2, 3, 4]], [[5, 6, 7, 8, 9], [8, 9, 10]], [[1, 2, 3, 4, 5], [6]], [[7, 8, 9, 10], [9]], [[1, 2, 3, 4, 5], [5]], [[1, 1, 1, 2, 3], [1, 2]], [[3, 2, 1], [2, 1]], [[1, 2, 3, 4, 5], [3, 4]], [[1, 2, 3, 4, 5], [3, 4, 5, 6]]]", "input_output_examples": "[[[[2, 4, 3, 5, 7], [3, 7]]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/70", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_equal(Input: List[Tuple]) -> bool:\n\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_equal(Input: List[Tuple]) -> bool:\n\"\"\"\nWrite a function to find whether all the given tuples have equal length or not.\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\n\"\"\"", "entry_point": "get_equal", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(tup) == first_length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_len = len(Input[0])\n    return all((len(t) == first_len for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    for tpl in Input[1:]:\n        if len(tpl) != first_length:\n            return False\n    return True", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    for tpl in Input:\n        if len(tpl) != first_length:\n            return False\n    return True", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if len(Input) == 0:\n        return True\n    first_length = len(Input[0])\n    return all((len(t) == first_length for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    for t in Input:\n        if len(t) != first_length:\n            return False\n    return True", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(tup) == first_length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_len = len(Input[0])\n    return all((len(t) == first_len for t in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if len(Input) < 2:\n        return True\n    first_length = len(Input[0])\n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    return True", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    return all((len(tup) == first_length for tup in Input))", "from typing import List, Tuple\n\ndef get_equal(Input: List[Tuple]) -> bool:\n    if not Input:\n        return True\n    first_length = len(Input[0])\n    for tup in Input:\n        if len(tup) != first_length:\n            return False\n    return True"], "outputs": "[[True], [False], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[(11, 22, 33), (44, 55, 66)]], [[(11,), (22, 33)]], [[]], [[(11, 22, 33)]], [[(), ()]], [[(11, True, 'test'), (44, False, 99.99)]]]", "input_output_examples": "[[[[(11, 22, 33), (44, 55, 66)]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/71", "original_requirement": "from typing import List\n\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"", "repaired_requirement": "def comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to sort a list of elements in ascending order using the comb sort algorithm.\n    The function should repeatedly compare and swap elements that are a certain gap apart, \n    reducing the gap size over iterations until the list is sorted. The gap size is reduced \n    using a shrink factor of 1.3 (rounded down to the nearest integer), and the process continues \n    until no swaps are needed and the gap size is 1.\n\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\"\"\"", "entry_point": "comb_sort", "cluster_list": [{"programs_str": ["from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        prev_gap = gap\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n        sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        if gap < 1:\n            return 1\n        return gap\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_next_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        if gap < 1:\n            return 1\n        return gap\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = get_next_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums"], "outputs": "[[[5, 15, 37, 25, 79]], [[1, 2, 3, 4, 5]], [[2, 1, 3, 5, 4]], [[10]], [[]], [[3, 3, 3, 3, 3]], [[3, 0, 3, 7, 9, 7]], [[-5, -1, 3, 0, 2, 8]], [[1, 10, 100, 1000, 10000]], [[1.5, 3.2, 2.7, 4.1]], [[1, 1, 5, 5]]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[5, 15, 37, 25, 79]], [[5, 15, 37, 25, 79]], [[5, 15, 25, 37, 79]]]]"}, {"programs_str": ["from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def next_gap(gap):\n        gap = gap * 10 // 13\n        if gap < 1:\n            return 1\n        return gap\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = next_gap(gap)\n        swapped = False\n        for i in range(0, n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        return max(gap, 1)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while gap != 1 or not sorted:\n        gap = next_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        else:\n            sorted = False\n        index = 0\n        while index + gap < len(nums):\n            if nums[index] > nums[index + gap]:\n                nums[index], nums[index + gap] = (nums[index + gap], nums[index])\n                sorted = False\n            index += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap: int) -> int:\n        gap = gap * 10 // 13\n        if gap < 1:\n            return 1\n        return gap\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def next_gap(gap):\n        gap = gap * 10 // 13\n        return max(1, gap)\n    n = len(nums)\n    gap = n\n    sorted = False\n    while gap != 1 or not sorted:\n        gap = next_gap(gap)\n        sorted = True\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap):\n        gap = gap * 10 // 13\n        if gap < 1:\n            return 1\n        return gap\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap):\n        new_gap = gap * 10 // 13\n        return max(1, new_gap)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap):\n        gap = gap * 10 // 13\n        return max(1, gap)\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap):\n        gap = gap * 10 // 13\n        if gap < 1:\n            return 1\n        return gap\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap):\n        gap = gap * 10 // 13\n        if gap < 1:\n            return 1\n        return gap\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap):\n        gap = gap * 10 // 13\n        if gap < 1:\n            return 1\n        return gap\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n\n    def get_next_gap(gap):\n        gap = gap * 10 // 13\n        if gap < 1:\n            return 1\n        return gap\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap // shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums"], "outputs": "[[[5, 15, 25, 37, 79]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[10]], [[]], [[3, 3, 3, 3, 3]], [[0, 3, 3, 7, 7, 9]], [[-5, -1, 0, 2, 3, 8]], [[1, 10, 100, 1000, 10000]], [[1.5, 2.7, 3.2, 4.1]], [[1, 1, 5, 5]]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6098403047164005, "llm_generated_inputs": "[[[5, 15, 37, 25, 79]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[10]], [[]], [[3, 3, 3, 3, 3]], [[7, 7, 3, 3, 9, 0]], [[2, -1, 3, 0, -5, 8]], [[100, 1000, 10, 1, 10000]], [[1.5, 3.2, 2.7, 4.1]], [[5, 1, 5, 1]]]", "input_output_examples": "[[[[5, 15, 37, 25, 79]]], [[[5, 15, 25, 37, 79]]]]", "weighted_test_consistency": 0.85, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def comb_sort(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function to sort a list of elements in ascending order using the comb sort algorithm.\n    The function should repeatedly compare and swap elements that are a certain gap apart, \n    reducing the gap size over iterations until the list is sorted. The gap size is reduced \n    using a shrink factor of 1.3 (rounded down to the nearest integer), and the process continues \n    until no swaps are needed and the gap size is 1.\n\n    assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n    \"\"\"", "entry_point": "comb_sort", "cluster_list": [{"programs_str": ["from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    shrink_factor = 1.3\n    n = len(nums)\n    gap = n\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap // shrink_factor))\n        sorted = gap == 1\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    gap = n\n    shrink = 1.3\n    sorted_flag = False\n    while not sorted_flag:\n        gap = max(1, int(gap // shrink))\n        sorted_flag = gap == 1\n        i = 0\n        while i + gap < n:\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_flag = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    shrink_factor = 1.3\n    n = len(nums)\n    gap = n\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap // shrink_factor))\n        swapped = False\n        for i in range(n - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted_flag = False\n    while not sorted_flag:\n        gap = max(1, int(gap // shrink_factor))\n        sorted_flag = gap == 1\n        index = 0\n        while index + gap < len(nums):\n            if nums[index] > nums[index + gap]:\n                nums[index], nums[index + gap] = (nums[index + gap], nums[index])\n                sorted_flag = False\n            index += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted_flag = False\n    while not sorted_flag:\n        gap = max(1, int(gap // shrink_factor))\n        sorted_flag = gap == 1\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_flag = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted_flag = False\n    while gap > 1 or not sorted_flag:\n        gap = max(1, int(gap // shrink_factor))\n        sorted_flag = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_flag = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap // shrink))\n        sorted = gap == 1\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    shrink_factor = 1.3\n    gap = len(nums)\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap // shrink_factor))\n        sorted = gap == 1\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    shrink_factor = 1.3\n    gap = len(nums)\n    sorted_flag = False\n    while not sorted_flag:\n        gap = max(int(gap // shrink_factor), 1)\n        sorted_flag = gap == 1\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_flag = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted_flag = False\n    while not sorted_flag:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n            sorted_flag = True\n        else:\n            sorted_flag = False\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_flag = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    shrink_factor = 1.3\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap // shrink_factor))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    shrink_factor = 1.3\n    gap = len(nums)\n    sorted_flag = False\n    while gap > 1 or not sorted_flag:\n        gap = max(1, int(gap // shrink_factor))\n        sorted_flag = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_flag = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    shrink_factor = 1.3\n    gap = len(nums)\n    swapped = True\n    while gap > 1 or swapped:\n        gap = max(1, int(gap // shrink_factor))\n        swapped = False\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                swapped = True\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted = False\n    while not sorted:\n        gap = max(1, int(gap // shrink))\n        sorted = gap == 1\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted = False\n    while not sorted:\n        gap = int(gap // shrink_factor) if gap > 1 else 1\n        sorted = gap == 1\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted_flag = False\n    while gap > 1 or not sorted_flag:\n        gap = max(1, int(gap // shrink_factor))\n        sorted_flag = True\n        for i in range(len(nums) - gap):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_flag = False\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted_flag = False\n    while not sorted_flag:\n        gap = max(1, int(gap // shrink_factor))\n        sorted_flag = gap == 1\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_flag = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted_flag = False\n    while not sorted_flag:\n        gap = max(1, int(gap // shrink_factor))\n        sorted_flag = gap == 1\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_flag = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink_factor = 1.3\n    sorted_flag = False\n    while not sorted_flag:\n        gap = max(1, int(gap // shrink_factor))\n        sorted_flag = gap == 1\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_flag = False\n            i += 1\n    return nums", "from typing import List\n\ndef comb_sort(nums: List[int]) -> List[int]:\n    gap = len(nums)\n    shrink = 1.3\n    sorted_ = False\n    while not sorted_:\n        gap = max(1, int(gap // shrink))\n        sorted_ = gap == 1\n        i = 0\n        while i + gap < len(nums):\n            if nums[i] > nums[i + gap]:\n                nums[i], nums[i + gap] = (nums[i + gap], nums[i])\n                sorted_ = False\n            i += 1\n    return nums"], "outputs": "[[[5, 15, 25, 37, 79]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[10]], [[]], [[3, 3, 3, 3, 3]], [[0, 3, 3, 7, 7, 9]], [[-5, -1, 0, 2, 3, 8]], [[1, 10, 100, 1000, 10000]], [[1.5, 2.7, 3.2, 4.1]], [[1, 1, 5, 5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 15, 37, 25, 79]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[10]], [[]], [[3, 3, 3, 3, 3]], [[7, 7, 3, 3, 9, 0]], [[2, -1, 3, 0, -5, 8]], [[100, 1000, 10, 1, 10000]], [[1.5, 3.2, 2.7, 4.1]], [[5, 1, 5, 1]]]", "input_output_examples": "[[[[5, 15, 37, 25, 79]]], [[[5, 15, 25, 37, 79]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 0.9, "repaired_avg_pass_rate": 0.9, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/72", "original_requirement": "def dif_Square(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"", "repaired_requirement": "def dif_Square(n: int) -> bool:\n    \"\"\"\n    Write a Python function to check whether the given integer `n` can be represented as the difference of two squares, where `n = a^2 - b^2` for integers `a` and `b`.\n\n    The function should return `True` if:\n    - `n` is an even number, or\n    - `n` is an odd number congruent to 1 modulo 4 (i.e., `n % 4 == 1`).\n\n    Otherwise, the function should return `False`.\n\n    Constraints:\n    - The input `n` is an integer and can be positive, negative, or zero.\n    - The output is a boolean value indicating whether `n` satisfies the above conditions.\n\n    Example:\n    assert dif_Square(5) == True\n    \"\"\"", "original_clusters": {"requirement": "def dif_Square(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as the difference of two squares or not.\nassert dif_Square(5) == True\n\"\"\"", "entry_point": "dif_Square", "cluster_list": [{"programs_str": ["def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0", "def dif_Square(n: int) -> bool:\n    if n % 2 == 1 or n % 4 == 0:\n        return True\n    return False", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0 or n == 0", "def dif_Square(n: int) -> bool:\n    return n % 2 == 1 or n % 4 == 0"], "outputs": "[[True], [True], [True], [False], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    if n % 2 == 0:\n        return True\n    else:\n        return n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    if n % 2 == 0 or n % 4 == 1:\n        return True\n    return False", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1\nimport math\n\ndef dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return True if n % 2 == 0 or n % 4 == 1 else False", "def dif_Square(n: int) -> bool:\n    if n % 2 == 0 or n % 4 == 1:\n        return True\n    return False"], "outputs": "[[True], [True], [True], [True], [False], [True], [True], [False], [False], [True], [True], [True], [False], [True]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[5], [0], [1], [10], [-5], [16], [81], [23], [999], [-999], [1000000], [-1000000], [2147483647], [-2147483648]]", "input_output_examples": "[[[5]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def dif_Square(n: int) -> bool:\n    \"\"\"\n    Write a Python function to check whether the given integer `n` can be represented as the difference of two squares, where `n = a^2 - b^2` for integers `a` and `b`.\n\n    The function should return `True` if:\n    - `n` is an even number, or\n    - `n` is an odd number congruent to 1 modulo 4 (i.e., `n % 4 == 1`).\n\n    Otherwise, the function should return `False`.\n\n    Constraints:\n    - The input `n` is an integer and can be positive, negative, or zero.\n    - The output is a boolean value indicating whether `n` satisfies the above conditions.\n\n    Example:\n    assert dif_Square(5) == True\n    \"\"\"", "entry_point": "dif_Square", "cluster_list": [{"programs_str": ["def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1", "def dif_Square(n: int) -> bool:\n    return n % 2 == 0 or n % 4 == 1"], "outputs": "[[True], [True], [True], [True], [False], [True], [True], [False], [False], [True], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5], [0], [1], [10], [-5], [16], [81], [23], [999], [-999], [1000000], [-1000000], [2147483647], [-2147483648]]", "input_output_examples": "[[[5]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.09999999999999998, "original_avg_pass_rate": 0.6205607476635514, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.514018691588785, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/74", "original_requirement": "from typing import List\n\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n\"\"\"\nWrite a function to check whether it follows the sequence given in the patterns array.\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\n\"\"\"", "entry_point": "is_samepatterns", "cluster_list": [{"programs_str": ["from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        color_to_pattern[color] = pattern\n        pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    pattern_to_color = {}\n    color_to_pattern = {}\n    for color, pattern in zip(colors, patterns):\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern_to_color[pattern] != color or color_to_pattern[color] != pattern:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        elif pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color_to_pattern[color] != pattern or pattern_to_color[pattern] != color:\n            return False\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    color_to_pattern = {}\n    pattern_to_color = {}\n    for color, pattern in zip(colors, patterns):\n        if color in color_to_pattern:\n            if color_to_pattern[color] != pattern:\n                return False\n        else:\n            color_to_pattern[color] = pattern\n        if pattern in pattern_to_color:\n            if pattern_to_color[pattern] != color:\n                return False\n        else:\n            pattern_to_color[pattern] = color\n    return True", "from typing import List\n\ndef is_samepatterns(colors: List[str], patterns: List[str]) -> bool:\n    if len(colors) != len(patterns):\n        return False\n    pattern_to_color = {}\n    color_to_pattern = {}\n    for color, pattern in zip(colors, patterns):\n        if pattern not in pattern_to_color:\n            pattern_to_color[pattern] = color\n        if color not in color_to_pattern:\n            color_to_pattern[color] = pattern\n        if pattern_to_color[pattern] != color or color_to_pattern[color] != pattern:\n            return False\n    return True"], "outputs": "[[True], [True], [True], [True], [False], [True], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['red', 'green', 'green'], ['a', 'b', 'b']], [['red', 'blue', 'blue'], ['x', 'y', 'y']], [['red', 'red', 'green'], ['a', 'a', 'b']], [['red', 'green', 'blue'], ['a', 'b', 'c']], [['red', 'green', 'green'], ['a', 'a', 'b']], [[], []], [['red'], ['a']], [['red', 'red', 'red'], ['a', 'a', 'a']], [['red', 'blue', 'green'], ['a', 'a', 'a']], [['red', 'green'], ['a', 'b', 'b']]]", "input_output_examples": "[[[['red', 'green', 'green'], ['a', 'b', 'b']]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9649999999999999, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/75", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n\"\"\"\nWrite a function to find tuples which have all elements divisible by k from the given list of tuples.\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\n\"\"\"", "entry_point": "find_tuples", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((num % K == 0 for num in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((element % K == 0 for element in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tupl for tupl in test_list if all((element % K == 0 for element in tupl))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((element % K == 0 for element in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((x % K == 0 for x in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((elem % K == 0 for elem in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((element % K == 0 for element in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((element % K == 0 for element in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((element % K == 0 for element in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((element % K == 0 for element in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tpl for tpl in test_list if all((elem % K == 0 for elem in tpl))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((element % K == 0 for element in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [t for t in test_list if all((x % K == 0 for x in t))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((element % K == 0 for element in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((element % K == 0 for element in tup))]", "from typing import List, Tuple\n\ndef find_tuples(test_list: List[Tuple[int, ...]], K: int) -> List[Tuple[int, ...]]:\n    return [tup for tup in test_list if all((x % K == 0 for x in tup))]"], "outputs": "[[[(6, 24, 12)]], [[(8, 16), (10,)]], [[(9, 18, 27)]], [[(15,), (30, 45, 60)]], [[(10, 20, 30)]], [[]], [[(3, 6)]], [[(7, 14)]], [[(1,), (2, 3, 4)]], [[(0, 0, 0)]], [[]], [[(8,), (16, 24)]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6], [[(8, 16), (10,), (3, 6, 9)], 2], [[(9, 18, 27), (4, 8, 12)], 3], [[(12, 24), (15,), (30, 45, 60)], 5], [[(4, 8, 12), (6, 18), (10, 20, 30)], 10], [[], 3], [[(3, 6)], 3], [[(7, 14), (5, 25)], 7], [[(1,), (2, 3, 4)], 1], [[(0, 0, 0)], 2], [[(9, 18, 33)], 9], [[(8,), (16, 24)], 8]]", "input_output_examples": "[[[[(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6]], [[[(6, 24, 12)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/77", "original_requirement": "def is_Diff(n: int) -> bool:\n\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"", "repaired_requirement": "def is_Diff(n: int) -> bool:\n    \"\"\"\n    Write a Python function to determine whether a given integer is divisible by 11.\n    \n    The function should:\n    - Return True if the input integer `n` is divisible by 11, using the modulus operator (`%`).\n    - Handle both positive and negative integers, as divisibility by 11 applies equally to negative numbers.\n    - Not impose any restrictions on the range of input integers.\n    - Use the mathematical modulus operation (`n % 11 == 0`) to check divisibility, without relying on digit-based rules or transformations.\n\n    Example:\n    assert is_Diff(12345) == False\n    assert is_Diff(-11) == True\n    \"\"\"", "original_clusters": {"requirement": "def is_Diff(n: int) -> bool:\n\"\"\"\nWrite a python function to find whether a number is divisible by 11.\nassert is_Diff (12345) == False\n\"\"\"", "entry_point": "is_Diff", "cluster_list": [{"programs_str": ["def is_Diff(n: int) -> bool:\n\n    def is_divisible_by_11(num: int) -> bool:\n        num_str = str(num)\n        odd_sum = 0\n        even_sum = 0\n        for index, digit in enumerate(num_str):\n            if index % 2 == 0:\n                odd_sum += int(digit)\n            else:\n                even_sum += int(digit)\n        return abs(odd_sum - even_sum) % 11 == 0\n    return is_divisible_by_11(n)", "def is_Diff(n: int) -> bool:\n\n    def sum_digits_alternating(n: int) -> int:\n        alternating_sum = 0\n        add = True\n        for digit in str(n):\n            if add:\n                alternating_sum += int(digit)\n            else:\n                alternating_sum -= int(digit)\n            add = not add\n        return alternating_sum\n    alternating_sum = sum_digits_alternating(n)\n    return alternating_sum % 11 == 0", "from typing import Union\n\ndef is_Diff(n: int) -> bool:\n\n    def check_divisibility_by_11(num: Union[int, str]) -> bool:\n        if isinstance(num, int):\n            num = str(num)\n        odd_sum = sum((int(digit) for i, digit in enumerate(num) if i % 2 == 0))\n        even_sum = sum((int(digit) for i, digit in enumerate(num) if i % 2 != 0))\n        return abs(odd_sum - even_sum) % 11 == 0\n    return check_divisibility_by_11(n)", "def is_Diff(n: int) -> bool:\n    n_str = str(n)\n    alternating_sum = sum((int(digit) if i % 2 == 0 else -int(digit) for i, digit in enumerate(n_str)))\n    return alternating_sum % 11 == 0", "def is_Diff(n: int) -> bool:\n    alternating_sum = 0\n    str_n = str(n)\n    for idx, digit in enumerate(str_n):\n        if idx % 2 == 0:\n            alternating_sum += int(digit)\n        else:\n            alternating_sum -= int(digit)\n    return alternating_sum % 11 == 0", "def is_Diff(n: int) -> bool:\n    num_str = str(n)\n    alternating_sum = sum((int(digit) if idx % 2 == 0 else -int(digit) for idx, digit in enumerate(num_str)))\n    return alternating_sum % 11 == 0"], "outputs": "[[False], [True], [True], [True], [False], [True], ['ValueError'], ['ValueError'], [True], [False], ['ValueError'], [False], [True]]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0"], "outputs": "[[False], [True], [True], [True], [False], [True], [True], [True], [True], [False], [True], [False], [True]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8812908992306927, "llm_generated_inputs": "[[12345], [121], [0], [11], [111], [22], [-11], [-121], [99999999999999], [999999999999999], [-99999999999999], [10], [112233445566]]", "input_output_examples": "[[[12345]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def is_Diff(n: int) -> bool:\n    \"\"\"\n    Write a Python function to determine whether a given integer is divisible by 11.\n    \n    The function should:\n    - Return True if the input integer `n` is divisible by 11, using the modulus operator (`%`).\n    - Handle both positive and negative integers, as divisibility by 11 applies equally to negative numbers.\n    - Not impose any restrictions on the range of input integers.\n    - Use the mathematical modulus operation (`n % 11 == 0`) to check divisibility, without relying on digit-based rules or transformations.\n\n    Example:\n    assert is_Diff(12345) == False\n    assert is_Diff(-11) == True\n    \"\"\"", "entry_point": "is_Diff", "cluster_list": [{"programs_str": ["def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0", "def is_Diff(n: int) -> bool:\n    return n % 11 == 0"], "outputs": "[[False], [True], [True], [True], [False], [True], [True], [True], [True], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[12345], [121], [0], [11], [111], [22], [-11], [-121], [99999999999999], [999999999999999], [-99999999999999], [10], [112233445566]]", "input_output_examples": "[[[12345]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/79", "original_requirement": "def word_len(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def word_len(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether the length of the word is odd or not.\nassert word_len(\"Hadoop\") == False\n\"\"\"", "entry_point": "word_len", "cluster_list": [{"programs_str": ["def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0", "def word_len(s: str) -> bool:\n    return len(s) % 2 != 0"], "outputs": "[[False], [False], [True], [False], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hadoop'], ['Python'], ['a'], [''], ['OddNumber'], ['12345'], ['even'], ['longword']]", "input_output_examples": "[[['Hadoop']], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/80", "original_requirement": "def tetrahedral_number(n: int) -> float:\n\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def tetrahedral_number(n: int) -> float:\n\"\"\"\nWrite a function to find the nth tetrahedral number.\nassert tetrahedral_number(5) == 35\n\"\"\"", "entry_point": "tetrahedral_number", "cluster_list": [{"programs_str": ["def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) // 6\n    return float(result)", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "from math import comb\n\ndef tetrahedral_number(n: int) -> float:\n    return comb(n + 2, 3)", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "from math import comb\n\ndef tetrahedral_number(n: int) -> float:\n    return comb(n + 2, 3)", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "from math import comb\n\ndef tetrahedral_number(n: int) -> float:\n    return comb(n + 2, 3)", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "from math import comb\n\ndef tetrahedral_number(n: int) -> float:\n    return comb(n + 2, 3)", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6", "def tetrahedral_number(n: int) -> float:\n    return n * (n + 1) * (n + 2) / 6"], "outputs": "[[1.0], [4.0], [35.0], [220.0], [0.0], [0.0], [171700.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [5], [10], [0], [-1], [100]]", "input_output_examples": "[[[5]], [[35]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/82", "original_requirement": "def volume_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def volume_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the volume of a sphere.\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)\n\"\"\"", "entry_point": "volume_sphere", "cluster_list": [{"programs_str": ["import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4.0 / 3.0 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4.0 / 3.0 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3", "import math\n\ndef volume_sphere(r: float) -> float:\n    return 4 / 3 * math.pi * r ** 3"], "outputs": "[[4188.790204786391], [0.0], [4.1887902047863905], [-523.5987755982989], [4188790204.7863903], [4.188790204786391e-15], [129.87845893385725]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10.0], [0.0], [1.0], [-5.0], [1000.0], [1e-05], [3.14159]]", "input_output_examples": "[[[10]], [[4188.790204786391]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/84", "original_requirement": "def sequence(n: int) -> int:\n\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"", "repaired_requirement": "```python\ndef sequence(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth number in the Newman-Conway sequence.\n\n    The Newman-Conway sequence is defined as follows:\n    - Base cases:\n        - sequence(1) = 1\n        - sequence(2) = 1\n    - Recursive formula for n > 2:\n        sequence(n) = sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n\n    Constraints:\n    - The input `n` must be a positive integer (n > 0).\n    - If `n <= 0`, the function should raise an `IndexError`.\n\n    Implementation Details:\n    - Use an iterative approach to compute the sequence values.\n    - Precompute values up to `sequence(n)` using an auxiliary array for efficiency.\n\n    Example:\n    assert sequence(10) == 6\n    \"\"\"\n```", "original_clusters": {"requirement": "def sequence(n: int) -> int:\n\"\"\"\nWrite a function to find the nth number in the newman conway sequence.\nassert sequence(10) == 6\n\"\"\"", "entry_point": "sequence", "cluster_list": [{"programs_str": ["def sequence(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n < 1:\n        raise ValueError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]"], "outputs": "[[1], [1], [2], [6], [12], [29], ['ValueError'], ['ValueError']]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    results = [0] * (n + 1)\n    results[1] = results[2] = 1\n    for i in range(3, n + 1):\n        results[i] = results[results[i - 1]] + results[i - results[i - 1]]\n    return results[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    values = [0] * (n + 1)\n    values[1], values[2] = (1, 1)\n    for i in range(3, n + 1):\n        values[i] = values[values[i - 1]] + values[i - values[i - 1]]\n    return values[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1] = seq[2] = 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    seq[2] = 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]"], "outputs": "[[1], [1], [2], [6], [12], [29], ['IndexError'], ['IndexError']]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from functools import lru_cache\n\ndef sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    return sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))"], "outputs": "[[1], [1], [2], [6], [12], ['Timeout'], ['RecursionError'], ['RecursionError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0, 1, 1]\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    return seq[n]", "def sequence(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    seq = [0, 1, 1]\n    for i in range(3, n + 1):\n        seq.append(seq[seq[i - 1]] + seq[i - seq[i - 1]])\n    return seq[n]"], "outputs": "[[1], [1], [2], [6], [12], [29], [0], [1]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.5958800740904867, "llm_generated_inputs": "[[1], [2], [3], [10], [20], [50], [0], [-1]]", "input_output_examples": "[[[10]], [[6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef sequence(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth number in the Newman-Conway sequence.\n\n    The Newman-Conway sequence is defined as follows:\n    - Base cases:\n        - sequence(1) = 1\n        - sequence(2) = 1\n    - Recursive formula for n > 2:\n        sequence(n) = sequence(sequence(n - 1)) + sequence(n - sequence(n - 1))\n\n    Constraints:\n    - The input `n` must be a positive integer (n > 0).\n    - If `n <= 0`, the function should raise an `IndexError`.\n\n    Implementation Details:\n    - Use an iterative approach to compute the sequence values.\n    - Precompute values up to `sequence(n)` using an auxiliary array for efficiency.\n\n    Example:\n    assert sequence(10) == 6\n    \"\"\"\n```", "entry_point": "sequence", "cluster_list": [{"programs_str": ["def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('Index must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('Input must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    seq[2] = 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('The input must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('The input `n` must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('Input must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('n must be a positive integer')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('The input `n` must be a positive integer greater than 0.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1] = 1\n    seq[2] = 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('Input must be a positive integer greater than 0.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq_values = [0] * (n + 1)\n    seq_values[1] = 1\n    seq_values[2] = 1\n    for i in range(3, n + 1):\n        seq_values[i] = seq_values[seq_values[i - 1]] + seq_values[i - seq_values[i - 1]]\n    return seq_values[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    aux = [0] * (n + 1)\n    aux[1] = 1\n    aux[2] = 1\n    for i in range(3, n + 1):\n        aux[i] = aux[aux[i - 1]] + aux[i - aux[i - 1]]\n    return aux[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('n must be a positive integer greater than 0.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('Input must be a positive integer greater than 0.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('Input must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('The input must be a positive integer (n > 0).')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1] = seq[2] = 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('Input must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1], seq[2] = (1, 1)\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]", "def sequence(n: int) -> int:\n    if n <= 0:\n        raise IndexError('n must be a positive integer.')\n    if n == 1 or n == 2:\n        return 1\n    seq = [0] * (n + 1)\n    seq[1] = seq[2] = 1\n    for i in range(3, n + 1):\n        seq[i] = seq[seq[i - 1]] + seq[i - seq[i - 1]]\n    return seq[n]"], "outputs": "[[1], [1], [2], [6], [12], [29], ['IndexError'], ['IndexError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [10], [20], [50], [0], [-1]]", "input_output_examples": "[[[10]], [[6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.30000000000000004, "original_avg_pass_rate": 0.536936936936937, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/85", "original_requirement": "def surfacearea_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def surfacearea_sphere(r: float) -> float:\n\"\"\"\nWrite a function to find the surface area of a sphere.\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)\n\"\"\"", "entry_point": "surfacearea_sphere", "cluster_list": [{"programs_str": ["import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r * r", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r * r", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r * r", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r * r", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2", "import math\n\ndef surfacearea_sphere(r: float) -> float:\n    return 4 * math.pi * r ** 2"], "outputs": "[[1256.6370614359173], [0.0], [12.566370614359172], [1256.6370614359173], [124.02489720223573], [1.2566370614359172e-11], [12566370614359.172]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10], [0], [1], [-10], [3.14159], [1e-06], [1000000.0]]", "input_output_examples": "[[[10]], [[1256.6370614359173]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/86", "original_requirement": "def centered_hexagonal_number(n: int) -> int:\n\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def centered_hexagonal_number(n: int) -> int:\n\"\"\"\nWrite a function to find nth centered hexagonal number.\nassert centered_hexagonal_number(10) == 271\n\"\"\"", "entry_point": "centered_hexagonal_number", "cluster_list": [{"programs_str": ["def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1", "def centered_hexagonal_number(n: int) -> int:\n    return 3 * n * (n - 1) + 1"], "outputs": "[[1], [7], [271], [1], [7], [1141], [7351]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [10], [0], [-1], [20], [50]]", "input_output_examples": "[[[10]], [[271]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/87", "original_requirement": "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n\"\"\"\nWrite a function to merge three dictionaries into a single dictionary.\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\"\"\"", "entry_point": "merge_dictionaries_three", "cluster_list": [{"programs_str": ["def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    result = dict1.copy()\n    result.update(dict2)\n    result.update(dict3)\n    return result", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict", "def merge_dictionaries_three(dict1: dict, dict2: dict, dict3: dict) -> dict:\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict"], "outputs": "[[{'R': 'Red', 'B': 'Black', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}], [{'A': 'Apple', 'B': 'Banana', 'C': 'Cherry'}], [{}], [{'X': 'X-ray', 'Y': 'Yellow'}], [{'A': 'Alpha', 'B': 'Beta', 'C': 'Gamma', 'D': 'Delta'}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}], [{}, {'A': 'Apple', 'B': 'Banana'}, {'C': 'Cherry'}], [{}, {}, {}], [{'X': 'X-ray'}, {}, {'Y': 'Yellow'}], [{'A': 'Alpha', 'B': 'Beta'}, {'B': 'Beta', 'C': 'Gamma'}, {'C': 'Gamma', 'D': 'Delta'}]]", "input_output_examples": "[[[{'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'}]], [[{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/88", "original_requirement": "from typing import List\nfrom typing import Dict\n\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Dict\n\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n\"\"\"\nWrite a function to get the frequency of all the elements in a list, returned as a dictionary.\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n\"\"\"", "entry_point": "freq_count", "cluster_list": [{"programs_str": ["from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return {item: list1.count(item) for item in set(list1)}", "from typing import List, Dict, Any\nfrom collections import Counter\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return dict(Counter(list1))", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq_dict = {}\n    for item in list1:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return {element: list1.count(element) for element in set(list1)}", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq_dict = {}\n    for item in list1:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict", "from typing import List, Dict, Any\nfrom collections import Counter\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return dict(Counter(list1))", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return {item: list1.count(item) for item in set(list1)}", "from typing import List, Any, Dict\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq_dict = {}\n    for item in list1:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    frequency_dict = {}\n    for item in list1:\n        frequency_dict[item] = frequency_dict.get(item, 0) + 1\n    return frequency_dict", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return {item: list1.count(item) for item in set(list1)}", "from typing import List, Dict, Any\nfrom collections import Counter\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return dict(Counter(list1))", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return {item: list1.count(item) for item in set(list1)}", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq = {}\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n    return freq", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    freq = {}\n    for item in list1:\n        freq[item] = freq.get(item, 0) + 1\n    return freq", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return {item: list1.count(item) for item in set(list1)}", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return {item: list1.count(item) for item in set(list1)}", "from typing import List, Dict, Any\nfrom collections import Counter\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return dict(Counter(list1))", "from typing import List, Dict, Any\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return {item: list1.count(item) for item in set(list1)}", "from typing import List, Dict, Any\nfrom collections import Counter\n\ndef freq_count(list1: List[Any]) -> Dict[Any, int]:\n    return dict(Counter(list1))"], "outputs": "[[{10: 4, 20: 4, 40: 2, 50: 2, 30: 1}], [{}], [{1: 1}], [{1: 5}], [{'apple': 2, 'banana': 3, 'orange': 1}], [{True: 3, False: 2}], [{None: 4}], [{'a': 3, 'b': 2, 'c': 2, 'd': 1, 'e': 1}], [{3.14: 3, 2.71: 3}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]], [[]], [[1]], [[1, 1, 1, 1, 1]], [['apple', 'banana', 'apple', 'orange', 'banana', 'banana']], [[True, True, False, True, False]], [[None, None, None, None]], [['a', 'b', 'a', 'c', 'd', 'e', 'a', 'b', 'c']], [[3.14, 3.14, 2.71, 3.14, 2.71, 2.71]]]", "input_output_examples": "[[[[10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]]], [[{10: 4, 20: 4, 40: 2, 50: 2, 30: 1}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/89", "original_requirement": "def closest_num(N: int) -> int:\n\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"", "repaired_requirement": "def closest_num(N: int) -> int:\n    \"\"\"\n    Write a function to find the closest smaller number than N by subtracting 1 from N. \n    The function should always decrement N by 1, regardless of whether N is positive, zero, or negative.\n    For example:\n    - If N = 11, the function returns 10.\n    - If N = 0, the function returns -1.\n    - If N = -5, the function returns -6.\n    \n    Input:\n    - N: An integer, which can be positive, zero, or negative.\n\n    Output:\n    - An integer that is exactly 1 less than the input N.\n\n    Example:\n    assert closest_num(11) == 10\n    \"\"\"", "original_clusters": {"requirement": "def closest_num(N: int) -> int:\n\"\"\"\nWrite a function to find the closest smaller number than n.\nassert closest_num(11) == 10\n\"\"\"", "entry_point": "closest_num", "cluster_list": [{"programs_str": ["def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1"], "outputs": "[[10], [-1], [-6], [0], [99], [998], [-1001], [9], [49], [-2]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def closest_num(N: int) -> int:\n    return N - 1 if N > 0 else N", "def closest_num(N: int) -> int:\n    return N - 1 if N > 0 else N"], "outputs": "[[10], [0], [-5], [0], [99], [998], [-1000], [9], [49], [-1]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[11], [0], [-5], [1], [100], [999], [-1000], [10], [50], [-1]]", "input_output_examples": "[[[11]], [[10]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def closest_num(N: int) -> int:\n    \"\"\"\n    Write a function to find the closest smaller number than N by subtracting 1 from N. \n    The function should always decrement N by 1, regardless of whether N is positive, zero, or negative.\n    For example:\n    - If N = 11, the function returns 10.\n    - If N = 0, the function returns -1.\n    - If N = -5, the function returns -6.\n    \n    Input:\n    - N: An integer, which can be positive, zero, or negative.\n\n    Output:\n    - An integer that is exactly 1 less than the input N.\n\n    Example:\n    assert closest_num(11) == 10\n    \"\"\"", "entry_point": "closest_num", "cluster_list": [{"programs_str": ["def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1", "def closest_num(N: int) -> int:\n    return N - 1"], "outputs": "[[10], [-1], [-6], [0], [99], [998], [-1001], [9], [49], [-2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[11], [0], [-5], [1], [100], [999], [-1000], [10], [50], [-1]]", "input_output_examples": "[[[11]], [[10]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.6, "original_avg_pass_rate": 0.76, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/90", "original_requirement": "from typing import List\n\n\ndef len_log(list1: List[str]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef len_log(list1: List[str]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest word.\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\"\"\"", "entry_point": "len_log", "cluster_list": [{"programs_str": ["from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))", "from typing import List\n\ndef len_log(list1: List[str]) -> int:\n    return max((len(word) for word in list1))"], "outputs": "[[7], [5], [6], [15], [6], ['ValueError'], [7], [13], [6], [6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['python', 'PHP', 'bigdata']], [['a', 'ab', 'abcde']], [['apple', 'banana', 'cherry']], [['short', 'medium', 'longestwordhere']], [['single']], [[]], [['', 'test', 'example']], [['apple', 'A', 'abc', 'abcdefghijklm']], [['equal', 'length']], [['repeat', 'repeat', 'repeat']]]", "input_output_examples": "[[[['python', 'PHP', 'bigdata']]], [[7]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/91", "original_requirement": "from typing import List\n\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n\"\"\"\nWrite a function to check if a string is present as a substring in a given list of string values.\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\"\"\"", "entry_point": "find_substring", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    for s in str1:\n        if sub_str in s:\n            return True\n    return False", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in string for string in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in string for string in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))", "from typing import List\n\ndef find_substring(str1: List[str], sub_str: str) -> bool:\n    return any((sub_str in s for s in str1))"], "outputs": "[[True], [True], [False], [True], [False], [False], [True], [True], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['red', 'black', 'white', 'green', 'orange'], 'ack'], [['blue', 'yellow', 'brown'], 'yellow'], [['apple', 'banana', 'cherry'], 'berry'], [['table', 'chair', 'desk'], 'desk'], [['car', 'bike', 'bus', 'train'], 'plane'], [[], 'empty'], [['flower'], 'flow'], [['dog', 'cat', 'fish'], ''], [['hat'], 'hat'], [['school', 'college', 'university'], 'uni'], [['a', 'b', 'c'], 'd'], [['alpha', 'beta', 'gamma', 'delta'], 'bet']]", "input_output_examples": "[[[['red', 'black', 'white', 'green', 'orange'], 'ack']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/92", "original_requirement": "def is_undulating(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"", "repaired_requirement": "```python\ndef is_undulating(n: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    A number is considered undulating if:\n    1. It has at least 3 digits.\n    2. The first two digits are distinct.\n    3. Starting from the third digit, the sequence alternates between the first and second digits based on their position:\n       - Digits at even indices (0-based) must match the first digit.\n       - Digits at odd indices (0-based) must match the second digit.\n\n    Edge cases:\n    - Numbers with fewer than 3 digits are not undulating.\n    - Numbers with repeated or non-alternating digit patterns are not undulating.\n\n    Example:\n    assert is_undulating(1212121) == True\n    \"\"\"\n```", "original_clusters": {"requirement": "def is_undulating(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is undulating or not.\nassert is_undulating(1212121) == True\n\"\"\"", "entry_point": "is_undulating", "cluster_list": [{"programs_str": ["def is_undulating(n: int) -> bool:\n    digits = str(n)\n    if len(digits) < 3:\n        return False\n    first, second = (digits[0], digits[1])\n    if first == second:\n        return False\n    for i in range(2, len(digits)):\n        if digits[i] != (first if i % 2 == 0 else second):\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    digits = str(n)\n    if len(digits) < 3:\n        return False\n    first, second = (digits[0], digits[1])\n    if first == second:\n        return False\n    for i in range(2, len(digits)):\n        if digits[i] != digits[i % 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    first_char = num_str[0]\n    second_char = num_str[1]\n    if first_char == second_char:\n        return False\n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            if num_str[i] != first_char:\n                return False\n        elif num_str[i] != second_char:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first, second = (s[0], s[1])\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != first:\n            return False\n        if i % 2 == 1 and s[i] != second:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    first, second = (num_str[0], num_str[1])\n    if first == second:\n        return False\n    for i in range(2, len(num_str)):\n        if num_str[i] != num_str[i % 2]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    digits = list(str(n))\n    if len(digits) < 3:\n        return False\n    first, second = (digits[0], digits[1])\n    if first == second:\n        return False\n    for i in range(2, len(digits)):\n        if digits[i] != first and digits[i] != second:\n            return False\n        if digits[i] == digits[i - 1]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    first, second = (n_str[0], n_str[1])\n    if first == second:\n        return False\n    for i in range(2, len(n_str)):\n        if i % 2 == 0 and n_str[i] != first or (i % 2 == 1 and n_str[i] != second):\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    first = str_n[0]\n    second = str_n[1]\n    if first == second:\n        return False\n    for i in range(len(str_n)):\n        if i % 2 == 0 and str_n[i] != first:\n            return False\n        if i % 2 == 1 and str_n[i] != second:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    a, b = (str_n[0], str_n[1])\n    if a == b:\n        return False\n    for i in range(2, len(str_n)):\n        if str_n[i] != (a if i % 2 == 0 else b):\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    return all((s[i] != s[i + 1] and s[i] == s[i % 2] for i in range(len(s) - 1)))", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first, second = (s[0], s[1])\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != first:\n            return False\n        if i % 2 == 1 and s[i] != second:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    first_char = num_str[0]\n    second_char = num_str[1]\n    if first_char == second_char:\n        return False\n    for i in range(2, len(num_str)):\n        if num_str[i] != (first_char if i % 2 == 0 else second_char):\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    first, second = (num_str[0], num_str[1])\n    if first == second:\n        return False\n    for i in range(2, len(num_str)):\n        if num_str[i] != first and num_str[i] != second:\n            return False\n        if num_str[i] == num_str[i - 1]:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_char, second_char = (s[0], s[1])\n    if first_char == second_char:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != first_char or (i % 2 == 1 and s[i] != second_char):\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first, second = (s[0], s[1])\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != first:\n            return False\n        if i % 2 == 1 and s[i] != second:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    a, b = (num_str[0], num_str[1])\n    if a == b:\n        return False\n    for i in range(len(num_str)):\n        if i % 2 == 0 and num_str[i] != a:\n            return False\n        if i % 2 == 1 and num_str[i] != b:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    digit1, digit2 = (num_str[0], num_str[1])\n    if digit1 == digit2:\n        return False\n    for i in range(2, len(num_str)):\n        if num_str[i] != digit1 and num_str[i] != digit2:\n            return False\n        if num_str[i] == digit1 and num_str[i - 1] != digit2 or (num_str[i] == digit2 and num_str[i - 1] != digit1):\n            return False\n    return True"], "outputs": "[[True], [False], [True], [True], [False], [False], [False], [True], [False], [False], [False], [False]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 2:\n        return False\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(len(num_str)):\n        if i % 2 == 0 and num_str[i] != first_digit:\n            return False\n        if i % 2 == 1 and num_str[i] != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 2:\n        return False\n    first_char = num_str[0]\n    second_char = num_str[1]\n    if first_char == second_char:\n        return False\n    for i in range(len(num_str)):\n        if i % 2 == 0 and num_str[i] != first_char:\n            return False\n        elif i % 2 == 1 and num_str[i] != second_char:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 2:\n        return False\n    first_digit, second_digit = (num_str[0], num_str[1])\n    if first_digit == second_digit:\n        return False\n    for i in range(2, len(num_str)):\n        if num_str[i] != num_str[i % 2]:\n            return False\n    return True"], "outputs": "[[True], [False], [True], [True], [False], [False], [False], [True], [False], [True], [False], [False]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6098403047164005, "llm_generated_inputs": "[[1212121], [123123123], [101010], [121212], [11], [12345], [0], [121], [222], [12], [7], [-121212]]", "input_output_examples": "[[[1212121]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef is_undulating(n: int) -> bool:\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n\n    A number is considered undulating if:\n    1. It has at least 3 digits.\n    2. The first two digits are distinct.\n    3. Starting from the third digit, the sequence alternates between the first and second digits based on their position:\n       - Digits at even indices (0-based) must match the first digit.\n       - Digits at odd indices (0-based) must match the second digit.\n\n    Edge cases:\n    - Numbers with fewer than 3 digits are not undulating.\n    - Numbers with repeated or non-alternating digit patterns are not undulating.\n\n    Example:\n    assert is_undulating(1212121) == True\n    \"\"\"\n```", "entry_point": "is_undulating", "cluster_list": [{"programs_str": ["def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit, second_digit = (s[0], s[1])\n    if first_digit == second_digit:\n        return False\n    for i, char in enumerate(s):\n        if i % 2 == 0:\n            if char != first_digit:\n                return False\n        elif char != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    if first_digit == second_digit:\n        return False\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            if digit != first_digit:\n                return False\n        elif digit != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit, second_digit = (s[0], s[1])\n    if first_digit == second_digit:\n        return False\n    for i in range(len(s)):\n        expected_digit = first_digit if i % 2 == 0 else second_digit\n        if s[i] != expected_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(len(num_str)):\n        if i % 2 == 0 and num_str[i] != first_digit:\n            return False\n        if i % 2 == 1 and num_str[i] != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(len(num_str)):\n        expected_digit = first_digit if i % 2 == 0 else second_digit\n        if num_str[i] != expected_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit = s[0]\n    second_digit = s[1]\n    if first_digit == second_digit:\n        return False\n    for i, digit in enumerate(s):\n        if i % 2 == 0 and digit != first_digit:\n            return False\n        if i % 2 == 1 and digit != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit, second_digit = (s[0], s[1])\n    if first_digit == second_digit:\n        return False\n    for i, digit in enumerate(s):\n        if i % 2 == 0 and digit != first_digit:\n            return False\n        elif i % 2 == 1 and digit != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    first_digit = num_str[0]\n    second_digit = num_str[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(len(num_str)):\n        if i % 2 == 0:\n            if num_str[i] != first_digit:\n                return False\n        elif num_str[i] != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    first_digit, second_digit = (str_n[0], str_n[1])\n    if first_digit == second_digit:\n        return False\n    for i in range(len(str_n)):\n        expected_digit = first_digit if i % 2 == 0 else second_digit\n        if str_n[i] != expected_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit = s[0]\n    second_digit = s[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != first_digit:\n            return False\n        elif i % 2 == 1 and s[i] != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit, second_digit = (s[0], s[1])\n    if first_digit == second_digit:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first_digit:\n                return False\n        elif s[i] != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    digits = str(n)\n    if len(digits) < 3:\n        return False\n    first_digit, second_digit = (digits[0], digits[1])\n    if first_digit == second_digit:\n        return False\n    for i in range(len(digits)):\n        if i % 2 == 0 and digits[i] != first_digit:\n            return False\n        elif i % 2 == 1 and digits[i] != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit = s[0]\n    second_digit = s[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first_digit:\n                return False\n        elif s[i] != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    if s[0] == s[1]:\n        return False\n    first_digit = s[0]\n    second_digit = s[1]\n    for i in range(len(s)):\n        if i % 2 == 0:\n            if s[i] != first_digit:\n                return False\n        elif s[i] != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    num_str = str(n)\n    if len(num_str) < 3:\n        return False\n    first, second = (num_str[0], num_str[1])\n    if first == second:\n        return False\n    for i, digit in enumerate(num_str):\n        if i % 2 == 0:\n            if digit != first:\n                return False\n        elif digit != second:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit, second_digit = (s[0], s[1])\n    if first_digit == second_digit:\n        return False\n    for i, digit in enumerate(s):\n        if i % 2 == 0 and digit != first_digit or (i % 2 != 0 and digit != second_digit):\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    n_str = str(n)\n    if len(n_str) < 3:\n        return False\n    first_digit = n_str[0]\n    second_digit = n_str[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(2, len(n_str)):\n        expected_digit = first_digit if i % 2 == 0 else second_digit\n        if n_str[i] != expected_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first_digit = s[0]\n    second_digit = s[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(2, len(s)):\n        if i % 2 == 0 and s[i] != first_digit or (i % 2 == 1 and s[i] != second_digit):\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    str_n = str(n)\n    if len(str_n) < 3:\n        return False\n    first_digit = str_n[0]\n    second_digit = str_n[1]\n    if first_digit == second_digit:\n        return False\n    for i in range(len(str_n)):\n        if i % 2 == 0:\n            if str_n[i] != first_digit:\n                return False\n        elif str_n[i] != second_digit:\n            return False\n    return True", "def is_undulating(n: int) -> bool:\n    s = str(n)\n    if len(s) < 3:\n        return False\n    first, second = (s[0], s[1])\n    if first == second:\n        return False\n    for i in range(len(s)):\n        if i % 2 == 0 and s[i] != first:\n            return False\n        if i % 2 == 1 and s[i] != second:\n            return False\n    return True"], "outputs": "[[True], [False], [True], [True], [False], [False], [False], [True], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1212121], [123123123], [101010], [121212], [11], [12345], [0], [121], [222], [12], [7], [-121212]]", "input_output_examples": "[[[1212121]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.09999999999999998, "original_avg_pass_rate": 0.5269230769230769, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.33653846153846156, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/93", "original_requirement": "def power(a: int, b: int) -> int:\n\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def power(a: int, b: int) -> int:\n\"\"\"\nWrite a function to calculate the value of 'a' to the power 'b'.\nassert power(3,4) == 81\n\"\"\"", "entry_point": "power", "cluster_list": [{"programs_str": ["def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b", "def power(a: int, b: int) -> int:\n    return a ** b"], "outputs": "[[81], [0], [1], [1], [-8], [0.125], [-0.125], [10], [1], [1], [-1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 4], [0, 5], [5, 0], [0, 0], [-2, 3], [2, -3], [-2, -3], [10, 1], [1, 100], [-1, 100], [-1, 99]]", "input_output_examples": "[[[3, 4]], [[81]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/94", "original_requirement": "from typing import List\n\n\ndef index_minimum(test_list: List[tuple]) -> any:\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef index_minimum(test_list: List[tuple]) -> any:\n\"\"\"\nGiven a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\"\"\"", "entry_point": "index_minimum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[any, int]]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List, Tuple\n\ndef index_minimum(test_list: List[Tuple[str, int]]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]", "from typing import List\n\ndef index_minimum(test_list: List[tuple]) -> any:\n    return min(test_list, key=lambda x: x[1])[0]"], "outputs": "[['Varsha'], ['Charlie'], ['X'], ['A'], ['Beta'], ['One'], ['Negative'], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]], [[('Alice', 50), ('Bob', 80), ('Charlie', 40)]], [[('X', 300)]], [[('A', 10), ('B', 10), ('C', 10)]], [[('Alpha', -5), ('Beta', -10), ('Gamma', -2)]], [[('One', 0), ('Two', 0)]], [[('Negative', -999), ('Positive', 999)]], [[]]]", "input_output_examples": "[[[[('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]]], [['Varsha']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/95", "original_requirement": "from typing import List\n\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    \"\"\"\n    Write a Python function to find the length of the smallest list in a list of lists.\n    \n    Requirements:\n    1. The input `lst` must be a non-empty list of lists. If `lst` is empty, the function should raise a `ValueError`.\n    2. Empty lists within the input `lst` are valid and their length (`0`) should be considered when determining the smallest list.\n    3. The function should return an integer representing the length of the smallest list in `lst`.\n    \n    Example:\n    assert Find_Min_Length([[1], [1, 2]]) == 1\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the smallest list in a list of lists.\nassert Find_Min_Length([[1],[1,2]]) == 1\n\"\"\"", "entry_point": "Find_Min_Length", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(inner_list) for inner_list in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    return min((len(sublist) for sublist in lst))"], "outputs": "[[1], [1], [0], [0], [0], [1], [1], ['ValueError'], [1], [2]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        return 0\n    return min((len(sublist) for sublist in lst))"], "outputs": "[[1], [1], [0], [0], [0], [1], [1], [0], [1], [2]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[[1], [1, 2]]], [[[1, 2, 3], [4, 5], [6]]], [[[]]], [[[], [1, 2, 3], [4, 5]]], [[[1, 2, 3], [], [], [4]]], [[[1]]], [[[1], [1, 2, 3], [4, 5], [6, 7, 8]]], [[]], [[[1], [2], [3], [4, [5, 6]]]], [[[1, 2], ['a', 'b', 'c'], [3, 4]]]]", "input_output_examples": "[[[[[1], [1, 2]]]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    \"\"\"\n    Write a Python function to find the length of the smallest list in a list of lists.\n    \n    Requirements:\n    1. The input `lst` must be a non-empty list of lists. If `lst` is empty, the function should raise a `ValueError`.\n    2. Empty lists within the input `lst` are valid and their length (`0`) should be considered when determining the smallest list.\n    3. The function should return an integer representing the length of the smallest list in `lst`.\n    \n    Example:\n    assert Find_Min_Length([[1], [1, 2]]) == 1\n    \"\"\"\n```", "entry_point": "Find_Min_Length", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('Input list must not be empty')\n    min_length = min((len(sublist) for sublist in lst))\n    return min_length", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list must not be empty')\n    return min((len(sub_list) for sub_list in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('Input list must not be empty')\n    return min((len(inner_list) for inner_list in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list is empty')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('Input should be a non-empty list of lists.')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('Input list of lists must not be empty')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('Input list must not be empty.')\n    return min((len(sub_list) for sub_list in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list must not be empty.')\n    return min((len(inner_list) for inner_list in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('Input list must not be empty')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list must not be empty.')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list must not be empty.')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('Input list must not be empty')\n    min_length = float('inf')\n    for sublist in lst:\n        sublist_length = len(sublist)\n        if sublist_length < min_length:\n            min_length = sublist_length\n    return min_length", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list must not be empty.')\n    return min((len(sub_list) for sub_list in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list should not be empty.')\n    min_length = float('inf')\n    for sublist in lst:\n        sublist_length = len(sublist)\n        if sublist_length < min_length:\n            min_length = sublist_length\n    return min_length", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('Input list must not be empty.')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list must be non-empty.')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list must be non-empty')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list must be non-empty.')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list must be a non-empty list of lists.')\n    return min((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Min_Length(lst: List[List[Any]]) -> int:\n    if not lst:\n        raise ValueError('The input list must not be empty')\n    return min((len(sublist) for sublist in lst))"], "outputs": "[[1], [1], [0], [0], [0], [1], [1], ['ValueError'], [1], [2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1], [1, 2]]], [[[1, 2, 3], [4, 5], [6]]], [[[]]], [[[], [1, 2, 3], [4, 5]]], [[[1, 2, 3], [], [], [4]]], [[[1]]], [[[1], [1, 2, 3], [4, 5], [6, 7, 8]]], [[]], [[[1], [2], [3], [4, [5, 6]]]], [[[1, 2], ['a', 'b', 'c'], [3, 4]]]]", "input_output_examples": "[[[[[1], [1, 2]]]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/96", "original_requirement": "def divisor(n: int) -> int:\n\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"", "repaired_requirement": "```python\ndef divisor(n: int) -> int:\n    \"\"\"\n    Write a Python function to find the number of positive divisors of a given integer `n`.\n    \n    - The function should return the count of all positive integers that divide `n` without a remainder.\n    - If `n` is less than or equal to `0`, the function should return `0`, as no positive divisors exist for such cases.\n    - The function does not raise exceptions for invalid inputs and assumes `n` is an integer.\n\n    Example:\n    assert divisor(15) == 4  # Positive divisors of 15 are: 1, 3, 5, 15\n    \"\"\"\n```", "original_clusters": {"requirement": "def divisor(n: int) -> int:\n\"\"\"\nWrite a python function to find the number of divisors of a given integer.\nassert divisor(15) == 4\n\"\"\"", "entry_point": "divisor", "cluster_list": [{"programs_str": ["def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))", "def divisor(n: int) -> int:\n    return sum((1 for i in range(1, n + 1) if n % i == 0))"], "outputs": "[[1], [4], [6], [0], [0], [5], [2], [3], [6], [0]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def divisor(n: int) -> int:\n    import math\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1 if i == n // i else 2\n    return count", "def divisor(n: int) -> int:\n    from math import isqrt\n    count = 0\n    for i in range(1, isqrt(n) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    from math import isqrt\n    count = 0\n    for i in range(1, isqrt(n) + 1):\n        if n % i == 0:\n            count += 2 if i != n // i else 1\n    return count", "def divisor(n: int) -> int:\n    from math import isqrt\n    count = 0\n    for i in range(1, isqrt(n) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count"], "outputs": "[[1], [4], [6], ['ValueError'], [0], [5], [2], [3], [6], ['ValueError']]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[1], [15], [28], [-15], [0], [16], [97], [25], [12], [-1]]", "input_output_examples": "[[[15]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef divisor(n: int) -> int:\n    \"\"\"\n    Write a Python function to find the number of positive divisors of a given integer `n`.\n    \n    - The function should return the count of all positive integers that divide `n` without a remainder.\n    - If `n` is less than or equal to `0`, the function should return `0`, as no positive divisors exist for such cases.\n    - The function does not raise exceptions for invalid inputs and assumes `n` is an integer.\n\n    Example:\n    assert divisor(15) == 4  # Positive divisors of 15 are: 1, 3, 5, 15\n    \"\"\"\n```", "entry_point": "divisor", "cluster_list": [{"programs_str": ["def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count", "def divisor(n: int) -> int:\n    if n <= 0:\n        return 0\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"], "outputs": "[[1], [4], [6], [0], [0], [5], [2], [3], [6], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [15], [28], [-15], [0], [16], [97], [25], [12], [-1]]", "input_output_examples": "[[[15]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/97", "original_requirement": "from typing import List\nfrom typing import Dict\n\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Dict\n\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n\"\"\"\nWrite a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\"\"\"", "entry_point": "frequency_lists", "cluster_list": [{"programs_str": ["from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [elem for sublist in list1 for elem in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [element for sublist in list1 for element in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    return dict(Counter((item for sublist in list1 for item in sublist)))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    return dict(Counter([item for sublist in list1 for item in sublist]))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [element for inner_list in list1 for element in inner_list]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    return dict(Counter([item for sublist in list1 for item in sublist]))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))", "from typing import List, Dict\nfrom collections import Counter\n\ndef frequency_lists(list1: List[List[int]]) -> Dict[int, int]:\n    flattened_list = [item for sublist in list1 for item in sublist]\n    return dict(Counter(flattened_list))"], "outputs": "[[{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}], [{}], [{1: 1}], [{1: 4}], [{10: 3, 20: 3, 30: 2}], [{-1: 2, -2: 2, -3: 2}], [{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}], [{2: 4, 3: 5}], [{0: 9}], [{1: 4}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]], [[]], [[[1]]], [[[1, 1, 1, 1]]], [[[10, 20, 30], [10, 20, 30], [10, 20]]], [[[-1, -2, -3], [-1, -2, -3]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[2, 3, 3], [3, 3, 2], [2, 3, 2]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[1], [1], [1], [1]]]]", "input_output_examples": "[[[[[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]]], [[{1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/98", "original_requirement": "from typing import List\n\n\ndef multiply_num(numbers: List[int]) -> float:\n\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef multiply_num(numbers: List[int]) -> float:\n\"\"\"\nWrite a function to multiply all the numbers in a list and divide with the length of the list.\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)\n\"\"\"", "entry_point": "multiply_num", "cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "import math\nfrom typing import List\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    result = product / len(numbers)\n    return result", "import math\nfrom typing import List\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "from typing import List\nimport math\n\ndef multiply_num(numbers: List[int]) -> float:\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"], "outputs": "[[-67.2], [6.0], [10.0], ['ZeroDivisionError'], [0.0], [-2.0], [0.25], [50.0], [0.0], [-33.333333333333336]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[8, 2, 3, -1, 7]], [[1, 2, 3, 4]], [[10]], [[]], [[0, 2, 3]], [[-3, -2, -1]], [[1, 1, 1, 1]], [[1000, 0.1]], [[0]], [[-2, 5, 10]]]", "input_output_examples": "[[[[8, 2, 3, -1, 7]]], [[-67.2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/99", "original_requirement": "def decimal_to_binary(n: int) -> str:\n\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def decimal_to_binary(n: int) -> str:\n\"\"\"\nWrite a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\nassert decimal_to_binary(8) == '1000'\n\"\"\"", "entry_point": "decimal_to_binary", "cluster_list": [{"programs_str": ["def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]"], "outputs": "[['0'], ['1'], ['10'], ['1000'], ['1111'], ['10000'], ['11111111'], ['10000000000'], ['b1'], ['1111111111111111111111111111111']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [8], [15], [16], [255], [1024], [-1], [2147483647]]", "input_output_examples": "[[[8]], [['1000']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.5233644859813085, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/100", "original_requirement": "def next_smallest_palindrome(num: int) -> int:\n\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def next_smallest_palindrome(num: int) -> int:\n\"\"\"\nWrite a function to find the next smallest palindrome of a specified integer, returned as an integer.\nassert next_smallest_palindrome(99)==101\n\"\"\"", "entry_point": "next_smallest_palindrome", "cluster_list": [{"programs_str": ["def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(x: int) -> bool:\n        return str(x) == str(x)[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    candidate = num + 1\n    while not is_palindrome(candidate):\n        candidate += 1\n    return candidate", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    while True:\n        num += 1\n        if is_palindrome(num):\n            return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        str_n = str(n)\n        return str_n == str_n[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num", "def next_smallest_palindrome(num: int) -> int:\n\n    def is_palindrome(n: int) -> bool:\n        s = str(n)\n        return s == s[::-1]\n    num += 1\n    while not is_palindrome(num):\n        num += 1\n    return num"], "outputs": "[[101], [131], [8], [818], [1001], [1111], [1], [22], [999], [21512]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[99], [123], [7], [808], [999], [1001], [0], [11], [998], [21451]]", "input_output_examples": "[[[99]], [[101]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/101", "original_requirement": "from typing import List\n\n\ndef kth_element(arr: List[int], k: int) -> int:\n\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef kth_element(arr: List[int], k: int) -> int:\n\"\"\"\nWrite a function to find the kth element in the given array using 1-based indexing.\nassert kth_element([12,3,5,7,19], 2) == 3\n\"\"\"", "entry_point": "kth_element", "cluster_list": [{"programs_str": ["from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]", "from typing import List\n\ndef kth_element(arr: List[int], k: int) -> int:\n    return arr[k - 1]"], "outputs": "[[3], [5], [1], [7], [1], [10], [16], [100], [50], [15]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[12, 3, 5, 7, 19], 2], [[1, 2, 3, 4, 5], 5], [[1], 1], [[9, 8, 7, 6], 3], [[1, 1, 1, 1, 1], 4], [[10, 20, 30, 40], 1], [[15, 16, 17], 2], [[100], 1], [[10, 20, 30, 40, 50], 5], [[5, 10, 15, 20], 3]]", "input_output_examples": "[[[[12, 3, 5, 7, 19], 2]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.8261682242990653, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/102", "original_requirement": "def snake_to_camel(word: str) -> str:\n\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def snake_to_camel(word: str) -> str:\n\"\"\"\nWrite a function to convert a snake case string to camel case string.\nassert snake_to_camel('python_program')=='PythonProgram'\n\"\"\"", "entry_point": "snake_to_camel", "cluster_list": [{"programs_str": ["def snake_to_camel(word: str) -> str:\n    return ''.join((w.capitalize() for w in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((x.capitalize() for x in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((w.capitalize() for w in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((substring.capitalize() for substring in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    parts = word.split('_')\n    return ''.join((part.capitalize() for part in parts))", "def snake_to_camel(word: str) -> str:\n    return ''.join([x.capitalize() for x in word.split('_')])", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((w.capitalize() for w in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join([part.capitalize() for part in word.split('_')])", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((x.capitalize() for x in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((w.capitalize() for w in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))", "def snake_to_camel(word: str) -> str:\n    return ''.join([w.capitalize() for w in word.split('_')])", "def snake_to_camel(word: str) -> str:\n    return ''.join([part.capitalize() for part in word.split('_')])", "def snake_to_camel(word: str) -> str:\n    return ''.join([part.capitalize() for part in word.split('_')])", "def snake_to_camel(word: str) -> str:\n    return ''.join((part.capitalize() for part in word.split('_')))"], "outputs": "[['PythonProgram'], ['SnakeCase'], ['ConvertThisString'], ['Singleword'], ['LeadingUnderscores'], ['TrailingUnderscores'], ['BothEnds'], ['MultipleUnderscoresInWord'], ['123NumbersInWord'], ['SpecialCharacters!@$%^'], ['EmptyString'], ['']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['python_program'], ['snake_case'], ['convert_this_string'], ['singleword'], ['__leading_underscores'], ['trailing_underscores__'], ['__both_ends__'], ['multiple___underscores_in_word'], ['123_numbers_in_word'], ['__special_characters!@$%^'], ['empty_string'], ['_']]", "input_output_examples": "[[['python_program']], [['PythonProgram']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.11504424778761058, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/103", "original_requirement": "def eulerian_num(n: int, m: int) -> int:\n\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"", "repaired_requirement": "def eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n    Compute the Eulerian number a(n, m) using the recursive definition.\n\n    The Eulerian number a(n, m) is defined as:\n    - a(n, m) = 0 if m < 0 or m >= n\n    - a(n, m) = 1 if n == 0 and m == 0\n    - a(n, m) = 0 if n == 0 and m != 0\n    - a(n, m) = 1 if m == 0 and n > 0\n    - a(n, m) = (n - m) * a(n - 1, m - 1) + (m + 1) * a(n - 1, m) otherwise\n\n    Constraints:\n    - n and m are non-negative integers.\n    - If m is greater than or equal to n, or if m is negative, the function should return 0.\n    - For n == 0, the function should return 1 only if m == 0; otherwise, it should return 0.\n\n    Examples:\n    - assert eulerian_num(3, 1) == 4\n    - Input: [5, 3], Expected Output: [26]\n    - Input: [0, 0], Expected Output: [0]\n    \"\"\"", "original_clusters": {"requirement": "def eulerian_num(n: int, m: int) -> int:\n\"\"\"\nWrite a function to find the Eulerian number a(n, m).\nassert eulerian_num(3, 1) == 4\n\"\"\"", "entry_point": "eulerian_num", "cluster_list": [{"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0 or m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m >= n or m < 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or n == 0 or m < 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m >= n or m < 0:\n        return 0\n    if n == 0 and m == 0 or (n == 1 and m == 0):\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m >= n or m < 0:\n        return 0\n    elif n == 0 or m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or n == 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m >= n or m < 0:\n        return 0\n    if n == 0 or m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"], "outputs": "[[4], [0], [0], [26], [1], [1], [47840], [0], [0], [0], [0]]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or n == 0 or m < 0:\n        return 0\n    if n == 1 and m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n - 1, m - 1)"], "outputs": "[[8], [0], [0], [192], [720], [720], [8709120], [0], [0], [0], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [8], [4]]]"}, {"programs_str": ["from math import factorial\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or m < 0:\n        return 0\n    return sum(((-1) ** k * factorial(n + 1) // (factorial(k) * factorial(n + 1 - k)) * (n + 1 - k) ** m for k in range(m + 2)))"], "outputs": "[[4], [0], [0], [6], [-6], [0], [-7084], [0], [0], [0], [0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m < 0 or m >= n:\n        return 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"], "outputs": "[[4], [1], [0], [26], [1], [1], [47840], [0], [0], [0], [0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    if m >= n or m < 0 or n < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if n == 0 or m < 0 or m >= n:\n        return 0 if m >= n or m < 0 else 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m >= n or m < 0:\n        return 0\n    elif n == 0:\n        return 1 if m == 0 else 0\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n    if m >= n or m < 0:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"], "outputs": "[[0], [0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 1], [0], [4]]]"}], "entropy": 0.6531822761588254, "llm_generated_inputs": "[[3, 1], [0, 0], [1, 1], [5, 3], [6, 0], [6, 5], [10, 2], [2, 2], [4, 4], [-1, 0], [4, -1]]", "input_output_examples": "[[[3, 1]], [[4]]]", "weighted_test_consistency": 0.75, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def eulerian_num(n: int, m: int) -> int:\n    \"\"\"\n    Compute the Eulerian number a(n, m) using the recursive definition.\n\n    The Eulerian number a(n, m) is defined as:\n    - a(n, m) = 0 if m < 0 or m >= n\n    - a(n, m) = 1 if n == 0 and m == 0\n    - a(n, m) = 0 if n == 0 and m != 0\n    - a(n, m) = 1 if m == 0 and n > 0\n    - a(n, m) = (n - m) * a(n - 1, m - 1) + (m + 1) * a(n - 1, m) otherwise\n\n    Constraints:\n    - n and m are non-negative integers.\n    - If m is greater than or equal to n, or if m is negative, the function should return 0.\n    - For n == 0, the function should return 1 only if m == 0; otherwise, it should return 0.\n\n    Examples:\n    - assert eulerian_num(3, 1) == 4\n    - Input: [5, 3], Expected Output: [26]\n    - Input: [0, 0], Expected Output: [0]\n    \"\"\"", "entry_point": "eulerian_num", "cluster_list": [{"programs_str": ["def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    elif n == 0 and m == 0:\n        return 1\n    elif n == 0 and m != 0:\n        return 0\n    elif m == 0 and n > 0:\n        return 1\n    else:\n        return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0 and n > 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if n == 0 and m != 0:\n        return 0\n    if m == 0 and n > 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if n == 0 and m != 0:\n        return 0\n    if m == 0 and n > 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if n == 0 and m != 0:\n        return 0\n    if m == 0 and n > 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "from functools import lru_cache\n\ndef eulerian_num(n: int, m: int) -> int:\n\n    def compute_eulerian(n, m):\n        if m < 0 or m >= n:\n            return 0\n        if n == 0 and m == 0:\n            return 1\n        if n == 0:\n            return 0\n        if m == 0 and n > 0:\n            return 1\n        return (n - m) * compute_eulerian(n - 1, m - 1) + (m + 1) * compute_eulerian(n - 1, m)\n    return compute_eulerian(n, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if n == 0 and m != 0:\n        return 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if n == 0 and m != 0:\n        return 0\n    if m == 0 and n > 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0:\n        return 1 if m == 0 else 0\n    if m == 0 and n > 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)", "def eulerian_num(n: int, m: int) -> int:\n    if m < 0 or m >= n:\n        return 0\n    if n == 0 and m == 0:\n        return 1\n    if n == 0 and m != 0:\n        return 0\n    if m == 0 and n > 0:\n        return 1\n    return (n - m) * eulerian_num(n - 1, m - 1) + (m + 1) * eulerian_num(n - 1, m)"], "outputs": "[[4], [0], [0], [26], [1], [1], [47840], [0], [0], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 1], [0, 0], [1, 1], [5, 3], [6, 0], [6, 5], [10, 2], [2, 2], [4, 4], [-1, 0], [4, -1]]", "input_output_examples": "[[[3, 1]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9528846153846153, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/104", "original_requirement": "from typing import List\n\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "entry_point": "sort_sublists", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]", "from typing import List\n\ndef sort_sublists(input_list: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in input_list]"], "outputs": "[[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]], [[['hello', 'world'], ['hello', 'world']]], [[['apple'], ['banana'], ['cherry']]], [[['A', 'B', 'a'], ['C', 'b', 'c']]], [[['m', 'x', 'z'], ['a', 'b'], []]], [[[]]], [[['identical'], ['identical'], ['identical']]], [[['another spaced', 'spaced word', 'worded space']]], [[['12', '123', '23'], ['890', '9', '98']]], [[['alpha', 'alpha', 'beta'], ['delta', 'gamma', 'gamma']]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['hello', 'world'], ['world', 'hello']]], [[['apple'], ['banana'], ['cherry']]], [[['A', 'B', 'a'], ['C', 'b', 'c']]], [[['z', 'm', 'x'], ['a', 'b'], []]], [[[]]], [[['identical'], ['identical'], ['identical']]], [[['spaced word', 'another spaced', 'worded space']]], [[['123', '23', '12'], ['98', '9', '890']]], [[['alpha', 'beta', 'alpha'], ['gamma', 'delta', 'gamma']]]]", "input_output_examples": "[[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]], [[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/105", "original_requirement": "from typing import List\n\n\ndef count(lst: List[bool]) -> int:\n\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef count(lst: List[bool]) -> int:\n\"\"\"\nWrite a python function to count true booleans in the given list.\nassert count([True,False,True]) == 2\n\"\"\"", "entry_point": "count", "cluster_list": [{"programs_str": ["from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum((1 for x in lst if x))", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum((1 for item in lst if item is True))", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum((1 for item in lst if item is True))", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum((1 for item in lst if item == True))", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum((1 for item in lst if item is True))", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum(lst)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return lst.count(True)", "from typing import List\n\ndef count(lst: List[bool]) -> int:\n    return sum((1 for item in lst if item is True))"], "outputs": "[[2], [0], [4], [0], [1], [0], [2], [2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[True, False, True]], [[False, False, False]], [[True, True, True, True]], [[]], [[True]], [[False]], [[False, True, False, True, False]], [[True, False, False, False, True]]]", "input_output_examples": "[[[[True, False, True]]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/106", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to append the given list to the given tuples.\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\"\"\"", "entry_point": "add_lists", "cluster_list": [{"programs_str": ["from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import Any, List, Tuple\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import Any, List, Tuple\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import Any, List, Tuple\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)", "from typing import List, Tuple, Any\n\ndef add_lists(test_list: List[Any], test_tup: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return test_tup + tuple(test_list)"], "outputs": "[[(9, 10, 5, 6, 7)], [(1, 2, 3)], [(10, 20, 30)], [()], [(None, 'Text', True, False)], [(5, 6, 7, 8, 1, 2, 3, 4)], [(200, 100)], [('c', 'd', 'e', 'a', 'b')], [(1, 2.5, 3.0, 'test')], [(6, {7: 8}, 1, [2, 3], {4: 5})]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 6, 7], (9, 10)], [[], (1, 2, 3)], [[10, 20, 30], ()], [[], ()], [[True, False], (None, 'Text')], [[1, 2, 3, 4], (5, 6, 7, 8)], [[100], (200,)], [['a', 'b'], ('c', 'd', 'e')], [['test'], (1, 2.5, 3.0)], [[1, [2, 3], {4: 5}], (6, {7: 8})]]", "input_output_examples": "[[[[5, 6, 7], (9, 10)]], [[(9, 10, 5, 6, 7)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/108", "original_requirement": "from typing import List\n\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n\"\"\"\nWrite a function to merge three lists into a single sorted list.\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\"\"\"", "entry_point": "merge_sorted_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    combined = num1 + num2 + num3\n    combined.sort()\n    return combined", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    merged_list.sort()\n    return merged_list", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    merged_list = num1 + num2 + num3\n    return sorted(merged_list)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)", "from typing import List\n\ndef merge_sorted_list(num1: List[int], num2: List[int], num3: List[int]) -> List[int]:\n    return sorted(num1 + num2 + num3)"], "outputs": "[[[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3]], [[5, 10, 15]], [[1, 2, 2, 3, 3, 3, 4, 4, 4]], [[-5, -4, -3, -2, -1, 0, 1, 2, 3]], [[25, 50, 75, 100, 125, 150, 200, 250, 300]], [[1, 2, 3]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]], [[1, 3, 5], [2, 4, 6], [7, 8, 9]], [[], [2, 4, 6], [1, 3, 5]], [[], [], [1, 2, 3]], [[10, 15], [], [5]], [[1, 2, 2], [3, 3, 3], [4, 4, 4]], [[-3, -1, 0], [-2, 1, 2], [-5, -4, 3]], [[100, 200, 300], [50, 150, 250], [25, 75, 125]], [[2], [3], [1]], [[], [], []]]", "input_output_examples": "[[[[25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48]]], [[[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/109", "original_requirement": "def odd_Equivalent(s: str, n: int) -> int:\n\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"", "repaired_requirement": "def odd_Equivalent(s: str, n: int) -> int:\n    \"\"\"\n    Write a Python function to count how many rotations of a binary string result in an odd decimal value. \n\n    The function performs the following steps:\n    1. Rotate the binary string `s` cyclically `n` times. Each rotation is computed modulo the length of the string, ensuring wraparound behavior.\n       - For a given rotation index `i`, the rotated string is defined as:\n         `rotated = s[-(i % len(s)):] + s[:-(i % len(s))]`.\n    2. Convert each rotated binary string to its decimal equivalent and check if it is odd using the modulus operator `% 2`.\n    3. Count all rotations (including repeated rotations due to `n` exceeding the string length) where the decimal value is odd.\n\n    Example:\n    - Input: odd_Equivalent(\"011001\", 6)\n    - Rotations: \"011001\", \"101100\", \"110110\", \"011011\", \"101101\", \"110110\".\n    - Odd decimal values: \"011001\" (25), \"011011\" (27), \"101101\" (45).\n    - Output: 3\n\n    Input and expected output examples:\n    ### Test 1\n    Input: ['101010', 1]\n    Expected Output: [0]\n    ### Test 2\n    Input: ['101010', 1]\n    Expected Output: [0]\n    ### Test 3\n    Input: ['1100', 8]\n    Expected Output: [4]\n    ### Test 4\n    Input: ['1', 6]\n    Expected Output: [6]\n    ### Test 5\n    Input: ['1100', 8]\n    Expected Output: [4]\n    \"\"\"", "original_clusters": {"requirement": "def odd_Equivalent(s: str, n: int) -> int:\n\"\"\"\nWrite a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\nassert odd_Equivalent(\"011001\",6) == 3\n\"\"\"", "entry_point": "odd_Equivalent", "cluster_list": [{"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n\n    def is_odd(binary_str: str) -> bool:\n        return int(binary_str, 2) % 2 != 0\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        if is_odd(rotated):\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    from collections import deque\n    binary_string = deque(s)\n    odd_count = 0\n    for _ in range(n):\n        rotated_string = ''.join(binary_string)\n        decimal_value = int(rotated_string, 2)\n        if decimal_value % 2 != 0:\n            odd_count += 1\n        binary_string.rotate(1)\n    return odd_count", "from typing import List\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n\n    def is_odd(binary_str: str) -> bool:\n        return int(binary_str, 2) % 2 == 1\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-i % length:] + s[:-i % length]\n        if is_odd(rotated):\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    from collections import deque\n\n    def is_odd(binary: str) -> bool:\n        return int(binary, 2) % 2 == 1\n    binary_deque = deque(s)\n    odd_count = 0\n    for _ in range(n):\n        if is_odd(''.join(binary_deque)):\n            odd_count += 1\n        binary_deque.rotate(1)\n    return odd_count", "def odd_Equivalent(s: str, n: int) -> int:\n\n    def is_odd(binary_string: str) -> bool:\n        decimal_value = int(binary_string, 2)\n        return decimal_value % 2 == 1\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated_string = s[-(i % length):] + s[:-(i % length)]\n        if is_odd(rotated_string):\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n\n    def is_odd(binary_str: str) -> bool:\n        return int(binary_str, 2) % 2 == 1\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-i % length:] + s[:length - i % length]\n        if is_odd(rotated):\n            count += 1\n    return count"], "outputs": "[[3], [6], [0], [3], [0], [0], [1], [0], [6], [0], [2], [4], [0]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n    from collections import deque\n    binary_string = deque(s)\n    odd_count = 0\n    for _ in range(n):\n        binary_string.rotate(1)\n        rotated_binary = ''.join(binary_string)\n        decimal_value = int(rotated_binary, 2)\n        if decimal_value % 2 == 1:\n            odd_count += 1\n    return odd_count", "def odd_Equivalent(s: str, n: int) -> int:\n    from collections import deque\n    binary_deque = deque(s)\n    odd_count = 0\n    for _ in range(n):\n        binary_deque.rotate(1)\n        rotated_binary_str = ''.join(binary_deque)\n        decimal_value = int(rotated_binary_str, 2)\n        if decimal_value % 2 == 1:\n            odd_count += 1\n    return odd_count", "def odd_Equivalent(s: str, n: int) -> int:\n    from collections import deque\n\n    def is_odd(binary_str: str) -> bool:\n        return int(binary_str, 2) % 2 != 0\n    binary_deque = deque(s)\n    odd_count = 0\n    for _ in range(n):\n        binary_deque.rotate(1)\n        rotated_binary = ''.join(binary_deque)\n        if is_odd(rotated_binary):\n            odd_count += 1\n    return odd_count", "def odd_Equivalent(s: str, n: int) -> int:\n    from collections import deque\n    binary_string = deque(s)\n    count = 0\n    for _ in range(n):\n        binary_string.rotate(1)\n        if int(''.join(binary_string), 2) % 2 != 0:\n            count += 1\n    return count"], "outputs": "[[3], [6], [0], [3], [1], [0], [0], [0], [6], [0], [2], [4], [1]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    odd_count = 0\n    length = len(s)\n    for i in range(n):\n        s = s[1:] + s[0]\n        binary_value = int(s, 2)\n        if binary_value % 2 != 0:\n            odd_count += 1\n    return odd_count", "def odd_Equivalent(s: str, n: int) -> int:\n\n    def is_odd(binary_str: str) -> bool:\n        return int(binary_str, 2) % 2 != 0\n    count = 0\n    for i in range(n):\n        s = s[1:] + s[0]\n        if is_odd(s):\n            count += 1\n    return count", "from typing import List\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    binary = s\n    for _ in range(n):\n        binary = binary[1:] + binary[0]\n        if int(binary, 2) % 2 != 0:\n            count += 1\n    return count"], "outputs": "[[3], [6], [0], [3], [1], [0], [0], [0], [6], [0], [2], [4], [2]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n\n    def rotate_string(s: str, times: int) -> str:\n        return s[-times:] + s[:-times]\n    count = 0\n    for i in range(n):\n        rotated = rotate_string(s, i)\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n\n    def is_odd(binary_str):\n        return int(binary_str, 2) % 2 == 1\n    count = 0\n    for i in range(n):\n        rotated = s[-i:] + s[:-i]\n        if is_odd(rotated):\n            count += 1\n    return count"], "outputs": "[[3], [6], [0], [3], [0], [0], [1], [0], [6], [0], [2], [2], [0]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n    bin_length = len(s)\n    rotations = [s[i:] + s[:i] for i in range(bin_length)]\n    odd_count = 0\n    for i in range(min(n, bin_length)):\n        rotated_binary = rotations[i]\n        decimal_value = int(rotated_binary, 2)\n        if decimal_value % 2 != 0:\n            odd_count += 1\n    return odd_count"], "outputs": "[[3], [6], [0], [3], [0], [0], [1], [0], [1], [0], [2], [2], [1]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n\n    def is_odd(binary_str):\n        return int(binary_str, 2) % 2 == 1\n    rotations = [s[i:] + s[:i] for i in range(n)]\n    return sum((is_odd(rotation) for rotation in rotations))"], "outputs": "[[3], [6], [0], [3], [0], [0], [1], [0], [6], [0], [2], [2], [1]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n\n    def binary_to_decimal(binary_str: str) -> int:\n        return int(binary_str, 2)\n    odd_count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[i % length:] + s[:i % length]\n        if binary_to_decimal(rotated) % 2 == 1:\n            odd_count += 1\n    return odd_count"], "outputs": "[[3], [6], [0], [3], [0], [0], [1], [0], [6], [0], [2], [4], [1]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8492633763712859, "llm_generated_inputs": "[['011001', 6], ['111111', 6], ['000000', 6], ['010101', 6], ['101010', 1], ['011001', 0], ['011001', 1], ['011001', -1], ['1', 6], ['0', 6], ['1100', 4], ['1100', 8], ['1100', 2]]", "input_output_examples": "[[['011001', 6]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def odd_Equivalent(s: str, n: int) -> int:\n    \"\"\"\n    Write a Python function to count how many rotations of a binary string result in an odd decimal value. \n\n    The function performs the following steps:\n    1. Rotate the binary string `s` cyclically `n` times. Each rotation is computed modulo the length of the string, ensuring wraparound behavior.\n       - For a given rotation index `i`, the rotated string is defined as:\n         `rotated = s[-(i % len(s)):] + s[:-(i % len(s))]`.\n    2. Convert each rotated binary string to its decimal equivalent and check if it is odd using the modulus operator `% 2`.\n    3. Count all rotations (including repeated rotations due to `n` exceeding the string length) where the decimal value is odd.\n\n    Example:\n    - Input: odd_Equivalent(\"011001\", 6)\n    - Rotations: \"011001\", \"101100\", \"110110\", \"011011\", \"101101\", \"110110\".\n    - Odd decimal values: \"011001\" (25), \"011011\" (27), \"101101\" (45).\n    - Output: 3\n\n    Input and expected output examples:\n    ### Test 1\n    Input: ['101010', 1]\n    Expected Output: [0]\n    ### Test 2\n    Input: ['101010', 1]\n    Expected Output: [0]\n    ### Test 3\n    Input: ['1100', 8]\n    Expected Output: [4]\n    ### Test 4\n    Input: ['1', 6]\n    Expected Output: [6]\n    ### Test 5\n    Input: ['1100', 8]\n    Expected Output: [4]\n    \"\"\"", "entry_point": "odd_Equivalent", "cluster_list": [{"programs_str": ["def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count", "from typing import List\n\ndef odd_Equivalent(s: str, n: int) -> int:\n    odd_count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        decimal_value = int(rotated, 2)\n        if decimal_value % 2 != 0:\n            odd_count += 1\n    return odd_count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        if int(rotated, 2) % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = -(i % length)\n        rotated = s[rotation_index:] + s[:rotation_index]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        decimal_value = int(rotated, 2)\n        if decimal_value % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        decimal_value = int(rotated, 2)\n        if decimal_value % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    length = len(s)\n    count = 0\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        decimal_value = int(rotated, 2)\n        if decimal_value % 2 != 0:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        decimal_value = int(rotated, 2)\n        if decimal_value % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotation_index = i % length\n        rotated = s[-rotation_index:] + s[:-rotation_index]\n        decimal_value = int(rotated, 2)\n        if decimal_value % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "def odd_Equivalent(s: str, n: int) -> int:\n    count = 0\n    length = len(s)\n    for i in range(n):\n        rotated = s[-(i % length):] + s[:-(i % length)]\n        decimal_value = int(rotated, 2)\n        if decimal_value % 2 == 1:\n            count += 1\n    return count"], "outputs": "[[3], [6], [0], [3], [0], [0], [1], [0], [6], [0], [2], [4], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['011001', 6], ['111111', 6], ['000000', 6], ['010101', 6], ['101010', 1], ['011001', 0], ['011001', 1], ['011001', -1], ['1', 6], ['0', 6], ['1100', 4], ['1100', 8], ['1100', 2]]", "input_output_examples": "[[['011001', 6]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.5219047619047619, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.6476190476190475, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/111", "original_requirement": "from typing import List\n\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n\n    Requirements:\n    1. Input:\n       - `nestedlist` must be a list of lists, where each sublist contains integers.\n       - If `nestedlist` is empty (`[]`), the function should return an empty list (`[]`).\n       - If any sublist within `nestedlist` is empty (`[[]]` or contains empty sublists), the function should raise a `TypeError`.\n       - The function does not validate input types beyond the assumption that `nestedlist` is well-formed as `List[List[int]]`.\n\n    2. Output:\n       - The function returns a list of integers (`List[int]`) containing the elements that are common across all sublists in `nestedlist`.\n       - The order of elements in the output list is arbitrary, as the result is derived from a set operation.\n\n    Example:\n    assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function to find the common elements in given nested lists.\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])\n\"\"\"", "entry_point": "common_in_nested_lists", "cluster_list": [{"programs_str": ["from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    return list(set.intersection(*map(set, nestedlist)))"], "outputs": "[[[18, 12]], [[]], [[30]], [[300]], [[]], ['TypeError'], [[1]], [[3]], [[6]], [[0]]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements = common_elements.intersection(lst)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    common_elements = set(nestedlist[0])\n    for lst in nestedlist[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"], "outputs": "[[[18, 12]], [[]], [[30]], [[300]], [[]], [[]], [[1]], [[3]], [[6]], [[0]]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6098403047164005, "llm_generated_inputs": "[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[10, 20, 30], [30, 40, 50], [60, 70, 30]]], [[[100, 200, 300], [200, 300, 400], [300, 400, 500]]], [[[1, 2], [], [2, 3]]], [[]], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]]], [[[1, 2, 3], [3, 4, 5], [5, 6, 3]]], [[[6], [6], [6]]], [[[0, 0], [0], [0, 0, 0]]]]", "input_output_examples": "[[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]]], [[[18, 12]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    \"\"\"\n    Write a function to find the common elements in given nested lists.\n\n    Requirements:\n    1. Input:\n       - `nestedlist` must be a list of lists, where each sublist contains integers.\n       - If `nestedlist` is empty (`[]`), the function should return an empty list (`[]`).\n       - If any sublist within `nestedlist` is empty (`[[]]` or contains empty sublists), the function should raise a `TypeError`.\n       - The function does not validate input types beyond the assumption that `nestedlist` is well-formed as `List[List[int]]`.\n\n    2. Output:\n       - The function returns a list of integers (`List[int]`) containing the elements that are common across all sublists in `nestedlist`.\n       - The order of elements in the output list is arbitrary, as the result is derived from a set operation.\n\n    Example:\n    assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])\n    \"\"\"\n```", "entry_point": "common_in_nested_lists", "cluster_list": [{"programs_str": ["from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    for sublist in nestedlist:\n        if not sublist:\n            raise TypeError('Sublists must not be empty')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError('Sublists must not be empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError('Nested lists contain empty sublist(s).')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError('Sublist cannot be empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError('Sublists within the nested list cannot be empty.')\n    result_set = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        result_set &= set(sublist)\n    return list(result_set)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError('Nested list contains one or more empty sublists.')\n    return list(set.intersection(*map(set, nestedlist)))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError('Found empty sublist in nestedlist.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((len(sublist) == 0 for sublist in nestedlist)):\n        raise TypeError('Empty sublist detected in nested list.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((len(sublist) == 0 for sublist in nestedlist)):\n        raise TypeError('All sublists must contain integers and cannot be empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError('One or more sublists in nestedlist are empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((len(sublist) == 0 for sublist in nestedlist)):\n        raise TypeError('One of the sublists is empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    for sublist in nestedlist:\n        if not sublist:\n            raise TypeError('Each sublist must be non-empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError(\"All sublists within 'nestedlist' must be non-empty.\")\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError('Sublists within nestedlist must not be empty')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    for sublist in nestedlist:\n        if not sublist:\n            raise TypeError('Sublist cannot be empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((len(sublist) == 0 for sublist in nestedlist)):\n        raise TypeError('Sublists cannot be empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError('Sublists must not be empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements.intersection_update(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    for sublist in nestedlist:\n        if not sublist:\n            raise TypeError('One or more sublists are empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return list(common_elements)", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((not sublist for sublist in nestedlist)):\n        raise TypeError('One or more sublists are empty.')\n    return list(set(nestedlist[0]).intersection(*nestedlist[1:]))", "from typing import List\n\ndef common_in_nested_lists(nestedlist: List[List[int]]) -> List[int]:\n    if not nestedlist:\n        return []\n    if any((len(sublist) == 0 for sublist in nestedlist)):\n        raise TypeError('One of the sublists is empty.')\n    common_elements = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        common_elements &= set(sublist)\n    return list(common_elements)"], "outputs": "[[[18, 12]], [[]], [[30]], [[300]], ['TypeError'], [[]], [[1]], [[3]], [[6]], [[0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[10, 20, 30], [30, 40, 50], [60, 70, 30]]], [[[100, 200, 300], [200, 300, 400], [300, 400, 500]]], [[[1, 2], [], [2, 3]]], [[]], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]]], [[[1, 2, 3], [3, 4, 5], [5, 6, 3]]], [[[6], [6], [6]]], [[[0, 0], [0], [0, 0, 0]]]]", "input_output_examples": "[[[[[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]]], [[[18, 12]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9557522123893806, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/113", "original_requirement": "def check_integer(text: str) -> Optional[bool]:\n\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"", "repaired_requirement": "```python\nfrom typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n\n    The function should return True if the input string can be successfully \n    converted to an integer using the `int()` function, and False otherwise.\n\n    Clarifications:\n    - Strings with surrounding whitespace (e.g., \" 123 \") are considered valid \n      if they can be parsed into an integer using `int()`.\n    - Signed integers (e.g., \"+123\", \"-123\") are considered valid.\n    - Strings with zero padding (e.g., \"00123\") are considered valid.\n    - Empty strings, strings containing non-numeric characters, or strings \n      that cannot be parsed into integers (e.g., \"python\") are considered invalid.\n    - The function should handle edge cases such as empty strings, whitespace-only \n      strings, and non-printable characters gracefully.\n\n    Example:\n    assert check_integer(\"python\") == False\n    \"\"\"\n```", "original_clusters": {"requirement": "def check_integer(text: str) -> Optional[bool]:\n\"\"\"\nWrite a function to check if a string represents an integer or not.\nassert check_integer(\"python\")==False\n\"\"\"", "entry_point": "check_integer", "cluster_list": [{"programs_str": ["from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [True], [False]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    if text.isdigit() or (text.startswith('-') and text[1:].isdigit()):\n        return True\n    return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    if text.lstrip('-').isdigit():\n        return True\n    return False"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [False], [True], [False]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[['123'], ['-456'], ['0'], ['7.89'], ['abc'], ['123abc'], [' 123 '], ['+789'], ['000123'], ['']]", "input_output_examples": "[[['python']], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n\n    The function should return True if the input string can be successfully \n    converted to an integer using the `int()` function, and False otherwise.\n\n    Clarifications:\n    - Strings with surrounding whitespace (e.g., \" 123 \") are considered valid \n      if they can be parsed into an integer using `int()`.\n    - Signed integers (e.g., \"+123\", \"-123\") are considered valid.\n    - Strings with zero padding (e.g., \"00123\") are considered valid.\n    - Empty strings, strings containing non-numeric characters, or strings \n      that cannot be parsed into integers (e.g., \"python\") are considered invalid.\n    - The function should handle edge cases such as empty strings, whitespace-only \n      strings, and non-printable characters gracefully.\n\n    Example:\n    assert check_integer(\"python\") == False\n    \"\"\"\n```", "entry_point": "check_integer", "cluster_list": [{"programs_str": ["from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text.strip())\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    text = text.strip()\n    if not text:\n        return False\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    text = text.strip()\n    if not text:\n        return False\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        text = text.strip()\n        if text == '':\n            return False\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text.strip())\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        stripped_text = text.strip()\n        if not stripped_text:\n            return False\n        int(stripped_text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    text = text.strip()\n    if not text:\n        return False\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    text = text.strip()\n    if not text:\n        return False\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    stripped_text = text.strip()\n    if not stripped_text:\n        return False\n    try:\n        int(stripped_text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        text = text.strip()\n        if text == '':\n            return False\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    text = text.strip()\n    if not text:\n        return False\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    text = text.strip()\n    if text == '':\n        return False\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        stripped_text = text.strip()\n        if stripped_text == '':\n            return False\n        int(stripped_text)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    try:\n        stripped_text = text.strip()\n        if stripped_text:\n            int(stripped_text)\n            return True\n        else:\n            return False\n    except ValueError:\n        return False", "from typing import Optional\n\ndef check_integer(text: str) -> Optional[bool]:\n    text = text.strip()\n    if not text:\n        return False\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['123'], ['-456'], ['0'], ['7.89'], ['abc'], ['123abc'], [' 123 '], ['+789'], ['000123'], ['']]", "input_output_examples": "[[['python']], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9629032258064516, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.967741935483871, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/116", "original_requirement": "from typing import Tuple\n\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n\"\"\"\nWrite a function to convert a given tuple of positive integers into a single integer.\nassert tuple_to_int((1,2,3))==123\n\"\"\"", "entry_point": "tuple_to_int", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))", "from typing import Tuple\n\ndef tuple_to_int(nums: Tuple[int, ...]) -> int:\n    return int(''.join(map(str, nums)))"], "outputs": "[[123], [98], [5], [1001], [7039], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(1, 2, 3)], [(0, 9, 8)], [(5,)], [(1, 0, 0, 1)], [(7, 0, 3, 9)], [()]]", "input_output_examples": "[[[(1, 2, 3)]], [[123]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/118", "original_requirement": "from typing import List\n\n\ndef string_to_list(string: str) -> List[str]:\n\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n    Write a function to convert a string to a list of strings split strictly on the ASCII space character (' ').\n    The function should:\n    - Split the input string at each occurrence of the ASCII space character (' '), preserving consecutive spaces as empty strings in the output list.\n    - Return a list containing a single empty string ([\"\"]) if the input string is empty (\"\").\n    - Handle edge cases such as strings with only spaces by returning a list of empty strings corresponding to the number of spaces plus one.\n    - Do not split on other whitespace characters (e.g., tabs '\\t', newlines '\\n').\n\n    Example:\n    assert string_to_list(\"python programming\") == ['python', 'programming']\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef string_to_list(string: str) -> List[str]:\n\"\"\"\nWrite a function to convert a string to a list of strings split on the space character.\nassert string_to_list(\"python programming\")==['python','programming']\n\"\"\"", "entry_point": "string_to_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ')"], "outputs": "[[['python', 'programming']], [['hello', 'world']], [['a', 'b', 'c']], [['singleword']], [['']], [['', '']], [['', '', '', '', '']], [['', 'leading', 'spaces']], [['trailing', 'spaces', '']], [['', 'multiple', '', '', 'spaces', '', '']]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split()"], "outputs": "[[['python', 'programming']], [['hello', 'world']], [['a', 'b', 'c']], [['singleword']], [[]], [[]], [[]], [['leading', 'spaces']], [['trailing', 'spaces']], [['multiple', 'spaces']]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[['python programming'], ['hello world'], ['a b c'], ['singleword'], [''], [' '], ['    '], [' leading spaces'], ['trailing spaces '], [' multiple   spaces  ']]", "input_output_examples": "[[['python programming']], [[['python', 'programming']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    \"\"\"\n    Write a function to convert a string to a list of strings split strictly on the ASCII space character (' ').\n    The function should:\n    - Split the input string at each occurrence of the ASCII space character (' '), preserving consecutive spaces as empty strings in the output list.\n    - Return a list containing a single empty string ([\"\"]) if the input string is empty (\"\").\n    - Handle edge cases such as strings with only spaces by returning a list of empty strings corresponding to the number of spaces plus one.\n    - Do not split on other whitespace characters (e.g., tabs '\\t', newlines '\\n').\n\n    Example:\n    assert string_to_list(\"python programming\") == ['python', 'programming']\n    \"\"\"", "entry_point": "string_to_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ') if string else ['']", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ') if string else ['']", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ') if string else ['']", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ') if string else ['']", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ') if string else ['']", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ') if string else ['']", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    return string.split(' ') if string else ['']", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')", "from typing import List\n\ndef string_to_list(string: str) -> List[str]:\n    if string == '':\n        return ['']\n    return string.split(' ')"], "outputs": "[[['python', 'programming']], [['hello', 'world']], [['a', 'b', 'c']], [['singleword']], [['']], [['', '']], [['', '', '', '', '']], [['', 'leading', 'spaces']], [['trailing', 'spaces', '']], [['', 'multiple', '', '', 'spaces', '', '']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['python programming'], ['hello world'], ['a b c'], ['singleword'], [''], [' '], ['    '], [' leading spaces'], ['trailing spaces '], [' multiple   spaces  ']]", "input_output_examples": "[[['python programming']], [[['python', 'programming']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/119", "original_requirement": "from typing import List\n\n\ndef search(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef search(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the element that appears only once in a sorted array.\nassert search([1,1,2,2,3]) == 3\n\"\"\"", "entry_point": "search", "cluster_list": [{"programs_str": ["from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = (left + right) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    low, high = (0, len(arr) - 1)\n    while low < high:\n        mid = low + (high - low) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        is_even = (right - mid) % 2 == 0\n        if arr[mid] == arr[mid + 1]:\n            if is_even:\n                left = mid + 2\n            else:\n                right = mid - 1\n        elif arr[mid] == arr[mid - 1]:\n            if is_even:\n                right = mid - 2\n            else:\n                left = mid + 1\n        else:\n            return arr[mid]\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    low, high = (0, len(arr) - 1)\n    while low < high:\n        mid = low + (high - low) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] != arr[mid + 1]:\n            right = mid\n        else:\n            left = mid + 2\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    lo, hi = (0, len(arr) - 1)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            lo = mid + 2\n        else:\n            hi = mid\n    return arr[lo]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    low, high = (0, len(arr) - 1)\n    while low < high:\n        mid = (low + high) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    low, high = (0, len(arr) - 1)\n    while low < high:\n        mid = (low + high) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    low, high = (0, len(arr) - 1)\n    while low < high:\n        mid = low + (high - low) // 2\n        if mid % 2 == 0 and arr[mid] == arr[mid + 1] or (mid % 2 == 1 and arr[mid] == arr[mid - 1]):\n            low = mid + 1\n        else:\n            high = mid\n    return arr[low]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        mid -= mid % 2\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    low, high = (0, len(arr) - 1)\n    while low < high:\n        mid = (low + high) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            low = mid + 2\n        else:\n            high = mid\n    return arr[low]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        mid = left + (right - left) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            left = mid + 2\n        else:\n            right = mid\n    return arr[left]", "from typing import List\n\ndef search(arr: List[int]) -> int:\n    start, end = (0, len(arr) - 1)\n    while start < end:\n        mid = start + (end - start) // 2\n        if mid % 2 == 1:\n            mid -= 1\n        if arr[mid] == arr[mid + 1]:\n            start = mid + 2\n        else:\n            end = mid\n    return arr[start]"], "outputs": "[[3], [6], [7], [10], [11], [14], [17], [19], [24]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 1, 2, 2, 3]], [[4, 4, 5, 5, 6]], [[7, 8, 8, 9, 9]], [[10]], [[11, 12, 12]], [[13, 13, 14]], [[15, 15, 16, 16, 17, 18, 18]], [[19, 20, 20, 21, 21]], [[22, 22, 23, 23, 24]]]", "input_output_examples": "[[[[1, 1, 2, 2, 3]]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.4, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/120", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"", "repaired_requirement": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Requirements:\n    1. The input `list1` must be a list of tuples, where each tuple contains exactly two numeric elements (integers).\n    2. If the input list is empty, the function must raise a `ValueError`.\n    3. If any tuple in the list does not contain exactly two elements or contains non-numeric elements, the function must raise a `ValueError`.\n    4. The function calculates the absolute product of the two numbers in each tuple and returns the maximum absolute product from the list.\n\n    Example:\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\"\"\"", "entry_point": "max_product_tuple", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(x * y) for x, y in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return max((abs(a * b) for a, b in list1))"], "outputs": "[[36], [36], [0], [30000000], [0], [1], [56], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a) * abs(b)\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product"], "outputs": "[[36], [36], [0], [30000000], [0], [1], [56], ['ValueError'], [0], ['ValueError']]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for pair in list1:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for pair in list1:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = 0\n    for pair in list1:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product"], "outputs": "[[36], [36], [0], [30000000], [0], [1], [56], ['IndexError'], [0], ['IndexError']]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for a, b in list1:\n        product = abs(a * b)\n        if product > max_product:\n            max_product = product\n    return max_product"], "outputs": "[[36], [36], [0], [30000000], [0], [1], [56], ['ValueError'], [-inf], ['ValueError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    max_product = float('-inf')\n    for t in list1:\n        product = abs(t[0] * t[1])\n        if product > max_product:\n            max_product = product\n    return max_product"], "outputs": "[[36], [36], [0], [30000000], [0], [1], [56], ['IndexError'], [-inf], ['IndexError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7672487074217932, "llm_generated_inputs": "[[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(-2, 7), (2, -6), (-1, 8), (4, -9)]], [[(0, 7), (2, 0), (1, 0), (0, 9)]], [[(1000, 2000), (3000, 4000), (-5000, -6000)]], [[(0, 0), (0, 0), (0, 0)]], [[(1, 1)]], [[(3, -4), (-5, 6), (-7, -8), (2, -1)]], [[()]], [[]], [[(1,)]]]", "input_output_examples": "[[[[(2, 7), (2, 6), (1, 8), (4, 9)]]], [[36]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    \"\"\"\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Requirements:\n    1. The input `list1` must be a list of tuples, where each tuple contains exactly two numeric elements (integers).\n    2. If the input list is empty, the function must raise a `ValueError`.\n    3. If any tuple in the list does not contain exactly two elements or contains non-numeric elements, the function must raise a `ValueError`.\n    4. The function calculates the absolute product of the two numbers in each tuple and returns the maximum absolute product from the list.\n\n    Example:\n    assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\n    \"\"\"", "entry_point": "max_product_tuple", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list is empty.')\n    max_product = float('-inf')\n    for pair in list1:\n        if not (isinstance(pair, Tuple) and len(pair) == 2 and all((isinstance(x, (int, float)) for x in pair))):\n            raise ValueError('Invalid tuple detected.')\n        product = abs(pair[0] * pair[1])\n        max_product = max(max_product, product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list cannot be empty.')\n    max_product = None\n    for tpl in list1:\n        if len(tpl) != 2 or not all((isinstance(x, int) for x in tpl)):\n            raise ValueError('Each tuple must contain exactly two numeric elements.')\n        product = abs(tpl[0] * tpl[1])\n        if max_product is None or product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list is empty.')\n    max_product = None\n    for tup in list1:\n        if len(tup) != 2 or not all((isinstance(x, (int, float)) for x in tup)):\n            raise ValueError('Each tuple must contain exactly two numeric elements.')\n        product = abs(tup[0] * tup[1])\n        if max_product is None or product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('The input list is empty.')\n    max_product = float('-inf')\n    for tup in list1:\n        if not (isinstance(tup, tuple) and len(tup) == 2):\n            raise ValueError('Each tuple in the list must contain exactly two elements.')\n        if not all((isinstance(x, (int, float)) for x in tup)):\n            raise ValueError('Each tuple must contain only numeric elements.')\n        absolute_product = abs(tup[0] * tup[1])\n        max_product = max(max_product, absolute_product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list is empty.')\n    if not all((isinstance(item, tuple) and len(item) == 2 and all((isinstance(x, (int, float)) for x in item)) for item in list1)):\n        raise ValueError('Each element in the list must be a tuple of exactly two numeric elements.')\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list cannot be empty')\n    max_product = None\n    for tup in list1:\n        if not (isinstance(tup, tuple) and len(tup) == 2 and all((isinstance(x, (int, float)) for x in tup))):\n            raise ValueError('All elements in the list must be tuples with exactly two numeric elements')\n        abs_product = abs(tup[0] * tup[1])\n        max_product = abs_product if max_product is None else max(max_product, abs_product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('The input list is empty.')\n    max_product = float('-inf')\n    for tup in list1:\n        if len(tup) != 2 or not all((isinstance(x, (int, float)) for x in tup)):\n            raise ValueError('Each tuple must contain exactly two numeric elements.')\n        product = abs(tup[0] * tup[1])\n        max_product = max(max_product, product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list is empty')\n    max_product = float('-inf')\n    for tpl in list1:\n        if not isinstance(tpl, tuple) or len(tpl) != 2:\n            raise ValueError('All elements in the list must be tuples with exactly two elements')\n        a, b = tpl\n        if not (isinstance(a, (int, float)) and isinstance(b, (int, float))):\n            raise ValueError('Tuple elements must be numeric')\n        abs_product = abs(a * b)\n        max_product = max(max_product, abs_product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list cannot be empty.')\n    max_product = float('-inf')\n    for item in list1:\n        if not isinstance(item, tuple) or len(item) != 2 or (not all((isinstance(i, int) for i in item))):\n            raise ValueError('Every tuple must contain exactly two numeric integers.')\n        product = abs(item[0] * item[1])\n        max_product = max(max_product, product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list is empty.')\n    max_product = float('-inf')\n    for tup in list1:\n        if not isinstance(tup, tuple) or len(tup) != 2 or (not all((isinstance(x, (int, float)) for x in tup))):\n            raise ValueError('Invalid input: all elements must be tuples with exactly two numeric elements.')\n        product = abs(tup[0] * tup[1])\n        max_product = max(max_product, product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('The input list is empty.')\n    for item in list1:\n        if not isinstance(item, tuple) or len(item) != 2 or (not all((isinstance(n, (int, float)) for n in item))):\n            raise ValueError('Invalid tuple found in the list. Must be a tuple of exactly two numeric elements.')\n    return max((abs(x * y) for x, y in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('The input list is empty.')\n    if not all((isinstance(t, tuple) and len(t) == 2 and all((isinstance(x, int) for x in t)) for t in list1)):\n        raise ValueError('The input list must only contain tuples with exactly two integers.')\n    return max((abs(a * b) for a, b in list1))", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('The input list is empty.')\n    max_product = float('-inf')\n    for pair in list1:\n        if len(pair) != 2 or not all((isinstance(x, (int, float)) for x in pair)):\n            raise ValueError('Each tuple must contain exactly two numeric elements.')\n        product = abs(pair[0] * pair[1])\n        max_product = max(max_product, product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list is empty.')\n    max_product = float('-inf')\n    for tup in list1:\n        if len(tup) != 2 or not all((isinstance(num, int) for num in tup)):\n            raise ValueError('All tuples must contain exactly two numeric integer elements.')\n        product = abs(tup[0] * tup[1])\n        max_product = max(max_product, product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list is empty')\n    max_product = None\n    for tup in list1:\n        if len(tup) != 2 or not all((isinstance(x, (int, float)) for x in tup)):\n            raise ValueError('Each tuple must contain exactly two numeric elements')\n        product = abs(tup[0] * tup[1])\n        if max_product is None or product > max_product:\n            max_product = product\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list must not be empty.')\n    max_product = float('-inf')\n    for tpl in list1:\n        if len(tpl) != 2 or not all((isinstance(i, int) for i in tpl)):\n            raise ValueError('All tuples in the list must contain exactly two numeric elements (integers).')\n        abs_product = abs(tpl[0] * tpl[1])\n        max_product = max(max_product, abs_product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list cannot be empty.')\n    max_product = float('-inf')\n    for item in list1:\n        if not isinstance(item, tuple) or len(item) != 2 or (not all((isinstance(x, (int, float)) for x in item))):\n            raise ValueError('Input list must contain tuples of exactly two numeric elements.')\n        product = abs(item[0] * item[1])\n        max_product = max(max_product, product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list is empty.')\n    max_product = float('-inf')\n    for tup in list1:\n        if len(tup) != 2 or not all((isinstance(x, (int, float)) for x in tup)):\n            raise ValueError('Each tuple must contain exactly two numeric elements.')\n        product = abs(tup[0] * tup[1])\n        max_product = max(max_product, product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('The input list is empty.')\n    max_product = float('-inf')\n    for t in list1:\n        if len(t) != 2 or not all((isinstance(x, (int, float)) for x in t)):\n            raise ValueError('Invalid tuple found in the list.')\n        product = abs(t[0] * t[1])\n        max_product = max(max_product, product)\n    return max_product", "from typing import List, Tuple\n\ndef max_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    if not list1:\n        raise ValueError('Input list is empty.')\n    max_absolute_product = float('-inf')\n    for tpl in list1:\n        if not (isinstance(tpl, tuple) and len(tpl) == 2):\n            raise ValueError('Each element in the list must be a tuple of exactly two elements.')\n        if not all((isinstance(x, (int, float)) for x in tpl)):\n            raise ValueError('All elements within the tuples must be numeric.')\n        absolute_product = abs(tpl[0] * tpl[1])\n        max_absolute_product = max(max_absolute_product, absolute_product)\n    return max_absolute_product"], "outputs": "[[36], [36], [0], [30000000], [0], [1], [56], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(-2, 7), (2, -6), (-1, 8), (4, -9)]], [[(0, 7), (2, 0), (1, 0), (0, 9)]], [[(1000, 2000), (3000, 4000), (-5000, -6000)]], [[(0, 0), (0, 0), (0, 0)]], [[(1, 1)]], [[(3, -4), (-5, 6), (-7, -8), (2, -1)]], [[()]], [[]], [[(1,)]]]", "input_output_examples": "[[[[(2, 7), (2, 6), (1, 8), (4, 9)]]], [[36]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/123", "original_requirement": "def amicable_numbers_sum(limit: int) -> int:\n\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n\nassert amicable_numbers_sum(999)==504\n\"\"\"", "repaired_requirement": "```python\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Write a function to calculate the sum of all amicable numbers within the range [1, limit], inclusive.\n\n    Amicable numbers are defined as a pair of integers (a, b) such that:\n      - a is the sum of proper divisors of b (excluding b itself).\n      - b is the sum of proper divisors of a (excluding a itself).\n      - a != b.\n      - Both a and b must fall within the range [1, limit].\n\n    The function should:\n      - Identify all amicable pairs (a, b) where both numbers are within the range [1, limit].\n      - Add both numbers in each amicable pair to the total sum.\n      - Exclude numbers like 1 from the summation process, as they do not form valid pairs.\n\n    Input:\n      - limit: An integer specifying the upper bound of the range.\n\n    Output:\n      - Return the sum of all amicable numbers within the range [1, limit].\n\n    Examples:\n    assert amicable_numbers_sum(999) == 504\n    \"\"\"\n```", "original_clusters": {"requirement": "def amicable_numbers_sum(limit: int) -> int:\n\"\"\"\nWrite a function to sum all amicable numbers from 1 to a specified number.\n\n\nassert amicable_numbers_sum(999)==504\n\"\"\"", "entry_point": "amicable_numbers_sum", "cluster_list": [{"programs_str": ["import math\n\ndef sum_of_divisors(n: int) -> int:\n    total = 1\n    sqrt_n = math.isqrt(n)\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for number in range(2, limit + 1):\n        sum_div = sum_of_divisors(number)\n        if sum_div > number and sum_div <= limit:\n            if sum_of_divisors(sum_div) == number:\n                amicable_sum += number + sum_div\n    return amicable_sum", "import math\n\ndef sum_of_divisors(n: int) -> int:\n    total = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for i in range(2, limit + 1):\n        div_sum = sum_of_divisors(i)\n        if div_sum != i and div_sum <= limit and (sum_of_divisors(div_sum) == i):\n            amicable_sum += i\n    return amicable_sum", "import math\n\ndef sum_of_divisors(n: int) -> int:\n    total = 1\n    sqrt_n = int(math.sqrt(n))\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef is_amicable(a: int, b: int) -> bool:\n    return a != b and sum_of_divisors(a) == b and (sum_of_divisors(b) == a)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    seen = set()\n    total_sum = 0\n    for number in range(2, limit):\n        if number not in seen:\n            partner = sum_of_divisors(number)\n            if is_amicable(number, partner):\n                total_sum += number + partner\n                seen.add(number)\n                seen.add(partner)\n    return total_sum", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        sum1 = sum_of_divisors(num)\n        if sum1 != num and sum1 <= limit:\n            sum2 = sum_of_divisors(sum1)\n            if sum2 == num:\n                amicable_sum += num\n    return amicable_sum", "import math\n\ndef proper_divisors_sum(n: int) -> int:\n    divisors_sum = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for number in range(2, limit + 1):\n        partner = proper_divisors_sum(number)\n        if partner != number and partner <= limit and (proper_divisors_sum(partner) == number):\n            amicable_sum += number\n    return amicable_sum", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit and (sum_of_divisors(partner) == num):\n            amicable_sum += num\n    return amicable_sum", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_sum = 0\n    for number in range(2, limit + 1):\n        partner = sum_of_divisors(number)\n        if partner != number and partner <= limit and (sum_of_divisors(partner) == number):\n            amicable_sum += number\n    return amicable_sum", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        return sum((i for i in range(1, n) if n % i == 0))\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        partner = sum_of_divisors(num)\n        if partner != num and partner <= limit and (sum_of_divisors(partner) == num):\n            amicable_sum += num\n    return amicable_sum", "import math\n\ndef sum_of_divisors(n: int) -> int:\n    total = 1\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            if i == n // i:\n                total += i\n            else:\n                total += i + n // i\n    return total\n\ndef amicable_numbers_sum(limit: int) -> int:\n    result_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_of_divisors(a)\n        if b != a and b <= limit and (sum_of_divisors(b) == a):\n            result_sum += a\n    return result_sum"], "outputs": "[[0], [0], [504], [504], [0], [504], [0], [0], [504], [31626]]", "probability": 0.45, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef sum_of_divisors(n: int) -> int:\n    divisors_sum = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    total_sum = 0\n    for number in range(2, limit):\n        partner = sum_of_divisors(number)\n        if partner != number and partner < limit and (sum_of_divisors(partner) == number):\n            total_sum += number\n    return total_sum", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        sum_div = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                sum_div += i\n                if i != n // i:\n                    sum_div += n // i\n        return sum_div\n    amicable_sum = 0\n    for number in range(2, limit):\n        partner = sum_of_divisors(number)\n        if partner != number and partner < limit and (sum_of_divisors(partner) == number):\n            amicable_sum += number\n    return amicable_sum", "import math\n\ndef sum_of_divisors(n: int) -> int:\n    divisors_sum = 1\n    sqrt_n = math.isqrt(n)\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    sum_amicables = 0\n    for a in range(2, limit):\n        b = sum_of_divisors(a)\n        if b != a and b < limit and (sum_of_divisors(b) == a):\n            sum_amicables += a\n    return sum_amicables", "import math\n\ndef sum_of_divisors(n: int) -> int:\n    total = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for num in range(1, limit):\n        sum_div_1 = sum_of_divisors(num)\n        if sum_div_1 > num and sum_div_1 < limit:\n            sum_div_2 = sum_of_divisors(sum_div_1)\n            if sum_div_2 == num:\n                amicable_sum += num + sum_div_1\n    return amicable_sum", "import math\n\ndef sum_of_divisors(n: int) -> int:\n    sum_div = 1\n    sqrt_n = int(math.sqrt(n))\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            sum_div += i\n            if i != n // i:\n                sum_div += n // i\n    return sum_div\n\ndef amicable_numbers_sum(limit: int) -> int:\n    total_sum = 0\n    for num in range(2, limit):\n        a = sum_of_divisors(num)\n        if a != num and a < limit and (sum_of_divisors(a) == num):\n            total_sum += num\n    return total_sum"], "outputs": "[[0], [0], [504], [504], [0], [0], [0], [0], [504], [31626]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        return sum((i for i in range(1, n // 2 + 1) if n % i == 0))\n    amicable_sum = 0\n    for a in range(1, limit):\n        b = sum_of_divisors(a)\n        if a != b and sum_of_divisors(b) == a:\n            amicable_sum += a\n    return amicable_sum", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, n // 2 + 1):\n            if n % i == 0:\n                total += i\n        return total\n    amicable_total = 0\n    for number in range(1, limit):\n        sum1 = sum_of_divisors(number)\n        sum2 = sum_of_divisors(sum1)\n        if sum2 == number and sum1 != number:\n            amicable_total += number\n    return amicable_total", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        divisors = {1}\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return sum(divisors)\n    amicable_sum = 0\n    for a in range(2, limit):\n        b = sum_of_divisors(a)\n        if b != a and sum_of_divisors(b) == a:\n            amicable_sum += a\n    return amicable_sum", "import math\n\ndef sum_of_divisors(n: int) -> int:\n    total = 1\n    sqrt_n = int(math.sqrt(n))\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for num in range(2, limit):\n        sum_div = sum_of_divisors(num)\n        if sum_div != num and sum_of_divisors(sum_div) == num:\n            amicable_sum += num\n    return amicable_sum"], "outputs": "[[0], [0], [504], [504], [0], [220], [0], [0], [504], ['Timeout']]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef sum_of_proper_divisors(n: int) -> int:\n    if n <= 1:\n        return 0\n    total = 1\n    sqrt_n = int(math.sqrt(n))\n    for i in range(2, sqrt_n + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit: int) -> int:\n\n    def is_amicable(a: int) -> bool:\n        b = sum_of_proper_divisors(a)\n        return b != a and sum_of_proper_divisors(b) == a\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        if is_amicable(num):\n            amicable_sum += num\n    return amicable_sum", "from typing import List\n\ndef divisors_sum(n: int) -> int:\n    div_sum = 0\n    for i in range(1, n // 2 + 1):\n        if n % i == 0:\n            div_sum += i\n    return div_sum\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        partner = divisors_sum(num)\n        if num != partner and divisors_sum(partner) == num:\n            amicable_sum += num\n    return amicable_sum"], "outputs": "[[0], [0], [504], [504], [220], [504], [0], [0], [504], [31626]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9074899102582407, "llm_generated_inputs": "[[10], [100], [500], [999], [220], [284], [0], [1], [1000], [10000]]", "input_output_examples": "[[[999]], [[504]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef amicable_numbers_sum(limit: int) -> int:\n    \"\"\"\n    Write a function to calculate the sum of all amicable numbers within the range [1, limit], inclusive.\n\n    Amicable numbers are defined as a pair of integers (a, b) such that:\n      - a is the sum of proper divisors of b (excluding b itself).\n      - b is the sum of proper divisors of a (excluding a itself).\n      - a != b.\n      - Both a and b must fall within the range [1, limit].\n\n    The function should:\n      - Identify all amicable pairs (a, b) where both numbers are within the range [1, limit].\n      - Add both numbers in each amicable pair to the total sum.\n      - Exclude numbers like 1 from the summation process, as they do not form valid pairs.\n\n    Input:\n      - limit: An integer specifying the upper bound of the range.\n\n    Output:\n      - Return the sum of all amicable numbers within the range [1, limit].\n\n    Examples:\n    assert amicable_numbers_sum(999) == 504\n    \"\"\"\n```", "entry_point": "amicable_numbers_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sum_of_proper_divisors(n: int) -> int:\n    return sum((i for i in range(1, n) if n % i == 0))\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    visited = set()\n    for a in range(2, limit + 1):\n        b = sum_of_proper_divisors(a)\n        if b != a and b <= limit and (sum_of_proper_divisors(b) == a) and (a not in visited) and (b not in visited):\n            amicable_sum += a + b\n            visited.add(a)\n            visited.add(b)\n    return amicable_sum", "from typing import List\n\ndef get_divisors_sum(n: int) -> int:\n    divisors = [1] + [i for i in range(2, int(n ** 0.5) + 1) if n % i == 0]\n    for d in divisors[1:]:\n        if n // d != d:\n            divisors.append(n // d)\n    return sum(divisors)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_numbers = set()\n    for a in range(2, limit + 1):\n        b = get_divisors_sum(a)\n        if b != a and b <= limit and (get_divisors_sum(b) == a):\n            amicable_numbers.add(a)\n            amicable_numbers.add(b)\n    return sum(amicable_numbers)", "from typing import List\n\ndef sum_of_divisors(n: int) -> int:\n    return sum((i for i in range(1, n // 2 + 1) if n % i == 0))\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    seen_numbers = set()\n    for a in range(2, limit + 1):\n        if a in seen_numbers:\n            continue\n        b = sum_of_divisors(a)\n        if b != a and b <= limit and (sum_of_divisors(b) == a):\n            amicable_sum += a + b\n            seen_numbers.update([a, b])\n    return amicable_sum", "from typing import Set\n\ndef proper_divisors_sum(n: int) -> int:\n    if n <= 1:\n        return 0\n    result = 1\n    limit = int(n ** 0.5)\n    for i in range(2, limit + 1):\n        if n % i == 0:\n            result += i\n            if i != n // i:\n                result += n // i\n    return result\n\ndef amicable_numbers_sum(limit: int) -> int:\n    if limit < 2:\n        return 0\n    amicable_sum = 0\n    known_numbers: Set[int] = set()\n    for a in range(2, limit + 1):\n        if a in known_numbers:\n            continue\n        b = proper_divisors_sum(a)\n        if b != a and b <= limit:\n            if proper_divisors_sum(b) == a:\n                amicable_sum += a + b\n                known_numbers.update((a, b))\n    return amicable_sum", "def amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        divisors_sum = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors_sum += i\n                if i != n // i:\n                    divisors_sum += n // i\n        return divisors_sum\n    amicable_numbers = set()\n    for a in range(2, limit + 1):\n        b = sum_of_divisors(a)\n        if b != a and b <= limit and (sum_of_divisors(b) == a):\n            amicable_numbers.add(a)\n            amicable_numbers.add(b)\n    return sum(amicable_numbers)", "from typing import List\n\ndef sum_of_divisors(n: int) -> int:\n    return sum((i for i in range(1, n // 2 + 1) if n % i == 0))\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    divisor_sums = [sum_of_divisors(i) for i in range(limit + 1)]\n    for a in range(2, limit + 1):\n        b = divisor_sums[a]\n        if b <= limit and b != a and (divisor_sums[b] == a):\n            amicable_sum += a\n    return amicable_sum", "from typing import List\n\ndef proper_divisors_sum(n: int) -> int:\n    divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = proper_divisors_sum(a)\n        if b != a and b <= limit and (proper_divisors_sum(b) == a):\n            amicable_sum += a\n    return amicable_sum", "import math\n\ndef proper_divisor_sum(n: int) -> int:\n    if n < 2:\n        return 0\n    total = 1\n    sqrt_n = int(math.sqrt(n)) + 1\n    for i in range(2, sqrt_n):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = proper_divisor_sum(a)\n        if b != a and b <= limit and (proper_divisor_sum(b) == a):\n            amicable_sum += a\n    return amicable_sum", "from typing import List\n\ndef sum_of_proper_divisors(n: int) -> int:\n    divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_of_proper_divisors(a)\n        if b != a and b <= limit:\n            if sum_of_proper_divisors(b) == a:\n                amicable_sum += a + b\n    return amicable_sum // 2", "from typing import List\n\ndef get_proper_divisors_sum(n: int) -> int:\n    if n <= 1:\n        return 0\n    proper_divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            proper_divisors.append(i)\n            if i != n // i:\n                proper_divisors.append(n // i)\n    return sum(proper_divisors)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    visited = set()\n    for a in range(2, limit + 1):\n        b = get_proper_divisors_sum(a)\n        if b > 1 and b != a and (b <= limit):\n            if a == get_proper_divisors_sum(b):\n                if a not in visited and b not in visited:\n                    amicable_sum += a + b\n                    visited.update([a, b])\n    return amicable_sum", "import math\n\ndef amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 1\n        sq_root = int(math.sqrt(n))\n        for i in range(2, sq_root + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_of_divisors(a)\n        if b != a and b <= limit and (sum_of_divisors(b) == a):\n            amicable_sum += a\n    return amicable_sum", "from typing import List\n\ndef proper_divisors_sum(n: int) -> int:\n    total = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            total += i\n            if i != n // i:\n                total += n // i\n    return total\n\ndef amicable_numbers_sum(limit: int) -> int:\n\n    def proper_divisors_sum(n: int) -> int:\n        total = 1\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                total += i\n                if i != n // i:\n                    total += n // i\n        return total\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = proper_divisors_sum(a)\n        if b != a and b <= limit and (proper_divisors_sum(b) == a):\n            amicable_sum += a\n    return amicable_sum", "from typing import List\n\ndef sum_of_proper_divisors(n: int) -> int:\n    divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for num in range(2, limit + 1):\n        pair = sum_of_proper_divisors(num)\n        if pair > num and pair <= limit:\n            if sum_of_proper_divisors(pair) == num:\n                amicable_sum += num + pair\n    return amicable_sum", "from typing import List\n\ndef sum_of_divisors(n: int) -> int:\n    divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = sum_of_divisors(a)\n        if b > 1 and b <= limit and (b != a):\n            if sum_of_divisors(b) == a:\n                amicable_sum += a\n    return amicable_sum", "from typing import List\n\ndef sum_of_divisors(n: int) -> int:\n    return sum((i for i in range(1, n // 2 + 1) if n % i == 0))\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    visited = set()\n    for a in range(2, limit + 1):\n        if a in visited:\n            continue\n        b = sum_of_divisors(a)\n        if b != a and b <= limit:\n            if sum_of_divisors(b) == a:\n                amicable_sum += a + b\n                visited.add(a)\n                visited.add(b)\n    return amicable_sum", "from typing import List\n\ndef sum_of_proper_divisors(num: int) -> int:\n    divisors = [1]\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            divisors.append(i)\n            if i != num // i:\n                divisors.append(num // i)\n    return sum(divisors)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    visited = set()\n    for a in range(2, limit + 1):\n        if a in visited:\n            continue\n        b = sum_of_proper_divisors(a)\n        if b != a and b <= limit:\n            if sum_of_proper_divisors(b) == a:\n                amicable_sum += a + b\n                visited.add(a)\n                visited.add(b)\n    return amicable_sum", "from typing import List\n\ndef proper_divisors_sum(n: int) -> int:\n    divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    for a in range(2, limit + 1):\n        b = proper_divisors_sum(a)\n        if b != a and b <= limit and (proper_divisors_sum(b) == a):\n            amicable_sum += a + b\n    return amicable_sum // 2", "import math\n\ndef amicable_numbers_sum(limit: int) -> int:\n\n    def sum_of_proper_divisors(n: int) -> int:\n        if n < 2:\n            return 0\n        divisors = {1}\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                if i != n // i:\n                    divisors.add(n // i)\n        return sum(divisors)\n    amicable_sum = 0\n    visited = set()\n    for a in range(2, limit + 1):\n        if a in visited:\n            continue\n        b = sum_of_proper_divisors(a)\n        if b != a and b <= limit and (sum_of_proper_divisors(b) == a):\n            amicable_sum += a + b\n            visited.add(a)\n            visited.add(b)\n    return amicable_sum", "from typing import List\n\ndef sum_of_divisors(n: int) -> int:\n    divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_sum = 0\n    visited = set()\n    for a in range(2, limit + 1):\n        if a in visited:\n            continue\n        b = sum_of_divisors(a)\n        if b != a and b <= limit:\n            if sum_of_divisors(b) == a:\n                amicable_sum += a + b\n                visited.add(a)\n                visited.add(b)\n    return amicable_sum", "from typing import List\n\ndef sum_of_proper_divisors(n: int) -> int:\n    divisors = [1]\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors)\n\ndef amicable_numbers_sum(limit: int) -> int:\n    amicable_set = set()\n    for a in range(2, limit + 1):\n        b = sum_of_proper_divisors(a)\n        if b != a and b <= limit and (sum_of_proper_divisors(b) == a):\n            amicable_set.update({a, b})\n    return sum(amicable_set)"], "outputs": "[[0], [0], [504], [504], [0], [504], [0], [0], [504], ['Timeout']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10], [100], [500], [999], [220], [284], [0], [1], [1000], [10000]]", "input_output_examples": "[[[999]], [[504]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/124", "original_requirement": "def angle_complex(a: complex, b: complex) -> float:\n\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"", "repaired_requirement": "def angle_complex(a: complex, b: complex) -> float:\n    \"\"\"\n    Write a function to compute the angle of the complex number `b` relative to the positive real axis.\n    The function should ignore the argument `a` and calculate the angle using the imaginary and real parts of `b`.\n    Specifically, the angle is determined using `math.atan2(b.imag, b.real)`.\n\n    Example:\n    assert math.isclose(angle_complex(0, 1j), 1.5707963267948966, rel_tol=0.001)\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [(1+1j), (1-1j)]\n    Expected Output: [-0.7853981633974483]\n    ### Test 2\n    Input: [(1+1j), (1-1j)]\n    Expected Output: [-0.7853981633974483]\n    \"\"\"", "original_clusters": {"requirement": "def angle_complex(a: complex, b: complex) -> float:\n\"\"\"\nWrite a function to get the angle of a complex number.\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)\n\"\"\"", "entry_point": "angle_complex", "cluster_list": [{"programs_str": ["import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)\nimport cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\nimport cmath\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(b)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)"], "outputs": "[[1.5707963267948966], [-0.7853981633974483], [-1.5707963267948966], [0.0], [0.0], [0.0], [2.356194490192345], [0.0], [-2.356194490192345], [3.141592653589793]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(a + b)", "import cmath\nimport math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return cmath.phase(a + b)"], "outputs": "[[1.5707963267948966], [0.0], [0.0], [0.0], [0.7853981633974483], [0.0], [3.141592653589793], [0.0], [0.0], [0.0]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag - a.imag, b.real - a.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag - a.imag, b.real - a.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag - a.imag, b.real - a.real)"], "outputs": "[[1.5707963267948966], [-1.5707963267948966], [-1.5707963267948966], [0.0], [-2.356194490192345], [0.0], [1.5707963267948966], [3.141592653589793], [-2.356194490192345], [3.141592653589793]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6650099119652508, "llm_generated_inputs": "[[0, 1j], [(1+1j), (1-1j)], [1j, (-0-1j)], [(-1+0j), (1+0j)], [(1+1j), 0], [0, 0], [(-1-1j), (-1+1j)], [(1+0j), 0], [(1+1j), (-1-1j)], [1, -1]]", "input_output_examples": "[[[0, 1j]], [[1.5707963267948966]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def angle_complex(a: complex, b: complex) -> float:\n    \"\"\"\n    Write a function to compute the angle of the complex number `b` relative to the positive real axis.\n    The function should ignore the argument `a` and calculate the angle using the imaginary and real parts of `b`.\n    Specifically, the angle is determined using `math.atan2(b.imag, b.real)`.\n\n    Example:\n    assert math.isclose(angle_complex(0, 1j), 1.5707963267948966, rel_tol=0.001)\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [(1+1j), (1-1j)]\n    Expected Output: [-0.7853981633974483]\n    ### Test 2\n    Input: [(1+1j), (1-1j)]\n    Expected Output: [-0.7853981633974483]\n    \"\"\"", "entry_point": "angle_complex", "cluster_list": [{"programs_str": ["import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)", "import math\n\ndef angle_complex(a: complex, b: complex) -> float:\n    return math.atan2(b.imag, b.real)"], "outputs": "[[1.5707963267948966], [-0.7853981633974483], [-1.5707963267948966], [0.0], [0.0], [0.0], [2.356194490192345], [0.0], [-2.356194490192345], [3.141592653589793]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0, 1j], [(1+1j), (1-1j)], [1j, (-0-1j)], [(-1+0j), (1+0j)], [(1+1j), 0], [0, 0], [(-1-1j), (-1+1j)], [(1+0j), 0], [(1+1j), (-1-1j)], [1, -1]]", "input_output_examples": "[[[0, 1j]], [[1.5707963267948966]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.23109243697478993, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.2773109243697479, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/125", "original_requirement": "def find_length(string: str) -> int:\n\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def find_length(string: str) -> int:\n\"\"\"\nWrite a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nassert find_length(\"11000010001\") == 6\n\"\"\"", "entry_point": "find_length", "cluster_list": [{"programs_str": ["def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        elif current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff", "def find_length(string: str) -> int:\n    n = len(string)\n    max_diff = float('-inf')\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff if max_diff > 0 else 0", "def find_length(string: str) -> int:\n    max_diff = 0\n    curr_diff = 0\n    for char in string:\n        if char == '0':\n            curr_diff += 1\n        else:\n            curr_diff -= 1\n        if curr_diff < 0:\n            curr_diff = 0\n        max_diff = max(max_diff, curr_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "from typing import List\n\ndef find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        if current_diff > max_diff:\n            max_diff = current_diff\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        elif char == '1':\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for ch in string:\n        if ch == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    n = len(string)\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff < 0:\n            current_diff = 0\n        max_diff = max(max_diff, current_diff)\n    return max_diff", "def find_length(string: str) -> int:\n    max_diff = 0\n    current_diff = 0\n    for char in string:\n        if char == '0':\n            current_diff += 1\n        else:\n            current_diff -= 1\n        if current_diff > max_diff:\n            max_diff = current_diff\n        if current_diff < 0:\n            current_diff = 0\n    return max_diff"], "outputs": "[[6], [4], [0], [1], [2], [1], [0], [1], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['11000010001'], ['0000'], ['1111'], ['101010'], ['1001'], ['0101010101'], ['1'], ['0'], ['']]", "input_output_examples": "[[['11000010001']], [[6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.9980952380952381, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/126", "original_requirement": "def sum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"", "repaired_requirement": "def sum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"", "original_clusters": {"requirement": "def sum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"", "entry_point": "sum", "cluster_list": [{"programs_str": ["import math\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors(x, y):\n        limit = math.gcd(x, y)\n        divisors_sum = 0\n        for i in range(1, limit + 1):\n            if x % i == 0 and y % i == 0:\n                divisors_sum += i\n        return divisors_sum\n    return common_divisors(a, b)", "import math\n\ndef sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors_sum(n):\n        divisor_sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    divisor_sum += i\n                else:\n                    divisor_sum += i + n // i\n        return divisor_sum\n    gcd_value = gcd(a, b)\n    return common_divisors_sum(gcd_value)", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    greatest_common_divisor = gcd(a, b)\n    sum_divisors = 0\n    for i in range(1, greatest_common_divisor + 1):\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n    return sum_divisors", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def sum_of_divisors(n):\n        result = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                result += i\n        return result\n    common_gcd = gcd(a, b)\n    return sum_of_divisors(common_gcd)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n    greatest_common_divisor = gcd(a, b)\n    common_divisors_sum = 0\n    for i in range(1, greatest_common_divisor + 1):\n        if greatest_common_divisor % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    common_divisor_gcd = gcd(a, b)\n    return sum_of_divisors(common_divisor_gcd)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors_sum(n: int) -> int:\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    greatest_common_divisor = gcd(a, b)\n    return common_divisors_sum(greatest_common_divisor)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors_sum(x: int) -> int:\n        total = 0\n        for i in range(1, x + 1):\n            if x % i == 0:\n                total += i\n        return total\n    greatest_common_divisor = gcd(a, b)\n    return common_divisors_sum(greatest_common_divisor)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors_sum(n: int) -> int:\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    greatest_common_divisor = gcd(a, b)\n    return common_divisors_sum(greatest_common_divisor)", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisor_sum = 0\n    for i in range(1, common_gcd + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisor_sum += i\n    return common_divisor_sum", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n    gcd_value = gcd(a, b)\n    common_divisors_sum = 0\n    for i in range(1, gcd_value + 1):\n        if gcd_value % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors_sum(n: int) -> int:\n        divisors_sum = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors_sum += i\n        return divisors_sum\n    return common_divisors_sum(gcd(a, b))", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    common_divisor = gcd(a, b)\n    return sum_of_divisors(common_divisor)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n    common_gcd = gcd(a, b)\n    result = 0\n    for i in range(1, common_gcd + 1):\n        if a % i == 0 and b % i == 0:\n            result += i\n    return result"], "outputs": "[[6], [0], [28], [1], [6], [4], [1], [18], [1]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import gcd\n\ndef sum(a: int, b: int) -> int:\n    common_gcd = gcd(a, b)\n    divisors_sum = sum((i for i in range(1, common_gcd + 1) if a % i == 0 and b % i == 0))\n    return divisors_sum", "from typing import List\n\ndef find_divisors(n: int) -> List[int]:\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum(a: int, b: int) -> int:\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n    common_divisors = set(divisors_a) & set(divisors_b)\n    return sum(common_divisors)", "from typing import List\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors(n1: int, n2: int) -> List[int]:\n        divisors = []\n        for i in range(1, min(n1, n2) + 1):\n            if n1 % i == 0 and n2 % i == 0:\n                divisors.append(i)\n        return divisors\n    common_divs = common_divisors(a, b)\n    return sum(common_divs)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def get_divisors(n: int):\n        divisors = set()\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n    common_divisors = get_divisors(gcd(a, b))\n    return sum(common_divisors)", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors_sum(x, y):\n        gcd_value = gcd(x, y)\n        return sum((i for i in range(1, gcd_value + 1) if gcd_value % i == 0))\n    return common_divisors_sum(a, b)", "import math\n\ndef sum(a: int, b: int) -> int:\n    gcd = math.gcd(a, b)\n    common_divisors_sum = sum((divisor for divisor in range(1, gcd + 1) if a % divisor == 0 and b % divisor == 0))\n    return common_divisors_sum"], "outputs": "[['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError']]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10, 15], ['TypeError'], [6]]]"}], "entropy": 0.8812908992306927, "llm_generated_inputs": "[[10, 15], [0, 0], [12, 0], [7, 13], [5, 5], [6, 3], [8, 11], [20, 30], [1, 7]]", "input_output_examples": "[[[10, 15]], [[6]]]", "weighted_test_consistency": 0.7, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def sum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the sum of common divisors of two given numbers.\nassert sum(10,15) == 6\n\"\"\"", "entry_point": "sum", "cluster_list": [{"programs_str": ["import math\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors(x, y):\n        limit = math.gcd(x, y)\n        divisors_sum = 0\n        for i in range(1, limit + 1):\n            if x % i == 0 and y % i == 0:\n                divisors_sum += i\n        return divisors_sum\n    return common_divisors(a, b)", "import math\n\ndef sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors_sum(n):\n        divisor_sum = 0\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if i == n // i:\n                    divisor_sum += i\n                else:\n                    divisor_sum += i + n // i\n        return divisor_sum\n    gcd_value = gcd(a, b)\n    return common_divisors_sum(gcd_value)", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    greatest_common_divisor = gcd(a, b)\n    sum_divisors = 0\n    for i in range(1, greatest_common_divisor + 1):\n        if a % i == 0 and b % i == 0:\n            sum_divisors += i\n    return sum_divisors", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def sum_of_divisors(n):\n        result = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                result += i\n        return result\n    common_gcd = gcd(a, b)\n    return sum_of_divisors(common_gcd)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n    greatest_common_divisor = gcd(a, b)\n    common_divisors_sum = 0\n    for i in range(1, greatest_common_divisor + 1):\n        if greatest_common_divisor % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def sum_of_divisors(n):\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    common_divisor_gcd = gcd(a, b)\n    return sum_of_divisors(common_divisor_gcd)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors_sum(n: int) -> int:\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    greatest_common_divisor = gcd(a, b)\n    return common_divisors_sum(greatest_common_divisor)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors_sum(x: int) -> int:\n        total = 0\n        for i in range(1, x + 1):\n            if x % i == 0:\n                total += i\n        return total\n    greatest_common_divisor = gcd(a, b)\n    return common_divisors_sum(greatest_common_divisor)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors_sum(n: int) -> int:\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    greatest_common_divisor = gcd(a, b)\n    return common_divisors_sum(greatest_common_divisor)", "def sum(a: int, b: int) -> int:\n\n    def gcd(x: int, y: int) -> int:\n        while y:\n            x, y = (y, x % y)\n        return x\n    common_gcd = gcd(a, b)\n    common_divisor_sum = 0\n    for i in range(1, common_gcd + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisor_sum += i\n    return common_divisor_sum", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n    gcd_value = gcd(a, b)\n    common_divisors_sum = 0\n    for i in range(1, gcd_value + 1):\n        if gcd_value % i == 0:\n            common_divisors_sum += i\n    return common_divisors_sum", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors_sum(n: int) -> int:\n        divisors_sum = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors_sum += i\n        return divisors_sum\n    return common_divisors_sum(gcd(a, b))", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def sum_of_divisors(n: int) -> int:\n        total = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                total += i\n        return total\n    common_divisor = gcd(a, b)\n    return sum_of_divisors(common_divisor)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n    common_gcd = gcd(a, b)\n    result = 0\n    for i in range(1, common_gcd + 1):\n        if a % i == 0 and b % i == 0:\n            result += i\n    return result"], "outputs": "[[6], [0], [28], [1], [6], [4], [1], [18], [1]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import gcd\n\ndef sum(a: int, b: int) -> int:\n    common_gcd = gcd(a, b)\n    divisors_sum = sum((i for i in range(1, common_gcd + 1) if a % i == 0 and b % i == 0))\n    return divisors_sum", "from typing import List\n\ndef find_divisors(n: int) -> List[int]:\n    divisors = []\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n\ndef sum(a: int, b: int) -> int:\n    divisors_a = find_divisors(a)\n    divisors_b = find_divisors(b)\n    common_divisors = set(divisors_a) & set(divisors_b)\n    return sum(common_divisors)", "from typing import List\n\ndef sum(a: int, b: int) -> int:\n\n    def common_divisors(n1: int, n2: int) -> List[int]:\n        divisors = []\n        for i in range(1, min(n1, n2) + 1):\n            if n1 % i == 0 and n2 % i == 0:\n                divisors.append(i)\n        return divisors\n    common_divs = common_divisors(a, b)\n    return sum(common_divs)", "from math import gcd\n\ndef sum(a: int, b: int) -> int:\n\n    def get_divisors(n: int):\n        divisors = set()\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divisors.add(i)\n                divisors.add(n // i)\n        return divisors\n    common_divisors = get_divisors(gcd(a, b))\n    return sum(common_divisors)", "def sum(a: int, b: int) -> int:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def common_divisors_sum(x, y):\n        gcd_value = gcd(x, y)\n        return sum((i for i in range(1, gcd_value + 1) if gcd_value % i == 0))\n    return common_divisors_sum(a, b)", "import math\n\ndef sum(a: int, b: int) -> int:\n    gcd = math.gcd(a, b)\n    common_divisors_sum = sum((divisor for divisor in range(1, gcd + 1) if a % divisor == 0 and b % divisor == 0))\n    return common_divisors_sum"], "outputs": "[['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError']]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10, 15], ['TypeError'], [6]]]"}], "entropy": 0.8812908992306927, "llm_generated_inputs": "[[10, 15], [0, 0], [12, 0], [7, 13], [5, 5], [6, 3], [8, 11], [20, 30], [1, 7]]", "input_output_examples": "[[[10, 15]], [[6]]]", "weighted_test_consistency": 0.7, "at_least_one_align": true}, "result": {"original_passk": 0.6, "original_avg_pass_rate": 0.6163636363636364, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 0.6, "repaired_avg_pass_rate": 0.6163636363636364, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/127", "original_requirement": "def multiply_int(x: int, y: int) -> int:\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def multiply_int(x: int, y: int) -> int:\n\"\"\"\nWrite a function to multiply two integers.\nassert multiply_int(10,20)==200\n\"\"\"", "entry_point": "multiply_int", "cluster_list": [{"programs_str": ["def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y", "def multiply_int(x: int, y: int) -> int:\n    return x * y"], "outputs": "[[6], [-20], [42], [0], [1], [0], [2147483647], [2147483648], [0], [200]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2, 3], [-4, 5], [-6, -7], [0, 100], [1, 1], [9999, 0], [2147483647, 1], [-2147483648, -1], [0, 0], [10, 20]]", "input_output_examples": "[[[10, 20]], [[200]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/128", "original_requirement": "from typing import List\n\n\ndef long_words(n: int, s: str) -> List[str]:\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef long_words(n: int, s: str) -> List[str]:\n\"\"\"\nWrite a function to find words that are longer than n characters from a given list of words.\nassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\"\"\"", "entry_point": "long_words", "cluster_list": [{"programs_str": ["from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    words = s.split()\n    return [word for word in words if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]", "from typing import List\n\ndef long_words(n: int, s: str) -> List[str]:\n    return [word for word in s.split() if len(word) > n]"], "outputs": "[[['python', 'programming', 'language']], [['programming', 'language', 'enthusiast']], [['quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']], [[]], [['all', 'words', 'are', 'included']], [['PythonIsGreat']], [['special-characters', 'hyphenated-words']], [['testing', 'multiple', 'spaces', 'between', 'words']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 'python is a programming language'], [7, 'python programming language enthusiast'], [2, 'a quick brown fox jumps over the lazy dog'], [10, ''], [0, 'all words are included'], [5, 'PythonIsGreat'], [5, 'test words with special-characters like hyphenated-words'], [4, 'testing multiple spaces      between words']]", "input_output_examples": "[[[3, 'python is a programming language']], [[['python', 'programming', 'language']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/129", "original_requirement": "from typing import List\n\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Write a function to determine whether a given matrix is a magic square.\n\n    A magic square is defined as a square matrix (i.e., the number of rows equals the number of columns) \n    where the sums of all rows, all columns, and the two diagonals are equal to the same value (the \"magic sum\").\n\n    The function should adhere to the following rules:\n    1. The input matrix must be a list of lists of integers.\n    2. If the input matrix is empty (`[]` or `[[]]`), return `False`.\n    3. If the input matrix is not square (i.e., the number of rows does not equal the number of columns, \n       or rows have inconsistent lengths), return `False`.\n    4. If the matrix is square, check whether it satisfies the magic square conditions:\n       - All rows must sum to the same value.\n       - All columns must sum to the same value.\n       - Both the primary diagonal (top-left to bottom-right) and the secondary diagonal (top-right to bottom-left) \n         must sum to the same value.\n    5. If all the above conditions are met, return `True`. Otherwise, return `False`.\n\n    Examples:\n    - `magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])` should return `True`.\n    - `magic_square_test([[]])` should return `False`.\n    - `magic_square_test([[1, 2], [3, 4, 5]])` should return `False` (not square).\n    - `magic_square_test([])` should return `False`.\n\n    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n\"\"\"\nWrite a function to calculate whether the matrix is a magic square.\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\"\"\"", "entry_point": "magic_square_test", "cluster_list": [{"programs_str": ["from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n\n    def is_valid_matrix(matrix: List[List[int]]) -> bool:\n        for row in matrix:\n            if len(row) != n:\n                return False\n        return True\n    if not is_valid_matrix(my_matrix):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((row[i] for row in my_matrix)) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum or sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum or sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    expected_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != expected_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != expected_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != expected_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != expected_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True"], "outputs": "[[True], [True], [True], [False], [True], [False], [False], [False], ['IndexError'], [False]]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((len(row) == len(my_matrix) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not my_matrix[0]:\n        return False\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((len(row) == len(my_matrix) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    sum_diagonal1 = sum((my_matrix[i][i] for i in range(n)))\n    sum_diagonal2 = sum((my_matrix[i][n - i - 1] for i in range(n)))\n    if sum_diagonal1 != sum_diagonal2:\n        return False\n    expected_sum = sum_diagonal1\n    for row in my_matrix:\n        if sum(row) != expected_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != expected_sum:\n            return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not my_matrix[0]:\n        return False\n    n = len(my_matrix)\n    magic_constant = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_constant:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_constant:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_constant:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_constant:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((len(row) == len(my_matrix) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not my_matrix[0]:\n        return False\n    n = len(my_matrix)\n    sum_magic = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != sum_magic:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != sum_magic:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != sum_magic:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != sum_magic:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((len(row) == len(my_matrix) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    expected_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != expected_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != expected_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != expected_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != expected_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for i in range(n):\n        if sum(my_matrix[i]) != magic_sum or sum((my_matrix[j][i] for j in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum or sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True"], "outputs": "[[True], [True], [True], [False], [True], [False], [False], [False], [False], [False]]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    sum_diagonal1 = sum((my_matrix[i][i] for i in range(n)))\n    sum_diagonal2 = sum((my_matrix[i][n - i - 1] for i in range(n)))\n    if sum_diagonal1 != sum_diagonal2:\n        return False\n    for row in my_matrix:\n        if sum(row) != sum_diagonal1:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != sum_diagonal1:\n            return False\n    return True"], "outputs": "[[True], [True], [True], [False], [True], [False], [False], [False], [True], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7199877141320895, "llm_generated_inputs": "[[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]], [[[4, 9, 2], [3, 5, 7], [8, 1, 6]]], [[[16, 2, 3, 13], [5, 11, 10, 8], [9, 7, 6, 12], [4, 14, 15, 1]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]]], [[[8, 9], [0, 7]]], [[[8, 1, 6, 3], [3, 5, 7, 10], [4, 9, 2, 11], [1, 6, 9, 5]]], [[[8, 1, 6], [3, 5, 7], [4, 9, 12]]], [[]], [[[4, 6, 2], [3, 5, 1], [8, 0]]]]", "input_output_examples": "[[[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    \"\"\"\n    Write a function to determine whether a given matrix is a magic square.\n\n    A magic square is defined as a square matrix (i.e., the number of rows equals the number of columns) \n    where the sums of all rows, all columns, and the two diagonals are equal to the same value (the \"magic sum\").\n\n    The function should adhere to the following rules:\n    1. The input matrix must be a list of lists of integers.\n    2. If the input matrix is empty (`[]` or `[[]]`), return `False`.\n    3. If the input matrix is not square (i.e., the number of rows does not equal the number of columns, \n       or rows have inconsistent lengths), return `False`.\n    4. If the matrix is square, check whether it satisfies the magic square conditions:\n       - All rows must sum to the same value.\n       - All columns must sum to the same value.\n       - Both the primary diagonal (top-left to bottom-right) and the secondary diagonal (top-right to bottom-left) \n         must sum to the same value.\n    5. If all the above conditions are met, return `True`. Otherwise, return `False`.\n\n    Examples:\n    - `magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])` should return `True`.\n    - `magic_square_test([[]])` should return `False`.\n    - `magic_square_test([[1, 2], [3, 4, 5]])` should return `False` (not square).\n    - `magic_square_test([])` should return `False`.\n\n    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\n    \"\"\"", "entry_point": "magic_square_test", "cluster_list": [{"programs_str": ["from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) for row in my_matrix)) or any((not all((isinstance(i, int) for i in row)) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    if any((sum(row) != magic_sum for row in my_matrix)):\n        return False\n    for col_idx in range(n):\n        col_sum = sum((my_matrix[row_idx][col_idx] for row_idx in range(n)))\n        if col_sum != magic_sum:\n            return False\n    primary_diag_sum = sum((my_matrix[i][i] for i in range(n)))\n    if primary_diag_sum != magic_sum:\n        return False\n    secondary_diag_sum = sum((my_matrix[i][n - 1 - i] for i in range(n)))\n    if secondary_diag_sum != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) and all((isinstance(x, int) for x in row)) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    if any((sum(row) != magic_sum for row in my_matrix)):\n        return False\n    if any((sum((my_matrix[row][col] for row in range(n))) != magic_sum for col in range(n))):\n        return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) and row for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col_index in range(n):\n        if sum((row[col_index] for row in my_matrix)) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) for row in my_matrix)) or (not my_matrix[0]):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or any((not row for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or any((not row for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or any((len(row) == 0 for row in my_matrix)):\n        return False\n    rows = len(my_matrix)\n    cols = len(my_matrix[0])\n    if rows != cols or any((len(row) != cols for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col_idx in range(cols):\n        if sum((my_matrix[row_idx][col_idx] for row_idx in range(rows))) != magic_sum:\n            return False\n    primary_diagonal_sum = sum((my_matrix[i][i] for i in range(rows)))\n    secondary_diagonal_sum = sum((my_matrix[i][rows - i - 1] for i in range(rows)))\n    if primary_diagonal_sum != magic_sum or secondary_diagonal_sum != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col_idx in range(n):\n        if sum((my_matrix[row_idx][col_idx] for row_idx in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) and row for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or any((not isinstance(row, list) for row in my_matrix)) or (not all((isinstance(item, int) for row in my_matrix for item in row))):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - 1 - i] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) and row for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col_idx in range(n):\n        if sum((my_matrix[row_idx][col_idx] for row_idx in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) and all((isinstance(x, int) for x in row)) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or not all((isinstance(row, list) and row for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    if any((sum(row) != magic_sum for row in my_matrix)):\n        return False\n    for col_idx in range(n):\n        if sum((my_matrix[row_idx][col_idx] for row_idx in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True", "from typing import List\n\ndef magic_square_test(my_matrix: List[List[int]]) -> bool:\n    if not my_matrix or any((not isinstance(row, list) or not all((isinstance(x, int) for x in row)) for row in my_matrix)):\n        return False\n    n = len(my_matrix)\n    if n == 0 or any((len(row) != n for row in my_matrix)):\n        return False\n    magic_sum = sum(my_matrix[0])\n    for row in my_matrix:\n        if sum(row) != magic_sum:\n            return False\n    for col in range(n):\n        if sum((my_matrix[row][col] for row in range(n))) != magic_sum:\n            return False\n    if sum((my_matrix[i][i] for i in range(n))) != magic_sum:\n        return False\n    if sum((my_matrix[i][n - i - 1] for i in range(n))) != magic_sum:\n        return False\n    return True"], "outputs": "[[True], [True], [True], [False], [True], [False], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]], [[[4, 9, 2], [3, 5, 7], [8, 1, 6]]], [[[16, 2, 3, 13], [5, 11, 10, 8], [9, 7, 6, 12], [4, 14, 15, 1]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]]], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]]], [[[8, 9], [0, 7]]], [[[8, 1, 6, 3], [3, 5, 7, 10], [4, 9, 2, 11], [1, 6, 9, 5]]], [[[8, 1, 6], [3, 5, 7], [4, 9, 12]]], [[]], [[[4, 6, 2], [3, 5, 1], [8, 0]]]]", "input_output_examples": "[[[[[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/130", "original_requirement": "from typing import List\n\n\ndef max_occurrences(nums: List[int]) -> int:\n\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list of integers.\n    \n    Requirements:\n    1. The input list must contain only integers. If the list contains non-integer elements, the function behavior is undefined.\n    2. If the input list is empty, the function must raise a ValueError.\n    3. The function returns a single integer corresponding to the item with the highest frequency in the list.\n    4. In case of ties (multiple items with the same maximum frequency), the function returns the first item encountered with the maximum frequency, based on the order of appearance in the list.\n    \n    Example:\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef max_occurrences(nums: List[int]) -> int:\n\"\"\"\nWrite a function to find the item with maximum frequency in a given list.\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2\n\"\"\"", "entry_point": "max_occurrences", "cluster_list": [{"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counter = Counter(nums)\n    return counter.most_common(1)[0][0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counts = Counter(nums)\n    most_common_num, _ = counts.most_common(1)[0]\n    return most_common_num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counter = Counter(nums)\n    return counter.most_common(1)[0][0]"], "outputs": "[[2], [1], [100], [10], [5], [0], ['IndexError'], [5], [-1], [10]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counter = Counter(nums)\n    return max(counter, key=counter.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return max(frequency, key=frequency.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counter = Counter(nums)\n    return max(counter, key=counter.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return max(frequency, key=frequency.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    max_frequency = max(frequency.values())\n    most_common = [num for num, freq in frequency.items() if freq == max_frequency]\n    return min(most_common)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counter = Counter(nums)\n    max_freq = max(counter.values())\n    max_items = [item for item in counter if counter[item] == max_freq]\n    return min(max_items)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counter = Counter(nums)\n    max_frequency = max(counter.values())\n    most_frequent_items = [num for num, freq in counter.items() if freq == max_frequency]\n    return most_frequent_items[0]", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    max_freq = max(count.values())\n    for num, freq in count.items():\n        if freq == max_freq:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    max_freq_item = max(frequency, key=frequency.get)\n    return max_freq_item", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency = Counter(nums)\n    return max(frequency, key=frequency.get)", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    counter = Counter(nums)\n    max_count = max(counter.values())\n    max_item = None\n    for num, count in counter.items():\n        if count == max_count:\n            max_item = num\n            break\n    return max_item", "from collections import Counter\nfrom typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    count = Counter(nums)\n    return max(count, key=count.get)"], "outputs": "[[2], [1], [100], [10], [5], [0], ['ValueError'], [5], [-1], [10]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    frequency_counter = Counter(nums)\n    most_common = frequency_counter.most_common(1)\n    return most_common[0][0] if most_common else None"], "outputs": "[[2], [1], [100], [10], [5], [0], [None], [5], [-1], [10]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.5578578164321781, "llm_generated_inputs": "[[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]], [[1, 1, 1, 1, 1]], [[100]], [[10, 20, 30, 40, 50]], [[5, 5, 5, 10, 10]], [[0, 0, 0]], [[]], [[5, 3, 9, 3, 5, 5, 5]], [[-1, -1, -2, -1, -2]], [[10, 20, 30, 10, 20, 30, 10]]]", "input_output_examples": "[[[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef max_occurrences(nums: List[int]) -> int:\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list of integers.\n    \n    Requirements:\n    1. The input list must contain only integers. If the list contains non-integer elements, the function behavior is undefined.\n    2. If the input list is empty, the function must raise a ValueError.\n    3. The function returns a single integer corresponding to the item with the highest frequency in the list.\n    4. In case of ties (multiple items with the same maximum frequency), the function returns the first item encountered with the maximum frequency, based on the order of appearance in the list.\n    \n    Example:\n    assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2\n    \"\"\"\n```", "entry_point": "max_occurrences", "cluster_list": [{"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    frequency = Counter(nums)\n    max_freq = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_freq:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    counter = Counter(nums)\n    max_count = max(counter.values())\n    for num in nums:\n        if counter[num] == max_count:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('Input list cannot be empty')\n    frequency_map = Counter(nums)\n    max_frequency = max(frequency_map.values())\n    for num in nums:\n        if frequency_map[num] == max_frequency:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    freq_counter = Counter(nums)\n    max_frequency = max(freq_counter.values())\n    for num in nums:\n        if freq_counter[num] == max_frequency:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty')\n    frequency = Counter(nums)\n    max_freq = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_freq:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    frequency = Counter(nums)\n    max_frequency = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_frequency:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('Input list cannot be empty.')\n    counter = Counter(nums)\n    max_frequency = max(counter.values())\n    for num in nums:\n        if counter[num] == max_frequency:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list must not be empty.')\n    counter = Counter(nums)\n    max_count = max(counter.values())\n    for num in nums:\n        if counter[num] == max_count:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    frequency = Counter(nums)\n    max_count = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_count:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('Input list is empty.')\n    frequency = Counter(nums)\n    max_freq = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_freq:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('Input list is empty')\n    freq_counter = Counter(nums)\n    max_frequency = max(freq_counter.values())\n    for num in nums:\n        if freq_counter[num] == max_frequency:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    frequency = Counter(nums)\n    max_freq = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_freq:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty')\n    frequency = Counter(nums)\n    max_count = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_count:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    frequency = Counter(nums)\n    max_count = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_count:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty')\n    freq = Counter(nums)\n    max_freq = max(freq.values())\n    for num in nums:\n        if freq[num] == max_freq:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('Input list is empty')\n    frequency = Counter(nums)\n    max_freq = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_freq:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    frequency = Counter(nums)\n    max_freq = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_freq:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    freq_counter = Counter(nums)\n    max_freq = max(freq_counter.values())\n    for num in nums:\n        if freq_counter[num] == max_freq:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    frequency = Counter(nums)\n    max_count = max(frequency.values())\n    for num in nums:\n        if frequency[num] == max_count:\n            return num", "from typing import List\nfrom collections import Counter\n\ndef max_occurrences(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    counter = Counter(nums)\n    max_freq = max(counter.values())\n    for num in nums:\n        if counter[num] == max_freq:\n            return num"], "outputs": "[[2], [1], [100], [10], [5], [0], ['ValueError'], [5], [-1], [10]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]], [[1, 1, 1, 1, 1]], [[100]], [[10, 20, 30, 40, 50]], [[5, 5, 5, 10, 10]], [[0, 0, 0]], [[]], [[5, 3, 9, 3, 5, 5, 5]], [[-1, -1, -2, -1, -2]], [[10, 20, 30, 10, 20, 30, 10]]]", "input_output_examples": "[[[[2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2]]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/131", "original_requirement": "def reverse_vowels(str1: str) -> str:\n\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def reverse_vowels(str1: str) -> str:\n\"\"\"\nWrite a python function to reverse only the vowels of a given string (where y is not a vowel).\nassert reverse_vowels(\"Python\") == \"Python\"\n\"\"\"", "entry_point": "reverse_vowels", "cluster_list": [{"programs_str": ["def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_vowels = [char for char in str1 if char in vowels]\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(str_vowels.pop())\n        else:\n            result.append(char)\n    return ''.join(result)", "from typing import List\n\ndef reverse_vowels(str1: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    str_list = list(str1)\n    i, j = (0, len(str_list) - 1)\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = (str_list[j], str_list[i])\n            i += 1\n            j -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str1_vowels = [c for c in str1 if c in vowels]\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(str1_vowels.pop())\n        else:\n            result.append(char)\n    return ''.join(result)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_list = list(str1)\n    vowel_positions = [i for i, c in enumerate(str_list) if c in vowels]\n    reversed_vowels = [str_list[i] for i in vowel_positions][::-1]\n    for idx, pos in enumerate(vowel_positions):\n        str_list[pos] = reversed_vowels[idx]\n    return ''.join(str_list)", "from typing import List\n\ndef reverse_vowels(str1: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    str_list = list(str1)\n    left, right = (0, len(str1) - 1)\n    while left < right:\n        while left < right and str_list[left] not in vowels:\n            left += 1\n        while left < right and str_list[right] not in vowels:\n            right -= 1\n        if left < right:\n            str_list[left], str_list[right] = (str_list[right], str_list[left])\n            left += 1\n            right -= 1\n    return ''.join(str_list)", "from typing import List\n\ndef reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str_list = list(str1)\n    i, j = (0, len(str_list) - 1)\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = (str_list[j], str_list[i])\n            i += 1\n            j -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_vowels = [char for char in str1 if char in vowels]\n    reversed_vowels = str_vowels[::-1]\n    result = []\n    reverse_index = 0\n    for char in str1:\n        if char in vowels:\n            result.append(reversed_vowels[reverse_index])\n            reverse_index += 1\n        else:\n            result.append(char)\n    return ''.join(result)", "def reverse_vowels(str1: str) -> str:\n    from collections import deque\n    vowels = set('aeiouAEIOU')\n    vowel_deque = deque([char for char in str1 if char in vowels])\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(vowel_deque.pop())\n        else:\n            result.append(char)\n    return ''.join(result)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    indices = [i for i, char in enumerate(str1) if char in vowels]\n    characters = list(str1)\n    i, j = (0, len(indices) - 1)\n    while i < j:\n        characters[indices[i]], characters[indices[j]] = (characters[indices[j]], characters[indices[i]])\n        i += 1\n        j -= 1\n    return ''.join(characters)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_vowels = [char for char in str1 if char in vowels]\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(str_vowels.pop())\n        else:\n            result.append(char)\n    return ''.join(result)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_positions = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowels = [str1[i] for i in vowel_positions][::-1]\n    str_list = list(str1)\n    for pos, rev_vowel in zip(vowel_positions, reversed_vowels):\n        str_list[pos] = rev_vowel\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    str_list = list(str1)\n    i, j = (0, len(str_list) - 1)\n    while i < j:\n        if str_list[i] not in vowels:\n            i += 1\n        elif str_list[j] not in vowels:\n            j -= 1\n        else:\n            str_list[i], str_list[j] = (str_list[j], str_list[i])\n            i += 1\n            j -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_vowels = [char for char in str1 if char in vowels]\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(str_vowels.pop())\n        else:\n            result.append(char)\n    return ''.join(result)", "def reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str_list = list(str1)\n    i, j = (0, len(str_list) - 1)\n    while i < j:\n        while i < j and str_list[i] not in vowels:\n            i += 1\n        while i < j and str_list[j] not in vowels:\n            j -= 1\n        if i < j:\n            str_list[i], str_list[j] = (str_list[j], str_list[i])\n            i += 1\n            j -= 1\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    from collections import deque\n    vowels = 'aeiouAEIOU'\n    vowel_positions = deque([char for char in str1 if char in vowels])\n    result = []\n    for char in str1:\n        if char in vowels:\n            result.append(vowel_positions.pop())\n        else:\n            result.append(char)\n    return ''.join(result)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_positions = [i for i, char in enumerate(str1) if char in vowels]\n    reversed_vowel_chars = [str1[i] for i in vowel_positions][::-1]\n    str_list = list(str1)\n    for index, pos in enumerate(vowel_positions):\n        str_list[pos] = reversed_vowel_chars[index]\n    return ''.join(str_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str_vowels = [ch for ch in str1 if ch in vowels]\n    result = []\n    for ch in str1:\n        if ch in vowels:\n            result.append(str_vowels.pop())\n        else:\n            result.append(ch)\n    return ''.join(result)", "from typing import List\n\ndef reverse_vowels(str1: str) -> str:\n    vowels = 'aeiouAEIOU'\n    str1_list = list(str1)\n    vowel_indices = [i for i, char in enumerate(str1_list) if char in vowels]\n    reversed_vowels = [str1_list[i] for i in vowel_indices][::-1]\n    for idx, i in enumerate(vowel_indices):\n        str1_list[i] = reversed_vowels[idx]\n    return ''.join(str1_list)", "def reverse_vowels(str1: str) -> str:\n    vowels = 'AEIOUaeiou'\n    str1_list = list(str1)\n    vowel_indices = [i for i, char in enumerate(str1) if char in vowels]\n    vowel_chars = [str1[i] for i in vowel_indices]\n    for i, index in enumerate(vowel_indices):\n        str1_list[index] = vowel_chars[-(i + 1)]\n    return ''.join(str1_list)", "from typing import List\n\ndef reverse_vowels(str1: str) -> str:\n    vowels = set('aeiouAEIOU')\n    str_list = list(str1)\n    i, j = (0, len(str_list) - 1)\n    while i < j:\n        while i < j and str_list[i] not in vowels:\n            i += 1\n        while i < j and str_list[j] not in vowels:\n            j -= 1\n        str_list[i], str_list[j] = (str_list[j], str_list[i])\n        i += 1\n        j -= 1\n    return ''.join(str_list)"], "outputs": "[['holle'], ['Python'], ['odicatuen'], ['sky'], ['bcd'], ['uOieA'], ['HOLLE'], ['hollE'], ['12345'], ['holle123'], [''], ['a'], ['uoiea'], ['aoieucbd'], ['vxyrtbw']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['hello'], ['Python'], ['education'], ['sky'], ['bcd'], ['AeiOu'], ['HELLO'], ['hEllo'], ['12345'], ['hello123'], [''], ['a'], ['aeiou'], ['ueioacbd'], ['vxyrtbw']]", "input_output_examples": "[[['Python']], [['Python']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/132", "original_requirement": "from typing import Tuple\n\n\ndef tup_string(tup1: Tuple[str]) -> str:\n\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef tup_string(tup1: Tuple[str]) -> str:\n\"\"\"\nWrite a function to convert a tuple to a string.\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\"\"\"", "entry_point": "tup_string", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str, ...]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)", "from typing import Tuple\n\ndef tup_string(tup1: Tuple[str]) -> str:\n    return ''.join(tup1)"], "outputs": "[['exercises'], ['test'], ['abc'], ['TypeError'], ['a'], ['hello']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')], [('t', 'e', 's', 't')], [('a', 'b', 'c')], [((),)], [('a',)], [('h', 'e', 'l', 'l', 'o')]]", "input_output_examples": "[[[('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')]], [['exercises']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/133", "original_requirement": "from typing import List\n\n\ndef sum_negativenum(nums: List[int]) -> int:\n\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sum_negativenum(nums: List[int]) -> int:\n\"\"\"\nWrite a function to calculate the sum of the negative numbers of a given list of numbers.\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\"\"\"", "entry_point": "sum_negativenum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((x for x in nums if x < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((n for n in nums if n < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))", "from typing import List\n\ndef sum_negativenum(nums: List[int]) -> int:\n    return sum((num for num in nums if num < 0))"], "outputs": "[[-32], [-15], [0], [-10], [0], [0], [0], [-1], [-600], [-6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 4, -6, -9, 11, -12, 14, -5, 17]], [[0, -1, -2, -3, -4, -5]], [[1, 2, 3, 4, 5]], [[-10]], [[10]], [[]], [[0]], [[-1, 0, 1]], [[-100, -200, -300]], [[-1, -2, -3, 4, 5, 6]]]", "input_output_examples": "[[[[2, 4, -6, -9, 11, -12, 14, -5, 17]]], [[-32]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/135", "original_requirement": "def hexagonal_num(n: int) -> int:\n\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def hexagonal_num(n: int) -> int:\n\"\"\"\nWrite a function to find the nth hexagonal number.\nassert hexagonal_num(10) == 190\n\"\"\"", "entry_point": "hexagonal_num", "cluster_list": [{"programs_str": ["def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "def hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)"], "outputs": "[[1], [6], [0], [3], [190], [19900], [1999000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [0], [-1], [10], [100], [1000]]", "input_output_examples": "[[[10]], [[190]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/137", "original_requirement": "from typing import List\n\n\ndef zero_count(nums: List[int]) -> float:\n\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    \"\"\"\n    Write a function to calculate the ratio of zeroes to non-zeroes in an array of integers.\n    \n    The function should behave as follows:\n    1. If the input list is empty, return `float('inf')`.\n    2. Count zeroes as elements that are exactly `0`.\n    3. Count non-zeroes as elements that are not `0`.\n    4. If there are no non-zero elements in the list, return `float('inf')`.\n    5. Otherwise, return the ratio of zeroes to non-zeroes as a float.\n\n    Example:\n    assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef zero_count(nums: List[int]) -> float:\n\"\"\"\nWrite a function to find the ratio of zeroes to non-zeroes in an array of integers.\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n\"\"\"", "entry_point": "zero_count", "cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len([num for num in nums if num != 0])\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "import math\nfrom typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "import math\nfrom typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    total = len(nums)\n    zero_count = nums.count(0)\n    if total == zero_count:\n        return float('inf')\n    return zero_count / (total - zero_count)", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    total_count = len(nums)\n    zero_count = nums.count(0)\n    non_zero_count = total_count - zero_count\n    ratio = zero_count / non_zero_count if non_zero_count != 0 else float('inf')\n    return ratio", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    if non_zero_count == 0:\n        return float('inf')\n    return zero_count / non_zero_count", "import math\nfrom typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    total_count = len(nums)\n    zero_count = nums.count(0)\n    non_zero_count = total_count - zero_count\n    if non_zero_count == 0:\n        return float('inf')\n    return zero_count / non_zero_count"], "outputs": "[[0.18181818181818182], [inf], [0.0], [inf], [inf], [1.0], [0.6666666666666666], [0.75], [0.3333333333333333], [1.0]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return 0.0\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return 0.0\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return 0.0\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return 0.0\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return 0.0\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    return zeroes / non_zeroes if non_zeroes != 0 else 0.0", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    return zeroes / non_zeroes if non_zeroes != 0 else 0.0"], "outputs": "[[0.18181818181818182], [0.0], [0.0], [0.0], [0.0], [1.0], [0.6666666666666666], [0.75], [0.3333333333333333], [1.0]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return 0.0\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    return zeroes / (non_zeroes + zeroes)"], "outputs": "[[0.15384615384615385], [1.0], [0.0], [1.0], [0.0], [0.5], [0.4], [0.42857142857142855], [0.25], [0.5]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [0.15384615384615385], [0.181818]]]"}, {"programs_str": ["from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return 0.0\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    total_count = len(nums)\n    if total_count == 0:\n        return 0.0\n    zero_count = nums.count(0)\n    non_zero_count = total_count - zero_count\n    if non_zero_count == 0:\n        return float('inf')\n    return zero_count / non_zero_count", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if len(nums) == 0:\n        return 0.0\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes"], "outputs": "[[0.18181818181818182], [inf], [0.0], [inf], [0.0], [1.0], [0.6666666666666666], [0.75], [0.3333333333333333], [1.0]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8005071529034175, "llm_generated_inputs": "[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [[0, 0, 0, 0]], [[1, 2, 3, 4]], [[0]], [[]], [[0, 1, 0, 1]], [[-1, -2, -3, 0, 0]], [[0, 0, 1, 1, -1, 2, 0]], [[100, 200, 0, -300]], [[0, 0, 0, 100, 200, 300]]]", "input_output_examples": "[[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]], [[0.181818]]]", "weighted_test_consistency": 0.9500000000000001, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    \"\"\"\n    Write a function to calculate the ratio of zeroes to non-zeroes in an array of integers.\n    \n    The function should behave as follows:\n    1. If the input list is empty, return `float('inf')`.\n    2. Count zeroes as elements that are exactly `0`.\n    3. Count non-zeroes as elements that are not `0`.\n    4. If there are no non-zero elements in the list, return `float('inf')`.\n    5. Otherwise, return the ratio of zeroes to non-zeroes as a float.\n\n    Example:\n    assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)\n    \"\"\"", "entry_point": "zero_count", "cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    if non_zero_count == 0:\n        return float('inf')\n    return zero_count / non_zero_count", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    if non_zero_count == 0:\n        return float('inf')\n    return zero_count / non_zero_count", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = sum((1 for x in nums if x == 0))\n    non_zeroes = sum((1 for x in nums if x != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zero_count = sum((1 for num in nums if num == 0))\n    non_zero_count = sum((1 for num in nums if num != 0))\n    if non_zero_count == 0:\n        return float('inf')\n    return zero_count / non_zero_count", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = sum((1 for num in nums if num == 0))\n    non_zeroes = sum((1 for num in nums if num != 0))\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    if non_zero_count == 0:\n        return float('inf')\n    return zero_count / non_zero_count", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes", "import math\nfrom typing import List\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zero_count = nums.count(0)\n    non_zero_count = len(nums) - zero_count\n    if non_zero_count == 0:\n        return float('inf')\n    return zero_count / non_zero_count", "from typing import List\nimport math\n\ndef zero_count(nums: List[int]) -> float:\n    if not nums:\n        return float('inf')\n    zeroes = nums.count(0)\n    non_zeroes = len(nums) - zeroes\n    if non_zeroes == 0:\n        return float('inf')\n    return zeroes / non_zeroes"], "outputs": "[[0.18181818181818182], [inf], [0.0], [inf], [inf], [1.0], [0.6666666666666666], [0.75], [0.3333333333333333], [1.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]], [[0, 0, 0, 0]], [[1, 2, 3, 4]], [[0]], [[]], [[0, 1, 0, 1]], [[-1, -2, -3, 0, 0]], [[0, 0, 1, 1, -1, 2, 0]], [[100, 200, 0, -300]], [[0, 0, 0, 100, 200, 300]]]", "input_output_examples": "[[[[0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]]], [[0.181818]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.30438596491228076, "original_nzpassk": false, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/138", "original_requirement": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"", "repaired_requirement": "```python\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n    Write a Python function to check whether the given positive integer `n` can be represented \n    as a sum of multiple distinct non-zero powers of 2, excluding cases where `n` is itself a single power of 2.\n    \n    - The function should return `False` for `n <= 0` or if `n` is a single power of 2 (e.g., 1, 2, 4, 8, etc.).\n    - The function should return `True` if `n` can be expressed as a sum of two or more distinct non-zero powers of 2.\n    \n    Examples:\n    assert is_Sum_Of_Powers_Of_Two(10) == True  # 10 = 2 + 8\n    assert is_Sum_Of_Powers_Of_Two(1) == False  # 1 is a single power of 2\n    assert is_Sum_Of_Powers_Of_Two(2) == False  # 2 is a single power of 2\n    assert is_Sum_Of_Powers_Of_Two(0) == False  # 0 is not a positive integer\n    \"\"\"\n```", "original_clusters": {"requirement": "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\nassert is_Sum_Of_Powers_Of_Two(10) == True\n\"\"\"", "entry_point": "is_Sum_Of_Powers_Of_Two", "cluster_list": [{"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and bin(n).count('1') > 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return bin(n).count('1') > 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    return n & n - 1 == 0 or n - 1 & n != 0"], "outputs": "[[False], [True], [True], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != 0"], "outputs": "[[False], [False], [False], [True], [True], [True], [False], [True], [True], [True]]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0"], "outputs": "[[False], [True], [True], [False], [False], [False], [True], [False], [False], [False]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [False], [True]]]"}, {"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 != n - 1"], "outputs": "[[False], [False], [True], [False], [False], [True], [True], [False], [False], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    return n > 0 and n & n - 1 == 0\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    while n > 0:\n        largest_pow_2 = 1\n        while largest_pow_2 * 2 <= n:\n            largest_pow_2 *= 2\n        n -= largest_pow_2\n    return n == 0", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n -= 1\n    return n == 0"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [True], [True], [True]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7464512889795468, "llm_generated_inputs": "[[0], [1], [2], [3], [7], [10], [16], [31], [63], [1023]]", "input_output_examples": "[[[10]], [[True]]]", "weighted_test_consistency": 0.9, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    \"\"\"\n    Write a Python function to check whether the given positive integer `n` can be represented \n    as a sum of multiple distinct non-zero powers of 2, excluding cases where `n` is itself a single power of 2.\n    \n    - The function should return `False` for `n <= 0` or if `n` is a single power of 2 (e.g., 1, 2, 4, 8, etc.).\n    - The function should return `True` if `n` can be expressed as a sum of two or more distinct non-zero powers of 2.\n    \n    Examples:\n    assert is_Sum_Of_Powers_Of_Two(10) == True  # 10 = 2 + 8\n    assert is_Sum_Of_Powers_Of_Two(1) == False  # 1 is a single power of 2\n    assert is_Sum_Of_Powers_Of_Two(2) == False  # 2 is a single power of 2\n    assert is_Sum_Of_Powers_Of_Two(0) == False  # 0 is not a positive integer\n    \"\"\"\n```", "entry_point": "is_Sum_Of_Powers_Of_Two", "cluster_list": [{"programs_str": ["def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0 or n & n - 1 == 0:\n        return False\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        if count > 1:\n            return True\n        n >>= 1\n    return False", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "import math\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "from math import log2\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0 or n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "import math\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0 or n & n - 1 == 0:\n        return False\n    return True", "from typing import List\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0 or n & n - 1 == 0:\n        return False\n    count = 0\n    while n > 0:\n        if n & 1:\n            count += 1\n        n >>= 1\n    return count > 1", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    count_of_ones = bin(n).count('1')\n    return count_of_ones > 1", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "import math\n\ndef is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0 or n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True", "def is_Sum_Of_Powers_Of_Two(n: int) -> bool:\n    if n <= 0:\n        return False\n    if n & n - 1 == 0:\n        return False\n    return True"], "outputs": "[[False], [False], [False], [True], [True], [True], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [7], [10], [16], [31], [63], [1023]]", "input_output_examples": "[[[10]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.6528301886792452, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.7641509433962264, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/139", "original_requirement": "def circle_circumference(r: float) -> float:\n\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def circle_circumference(r: float) -> float:\n\"\"\"\nWrite a function to find the circumference of a circle.\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)\n\"\"\"", "entry_point": "circle_circumference", "cluster_list": [{"programs_str": ["import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r", "import math\n\ndef circle_circumference(r: float) -> float:\n    return 2 * math.pi * r"], "outputs": "[[62.83185307179586], [0.0], [-31.41592653589793], [6.283185307179587e-10], [62831853071.79586]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10.0], [0.0], [-5.0], [1e-10], [10000000000.0]]", "input_output_examples": "[[[10]], [[62.830000000000005]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/140", "original_requirement": "from typing import List\nfrom typing import Set\n\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Set\n\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n\"\"\"\nWrite a function to flatten the list of lists into a single set of numbers.\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])\n\"\"\"", "entry_point": "extract_singly", "cluster_list": [{"programs_str": ["from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((item for sublist in test_list for item in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return {item for sublist in test_list for item in sublist}", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set().union(*test_list)", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    result = set()\n    for sublist in test_list:\n        result.update(sublist)\n    return result", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((item for sublist in test_list for item in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((item for sublist in test_list for item in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((item for sublist in test_list for item in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    result_set = set()\n    for sublist in test_list:\n        result_set.update(sublist)\n    return result_set", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    result_set = set()\n    for sublist in test_list:\n        result_set.update(sublist)\n    return result_set", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((item for sublist in test_list for item in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((item for sublist in test_list for item in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((item for sublist in test_list for item in sublist))", "from typing import List, Set\n\ndef extract_singly(test_list: List[List[int]]) -> Set[int]:\n    return set((num for sublist in test_list for num in sublist))"], "outputs": "[[{1, 3, 4, 5, 7}], [{1, 2, 3}], [{200, 100, 300}], [{0, 3, -1, -3, -2}], [{1, 2, 3, 4, 5, 6}], [set()], [set()]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[3, 4, 5], [4, 5, 7], [1, 4]]], [[[1], [2], [3]]], [[[100, 200, 300], [100, 100, 200], [300]]], [[[0], [-1, -2, 0], [3, -3, 0]]], [[[1, 2, 3], [], [4, 5, 6]]], [[[]]], [[]]]", "input_output_examples": "[[[[(3, 4, 5), (4, 5, 7), (1, 4)]]], [[{1, 3, 4, 5, 7}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/141", "original_requirement": "from typing import List\n\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort a list of elements.\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\"\"\"", "entry_point": "pancake_sort", "cluster_list": [{"programs_str": ["from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(end):\n        start = 0\n        while start < end:\n            nums[start], nums[end] = (nums[end], nums[start])\n            start += 1\n            end -= 1\n\n    def find_max_index(n):\n        max_idx = 0\n        for i in range(1, n):\n            if nums[i] > nums[max_idx]:\n                max_idx = i\n        return max_idx\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_idx = find_max_index(curr_size)\n        if max_idx != curr_size - 1:\n            flip(max_idx)\n            flip(curr_size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(k: int):\n        nums[:k + 1] = reversed(nums[:k + 1])\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = max(range(size), key=lambda i: nums[i])\n        if max_index != size - 1:\n            flip(max_index)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist, k):\n        sublist[:k + 1] = sublist[:k + 1][::-1]\n    n = len(nums)\n    for unsorted_size in range(n, 1, -1):\n        max_index = max(range(unsorted_size), key=nums.__getitem__)\n        if max_index != unsorted_size - 1:\n            if max_index > 0:\n                flip(nums, max_index)\n            flip(nums, unsorted_size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist, k):\n        sublist[:k] = reversed(sublist[:k])\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = max(range(size), key=nums.__getitem__)\n        if max_index + 1 != size:\n            flip(nums, max_index + 1)\n            flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sub_list, k):\n        start = 0\n        while start < k:\n            sub_list[start], sub_list[k] = (sub_list[k], sub_list[start])\n            start += 1\n            k -= 1\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = max(range(size), key=nums.__getitem__)\n        if max_index != size - 1:\n            flip(nums, max_index)\n            flip(nums, size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> None:\n        sublist[:k] = sublist[:k][::-1]\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index + 1 != size:\n            if max_index > 0:\n                flip(nums, max_index + 1)\n            flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(end: int):\n        nums[:end] = reversed(nums[:end])\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index + 1 != size:\n            flip(max_index + 1)\n            flip(size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> None:\n        sublist[:k] = reversed(sublist[:k])\n    size = len(nums)\n    for i in range(size, 1, -1):\n        max_index = nums.index(max(nums[:i]))\n        if max_index != i - 1:\n            flip(nums, max_index + 1)\n            flip(nums, i)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(end_idx: int):\n        start_idx = 0\n        while start_idx < end_idx:\n            nums[start_idx], nums[end_idx] = (nums[end_idx], nums[start_idx])\n            start_idx += 1\n            end_idx -= 1\n    for size in range(len(nums), 1, -1):\n        max_idx = max(range(size), key=lambda i: nums[i])\n        if max_idx != size - 1:\n            if max_idx != 0:\n                flip(max_idx)\n            flip(size - 1)\n    return nums", "from typing import List\n\ndef flip(nums: List[int], k: int) -> None:\n    nums[:k + 1] = reversed(nums[:k + 1])\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            flip(nums, max_index)\n            flip(nums, size - 1)\n    return nums", "from typing import List\n\ndef flip(nums: List[int], k: int) -> None:\n    nums[:k] = nums[:k][::-1]\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = max(range(size), key=nums.__getitem__)\n        if max_index + 1 != size:\n            flip(nums, max_index + 1)\n            flip(nums, size)\n    return nums", "from typing import List\n\ndef flip(nums: List[int], k: int) -> None:\n    nums[:k + 1] = reversed(nums[:k + 1])\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    for curr_size in range(n, 1, -1):\n        max_idx = max(range(curr_size), key=nums.__getitem__)\n        if max_idx != curr_size - 1:\n            flip(nums, max_idx)\n            flip(nums, curr_size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> None:\n        sublist[:k] = sublist[:k][::-1]\n\n    def find_max_index(sublist: List[int], n: int) -> int:\n        max_idx = 0\n        for i in range(1, n):\n            if sublist[i] > sublist[max_idx]:\n                max_idx = i\n        return max_idx\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_idx = find_max_index(nums, size)\n        if max_idx != size - 1:\n            flip(nums, max_idx + 1)\n            flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(arr: List[int], k: int) -> None:\n        arr[:k] = arr[:k][::-1]\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_idx = nums.index(max(nums[:size]))\n        if max_idx != size - 1:\n            if max_idx != 0:\n                flip(nums, max_idx + 1)\n            flip(nums, size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist, k):\n        left = 0\n        while left < k:\n            sublist[left], sublist[k] = (sublist[k], sublist[left])\n            left += 1\n            k -= 1\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = max(range(size), key=nums.__getitem__)\n        if max_index != size - 1:\n            flip(nums, max_index)\n            flip(nums, size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int):\n        start = 0\n        while start < k:\n            sublist[start], sublist[k] = (sublist[k], sublist[start])\n            start, k = (start + 1, k - 1)\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = 0\n        for i in range(1, size):\n            if nums[i] > nums[max_index]:\n                max_index = i\n        if max_index != size - 1:\n            flip(nums, max_index)\n            flip(nums, size - 1)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist: List[int], k: int) -> None:\n        sublist[:k] = reversed(sublist[:k])\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_idx = max(range(size), key=nums.__getitem__)\n        if max_idx != size - 1:\n            flip(nums, max_idx + 1)\n            flip(nums, size)\n    return nums", "from typing import List\n\ndef flip(nums: List[int], k: int) -> None:\n    nums[:k] = reversed(nums[:k])\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    for current_size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:current_size]))\n        if max_index + 1 != current_size:\n            if max_index != 0:\n                flip(nums, max_index + 1)\n            flip(nums, current_size)\n    return nums", "from typing import List\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n\n    def flip(sublist, k):\n        sublist[:k] = reversed(sublist[:k])\n    n = len(nums)\n    for size in range(n, 1, -1):\n        max_index = max(range(size), key=nums.__getitem__)\n        if max_index != size - 1:\n            flip(nums, max_index + 1)\n            flip(nums, size)\n    return nums", "from typing import List\n\ndef flip(nums: List[int], end: int) -> None:\n    start = 0\n    while start < end:\n        nums[start], nums[end] = (nums[end], nums[start])\n        start += 1\n        end -= 1\n\ndef pancake_sort(nums: List[int]) -> List[int]:\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for size in range(n, 1, -1):\n        max_index = nums.index(max(nums[:size]))\n        if max_index != size - 1:\n            flip(nums, max_index)\n            flip(nums, size - 1)\n    return nums"], "outputs": "[[[15, 25, 38, 69, 79]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[10]], [[]], [[3, 3, 3, 3, 3]], [[1, 2, 5]], [[-50, 0, 25, 100]], [[3, 5, 6, 7, 8]], [[-10, -5, -3, -1]], [[2]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[15, 79, 25, 38, 69]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[10]], [[]], [[3, 3, 3, 3, 3]], [[5, 1, 2]], [[100, -50, 0, 25]], [[5, 3, 8, 6, 7]], [[-1, -10, -5, -3]], [[2]]]", "input_output_examples": "[[[[15, 79, 25, 38, 69]]], [[[15, 25, 38, 69, 79]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/142", "original_requirement": "from typing import List\n\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n\"\"\"\nWrite a function to count number items that are identical in the same position of three given lists.\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\"\"\"", "entry_point": "count_samepair", "cluster_list": [{"programs_str": ["from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for x, y, z in zip(list1, list2, list3) if x == y == z))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for x, y, z in zip(list1, list2, list3) if x == y == z))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for x, y, z in zip(list1, list2, list3) if x == y == z))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for x, y, z in zip(list1, list2, list3) if x == y == z))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for i in range(min(len(list1), len(list2), len(list3))):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for x, y, z in zip(list1, list2, list3) if x == y == z))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for a, b, c in zip(list1, list2, list3) if a == b == c))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    return sum((1 for x, y, z in zip(list1, list2, list3) if x == y == z))", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count", "from typing import List\n\ndef count_samepair(list1: List[int], list2: List[int], list3: List[int]) -> int:\n    count = 0\n    for a, b, c in zip(list1, list2, list3):\n        if a == b == c:\n            count += 1\n    return count"], "outputs": "[[5], [3], [3], [1], [2], [1], [0], [4], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5], [1, 3, 3, 4, 6], [1, 4, 3, 4, 7]], [[1, 2, 3], [1, 2, 3], [1, 2, 3]], [[1, 2, 3], [1, 0, 3], [1, 2, 0]], [[1, 2], [1, 2], [1, 2]], [[1], [1], [1]], [[], [], []], [[1, 2, 3, 4, 5, 6], [1, 2, 3, 0, 5, 6], [1, 0, 3, 4, 5, 6]], [[1, 2, 3, 4], [4, 3, 2, 1], [1, 2, 3, 4]], [[1, 2, 3, 4], [], [1, 2, 3, 4]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9]]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.6, "original_avg_pass_rate": 0.8300884955752214, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/145", "original_requirement": "from typing import List\n\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n    Write a Python function to find the maximum absolute difference between any two elements in a given array.\n    \n    Preconditions:\n    - The input array `arr` must be a non-empty list of integers.\n    - The function will raise a `ValueError` if the input array is empty.\n    \n    Input Type:\n    - The input must be a list of integers (`List[int]`). Other iterable types, such as tuples, are not valid inputs.\n    \n    Expected Behavior:\n    - The function computes the maximum absolute difference by subtracting the smallest element in the array from the largest element.\n    - If the input array contains fewer than two elements, the function will still compute the difference between the single element and itself, resulting in `0`.\n    \n    Example:\n    assert max_Abs_Diff([2, 1, 5, 3]) == 4\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the maximum difference between any two elements in a given array.\nassert max_Abs_Diff((2,1,5,3)) == 4\n\"\"\"", "entry_point": "max_Abs_Diff", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    min_element = min(arr)\n    max_element = max(arr)\n    return max_element - min_element", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    return max(arr) - min(arr)"], "outputs": "[[4], [30], [0], ['ValueError'], [0], [200], [3], [5], [8000], [999]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    min_element = min(arr)\n    max_element = max(arr)\n    return max_element - min_element", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_element = max(arr)\n    min_element = min(arr)\n    return max_element - min_element", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_value = max(arr)\n    min_value = min(arr)\n    return max_value - min_value"], "outputs": "[[4], [30], [0], [0], [0], [200], [3], [5], [8000], [999]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[[2, 1, 5, 3]], [[10, 20, 30, 40]], [[1]], [[]], [[0, 0, 0, 0]], [[100, -100]], [[-1, -2, -3, -4]], [[5, 5, 5, 10]], [[1000, 2000, 3000, -5000]], [[1, 10, 100, 1000]]]", "input_output_examples": "[[[[2, 1, 5, 3]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    \"\"\"\n    Write a Python function to find the maximum absolute difference between any two elements in a given array.\n    \n    Preconditions:\n    - The input array `arr` must be a non-empty list of integers.\n    - The function will raise a `ValueError` if the input array is empty.\n    \n    Input Type:\n    - The input must be a list of integers (`List[int]`). Other iterable types, such as tuples, are not valid inputs.\n    \n    Expected Behavior:\n    - The function computes the maximum absolute difference by subtracting the smallest element in the array from the largest element.\n    - If the input array contains fewer than two elements, the function will still compute the difference between the single element and itself, resulting in `0`.\n    \n    Example:\n    assert max_Abs_Diff([2, 1, 5, 3]) == 4\n    \"\"\"\n```", "entry_point": "max_Abs_Diff", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('The input array must not be empty.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must be non-empty.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must not be empty')\n    max_val = max(arr)\n    min_val = min(arr)\n    return abs(max_val - min_val)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must be a non-empty list of integers.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must not be empty.')\n    max_value = max(arr)\n    min_value = min(arr)\n    return abs(max_value - min_value)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must not be empty.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('The input array must not be empty.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must be non-empty')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must not be empty.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must not be empty.')\n    max_element = max(arr)\n    min_element = min(arr)\n    return abs(max_element - min_element)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must not be empty.')\n    max_elem = max(arr)\n    min_elem = min(arr)\n    return abs(max_elem - min_elem)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must not be empty')\n    return abs(max(arr) - min(arr))", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must be non-empty.')\n    max_val = max(arr)\n    min_val = min(arr)\n    return abs(max_val - min_val)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must be non-empty.')\n    max_val = max(arr)\n    min_val = min(arr)\n    return abs(max_val - min_val)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must be non-empty.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('The input array must not be empty.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array cannot be empty.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must be non-empty.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must not be empty.')\n    return max(arr) - min(arr)", "from typing import List\n\ndef max_Abs_Diff(arr: List[int]) -> int:\n    if not arr:\n        raise ValueError('Input array must not be empty.')\n    return abs(max(arr) - min(arr))"], "outputs": "[[4], [30], [0], ['ValueError'], [0], [200], [3], [5], [8000], [999]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 1, 5, 3]], [[10, 20, 30, 40]], [[1]], [[]], [[0, 0, 0, 0]], [[100, -100]], [[-1, -2, -3, -4]], [[5, 5, 5, 10]], [[1000, 2000, 3000, -5000]], [[1, 10, 100, 1000]]]", "input_output_examples": "[[[[2, 1, 5, 3]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/160", "original_requirement": "from typing import Tuple\nfrom typing import Union\n\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"", "repaired_requirement": "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    \"\"\"\n    Write a function that returns a tuple of non-negative integers (x, y) that satisfy the equation ax + by = n, \n    or return None if no such solution exists. The function should find solutions by iterating over possible values \n    of x starting from 0 up to n // a (inclusive) and checking if a corresponding non-negative y exists. If multiple \n    solutions exist, return the lexicographically smallest solution (minimum x, break ties with y).\n\n    Constraints:\n    - x and y must be non-negative integers.\n    - If no solution exists, return None.\n    - The solution must satisfy the equation ax + by = n.\n    - If either a = 0 or b = 0, the function must immediately raise a ZeroDivisionError without attempting to compute solutions.\n    - The solution-finding loop runs only if both a and b are non-zero.\n\n    Example:\n    assert find_solution(2, 3, 7) == (2, 1)\n    \"\"\"", "original_clusters": {"requirement": "from typing import Tuple\nfrom typing import Union\n\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\"\"\"\nWrite a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\nassert find_solution(2, 3, 7) == (2, 1)\n\"\"\"", "entry_point": "find_solution", "cluster_list": [{"programs_str": ["from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def extended_gcd(aa, bb):\n        if bb == 0:\n            return (aa, 1, 0)\n        g, x1, y1 = extended_gcd(bb, aa % bb)\n        x = y1\n        y = x1 - aa // bb * y1\n        return (g, x, y)\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return (x, y)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd(a, b):\n        while b:\n            a, b = (b, a % b)\n        return a\n    g = gcd(a, b)\n    if n % g != 0:\n        return None\n\n    def extended_gcd(a, b):\n        if b == 0:\n            return (1, 0)\n        else:\n            x1, y1 = extended_gcd(b, a % b)\n            x = y1\n            y = x1 - a // b * y1\n            return (x, y)\n    x0, y0 = extended_gcd(a, b)\n    x0 *= n // g\n    y0 *= n // g\n    return (x0, y0)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd(x, y):\n        while y != 0:\n            x, y = (y, x % y)\n        return x\n    if n % gcd(a, b) != 0:\n        return None\n\n    def extended_gcd(x, y):\n        if y == 0:\n            return (1, 0)\n        else:\n            g, h = extended_gcd(y, x % y)\n            return (h, g - x // y * h)\n    x, y = extended_gcd(a, b)\n    x *= n // gcd(a, b)\n    y *= n // gcd(a, b)\n    return (x, y)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def extended_gcd(aa, bb):\n        if bb == 0:\n            return (aa, 1, 0)\n        gcd, x1, y1 = extended_gcd(bb, aa % bb)\n        x = y1\n        y = x1 - aa // bb * y1\n        return (gcd, x, y)\n    gcd, x0, y0 = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    factor = n // gcd\n    return (x0 * factor, y0 * factor)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def extended_gcd(aa, bb):\n        if bb == 0:\n            return (aa, 1, 0)\n        else:\n            g, x, y = extended_gcd(bb, aa % bb)\n            return (g, y, x - aa // bb * y)\n    g, x, y = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    x0 = x * (n // g)\n    y0 = y * (n // g)\n    return (x0, y0)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def extended_gcd(aa, bb):\n        if bb == 0:\n            return (aa, 1, 0)\n        g, x1, y1 = extended_gcd(bb, aa % bb)\n        x = y1\n        y = x1 - aa // bb * y1\n        return (g, x, y)\n    g, x0, y0 = extended_gcd(a, b)\n    if n % g != 0:\n        return None\n    x0 *= n // g\n    y0 *= n // g\n    return (x0, y0)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def extended_gcd(aa, bb):\n        if bb == 0:\n            return (aa, 1, 0)\n        g, x1, y1 = extended_gcd(bb, aa % bb)\n        x = y1\n        y = x1 - aa // bb * y1\n        return (g, x, y)\n    gcd, x0, y0 = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x0 *= n // gcd\n    y0 *= n // gcd\n    return (x0, y0)"], "outputs": "[[(-7, 7)], [(10, 0)], [(0, 3)], [(3, 0)], [(-9, 9)], [(-1, 1)], [(0, 0)], [(-30, -45)], [(6, 6)], [(0, 0)]]", "probability": 0.35, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[2, 3, 7], [(-7, 7)], [(2, 1)]]]"}, {"programs_str": ["from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd(x, y):\n        while y != 0:\n            x, y = (y, x % y)\n        return x\n\n    def extended_gcd(x, y):\n        if x == 0:\n            return (y, 0, 1)\n        g, s, t = extended_gcd(y % x, x)\n        return (g, t - y // x * s, s)\n    gcd_ab = gcd(a, b)\n    if n % gcd_ab != 0:\n        return None\n    scale_factor = n // gcd_ab\n    _, x, y = extended_gcd(a, b)\n    return (x * scale_factor, y * scale_factor)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd(x, y):\n        while y:\n            x, y = (y, x % y)\n        return x\n\n    def extended_gcd(x, y):\n        if x == 0:\n            return (y, 0, 1)\n        gcd, x1, y1 = extended_gcd(y % x, x)\n        x = y1 - y // x * x1\n        y = x1\n        return (gcd, x, y)\n    g = gcd(a, b)\n    if n % g != 0:\n        return None\n    a_div, b_div, n_div = (a // g, b // g, n // g)\n    gcd_val, x, y = extended_gcd(a_div, b_div)\n    return (x * n_div, y * n_div)"], "outputs": "[[(-7, 7)], [(10, 0)], [(0, 3)], [(3, 0)], [(-9, 9)], [(-1, 1)], [(0, 0)], [(30, 45)], [(6, 0)], [(0, 0)]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[2, 3, 7], [(-7, 7)], [(2, 1)]]]"}, {"programs_str": ["from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd_extended(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - b // a * x1\n        y = x1\n        return (gcd, x, y)\n    gcd, x, y = gcd_extended(a, b)\n    if n % gcd != 0:\n        return None\n    x = x * (n // gcd)\n    y = y * (n // gcd)\n    return (x, y)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd_extended(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - b // a * x1\n        y = x1\n        return (gcd, x, y)\n    gcd, x, y = gcd_extended(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return (x, y)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd_extended(a: int, b: int):\n        if a == 0:\n            return (b, 0, 1)\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - b // a * x1\n        y = x1\n        return (gcd, x, y)\n    gcd, x, y = gcd_extended(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return (x, y)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd_extended(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - b // a * x1\n        y = x1\n        return (gcd, x, y)\n    gcd, x, y = gcd_extended(a, b)\n    if n % gcd != 0:\n        return None\n    x = x * (n // gcd)\n    y = y * (n // gcd)\n    return (x, y)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd_extended(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - b // a * x1\n        y = x1\n        return (gcd, x, y)\n    gcd, x, y = gcd_extended(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return (x, y)", "from typing import Tuple, Union\n\ndef extended_gcd(a: int, b: int) -> Tuple[int, int, int]:\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        gcd, x1, y1 = extended_gcd(b % a, a)\n        x = y1 - b // a * x1\n        y = x1\n        return (gcd, x, y)\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    gcd, x0, y0 = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x = x0 * (n // gcd)\n    y = y0 * (n // gcd)\n    return (x, y)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def extended_gcd(aa: int, bb: int):\n        if aa == 0:\n            return (bb, 0, 1)\n        else:\n            g, x, y = extended_gcd(bb % aa, aa)\n            return (g, y - bb // aa * x, x)\n    gcd, x, y = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return (x, y)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd_extended(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - b // a * x1\n        y = x1\n        return (gcd, x, y)\n    gcd, x0, y0 = gcd_extended(a, b)\n    if n % gcd != 0:\n        return None\n    x0 *= n // gcd\n    y0 *= n // gcd\n    return (x0, y0)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def extended_gcd(aa: int, bb: int) -> Tuple[int, int, int]:\n        if aa == 0:\n            return (bb, 0, 1)\n        g, x1, y1 = extended_gcd(bb % aa, aa)\n        x = y1 - bb // aa * x1\n        y = x1\n        return (g, x, y)\n    gcd, x0, y0 = extended_gcd(a, b)\n    if n % gcd != 0:\n        return None\n    scale = n // gcd\n    return (x0 * scale, y0 * scale)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd_extended(a, b):\n        if a == 0:\n            return (b, 0, 1)\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - b // a * x1\n        y = x1\n        return (gcd, x, y)\n    gcd, x0, y0 = gcd_extended(a, b)\n    if n % gcd != 0:\n        return None\n    x0 *= n // gcd\n    y0 *= n // gcd\n    return (x0, y0)", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n\n    def gcd_extended(a: int, b: int):\n        if a == 0:\n            return (b, 0, 1)\n        gcd, x1, y1 = gcd_extended(b % a, a)\n        x = y1 - b // a * x1\n        y = x1\n        return (gcd, x, y)\n    gcd, x, y = gcd_extended(a, b)\n    if n % gcd != 0:\n        return None\n    x *= n // gcd\n    y *= n // gcd\n    return (x, y)"], "outputs": "[[(-7, 7)], [(10, 0)], [(0, 3)], [(3, 0)], [(-9, 9)], [(-1, 1)], [(0, 0)], [(-30, -45)], [(-6, 0)], [(0, 0)]]", "probability": 0.55, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[2, 3, 7], [(-7, 7)], [(2, 1)]]]"}], "entropy": 0.8433426540429225, "llm_generated_inputs": "[[2, 3, 7], [1, 5, 10], [0, 3, 9], [3, 0, 9], [4, 6, 18], [2, 3, 1], [2, 2, 0], [8, -5, -15], [-3, 6, 18], [10, 10, 0]]", "input_output_examples": "[[[2, 3, 7]], [[(2, 1)]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    \"\"\"\n    Write a function that returns a tuple of non-negative integers (x, y) that satisfy the equation ax + by = n, \n    or return None if no such solution exists. The function should find solutions by iterating over possible values \n    of x starting from 0 up to n // a (inclusive) and checking if a corresponding non-negative y exists. If multiple \n    solutions exist, return the lexicographically smallest solution (minimum x, break ties with y).\n\n    Constraints:\n    - x and y must be non-negative integers.\n    - If no solution exists, return None.\n    - The solution must satisfy the equation ax + by = n.\n    - If either a = 0 or b = 0, the function must immediately raise a ZeroDivisionError without attempting to compute solutions.\n    - The solution-finding loop runs only if both a and b are non-zero.\n\n    Example:\n    assert find_solution(2, 3, 7) == (2, 1)\n    \"\"\"", "entry_point": "find_solution", "cluster_list": [{"programs_str": ["from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('a or b cannot be zero.')\n    for x in range(n // a + 1):\n        remaining = n - a * x\n        if remaining % b == 0:\n            y = remaining // b\n            if y >= 0:\n                return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError(\"Neither 'a' nor 'b' can be zero.\")\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            if y >= 0:\n                return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError(\"Neither 'a' nor 'b' can be zero.\")\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder >= 0 and remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('`a` and `b` cannot be zero.')\n    for x in range(0, n // a + 1):\n        remaining = n - a * x\n        if remaining % b == 0:\n            y = remaining // b\n            if y >= 0:\n                return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('a or b cannot be zero')\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            if y >= 0:\n                return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('a and b cannot be zero.')\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError(\"Neither 'a' nor 'b' can be zero.\")\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            if y >= 0:\n                return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError(\"Neither 'a' nor 'b' can be zero.\")\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if y >= 0:\n                return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError(\"Neither 'a' nor 'b' can be zero.\")\n    for x in range(n // a + 1):\n        y = (n - a * x) / b\n        if y.is_integer() and y >= 0:\n            return (x, int(y))\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('a or b must not be zero')\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError(\"Neither 'a' nor 'b' can be zero.\")\n    for x in range(n // a + 1):\n        y = (n - a * x) / b\n        if y.is_integer() and y >= 0:\n            return (x, int(y))\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('a or b cannot be zero.')\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            if y >= 0:\n                return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError(\"Either 'a' or 'b' is zero, which is not allowed.\")\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('a or b must not be zero.')\n    for x in range(n // a + 1):\n        y_candidate = (n - a * x) / b\n        if y_candidate.is_integer() and y_candidate >= 0:\n            return (x, int(y_candidate))\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError(\"Neither 'a' nor 'b' can be zero.\")\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder >= 0 and remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('Coefficient a or b cannot be zero.')\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            if y >= 0:\n                return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('a or b cannot be zero')\n    for x in range(n // a + 1):\n        y = (n - a * x) / b\n        if y.is_integer() and y >= 0:\n            return (x, int(y))\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('a or b cannot be zero')\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            if y >= 0:\n                return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError(\"Either 'a' or 'b' is zero.\")\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            if y >= 0:\n                return (x, y)\n    return None", "from typing import Tuple, Union\n\ndef find_solution(a: int, b: int, n: int) -> Union[Tuple[int, int], None]:\n    if a == 0 or b == 0:\n        raise ZeroDivisionError('a or b cannot be zero.')\n    for x in range(n // a + 1):\n        remainder = n - a * x\n        if remainder % b == 0:\n            y = remainder // b\n            return (x, y)\n    return None"], "outputs": "[[(2, 1)], [(0, 2)], ['ZeroDivisionError'], ['ZeroDivisionError'], [(0, 3)], [None], [(0, 0)], [None], [None], [(0, 0)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2, 3, 7], [1, 5, 10], [0, 3, 9], [3, 0, 9], [4, 6, 18], [2, 3, 1], [2, 2, 0], [8, -5, -15], [-3, 6, 18], [10, 10, 0]]", "input_output_examples": "[[[2, 3, 7]], [[(2, 1)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.6, "original_avg_pass_rate": 0.8924528301886792, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/161", "original_requirement": "from typing import List\n\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to remove all elements from a given list present in another list.\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\n\"\"\"", "entry_point": "remove_elements", "cluster_list": [{"programs_str": ["from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [elem for elem in list1 if elem not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [item for item in list1 if item not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]", "from typing import List\n\ndef remove_elements(list1: List[int], list2: List[int]) -> List[int]:\n    return [element for element in list1 if element not in list2]"], "outputs": "[[[1, 3, 5, 7, 9, 10]], [[1, 2, 3, 4, 5]], [[]], [[1, 3, 5]], [[]], [[1, 3, 4]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]], [[1, 2, 3, 4, 5], [10, 12, 14]], [[], [2, 4, 6]], [[1, 3, 5], []], [[], []], [[1, 2, 2, 3, 4], [2]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]]], [[[1, 3, 5, 7, 9, 10]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/162", "original_requirement": "def sum_series(n: int) -> int:\n\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n\nassert sum_series(6) == 12\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def sum_series(n: int) -> int:\n\"\"\"\nWrite a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n\n\nassert sum_series(6) == 12\n\"\"\"", "entry_point": "sum_series", "cluster_list": [{"programs_str": ["def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "from typing import List\n\ndef sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))", "def sum_series(n: int) -> int:\n    return sum((n - 2 * i for i in range(n // 2 + 1)))"], "outputs": "[[12], [16], [0], [1], [2], [2550]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[6], [7], [0], [1], [2], [100]]", "input_output_examples": "[[[6]], [[12]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/165", "original_requirement": "def count_char_position(str1: str) -> int:\n\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_char_position(str1: str) -> int:\n\"\"\"\nWrite a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\nassert count_char_position(\"xbcefg\") == 2\n\"\"\"", "entry_point": "count_char_position", "cluster_list": [{"programs_str": ["from typing import List\n\ndef count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower(), start=1) if ord(char) - ord('a') + 1 == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower(), start=1) if ord(char) - ord('a') + 1 == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if i + 1 == ord(char) - ord('a') + 1))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, c in enumerate(str1.lower(), start=1) if ord(c) - ord('a') + 1 == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for index, char in enumerate(str1.lower(), start=1) if ord(char) - ord('a') + 1 == index))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower(), start=1) if ord(char) - ord('a') + 1 == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1) if char.lower() == chr(ord('a') + i)))", "def count_char_position(str1: str) -> int:\n    return sum((1 for index, char in enumerate(str1.lower(), start=1) if char.isalpha() and ord(char) - 96 == index))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower(), start=1) if char.isalpha() and i == ord(char) - ord('a') + 1))", "def count_char_position(str1: str) -> int:\n    return sum((1 for index, char in enumerate(str1, start=1) if char.lower() == chr(index + 96)))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower(), start=1) if ord(char) - ord('a') + 1 == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, c in enumerate(str1.lower(), start=1) if c.isalpha() and ord(c) - ord('a') + 1 == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for idx, char in enumerate(str1.lower(), start=1) if ord(char) - ord('a') + 1 == idx))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower()) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    str1 = str1.lower()\n    return sum((1 for i, char in enumerate(str1) if ord(char) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, c in enumerate(str1.lower()) if ord(c) - ord('a') == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower(), start=1) if ord(char) - ord('a') + 1 == i))", "def count_char_position(str1: str) -> int:\n    return sum((1 for i, char in enumerate(str1.lower(), start=1) if ord(char) - ord('a') + 1 == i))", "def count_char_position(str1: str) -> int:\n    str1 = str1.lower()\n    return sum((1 for idx, char in enumerate(str1) if ord(char) - ord('a') == idx))", "def count_char_position(str1: str) -> int:\n    str1 = str1.lower()\n    count = 0\n    for i, ch in enumerate(str1, start=1):\n        if ord(ch) - ord('a') + 1 == i:\n            count += 1\n    return count"], "outputs": "[[6], [2], [0], [2], [3], [26], [26], [0], [0], [1], [0], [4], [0], [0], [1], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcdef'], ['xBcEfG'], ['mnopqr'], ['XbCeFg'], ['aBcYz'], ['abcdefghijklmnopqrstuvwxyz'], ['abcdefghijklmnopqrstuvwxyZ'], [' '], ['123456'], ['a1b2c3'], ['Zyxwvut'], ['ABCDabcd'], ['zzzzzzz'], [''], ['A'], ['a']]", "input_output_examples": "[[['xbcefg']], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/166", "original_requirement": "from typing import List\n\n\ndef find_even_pair(A: List[int]) -> int:\n\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef find_even_pair(A: List[int]) -> int:\n\"\"\"\nWrite a function that counts the number of pairs of integers in a list that xor to an even number.\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\n\"\"\"", "entry_point": "find_even_pair", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    n = len(A)\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count", "from typing import List\n\ndef find_even_pair(A: List[int]) -> int:\n    count = 0\n    n = len(A)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (A[i] ^ A[j]) % 2 == 0:\n                count += 1\n    return count"], "outputs": "[[4], [6], [6], [0], [0], [1], [1], [1], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 4, 7, 2, 1]], [[1, 3, 5, 7]], [[2, 4, 6, 8]], [[0]], [[5]], [[5, 7]], [[5, 7, 2]], [[0, 2]], [[]]]", "input_output_examples": "[[[[5, 4, 7, 2, 1]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9027522935779817, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/167", "original_requirement": "def next_power_of_2(n: int) -> int:\n\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def next_power_of_2(n: int) -> int:\n\"\"\"\nWrite a python function to find the smallest power of 2 greater than or equal to n.\nassert next_power_of_2(0) == 1\n\"\"\"", "entry_point": "next_power_of_2", "cluster_list": [{"programs_str": ["import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "from math import ceil, log2\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** ceil(log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "from math import ceil, log2\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** ceil(log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "from math import ceil, log2\n\ndef next_power_of_2(n: int) -> int:\n    return 1 if n == 0 else 2 ** ceil(log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "def next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    power = 1\n    while power < n:\n        power *= 2\n    return power", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n <= 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))", "import math\n\ndef next_power_of_2(n: int) -> int:\n    if n == 0:\n        return 1\n    return 2 ** math.ceil(math.log2(n))"], "outputs": "[[1], [1], [2], [4], [4], [16], [16], [32], [32], [32], [64], [64], [128]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [4], [15], [16], [17], [31], [32], [63], [64], [100]]", "input_output_examples": "[[[0]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/168", "original_requirement": "from typing import List\n\n\ndef frequency(a: List[int], x: int) -> int:\n\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef frequency(a: List[int], x: int) -> int:\n\"\"\"\nWrite a function to count the number of occurrences of a number in a given list.\nassert frequency([1,2,3], 4) == 0\n\"\"\"", "entry_point": "frequency", "cluster_list": [{"programs_str": ["from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)", "from typing import List\n\ndef frequency(a: List[int], x: int) -> int:\n    return a.count(x)"], "outputs": "[[1], [4], [0], [0], [3], [0], [3], [5], [1], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5], 3], [[1, 1, 1, 1], 1], [[1, 2, 3, 4], 6], [[], 1], [[0, 0, 0], 0], [[5, 5, 5, 5], 10], [[7, 7, 7, 8, 8, 8], 8], [[9, 9, 9, 9, 9], 9], [[10, 20, 30], 30], [[100, 200, 300], 0]]", "input_output_examples": "[[[[1, 2, 3], 4]], [[0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/170", "original_requirement": "from typing import List\n\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n\"\"\"\nWrite a function to find the sum of numbers in a list within a range specified by two indices.\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29\n\"\"\"", "entry_point": "sum_range_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])", "from typing import List\n\ndef sum_range_list(list1: List[int], m: int, n: int) -> int:\n    return sum(list1[m:n + 1])"], "outputs": "[[25], [29], [12], [150], [35], [300], [4], [1], [5], [20], [175], [6], [7], [100], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 5], [[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10], [[2, 1, 5, 6], 1, 3], [[10, 20, 30, 40, 50], 0, 4], [[15, 25, 35, 45, 55], 2, 2], [[100, 200, 300], 2, 2], [[1, 2, 3, 4], 3, 3], [[1, 2, 3, 4, 5], 0, 0], [[1, 2, 3, 4, 5], 4, 4], [[10, 20, 30], 1, 1], [[5, 10, 15, 20, 25, 30, 35, 40, 45, 50], 1, 7], [[1, 1, 1, 1, 1, 1], 0, 5], [[2, 5, 8], 0, 1], [[10, 20, 30, 40], 0, 3], [[1], 0, 0]]", "input_output_examples": "[[[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10]], [[29]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/171", "original_requirement": "def perimeter_pentagon(a: int) -> int:\n\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n\nassert perimeter_pentagon(5) == 25\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def perimeter_pentagon(a: int) -> int:\n\"\"\"\nWrite a function to find the perimeter of a regular pentagon from the length of its sides.\n\n\nassert perimeter_pentagon(5) == 25\n\"\"\"", "entry_point": "perimeter_pentagon", "cluster_list": [{"programs_str": ["def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a", "def perimeter_pentagon(a: int) -> int:\n    return 5 * a"], "outputs": "[[25], [0], [-15], [50], [5], [617280], [4999995]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5], [0], [-3], [10], [1], [123456], [999999]]", "input_output_examples": "[[[5]], [[25]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/172", "original_requirement": "def count_occurance(s: str) -> int:\n\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_occurance(s: str) -> int:\n\"\"\"\nWrite a function to count the number of occurence of the string 'std' in a given string.\nassert count_occurance(\"letstdlenstdporstd\") == 3\n\"\"\"", "entry_point": "count_occurance", "cluster_list": [{"programs_str": ["def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')", "def count_occurance(s: str) -> int:\n    return s.count('std')"], "outputs": "[[3], [3], [0], [0], [1], [2], [1], [1], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['letstdlenstdporstd'], ['stdstdstd'], ['nostandard'], [''], ['std'], ['testingstdstringstdtest'], ['abcdefghistd'], ['stdabcdefghi'], ['abcdefghistdstdabcdefstd']]", "input_output_examples": "[[['letstdlenstdporstd']], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/222", "original_requirement": "from typing import Tuple\n\n\ndef check_type(test_tuple: Tuple) -> bool:\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"", "repaired_requirement": "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    \"\"\"\n    Write a function to check if all the elements in a tuple have the exact same base data type. \n    The data type is determined using the `type()` function, which does not account for subclass relationships.\n    \n    The function outputs `True` if all elements in the tuple share the same base type, and `False` otherwise.\n    \n    Special cases and constraints:\n    1. Subclass relationships (e.g., `bool` is a subclass of `int`) are not considered; `bool` and `int` are treated as distinct.\n    2. The function handles empty tuples (`()`) explicitly, returning `True` as they contain no elements to compare.\n    3. Elements can be of any type supported by Python, including custom objects.\n    4. Mixed-type tuples (e.g., `(5, \"string\", 3.0)`) are valid input and should appropriately return `False`.\n    5. The result `False` signifies the presence of a type mismatch in elements or invalid input structure.\n\n    Example:\n    assert check_type((5, 6, 7, 3, 5, 6)) == True\n    \"\"\"", "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef check_type(test_tuple: Tuple) -> bool:\n\"\"\"\nWrite a function to check if all the elements in tuple have same data type or not.\nassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\"\"\"", "entry_point": "check_type", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set((type(element) for element in test_tuple))) == 1", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set((type(item) for item in test_tuple))) == 1", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set(map(type, test_tuple))) == 1", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set(map(type, test_tuple))) == 1", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set((type(elem) for elem in test_tuple))) == 1", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set((type(item) for item in test_tuple))) == 1", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set((type(x) for x in test_tuple))) == 1", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set((type(element) for element in test_tuple))) == 1", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set((type(element) for element in test_tuple))) == 1", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set((type(item) for item in test_tuple))) == 1", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return len(set((type(item) for item in test_tuple))) == 1"], "outputs": "[[True], [False], [True], [True], [True], [True], [False], [True], [False], [True], [True], [False], [True]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(test_tuple[0], type(item)) for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((type(element) == type(test_tuple[0]) for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(x, type(test_tuple[0])) for x in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(test_tuple[0], type(item)) for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(test_tuple[0], type(item)) for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(test_tuple[0], type(item)) for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(test_tuple[0], type(element)) for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    return all((isinstance(test_tuple[0], type(item)) for item in test_tuple))"], "outputs": "[[True], [False], [True], [True], [True], [True], [True], [True], [False], [True], [True], [False], [True]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    first_type = type(test_tuple[0])\n    return all((type(elem) == first_type for elem in test_tuple))"], "outputs": "[[True], [False], [True], [True], [True], [True], ['IndexError'], [True], [False], [True], [True], [False], [True]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7692552373208171, "llm_generated_inputs": "[[(5, 6, 7, 3, 5, 6)], [(5, '6', 7, 3.0, 5, 6)], [(1, 2, 3, 4, 5)], [('a', 'b', 'c', 'd')], [(3.14, 2.71, 0.0, -1.68)], [(True, False, True, False)], [()], [(5,)], [(5, 5.5, 5.0)], [((1,), (2,), (3,))], [([1, 2], [3, 4], [5, 6])], [(5, None, 'Test')], [(None, None, None)]]", "input_output_examples": "[[[(5, 6, 7, 3, 5, 6)]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    \"\"\"\n    Write a function to check if all the elements in a tuple have the exact same base data type. \n    The data type is determined using the `type()` function, which does not account for subclass relationships.\n    \n    The function outputs `True` if all elements in the tuple share the same base type, and `False` otherwise.\n    \n    Special cases and constraints:\n    1. Subclass relationships (e.g., `bool` is a subclass of `int`) are not considered; `bool` and `int` are treated as distinct.\n    2. The function handles empty tuples (`()`) explicitly, returning `True` as they contain no elements to compare.\n    3. Elements can be of any type supported by Python, including custom objects.\n    4. Mixed-type tuples (e.g., `(5, \"string\", 3.0)`) are valid input and should appropriately return `False`.\n    5. The result `False` signifies the presence of a type mismatch in elements or invalid input structure.\n\n    Example:\n    assert check_type((5, 6, 7, 3, 5, 6)) == True\n    \"\"\"", "entry_point": "check_type", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    base_type = type(test_tuple[0])\n    return all((type(item) == base_type for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(item) == first_type for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(item) == first_type for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(item) == first_type for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(item) == first_type for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(item) == first_type for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(elem) == first_type for elem in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if len(test_tuple) == 0:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(item) == first_type for item in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    base_type = type(test_tuple[0])\n    return all((type(element) == base_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))", "from typing import Tuple\n\ndef check_type(test_tuple: Tuple) -> bool:\n    if not test_tuple:\n        return True\n    first_type = type(test_tuple[0])\n    return all((type(element) == first_type for element in test_tuple))"], "outputs": "[[True], [False], [True], [True], [True], [True], [True], [True], [False], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(5, 6, 7, 3, 5, 6)], [(5, '6', 7, 3.0, 5, 6)], [(1, 2, 3, 4, 5)], [('a', 'b', 'c', 'd')], [(3.14, 2.71, 0.0, -1.68)], [(True, False, True, False)], [()], [(5,)], [(5, 5.5, 5.0)], [((1,), (2,), (3,))], [([1, 2], [3, 4], [5, 6])], [(5, None, 'Test')], [(None, None, None)]]", "input_output_examples": "[[[(5, 6, 7, 3, 5, 6)]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/223", "original_requirement": "from typing import List\n\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element (x), \n    and returns whether the element is the majority element in the given sorted array. \n    The majority element is defined as the element that occurs strictly more than n/2 times.\n\n    Requirements:\n    1. The input array is guaranteed to be sorted in non-decreasing order.\n    2. The function must determine the count of the element x in the array and check if it exceeds n/2.\n    3. The sorted nature of the array is incidental and does not need to be leveraged for efficiency.\n    4. If the element x is not present in the array, the function should return False.\n    5. The function should return False if the count of x is less than or equal to n/2.\n\n    Examples:\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 2, 3, 4, 5], 5, 3) == False\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n\"\"\"\nWrite a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\"\"\"", "entry_point": "is_majority", "cluster_list": [{"programs_str": ["from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    majority_index = n // 2\n    if majority_index < n and arr[majority_index] == x:\n        count = arr.count(x)\n        return count > n // 2\n    return False", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n\n    def binary_search_first(arr, n, x):\n        low = 0\n        high = n - 1\n        while low <= high:\n            mid = (low + high) // 2\n            if arr[mid] < x:\n                low = mid + 1\n            elif arr[mid] > x or (mid > 0 and arr[mid - 1] == x):\n                high = mid - 1\n            else:\n                return mid\n        return -1\n    index = binary_search_first(arr, n, x)\n    if index == -1:\n        return False\n    return index + n // 2 < n and arr[index + n // 2] == x", "from typing import List\nfrom collections import Counter\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n // 2", "from typing import List\nfrom bisect import bisect_left, bisect_right\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    left_index = bisect_left(arr, x)\n    right_index = bisect_right(arr, x)\n    count = right_index - left_index\n    return count > n // 2", "from typing import List\nimport bisect\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    first_occurrence = bisect.bisect_left(arr, x)\n    if first_occurrence == n or arr[first_occurrence] != x:\n        return False\n    last_occurrence = bisect.bisect_right(arr, x)\n    return last_occurrence - first_occurrence > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    left, right = (0, n - 1)\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            if mid == 0 or arr[mid - 1] != x:\n                first = mid\n                break\n            right = mid - 1\n    else:\n        return False\n    if first + n // 2 < n and arr[first + n // 2] == x:\n        return True\n    return False", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    left = 0\n    right = n - 1\n    first_occurrence = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if first_occurrence == -1:\n        return False\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return True\n    return False", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n\n    def binary_search_first_occurrence(arr, x, low, high):\n        while low <= high:\n            mid = (low + high) // 2\n            if (mid == 0 or arr[mid - 1] < x) and arr[mid] == x:\n                return mid\n            elif arr[mid] < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        return -1\n    first_index = binary_search_first_occurrence(arr, x, 0, n - 1)\n    if first_index == -1:\n        return False\n    if first_index + n // 2 < n and arr[first_index + n // 2] == x:\n        return True\n    return False", "from typing import List\nfrom collections import Counter\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = Counter(arr)\n    return count[x] > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    majority_count = n // 2\n    first = first_occurrence(arr, n, x)\n    if first == -1:\n        return False\n    if first + majority_count < n and arr[first + majority_count] == x:\n        return True\n    return False\n\ndef first_occurrence(arr: List[int], n: int, x: int) -> int:\n    low, high = (0, n - 1)\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            if mid == 0 or arr[mid - 1] != x:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n\n    def first_occurrence(arr, low, high, x):\n        if high >= low:\n            mid = (high + low) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return first_occurrence(arr, mid + 1, high, x)\n            else:\n                return first_occurrence(arr, low, mid - 1, x)\n        return -1\n    first_index = first_occurrence(arr, 0, n - 1, x)\n    if first_index == -1:\n        return False\n    if first_index + n // 2 < n and arr[first_index + n // 2] == x:\n        return True\n    return False", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for num in arr:\n        if num == x:\n            count += 1\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    left, right = (0, n - 1)\n    first_occurrence = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if first_occurrence == -1:\n        return False\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return True\n    return False", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    left, right = (0, n - 1)\n    first_occurrence = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if first_occurrence == -1:\n        return False\n    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == x:\n        return True\n    return False", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = 0\n    for i in arr:\n        if i == x:\n            count += 1\n    return count > n / 2", "from typing import List\nfrom bisect import bisect_left, bisect_right\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    first_occurrence = bisect_left(arr, x)\n    if first_occurrence == n or arr[first_occurrence] != x:\n        return False\n    last_occurrence = bisect_right(arr, x)\n    count = last_occurrence - first_occurrence\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n\n    def first_occurrence(arr, low, high, x):\n        if high >= low:\n            mid = (low + high) // 2\n            if (mid == 0 or x > arr[mid - 1]) and arr[mid] == x:\n                return mid\n            elif x > arr[mid]:\n                return first_occurrence(arr, mid + 1, high, x)\n            else:\n                return first_occurrence(arr, low, mid - 1, x)\n        return -1\n    first_index = first_occurrence(arr, 0, n - 1, x)\n    if first_index == -1:\n        return False\n    if first_index + n // 2 < n and arr[first_index + n // 2] == x:\n        return True\n    return False", "from typing import List\nfrom bisect import bisect_left, bisect_right\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    first_occurrence = bisect_left(arr, x)\n    last_occurrence = bisect_right(arr, x) - 1\n    if first_occurrence < n and arr[first_occurrence] == x:\n        count = last_occurrence - first_occurrence + 1\n        return count > n // 2\n    return False"], "outputs": "[[True], [True], [True], [True], [False], [True], [True], [True], [False], [True], [False], [False]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    left = 0\n    right = n - 1\n    first_occurrence = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if first_occurrence == -1:\n        return False\n    count = n - first_occurrence\n    return count > n // 2"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [True], [False], [True], [False], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[1, 2, 3, 3, 3, 3, 10], 7, 3], [[1, 1, 1, 1, 2, 3, 4], 7, 1], [[5, 5, 5, 6, 6], 5, 5], [[7, 7, 7, 7, 7, 7, 7], 7, 7], [[1, 2, 3, 4, 5], 5, 3], [[1, 1, 1, 2, 2, 2, 2], 7, 2], [[1], 1, 1], [[1, 1], 2, 1], [[], 0, 3], [[10, 10, 10, 10, 10], 5, 10], [[1, 2, 2, 3, 3, 3], 6, 4], [[1, 1, 1, 1, 1, 1], 6, 2]]", "input_output_examples": "[[[[1, 2, 3, 3, 3, 3, 10], 7, 3]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    \"\"\"\n    Write a function that takes in a sorted array, its length (n), and an element (x), \n    and returns whether the element is the majority element in the given sorted array. \n    The majority element is defined as the element that occurs strictly more than n/2 times.\n\n    Requirements:\n    1. The input array is guaranteed to be sorted in non-decreasing order.\n    2. The function must determine the count of the element x in the array and check if it exceeds n/2.\n    3. The sorted nature of the array is incidental and does not need to be leveraged for efficiency.\n    4. If the element x is not present in the array, the function should return False.\n    5. The function should return False if the count of x is less than or equal to n/2.\n\n    Examples:\n    assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n    assert is_majority([1, 2, 3, 4, 5], 5, 3) == False\n    \"\"\"\n```", "entry_point": "is_majority", "cluster_list": [{"programs_str": ["from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    if arr.count(x) > n // 2:\n        return True\n    return False", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    if len(arr) != n:\n        return False\n    count = arr.count(x)\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    return arr.count(x) > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    return arr.count(x) > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    return arr.count(x) > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    return arr.count(x) > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count_x = arr.count(x)\n    return count_x > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    if n == 0:\n        return False\n    count_x = arr.count(x)\n    return count_x > n / 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    if n == 0:\n        return False\n    count = arr.count(x)\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    return arr.count(x) > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    if arr.count(x) > n // 2:\n        return True\n    return False", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    if arr.count(x) > n // 2:\n        return True\n    return False", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n // 2", "from typing import List\n\ndef is_majority(arr: List[int], n: int, x: int) -> bool:\n    count = arr.count(x)\n    return count > n // 2"], "outputs": "[[True], [True], [True], [True], [False], [True], [True], [True], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 3, 3, 3, 10], 7, 3], [[1, 1, 1, 1, 2, 3, 4], 7, 1], [[5, 5, 5, 6, 6], 5, 5], [[7, 7, 7, 7, 7, 7, 7], 7, 7], [[1, 2, 3, 4, 5], 5, 3], [[1, 1, 1, 2, 2, 2, 2], 7, 2], [[1], 1, 1], [[1, 1], 2, 1], [[], 0, 3], [[10, 10, 10, 10, 10], 5, 10], [[1, 2, 2, 3, 3, 3], 6, 4], [[1, 1, 1, 1, 1, 1], 6, 2]]", "input_output_examples": "[[[[1, 2, 3, 3, 3, 3, 10], 7, 3]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/224", "original_requirement": "from typing import Set\n\n\ndef count_Set_Bits(n: int) -> int:\n\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Set\n\n\ndef count_Set_Bits(n: int) -> int:\n\"\"\"\nWrite a python function to count the number of set bits (binary digits with value 1) in a given number.\nassert count_Set_Bits(2) == 1\n\"\"\"", "entry_point": "count_Set_Bits", "cluster_list": [{"programs_str": ["def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "from typing import Set\n\ndef count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')", "def count_Set_Bits(n: int) -> int:\n    return bin(n).count('1')"], "outputs": "[[1], [0], [1], [8], [10], [1], [10], [32]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2], [0], [1], [255], [1023], [-1], [99999], [4294967295]]", "input_output_examples": "[[[2]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/226", "original_requirement": "def odd_values_string(str1: str) -> str:\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def odd_values_string(str1: str) -> str:\n\"\"\"\nWrite a python function to remove the characters which have odd index values of a given string.\nassert odd_values_string('abcdef') == 'ace'\n\"\"\"", "entry_point": "odd_values_string", "cluster_list": [{"programs_str": ["def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([char for idx, char in enumerate(str1) if idx % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "from typing import List\n\ndef odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([char for index, char in enumerate(str1) if index % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join((char for index, char in enumerate(str1) if index % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return ''.join((str1[i] for i in range(len(str1)) if i % 2 == 0))", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])", "def odd_values_string(str1: str) -> str:\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])"], "outputs": "[['ace'], ['135'], [''], ['z'], ['hlo'], ['acegikm'], ['abcde'], [' y'], ['AbCdE']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcdef'], ['123456'], [''], ['z'], ['hello'], ['abcdefghijklm'], ['a1b2c3d4e'], [' xy '], ['AAbbCCddEE']]", "input_output_examples": "[[['abcdef']], [['ace']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/227", "original_requirement": "def min_of_three(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def min_of_three(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find minimum of three numbers.\nassert min_of_three(10,20,0)==0\n\"\"\"", "entry_point": "min_of_three", "cluster_list": [{"programs_str": ["def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)"], "outputs": "[[0], [-10], [100], [0], [-5], [0], [-5], [-2147483648], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10, 20, 0], [-5, -10, -1], [100, 200, 300], [0, 0, 0], [-5, -5, -5], [5, 0, 5], [0, 5, -5], [2147483647, -2147483648, 0], [1, 1, 0]]", "input_output_examples": "[[[10, 20, 0]], [[0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/230", "original_requirement": "def replace_blank(str1: str, char: str) -> str:\n\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def replace_blank(str1: str, char: str) -> str:\n\"\"\"\nWrite a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\"\"\"", "entry_point": "replace_blank", "cluster_list": [{"programs_str": ["def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "from typing import str\n\ndef replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "from typing import str\n\ndef replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)", "def replace_blank(str1: str, char: str) -> str:\n    return str1.replace(' ', char)"], "outputs": "[['hello@people'], [''], ['onlyspaces+++'], ['no-spaces-here'], ['-multiple---spaces-'], ['=leading=spaces'], ['trailing%spaces%'], ['@spaces@at@both@ends@'], ['singleblank'], ['a$b$c$d']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['hello people', '@'], ['', '#'], ['onlyspaces   ', '+'], ['no-spaces-here', '*'], [' multiple   spaces ', '-'], [' leading spaces', '='], ['trailing spaces ', '%'], [' spaces at both ends ', '@'], ['singleblank', '^'], ['a b c d', '$']]", "input_output_examples": "[[['hello people', '@']], [['hello@people']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/232", "original_requirement": "from typing import List\n\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])\n\"\"\"", "entry_point": "larg_nnum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]", "from typing import List\n\ndef larg_nnum(list1: List[int], n: int) -> List[int]:\n    return sorted(list1, reverse=True)[:n]"], "outputs": "[[[100, 90]], [[8, 5, 3]], [[30, 30, 20, 20]], [[100]], [[100, 50]], [[]], [[-10, -20]], [[]], [[15, 10, 5]], [[20, 10]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2], [[5, 3, 8, 1, 2], 3], [[10, 10, 20, 20, 30, 30], 4], [[100], 1], [[100, 50, 50], 2], [[], 2], [[-10, -20, -30, -40, -50], 2], [[100, 90, 80, 70, 60], 0], [[5, 10, 15], 10], [[10, 20], 2]]", "input_output_examples": "[[[[10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2]], [[[100, 90]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/233", "original_requirement": "def lateralsuface_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def lateralsuface_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cylinder.\nassert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)\n\"\"\"", "entry_point": "lateralsuface_cylinder", "cluster_list": [{"programs_str": ["import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h", "import math\n\ndef lateralsuface_cylinder(r: float, h: float) -> float:\n    return 2 * math.pi * r * h"], "outputs": "[[314.1592653589793], [0.0], [0.0], [157.07963267948966], [0.0], [120.95131716320704], [31415.926535897932], [628.3185307179587], [380.86005127163014], [59.37610115284709]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10.0, 5.0], [0.0, 5.0], [10.0, 0.0], [5.0, 5.0], [0.0, 0.0], [2.5, 7.7], [100.0, 50.0], [1.0, 100.0], [10.123456789, 5.987654321], [1.5, 6.3]]", "input_output_examples": "[[[10, 5]], [[314.15000000000003]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/234", "original_requirement": "def volume_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def volume_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the volume of a cube given its side length.\nassert volume_cube(3)==27\n\"\"\"", "entry_point": "volume_cube", "cluster_list": [{"programs_str": ["def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3", "def volume_cube(l: int) -> int:\n    return l ** 3"], "outputs": "[[1], [0], [-1], [27], [1000000000], [9903520300447984150353281023], [-9903520314283042199192993792]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [0], [-1], [3], [1000], [2147483647], [-2147483648]]", "input_output_examples": "[[[3]], [[27]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/235", "original_requirement": "def even_bit_set_number(n: int) -> int:\n\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"", "repaired_requirement": "def even_bit_set_number(n: int) -> int:\n    \"\"\"\n    Write a Python function to set all even bit positions of a given number `n` to 1.\n    The even bit positions to be set are restricted to the bit-length of `n`. \n    Specifically, only even bit positions from 0 up to (but not exceeding) `n.bit_length() - 1` are considered.\n    Higher bit positions beyond the bit-length of `n` remain unaffected.\n\n    Example:\n    assert even_bit_set_number(10) == 10\n    \"\"\"", "original_clusters": {"requirement": "def even_bit_set_number(n: int) -> int:\n\"\"\"\nWrite a python function to set all even bits of a given number.\nassert even_bit_set_number(10) == 10\n\"\"\"", "entry_point": "even_bit_set_number", "cluster_list": [{"programs_str": ["def even_bit_set_number(n: int) -> int:\n    mask = 12297829382473034410\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 12297829382473034410\n    return n | mask"], "outputs": "[[12297829382473034410], [12297829382473034411], [12297829382473034410], [12297829382473034410], [12297829382473034415], [12297829382473034431], [12297829382473034666], [12297829382473035434], [12297829383904690175], [12297829382562246591]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [12297829382473034410], [10]]]"}, {"programs_str": ["def even_bit_set_number(n: int) -> int:\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    even_bit_mask = 0\n    bit_position = 0\n    while 1 << bit_position <= n or bit_position < 32:\n        if bit_position % 2 == 0:\n            even_bit_mask |= 1 << bit_position\n        bit_position += 1\n    return n | even_bit_mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    bit_position = 0\n    while 1 << bit_position <= n or bit_position < 32:\n        if bit_position % 2 == 0:\n            mask |= 1 << bit_position\n        bit_position += 1\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    even_bit_mask = 0\n    i = 0\n    while 1 << i <= n or 1 << i <= 4294967295:\n        even_bit_mask |= 1 << i\n        i += 2\n    return n | even_bit_mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    bit_position = 0\n    while 1 << bit_position <= n or bit_position < 32:\n        if bit_position % 2 == 0:\n            mask |= 1 << bit_position\n        bit_position += 1\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    for i in range(0, 32, 2):\n        mask |= 1 << i\n    return n | mask"], "outputs": "[[1431655765], [1431655765], [1431655767], [1431655775], [1431655775], [1431655775], [1431655765], [1431655765], [4294967295], [1465900373]]", "probability": 0.35, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [1431655775], [10]]]"}, {"programs_str": ["def even_bit_set_number(n: int) -> int:\n    mask = 2863311530\n    return n | mask"], "outputs": "[[2863311530], [2863311531], [2863311530], [2863311530], [2863311535], [2863311551], [2863311786], [2863312554], [4294967295], [2952523711]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [2863311530], [10]]]"}, {"programs_str": ["def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = 0\n    for i in range(0, bit_length, 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    position = 0\n    mask = 0\n    temp_n = n\n    while temp_n > 0:\n        if position % 2 == 0:\n            mask |= 1 << position\n        position += 1\n        temp_n >>= 1\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    even_bit_mask = 0\n    bit_position = 0\n    while 1 << bit_position <= n:\n        if bit_position % 2 == 0:\n            even_bit_mask |= 1 << bit_position\n        bit_position += 1\n    result = n | even_bit_mask\n    return result", "def even_bit_set_number(n: int) -> int:\n    result = n\n    mask = 0\n    for i in range(0, n.bit_length(), 2):\n        mask |= 1 << i\n    return result | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    index = 0\n    while 1 << index <= n:\n        mask |= 1 << index\n        index += 2\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    i = 0\n    while 1 << i <= n:\n        mask |= 1 << i\n        i += 2\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    num_bits = n.bit_length()\n    mask = 0\n    for i in range(0, num_bits, 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    bit_position = 0\n    while 1 << bit_position <= n:\n        if bit_position % 2 == 0:\n            mask |= 1 << bit_position\n        bit_position += 1\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = 0\n    for i in range(0, bit_length, 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    num_bits = n.bit_length()\n    for i in range(0, num_bits, 2):\n        mask |= 1 << i\n    return n | mask"], "outputs": "[[0], [1], [3], [15], [15], [31], [341], [1365], [4294967295], [123723093]]", "probability": 0.5, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [15], [10]]]"}], "entropy": 0.78919491236176, "llm_generated_inputs": "[[0], [1], [2], [10], [15], [31], [256], [1024], [4294967295], [123456789]]", "input_output_examples": "[[[10]], [[10]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "def even_bit_set_number(n: int) -> int:\n    \"\"\"\n    Write a Python function to set all even bit positions of a given number `n` to 1.\n    The even bit positions to be set are restricted to the bit-length of `n`. \n    Specifically, only even bit positions from 0 up to (but not exceeding) `n.bit_length() - 1` are considered.\n    Higher bit positions beyond the bit-length of `n` remain unaffected.\n\n    Example:\n    assert even_bit_set_number(10) == 10\n    \"\"\"", "entry_point": "even_bit_set_number", "cluster_list": [{"programs_str": ["def even_bit_set_number(n: int) -> int:\n    for i in range(0, n.bit_length(), 2):\n        n |= 1 << i\n    return n", "def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = sum((1 << i for i in range(0, bit_length, 2)))\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = sum((1 << i for i in range(0, n.bit_length(), 2)))\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    for i in range(0, n.bit_length(), 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = sum((1 << i for i in range(0, bit_length, 2)))\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = sum((1 << i for i in range(0, n.bit_length(), 2)))\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    even_mask = sum((1 << i for i in range(0, bit_length, 2)))\n    return n | even_mask", "def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = 0\n    for i in range(0, bit_length, 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    even_bit_mask = sum((1 << bit for bit in range(n.bit_length()) if bit % 2 == 0))\n    return n | even_bit_mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    bit_length = n.bit_length()\n    for i in range(0, bit_length, 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = sum((1 << i for i in range(0, bit_length, 2)))\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = sum((1 << i for i in range(0, bit_length, 2)))\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    for i in range(0, n.bit_length(), 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = sum((1 << i for i in range(0, bit_length, 2)))\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    for i in range(0, n.bit_length(), 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = sum((1 << i for i in range(0, n.bit_length(), 2)))\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    mask = sum((1 << i for i in range(0, bit_length, 2)))\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = sum((1 << i for i in range(0, n.bit_length(), 2)))\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    mask = 0\n    for i in range(0, n.bit_length(), 2):\n        mask |= 1 << i\n    return n | mask", "def even_bit_set_number(n: int) -> int:\n    bit_length = n.bit_length()\n    even_bit_mask = sum((1 << i for i in range(0, bit_length, 2)))\n    return n | even_bit_mask"], "outputs": "[[0], [1], [3], [15], [15], [31], [341], [1365], [4294967295], [123723093]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [15], [10]]]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [10], [15], [31], [256], [1024], [4294967295], [123456789]]", "input_output_examples": "[[[10]], [[10]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.010476190476190462, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.03809523809523807, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/237", "original_requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\"\"\"", "entry_point": "check_occurences", "cluster_list": [{"programs_str": ["from typing import List, Dict, Tuple, Any\nfrom collections import defaultdict\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrence_dict = defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        occurrence_dict[sorted_tup] += 1\n    return dict(occurrence_dict)", "from typing import List, Dict, Tuple, Any\nfrom collections import defaultdict\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = defaultdict(int)\n    for tpl in test_list:\n        sorted_tpl = tuple(sorted(tpl))\n        count_dict[sorted_tpl] += 1\n    return dict(count_dict)", "from typing import List, Dict, Tuple, Any\nfrom collections import defaultdict\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        count_dict[sorted_tup] += 1\n    return dict(count_dict)", "from typing import List, Any, Dict, Tuple\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurence_dict = {}\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        if sorted_tup in occurence_dict:\n            occurence_dict[sorted_tup] += 1\n        else:\n            occurence_dict[sorted_tup] = 1\n    return occurence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in occurrences:\n            occurrences[sorted_item] += 1\n        else:\n            occurrences[sorted_item] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    mapped_dict = {}\n    for item in test_list:\n        sorted_tuple = tuple(sorted(item))\n        if sorted_tuple in mapped_dict:\n            mapped_dict[sorted_tuple] += 1\n        else:\n            mapped_dict[sorted_tuple] = 1\n    return mapped_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for tuple_pair in test_list:\n        sorted_tuple = tuple(sorted(tuple_pair))\n        if sorted_tuple in occurrences:\n            occurrences[sorted_tuple] += 1\n        else:\n            occurrences[sorted_tuple] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\nfrom collections import defaultdict\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        count_dict[sorted_tup] += 1\n    return dict(count_dict)", "from typing import List, Dict, Tuple, Any\nfrom collections import defaultdict\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = defaultdict(int)\n    for tup in test_list:\n        sorted_tup = tuple(sorted(tup))\n        count_dict[sorted_tup] += 1\n    return dict(count_dict)", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    normalized_list = [tuple(sorted(tup)) for tup in test_list]\n    return dict(Counter(normalized_list))", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n\n    def normalize_tuple(t: Tuple[Any, ...]) -> Tuple[Any, ...]:\n        return tuple(sorted(t))\n    occurrence_dict = {}\n    for item in test_list:\n        normalized_item = normalize_tuple(item)\n        if normalized_item in occurrence_dict:\n            occurrence_dict[normalized_item] += 1\n        else:\n            occurrence_dict[normalized_item] = 1\n    return occurrence_dict", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    count_dict = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in count_dict:\n            count_dict[sorted_item] += 1\n        else:\n            count_dict[sorted_item] = 1\n    return count_dict", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    normalized_list = [tuple(sorted(t)) for t in test_list]\n    return dict(Counter(normalized_list))", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    normalized_tuples = [tuple(sorted(t)) for t in test_list]\n    return dict(Counter(normalized_tuples))", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    test_list_sorted = [tuple(sorted(t)) for t in test_list]\n    return dict(Counter(test_list_sorted))", "from typing import List, Tuple, Dict, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurrences = {}\n    for item in test_list:\n        sorted_item = tuple(sorted(item))\n        if sorted_item in occurrences:\n            occurrences[sorted_item] += 1\n        else:\n            occurrences[sorted_item] = 1\n    return occurrences", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occurences = {}\n    for item in test_list:\n        normalized_item = tuple(sorted(item))\n        if normalized_item in occurences:\n            occurences[normalized_item] += 1\n        else:\n            occurences[normalized_item] = 1\n    return occurences", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    normalized_list = [tuple(sorted(tup)) for tup in test_list]\n    return dict(Counter(normalized_list))", "from typing import List, Dict, Tuple, Any\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    occur_dict = {}\n    for tpl in test_list:\n        sorted_tpl = tuple(sorted(tpl))\n        if sorted_tpl in occur_dict:\n            occur_dict[sorted_tpl] += 1\n        else:\n            occur_dict[sorted_tpl] = 1\n    return occur_dict", "from typing import List, Dict, Tuple, Any\nfrom collections import Counter\n\ndef check_occurences(test_list: List[Tuple[Any, ...]]) -> Dict[Tuple[Any, ...], int]:\n    normalized_list = [tuple(sorted(tup)) for tup in test_list]\n    return dict(Counter(normalized_list))"], "outputs": "[[{}], [{(1, 3): 2, (2, 5): 2, (3, 6): 1}], [{(1, 2): 4}], [{(5,): 1}], ['TypeError'], [{(2.71, 3.14): 2, (3.14,): 1}], [{(False, True): 2, (True, True): 1}], ['TypeError'], [{(1, 2, 3): 3, (1, 2): 1, (2, 3): 1}], [{(0, 0): 1, (0,): 1, (0, 0, 0): 1}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[]], [[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]], [[(1, 2), (1, 2), (1, 2), (2, 1)]], [[(5,)]], [[(1, 'apple'), (1, 'apple'), ('apple', 1), ('orange',)]], [[(3.14, 2.71), (3.14, 2.71), (3.14,)]], [[(True, False), (False, True), (True, True)]], [[(None, None), (None,), ()]], [[(1, 2, 3), (1, 2), (2, 3), (1, 2, 3), (3, 2, 1)]], [[(0, 0), (0,), (0, 0, 0)]]]", "input_output_examples": "[[[[(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]]], [[{(1, 3): 2, (2, 5): 2, (3, 6): 1}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9175438596491228, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/238", "original_requirement": "def number_of_substrings(str1: str) -> int:\n\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def number_of_substrings(str1: str) -> int:\n\"\"\"\nWrite a python function to count the number of non-empty substrings of a given string.\nassert number_of_substrings(\"abc\") == 6\n\"\"\"", "entry_point": "number_of_substrings", "cluster_list": [{"programs_str": ["def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "from typing import Any\n\ndef number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    if not str1:\n        return 0\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2", "def number_of_substrings(str1: str) -> int:\n    n = len(str1)\n    return n * (n + 1) // 2"], "outputs": "[[6], [0], [1], [6], [6], [6], [351]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abc'], [''], ['a'], ['aaa'], ['a b'], ['!@#'], ['abcdefghijklmnopqrstuvwxyz']]", "input_output_examples": "[[['abc']], [[6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/239", "original_requirement": "def get_total_number_of_sequences(m: int, n: int) -> int:\n\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"", "repaired_requirement": "def get_total_number_of_sequences(m: int, n: int) -> int:\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n.\n    Each sequence must satisfy the following conditions:\n    1. The first element of the sequence can be any positive integer between 1 and m (inclusive).\n    2. Each subsequent element in the sequence must satisfy:\n       - It is greater than or equal to twice the previous element.\n       - It is less than or equal to m.\n    The function returns the total number of such sequences.\n\n    Example:\n    assert get_total_number_of_sequences(10, 4) == 4\n    \"\"\"", "original_clusters": {"requirement": "def get_total_number_of_sequences(m: int, n: int) -> int:\n\"\"\"\nWrite a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\nassert get_total_number_of_sequences(10, 4) == 4\n\"\"\"", "entry_point": "get_total_number_of_sequences", "cluster_list": [{"programs_str": ["def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(curr_val, length):\n        if length == n:\n            return 1\n        total = 0\n        start_val = max(1, curr_val * 2)\n        for next_val in range(start_val, m + 1):\n            total += count_sequences(next_val, length + 1)\n        return total\n    return count_sequences(1, 0)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current, length):\n        if length == n:\n            return 1\n        total = 0\n        for next_element in range(max(current * 2, 1), m + 1):\n            total += count_sequences(next_element, length + 1)\n        return total\n    return count_sequences(1, 0)"], "outputs": "[[0], [0], [0], [0], [9], [0], [0], [14], [0], [0]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10, 4], [0], [4]]]"}, {"programs_str": ["def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current, length):\n        if length == n:\n            return 1\n        total = 0\n        for next_num in range(current * 2, m + 1):\n            total += count_sequences(next_num, length + 1)\n        return total\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start: int, remaining_length: int) -> int:\n        if remaining_length == 0:\n            return 1\n        total = 0\n        next_min_value = start * 2 if start > 0 else 1\n        for next_value in range(next_min_value, m + 1):\n            total += count_sequences(next_value, remaining_length - 1)\n        return total\n    return count_sequences(0, n)", "from functools import lru_cache\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last: int, length: int) -> int:\n        if length == 0:\n            return 1\n        count = 0\n        next_start = max(last * 2, 1)\n        for next_num in range(next_start, m + 1):\n            count += count_sequences(next_num, length - 1)\n        return count\n    return count_sequences(0, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last, length):\n        if length == 0:\n            return 1\n        total = 0\n        start = max(last * 2, 1)\n        for next_value in range(start, m + 1):\n            total += count_sequences(next_value, length - 1)\n        return total\n    return count_sequences(0, n)", "from functools import lru_cache\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last, length):\n        if length == n:\n            return 1\n        total = 0\n        start = last * 2\n        for next_elem in range(start, m + 1):\n            total += count_sequences(next_elem, length + 1)\n        return total\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last, length):\n        if length == n:\n            return 1\n        total_count = 0\n        start = max(2 * last, 1) if last > 0 else 1\n        for current in range(start, m + 1):\n            total_count += count_sequences(current, length + 1)\n        return total_count\n    return count_sequences(0, 0)", "from functools import lru_cache\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev: int, length: int) -> int:\n        if length == n:\n            return 1\n        total = 0\n        start = max(1, prev * 2)\n        for next_value in range(start, m + 1):\n            total += count_sequences(next_value, length + 1)\n        return total\n    return count_sequences(0, 0)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def find_sequences(last, depth):\n        if depth == 0:\n            return 1\n        count = 0\n        for i in range(last * 2, m + 1):\n            count += find_sequences(i, depth - 1)\n        return count\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += find_sequences(start, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == n:\n            return 1\n        count = 0\n        for i in range(start * 2, m + 1):\n            count += count_sequences(i, length + 1)\n        return count\n    total_sequences = 0\n    for i in range(1, m + 1):\n        total_sequences += count_sequences(i, 1)\n    return total_sequences", "from functools import lru_cache\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(last_num, remaining_length):\n        if remaining_length == 0:\n            return 1\n        total = 0\n        start = last_num * 2 if last_num > 0 else 1\n        for current in range(start, m + 1):\n            total += count_sequences(current, remaining_length - 1)\n        return total\n    return count_sequences(0, n)", "from functools import lru_cache\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev, length):\n        if length == 0:\n            return 1\n        total = 0\n        start = max(1, prev * 2)\n        for i in range(start, m + 1):\n            total += count_sequences(i, length - 1)\n        return total\n    return count_sequences(0, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        current = 2 * start if start > 0 else 1\n        while current <= m:\n            total += count_sequences(current, length - 1)\n            current += 1\n        return total\n    return count_sequences(0, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev, length):\n        if length == 0:\n            return 1\n        total = 0\n        start = max(1, prev * 2)\n        for i in range(start, m + 1):\n            total += count_sequences(i, length - 1)\n        return total\n    return count_sequences(0, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total_sequences = 0\n        min_next_value = start * 2\n        for next_value in range(min_next_value, m + 1):\n            total_sequences += count_sequences(next_value, length - 1)\n        return total_sequences\n    total = 0\n    for i in range(1, m + 1):\n        total += count_sequences(i, n - 1)\n    return total", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev, length_left):\n        if length_left == 0:\n            return 1\n        total = 0\n        start = max(2 * prev, 1)\n        for next_elem in range(start, m + 1):\n            total += count_sequences(next_elem, length_left - 1)\n        return total\n    return count_sequences(0, n)", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current_value, remaining_length):\n        if remaining_length == 0:\n            return 1\n        total_sequences = 0\n        next_value = 2 * current_value\n        while next_value <= m:\n            total_sequences += count_sequences(next_value, remaining_length - 1)\n            next_value += 1\n        return total_sequences\n    total = 0\n    for starting_value in range(1, m + 1):\n        total += count_sequences(starting_value, n - 1)\n    return total", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev, length):\n        if length == n:\n            return 1\n        count = 0\n        start = max(2 * prev, 1)\n        for i in range(start, m + 1):\n            count += count_sequences(i, length + 1)\n        return count\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, 1)\n    return total_sequences", "from functools import lru_cache\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev, length):\n        if length == n:\n            return 1\n        start = 2 * prev if prev else 1\n        total = 0\n        for i in range(start, m + 1):\n            total += count_sequences(i, length + 1)\n        return total\n    return count_sequences(0, 0)"], "outputs": "[[4], [2], [1], [10], [10], [0], [0], [15], [2], [0]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[10, 4], [5, 3], [1, 1], [20, 5], [10, 1], [2, 3], [25, 6], [15, 1], [3, 2], [1, 2]]", "input_output_examples": "[[[10, 4]], [[4]]]", "weighted_test_consistency": 0.9, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def get_total_number_of_sequences(m: int, n: int) -> int:\n    \"\"\"\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n.\n    Each sequence must satisfy the following conditions:\n    1. The first element of the sequence can be any positive integer between 1 and m (inclusive).\n    2. Each subsequent element in the sequence must satisfy:\n       - It is greater than or equal to twice the previous element.\n       - It is less than or equal to m.\n    The function returns the total number of such sequences.\n\n    Example:\n    assert get_total_number_of_sequences(10, 4) == 4\n    \"\"\"", "entry_point": "get_total_number_of_sequences", "cluster_list": [{"programs_str": ["def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 0:\n            return 1\n        total = 0\n        for next_elem in range(2 * start, m + 1):\n            total += count_sequences(next_elem, length - 1)\n        return total\n    total_sequences = 0\n    for first_elem in range(1, m + 1):\n        total_sequences += count_sequences(first_elem, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev: int, length: int) -> int:\n        if length == 0:\n            return 1\n        total = 0\n        for next_val in range(prev * 2, m + 1):\n            total += count_sequences(next_val, length - 1)\n        return total\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def find_sequences(m: int, n: int, start: int) -> int:\n        if n == 1:\n            return 1\n        total = 0\n        for next_value in range(start * 2, m + 1):\n            total += find_sequences(m, n - 1, next_value)\n        return total\n    total_sequences = 0\n    for first_element in range(1, m + 1):\n        total_sequences += find_sequences(m, n, first_element)\n    return total_sequences", "from functools import lru_cache\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev, remaining_length):\n        if remaining_length == 0:\n            return 1\n        total = 0\n        for next_value in range(prev * 2, m + 1):\n            total += count_sequences(next_value, remaining_length - 1)\n        return total\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, n - 1)\n    return total_sequences", "from functools import lru_cache\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev, length):\n        if length == 0:\n            return 1\n        total = 0\n        for i in range(prev * 2, m + 1):\n            total += count_sequences(i, length - 1)\n        return total\n    total_sequences = 0\n    for i in range(1, m + 1):\n        total_sequences += count_sequences(i, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current, length):\n        if length == n:\n            return 1\n        total = 0\n        for next_value in range(2 * current, m + 1):\n            total += count_sequences(next_value, length + 1)\n        return total\n    total_sequences = 0\n    for start_value in range(1, m + 1):\n        total_sequences += count_sequences(start_value, 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 1:\n            return 1\n        total = 0\n        for next_val in range(max(2 * start, 1), m + 1):\n            total += count_sequences(next_val, length - 1)\n        return total\n    total_sequences = 0\n    for first in range(1, m + 1):\n        total_sequences += count_sequences(first, n)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current: int, remaining: int) -> int:\n        if remaining == 0:\n            return 1\n        total = 0\n        for next_val in range(current * 2, m + 1):\n            total += count_sequences(next_val, remaining - 1)\n        return total\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev, length):\n        if length == n:\n            return 1\n        count = 0\n        for i in range(max(2 * prev, 1), m + 1):\n            count += count_sequences(i, length + 1)\n        return count\n    total_count = 0\n    for start in range(1, m + 1):\n        total_count += count_sequences(start, 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current, remaining_length):\n        if remaining_length == 0:\n            return 1\n        total = 0\n        for next_value in range(2 * current, m + 1):\n            total += count_sequences(next_value, remaining_length - 1)\n        return total\n    total_count = 0\n    for starting_value in range(1, m + 1):\n        total_count += count_sequences(starting_value, n - 1)\n    return total_count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev, length):\n        if length == n:\n            return 1\n        count = 0\n        for next_val in range(prev * 2, m + 1):\n            count += count_sequences(next_val, length + 1)\n        return count\n    total_count = 0\n    for start in range(1, m + 1):\n        total_count += count_sequences(start, 1)\n    return total_count", "from functools import lru_cache\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, length):\n        if length == 1:\n            return 1\n        total = 0\n        for next_element in range(2 * start, m + 1):\n            total += count_sequences(next_element, length - 1)\n        return total\n    total_sequences = 0\n    for first_element in range(1, m + 1):\n        total_sequences += count_sequences(first_element, n)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def dfs(prev: int, length: int) -> int:\n        if length == n:\n            return 1\n        total = 0\n        for next_value in range(prev * 2, m + 1):\n            total += dfs(next_value, length + 1)\n        return total\n    count = 0\n    for start in range(1, m + 1):\n        count += dfs(start, 1)\n    return count", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start, remaining_length):\n        if remaining_length == 0:\n            return 1\n        total = 0\n        for next_element in range(2 * start, m + 1):\n            total += count_sequences(next_element, remaining_length - 1)\n        return total\n    total_sequences = 0\n    for first_element in range(1, m + 1):\n        total_sequences += count_sequences(first_element, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev, length):\n        if length == n:\n            return 1\n        total = 0\n        for next_val in range(prev * 2, m + 1):\n            total += count_sequences(next_val, length + 1)\n        return total\n    total_sequences = 0\n    for first in range(1, m + 1):\n        total_sequences += count_sequences(first, 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(current, remaining_length):\n        if remaining_length == 0:\n            return 1\n        total_count = 0\n        next_start = 2 * current\n        for next_element in range(next_start, m + 1):\n            total_count += count_sequences(next_element, remaining_length - 1)\n        return total_count\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, n - 1)\n    return total_sequences", "from functools import lru_cache\n\ndef get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def dfs(length: int, prev: int) -> int:\n        if length == n:\n            return 1\n        count = 0\n        for current in range(2 * prev, m + 1):\n            count += dfs(length + 1, current)\n        return count\n    total_sequences = 0\n    for first in range(1, m + 1):\n        total_sequences += dfs(1, first)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(prev: int, remaining_length: int) -> int:\n        if remaining_length == 0:\n            return 1\n        total = 0\n        for next_value in range(max(2 * prev, 1), m + 1):\n            total += count_sequences(next_value, remaining_length - 1)\n        return total\n    total_sequences = 0\n    for start in range(1, m + 1):\n        total_sequences += count_sequences(start, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start: int, remaining_length: int) -> int:\n        if remaining_length == 0:\n            return 1\n        total = 0\n        for next_val in range(start * 2, m + 1):\n            total += count_sequences(next_val, remaining_length - 1)\n        return total\n    total_sequences = 0\n    for first_element in range(1, m + 1):\n        total_sequences += count_sequences(first_element, n - 1)\n    return total_sequences", "def get_total_number_of_sequences(m: int, n: int) -> int:\n\n    def count_sequences(start: int, length: int) -> int:\n        if length == 1:\n            return 1\n        total = 0\n        for next_elem in range(start * 2, m + 1):\n            total += count_sequences(next_elem, length - 1)\n        return total\n    total_sequences = 0\n    for first_elem in range(1, m + 1):\n        total_sequences += count_sequences(first_elem, n)\n    return total_sequences"], "outputs": "[[4], [2], [1], [10], [10], [0], [0], [15], [2], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10, 4], [5, 3], [1, 1], [20, 5], [10, 1], [2, 3], [25, 6], [15, 1], [3, 2], [1, 2]]", "input_output_examples": "[[[10, 4]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/240", "original_requirement": "from typing import List\n\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n\"\"\"\nWrite a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\"\"\"", "entry_point": "replace_list", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2", "from typing import List, Any\n\ndef replace_list(list1: List[Any], list2: List[Any]) -> List[Any]:\n    return list1[:-1] + list2"], "outputs": "[[[1, 3, 5, 7, 9, 2, 4, 6, 8]], [[]], [[10, 20, 30]], [[5]], [[1, 2, 4]], [[9, 8, 7]], [[100, 200, 400, 500]], [[1, 1, 1, 1, 1]], [[True, False, None, True]], [['a', 'b', 'd', 'e']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]], [[], []], [[1], [10, 20, 30]], [[5, 6], []], [[1, 2, 3], [4]], [[], [9, 8, 7]], [[100, 200, 300], [400, 500]], [[1, 1, 1], [1, 1, 1]], [[True, False, None], [None, True]], [['a', 'b', 'c'], ['d', 'e']]]", "input_output_examples": "[[[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], [[[1, 3, 5, 7, 9, 2, 4, 6, 8]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/242", "original_requirement": "def count_charac(str1: str) -> int:\n\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_charac(str1: str) -> int:\n\"\"\"\nWrite a function to count the total number of characters in a string.\nassert count_charac(\"python programming\")==18\n\"\"\"", "entry_point": "count_charac", "cluster_list": [{"programs_str": ["def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)", "def count_charac(str1: str) -> int:\n    return len(str1)"], "outputs": "[[18], [0], [1], [10], [10], [1], [1], [18], [13], [18], [17]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['python programming'], [''], [' '], ['1234567890'], ['!@#$%^&*()'], ['a'], ['_'], ['multiple spaces   '], ['tabs\\tare\\there'], ['newline\\ncharacters'], ['escape\\\\characters']]", "input_output_examples": "[[['python programming']], [[18]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/244", "original_requirement": "def next_Perfect_Square(N: int) -> int:\n\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"", "repaired_requirement": "```python\ndef next_Perfect_Square(N: int) -> int:\n    \"\"\"\n    Write a Python function to find the next perfect square greater than a given number.\n\n    The function should:\n    1. Identify the square root of the given number `N`.\n    2. If the square root is not an integer, round it up to the nearest integer.\n    3. Return the square of the resulting integer to find the smallest perfect square \n       that is strictly greater than `N`.\n\n    Example:\n        assert next_Perfect_Square(35) == 36\n\n    Note: The function must ensure that if `N` is already a perfect square,\n          it finds the next perfect square greater than `N`.\n    \"\"\"\n```", "original_clusters": {"requirement": "def next_Perfect_Square(N: int) -> int:\n\"\"\"\nWrite a python function to find the next perfect square greater than a given number.\nassert next_Perfect_Square(35) == 36\n\"\"\"", "entry_point": "next_Perfect_Square", "cluster_list": [{"programs_str": ["import math\n\ndef next_Perfect_Square(N: int) -> int:\n    next_root = math.isqrt(N) + 1\n    return next_root ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.isqrt(N)\n    next_root = root + 1\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.isqrt(N)\n    next_root = root + 1\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.isqrt(N)\n    next_root = root + 1\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    next_root = math.isqrt(N) + 1\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.isqrt(N)\n    next_root = root + 1\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.isqrt(N)\n    next_root = root + 1\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    next_root = math.isqrt(N) + 1\n    return next_root ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.floor(math.sqrt(N))\n    next_root = root + 1\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.isqrt(N)\n    next_root = root + 1 if root * root == N else root + 1\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.sqrt(N)\n    next_root = math.ceil(root)\n    return next_root ** 2 if next_root ** 2 > N else (next_root + 1) ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.isqrt(N)\n    next_root = root + 1\n    next_perfect_square = next_root * next_root\n    return next_perfect_square"], "outputs": "[[36], [49], [1], [4], [1024], ['ValueError'], [1002001]]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.sqrt(N)\n    next_root = math.ceil(root)\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.sqrt(N)\n    next_root = math.ceil(root)\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.ceil(math.sqrt(N))\n    return root * root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.ceil(math.sqrt(N))\n    return root * root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.sqrt(N)\n    next_root = math.ceil(root)\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.ceil(math.sqrt(N))\n    return root * root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.sqrt(N)\n    next_root = math.ceil(root)\n    return next_root * next_root"], "outputs": "[[36], [36], [0], [1], [1024], ['ValueError'], [1000000]]", "probability": 0.35, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.ceil(math.sqrt(N))\n    next_square = (root + 1) ** 2\n    return next_square if next_square > N else root ** 2"], "outputs": "[[49], [49], [1], [4], [1089], ['ValueError'], [1002001]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[35], [49], [36]]]"}], "entropy": 0.7497820113685953, "llm_generated_inputs": "[[35], [36], [0], [1], [999], [-5], [1000000]]", "input_output_examples": "[[[35]], [[36]]]", "weighted_test_consistency": 0.95, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef next_Perfect_Square(N: int) -> int:\n    \"\"\"\n    Write a Python function to find the next perfect square greater than a given number.\n\n    The function should:\n    1. Identify the square root of the given number `N`.\n    2. If the square root is not an integer, round it up to the nearest integer.\n    3. Return the square of the resulting integer to find the smallest perfect square \n       that is strictly greater than `N`.\n\n    Example:\n        assert next_Perfect_Square(35) == 36\n\n    Note: The function must ensure that if `N` is already a perfect square,\n          it finds the next perfect square greater than `N`.\n    \"\"\"\n```", "entry_point": "next_Perfect_Square", "cluster_list": [{"programs_str": ["import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_root = math.ceil(sqrt_N)\n    if next_root == sqrt_N:\n        next_root += 1\n    return next_root ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N) + 1 if sqrt_N.is_integer() else math.ceil(sqrt_N)\n    return next_int ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.ceil(math.sqrt(N))\n    if sqrt_N * sqrt_N == N:\n        sqrt_N += 1\n    return sqrt_N * sqrt_N", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_n = math.sqrt(N)\n    next_square_root = math.ceil(sqrt_n)\n    if next_square_root ** 2 == N:\n        next_square_root += 1\n    return next_square_root ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.sqrt(N)\n    next_root = math.ceil(root)\n    if next_root * next_root == N:\n        next_root += 1\n    return next_root * next_root", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    square_root = math.sqrt(N)\n    next_integer = math.ceil(square_root)\n    if square_root == next_integer:\n        next_integer += 1\n    return next_integer ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_val = math.isqrt(N)\n    if sqrt_val * sqrt_val == N:\n        return (sqrt_val + 1) ** 2\n    return (sqrt_val + 1) ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N) + 1 if sqrt_N.is_integer() else math.ceil(sqrt_N)\n    return next_int ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    square_root = math.sqrt(N)\n    next_integer = math.ceil(square_root)\n    if next_integer ** 2 == N:\n        next_integer += 1\n    return next_integer ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_n = math.sqrt(N)\n    next_int = math.ceil(sqrt_n)\n    if next_int ** 2 == N:\n        next_int += 1\n    return next_int ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    root = math.sqrt(N)\n    next_root = math.ceil(root) + (1 if root == math.floor(root) else 0)\n    return next_root ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N) + 1 if sqrt_N.is_integer() else math.ceil(sqrt_N)\n    return next_int ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_n = math.sqrt(N)\n    next_int = math.ceil(sqrt_n)\n    if next_int * next_int == N:\n        next_int += 1\n    return next_int * next_int", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N)\n    if next_int ** 2 <= N:\n        next_int += 1\n    return next_int ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    square_root = math.sqrt(N)\n    next_number = math.ceil(square_root)\n    if next_number ** 2 == N:\n        next_number += 1\n    return next_number ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.floor(sqrt_N) + 1 if sqrt_N.is_integer() else math.ceil(sqrt_N)\n    return next_int ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N) + (1 if sqrt_N.is_integer() else 0)\n    return next_int ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N) + 1 if sqrt_N.is_integer() else math.ceil(sqrt_N)\n    return next_int * next_int", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_int = math.ceil(sqrt_N)\n    if next_int ** 2 == N:\n        next_int += 1\n    return next_int ** 2", "import math\n\ndef next_Perfect_Square(N: int) -> int:\n    sqrt_N = math.sqrt(N)\n    next_square_root = math.ceil(sqrt_N) + 1 if sqrt_N.is_integer() else math.ceil(sqrt_N)\n    return next_square_root ** 2"], "outputs": "[[36], [49], [1], [4], [1024], ['ValueError'], [1002001]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[35], [36], [0], [1], [999], [-5], [1000000]]", "input_output_examples": "[[[35]], [[36]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.7071428571428571, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.75, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/245", "original_requirement": "from typing import List\n\n\ndef max_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef max_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194\n\"\"\"", "entry_point": "max_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in reversed(range(n)):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_incr_sum = [0] * n\n    for i in range(n):\n        max_incr_sum[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_incr_sum[i] = max(max_incr_sum[i], max_incr_sum[j] + arr[i])\n    max_decr_sum = [0] * n\n    for i in range(n - 1, -1, -1):\n        max_decr_sum[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                max_decr_sum[i] = max(max_decr_sum[i], max_decr_sum[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, max_incr_sum[i] + max_decr_sum[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum_val = 0\n    for i in range(n):\n        max_sum_val = max(max_sum_val, inc[i] + dec[i] - arr[i])\n    return max_sum_val", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], arr[i] + inc[j])\n    dec = [0] * n\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], arr[i] + dec[j])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    dec = [0] * n\n    for i in reversed(range(n)):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc_subseq_sum = [0] * n\n    dec_subseq_sum = [0] * n\n    for i in range(n):\n        inc_subseq_sum[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc_subseq_sum[i] = max(inc_subseq_sum[i], inc_subseq_sum[j] + arr[i])\n    for i in reversed(range(n)):\n        dec_subseq_sum[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec_subseq_sum[i] = max(dec_subseq_sum[i], dec_subseq_sum[j] + arr[i])\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc_subseq_sum[i] + dec_subseq_sum[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    dec = [0] * n\n    dec[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    increasing = [0] * n\n    decreasing = [0] * n\n    for i in range(n):\n        increasing[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and increasing[i] < increasing[j] + arr[i]:\n                increasing[i] = increasing[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        decreasing[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i] and decreasing[i] < decreasing[j] + arr[i]:\n                decreasing[i] = decreasing[j] + arr[i]\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, increasing[i] + decreasing[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    lis = [0] * n\n    lds = [0] * n\n    for i in range(n):\n        lis[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + arr[i]:\n                lis[i] = lis[j] + arr[i]\n    for i in reversed(range(n)):\n        lds[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j] and lds[i] < lds[j] + arr[i]:\n                lds[i] = lds[j] + arr[i]\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, lis[i] + lds[i] - arr[i])\n    return max_bitonic_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    increase = [0] * n\n    decrease = [0] * n\n    for i in range(n):\n        increase[i] = arr[i]\n        decrease[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and increase[i] < increase[j] + arr[i]:\n                increase[i] = increase[j] + arr[i]\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and decrease[i] < decrease[j] + arr[i]:\n                decrease[i] = decrease[j] + arr[i]\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, increase[i] + decrease[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n    dec = [0] * n\n    for i in reversed(range(n)):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n    max_sum_bitonic = 0\n    for i in range(n):\n        max_sum_bitonic = max(max_sum_bitonic, inc[i] + dec[i] - arr[i])\n    return max_sum_bitonic", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n    for i in range(n):\n        dec[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n    return max_sum", "from typing import List\n\ndef max_sum(arr: List[int]) -> int:\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(i + 1, n):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n    max_bitonic_sum = 0\n    for i in range(n):\n        max_bitonic_sum = max(max_bitonic_sum, inc[i] + dec[i] - arr[i])\n    return max_bitonic_sum"], "outputs": "[[194], [10], [12], [45], [45], [80], [130], [18], [6], [1], [0], [0], [8], [121], [90]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 15, 51, 45, 33, 100, 12, 18, 9]], [[10]], [[10, 2]], [[10, 15, 20]], [[20, 15, 10]], [[20, 50, 10]], [[10, 20, 30, 40, 30]], [[5, 1, 2, 3, 4, 5, 2, 1]], [[3, 2, 1]], [[1, 1, 1, 1]], [[]], [[-1, -2, -3, -4]], [[5, -1, 3, 0, -2]], [[1, 15, -51, 45, 33, -100, 12, 18, 9]], [[50, 20, 30, 10, 40]]]", "input_output_examples": "[[[[1, 15, 51, 45, 33, 100, 12, 18, 9]]], [[194]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/247", "original_requirement": "def lps(str1: str) -> int:\n\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"", "repaired_requirement": "```python\ndef lps(str1: str) -> int:\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n\n    Requirements:\n    - The input string `str1` must be non-empty. If an empty string is provided, the function must raise an IndexError.\n    - The input string may contain non-alphabetic characters, such as spaces, and these characters are considered valid and included in the calculation of the longest palindromic subsequence. No preprocessing is performed on the input string.\n\n    Example:\n    assert lps(\"TENS FOR TENS\") == 5\n    \"\"\"\n```", "original_clusters": {"requirement": "def lps(str1: str) -> int:\n\"\"\"\nWrite a function to find the length of the longest palindromic subsequence in the given string.\nassert lps(\"TENS FOR TENS\") == 5\n\"\"\"", "entry_point": "lps", "cluster_list": [{"programs_str": ["from functools import lru_cache\n\ndef lps(str1: str) -> int:\n\n    def helper(start: int, end: int) -> int:\n        if start > end:\n            return 0\n        if start == end:\n            return 1\n        if str1[start] == str1[end]:\n            return 2 + helper(start + 1, end - 1)\n        else:\n            return max(helper(start + 1, end), helper(start, end - 1))\n    return helper(0, len(str1) - 1)", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n\n    def helper(l, r):\n        if l > r:\n            return 0\n        if l == r:\n            return 1\n        if str1[l] == str1[r]:\n            return 2 + helper(l + 1, r - 1)\n        return max(helper(l + 1, r), helper(l, r - 1))\n    return helper(0, len(str1) - 1)", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n\n    def longest_palindromic_subseq(i: int, j: int) -> int:\n        if i > j:\n            return 0\n        if i == j:\n            return 1\n        if str1[i] == str1[j]:\n            return 2 + longest_palindromic_subseq(i + 1, j - 1)\n        else:\n            return max(longest_palindromic_subseq(i + 1, j), longest_palindromic_subseq(i, j - 1))\n    return longest_palindromic_subseq(0, len(str1) - 1)", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n\n    def longest_palindromic_subseq(start: int, end: int) -> int:\n        if start > end:\n            return 0\n        if start == end:\n            return 1\n        if str1[start] == str1[end]:\n            return 2 + longest_palindromic_subseq(start + 1, end - 1)\n        else:\n            return max(longest_palindromic_subseq(start + 1, end), longest_palindromic_subseq(start, end - 1))\n    return longest_palindromic_subseq(0, len(str1) - 1)"], "outputs": "[[7], [5], [1], [1], [2], [3], [5], [12], [1], [5], [0], [11], [2], [9], [4]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j]:\n                if cl == 2:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]"], "outputs": "[[7], [5], [1], [1], [2], [3], [5], [12], [1], [5], ['IndexError'], [11], [2], [9], [4]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[['racecar'], ['banana'], ['abcd'], ['a'], ['aa'], ['aaa'], ['abcba'], ['forgeeksskeegfor'], ['abcdefg'], ['TENS FOR TENS'], [''], ['madamimadam'], ['aabbcc'], ['abcdedcba'], ['noon']]", "input_output_examples": "[[['TENS FOR TENS']], [[5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef lps(str1: str) -> int:\n    \"\"\"\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n\n    Requirements:\n    - The input string `str1` must be non-empty. If an empty string is provided, the function must raise an IndexError.\n    - The input string may contain non-alphabetic characters, such as spaces, and these characters are considered valid and included in the calculation of the longest palindromic subsequence. No preprocessing is performed on the input string.\n\n    Example:\n    assert lps(\"TENS FOR TENS\") == 5\n    \"\"\"\n```", "entry_point": "lps", "cluster_list": [{"programs_str": ["from functools import lru_cache\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty.')\n\n    def helper(start: int, end: int) -> int:\n        if start > end:\n            return 0\n        if start == end:\n            return 1\n        if str1[start] == str1[end]:\n            return 2 + helper(start + 1, end - 1)\n        return max(helper(start + 1, end), helper(start, end - 1))\n    return helper(0, len(str1) - 1)", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string is empty.')\n\n    def longest_palindromic_subseq(start: int, end: int) -> int:\n        if start > end:\n            return 0\n        if start == end:\n            return 1\n        if str1[start] == str1[end]:\n            return 2 + longest_palindromic_subseq(start + 1, end - 1)\n        return max(longest_palindromic_subseq(start + 1, end), longest_palindromic_subseq(start, end - 1))\n    return longest_palindromic_subseq(0, len(str1) - 1)", "from typing import List\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty.')\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty.')\n\n    def helper(left: int, right: int) -> int:\n        if left > right:\n            return 0\n        if left == right:\n            return 1\n        if str1[left] == str1[right]:\n            return 2 + helper(left + 1, right - 1)\n        else:\n            return max(helper(left + 1, right), helper(left, right - 1))\n    return helper(0, len(str1) - 1)", "from typing import List\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty')\n    n = len(str1)\n    dp: List[List[int]] = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "from typing import List\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty.')\n\n    def longest_palindrome_helper(s: str, start: int, end: int, dp: List[List[int]]) -> int:\n        if start > end:\n            return 0\n        if start == end:\n            return 1\n        if dp[start][end] != -1:\n            return dp[start][end]\n        if s[start] == s[end]:\n            dp[start][end] = 2 + longest_palindrome_helper(s, start + 1, end - 1, dp)\n        else:\n            dp[start][end] = max(longest_palindrome_helper(s, start + 1, end, dp), longest_palindrome_helper(s, start, end - 1, dp))\n        return dp[start][end]\n    n = len(str1)\n    dp = [[-1] * n for _ in range(n)]\n    return longest_palindrome_helper(str1, 0, n - 1, dp)", "from typing import List\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string is empty')\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must not be empty')\n\n    def longest_palindromic_subsequence(start: int, end: int) -> int:\n        if start > end:\n            return 0\n        if start == end:\n            return 1\n        if str1[start] == str1[end]:\n            return 2 + longest_palindromic_subsequence(start + 1, end - 1)\n        else:\n            return max(longest_palindromic_subsequence(start + 1, end), longest_palindromic_subsequence(start, end - 1))\n    return longest_palindromic_subsequence(0, len(str1) - 1)", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('The input string must be non-empty.')\n\n    def longest_palindromic_subseq(start: int, end: int) -> int:\n        if start > end:\n            return 0\n        if start == end:\n            return 1\n        if str1[start] == str1[end]:\n            return 2 + longest_palindromic_subseq(start + 1, end - 1)\n        else:\n            return max(longest_palindromic_subseq(start + 1, end), longest_palindromic_subseq(start, end - 1))\n    return longest_palindromic_subseq(0, len(str1) - 1)", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty.')\n\n    def helper(left: int, right: int) -> int:\n        if left > right:\n            return 0\n        if left == right:\n            return 1\n        if str1[left] == str1[right]:\n            return 2 + helper(left + 1, right - 1)\n        else:\n            return max(helper(left + 1, right), helper(left, right - 1))\n    return helper(0, len(str1) - 1)", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty.')\n\n    def helper(start: int, end: int) -> int:\n        if start > end:\n            return 0\n        if start == end:\n            return 1\n        if str1[start] == str1[end]:\n            return 2 + helper(start + 1, end - 1)\n        return max(helper(start + 1, end), helper(start, end - 1))\n    return helper(0, len(str1) - 1)", "from typing import List\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty')\n    n = len(str1)\n    dp: List[List[int]] = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "import functools\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty.')\n\n    def helper(start: int, end: int) -> int:\n        if start > end:\n            return 0\n        if start == end:\n            return 1\n        if str1[start] == str1[end]:\n            return 2 + helper(start + 1, end - 1)\n        return max(helper(start + 1, end), helper(start, end - 1))\n    return helper(0, len(str1) - 1)", "from typing import List\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must not be empty.')\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "from typing import List\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty.')\n    n = len(str1)\n    dp: List[List[int]] = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for start in range(n - length + 1):\n            end = start + length - 1\n            if str1[start] == str1[end]:\n                dp[start][end] = dp[start + 1][end - 1] + 2\n            else:\n                dp[start][end] = max(dp[start + 1][end], dp[start][end - 1])\n    return dp[0][n - 1]", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('The input string must be non-empty')\n\n    def helper(left: int, right: int) -> int:\n        if left > right:\n            return 0\n        if left == right:\n            return 1\n        if str1[left] == str1[right]:\n            return 2 + helper(left + 1, right - 1)\n        return max(helper(left + 1, right), helper(left, right - 1))\n    return helper(0, len(str1) - 1)", "from typing import List\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string is empty.')\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1]", "from typing import List\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty')\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "def lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty')\n    n = len(str1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if str1[i] == str1[j] and cl == 2:\n                dp[i][j] = 2\n            elif str1[i] == str1[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "from functools import lru_cache\n\ndef lps(str1: str) -> int:\n    if not str1:\n        raise IndexError('Input string must be non-empty.')\n\n    def longest_palindromic_subsequence(left: int, right: int) -> int:\n        if left > right:\n            return 0\n        if left == right:\n            return 1\n        if str1[left] == str1[right]:\n            return 2 + longest_palindromic_subsequence(left + 1, right - 1)\n        return max(longest_palindromic_subsequence(left + 1, right), longest_palindromic_subsequence(left, right - 1))\n    return longest_palindromic_subsequence(0, len(str1) - 1)"], "outputs": "[[7], [5], [1], [1], [2], [3], [5], [12], [1], [5], ['IndexError'], [11], [2], [9], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['racecar'], ['banana'], ['abcd'], ['a'], ['aa'], ['aaa'], ['abcba'], ['forgeeksskeegfor'], ['abcdefg'], ['TENS FOR TENS'], [''], ['madamimadam'], ['aabbcc'], ['abcdedcba'], ['noon']]", "input_output_examples": "[[['TENS FOR TENS']], [[5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9981308411214954, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/250", "original_requirement": "def count_X(tup: tuple, x: any) -> int:\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_X(tup: tuple, x: any) -> int:\n\"\"\"\nWrite a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\"\"\"", "entry_point": "count_X", "cluster_list": [{"programs_str": ["def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "from typing import Any, Tuple\n\ndef count_X(tup: Tuple[Any, ...], x: Any) -> int:\n    return tup.count(x)", "from typing import Any\n\ndef count_X(tup: tuple, x: Any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "from typing import Any, Tuple\n\ndef count_X(tup: Tuple[Any, ...], x: Any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)", "def count_X(tup: tuple, x: any) -> int:\n    return tup.count(x)"], "outputs": "[[0], [3], [5], [0], [3], [2], [3], [0], [1], [3], [1], [2], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4], [(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10], [(1, 1, 1, 1, 1), 1], [(1, 1, 1, 1, 1), 2], [(True, False, True, True, False), True], [(True, False, True, True, False), False], [(None, None, None), None], [(10, 20, 30), 40], [(10, 20, 30), 10], [(2.5, 3.1, 4.2, 2.5, 2.5), 2.5], [(2.5, 3.1, 4.2, 2.5, 2.5), 3.1], [(10, '10', 10.0, 'ten', None), 10], [(10, '10', 10.0, 'ten', None), '10']]", "input_output_examples": "[[[(10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4]], [[0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/251", "original_requirement": "from typing import List\n\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n\"\"\"\nWrite a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\nassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n\"\"\"", "entry_point": "insert_element", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.extend([element, item])\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result", "from typing import List, Any\n\ndef insert_element(list1: List[Any], element: Any) -> List[Any]:\n    result = []\n    for item in list1:\n        result.append(element)\n        result.append(item)\n    return result"], "outputs": "[[['c', 'Red', 'c', 'Green', 'c', 'Black']], [[0, 1, 0, 2, 0, 3]], [[]], [['x', 'a', 'x', 'b']], [[None, True, None, False]], [[0.0, 1.1, 0.0, 2.2, 0.0, 3.3]], [['fruit', 'apple', 'fruit', 'banana', 'fruit', 'cherry']], [['non-empty', '', 'non-empty', ' ']], [['placeholder', None, 'placeholder', None, 'placeholder', None]], [['Insert', 'Start']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['Red', 'Green', 'Black'], 'c'], [[1, 2, 3], 0], [[], 'element'], [['a', 'b'], 'x'], [[True, False], None], [[1.1, 2.2, 3.3], 0.0], [['apple', 'banana', 'cherry'], 'fruit'], [['', ' '], 'non-empty'], [[None, None, None], 'placeholder'], [['Start'], 'Insert']]", "input_output_examples": "[[[['Red', 'Green', 'Black'], 'c']], [[['c', 'Red', 'c', 'Green', 'c', 'Black']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/252", "original_requirement": "def convert(numbers: complex) -> tuple:\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def convert(numbers: complex) -> tuple:\n\"\"\"\nWrite a python function to convert complex numbers to polar coordinates.\nassert convert(1) == (1.0, 0.0)\n\"\"\"", "entry_point": "convert", "cluster_list": [{"programs_str": ["import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)", "import math\n\ndef convert(numbers: complex) -> tuple:\n    r = abs(numbers)\n    theta = math.atan2(numbers.imag, numbers.real)\n    return (r, theta)", "import cmath\nfrom typing import Tuple\n\ndef convert(numbers: complex) -> Tuple[float, float]:\n    return cmath.polar(numbers)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)", "from typing import Tuple\nimport cmath\n\ndef convert(numbers: complex) -> Tuple[float, float]:\n    return cmath.polar(numbers)", "import cmath\nfrom typing import Tuple\n\ndef convert(numbers: complex) -> Tuple[float, float]:\n    return cmath.polar(numbers)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)", "import cmath\nfrom typing import Tuple\n\ndef convert(numbers: complex) -> Tuple[float, float]:\n    return cmath.polar(numbers)", "from typing import Tuple\nimport cmath\n\ndef convert(numbers: complex) -> Tuple[float, float]:\n    return cmath.polar(numbers)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)", "import math\nfrom typing import Tuple\n\ndef convert(numbers: complex) -> Tuple[float, float]:\n    r = abs(numbers)\n    theta = math.atan2(numbers.imag, numbers.real)\n    return (r, theta)", "import cmath\nfrom typing import Tuple\n\ndef convert(numbers: complex) -> Tuple[float, float]:\n    return cmath.polar(numbers)", "import cmath\nfrom typing import Tuple\n\ndef convert(numbers: complex) -> Tuple[float, float]:\n    return cmath.polar(numbers)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)", "import cmath\n\ndef convert(numbers: complex) -> tuple:\n    return cmath.polar(numbers)"], "outputs": "[[(1.0, 0.0)], [(1.0, 1.5707963267948966)], [(1.4142135623730951, -0.7853981633974483)], [(1.4142135623730951, 2.356194490192345)], [(1.4142135623730951, -2.356194490192345)], [(5.0, 0.9272952180016122)], [(0.0, 0.0)], [(4.0, 3.141592653589793)], [(5.0, -1.5707963267948966)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(1+0j)], [1j], [(1-1j)], [(-1+1j)], [(-1-1j)], [(3+4j)], [0j], [(-4+0j)], [-5j]]", "input_output_examples": "[[[1]], [[(1.0, 0.0)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/253", "original_requirement": "from typing import List\n\n\ndef count_integer(lst: List[Any]) -> int:\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef count_integer(lst: List[Any]) -> int:\n\"\"\"\nWrite a python function that returns the number of integer elements in a given list.\nassert count_integer([1,2,'abc',1.2]) == 2\n\"\"\"", "entry_point": "count_integer", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((isinstance(x, int) for x in lst))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for x in lst if isinstance(x, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for elem in lst if isinstance(elem, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((isinstance(item, int) for item in lst))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((isinstance(x, int) for x in lst))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((isinstance(item, int) for item in lst))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for x in lst if isinstance(x, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((isinstance(x, int) for x in lst))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((isinstance(item, int) for item in lst))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((isinstance(x, int) for x in lst))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for x in lst if isinstance(x, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for element in lst if isinstance(element, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for x in lst if isinstance(x, int)))", "from typing import List, Any\n\ndef count_integer(lst: List[Any]) -> int:\n    return sum((1 for item in lst if isinstance(item, int)))"], "outputs": "[[2], [0], [0], [3], [2], [3], [4], [2], [2], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 'abc', 1.2]], [[]], [['string', 3.5, None, {}, []]], [[10, 20, 30]], [[1, '1', 1.0, True]], [[100, -50, 0]], [[True, False, 1, 2]], [[1, 2, '3', '4', [5, 6], (7, 8)]], [[2147483647, -2147483648]], [[1.5, -2.3, 0.0, 'test', 42]]]", "input_output_examples": "[[[[1, 2, 'abc', 1.2]]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/255", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"", "repaired_requirement": "from typing import List, Tuple\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    \"\"\"\n    Write a function that takes in a list and a positive integer n, and generates all combinations with replacement of the elements of the list. \n    The function returns a list containing tuples for each combination. \n    Combinations with replacement ensure that:\n    1. Order does not matter (e.g., ('Red', 'Green') and ('Green', 'Red') are considered the same).\n    2. Repetition of elements is allowed within combinations.\n    This behavior aligns with the use of `itertools.combinations_with_replacement`.\n\n    Example:\n    assert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n\"\"\"\nWrite a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\"\"\"", "entry_point": "combinations_colors", "cluster_list": [{"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List[str], n: int) -> List[Tuple[str]]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))"], "outputs": "[[[('Red',), ('Green',), ('Blue',)]], [[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]], [[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]], [[]], [[('Red',)]], [[('Red', 'Red')]], [[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Red'), ('Green', 'Green'), ('Green', 'Red'), ('Red', 'Red')]], [[()]], [[('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow')]], [[('Red', 'Red', 'Red', 'Red', 'Red'), ('Red', 'Red', 'Red', 'Red', 'Green'), ('Red', 'Red', 'Red', 'Red', 'Blue'), ('Red', 'Red', 'Red', 'Red', 'Yellow'), ('Red', 'Red', 'Red', 'Red', 'Purple'), ('Red', 'Red', 'Red', 'Green', 'Green'), ('Red', 'Red', 'Red', 'Green', 'Blue'), ('Red', 'Red', 'Red', 'Green', 'Yellow'), ('Red', 'Red', 'Red', 'Green', 'Purple'), ('Red', 'Red', 'Red', 'Blue', 'Blue'), ('Red', 'Red', 'Red', 'Blue', 'Yellow'), ('Red', 'Red', 'Red', 'Blue', 'Purple'), ('Red', 'Red', 'Red', 'Yellow', 'Yellow'), ('Red', 'Red', 'Red', 'Yellow', 'Purple'), ('Red', 'Red', 'Red', 'Purple', 'Purple'), ('Red', 'Red', 'Green', 'Green', 'Green'), ('Red', 'Red', 'Green', 'Green', 'Blue'), ('Red', 'Red', 'Green', 'Green', 'Yellow'), ('Red', 'Red', 'Green', 'Green', 'Purple'), ('Red', 'Red', 'Green', 'Blue', 'Blue'), ('Red', 'Red', 'Green', 'Blue', 'Yellow'), ('Red', 'Red', 'Green', 'Blue', 'Purple'), ('Red', 'Red', 'Green', 'Yellow', 'Yellow'), ('Red', 'Red', 'Green', 'Yellow', 'Purple'), ('Red', 'Red', 'Green', 'Purple', 'Purple'), ('Red', 'Red', 'Blue', 'Blue', 'Blue'), ('Red', 'Red', 'Blue', 'Blue', 'Yellow'), ('Red', 'Red', 'Blue', 'Blue', 'Purple'), ('Red', 'Red', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Red', 'Blue', 'Yellow', 'Purple'), ('Red', 'Red', 'Blue', 'Purple', 'Purple'), ('Red', 'Red', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Red', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Red', 'Yellow', 'Purple', 'Purple'), ('Red', 'Red', 'Purple', 'Purple', 'Purple'), ('Red', 'Green', 'Green', 'Green', 'Green'), ('Red', 'Green', 'Green', 'Green', 'Blue'), ('Red', 'Green', 'Green', 'Green', 'Yellow'), ('Red', 'Green', 'Green', 'Green', 'Purple'), ('Red', 'Green', 'Green', 'Blue', 'Blue'), ('Red', 'Green', 'Green', 'Blue', 'Yellow'), ('Red', 'Green', 'Green', 'Blue', 'Purple'), ('Red', 'Green', 'Green', 'Yellow', 'Yellow'), ('Red', 'Green', 'Green', 'Yellow', 'Purple'), ('Red', 'Green', 'Green', 'Purple', 'Purple'), ('Red', 'Green', 'Blue', 'Blue', 'Blue'), ('Red', 'Green', 'Blue', 'Blue', 'Yellow'), ('Red', 'Green', 'Blue', 'Blue', 'Purple'), ('Red', 'Green', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Green', 'Blue', 'Yellow', 'Purple'), ('Red', 'Green', 'Blue', 'Purple', 'Purple'), ('Red', 'Green', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Green', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Green', 'Yellow', 'Purple', 'Purple'), ('Red', 'Green', 'Purple', 'Purple', 'Purple'), ('Red', 'Blue', 'Blue', 'Blue', 'Blue'), ('Red', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Red', 'Blue', 'Blue', 'Blue', 'Purple'), ('Red', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Red', 'Blue', 'Blue', 'Purple', 'Purple'), ('Red', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Red', 'Blue', 'Purple', 'Purple', 'Purple'), ('Red', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Red', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Red', 'Purple', 'Purple', 'Purple', 'Purple'), ('Green', 'Green', 'Green', 'Green', 'Green'), ('Green', 'Green', 'Green', 'Green', 'Blue'), ('Green', 'Green', 'Green', 'Green', 'Yellow'), ('Green', 'Green', 'Green', 'Green', 'Purple'), ('Green', 'Green', 'Green', 'Blue', 'Blue'), ('Green', 'Green', 'Green', 'Blue', 'Yellow'), ('Green', 'Green', 'Green', 'Blue', 'Purple'), ('Green', 'Green', 'Green', 'Yellow', 'Yellow'), ('Green', 'Green', 'Green', 'Yellow', 'Purple'), ('Green', 'Green', 'Green', 'Purple', 'Purple'), ('Green', 'Green', 'Blue', 'Blue', 'Blue'), ('Green', 'Green', 'Blue', 'Blue', 'Yellow'), ('Green', 'Green', 'Blue', 'Blue', 'Purple'), ('Green', 'Green', 'Blue', 'Yellow', 'Yellow'), ('Green', 'Green', 'Blue', 'Yellow', 'Purple'), ('Green', 'Green', 'Blue', 'Purple', 'Purple'), ('Green', 'Green', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Green', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Green', 'Yellow', 'Purple', 'Purple'), ('Green', 'Green', 'Purple', 'Purple', 'Purple'), ('Green', 'Blue', 'Blue', 'Blue', 'Blue'), ('Green', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Green', 'Blue', 'Blue', 'Blue', 'Purple'), ('Green', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Green', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Green', 'Blue', 'Blue', 'Purple', 'Purple'), ('Green', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Green', 'Blue', 'Purple', 'Purple', 'Purple'), ('Green', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Green', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Green', 'Purple', 'Purple', 'Purple', 'Purple'), ('Blue', 'Blue', 'Blue', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Blue', 'Blue', 'Blue', 'Blue', 'Purple'), ('Blue', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Blue', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Blue', 'Blue', 'Blue', 'Purple', 'Purple'), ('Blue', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Blue', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Blue', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Blue', 'Blue', 'Purple', 'Purple', 'Purple'), ('Blue', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Blue', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Blue', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Blue', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Blue', 'Purple', 'Purple', 'Purple', 'Purple'), ('Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Yellow', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Yellow', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Yellow', 'Purple', 'Purple', 'Purple', 'Purple'), ('Purple', 'Purple', 'Purple', 'Purple', 'Purple')]], [[('Black', 'Black', 'Black', 'Black'), ('Black', 'Black', 'Black', 'White'), ('Black', 'Black', 'Black', 'Gray'), ('Black', 'Black', 'White', 'White'), ('Black', 'Black', 'White', 'Gray'), ('Black', 'Black', 'Gray', 'Gray'), ('Black', 'White', 'White', 'White'), ('Black', 'White', 'White', 'Gray'), ('Black', 'White', 'Gray', 'Gray'), ('Black', 'Gray', 'Gray', 'Gray'), ('White', 'White', 'White', 'White'), ('White', 'White', 'White', 'Gray'), ('White', 'White', 'Gray', 'Gray'), ('White', 'Gray', 'Gray', 'Gray'), ('Gray', 'Gray', 'Gray', 'Gray')]]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\nfrom itertools import product\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(product(l, repeat=n))"], "outputs": "[[[('Red',), ('Green',), ('Blue',)]], [[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]], [[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red'), ('Red', 'Blue', 'Green'), ('Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Red'), ('Green', 'Blue', 'Green'), ('Green', 'Blue', 'Blue'), ('Blue', 'Red', 'Red'), ('Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Red'), ('Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Green'), ('Blue', 'Blue', 'Blue')]], [[]], [[('Red',)]], [[('Red', 'Red')]], [[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Red'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Red'), ('Red', 'Red'), ('Red', 'Green'), ('Red', 'Red')]], [[()]], [[('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow')]], [[('Red', 'Red', 'Red', 'Red', 'Red'), ('Red', 'Red', 'Red', 'Red', 'Green'), ('Red', 'Red', 'Red', 'Red', 'Blue'), ('Red', 'Red', 'Red', 'Red', 'Yellow'), ('Red', 'Red', 'Red', 'Red', 'Purple'), ('Red', 'Red', 'Red', 'Green', 'Red'), ('Red', 'Red', 'Red', 'Green', 'Green'), ('Red', 'Red', 'Red', 'Green', 'Blue'), ('Red', 'Red', 'Red', 'Green', 'Yellow'), ('Red', 'Red', 'Red', 'Green', 'Purple'), ('Red', 'Red', 'Red', 'Blue', 'Red'), ('Red', 'Red', 'Red', 'Blue', 'Green'), ('Red', 'Red', 'Red', 'Blue', 'Blue'), ('Red', 'Red', 'Red', 'Blue', 'Yellow'), ('Red', 'Red', 'Red', 'Blue', 'Purple'), ('Red', 'Red', 'Red', 'Yellow', 'Red'), ('Red', 'Red', 'Red', 'Yellow', 'Green'), ('Red', 'Red', 'Red', 'Yellow', 'Blue'), ('Red', 'Red', 'Red', 'Yellow', 'Yellow'), ('Red', 'Red', 'Red', 'Yellow', 'Purple'), ('Red', 'Red', 'Red', 'Purple', 'Red'), ('Red', 'Red', 'Red', 'Purple', 'Green'), ('Red', 'Red', 'Red', 'Purple', 'Blue'), ('Red', 'Red', 'Red', 'Purple', 'Yellow'), ('Red', 'Red', 'Red', 'Purple', 'Purple'), ('Red', 'Red', 'Green', 'Red', 'Red'), ('Red', 'Red', 'Green', 'Red', 'Green'), ('Red', 'Red', 'Green', 'Red', 'Blue'), ('Red', 'Red', 'Green', 'Red', 'Yellow'), ('Red', 'Red', 'Green', 'Red', 'Purple'), ('Red', 'Red', 'Green', 'Green', 'Red'), ('Red', 'Red', 'Green', 'Green', 'Green'), ('Red', 'Red', 'Green', 'Green', 'Blue'), ('Red', 'Red', 'Green', 'Green', 'Yellow'), ('Red', 'Red', 'Green', 'Green', 'Purple'), ('Red', 'Red', 'Green', 'Blue', 'Red'), ('Red', 'Red', 'Green', 'Blue', 'Green'), ('Red', 'Red', 'Green', 'Blue', 'Blue'), ('Red', 'Red', 'Green', 'Blue', 'Yellow'), ('Red', 'Red', 'Green', 'Blue', 'Purple'), ('Red', 'Red', 'Green', 'Yellow', 'Red'), ('Red', 'Red', 'Green', 'Yellow', 'Green'), ('Red', 'Red', 'Green', 'Yellow', 'Blue'), ('Red', 'Red', 'Green', 'Yellow', 'Yellow'), ('Red', 'Red', 'Green', 'Yellow', 'Purple'), ('Red', 'Red', 'Green', 'Purple', 'Red'), ('Red', 'Red', 'Green', 'Purple', 'Green'), ('Red', 'Red', 'Green', 'Purple', 'Blue'), ('Red', 'Red', 'Green', 'Purple', 'Yellow'), ('Red', 'Red', 'Green', 'Purple', 'Purple'), ('Red', 'Red', 'Blue', 'Red', 'Red'), ('Red', 'Red', 'Blue', 'Red', 'Green'), ('Red', 'Red', 'Blue', 'Red', 'Blue'), ('Red', 'Red', 'Blue', 'Red', 'Yellow'), ('Red', 'Red', 'Blue', 'Red', 'Purple'), ('Red', 'Red', 'Blue', 'Green', 'Red'), ('Red', 'Red', 'Blue', 'Green', 'Green'), ('Red', 'Red', 'Blue', 'Green', 'Blue'), ('Red', 'Red', 'Blue', 'Green', 'Yellow'), ('Red', 'Red', 'Blue', 'Green', 'Purple'), ('Red', 'Red', 'Blue', 'Blue', 'Red'), ('Red', 'Red', 'Blue', 'Blue', 'Green'), ('Red', 'Red', 'Blue', 'Blue', 'Blue'), ('Red', 'Red', 'Blue', 'Blue', 'Yellow'), ('Red', 'Red', 'Blue', 'Blue', 'Purple'), ('Red', 'Red', 'Blue', 'Yellow', 'Red'), ('Red', 'Red', 'Blue', 'Yellow', 'Green'), ('Red', 'Red', 'Blue', 'Yellow', 'Blue'), ('Red', 'Red', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Red', 'Blue', 'Yellow', 'Purple'), ('Red', 'Red', 'Blue', 'Purple', 'Red'), ('Red', 'Red', 'Blue', 'Purple', 'Green'), ('Red', 'Red', 'Blue', 'Purple', 'Blue'), ('Red', 'Red', 'Blue', 'Purple', 'Yellow'), ('Red', 'Red', 'Blue', 'Purple', 'Purple'), ('Red', 'Red', 'Yellow', 'Red', 'Red'), ('Red', 'Red', 'Yellow', 'Red', 'Green'), ('Red', 'Red', 'Yellow', 'Red', 'Blue'), ('Red', 'Red', 'Yellow', 'Red', 'Yellow'), ('Red', 'Red', 'Yellow', 'Red', 'Purple'), ('Red', 'Red', 'Yellow', 'Green', 'Red'), ('Red', 'Red', 'Yellow', 'Green', 'Green'), ('Red', 'Red', 'Yellow', 'Green', 'Blue'), ('Red', 'Red', 'Yellow', 'Green', 'Yellow'), ('Red', 'Red', 'Yellow', 'Green', 'Purple'), ('Red', 'Red', 'Yellow', 'Blue', 'Red'), ('Red', 'Red', 'Yellow', 'Blue', 'Green'), ('Red', 'Red', 'Yellow', 'Blue', 'Blue'), ('Red', 'Red', 'Yellow', 'Blue', 'Yellow'), ('Red', 'Red', 'Yellow', 'Blue', 'Purple'), ('Red', 'Red', 'Yellow', 'Yellow', 'Red'), ('Red', 'Red', 'Yellow', 'Yellow', 'Green'), ('Red', 'Red', 'Yellow', 'Yellow', 'Blue'), ('Red', 'Red', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Red', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Red', 'Yellow', 'Purple', 'Red'), ('Red', 'Red', 'Yellow', 'Purple', 'Green'), ('Red', 'Red', 'Yellow', 'Purple', 'Blue'), ('Red', 'Red', 'Yellow', 'Purple', 'Yellow'), ('Red', 'Red', 'Yellow', 'Purple', 'Purple'), ('Red', 'Red', 'Purple', 'Red', 'Red'), ('Red', 'Red', 'Purple', 'Red', 'Green'), ('Red', 'Red', 'Purple', 'Red', 'Blue'), ('Red', 'Red', 'Purple', 'Red', 'Yellow'), ('Red', 'Red', 'Purple', 'Red', 'Purple'), ('Red', 'Red', 'Purple', 'Green', 'Red'), ('Red', 'Red', 'Purple', 'Green', 'Green'), ('Red', 'Red', 'Purple', 'Green', 'Blue'), ('Red', 'Red', 'Purple', 'Green', 'Yellow'), ('Red', 'Red', 'Purple', 'Green', 'Purple'), ('Red', 'Red', 'Purple', 'Blue', 'Red'), ('Red', 'Red', 'Purple', 'Blue', 'Green'), ('Red', 'Red', 'Purple', 'Blue', 'Blue'), ('Red', 'Red', 'Purple', 'Blue', 'Yellow'), ('Red', 'Red', 'Purple', 'Blue', 'Purple'), ('Red', 'Red', 'Purple', 'Yellow', 'Red'), ('Red', 'Red', 'Purple', 'Yellow', 'Green'), ('Red', 'Red', 'Purple', 'Yellow', 'Blue'), ('Red', 'Red', 'Purple', 'Yellow', 'Yellow'), ('Red', 'Red', 'Purple', 'Yellow', 'Purple'), ('Red', 'Red', 'Purple', 'Purple', 'Red'), ('Red', 'Red', 'Purple', 'Purple', 'Green'), ('Red', 'Red', 'Purple', 'Purple', 'Blue'), ('Red', 'Red', 'Purple', 'Purple', 'Yellow'), ('Red', 'Red', 'Purple', 'Purple', 'Purple'), ('Red', 'Green', 'Red', 'Red', 'Red'), ('Red', 'Green', 'Red', 'Red', 'Green'), ('Red', 'Green', 'Red', 'Red', 'Blue'), ('Red', 'Green', 'Red', 'Red', 'Yellow'), ('Red', 'Green', 'Red', 'Red', 'Purple'), ('Red', 'Green', 'Red', 'Green', 'Red'), ('Red', 'Green', 'Red', 'Green', 'Green'), ('Red', 'Green', 'Red', 'Green', 'Blue'), ('Red', 'Green', 'Red', 'Green', 'Yellow'), ('Red', 'Green', 'Red', 'Green', 'Purple'), ('Red', 'Green', 'Red', 'Blue', 'Red'), ('Red', 'Green', 'Red', 'Blue', 'Green'), ('Red', 'Green', 'Red', 'Blue', 'Blue'), ('Red', 'Green', 'Red', 'Blue', 'Yellow'), ('Red', 'Green', 'Red', 'Blue', 'Purple'), ('Red', 'Green', 'Red', 'Yellow', 'Red'), ('Red', 'Green', 'Red', 'Yellow', 'Green'), ('Red', 'Green', 'Red', 'Yellow', 'Blue'), ('Red', 'Green', 'Red', 'Yellow', 'Yellow'), ('Red', 'Green', 'Red', 'Yellow', 'Purple'), ('Red', 'Green', 'Red', 'Purple', 'Red'), ('Red', 'Green', 'Red', 'Purple', 'Green'), ('Red', 'Green', 'Red', 'Purple', 'Blue'), ('Red', 'Green', 'Red', 'Purple', 'Yellow'), ('Red', 'Green', 'Red', 'Purple', 'Purple'), ('Red', 'Green', 'Green', 'Red', 'Red'), ('Red', 'Green', 'Green', 'Red', 'Green'), ('Red', 'Green', 'Green', 'Red', 'Blue'), ('Red', 'Green', 'Green', 'Red', 'Yellow'), ('Red', 'Green', 'Green', 'Red', 'Purple'), ('Red', 'Green', 'Green', 'Green', 'Red'), ('Red', 'Green', 'Green', 'Green', 'Green'), ('Red', 'Green', 'Green', 'Green', 'Blue'), ('Red', 'Green', 'Green', 'Green', 'Yellow'), ('Red', 'Green', 'Green', 'Green', 'Purple'), ('Red', 'Green', 'Green', 'Blue', 'Red'), ('Red', 'Green', 'Green', 'Blue', 'Green'), ('Red', 'Green', 'Green', 'Blue', 'Blue'), ('Red', 'Green', 'Green', 'Blue', 'Yellow'), ('Red', 'Green', 'Green', 'Blue', 'Purple'), ('Red', 'Green', 'Green', 'Yellow', 'Red'), ('Red', 'Green', 'Green', 'Yellow', 'Green'), ('Red', 'Green', 'Green', 'Yellow', 'Blue'), ('Red', 'Green', 'Green', 'Yellow', 'Yellow'), ('Red', 'Green', 'Green', 'Yellow', 'Purple'), ('Red', 'Green', 'Green', 'Purple', 'Red'), ('Red', 'Green', 'Green', 'Purple', 'Green'), ('Red', 'Green', 'Green', 'Purple', 'Blue'), ('Red', 'Green', 'Green', 'Purple', 'Yellow'), ('Red', 'Green', 'Green', 'Purple', 'Purple'), ('Red', 'Green', 'Blue', 'Red', 'Red'), ('Red', 'Green', 'Blue', 'Red', 'Green'), ('Red', 'Green', 'Blue', 'Red', 'Blue'), ('Red', 'Green', 'Blue', 'Red', 'Yellow'), ('Red', 'Green', 'Blue', 'Red', 'Purple'), ('Red', 'Green', 'Blue', 'Green', 'Red'), ('Red', 'Green', 'Blue', 'Green', 'Green'), ('Red', 'Green', 'Blue', 'Green', 'Blue'), ('Red', 'Green', 'Blue', 'Green', 'Yellow'), ('Red', 'Green', 'Blue', 'Green', 'Purple'), ('Red', 'Green', 'Blue', 'Blue', 'Red'), ('Red', 'Green', 'Blue', 'Blue', 'Green'), ('Red', 'Green', 'Blue', 'Blue', 'Blue'), ('Red', 'Green', 'Blue', 'Blue', 'Yellow'), ('Red', 'Green', 'Blue', 'Blue', 'Purple'), ('Red', 'Green', 'Blue', 'Yellow', 'Red'), ('Red', 'Green', 'Blue', 'Yellow', 'Green'), ('Red', 'Green', 'Blue', 'Yellow', 'Blue'), ('Red', 'Green', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Green', 'Blue', 'Yellow', 'Purple'), ('Red', 'Green', 'Blue', 'Purple', 'Red'), ('Red', 'Green', 'Blue', 'Purple', 'Green'), ('Red', 'Green', 'Blue', 'Purple', 'Blue'), ('Red', 'Green', 'Blue', 'Purple', 'Yellow'), ('Red', 'Green', 'Blue', 'Purple', 'Purple'), ('Red', 'Green', 'Yellow', 'Red', 'Red'), ('Red', 'Green', 'Yellow', 'Red', 'Green'), ('Red', 'Green', 'Yellow', 'Red', 'Blue'), ('Red', 'Green', 'Yellow', 'Red', 'Yellow'), ('Red', 'Green', 'Yellow', 'Red', 'Purple'), ('Red', 'Green', 'Yellow', 'Green', 'Red'), ('Red', 'Green', 'Yellow', 'Green', 'Green'), ('Red', 'Green', 'Yellow', 'Green', 'Blue'), ('Red', 'Green', 'Yellow', 'Green', 'Yellow'), ('Red', 'Green', 'Yellow', 'Green', 'Purple'), ('Red', 'Green', 'Yellow', 'Blue', 'Red'), ('Red', 'Green', 'Yellow', 'Blue', 'Green'), ('Red', 'Green', 'Yellow', 'Blue', 'Blue'), ('Red', 'Green', 'Yellow', 'Blue', 'Yellow'), ('Red', 'Green', 'Yellow', 'Blue', 'Purple'), ('Red', 'Green', 'Yellow', 'Yellow', 'Red'), ('Red', 'Green', 'Yellow', 'Yellow', 'Green'), ('Red', 'Green', 'Yellow', 'Yellow', 'Blue'), ('Red', 'Green', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Green', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Green', 'Yellow', 'Purple', 'Red'), ('Red', 'Green', 'Yellow', 'Purple', 'Green'), ('Red', 'Green', 'Yellow', 'Purple', 'Blue'), ('Red', 'Green', 'Yellow', 'Purple', 'Yellow'), ('Red', 'Green', 'Yellow', 'Purple', 'Purple'), ('Red', 'Green', 'Purple', 'Red', 'Red'), ('Red', 'Green', 'Purple', 'Red', 'Green'), ('Red', 'Green', 'Purple', 'Red', 'Blue'), ('Red', 'Green', 'Purple', 'Red', 'Yellow'), ('Red', 'Green', 'Purple', 'Red', 'Purple'), ('Red', 'Green', 'Purple', 'Green', 'Red'), ('Red', 'Green', 'Purple', 'Green', 'Green'), ('Red', 'Green', 'Purple', 'Green', 'Blue'), ('Red', 'Green', 'Purple', 'Green', 'Yellow'), ('Red', 'Green', 'Purple', 'Green', 'Purple'), ('Red', 'Green', 'Purple', 'Blue', 'Red'), ('Red', 'Green', 'Purple', 'Blue', 'Green'), ('Red', 'Green', 'Purple', 'Blue', 'Blue'), ('Red', 'Green', 'Purple', 'Blue', 'Yellow'), ('Red', 'Green', 'Purple', 'Blue', 'Purple'), ('Red', 'Green', 'Purple', 'Yellow', 'Red'), ('Red', 'Green', 'Purple', 'Yellow', 'Green'), ('Red', 'Green', 'Purple', 'Yellow', 'Blue'), ('Red', 'Green', 'Purple', 'Yellow', 'Yellow'), ('Red', 'Green', 'Purple', 'Yellow', 'Purple'), ('Red', 'Green', 'Purple', 'Purple', 'Red'), ('Red', 'Green', 'Purple', 'Purple', 'Green'), ('Red', 'Green', 'Purple', 'Purple', 'Blue'), ('Red', 'Green', 'Purple', 'Purple', 'Yellow'), ('Red', 'Green', 'Purple', 'Purple', 'Purple'), ('Red', 'Blue', 'Red', 'Red', 'Red'), ('Red', 'Blue', 'Red', 'Red', 'Green'), ('Red', 'Blue', 'Red', 'Red', 'Blue'), ('Red', 'Blue', 'Red', 'Red', 'Yellow'), ('Red', 'Blue', 'Red', 'Red', 'Purple'), ('Red', 'Blue', 'Red', 'Green', 'Red'), ('Red', 'Blue', 'Red', 'Green', 'Green'), ('Red', 'Blue', 'Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red', 'Green', 'Yellow'), ('Red', 'Blue', 'Red', 'Green', 'Purple'), ('Red', 'Blue', 'Red', 'Blue', 'Red'), ('Red', 'Blue', 'Red', 'Blue', 'Green'), ('Red', 'Blue', 'Red', 'Blue', 'Blue'), ('Red', 'Blue', 'Red', 'Blue', 'Yellow'), ('Red', 'Blue', 'Red', 'Blue', 'Purple'), ('Red', 'Blue', 'Red', 'Yellow', 'Red'), ('Red', 'Blue', 'Red', 'Yellow', 'Green'), ('Red', 'Blue', 'Red', 'Yellow', 'Blue'), ('Red', 'Blue', 'Red', 'Yellow', 'Yellow'), ('Red', 'Blue', 'Red', 'Yellow', 'Purple'), ('Red', 'Blue', 'Red', 'Purple', 'Red'), ('Red', 'Blue', 'Red', 'Purple', 'Green'), ('Red', 'Blue', 'Red', 'Purple', 'Blue'), ('Red', 'Blue', 'Red', 'Purple', 'Yellow'), ('Red', 'Blue', 'Red', 'Purple', 'Purple'), ('Red', 'Blue', 'Green', 'Red', 'Red'), ('Red', 'Blue', 'Green', 'Red', 'Green'), ('Red', 'Blue', 'Green', 'Red', 'Blue'), ('Red', 'Blue', 'Green', 'Red', 'Yellow'), ('Red', 'Blue', 'Green', 'Red', 'Purple'), ('Red', 'Blue', 'Green', 'Green', 'Red'), ('Red', 'Blue', 'Green', 'Green', 'Green'), ('Red', 'Blue', 'Green', 'Green', 'Blue'), ('Red', 'Blue', 'Green', 'Green', 'Yellow'), ('Red', 'Blue', 'Green', 'Green', 'Purple'), ('Red', 'Blue', 'Green', 'Blue', 'Red'), ('Red', 'Blue', 'Green', 'Blue', 'Green'), ('Red', 'Blue', 'Green', 'Blue', 'Blue'), ('Red', 'Blue', 'Green', 'Blue', 'Yellow'), ('Red', 'Blue', 'Green', 'Blue', 'Purple'), ('Red', 'Blue', 'Green', 'Yellow', 'Red'), ('Red', 'Blue', 'Green', 'Yellow', 'Green'), ('Red', 'Blue', 'Green', 'Yellow', 'Blue'), ('Red', 'Blue', 'Green', 'Yellow', 'Yellow'), ('Red', 'Blue', 'Green', 'Yellow', 'Purple'), ('Red', 'Blue', 'Green', 'Purple', 'Red'), ('Red', 'Blue', 'Green', 'Purple', 'Green'), ('Red', 'Blue', 'Green', 'Purple', 'Blue'), ('Red', 'Blue', 'Green', 'Purple', 'Yellow'), ('Red', 'Blue', 'Green', 'Purple', 'Purple'), ('Red', 'Blue', 'Blue', 'Red', 'Red'), ('Red', 'Blue', 'Blue', 'Red', 'Green'), ('Red', 'Blue', 'Blue', 'Red', 'Blue'), ('Red', 'Blue', 'Blue', 'Red', 'Yellow'), ('Red', 'Blue', 'Blue', 'Red', 'Purple'), ('Red', 'Blue', 'Blue', 'Green', 'Red'), ('Red', 'Blue', 'Blue', 'Green', 'Green'), ('Red', 'Blue', 'Blue', 'Green', 'Blue'), ('Red', 'Blue', 'Blue', 'Green', 'Yellow'), ('Red', 'Blue', 'Blue', 'Green', 'Purple'), ('Red', 'Blue', 'Blue', 'Blue', 'Red'), ('Red', 'Blue', 'Blue', 'Blue', 'Green'), ('Red', 'Blue', 'Blue', 'Blue', 'Blue'), ('Red', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Red', 'Blue', 'Blue', 'Blue', 'Purple'), ('Red', 'Blue', 'Blue', 'Yellow', 'Red'), ('Red', 'Blue', 'Blue', 'Yellow', 'Green'), ('Red', 'Blue', 'Blue', 'Yellow', 'Blue'), ('Red', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Red', 'Blue', 'Blue', 'Purple', 'Red'), ('Red', 'Blue', 'Blue', 'Purple', 'Green'), ('Red', 'Blue', 'Blue', 'Purple', 'Blue'), ('Red', 'Blue', 'Blue', 'Purple', 'Yellow'), ('Red', 'Blue', 'Blue', 'Purple', 'Purple'), ('Red', 'Blue', 'Yellow', 'Red', 'Red'), ('Red', 'Blue', 'Yellow', 'Red', 'Green'), ('Red', 'Blue', 'Yellow', 'Red', 'Blue'), ('Red', 'Blue', 'Yellow', 'Red', 'Yellow'), ('Red', 'Blue', 'Yellow', 'Red', 'Purple'), ('Red', 'Blue', 'Yellow', 'Green', 'Red'), ('Red', 'Blue', 'Yellow', 'Green', 'Green'), ('Red', 'Blue', 'Yellow', 'Green', 'Blue'), ('Red', 'Blue', 'Yellow', 'Green', 'Yellow'), ('Red', 'Blue', 'Yellow', 'Green', 'Purple'), ('Red', 'Blue', 'Yellow', 'Blue', 'Red'), ('Red', 'Blue', 'Yellow', 'Blue', 'Green'), ('Red', 'Blue', 'Yellow', 'Blue', 'Blue'), ('Red', 'Blue', 'Yellow', 'Blue', 'Yellow'), ('Red', 'Blue', 'Yellow', 'Blue', 'Purple'), ('Red', 'Blue', 'Yellow', 'Yellow', 'Red'), ('Red', 'Blue', 'Yellow', 'Yellow', 'Green'), ('Red', 'Blue', 'Yellow', 'Yellow', 'Blue'), ('Red', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Blue', 'Yellow', 'Purple', 'Red'), ('Red', 'Blue', 'Yellow', 'Purple', 'Green'), ('Red', 'Blue', 'Yellow', 'Purple', 'Blue'), ('Red', 'Blue', 'Yellow', 'Purple', 'Yellow'), ('Red', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Red', 'Blue', 'Purple', 'Red', 'Red'), ('Red', 'Blue', 'Purple', 'Red', 'Green'), ('Red', 'Blue', 'Purple', 'Red', 'Blue'), ('Red', 'Blue', 'Purple', 'Red', 'Yellow'), ('Red', 'Blue', 'Purple', 'Red', 'Purple'), ('Red', 'Blue', 'Purple', 'Green', 'Red'), ('Red', 'Blue', 'Purple', 'Green', 'Green'), ('Red', 'Blue', 'Purple', 'Green', 'Blue'), ('Red', 'Blue', 'Purple', 'Green', 'Yellow'), ('Red', 'Blue', 'Purple', 'Green', 'Purple'), ('Red', 'Blue', 'Purple', 'Blue', 'Red'), ('Red', 'Blue', 'Purple', 'Blue', 'Green'), ('Red', 'Blue', 'Purple', 'Blue', 'Blue'), ('Red', 'Blue', 'Purple', 'Blue', 'Yellow'), ('Red', 'Blue', 'Purple', 'Blue', 'Purple'), ('Red', 'Blue', 'Purple', 'Yellow', 'Red'), ('Red', 'Blue', 'Purple', 'Yellow', 'Green'), ('Red', 'Blue', 'Purple', 'Yellow', 'Blue'), ('Red', 'Blue', 'Purple', 'Yellow', 'Yellow'), ('Red', 'Blue', 'Purple', 'Yellow', 'Purple'), ('Red', 'Blue', 'Purple', 'Purple', 'Red'), ('Red', 'Blue', 'Purple', 'Purple', 'Green'), ('Red', 'Blue', 'Purple', 'Purple', 'Blue'), ('Red', 'Blue', 'Purple', 'Purple', 'Yellow'), ('Red', 'Blue', 'Purple', 'Purple', 'Purple'), ('Red', 'Yellow', 'Red', 'Red', 'Red'), ('Red', 'Yellow', 'Red', 'Red', 'Green'), ('Red', 'Yellow', 'Red', 'Red', 'Blue'), ('Red', 'Yellow', 'Red', 'Red', 'Yellow'), ('Red', 'Yellow', 'Red', 'Red', 'Purple'), ('Red', 'Yellow', 'Red', 'Green', 'Red'), ('Red', 'Yellow', 'Red', 'Green', 'Green'), ('Red', 'Yellow', 'Red', 'Green', 'Blue'), ('Red', 'Yellow', 'Red', 'Green', 'Yellow'), ('Red', 'Yellow', 'Red', 'Green', 'Purple'), ('Red', 'Yellow', 'Red', 'Blue', 'Red'), ('Red', 'Yellow', 'Red', 'Blue', 'Green'), ('Red', 'Yellow', 'Red', 'Blue', 'Blue'), ('Red', 'Yellow', 'Red', 'Blue', 'Yellow'), ('Red', 'Yellow', 'Red', 'Blue', 'Purple'), ('Red', 'Yellow', 'Red', 'Yellow', 'Red'), ('Red', 'Yellow', 'Red', 'Yellow', 'Green'), ('Red', 'Yellow', 'Red', 'Yellow', 'Blue'), ('Red', 'Yellow', 'Red', 'Yellow', 'Yellow'), ('Red', 'Yellow', 'Red', 'Yellow', 'Purple'), ('Red', 'Yellow', 'Red', 'Purple', 'Red'), ('Red', 'Yellow', 'Red', 'Purple', 'Green'), ('Red', 'Yellow', 'Red', 'Purple', 'Blue'), ('Red', 'Yellow', 'Red', 'Purple', 'Yellow'), ('Red', 'Yellow', 'Red', 'Purple', 'Purple'), ('Red', 'Yellow', 'Green', 'Red', 'Red'), ('Red', 'Yellow', 'Green', 'Red', 'Green'), ('Red', 'Yellow', 'Green', 'Red', 'Blue'), ('Red', 'Yellow', 'Green', 'Red', 'Yellow'), ('Red', 'Yellow', 'Green', 'Red', 'Purple'), ('Red', 'Yellow', 'Green', 'Green', 'Red'), ('Red', 'Yellow', 'Green', 'Green', 'Green'), ('Red', 'Yellow', 'Green', 'Green', 'Blue'), ('Red', 'Yellow', 'Green', 'Green', 'Yellow'), ('Red', 'Yellow', 'Green', 'Green', 'Purple'), ('Red', 'Yellow', 'Green', 'Blue', 'Red'), ('Red', 'Yellow', 'Green', 'Blue', 'Green'), ('Red', 'Yellow', 'Green', 'Blue', 'Blue'), ('Red', 'Yellow', 'Green', 'Blue', 'Yellow'), ('Red', 'Yellow', 'Green', 'Blue', 'Purple'), ('Red', 'Yellow', 'Green', 'Yellow', 'Red'), ('Red', 'Yellow', 'Green', 'Yellow', 'Green'), ('Red', 'Yellow', 'Green', 'Yellow', 'Blue'), ('Red', 'Yellow', 'Green', 'Yellow', 'Yellow'), ('Red', 'Yellow', 'Green', 'Yellow', 'Purple'), ('Red', 'Yellow', 'Green', 'Purple', 'Red'), ('Red', 'Yellow', 'Green', 'Purple', 'Green'), ('Red', 'Yellow', 'Green', 'Purple', 'Blue'), ('Red', 'Yellow', 'Green', 'Purple', 'Yellow'), ('Red', 'Yellow', 'Green', 'Purple', 'Purple'), ('Red', 'Yellow', 'Blue', 'Red', 'Red'), ('Red', 'Yellow', 'Blue', 'Red', 'Green'), ('Red', 'Yellow', 'Blue', 'Red', 'Blue'), ('Red', 'Yellow', 'Blue', 'Red', 'Yellow'), ('Red', 'Yellow', 'Blue', 'Red', 'Purple'), ('Red', 'Yellow', 'Blue', 'Green', 'Red'), ('Red', 'Yellow', 'Blue', 'Green', 'Green'), ('Red', 'Yellow', 'Blue', 'Green', 'Blue'), ('Red', 'Yellow', 'Blue', 'Green', 'Yellow'), ('Red', 'Yellow', 'Blue', 'Green', 'Purple'), ('Red', 'Yellow', 'Blue', 'Blue', 'Red'), ('Red', 'Yellow', 'Blue', 'Blue', 'Green'), ('Red', 'Yellow', 'Blue', 'Blue', 'Blue'), ('Red', 'Yellow', 'Blue', 'Blue', 'Yellow'), ('Red', 'Yellow', 'Blue', 'Blue', 'Purple'), ('Red', 'Yellow', 'Blue', 'Yellow', 'Red'), ('Red', 'Yellow', 'Blue', 'Yellow', 'Green'), ('Red', 'Yellow', 'Blue', 'Yellow', 'Blue'), ('Red', 'Yellow', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Yellow', 'Blue', 'Yellow', 'Purple'), ('Red', 'Yellow', 'Blue', 'Purple', 'Red'), ('Red', 'Yellow', 'Blue', 'Purple', 'Green'), ('Red', 'Yellow', 'Blue', 'Purple', 'Blue'), ('Red', 'Yellow', 'Blue', 'Purple', 'Yellow'), ('Red', 'Yellow', 'Blue', 'Purple', 'Purple'), ('Red', 'Yellow', 'Yellow', 'Red', 'Red'), ('Red', 'Yellow', 'Yellow', 'Red', 'Green'), ('Red', 'Yellow', 'Yellow', 'Red', 'Blue'), ('Red', 'Yellow', 'Yellow', 'Red', 'Yellow'), ('Red', 'Yellow', 'Yellow', 'Red', 'Purple'), ('Red', 'Yellow', 'Yellow', 'Green', 'Red'), ('Red', 'Yellow', 'Yellow', 'Green', 'Green'), ('Red', 'Yellow', 'Yellow', 'Green', 'Blue'), ('Red', 'Yellow', 'Yellow', 'Green', 'Yellow'), ('Red', 'Yellow', 'Yellow', 'Green', 'Purple'), ('Red', 'Yellow', 'Yellow', 'Blue', 'Red'), ('Red', 'Yellow', 'Yellow', 'Blue', 'Green'), ('Red', 'Yellow', 'Yellow', 'Blue', 'Blue'), ('Red', 'Yellow', 'Yellow', 'Blue', 'Yellow'), ('Red', 'Yellow', 'Yellow', 'Blue', 'Purple'), ('Red', 'Yellow', 'Yellow', 'Yellow', 'Red'), ('Red', 'Yellow', 'Yellow', 'Yellow', 'Green'), ('Red', 'Yellow', 'Yellow', 'Yellow', 'Blue'), ('Red', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Yellow', 'Yellow', 'Purple', 'Red'), ('Red', 'Yellow', 'Yellow', 'Purple', 'Green'), ('Red', 'Yellow', 'Yellow', 'Purple', 'Blue'), ('Red', 'Yellow', 'Yellow', 'Purple', 'Yellow'), ('Red', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Red', 'Yellow', 'Purple', 'Red', 'Red'), ('Red', 'Yellow', 'Purple', 'Red', 'Green'), ('Red', 'Yellow', 'Purple', 'Red', 'Blue'), ('Red', 'Yellow', 'Purple', 'Red', 'Yellow'), ('Red', 'Yellow', 'Purple', 'Red', 'Purple'), ('Red', 'Yellow', 'Purple', 'Green', 'Red'), ('Red', 'Yellow', 'Purple', 'Green', 'Green'), ('Red', 'Yellow', 'Purple', 'Green', 'Blue'), ('Red', 'Yellow', 'Purple', 'Green', 'Yellow'), ('Red', 'Yellow', 'Purple', 'Green', 'Purple'), ('Red', 'Yellow', 'Purple', 'Blue', 'Red'), ('Red', 'Yellow', 'Purple', 'Blue', 'Green'), ('Red', 'Yellow', 'Purple', 'Blue', 'Blue'), ('Red', 'Yellow', 'Purple', 'Blue', 'Yellow'), ('Red', 'Yellow', 'Purple', 'Blue', 'Purple'), ('Red', 'Yellow', 'Purple', 'Yellow', 'Red'), ('Red', 'Yellow', 'Purple', 'Yellow', 'Green'), ('Red', 'Yellow', 'Purple', 'Yellow', 'Blue'), ('Red', 'Yellow', 'Purple', 'Yellow', 'Yellow'), ('Red', 'Yellow', 'Purple', 'Yellow', 'Purple'), ('Red', 'Yellow', 'Purple', 'Purple', 'Red'), ('Red', 'Yellow', 'Purple', 'Purple', 'Green'), ('Red', 'Yellow', 'Purple', 'Purple', 'Blue'), ('Red', 'Yellow', 'Purple', 'Purple', 'Yellow'), ('Red', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Red', 'Purple', 'Red', 'Red', 'Red'), ('Red', 'Purple', 'Red', 'Red', 'Green'), ('Red', 'Purple', 'Red', 'Red', 'Blue'), ('Red', 'Purple', 'Red', 'Red', 'Yellow'), ('Red', 'Purple', 'Red', 'Red', 'Purple'), ('Red', 'Purple', 'Red', 'Green', 'Red'), ('Red', 'Purple', 'Red', 'Green', 'Green'), ('Red', 'Purple', 'Red', 'Green', 'Blue'), ('Red', 'Purple', 'Red', 'Green', 'Yellow'), ('Red', 'Purple', 'Red', 'Green', 'Purple'), ('Red', 'Purple', 'Red', 'Blue', 'Red'), ('Red', 'Purple', 'Red', 'Blue', 'Green'), ('Red', 'Purple', 'Red', 'Blue', 'Blue'), ('Red', 'Purple', 'Red', 'Blue', 'Yellow'), ('Red', 'Purple', 'Red', 'Blue', 'Purple'), ('Red', 'Purple', 'Red', 'Yellow', 'Red'), ('Red', 'Purple', 'Red', 'Yellow', 'Green'), ('Red', 'Purple', 'Red', 'Yellow', 'Blue'), ('Red', 'Purple', 'Red', 'Yellow', 'Yellow'), ('Red', 'Purple', 'Red', 'Yellow', 'Purple'), ('Red', 'Purple', 'Red', 'Purple', 'Red'), ('Red', 'Purple', 'Red', 'Purple', 'Green'), ('Red', 'Purple', 'Red', 'Purple', 'Blue'), ('Red', 'Purple', 'Red', 'Purple', 'Yellow'), ('Red', 'Purple', 'Red', 'Purple', 'Purple'), ('Red', 'Purple', 'Green', 'Red', 'Red'), ('Red', 'Purple', 'Green', 'Red', 'Green'), ('Red', 'Purple', 'Green', 'Red', 'Blue'), ('Red', 'Purple', 'Green', 'Red', 'Yellow'), ('Red', 'Purple', 'Green', 'Red', 'Purple'), ('Red', 'Purple', 'Green', 'Green', 'Red'), ('Red', 'Purple', 'Green', 'Green', 'Green'), ('Red', 'Purple', 'Green', 'Green', 'Blue'), ('Red', 'Purple', 'Green', 'Green', 'Yellow'), ('Red', 'Purple', 'Green', 'Green', 'Purple'), ('Red', 'Purple', 'Green', 'Blue', 'Red'), ('Red', 'Purple', 'Green', 'Blue', 'Green'), ('Red', 'Purple', 'Green', 'Blue', 'Blue'), ('Red', 'Purple', 'Green', 'Blue', 'Yellow'), ('Red', 'Purple', 'Green', 'Blue', 'Purple'), ('Red', 'Purple', 'Green', 'Yellow', 'Red'), ('Red', 'Purple', 'Green', 'Yellow', 'Green'), ('Red', 'Purple', 'Green', 'Yellow', 'Blue'), ('Red', 'Purple', 'Green', 'Yellow', 'Yellow'), ('Red', 'Purple', 'Green', 'Yellow', 'Purple'), ('Red', 'Purple', 'Green', 'Purple', 'Red'), ('Red', 'Purple', 'Green', 'Purple', 'Green'), ('Red', 'Purple', 'Green', 'Purple', 'Blue'), ('Red', 'Purple', 'Green', 'Purple', 'Yellow'), ('Red', 'Purple', 'Green', 'Purple', 'Purple'), ('Red', 'Purple', 'Blue', 'Red', 'Red'), ('Red', 'Purple', 'Blue', 'Red', 'Green'), ('Red', 'Purple', 'Blue', 'Red', 'Blue'), ('Red', 'Purple', 'Blue', 'Red', 'Yellow'), ('Red', 'Purple', 'Blue', 'Red', 'Purple'), ('Red', 'Purple', 'Blue', 'Green', 'Red'), ('Red', 'Purple', 'Blue', 'Green', 'Green'), ('Red', 'Purple', 'Blue', 'Green', 'Blue'), ('Red', 'Purple', 'Blue', 'Green', 'Yellow'), ('Red', 'Purple', 'Blue', 'Green', 'Purple'), ('Red', 'Purple', 'Blue', 'Blue', 'Red'), ('Red', 'Purple', 'Blue', 'Blue', 'Green'), ('Red', 'Purple', 'Blue', 'Blue', 'Blue'), ('Red', 'Purple', 'Blue', 'Blue', 'Yellow'), ('Red', 'Purple', 'Blue', 'Blue', 'Purple'), ('Red', 'Purple', 'Blue', 'Yellow', 'Red'), ('Red', 'Purple', 'Blue', 'Yellow', 'Green'), ('Red', 'Purple', 'Blue', 'Yellow', 'Blue'), ('Red', 'Purple', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Purple', 'Blue', 'Yellow', 'Purple'), ('Red', 'Purple', 'Blue', 'Purple', 'Red'), ('Red', 'Purple', 'Blue', 'Purple', 'Green'), ('Red', 'Purple', 'Blue', 'Purple', 'Blue'), ('Red', 'Purple', 'Blue', 'Purple', 'Yellow'), ('Red', 'Purple', 'Blue', 'Purple', 'Purple'), ('Red', 'Purple', 'Yellow', 'Red', 'Red'), ('Red', 'Purple', 'Yellow', 'Red', 'Green'), ('Red', 'Purple', 'Yellow', 'Red', 'Blue'), ('Red', 'Purple', 'Yellow', 'Red', 'Yellow'), ('Red', 'Purple', 'Yellow', 'Red', 'Purple'), ('Red', 'Purple', 'Yellow', 'Green', 'Red'), ('Red', 'Purple', 'Yellow', 'Green', 'Green'), ('Red', 'Purple', 'Yellow', 'Green', 'Blue'), ('Red', 'Purple', 'Yellow', 'Green', 'Yellow'), ('Red', 'Purple', 'Yellow', 'Green', 'Purple'), ('Red', 'Purple', 'Yellow', 'Blue', 'Red'), ('Red', 'Purple', 'Yellow', 'Blue', 'Green'), ('Red', 'Purple', 'Yellow', 'Blue', 'Blue'), ('Red', 'Purple', 'Yellow', 'Blue', 'Yellow'), ('Red', 'Purple', 'Yellow', 'Blue', 'Purple'), ('Red', 'Purple', 'Yellow', 'Yellow', 'Red'), ('Red', 'Purple', 'Yellow', 'Yellow', 'Green'), ('Red', 'Purple', 'Yellow', 'Yellow', 'Blue'), ('Red', 'Purple', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Purple', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Purple', 'Yellow', 'Purple', 'Red'), ('Red', 'Purple', 'Yellow', 'Purple', 'Green'), ('Red', 'Purple', 'Yellow', 'Purple', 'Blue'), ('Red', 'Purple', 'Yellow', 'Purple', 'Yellow'), ('Red', 'Purple', 'Yellow', 'Purple', 'Purple'), ('Red', 'Purple', 'Purple', 'Red', 'Red'), ('Red', 'Purple', 'Purple', 'Red', 'Green'), ('Red', 'Purple', 'Purple', 'Red', 'Blue'), ('Red', 'Purple', 'Purple', 'Red', 'Yellow'), ('Red', 'Purple', 'Purple', 'Red', 'Purple'), ('Red', 'Purple', 'Purple', 'Green', 'Red'), ('Red', 'Purple', 'Purple', 'Green', 'Green'), ('Red', 'Purple', 'Purple', 'Green', 'Blue'), ('Red', 'Purple', 'Purple', 'Green', 'Yellow'), ('Red', 'Purple', 'Purple', 'Green', 'Purple'), ('Red', 'Purple', 'Purple', 'Blue', 'Red'), ('Red', 'Purple', 'Purple', 'Blue', 'Green'), ('Red', 'Purple', 'Purple', 'Blue', 'Blue'), ('Red', 'Purple', 'Purple', 'Blue', 'Yellow'), ('Red', 'Purple', 'Purple', 'Blue', 'Purple'), ('Red', 'Purple', 'Purple', 'Yellow', 'Red'), ('Red', 'Purple', 'Purple', 'Yellow', 'Green'), ('Red', 'Purple', 'Purple', 'Yellow', 'Blue'), ('Red', 'Purple', 'Purple', 'Yellow', 'Yellow'), ('Red', 'Purple', 'Purple', 'Yellow', 'Purple'), ('Red', 'Purple', 'Purple', 'Purple', 'Red'), ('Red', 'Purple', 'Purple', 'Purple', 'Green'), ('Red', 'Purple', 'Purple', 'Purple', 'Blue'), ('Red', 'Purple', 'Purple', 'Purple', 'Yellow'), ('Red', 'Purple', 'Purple', 'Purple', 'Purple'), ('Green', 'Red', 'Red', 'Red', 'Red'), ('Green', 'Red', 'Red', 'Red', 'Green'), ('Green', 'Red', 'Red', 'Red', 'Blue'), ('Green', 'Red', 'Red', 'Red', 'Yellow'), ('Green', 'Red', 'Red', 'Red', 'Purple'), ('Green', 'Red', 'Red', 'Green', 'Red'), ('Green', 'Red', 'Red', 'Green', 'Green'), ('Green', 'Red', 'Red', 'Green', 'Blue'), ('Green', 'Red', 'Red', 'Green', 'Yellow'), ('Green', 'Red', 'Red', 'Green', 'Purple'), ('Green', 'Red', 'Red', 'Blue', 'Red'), ('Green', 'Red', 'Red', 'Blue', 'Green'), ('Green', 'Red', 'Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red', 'Blue', 'Yellow'), ('Green', 'Red', 'Red', 'Blue', 'Purple'), ('Green', 'Red', 'Red', 'Yellow', 'Red'), ('Green', 'Red', 'Red', 'Yellow', 'Green'), ('Green', 'Red', 'Red', 'Yellow', 'Blue'), ('Green', 'Red', 'Red', 'Yellow', 'Yellow'), ('Green', 'Red', 'Red', 'Yellow', 'Purple'), ('Green', 'Red', 'Red', 'Purple', 'Red'), ('Green', 'Red', 'Red', 'Purple', 'Green'), ('Green', 'Red', 'Red', 'Purple', 'Blue'), ('Green', 'Red', 'Red', 'Purple', 'Yellow'), ('Green', 'Red', 'Red', 'Purple', 'Purple'), ('Green', 'Red', 'Green', 'Red', 'Red'), ('Green', 'Red', 'Green', 'Red', 'Green'), ('Green', 'Red', 'Green', 'Red', 'Blue'), ('Green', 'Red', 'Green', 'Red', 'Yellow'), ('Green', 'Red', 'Green', 'Red', 'Purple'), ('Green', 'Red', 'Green', 'Green', 'Red'), ('Green', 'Red', 'Green', 'Green', 'Green'), ('Green', 'Red', 'Green', 'Green', 'Blue'), ('Green', 'Red', 'Green', 'Green', 'Yellow'), ('Green', 'Red', 'Green', 'Green', 'Purple'), ('Green', 'Red', 'Green', 'Blue', 'Red'), ('Green', 'Red', 'Green', 'Blue', 'Green'), ('Green', 'Red', 'Green', 'Blue', 'Blue'), ('Green', 'Red', 'Green', 'Blue', 'Yellow'), ('Green', 'Red', 'Green', 'Blue', 'Purple'), ('Green', 'Red', 'Green', 'Yellow', 'Red'), ('Green', 'Red', 'Green', 'Yellow', 'Green'), ('Green', 'Red', 'Green', 'Yellow', 'Blue'), ('Green', 'Red', 'Green', 'Yellow', 'Yellow'), ('Green', 'Red', 'Green', 'Yellow', 'Purple'), ('Green', 'Red', 'Green', 'Purple', 'Red'), ('Green', 'Red', 'Green', 'Purple', 'Green'), ('Green', 'Red', 'Green', 'Purple', 'Blue'), ('Green', 'Red', 'Green', 'Purple', 'Yellow'), ('Green', 'Red', 'Green', 'Purple', 'Purple'), ('Green', 'Red', 'Blue', 'Red', 'Red'), ('Green', 'Red', 'Blue', 'Red', 'Green'), ('Green', 'Red', 'Blue', 'Red', 'Blue'), ('Green', 'Red', 'Blue', 'Red', 'Yellow'), ('Green', 'Red', 'Blue', 'Red', 'Purple'), ('Green', 'Red', 'Blue', 'Green', 'Red'), ('Green', 'Red', 'Blue', 'Green', 'Green'), ('Green', 'Red', 'Blue', 'Green', 'Blue'), ('Green', 'Red', 'Blue', 'Green', 'Yellow'), ('Green', 'Red', 'Blue', 'Green', 'Purple'), ('Green', 'Red', 'Blue', 'Blue', 'Red'), ('Green', 'Red', 'Blue', 'Blue', 'Green'), ('Green', 'Red', 'Blue', 'Blue', 'Blue'), ('Green', 'Red', 'Blue', 'Blue', 'Yellow'), ('Green', 'Red', 'Blue', 'Blue', 'Purple'), ('Green', 'Red', 'Blue', 'Yellow', 'Red'), ('Green', 'Red', 'Blue', 'Yellow', 'Green'), ('Green', 'Red', 'Blue', 'Yellow', 'Blue'), ('Green', 'Red', 'Blue', 'Yellow', 'Yellow'), ('Green', 'Red', 'Blue', 'Yellow', 'Purple'), ('Green', 'Red', 'Blue', 'Purple', 'Red'), ('Green', 'Red', 'Blue', 'Purple', 'Green'), ('Green', 'Red', 'Blue', 'Purple', 'Blue'), ('Green', 'Red', 'Blue', 'Purple', 'Yellow'), ('Green', 'Red', 'Blue', 'Purple', 'Purple'), ('Green', 'Red', 'Yellow', 'Red', 'Red'), ('Green', 'Red', 'Yellow', 'Red', 'Green'), ('Green', 'Red', 'Yellow', 'Red', 'Blue'), ('Green', 'Red', 'Yellow', 'Red', 'Yellow'), ('Green', 'Red', 'Yellow', 'Red', 'Purple'), ('Green', 'Red', 'Yellow', 'Green', 'Red'), ('Green', 'Red', 'Yellow', 'Green', 'Green'), ('Green', 'Red', 'Yellow', 'Green', 'Blue'), ('Green', 'Red', 'Yellow', 'Green', 'Yellow'), ('Green', 'Red', 'Yellow', 'Green', 'Purple'), ('Green', 'Red', 'Yellow', 'Blue', 'Red'), ('Green', 'Red', 'Yellow', 'Blue', 'Green'), ('Green', 'Red', 'Yellow', 'Blue', 'Blue'), ('Green', 'Red', 'Yellow', 'Blue', 'Yellow'), ('Green', 'Red', 'Yellow', 'Blue', 'Purple'), ('Green', 'Red', 'Yellow', 'Yellow', 'Red'), ('Green', 'Red', 'Yellow', 'Yellow', 'Green'), ('Green', 'Red', 'Yellow', 'Yellow', 'Blue'), ('Green', 'Red', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Red', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Red', 'Yellow', 'Purple', 'Red'), ('Green', 'Red', 'Yellow', 'Purple', 'Green'), ('Green', 'Red', 'Yellow', 'Purple', 'Blue'), ('Green', 'Red', 'Yellow', 'Purple', 'Yellow'), ('Green', 'Red', 'Yellow', 'Purple', 'Purple'), ('Green', 'Red', 'Purple', 'Red', 'Red'), ('Green', 'Red', 'Purple', 'Red', 'Green'), ('Green', 'Red', 'Purple', 'Red', 'Blue'), ('Green', 'Red', 'Purple', 'Red', 'Yellow'), ('Green', 'Red', 'Purple', 'Red', 'Purple'), ('Green', 'Red', 'Purple', 'Green', 'Red'), ('Green', 'Red', 'Purple', 'Green', 'Green'), ('Green', 'Red', 'Purple', 'Green', 'Blue'), ('Green', 'Red', 'Purple', 'Green', 'Yellow'), ('Green', 'Red', 'Purple', 'Green', 'Purple'), ('Green', 'Red', 'Purple', 'Blue', 'Red'), ('Green', 'Red', 'Purple', 'Blue', 'Green'), ('Green', 'Red', 'Purple', 'Blue', 'Blue'), ('Green', 'Red', 'Purple', 'Blue', 'Yellow'), ('Green', 'Red', 'Purple', 'Blue', 'Purple'), ('Green', 'Red', 'Purple', 'Yellow', 'Red'), ('Green', 'Red', 'Purple', 'Yellow', 'Green'), ('Green', 'Red', 'Purple', 'Yellow', 'Blue'), ('Green', 'Red', 'Purple', 'Yellow', 'Yellow'), ('Green', 'Red', 'Purple', 'Yellow', 'Purple'), ('Green', 'Red', 'Purple', 'Purple', 'Red'), ('Green', 'Red', 'Purple', 'Purple', 'Green'), ('Green', 'Red', 'Purple', 'Purple', 'Blue'), ('Green', 'Red', 'Purple', 'Purple', 'Yellow'), ('Green', 'Red', 'Purple', 'Purple', 'Purple'), ('Green', 'Green', 'Red', 'Red', 'Red'), ('Green', 'Green', 'Red', 'Red', 'Green'), ('Green', 'Green', 'Red', 'Red', 'Blue'), ('Green', 'Green', 'Red', 'Red', 'Yellow'), ('Green', 'Green', 'Red', 'Red', 'Purple'), ('Green', 'Green', 'Red', 'Green', 'Red'), ('Green', 'Green', 'Red', 'Green', 'Green'), ('Green', 'Green', 'Red', 'Green', 'Blue'), ('Green', 'Green', 'Red', 'Green', 'Yellow'), ('Green', 'Green', 'Red', 'Green', 'Purple'), ('Green', 'Green', 'Red', 'Blue', 'Red'), ('Green', 'Green', 'Red', 'Blue', 'Green'), ('Green', 'Green', 'Red', 'Blue', 'Blue'), ('Green', 'Green', 'Red', 'Blue', 'Yellow'), ('Green', 'Green', 'Red', 'Blue', 'Purple'), ('Green', 'Green', 'Red', 'Yellow', 'Red'), ('Green', 'Green', 'Red', 'Yellow', 'Green'), ('Green', 'Green', 'Red', 'Yellow', 'Blue'), ('Green', 'Green', 'Red', 'Yellow', 'Yellow'), ('Green', 'Green', 'Red', 'Yellow', 'Purple'), ('Green', 'Green', 'Red', 'Purple', 'Red'), ('Green', 'Green', 'Red', 'Purple', 'Green'), ('Green', 'Green', 'Red', 'Purple', 'Blue'), ('Green', 'Green', 'Red', 'Purple', 'Yellow'), ('Green', 'Green', 'Red', 'Purple', 'Purple'), ('Green', 'Green', 'Green', 'Red', 'Red'), ('Green', 'Green', 'Green', 'Red', 'Green'), ('Green', 'Green', 'Green', 'Red', 'Blue'), ('Green', 'Green', 'Green', 'Red', 'Yellow'), ('Green', 'Green', 'Green', 'Red', 'Purple'), ('Green', 'Green', 'Green', 'Green', 'Red'), ('Green', 'Green', 'Green', 'Green', 'Green'), ('Green', 'Green', 'Green', 'Green', 'Blue'), ('Green', 'Green', 'Green', 'Green', 'Yellow'), ('Green', 'Green', 'Green', 'Green', 'Purple'), ('Green', 'Green', 'Green', 'Blue', 'Red'), ('Green', 'Green', 'Green', 'Blue', 'Green'), ('Green', 'Green', 'Green', 'Blue', 'Blue'), ('Green', 'Green', 'Green', 'Blue', 'Yellow'), ('Green', 'Green', 'Green', 'Blue', 'Purple'), ('Green', 'Green', 'Green', 'Yellow', 'Red'), ('Green', 'Green', 'Green', 'Yellow', 'Green'), ('Green', 'Green', 'Green', 'Yellow', 'Blue'), ('Green', 'Green', 'Green', 'Yellow', 'Yellow'), ('Green', 'Green', 'Green', 'Yellow', 'Purple'), ('Green', 'Green', 'Green', 'Purple', 'Red'), ('Green', 'Green', 'Green', 'Purple', 'Green'), ('Green', 'Green', 'Green', 'Purple', 'Blue'), ('Green', 'Green', 'Green', 'Purple', 'Yellow'), ('Green', 'Green', 'Green', 'Purple', 'Purple'), ('Green', 'Green', 'Blue', 'Red', 'Red'), ('Green', 'Green', 'Blue', 'Red', 'Green'), ('Green', 'Green', 'Blue', 'Red', 'Blue'), ('Green', 'Green', 'Blue', 'Red', 'Yellow'), ('Green', 'Green', 'Blue', 'Red', 'Purple'), ('Green', 'Green', 'Blue', 'Green', 'Red'), ('Green', 'Green', 'Blue', 'Green', 'Green'), ('Green', 'Green', 'Blue', 'Green', 'Blue'), ('Green', 'Green', 'Blue', 'Green', 'Yellow'), ('Green', 'Green', 'Blue', 'Green', 'Purple'), ('Green', 'Green', 'Blue', 'Blue', 'Red'), ('Green', 'Green', 'Blue', 'Blue', 'Green'), ('Green', 'Green', 'Blue', 'Blue', 'Blue'), ('Green', 'Green', 'Blue', 'Blue', 'Yellow'), ('Green', 'Green', 'Blue', 'Blue', 'Purple'), ('Green', 'Green', 'Blue', 'Yellow', 'Red'), ('Green', 'Green', 'Blue', 'Yellow', 'Green'), ('Green', 'Green', 'Blue', 'Yellow', 'Blue'), ('Green', 'Green', 'Blue', 'Yellow', 'Yellow'), ('Green', 'Green', 'Blue', 'Yellow', 'Purple'), ('Green', 'Green', 'Blue', 'Purple', 'Red'), ('Green', 'Green', 'Blue', 'Purple', 'Green'), ('Green', 'Green', 'Blue', 'Purple', 'Blue'), ('Green', 'Green', 'Blue', 'Purple', 'Yellow'), ('Green', 'Green', 'Blue', 'Purple', 'Purple'), ('Green', 'Green', 'Yellow', 'Red', 'Red'), ('Green', 'Green', 'Yellow', 'Red', 'Green'), ('Green', 'Green', 'Yellow', 'Red', 'Blue'), ('Green', 'Green', 'Yellow', 'Red', 'Yellow'), ('Green', 'Green', 'Yellow', 'Red', 'Purple'), ('Green', 'Green', 'Yellow', 'Green', 'Red'), ('Green', 'Green', 'Yellow', 'Green', 'Green'), ('Green', 'Green', 'Yellow', 'Green', 'Blue'), ('Green', 'Green', 'Yellow', 'Green', 'Yellow'), ('Green', 'Green', 'Yellow', 'Green', 'Purple'), ('Green', 'Green', 'Yellow', 'Blue', 'Red'), ('Green', 'Green', 'Yellow', 'Blue', 'Green'), ('Green', 'Green', 'Yellow', 'Blue', 'Blue'), ('Green', 'Green', 'Yellow', 'Blue', 'Yellow'), ('Green', 'Green', 'Yellow', 'Blue', 'Purple'), ('Green', 'Green', 'Yellow', 'Yellow', 'Red'), ('Green', 'Green', 'Yellow', 'Yellow', 'Green'), ('Green', 'Green', 'Yellow', 'Yellow', 'Blue'), ('Green', 'Green', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Green', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Green', 'Yellow', 'Purple', 'Red'), ('Green', 'Green', 'Yellow', 'Purple', 'Green'), ('Green', 'Green', 'Yellow', 'Purple', 'Blue'), ('Green', 'Green', 'Yellow', 'Purple', 'Yellow'), ('Green', 'Green', 'Yellow', 'Purple', 'Purple'), ('Green', 'Green', 'Purple', 'Red', 'Red'), ('Green', 'Green', 'Purple', 'Red', 'Green'), ('Green', 'Green', 'Purple', 'Red', 'Blue'), ('Green', 'Green', 'Purple', 'Red', 'Yellow'), ('Green', 'Green', 'Purple', 'Red', 'Purple'), ('Green', 'Green', 'Purple', 'Green', 'Red'), ('Green', 'Green', 'Purple', 'Green', 'Green'), ('Green', 'Green', 'Purple', 'Green', 'Blue'), ('Green', 'Green', 'Purple', 'Green', 'Yellow'), ('Green', 'Green', 'Purple', 'Green', 'Purple'), ('Green', 'Green', 'Purple', 'Blue', 'Red'), ('Green', 'Green', 'Purple', 'Blue', 'Green'), ('Green', 'Green', 'Purple', 'Blue', 'Blue'), ('Green', 'Green', 'Purple', 'Blue', 'Yellow'), ('Green', 'Green', 'Purple', 'Blue', 'Purple'), ('Green', 'Green', 'Purple', 'Yellow', 'Red'), ('Green', 'Green', 'Purple', 'Yellow', 'Green'), ('Green', 'Green', 'Purple', 'Yellow', 'Blue'), ('Green', 'Green', 'Purple', 'Yellow', 'Yellow'), ('Green', 'Green', 'Purple', 'Yellow', 'Purple'), ('Green', 'Green', 'Purple', 'Purple', 'Red'), ('Green', 'Green', 'Purple', 'Purple', 'Green'), ('Green', 'Green', 'Purple', 'Purple', 'Blue'), ('Green', 'Green', 'Purple', 'Purple', 'Yellow'), ('Green', 'Green', 'Purple', 'Purple', 'Purple'), ('Green', 'Blue', 'Red', 'Red', 'Red'), ('Green', 'Blue', 'Red', 'Red', 'Green'), ('Green', 'Blue', 'Red', 'Red', 'Blue'), ('Green', 'Blue', 'Red', 'Red', 'Yellow'), ('Green', 'Blue', 'Red', 'Red', 'Purple'), ('Green', 'Blue', 'Red', 'Green', 'Red'), ('Green', 'Blue', 'Red', 'Green', 'Green'), ('Green', 'Blue', 'Red', 'Green', 'Blue'), ('Green', 'Blue', 'Red', 'Green', 'Yellow'), ('Green', 'Blue', 'Red', 'Green', 'Purple'), ('Green', 'Blue', 'Red', 'Blue', 'Red'), ('Green', 'Blue', 'Red', 'Blue', 'Green'), ('Green', 'Blue', 'Red', 'Blue', 'Blue'), ('Green', 'Blue', 'Red', 'Blue', 'Yellow'), ('Green', 'Blue', 'Red', 'Blue', 'Purple'), ('Green', 'Blue', 'Red', 'Yellow', 'Red'), ('Green', 'Blue', 'Red', 'Yellow', 'Green'), ('Green', 'Blue', 'Red', 'Yellow', 'Blue'), ('Green', 'Blue', 'Red', 'Yellow', 'Yellow'), ('Green', 'Blue', 'Red', 'Yellow', 'Purple'), ('Green', 'Blue', 'Red', 'Purple', 'Red'), ('Green', 'Blue', 'Red', 'Purple', 'Green'), ('Green', 'Blue', 'Red', 'Purple', 'Blue'), ('Green', 'Blue', 'Red', 'Purple', 'Yellow'), ('Green', 'Blue', 'Red', 'Purple', 'Purple'), ('Green', 'Blue', 'Green', 'Red', 'Red'), ('Green', 'Blue', 'Green', 'Red', 'Green'), ('Green', 'Blue', 'Green', 'Red', 'Blue'), ('Green', 'Blue', 'Green', 'Red', 'Yellow'), ('Green', 'Blue', 'Green', 'Red', 'Purple'), ('Green', 'Blue', 'Green', 'Green', 'Red'), ('Green', 'Blue', 'Green', 'Green', 'Green'), ('Green', 'Blue', 'Green', 'Green', 'Blue'), ('Green', 'Blue', 'Green', 'Green', 'Yellow'), ('Green', 'Blue', 'Green', 'Green', 'Purple'), ('Green', 'Blue', 'Green', 'Blue', 'Red'), ('Green', 'Blue', 'Green', 'Blue', 'Green'), ('Green', 'Blue', 'Green', 'Blue', 'Blue'), ('Green', 'Blue', 'Green', 'Blue', 'Yellow'), ('Green', 'Blue', 'Green', 'Blue', 'Purple'), ('Green', 'Blue', 'Green', 'Yellow', 'Red'), ('Green', 'Blue', 'Green', 'Yellow', 'Green'), ('Green', 'Blue', 'Green', 'Yellow', 'Blue'), ('Green', 'Blue', 'Green', 'Yellow', 'Yellow'), ('Green', 'Blue', 'Green', 'Yellow', 'Purple'), ('Green', 'Blue', 'Green', 'Purple', 'Red'), ('Green', 'Blue', 'Green', 'Purple', 'Green'), ('Green', 'Blue', 'Green', 'Purple', 'Blue'), ('Green', 'Blue', 'Green', 'Purple', 'Yellow'), ('Green', 'Blue', 'Green', 'Purple', 'Purple'), ('Green', 'Blue', 'Blue', 'Red', 'Red'), ('Green', 'Blue', 'Blue', 'Red', 'Green'), ('Green', 'Blue', 'Blue', 'Red', 'Blue'), ('Green', 'Blue', 'Blue', 'Red', 'Yellow'), ('Green', 'Blue', 'Blue', 'Red', 'Purple'), ('Green', 'Blue', 'Blue', 'Green', 'Red'), ('Green', 'Blue', 'Blue', 'Green', 'Green'), ('Green', 'Blue', 'Blue', 'Green', 'Blue'), ('Green', 'Blue', 'Blue', 'Green', 'Yellow'), ('Green', 'Blue', 'Blue', 'Green', 'Purple'), ('Green', 'Blue', 'Blue', 'Blue', 'Red'), ('Green', 'Blue', 'Blue', 'Blue', 'Green'), ('Green', 'Blue', 'Blue', 'Blue', 'Blue'), ('Green', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Green', 'Blue', 'Blue', 'Blue', 'Purple'), ('Green', 'Blue', 'Blue', 'Yellow', 'Red'), ('Green', 'Blue', 'Blue', 'Yellow', 'Green'), ('Green', 'Blue', 'Blue', 'Yellow', 'Blue'), ('Green', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Green', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Green', 'Blue', 'Blue', 'Purple', 'Red'), ('Green', 'Blue', 'Blue', 'Purple', 'Green'), ('Green', 'Blue', 'Blue', 'Purple', 'Blue'), ('Green', 'Blue', 'Blue', 'Purple', 'Yellow'), ('Green', 'Blue', 'Blue', 'Purple', 'Purple'), ('Green', 'Blue', 'Yellow', 'Red', 'Red'), ('Green', 'Blue', 'Yellow', 'Red', 'Green'), ('Green', 'Blue', 'Yellow', 'Red', 'Blue'), ('Green', 'Blue', 'Yellow', 'Red', 'Yellow'), ('Green', 'Blue', 'Yellow', 'Red', 'Purple'), ('Green', 'Blue', 'Yellow', 'Green', 'Red'), ('Green', 'Blue', 'Yellow', 'Green', 'Green'), ('Green', 'Blue', 'Yellow', 'Green', 'Blue'), ('Green', 'Blue', 'Yellow', 'Green', 'Yellow'), ('Green', 'Blue', 'Yellow', 'Green', 'Purple'), ('Green', 'Blue', 'Yellow', 'Blue', 'Red'), ('Green', 'Blue', 'Yellow', 'Blue', 'Green'), ('Green', 'Blue', 'Yellow', 'Blue', 'Blue'), ('Green', 'Blue', 'Yellow', 'Blue', 'Yellow'), ('Green', 'Blue', 'Yellow', 'Blue', 'Purple'), ('Green', 'Blue', 'Yellow', 'Yellow', 'Red'), ('Green', 'Blue', 'Yellow', 'Yellow', 'Green'), ('Green', 'Blue', 'Yellow', 'Yellow', 'Blue'), ('Green', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Blue', 'Yellow', 'Purple', 'Red'), ('Green', 'Blue', 'Yellow', 'Purple', 'Green'), ('Green', 'Blue', 'Yellow', 'Purple', 'Blue'), ('Green', 'Blue', 'Yellow', 'Purple', 'Yellow'), ('Green', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Green', 'Blue', 'Purple', 'Red', 'Red'), ('Green', 'Blue', 'Purple', 'Red', 'Green'), ('Green', 'Blue', 'Purple', 'Red', 'Blue'), ('Green', 'Blue', 'Purple', 'Red', 'Yellow'), ('Green', 'Blue', 'Purple', 'Red', 'Purple'), ('Green', 'Blue', 'Purple', 'Green', 'Red'), ('Green', 'Blue', 'Purple', 'Green', 'Green'), ('Green', 'Blue', 'Purple', 'Green', 'Blue'), ('Green', 'Blue', 'Purple', 'Green', 'Yellow'), ('Green', 'Blue', 'Purple', 'Green', 'Purple'), ('Green', 'Blue', 'Purple', 'Blue', 'Red'), ('Green', 'Blue', 'Purple', 'Blue', 'Green'), ('Green', 'Blue', 'Purple', 'Blue', 'Blue'), ('Green', 'Blue', 'Purple', 'Blue', 'Yellow'), ('Green', 'Blue', 'Purple', 'Blue', 'Purple'), ('Green', 'Blue', 'Purple', 'Yellow', 'Red'), ('Green', 'Blue', 'Purple', 'Yellow', 'Green'), ('Green', 'Blue', 'Purple', 'Yellow', 'Blue'), ('Green', 'Blue', 'Purple', 'Yellow', 'Yellow'), ('Green', 'Blue', 'Purple', 'Yellow', 'Purple'), ('Green', 'Blue', 'Purple', 'Purple', 'Red'), ('Green', 'Blue', 'Purple', 'Purple', 'Green'), ('Green', 'Blue', 'Purple', 'Purple', 'Blue'), ('Green', 'Blue', 'Purple', 'Purple', 'Yellow'), ('Green', 'Blue', 'Purple', 'Purple', 'Purple'), ('Green', 'Yellow', 'Red', 'Red', 'Red'), ('Green', 'Yellow', 'Red', 'Red', 'Green'), ('Green', 'Yellow', 'Red', 'Red', 'Blue'), ('Green', 'Yellow', 'Red', 'Red', 'Yellow'), ('Green', 'Yellow', 'Red', 'Red', 'Purple'), ('Green', 'Yellow', 'Red', 'Green', 'Red'), ('Green', 'Yellow', 'Red', 'Green', 'Green'), ('Green', 'Yellow', 'Red', 'Green', 'Blue'), ('Green', 'Yellow', 'Red', 'Green', 'Yellow'), ('Green', 'Yellow', 'Red', 'Green', 'Purple'), ('Green', 'Yellow', 'Red', 'Blue', 'Red'), ('Green', 'Yellow', 'Red', 'Blue', 'Green'), ('Green', 'Yellow', 'Red', 'Blue', 'Blue'), ('Green', 'Yellow', 'Red', 'Blue', 'Yellow'), ('Green', 'Yellow', 'Red', 'Blue', 'Purple'), ('Green', 'Yellow', 'Red', 'Yellow', 'Red'), ('Green', 'Yellow', 'Red', 'Yellow', 'Green'), ('Green', 'Yellow', 'Red', 'Yellow', 'Blue'), ('Green', 'Yellow', 'Red', 'Yellow', 'Yellow'), ('Green', 'Yellow', 'Red', 'Yellow', 'Purple'), ('Green', 'Yellow', 'Red', 'Purple', 'Red'), ('Green', 'Yellow', 'Red', 'Purple', 'Green'), ('Green', 'Yellow', 'Red', 'Purple', 'Blue'), ('Green', 'Yellow', 'Red', 'Purple', 'Yellow'), ('Green', 'Yellow', 'Red', 'Purple', 'Purple'), ('Green', 'Yellow', 'Green', 'Red', 'Red'), ('Green', 'Yellow', 'Green', 'Red', 'Green'), ('Green', 'Yellow', 'Green', 'Red', 'Blue'), ('Green', 'Yellow', 'Green', 'Red', 'Yellow'), ('Green', 'Yellow', 'Green', 'Red', 'Purple'), ('Green', 'Yellow', 'Green', 'Green', 'Red'), ('Green', 'Yellow', 'Green', 'Green', 'Green'), ('Green', 'Yellow', 'Green', 'Green', 'Blue'), ('Green', 'Yellow', 'Green', 'Green', 'Yellow'), ('Green', 'Yellow', 'Green', 'Green', 'Purple'), ('Green', 'Yellow', 'Green', 'Blue', 'Red'), ('Green', 'Yellow', 'Green', 'Blue', 'Green'), ('Green', 'Yellow', 'Green', 'Blue', 'Blue'), ('Green', 'Yellow', 'Green', 'Blue', 'Yellow'), ('Green', 'Yellow', 'Green', 'Blue', 'Purple'), ('Green', 'Yellow', 'Green', 'Yellow', 'Red'), ('Green', 'Yellow', 'Green', 'Yellow', 'Green'), ('Green', 'Yellow', 'Green', 'Yellow', 'Blue'), ('Green', 'Yellow', 'Green', 'Yellow', 'Yellow'), ('Green', 'Yellow', 'Green', 'Yellow', 'Purple'), ('Green', 'Yellow', 'Green', 'Purple', 'Red'), ('Green', 'Yellow', 'Green', 'Purple', 'Green'), ('Green', 'Yellow', 'Green', 'Purple', 'Blue'), ('Green', 'Yellow', 'Green', 'Purple', 'Yellow'), ('Green', 'Yellow', 'Green', 'Purple', 'Purple'), ('Green', 'Yellow', 'Blue', 'Red', 'Red'), ('Green', 'Yellow', 'Blue', 'Red', 'Green'), ('Green', 'Yellow', 'Blue', 'Red', 'Blue'), ('Green', 'Yellow', 'Blue', 'Red', 'Yellow'), ('Green', 'Yellow', 'Blue', 'Red', 'Purple'), ('Green', 'Yellow', 'Blue', 'Green', 'Red'), ('Green', 'Yellow', 'Blue', 'Green', 'Green'), ('Green', 'Yellow', 'Blue', 'Green', 'Blue'), ('Green', 'Yellow', 'Blue', 'Green', 'Yellow'), ('Green', 'Yellow', 'Blue', 'Green', 'Purple'), ('Green', 'Yellow', 'Blue', 'Blue', 'Red'), ('Green', 'Yellow', 'Blue', 'Blue', 'Green'), ('Green', 'Yellow', 'Blue', 'Blue', 'Blue'), ('Green', 'Yellow', 'Blue', 'Blue', 'Yellow'), ('Green', 'Yellow', 'Blue', 'Blue', 'Purple'), ('Green', 'Yellow', 'Blue', 'Yellow', 'Red'), ('Green', 'Yellow', 'Blue', 'Yellow', 'Green'), ('Green', 'Yellow', 'Blue', 'Yellow', 'Blue'), ('Green', 'Yellow', 'Blue', 'Yellow', 'Yellow'), ('Green', 'Yellow', 'Blue', 'Yellow', 'Purple'), ('Green', 'Yellow', 'Blue', 'Purple', 'Red'), ('Green', 'Yellow', 'Blue', 'Purple', 'Green'), ('Green', 'Yellow', 'Blue', 'Purple', 'Blue'), ('Green', 'Yellow', 'Blue', 'Purple', 'Yellow'), ('Green', 'Yellow', 'Blue', 'Purple', 'Purple'), ('Green', 'Yellow', 'Yellow', 'Red', 'Red'), ('Green', 'Yellow', 'Yellow', 'Red', 'Green'), ('Green', 'Yellow', 'Yellow', 'Red', 'Blue'), ('Green', 'Yellow', 'Yellow', 'Red', 'Yellow'), ('Green', 'Yellow', 'Yellow', 'Red', 'Purple'), ('Green', 'Yellow', 'Yellow', 'Green', 'Red'), ('Green', 'Yellow', 'Yellow', 'Green', 'Green'), ('Green', 'Yellow', 'Yellow', 'Green', 'Blue'), ('Green', 'Yellow', 'Yellow', 'Green', 'Yellow'), ('Green', 'Yellow', 'Yellow', 'Green', 'Purple'), ('Green', 'Yellow', 'Yellow', 'Blue', 'Red'), ('Green', 'Yellow', 'Yellow', 'Blue', 'Green'), ('Green', 'Yellow', 'Yellow', 'Blue', 'Blue'), ('Green', 'Yellow', 'Yellow', 'Blue', 'Yellow'), ('Green', 'Yellow', 'Yellow', 'Blue', 'Purple'), ('Green', 'Yellow', 'Yellow', 'Yellow', 'Red'), ('Green', 'Yellow', 'Yellow', 'Yellow', 'Green'), ('Green', 'Yellow', 'Yellow', 'Yellow', 'Blue'), ('Green', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Yellow', 'Yellow', 'Purple', 'Red'), ('Green', 'Yellow', 'Yellow', 'Purple', 'Green'), ('Green', 'Yellow', 'Yellow', 'Purple', 'Blue'), ('Green', 'Yellow', 'Yellow', 'Purple', 'Yellow'), ('Green', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Green', 'Yellow', 'Purple', 'Red', 'Red'), ('Green', 'Yellow', 'Purple', 'Red', 'Green'), ('Green', 'Yellow', 'Purple', 'Red', 'Blue'), ('Green', 'Yellow', 'Purple', 'Red', 'Yellow'), ('Green', 'Yellow', 'Purple', 'Red', 'Purple'), ('Green', 'Yellow', 'Purple', 'Green', 'Red'), ('Green', 'Yellow', 'Purple', 'Green', 'Green'), ('Green', 'Yellow', 'Purple', 'Green', 'Blue'), ('Green', 'Yellow', 'Purple', 'Green', 'Yellow'), ('Green', 'Yellow', 'Purple', 'Green', 'Purple'), ('Green', 'Yellow', 'Purple', 'Blue', 'Red'), ('Green', 'Yellow', 'Purple', 'Blue', 'Green'), ('Green', 'Yellow', 'Purple', 'Blue', 'Blue'), ('Green', 'Yellow', 'Purple', 'Blue', 'Yellow'), ('Green', 'Yellow', 'Purple', 'Blue', 'Purple'), ('Green', 'Yellow', 'Purple', 'Yellow', 'Red'), ('Green', 'Yellow', 'Purple', 'Yellow', 'Green'), ('Green', 'Yellow', 'Purple', 'Yellow', 'Blue'), ('Green', 'Yellow', 'Purple', 'Yellow', 'Yellow'), ('Green', 'Yellow', 'Purple', 'Yellow', 'Purple'), ('Green', 'Yellow', 'Purple', 'Purple', 'Red'), ('Green', 'Yellow', 'Purple', 'Purple', 'Green'), ('Green', 'Yellow', 'Purple', 'Purple', 'Blue'), ('Green', 'Yellow', 'Purple', 'Purple', 'Yellow'), ('Green', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Green', 'Purple', 'Red', 'Red', 'Red'), ('Green', 'Purple', 'Red', 'Red', 'Green'), ('Green', 'Purple', 'Red', 'Red', 'Blue'), ('Green', 'Purple', 'Red', 'Red', 'Yellow'), ('Green', 'Purple', 'Red', 'Red', 'Purple'), ('Green', 'Purple', 'Red', 'Green', 'Red'), ('Green', 'Purple', 'Red', 'Green', 'Green'), ('Green', 'Purple', 'Red', 'Green', 'Blue'), ('Green', 'Purple', 'Red', 'Green', 'Yellow'), ('Green', 'Purple', 'Red', 'Green', 'Purple'), ('Green', 'Purple', 'Red', 'Blue', 'Red'), ('Green', 'Purple', 'Red', 'Blue', 'Green'), ('Green', 'Purple', 'Red', 'Blue', 'Blue'), ('Green', 'Purple', 'Red', 'Blue', 'Yellow'), ('Green', 'Purple', 'Red', 'Blue', 'Purple'), ('Green', 'Purple', 'Red', 'Yellow', 'Red'), ('Green', 'Purple', 'Red', 'Yellow', 'Green'), ('Green', 'Purple', 'Red', 'Yellow', 'Blue'), ('Green', 'Purple', 'Red', 'Yellow', 'Yellow'), ('Green', 'Purple', 'Red', 'Yellow', 'Purple'), ('Green', 'Purple', 'Red', 'Purple', 'Red'), ('Green', 'Purple', 'Red', 'Purple', 'Green'), ('Green', 'Purple', 'Red', 'Purple', 'Blue'), ('Green', 'Purple', 'Red', 'Purple', 'Yellow'), ('Green', 'Purple', 'Red', 'Purple', 'Purple'), ('Green', 'Purple', 'Green', 'Red', 'Red'), ('Green', 'Purple', 'Green', 'Red', 'Green'), ('Green', 'Purple', 'Green', 'Red', 'Blue'), ('Green', 'Purple', 'Green', 'Red', 'Yellow'), ('Green', 'Purple', 'Green', 'Red', 'Purple'), ('Green', 'Purple', 'Green', 'Green', 'Red'), ('Green', 'Purple', 'Green', 'Green', 'Green'), ('Green', 'Purple', 'Green', 'Green', 'Blue'), ('Green', 'Purple', 'Green', 'Green', 'Yellow'), ('Green', 'Purple', 'Green', 'Green', 'Purple'), ('Green', 'Purple', 'Green', 'Blue', 'Red'), ('Green', 'Purple', 'Green', 'Blue', 'Green'), ('Green', 'Purple', 'Green', 'Blue', 'Blue'), ('Green', 'Purple', 'Green', 'Blue', 'Yellow'), ('Green', 'Purple', 'Green', 'Blue', 'Purple'), ('Green', 'Purple', 'Green', 'Yellow', 'Red'), ('Green', 'Purple', 'Green', 'Yellow', 'Green'), ('Green', 'Purple', 'Green', 'Yellow', 'Blue'), ('Green', 'Purple', 'Green', 'Yellow', 'Yellow'), ('Green', 'Purple', 'Green', 'Yellow', 'Purple'), ('Green', 'Purple', 'Green', 'Purple', 'Red'), ('Green', 'Purple', 'Green', 'Purple', 'Green'), ('Green', 'Purple', 'Green', 'Purple', 'Blue'), ('Green', 'Purple', 'Green', 'Purple', 'Yellow'), ('Green', 'Purple', 'Green', 'Purple', 'Purple'), ('Green', 'Purple', 'Blue', 'Red', 'Red'), ('Green', 'Purple', 'Blue', 'Red', 'Green'), ('Green', 'Purple', 'Blue', 'Red', 'Blue'), ('Green', 'Purple', 'Blue', 'Red', 'Yellow'), ('Green', 'Purple', 'Blue', 'Red', 'Purple'), ('Green', 'Purple', 'Blue', 'Green', 'Red'), ('Green', 'Purple', 'Blue', 'Green', 'Green'), ('Green', 'Purple', 'Blue', 'Green', 'Blue'), ('Green', 'Purple', 'Blue', 'Green', 'Yellow'), ('Green', 'Purple', 'Blue', 'Green', 'Purple'), ('Green', 'Purple', 'Blue', 'Blue', 'Red'), ('Green', 'Purple', 'Blue', 'Blue', 'Green'), ('Green', 'Purple', 'Blue', 'Blue', 'Blue'), ('Green', 'Purple', 'Blue', 'Blue', 'Yellow'), ('Green', 'Purple', 'Blue', 'Blue', 'Purple'), ('Green', 'Purple', 'Blue', 'Yellow', 'Red'), ('Green', 'Purple', 'Blue', 'Yellow', 'Green'), ('Green', 'Purple', 'Blue', 'Yellow', 'Blue'), ('Green', 'Purple', 'Blue', 'Yellow', 'Yellow'), ('Green', 'Purple', 'Blue', 'Yellow', 'Purple'), ('Green', 'Purple', 'Blue', 'Purple', 'Red'), ('Green', 'Purple', 'Blue', 'Purple', 'Green'), ('Green', 'Purple', 'Blue', 'Purple', 'Blue'), ('Green', 'Purple', 'Blue', 'Purple', 'Yellow'), ('Green', 'Purple', 'Blue', 'Purple', 'Purple'), ('Green', 'Purple', 'Yellow', 'Red', 'Red'), ('Green', 'Purple', 'Yellow', 'Red', 'Green'), ('Green', 'Purple', 'Yellow', 'Red', 'Blue'), ('Green', 'Purple', 'Yellow', 'Red', 'Yellow'), ('Green', 'Purple', 'Yellow', 'Red', 'Purple'), ('Green', 'Purple', 'Yellow', 'Green', 'Red'), ('Green', 'Purple', 'Yellow', 'Green', 'Green'), ('Green', 'Purple', 'Yellow', 'Green', 'Blue'), ('Green', 'Purple', 'Yellow', 'Green', 'Yellow'), ('Green', 'Purple', 'Yellow', 'Green', 'Purple'), ('Green', 'Purple', 'Yellow', 'Blue', 'Red'), ('Green', 'Purple', 'Yellow', 'Blue', 'Green'), ('Green', 'Purple', 'Yellow', 'Blue', 'Blue'), ('Green', 'Purple', 'Yellow', 'Blue', 'Yellow'), ('Green', 'Purple', 'Yellow', 'Blue', 'Purple'), ('Green', 'Purple', 'Yellow', 'Yellow', 'Red'), ('Green', 'Purple', 'Yellow', 'Yellow', 'Green'), ('Green', 'Purple', 'Yellow', 'Yellow', 'Blue'), ('Green', 'Purple', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Purple', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Purple', 'Yellow', 'Purple', 'Red'), ('Green', 'Purple', 'Yellow', 'Purple', 'Green'), ('Green', 'Purple', 'Yellow', 'Purple', 'Blue'), ('Green', 'Purple', 'Yellow', 'Purple', 'Yellow'), ('Green', 'Purple', 'Yellow', 'Purple', 'Purple'), ('Green', 'Purple', 'Purple', 'Red', 'Red'), ('Green', 'Purple', 'Purple', 'Red', 'Green'), ('Green', 'Purple', 'Purple', 'Red', 'Blue'), ('Green', 'Purple', 'Purple', 'Red', 'Yellow'), ('Green', 'Purple', 'Purple', 'Red', 'Purple'), ('Green', 'Purple', 'Purple', 'Green', 'Red'), ('Green', 'Purple', 'Purple', 'Green', 'Green'), ('Green', 'Purple', 'Purple', 'Green', 'Blue'), ('Green', 'Purple', 'Purple', 'Green', 'Yellow'), ('Green', 'Purple', 'Purple', 'Green', 'Purple'), ('Green', 'Purple', 'Purple', 'Blue', 'Red'), ('Green', 'Purple', 'Purple', 'Blue', 'Green'), ('Green', 'Purple', 'Purple', 'Blue', 'Blue'), ('Green', 'Purple', 'Purple', 'Blue', 'Yellow'), ('Green', 'Purple', 'Purple', 'Blue', 'Purple'), ('Green', 'Purple', 'Purple', 'Yellow', 'Red'), ('Green', 'Purple', 'Purple', 'Yellow', 'Green'), ('Green', 'Purple', 'Purple', 'Yellow', 'Blue'), ('Green', 'Purple', 'Purple', 'Yellow', 'Yellow'), ('Green', 'Purple', 'Purple', 'Yellow', 'Purple'), ('Green', 'Purple', 'Purple', 'Purple', 'Red'), ('Green', 'Purple', 'Purple', 'Purple', 'Green'), ('Green', 'Purple', 'Purple', 'Purple', 'Blue'), ('Green', 'Purple', 'Purple', 'Purple', 'Yellow'), ('Green', 'Purple', 'Purple', 'Purple', 'Purple'), ('Blue', 'Red', 'Red', 'Red', 'Red'), ('Blue', 'Red', 'Red', 'Red', 'Green'), ('Blue', 'Red', 'Red', 'Red', 'Blue'), ('Blue', 'Red', 'Red', 'Red', 'Yellow'), ('Blue', 'Red', 'Red', 'Red', 'Purple'), ('Blue', 'Red', 'Red', 'Green', 'Red'), ('Blue', 'Red', 'Red', 'Green', 'Green'), ('Blue', 'Red', 'Red', 'Green', 'Blue'), ('Blue', 'Red', 'Red', 'Green', 'Yellow'), ('Blue', 'Red', 'Red', 'Green', 'Purple'), ('Blue', 'Red', 'Red', 'Blue', 'Red'), ('Blue', 'Red', 'Red', 'Blue', 'Green'), ('Blue', 'Red', 'Red', 'Blue', 'Blue'), ('Blue', 'Red', 'Red', 'Blue', 'Yellow'), ('Blue', 'Red', 'Red', 'Blue', 'Purple'), ('Blue', 'Red', 'Red', 'Yellow', 'Red'), ('Blue', 'Red', 'Red', 'Yellow', 'Green'), ('Blue', 'Red', 'Red', 'Yellow', 'Blue'), ('Blue', 'Red', 'Red', 'Yellow', 'Yellow'), ('Blue', 'Red', 'Red', 'Yellow', 'Purple'), ('Blue', 'Red', 'Red', 'Purple', 'Red'), ('Blue', 'Red', 'Red', 'Purple', 'Green'), ('Blue', 'Red', 'Red', 'Purple', 'Blue'), ('Blue', 'Red', 'Red', 'Purple', 'Yellow'), ('Blue', 'Red', 'Red', 'Purple', 'Purple'), ('Blue', 'Red', 'Green', 'Red', 'Red'), ('Blue', 'Red', 'Green', 'Red', 'Green'), ('Blue', 'Red', 'Green', 'Red', 'Blue'), ('Blue', 'Red', 'Green', 'Red', 'Yellow'), ('Blue', 'Red', 'Green', 'Red', 'Purple'), ('Blue', 'Red', 'Green', 'Green', 'Red'), ('Blue', 'Red', 'Green', 'Green', 'Green'), ('Blue', 'Red', 'Green', 'Green', 'Blue'), ('Blue', 'Red', 'Green', 'Green', 'Yellow'), ('Blue', 'Red', 'Green', 'Green', 'Purple'), ('Blue', 'Red', 'Green', 'Blue', 'Red'), ('Blue', 'Red', 'Green', 'Blue', 'Green'), ('Blue', 'Red', 'Green', 'Blue', 'Blue'), ('Blue', 'Red', 'Green', 'Blue', 'Yellow'), ('Blue', 'Red', 'Green', 'Blue', 'Purple'), ('Blue', 'Red', 'Green', 'Yellow', 'Red'), ('Blue', 'Red', 'Green', 'Yellow', 'Green'), ('Blue', 'Red', 'Green', 'Yellow', 'Blue'), ('Blue', 'Red', 'Green', 'Yellow', 'Yellow'), ('Blue', 'Red', 'Green', 'Yellow', 'Purple'), ('Blue', 'Red', 'Green', 'Purple', 'Red'), ('Blue', 'Red', 'Green', 'Purple', 'Green'), ('Blue', 'Red', 'Green', 'Purple', 'Blue'), ('Blue', 'Red', 'Green', 'Purple', 'Yellow'), ('Blue', 'Red', 'Green', 'Purple', 'Purple'), ('Blue', 'Red', 'Blue', 'Red', 'Red'), ('Blue', 'Red', 'Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue', 'Red', 'Blue'), ('Blue', 'Red', 'Blue', 'Red', 'Yellow'), ('Blue', 'Red', 'Blue', 'Red', 'Purple'), ('Blue', 'Red', 'Blue', 'Green', 'Red'), ('Blue', 'Red', 'Blue', 'Green', 'Green'), ('Blue', 'Red', 'Blue', 'Green', 'Blue'), ('Blue', 'Red', 'Blue', 'Green', 'Yellow'), ('Blue', 'Red', 'Blue', 'Green', 'Purple'), ('Blue', 'Red', 'Blue', 'Blue', 'Red'), ('Blue', 'Red', 'Blue', 'Blue', 'Green'), ('Blue', 'Red', 'Blue', 'Blue', 'Blue'), ('Blue', 'Red', 'Blue', 'Blue', 'Yellow'), ('Blue', 'Red', 'Blue', 'Blue', 'Purple'), ('Blue', 'Red', 'Blue', 'Yellow', 'Red'), ('Blue', 'Red', 'Blue', 'Yellow', 'Green'), ('Blue', 'Red', 'Blue', 'Yellow', 'Blue'), ('Blue', 'Red', 'Blue', 'Yellow', 'Yellow'), ('Blue', 'Red', 'Blue', 'Yellow', 'Purple'), ('Blue', 'Red', 'Blue', 'Purple', 'Red'), ('Blue', 'Red', 'Blue', 'Purple', 'Green'), ('Blue', 'Red', 'Blue', 'Purple', 'Blue'), ('Blue', 'Red', 'Blue', 'Purple', 'Yellow'), ('Blue', 'Red', 'Blue', 'Purple', 'Purple'), ('Blue', 'Red', 'Yellow', 'Red', 'Red'), ('Blue', 'Red', 'Yellow', 'Red', 'Green'), ('Blue', 'Red', 'Yellow', 'Red', 'Blue'), ('Blue', 'Red', 'Yellow', 'Red', 'Yellow'), ('Blue', 'Red', 'Yellow', 'Red', 'Purple'), ('Blue', 'Red', 'Yellow', 'Green', 'Red'), ('Blue', 'Red', 'Yellow', 'Green', 'Green'), ('Blue', 'Red', 'Yellow', 'Green', 'Blue'), ('Blue', 'Red', 'Yellow', 'Green', 'Yellow'), ('Blue', 'Red', 'Yellow', 'Green', 'Purple'), ('Blue', 'Red', 'Yellow', 'Blue', 'Red'), ('Blue', 'Red', 'Yellow', 'Blue', 'Green'), ('Blue', 'Red', 'Yellow', 'Blue', 'Blue'), ('Blue', 'Red', 'Yellow', 'Blue', 'Yellow'), ('Blue', 'Red', 'Yellow', 'Blue', 'Purple'), ('Blue', 'Red', 'Yellow', 'Yellow', 'Red'), ('Blue', 'Red', 'Yellow', 'Yellow', 'Green'), ('Blue', 'Red', 'Yellow', 'Yellow', 'Blue'), ('Blue', 'Red', 'Yellow', 'Yellow', 'Yellow'), ('Blue', 'Red', 'Yellow', 'Yellow', 'Purple'), ('Blue', 'Red', 'Yellow', 'Purple', 'Red'), ('Blue', 'Red', 'Yellow', 'Purple', 'Green'), ('Blue', 'Red', 'Yellow', 'Purple', 'Blue'), ('Blue', 'Red', 'Yellow', 'Purple', 'Yellow'), ('Blue', 'Red', 'Yellow', 'Purple', 'Purple'), ('Blue', 'Red', 'Purple', 'Red', 'Red'), ('Blue', 'Red', 'Purple', 'Red', 'Green'), ('Blue', 'Red', 'Purple', 'Red', 'Blue'), ('Blue', 'Red', 'Purple', 'Red', 'Yellow'), ('Blue', 'Red', 'Purple', 'Red', 'Purple'), ('Blue', 'Red', 'Purple', 'Green', 'Red'), ('Blue', 'Red', 'Purple', 'Green', 'Green'), ('Blue', 'Red', 'Purple', 'Green', 'Blue'), ('Blue', 'Red', 'Purple', 'Green', 'Yellow'), ('Blue', 'Red', 'Purple', 'Green', 'Purple'), ('Blue', 'Red', 'Purple', 'Blue', 'Red'), ('Blue', 'Red', 'Purple', 'Blue', 'Green'), ('Blue', 'Red', 'Purple', 'Blue', 'Blue'), ('Blue', 'Red', 'Purple', 'Blue', 'Yellow'), ('Blue', 'Red', 'Purple', 'Blue', 'Purple'), ('Blue', 'Red', 'Purple', 'Yellow', 'Red'), ('Blue', 'Red', 'Purple', 'Yellow', 'Green'), ('Blue', 'Red', 'Purple', 'Yellow', 'Blue'), ('Blue', 'Red', 'Purple', 'Yellow', 'Yellow'), ('Blue', 'Red', 'Purple', 'Yellow', 'Purple'), ('Blue', 'Red', 'Purple', 'Purple', 'Red'), ('Blue', 'Red', 'Purple', 'Purple', 'Green'), ('Blue', 'Red', 'Purple', 'Purple', 'Blue'), ('Blue', 'Red', 'Purple', 'Purple', 'Yellow'), ('Blue', 'Red', 'Purple', 'Purple', 'Purple'), ('Blue', 'Green', 'Red', 'Red', 'Red'), ('Blue', 'Green', 'Red', 'Red', 'Green'), ('Blue', 'Green', 'Red', 'Red', 'Blue'), ('Blue', 'Green', 'Red', 'Red', 'Yellow'), ('Blue', 'Green', 'Red', 'Red', 'Purple'), ('Blue', 'Green', 'Red', 'Green', 'Red'), ('Blue', 'Green', 'Red', 'Green', 'Green'), ('Blue', 'Green', 'Red', 'Green', 'Blue'), ('Blue', 'Green', 'Red', 'Green', 'Yellow'), ('Blue', 'Green', 'Red', 'Green', 'Purple'), ('Blue', 'Green', 'Red', 'Blue', 'Red'), ('Blue', 'Green', 'Red', 'Blue', 'Green'), ('Blue', 'Green', 'Red', 'Blue', 'Blue'), ('Blue', 'Green', 'Red', 'Blue', 'Yellow'), ('Blue', 'Green', 'Red', 'Blue', 'Purple'), ('Blue', 'Green', 'Red', 'Yellow', 'Red'), ('Blue', 'Green', 'Red', 'Yellow', 'Green'), ('Blue', 'Green', 'Red', 'Yellow', 'Blue'), ('Blue', 'Green', 'Red', 'Yellow', 'Yellow'), ('Blue', 'Green', 'Red', 'Yellow', 'Purple'), ('Blue', 'Green', 'Red', 'Purple', 'Red'), ('Blue', 'Green', 'Red', 'Purple', 'Green'), ('Blue', 'Green', 'Red', 'Purple', 'Blue'), ('Blue', 'Green', 'Red', 'Purple', 'Yellow'), ('Blue', 'Green', 'Red', 'Purple', 'Purple'), ('Blue', 'Green', 'Green', 'Red', 'Red'), ('Blue', 'Green', 'Green', 'Red', 'Green'), ('Blue', 'Green', 'Green', 'Red', 'Blue'), ('Blue', 'Green', 'Green', 'Red', 'Yellow'), ('Blue', 'Green', 'Green', 'Red', 'Purple'), ('Blue', 'Green', 'Green', 'Green', 'Red'), ('Blue', 'Green', 'Green', 'Green', 'Green'), ('Blue', 'Green', 'Green', 'Green', 'Blue'), ('Blue', 'Green', 'Green', 'Green', 'Yellow'), ('Blue', 'Green', 'Green', 'Green', 'Purple'), ('Blue', 'Green', 'Green', 'Blue', 'Red'), ('Blue', 'Green', 'Green', 'Blue', 'Green'), ('Blue', 'Green', 'Green', 'Blue', 'Blue'), ('Blue', 'Green', 'Green', 'Blue', 'Yellow'), ('Blue', 'Green', 'Green', 'Blue', 'Purple'), ('Blue', 'Green', 'Green', 'Yellow', 'Red'), ('Blue', 'Green', 'Green', 'Yellow', 'Green'), ('Blue', 'Green', 'Green', 'Yellow', 'Blue'), ('Blue', 'Green', 'Green', 'Yellow', 'Yellow'), ('Blue', 'Green', 'Green', 'Yellow', 'Purple'), ('Blue', 'Green', 'Green', 'Purple', 'Red'), ('Blue', 'Green', 'Green', 'Purple', 'Green'), ('Blue', 'Green', 'Green', 'Purple', 'Blue'), ('Blue', 'Green', 'Green', 'Purple', 'Yellow'), ('Blue', 'Green', 'Green', 'Purple', 'Purple'), ('Blue', 'Green', 'Blue', 'Red', 'Red'), ('Blue', 'Green', 'Blue', 'Red', 'Green'), ('Blue', 'Green', 'Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Blue', 'Red', 'Yellow'), ('Blue', 'Green', 'Blue', 'Red', 'Purple'), ('Blue', 'Green', 'Blue', 'Green', 'Red'), ('Blue', 'Green', 'Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue', 'Green', 'Blue'), ('Blue', 'Green', 'Blue', 'Green', 'Yellow'), ('Blue', 'Green', 'Blue', 'Green', 'Purple'), ('Blue', 'Green', 'Blue', 'Blue', 'Red'), ('Blue', 'Green', 'Blue', 'Blue', 'Green'), ('Blue', 'Green', 'Blue', 'Blue', 'Blue'), ('Blue', 'Green', 'Blue', 'Blue', 'Yellow'), ('Blue', 'Green', 'Blue', 'Blue', 'Purple'), ('Blue', 'Green', 'Blue', 'Yellow', 'Red'), ('Blue', 'Green', 'Blue', 'Yellow', 'Green'), ('Blue', 'Green', 'Blue', 'Yellow', 'Blue'), ('Blue', 'Green', 'Blue', 'Yellow', 'Yellow'), ('Blue', 'Green', 'Blue', 'Yellow', 'Purple'), ('Blue', 'Green', 'Blue', 'Purple', 'Red'), ('Blue', 'Green', 'Blue', 'Purple', 'Green'), ('Blue', 'Green', 'Blue', 'Purple', 'Blue'), ('Blue', 'Green', 'Blue', 'Purple', 'Yellow'), ('Blue', 'Green', 'Blue', 'Purple', 'Purple'), ('Blue', 'Green', 'Yellow', 'Red', 'Red'), ('Blue', 'Green', 'Yellow', 'Red', 'Green'), ('Blue', 'Green', 'Yellow', 'Red', 'Blue'), ('Blue', 'Green', 'Yellow', 'Red', 'Yellow'), ('Blue', 'Green', 'Yellow', 'Red', 'Purple'), ('Blue', 'Green', 'Yellow', 'Green', 'Red'), ('Blue', 'Green', 'Yellow', 'Green', 'Green'), ('Blue', 'Green', 'Yellow', 'Green', 'Blue'), ('Blue', 'Green', 'Yellow', 'Green', 'Yellow'), ('Blue', 'Green', 'Yellow', 'Green', 'Purple'), ('Blue', 'Green', 'Yellow', 'Blue', 'Red'), ('Blue', 'Green', 'Yellow', 'Blue', 'Green'), ('Blue', 'Green', 'Yellow', 'Blue', 'Blue'), ('Blue', 'Green', 'Yellow', 'Blue', 'Yellow'), ('Blue', 'Green', 'Yellow', 'Blue', 'Purple'), ('Blue', 'Green', 'Yellow', 'Yellow', 'Red'), ('Blue', 'Green', 'Yellow', 'Yellow', 'Green'), ('Blue', 'Green', 'Yellow', 'Yellow', 'Blue'), ('Blue', 'Green', 'Yellow', 'Yellow', 'Yellow'), ('Blue', 'Green', 'Yellow', 'Yellow', 'Purple'), ('Blue', 'Green', 'Yellow', 'Purple', 'Red'), ('Blue', 'Green', 'Yellow', 'Purple', 'Green'), ('Blue', 'Green', 'Yellow', 'Purple', 'Blue'), ('Blue', 'Green', 'Yellow', 'Purple', 'Yellow'), ('Blue', 'Green', 'Yellow', 'Purple', 'Purple'), ('Blue', 'Green', 'Purple', 'Red', 'Red'), ('Blue', 'Green', 'Purple', 'Red', 'Green'), ('Blue', 'Green', 'Purple', 'Red', 'Blue'), ('Blue', 'Green', 'Purple', 'Red', 'Yellow'), ('Blue', 'Green', 'Purple', 'Red', 'Purple'), ('Blue', 'Green', 'Purple', 'Green', 'Red'), ('Blue', 'Green', 'Purple', 'Green', 'Green'), ('Blue', 'Green', 'Purple', 'Green', 'Blue'), ('Blue', 'Green', 'Purple', 'Green', 'Yellow'), ('Blue', 'Green', 'Purple', 'Green', 'Purple'), ('Blue', 'Green', 'Purple', 'Blue', 'Red'), ('Blue', 'Green', 'Purple', 'Blue', 'Green'), ('Blue', 'Green', 'Purple', 'Blue', 'Blue'), ('Blue', 'Green', 'Purple', 'Blue', 'Yellow'), ('Blue', 'Green', 'Purple', 'Blue', 'Purple'), ('Blue', 'Green', 'Purple', 'Yellow', 'Red'), ('Blue', 'Green', 'Purple', 'Yellow', 'Green'), ('Blue', 'Green', 'Purple', 'Yellow', 'Blue'), ('Blue', 'Green', 'Purple', 'Yellow', 'Yellow'), ('Blue', 'Green', 'Purple', 'Yellow', 'Purple'), ('Blue', 'Green', 'Purple', 'Purple', 'Red'), ('Blue', 'Green', 'Purple', 'Purple', 'Green'), ('Blue', 'Green', 'Purple', 'Purple', 'Blue'), ('Blue', 'Green', 'Purple', 'Purple', 'Yellow'), ('Blue', 'Green', 'Purple', 'Purple', 'Purple'), ('Blue', 'Blue', 'Red', 'Red', 'Red'), ('Blue', 'Blue', 'Red', 'Red', 'Green'), ('Blue', 'Blue', 'Red', 'Red', 'Blue'), ('Blue', 'Blue', 'Red', 'Red', 'Yellow'), ('Blue', 'Blue', 'Red', 'Red', 'Purple'), ('Blue', 'Blue', 'Red', 'Green', 'Red'), ('Blue', 'Blue', 'Red', 'Green', 'Green'), ('Blue', 'Blue', 'Red', 'Green', 'Blue'), ('Blue', 'Blue', 'Red', 'Green', 'Yellow'), ('Blue', 'Blue', 'Red', 'Green', 'Purple'), ('Blue', 'Blue', 'Red', 'Blue', 'Red'), ('Blue', 'Blue', 'Red', 'Blue', 'Green'), ('Blue', 'Blue', 'Red', 'Blue', 'Blue'), ('Blue', 'Blue', 'Red', 'Blue', 'Yellow'), ('Blue', 'Blue', 'Red', 'Blue', 'Purple'), ('Blue', 'Blue', 'Red', 'Yellow', 'Red'), ('Blue', 'Blue', 'Red', 'Yellow', 'Green'), ('Blue', 'Blue', 'Red', 'Yellow', 'Blue'), ('Blue', 'Blue', 'Red', 'Yellow', 'Yellow'), ('Blue', 'Blue', 'Red', 'Yellow', 'Purple'), ('Blue', 'Blue', 'Red', 'Purple', 'Red'), ('Blue', 'Blue', 'Red', 'Purple', 'Green'), ('Blue', 'Blue', 'Red', 'Purple', 'Blue'), ('Blue', 'Blue', 'Red', 'Purple', 'Yellow'), ('Blue', 'Blue', 'Red', 'Purple', 'Purple'), ('Blue', 'Blue', 'Green', 'Red', 'Red'), ('Blue', 'Blue', 'Green', 'Red', 'Green'), ('Blue', 'Blue', 'Green', 'Red', 'Blue'), ('Blue', 'Blue', 'Green', 'Red', 'Yellow'), ('Blue', 'Blue', 'Green', 'Red', 'Purple'), ('Blue', 'Blue', 'Green', 'Green', 'Red'), ('Blue', 'Blue', 'Green', 'Green', 'Green'), ('Blue', 'Blue', 'Green', 'Green', 'Blue'), ('Blue', 'Blue', 'Green', 'Green', 'Yellow'), ('Blue', 'Blue', 'Green', 'Green', 'Purple'), ('Blue', 'Blue', 'Green', 'Blue', 'Red'), ('Blue', 'Blue', 'Green', 'Blue', 'Green'), ('Blue', 'Blue', 'Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Green', 'Blue', 'Yellow'), ('Blue', 'Blue', 'Green', 'Blue', 'Purple'), ('Blue', 'Blue', 'Green', 'Yellow', 'Red'), ('Blue', 'Blue', 'Green', 'Yellow', 'Green'), ('Blue', 'Blue', 'Green', 'Yellow', 'Blue'), ('Blue', 'Blue', 'Green', 'Yellow', 'Yellow'), ('Blue', 'Blue', 'Green', 'Yellow', 'Purple'), ('Blue', 'Blue', 'Green', 'Purple', 'Red'), ('Blue', 'Blue', 'Green', 'Purple', 'Green'), ('Blue', 'Blue', 'Green', 'Purple', 'Blue'), ('Blue', 'Blue', 'Green', 'Purple', 'Yellow'), ('Blue', 'Blue', 'Green', 'Purple', 'Purple'), ('Blue', 'Blue', 'Blue', 'Red', 'Red'), ('Blue', 'Blue', 'Blue', 'Red', 'Green'), ('Blue', 'Blue', 'Blue', 'Red', 'Blue'), ('Blue', 'Blue', 'Blue', 'Red', 'Yellow'), ('Blue', 'Blue', 'Blue', 'Red', 'Purple'), ('Blue', 'Blue', 'Blue', 'Green', 'Red'), ('Blue', 'Blue', 'Blue', 'Green', 'Green'), ('Blue', 'Blue', 'Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Blue', 'Green', 'Yellow'), ('Blue', 'Blue', 'Blue', 'Green', 'Purple'), ('Blue', 'Blue', 'Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Blue', 'Blue', 'Green'), ('Blue', 'Blue', 'Blue', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Blue', 'Blue', 'Blue', 'Blue', 'Purple'), ('Blue', 'Blue', 'Blue', 'Yellow', 'Red'), ('Blue', 'Blue', 'Blue', 'Yellow', 'Green'), ('Blue', 'Blue', 'Blue', 'Yellow', 'Blue'), ('Blue', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Blue', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Blue', 'Blue', 'Blue', 'Purple', 'Red'), ('Blue', 'Blue', 'Blue', 'Purple', 'Green'), ('Blue', 'Blue', 'Blue', 'Purple', 'Blue'), ('Blue', 'Blue', 'Blue', 'Purple', 'Yellow'), ('Blue', 'Blue', 'Blue', 'Purple', 'Purple'), ('Blue', 'Blue', 'Yellow', 'Red', 'Red'), ('Blue', 'Blue', 'Yellow', 'Red', 'Green'), ('Blue', 'Blue', 'Yellow', 'Red', 'Blue'), ('Blue', 'Blue', 'Yellow', 'Red', 'Yellow'), ('Blue', 'Blue', 'Yellow', 'Red', 'Purple'), ('Blue', 'Blue', 'Yellow', 'Green', 'Red'), ('Blue', 'Blue', 'Yellow', 'Green', 'Green'), ('Blue', 'Blue', 'Yellow', 'Green', 'Blue'), ('Blue', 'Blue', 'Yellow', 'Green', 'Yellow'), ('Blue', 'Blue', 'Yellow', 'Green', 'Purple'), ('Blue', 'Blue', 'Yellow', 'Blue', 'Red'), ('Blue', 'Blue', 'Yellow', 'Blue', 'Green'), ('Blue', 'Blue', 'Yellow', 'Blue', 'Blue'), ('Blue', 'Blue', 'Yellow', 'Blue', 'Yellow'), ('Blue', 'Blue', 'Yellow', 'Blue', 'Purple'), ('Blue', 'Blue', 'Yellow', 'Yellow', 'Red'), ('Blue', 'Blue', 'Yellow', 'Yellow', 'Green'), ('Blue', 'Blue', 'Yellow', 'Yellow', 'Blue'), ('Blue', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Blue', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Blue', 'Blue', 'Yellow', 'Purple', 'Red'), ('Blue', 'Blue', 'Yellow', 'Purple', 'Green'), ('Blue', 'Blue', 'Yellow', 'Purple', 'Blue'), ('Blue', 'Blue', 'Yellow', 'Purple', 'Yellow'), ('Blue', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Blue', 'Blue', 'Purple', 'Red', 'Red'), ('Blue', 'Blue', 'Purple', 'Red', 'Green'), ('Blue', 'Blue', 'Purple', 'Red', 'Blue'), ('Blue', 'Blue', 'Purple', 'Red', 'Yellow'), ('Blue', 'Blue', 'Purple', 'Red', 'Purple'), ('Blue', 'Blue', 'Purple', 'Green', 'Red'), ('Blue', 'Blue', 'Purple', 'Green', 'Green'), ('Blue', 'Blue', 'Purple', 'Green', 'Blue'), ('Blue', 'Blue', 'Purple', 'Green', 'Yellow'), ('Blue', 'Blue', 'Purple', 'Green', 'Purple'), ('Blue', 'Blue', 'Purple', 'Blue', 'Red'), ('Blue', 'Blue', 'Purple', 'Blue', 'Green'), ('Blue', 'Blue', 'Purple', 'Blue', 'Blue'), ('Blue', 'Blue', 'Purple', 'Blue', 'Yellow'), ('Blue', 'Blue', 'Purple', 'Blue', 'Purple'), ('Blue', 'Blue', 'Purple', 'Yellow', 'Red'), ('Blue', 'Blue', 'Purple', 'Yellow', 'Green'), ('Blue', 'Blue', 'Purple', 'Yellow', 'Blue'), ('Blue', 'Blue', 'Purple', 'Yellow', 'Yellow'), ('Blue', 'Blue', 'Purple', 'Yellow', 'Purple'), ('Blue', 'Blue', 'Purple', 'Purple', 'Red'), ('Blue', 'Blue', 'Purple', 'Purple', 'Green'), ('Blue', 'Blue', 'Purple', 'Purple', 'Blue'), ('Blue', 'Blue', 'Purple', 'Purple', 'Yellow'), ('Blue', 'Blue', 'Purple', 'Purple', 'Purple'), ('Blue', 'Yellow', 'Red', 'Red', 'Red'), ('Blue', 'Yellow', 'Red', 'Red', 'Green'), ('Blue', 'Yellow', 'Red', 'Red', 'Blue'), ('Blue', 'Yellow', 'Red', 'Red', 'Yellow'), ('Blue', 'Yellow', 'Red', 'Red', 'Purple'), ('Blue', 'Yellow', 'Red', 'Green', 'Red'), ('Blue', 'Yellow', 'Red', 'Green', 'Green'), ('Blue', 'Yellow', 'Red', 'Green', 'Blue'), ('Blue', 'Yellow', 'Red', 'Green', 'Yellow'), ('Blue', 'Yellow', 'Red', 'Green', 'Purple'), ('Blue', 'Yellow', 'Red', 'Blue', 'Red'), ('Blue', 'Yellow', 'Red', 'Blue', 'Green'), ('Blue', 'Yellow', 'Red', 'Blue', 'Blue'), ('Blue', 'Yellow', 'Red', 'Blue', 'Yellow'), ('Blue', 'Yellow', 'Red', 'Blue', 'Purple'), ('Blue', 'Yellow', 'Red', 'Yellow', 'Red'), ('Blue', 'Yellow', 'Red', 'Yellow', 'Green'), ('Blue', 'Yellow', 'Red', 'Yellow', 'Blue'), ('Blue', 'Yellow', 'Red', 'Yellow', 'Yellow'), ('Blue', 'Yellow', 'Red', 'Yellow', 'Purple'), ('Blue', 'Yellow', 'Red', 'Purple', 'Red'), ('Blue', 'Yellow', 'Red', 'Purple', 'Green'), ('Blue', 'Yellow', 'Red', 'Purple', 'Blue'), ('Blue', 'Yellow', 'Red', 'Purple', 'Yellow'), ('Blue', 'Yellow', 'Red', 'Purple', 'Purple'), ('Blue', 'Yellow', 'Green', 'Red', 'Red'), ('Blue', 'Yellow', 'Green', 'Red', 'Green'), ('Blue', 'Yellow', 'Green', 'Red', 'Blue'), ('Blue', 'Yellow', 'Green', 'Red', 'Yellow'), ('Blue', 'Yellow', 'Green', 'Red', 'Purple'), ('Blue', 'Yellow', 'Green', 'Green', 'Red'), ('Blue', 'Yellow', 'Green', 'Green', 'Green'), ('Blue', 'Yellow', 'Green', 'Green', 'Blue'), ('Blue', 'Yellow', 'Green', 'Green', 'Yellow'), ('Blue', 'Yellow', 'Green', 'Green', 'Purple'), ('Blue', 'Yellow', 'Green', 'Blue', 'Red'), ('Blue', 'Yellow', 'Green', 'Blue', 'Green'), ('Blue', 'Yellow', 'Green', 'Blue', 'Blue'), ('Blue', 'Yellow', 'Green', 'Blue', 'Yellow'), ('Blue', 'Yellow', 'Green', 'Blue', 'Purple'), ('Blue', 'Yellow', 'Green', 'Yellow', 'Red'), ('Blue', 'Yellow', 'Green', 'Yellow', 'Green'), ('Blue', 'Yellow', 'Green', 'Yellow', 'Blue'), ('Blue', 'Yellow', 'Green', 'Yellow', 'Yellow'), ('Blue', 'Yellow', 'Green', 'Yellow', 'Purple'), ('Blue', 'Yellow', 'Green', 'Purple', 'Red'), ('Blue', 'Yellow', 'Green', 'Purple', 'Green'), ('Blue', 'Yellow', 'Green', 'Purple', 'Blue'), ('Blue', 'Yellow', 'Green', 'Purple', 'Yellow'), ('Blue', 'Yellow', 'Green', 'Purple', 'Purple'), ('Blue', 'Yellow', 'Blue', 'Red', 'Red'), ('Blue', 'Yellow', 'Blue', 'Red', 'Green'), ('Blue', 'Yellow', 'Blue', 'Red', 'Blue'), ('Blue', 'Yellow', 'Blue', 'Red', 'Yellow'), ('Blue', 'Yellow', 'Blue', 'Red', 'Purple'), ('Blue', 'Yellow', 'Blue', 'Green', 'Red'), ('Blue', 'Yellow', 'Blue', 'Green', 'Green'), ('Blue', 'Yellow', 'Blue', 'Green', 'Blue'), ('Blue', 'Yellow', 'Blue', 'Green', 'Yellow'), ('Blue', 'Yellow', 'Blue', 'Green', 'Purple'), ('Blue', 'Yellow', 'Blue', 'Blue', 'Red'), ('Blue', 'Yellow', 'Blue', 'Blue', 'Green'), ('Blue', 'Yellow', 'Blue', 'Blue', 'Blue'), ('Blue', 'Yellow', 'Blue', 'Blue', 'Yellow'), ('Blue', 'Yellow', 'Blue', 'Blue', 'Purple'), ('Blue', 'Yellow', 'Blue', 'Yellow', 'Red'), ('Blue', 'Yellow', 'Blue', 'Yellow', 'Green'), ('Blue', 'Yellow', 'Blue', 'Yellow', 'Blue'), ('Blue', 'Yellow', 'Blue', 'Yellow', 'Yellow'), ('Blue', 'Yellow', 'Blue', 'Yellow', 'Purple'), ('Blue', 'Yellow', 'Blue', 'Purple', 'Red'), ('Blue', 'Yellow', 'Blue', 'Purple', 'Green'), ('Blue', 'Yellow', 'Blue', 'Purple', 'Blue'), ('Blue', 'Yellow', 'Blue', 'Purple', 'Yellow'), ('Blue', 'Yellow', 'Blue', 'Purple', 'Purple'), ('Blue', 'Yellow', 'Yellow', 'Red', 'Red'), ('Blue', 'Yellow', 'Yellow', 'Red', 'Green'), ('Blue', 'Yellow', 'Yellow', 'Red', 'Blue'), ('Blue', 'Yellow', 'Yellow', 'Red', 'Yellow'), ('Blue', 'Yellow', 'Yellow', 'Red', 'Purple'), ('Blue', 'Yellow', 'Yellow', 'Green', 'Red'), ('Blue', 'Yellow', 'Yellow', 'Green', 'Green'), ('Blue', 'Yellow', 'Yellow', 'Green', 'Blue'), ('Blue', 'Yellow', 'Yellow', 'Green', 'Yellow'), ('Blue', 'Yellow', 'Yellow', 'Green', 'Purple'), ('Blue', 'Yellow', 'Yellow', 'Blue', 'Red'), ('Blue', 'Yellow', 'Yellow', 'Blue', 'Green'), ('Blue', 'Yellow', 'Yellow', 'Blue', 'Blue'), ('Blue', 'Yellow', 'Yellow', 'Blue', 'Yellow'), ('Blue', 'Yellow', 'Yellow', 'Blue', 'Purple'), ('Blue', 'Yellow', 'Yellow', 'Yellow', 'Red'), ('Blue', 'Yellow', 'Yellow', 'Yellow', 'Green'), ('Blue', 'Yellow', 'Yellow', 'Yellow', 'Blue'), ('Blue', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Blue', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Blue', 'Yellow', 'Yellow', 'Purple', 'Red'), ('Blue', 'Yellow', 'Yellow', 'Purple', 'Green'), ('Blue', 'Yellow', 'Yellow', 'Purple', 'Blue'), ('Blue', 'Yellow', 'Yellow', 'Purple', 'Yellow'), ('Blue', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Blue', 'Yellow', 'Purple', 'Red', 'Red'), ('Blue', 'Yellow', 'Purple', 'Red', 'Green'), ('Blue', 'Yellow', 'Purple', 'Red', 'Blue'), ('Blue', 'Yellow', 'Purple', 'Red', 'Yellow'), ('Blue', 'Yellow', 'Purple', 'Red', 'Purple'), ('Blue', 'Yellow', 'Purple', 'Green', 'Red'), ('Blue', 'Yellow', 'Purple', 'Green', 'Green'), ('Blue', 'Yellow', 'Purple', 'Green', 'Blue'), ('Blue', 'Yellow', 'Purple', 'Green', 'Yellow'), ('Blue', 'Yellow', 'Purple', 'Green', 'Purple'), ('Blue', 'Yellow', 'Purple', 'Blue', 'Red'), ('Blue', 'Yellow', 'Purple', 'Blue', 'Green'), ('Blue', 'Yellow', 'Purple', 'Blue', 'Blue'), ('Blue', 'Yellow', 'Purple', 'Blue', 'Yellow'), ('Blue', 'Yellow', 'Purple', 'Blue', 'Purple'), ('Blue', 'Yellow', 'Purple', 'Yellow', 'Red'), ('Blue', 'Yellow', 'Purple', 'Yellow', 'Green'), ('Blue', 'Yellow', 'Purple', 'Yellow', 'Blue'), ('Blue', 'Yellow', 'Purple', 'Yellow', 'Yellow'), ('Blue', 'Yellow', 'Purple', 'Yellow', 'Purple'), ('Blue', 'Yellow', 'Purple', 'Purple', 'Red'), ('Blue', 'Yellow', 'Purple', 'Purple', 'Green'), ('Blue', 'Yellow', 'Purple', 'Purple', 'Blue'), ('Blue', 'Yellow', 'Purple', 'Purple', 'Yellow'), ('Blue', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Blue', 'Purple', 'Red', 'Red', 'Red'), ('Blue', 'Purple', 'Red', 'Red', 'Green'), ('Blue', 'Purple', 'Red', 'Red', 'Blue'), ('Blue', 'Purple', 'Red', 'Red', 'Yellow'), ('Blue', 'Purple', 'Red', 'Red', 'Purple'), ('Blue', 'Purple', 'Red', 'Green', 'Red'), ('Blue', 'Purple', 'Red', 'Green', 'Green'), ('Blue', 'Purple', 'Red', 'Green', 'Blue'), ('Blue', 'Purple', 'Red', 'Green', 'Yellow'), ('Blue', 'Purple', 'Red', 'Green', 'Purple'), ('Blue', 'Purple', 'Red', 'Blue', 'Red'), ('Blue', 'Purple', 'Red', 'Blue', 'Green'), ('Blue', 'Purple', 'Red', 'Blue', 'Blue'), ('Blue', 'Purple', 'Red', 'Blue', 'Yellow'), ('Blue', 'Purple', 'Red', 'Blue', 'Purple'), ('Blue', 'Purple', 'Red', 'Yellow', 'Red'), ('Blue', 'Purple', 'Red', 'Yellow', 'Green'), ('Blue', 'Purple', 'Red', 'Yellow', 'Blue'), ('Blue', 'Purple', 'Red', 'Yellow', 'Yellow'), ('Blue', 'Purple', 'Red', 'Yellow', 'Purple'), ('Blue', 'Purple', 'Red', 'Purple', 'Red'), ('Blue', 'Purple', 'Red', 'Purple', 'Green'), ('Blue', 'Purple', 'Red', 'Purple', 'Blue'), ('Blue', 'Purple', 'Red', 'Purple', 'Yellow'), ('Blue', 'Purple', 'Red', 'Purple', 'Purple'), ('Blue', 'Purple', 'Green', 'Red', 'Red'), ('Blue', 'Purple', 'Green', 'Red', 'Green'), ('Blue', 'Purple', 'Green', 'Red', 'Blue'), ('Blue', 'Purple', 'Green', 'Red', 'Yellow'), ('Blue', 'Purple', 'Green', 'Red', 'Purple'), ('Blue', 'Purple', 'Green', 'Green', 'Red'), ('Blue', 'Purple', 'Green', 'Green', 'Green'), ('Blue', 'Purple', 'Green', 'Green', 'Blue'), ('Blue', 'Purple', 'Green', 'Green', 'Yellow'), ('Blue', 'Purple', 'Green', 'Green', 'Purple'), ('Blue', 'Purple', 'Green', 'Blue', 'Red'), ('Blue', 'Purple', 'Green', 'Blue', 'Green'), ('Blue', 'Purple', 'Green', 'Blue', 'Blue'), ('Blue', 'Purple', 'Green', 'Blue', 'Yellow'), ('Blue', 'Purple', 'Green', 'Blue', 'Purple'), ('Blue', 'Purple', 'Green', 'Yellow', 'Red'), ('Blue', 'Purple', 'Green', 'Yellow', 'Green'), ('Blue', 'Purple', 'Green', 'Yellow', 'Blue'), ('Blue', 'Purple', 'Green', 'Yellow', 'Yellow'), ('Blue', 'Purple', 'Green', 'Yellow', 'Purple'), ('Blue', 'Purple', 'Green', 'Purple', 'Red'), ('Blue', 'Purple', 'Green', 'Purple', 'Green'), ('Blue', 'Purple', 'Green', 'Purple', 'Blue'), ('Blue', 'Purple', 'Green', 'Purple', 'Yellow'), ('Blue', 'Purple', 'Green', 'Purple', 'Purple'), ('Blue', 'Purple', 'Blue', 'Red', 'Red'), ('Blue', 'Purple', 'Blue', 'Red', 'Green'), ('Blue', 'Purple', 'Blue', 'Red', 'Blue'), ('Blue', 'Purple', 'Blue', 'Red', 'Yellow'), ('Blue', 'Purple', 'Blue', 'Red', 'Purple'), ('Blue', 'Purple', 'Blue', 'Green', 'Red'), ('Blue', 'Purple', 'Blue', 'Green', 'Green'), ('Blue', 'Purple', 'Blue', 'Green', 'Blue'), ('Blue', 'Purple', 'Blue', 'Green', 'Yellow'), ('Blue', 'Purple', 'Blue', 'Green', 'Purple'), ('Blue', 'Purple', 'Blue', 'Blue', 'Red'), ('Blue', 'Purple', 'Blue', 'Blue', 'Green'), ('Blue', 'Purple', 'Blue', 'Blue', 'Blue'), ('Blue', 'Purple', 'Blue', 'Blue', 'Yellow'), ('Blue', 'Purple', 'Blue', 'Blue', 'Purple'), ('Blue', 'Purple', 'Blue', 'Yellow', 'Red'), ('Blue', 'Purple', 'Blue', 'Yellow', 'Green'), ('Blue', 'Purple', 'Blue', 'Yellow', 'Blue'), ('Blue', 'Purple', 'Blue', 'Yellow', 'Yellow'), ('Blue', 'Purple', 'Blue', 'Yellow', 'Purple'), ('Blue', 'Purple', 'Blue', 'Purple', 'Red'), ('Blue', 'Purple', 'Blue', 'Purple', 'Green'), ('Blue', 'Purple', 'Blue', 'Purple', 'Blue'), ('Blue', 'Purple', 'Blue', 'Purple', 'Yellow'), ('Blue', 'Purple', 'Blue', 'Purple', 'Purple'), ('Blue', 'Purple', 'Yellow', 'Red', 'Red'), ('Blue', 'Purple', 'Yellow', 'Red', 'Green'), ('Blue', 'Purple', 'Yellow', 'Red', 'Blue'), ('Blue', 'Purple', 'Yellow', 'Red', 'Yellow'), ('Blue', 'Purple', 'Yellow', 'Red', 'Purple'), ('Blue', 'Purple', 'Yellow', 'Green', 'Red'), ('Blue', 'Purple', 'Yellow', 'Green', 'Green'), ('Blue', 'Purple', 'Yellow', 'Green', 'Blue'), ('Blue', 'Purple', 'Yellow', 'Green', 'Yellow'), ('Blue', 'Purple', 'Yellow', 'Green', 'Purple'), ('Blue', 'Purple', 'Yellow', 'Blue', 'Red'), ('Blue', 'Purple', 'Yellow', 'Blue', 'Green'), ('Blue', 'Purple', 'Yellow', 'Blue', 'Blue'), ('Blue', 'Purple', 'Yellow', 'Blue', 'Yellow'), ('Blue', 'Purple', 'Yellow', 'Blue', 'Purple'), ('Blue', 'Purple', 'Yellow', 'Yellow', 'Red'), ('Blue', 'Purple', 'Yellow', 'Yellow', 'Green'), ('Blue', 'Purple', 'Yellow', 'Yellow', 'Blue'), ('Blue', 'Purple', 'Yellow', 'Yellow', 'Yellow'), ('Blue', 'Purple', 'Yellow', 'Yellow', 'Purple'), ('Blue', 'Purple', 'Yellow', 'Purple', 'Red'), ('Blue', 'Purple', 'Yellow', 'Purple', 'Green'), ('Blue', 'Purple', 'Yellow', 'Purple', 'Blue'), ('Blue', 'Purple', 'Yellow', 'Purple', 'Yellow'), ('Blue', 'Purple', 'Yellow', 'Purple', 'Purple'), ('Blue', 'Purple', 'Purple', 'Red', 'Red'), ('Blue', 'Purple', 'Purple', 'Red', 'Green'), ('Blue', 'Purple', 'Purple', 'Red', 'Blue'), ('Blue', 'Purple', 'Purple', 'Red', 'Yellow'), ('Blue', 'Purple', 'Purple', 'Red', 'Purple'), ('Blue', 'Purple', 'Purple', 'Green', 'Red'), ('Blue', 'Purple', 'Purple', 'Green', 'Green'), ('Blue', 'Purple', 'Purple', 'Green', 'Blue'), ('Blue', 'Purple', 'Purple', 'Green', 'Yellow'), ('Blue', 'Purple', 'Purple', 'Green', 'Purple'), ('Blue', 'Purple', 'Purple', 'Blue', 'Red'), ('Blue', 'Purple', 'Purple', 'Blue', 'Green'), ('Blue', 'Purple', 'Purple', 'Blue', 'Blue'), ('Blue', 'Purple', 'Purple', 'Blue', 'Yellow'), ('Blue', 'Purple', 'Purple', 'Blue', 'Purple'), ('Blue', 'Purple', 'Purple', 'Yellow', 'Red'), ('Blue', 'Purple', 'Purple', 'Yellow', 'Green'), ('Blue', 'Purple', 'Purple', 'Yellow', 'Blue'), ('Blue', 'Purple', 'Purple', 'Yellow', 'Yellow'), ('Blue', 'Purple', 'Purple', 'Yellow', 'Purple'), ('Blue', 'Purple', 'Purple', 'Purple', 'Red'), ('Blue', 'Purple', 'Purple', 'Purple', 'Green'), ('Blue', 'Purple', 'Purple', 'Purple', 'Blue'), ('Blue', 'Purple', 'Purple', 'Purple', 'Yellow'), ('Blue', 'Purple', 'Purple', 'Purple', 'Purple'), ('Yellow', 'Red', 'Red', 'Red', 'Red'), ('Yellow', 'Red', 'Red', 'Red', 'Green'), ('Yellow', 'Red', 'Red', 'Red', 'Blue'), ('Yellow', 'Red', 'Red', 'Red', 'Yellow'), ('Yellow', 'Red', 'Red', 'Red', 'Purple'), ('Yellow', 'Red', 'Red', 'Green', 'Red'), ('Yellow', 'Red', 'Red', 'Green', 'Green'), ('Yellow', 'Red', 'Red', 'Green', 'Blue'), ('Yellow', 'Red', 'Red', 'Green', 'Yellow'), ('Yellow', 'Red', 'Red', 'Green', 'Purple'), ('Yellow', 'Red', 'Red', 'Blue', 'Red'), ('Yellow', 'Red', 'Red', 'Blue', 'Green'), ('Yellow', 'Red', 'Red', 'Blue', 'Blue'), ('Yellow', 'Red', 'Red', 'Blue', 'Yellow'), ('Yellow', 'Red', 'Red', 'Blue', 'Purple'), ('Yellow', 'Red', 'Red', 'Yellow', 'Red'), ('Yellow', 'Red', 'Red', 'Yellow', 'Green'), ('Yellow', 'Red', 'Red', 'Yellow', 'Blue'), ('Yellow', 'Red', 'Red', 'Yellow', 'Yellow'), ('Yellow', 'Red', 'Red', 'Yellow', 'Purple'), ('Yellow', 'Red', 'Red', 'Purple', 'Red'), ('Yellow', 'Red', 'Red', 'Purple', 'Green'), ('Yellow', 'Red', 'Red', 'Purple', 'Blue'), ('Yellow', 'Red', 'Red', 'Purple', 'Yellow'), ('Yellow', 'Red', 'Red', 'Purple', 'Purple'), ('Yellow', 'Red', 'Green', 'Red', 'Red'), ('Yellow', 'Red', 'Green', 'Red', 'Green'), ('Yellow', 'Red', 'Green', 'Red', 'Blue'), ('Yellow', 'Red', 'Green', 'Red', 'Yellow'), ('Yellow', 'Red', 'Green', 'Red', 'Purple'), ('Yellow', 'Red', 'Green', 'Green', 'Red'), ('Yellow', 'Red', 'Green', 'Green', 'Green'), ('Yellow', 'Red', 'Green', 'Green', 'Blue'), ('Yellow', 'Red', 'Green', 'Green', 'Yellow'), ('Yellow', 'Red', 'Green', 'Green', 'Purple'), ('Yellow', 'Red', 'Green', 'Blue', 'Red'), ('Yellow', 'Red', 'Green', 'Blue', 'Green'), ('Yellow', 'Red', 'Green', 'Blue', 'Blue'), ('Yellow', 'Red', 'Green', 'Blue', 'Yellow'), ('Yellow', 'Red', 'Green', 'Blue', 'Purple'), ('Yellow', 'Red', 'Green', 'Yellow', 'Red'), ('Yellow', 'Red', 'Green', 'Yellow', 'Green'), ('Yellow', 'Red', 'Green', 'Yellow', 'Blue'), ('Yellow', 'Red', 'Green', 'Yellow', 'Yellow'), ('Yellow', 'Red', 'Green', 'Yellow', 'Purple'), ('Yellow', 'Red', 'Green', 'Purple', 'Red'), ('Yellow', 'Red', 'Green', 'Purple', 'Green'), ('Yellow', 'Red', 'Green', 'Purple', 'Blue'), ('Yellow', 'Red', 'Green', 'Purple', 'Yellow'), ('Yellow', 'Red', 'Green', 'Purple', 'Purple'), ('Yellow', 'Red', 'Blue', 'Red', 'Red'), ('Yellow', 'Red', 'Blue', 'Red', 'Green'), ('Yellow', 'Red', 'Blue', 'Red', 'Blue'), ('Yellow', 'Red', 'Blue', 'Red', 'Yellow'), ('Yellow', 'Red', 'Blue', 'Red', 'Purple'), ('Yellow', 'Red', 'Blue', 'Green', 'Red'), ('Yellow', 'Red', 'Blue', 'Green', 'Green'), ('Yellow', 'Red', 'Blue', 'Green', 'Blue'), ('Yellow', 'Red', 'Blue', 'Green', 'Yellow'), ('Yellow', 'Red', 'Blue', 'Green', 'Purple'), ('Yellow', 'Red', 'Blue', 'Blue', 'Red'), ('Yellow', 'Red', 'Blue', 'Blue', 'Green'), ('Yellow', 'Red', 'Blue', 'Blue', 'Blue'), ('Yellow', 'Red', 'Blue', 'Blue', 'Yellow'), ('Yellow', 'Red', 'Blue', 'Blue', 'Purple'), ('Yellow', 'Red', 'Blue', 'Yellow', 'Red'), ('Yellow', 'Red', 'Blue', 'Yellow', 'Green'), ('Yellow', 'Red', 'Blue', 'Yellow', 'Blue'), ('Yellow', 'Red', 'Blue', 'Yellow', 'Yellow'), ('Yellow', 'Red', 'Blue', 'Yellow', 'Purple'), ('Yellow', 'Red', 'Blue', 'Purple', 'Red'), ('Yellow', 'Red', 'Blue', 'Purple', 'Green'), ('Yellow', 'Red', 'Blue', 'Purple', 'Blue'), ('Yellow', 'Red', 'Blue', 'Purple', 'Yellow'), ('Yellow', 'Red', 'Blue', 'Purple', 'Purple'), ('Yellow', 'Red', 'Yellow', 'Red', 'Red'), ('Yellow', 'Red', 'Yellow', 'Red', 'Green'), ('Yellow', 'Red', 'Yellow', 'Red', 'Blue'), ('Yellow', 'Red', 'Yellow', 'Red', 'Yellow'), ('Yellow', 'Red', 'Yellow', 'Red', 'Purple'), ('Yellow', 'Red', 'Yellow', 'Green', 'Red'), ('Yellow', 'Red', 'Yellow', 'Green', 'Green'), ('Yellow', 'Red', 'Yellow', 'Green', 'Blue'), ('Yellow', 'Red', 'Yellow', 'Green', 'Yellow'), ('Yellow', 'Red', 'Yellow', 'Green', 'Purple'), ('Yellow', 'Red', 'Yellow', 'Blue', 'Red'), ('Yellow', 'Red', 'Yellow', 'Blue', 'Green'), ('Yellow', 'Red', 'Yellow', 'Blue', 'Blue'), ('Yellow', 'Red', 'Yellow', 'Blue', 'Yellow'), ('Yellow', 'Red', 'Yellow', 'Blue', 'Purple'), ('Yellow', 'Red', 'Yellow', 'Yellow', 'Red'), ('Yellow', 'Red', 'Yellow', 'Yellow', 'Green'), ('Yellow', 'Red', 'Yellow', 'Yellow', 'Blue'), ('Yellow', 'Red', 'Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Red', 'Yellow', 'Yellow', 'Purple'), ('Yellow', 'Red', 'Yellow', 'Purple', 'Red'), ('Yellow', 'Red', 'Yellow', 'Purple', 'Green'), ('Yellow', 'Red', 'Yellow', 'Purple', 'Blue'), ('Yellow', 'Red', 'Yellow', 'Purple', 'Yellow'), ('Yellow', 'Red', 'Yellow', 'Purple', 'Purple'), ('Yellow', 'Red', 'Purple', 'Red', 'Red'), ('Yellow', 'Red', 'Purple', 'Red', 'Green'), ('Yellow', 'Red', 'Purple', 'Red', 'Blue'), ('Yellow', 'Red', 'Purple', 'Red', 'Yellow'), ('Yellow', 'Red', 'Purple', 'Red', 'Purple'), ('Yellow', 'Red', 'Purple', 'Green', 'Red'), ('Yellow', 'Red', 'Purple', 'Green', 'Green'), ('Yellow', 'Red', 'Purple', 'Green', 'Blue'), ('Yellow', 'Red', 'Purple', 'Green', 'Yellow'), ('Yellow', 'Red', 'Purple', 'Green', 'Purple'), ('Yellow', 'Red', 'Purple', 'Blue', 'Red'), ('Yellow', 'Red', 'Purple', 'Blue', 'Green'), ('Yellow', 'Red', 'Purple', 'Blue', 'Blue'), ('Yellow', 'Red', 'Purple', 'Blue', 'Yellow'), ('Yellow', 'Red', 'Purple', 'Blue', 'Purple'), ('Yellow', 'Red', 'Purple', 'Yellow', 'Red'), ('Yellow', 'Red', 'Purple', 'Yellow', 'Green'), ('Yellow', 'Red', 'Purple', 'Yellow', 'Blue'), ('Yellow', 'Red', 'Purple', 'Yellow', 'Yellow'), ('Yellow', 'Red', 'Purple', 'Yellow', 'Purple'), ('Yellow', 'Red', 'Purple', 'Purple', 'Red'), ('Yellow', 'Red', 'Purple', 'Purple', 'Green'), ('Yellow', 'Red', 'Purple', 'Purple', 'Blue'), ('Yellow', 'Red', 'Purple', 'Purple', 'Yellow'), ('Yellow', 'Red', 'Purple', 'Purple', 'Purple'), ('Yellow', 'Green', 'Red', 'Red', 'Red'), ('Yellow', 'Green', 'Red', 'Red', 'Green'), ('Yellow', 'Green', 'Red', 'Red', 'Blue'), ('Yellow', 'Green', 'Red', 'Red', 'Yellow'), ('Yellow', 'Green', 'Red', 'Red', 'Purple'), ('Yellow', 'Green', 'Red', 'Green', 'Red'), ('Yellow', 'Green', 'Red', 'Green', 'Green'), ('Yellow', 'Green', 'Red', 'Green', 'Blue'), ('Yellow', 'Green', 'Red', 'Green', 'Yellow'), ('Yellow', 'Green', 'Red', 'Green', 'Purple'), ('Yellow', 'Green', 'Red', 'Blue', 'Red'), ('Yellow', 'Green', 'Red', 'Blue', 'Green'), ('Yellow', 'Green', 'Red', 'Blue', 'Blue'), ('Yellow', 'Green', 'Red', 'Blue', 'Yellow'), ('Yellow', 'Green', 'Red', 'Blue', 'Purple'), ('Yellow', 'Green', 'Red', 'Yellow', 'Red'), ('Yellow', 'Green', 'Red', 'Yellow', 'Green'), ('Yellow', 'Green', 'Red', 'Yellow', 'Blue'), ('Yellow', 'Green', 'Red', 'Yellow', 'Yellow'), ('Yellow', 'Green', 'Red', 'Yellow', 'Purple'), ('Yellow', 'Green', 'Red', 'Purple', 'Red'), ('Yellow', 'Green', 'Red', 'Purple', 'Green'), ('Yellow', 'Green', 'Red', 'Purple', 'Blue'), ('Yellow', 'Green', 'Red', 'Purple', 'Yellow'), ('Yellow', 'Green', 'Red', 'Purple', 'Purple'), ('Yellow', 'Green', 'Green', 'Red', 'Red'), ('Yellow', 'Green', 'Green', 'Red', 'Green'), ('Yellow', 'Green', 'Green', 'Red', 'Blue'), ('Yellow', 'Green', 'Green', 'Red', 'Yellow'), ('Yellow', 'Green', 'Green', 'Red', 'Purple'), ('Yellow', 'Green', 'Green', 'Green', 'Red'), ('Yellow', 'Green', 'Green', 'Green', 'Green'), ('Yellow', 'Green', 'Green', 'Green', 'Blue'), ('Yellow', 'Green', 'Green', 'Green', 'Yellow'), ('Yellow', 'Green', 'Green', 'Green', 'Purple'), ('Yellow', 'Green', 'Green', 'Blue', 'Red'), ('Yellow', 'Green', 'Green', 'Blue', 'Green'), ('Yellow', 'Green', 'Green', 'Blue', 'Blue'), ('Yellow', 'Green', 'Green', 'Blue', 'Yellow'), ('Yellow', 'Green', 'Green', 'Blue', 'Purple'), ('Yellow', 'Green', 'Green', 'Yellow', 'Red'), ('Yellow', 'Green', 'Green', 'Yellow', 'Green'), ('Yellow', 'Green', 'Green', 'Yellow', 'Blue'), ('Yellow', 'Green', 'Green', 'Yellow', 'Yellow'), ('Yellow', 'Green', 'Green', 'Yellow', 'Purple'), ('Yellow', 'Green', 'Green', 'Purple', 'Red'), ('Yellow', 'Green', 'Green', 'Purple', 'Green'), ('Yellow', 'Green', 'Green', 'Purple', 'Blue'), ('Yellow', 'Green', 'Green', 'Purple', 'Yellow'), ('Yellow', 'Green', 'Green', 'Purple', 'Purple'), ('Yellow', 'Green', 'Blue', 'Red', 'Red'), ('Yellow', 'Green', 'Blue', 'Red', 'Green'), ('Yellow', 'Green', 'Blue', 'Red', 'Blue'), ('Yellow', 'Green', 'Blue', 'Red', 'Yellow'), ('Yellow', 'Green', 'Blue', 'Red', 'Purple'), ('Yellow', 'Green', 'Blue', 'Green', 'Red'), ('Yellow', 'Green', 'Blue', 'Green', 'Green'), ('Yellow', 'Green', 'Blue', 'Green', 'Blue'), ('Yellow', 'Green', 'Blue', 'Green', 'Yellow'), ('Yellow', 'Green', 'Blue', 'Green', 'Purple'), ('Yellow', 'Green', 'Blue', 'Blue', 'Red'), ('Yellow', 'Green', 'Blue', 'Blue', 'Green'), ('Yellow', 'Green', 'Blue', 'Blue', 'Blue'), ('Yellow', 'Green', 'Blue', 'Blue', 'Yellow'), ('Yellow', 'Green', 'Blue', 'Blue', 'Purple'), ('Yellow', 'Green', 'Blue', 'Yellow', 'Red'), ('Yellow', 'Green', 'Blue', 'Yellow', 'Green'), ('Yellow', 'Green', 'Blue', 'Yellow', 'Blue'), ('Yellow', 'Green', 'Blue', 'Yellow', 'Yellow'), ('Yellow', 'Green', 'Blue', 'Yellow', 'Purple'), ('Yellow', 'Green', 'Blue', 'Purple', 'Red'), ('Yellow', 'Green', 'Blue', 'Purple', 'Green'), ('Yellow', 'Green', 'Blue', 'Purple', 'Blue'), ('Yellow', 'Green', 'Blue', 'Purple', 'Yellow'), ('Yellow', 'Green', 'Blue', 'Purple', 'Purple'), ('Yellow', 'Green', 'Yellow', 'Red', 'Red'), ('Yellow', 'Green', 'Yellow', 'Red', 'Green'), ('Yellow', 'Green', 'Yellow', 'Red', 'Blue'), ('Yellow', 'Green', 'Yellow', 'Red', 'Yellow'), ('Yellow', 'Green', 'Yellow', 'Red', 'Purple'), ('Yellow', 'Green', 'Yellow', 'Green', 'Red'), ('Yellow', 'Green', 'Yellow', 'Green', 'Green'), ('Yellow', 'Green', 'Yellow', 'Green', 'Blue'), ('Yellow', 'Green', 'Yellow', 'Green', 'Yellow'), ('Yellow', 'Green', 'Yellow', 'Green', 'Purple'), ('Yellow', 'Green', 'Yellow', 'Blue', 'Red'), ('Yellow', 'Green', 'Yellow', 'Blue', 'Green'), ('Yellow', 'Green', 'Yellow', 'Blue', 'Blue'), ('Yellow', 'Green', 'Yellow', 'Blue', 'Yellow'), ('Yellow', 'Green', 'Yellow', 'Blue', 'Purple'), ('Yellow', 'Green', 'Yellow', 'Yellow', 'Red'), ('Yellow', 'Green', 'Yellow', 'Yellow', 'Green'), ('Yellow', 'Green', 'Yellow', 'Yellow', 'Blue'), ('Yellow', 'Green', 'Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Green', 'Yellow', 'Yellow', 'Purple'), ('Yellow', 'Green', 'Yellow', 'Purple', 'Red'), ('Yellow', 'Green', 'Yellow', 'Purple', 'Green'), ('Yellow', 'Green', 'Yellow', 'Purple', 'Blue'), ('Yellow', 'Green', 'Yellow', 'Purple', 'Yellow'), ('Yellow', 'Green', 'Yellow', 'Purple', 'Purple'), ('Yellow', 'Green', 'Purple', 'Red', 'Red'), ('Yellow', 'Green', 'Purple', 'Red', 'Green'), ('Yellow', 'Green', 'Purple', 'Red', 'Blue'), ('Yellow', 'Green', 'Purple', 'Red', 'Yellow'), ('Yellow', 'Green', 'Purple', 'Red', 'Purple'), ('Yellow', 'Green', 'Purple', 'Green', 'Red'), ('Yellow', 'Green', 'Purple', 'Green', 'Green'), ('Yellow', 'Green', 'Purple', 'Green', 'Blue'), ('Yellow', 'Green', 'Purple', 'Green', 'Yellow'), ('Yellow', 'Green', 'Purple', 'Green', 'Purple'), ('Yellow', 'Green', 'Purple', 'Blue', 'Red'), ('Yellow', 'Green', 'Purple', 'Blue', 'Green'), ('Yellow', 'Green', 'Purple', 'Blue', 'Blue'), ('Yellow', 'Green', 'Purple', 'Blue', 'Yellow'), ('Yellow', 'Green', 'Purple', 'Blue', 'Purple'), ('Yellow', 'Green', 'Purple', 'Yellow', 'Red'), ('Yellow', 'Green', 'Purple', 'Yellow', 'Green'), ('Yellow', 'Green', 'Purple', 'Yellow', 'Blue'), ('Yellow', 'Green', 'Purple', 'Yellow', 'Yellow'), ('Yellow', 'Green', 'Purple', 'Yellow', 'Purple'), ('Yellow', 'Green', 'Purple', 'Purple', 'Red'), ('Yellow', 'Green', 'Purple', 'Purple', 'Green'), ('Yellow', 'Green', 'Purple', 'Purple', 'Blue'), ('Yellow', 'Green', 'Purple', 'Purple', 'Yellow'), ('Yellow', 'Green', 'Purple', 'Purple', 'Purple'), ('Yellow', 'Blue', 'Red', 'Red', 'Red'), ('Yellow', 'Blue', 'Red', 'Red', 'Green'), ('Yellow', 'Blue', 'Red', 'Red', 'Blue'), ('Yellow', 'Blue', 'Red', 'Red', 'Yellow'), ('Yellow', 'Blue', 'Red', 'Red', 'Purple'), ('Yellow', 'Blue', 'Red', 'Green', 'Red'), ('Yellow', 'Blue', 'Red', 'Green', 'Green'), ('Yellow', 'Blue', 'Red', 'Green', 'Blue'), ('Yellow', 'Blue', 'Red', 'Green', 'Yellow'), ('Yellow', 'Blue', 'Red', 'Green', 'Purple'), ('Yellow', 'Blue', 'Red', 'Blue', 'Red'), ('Yellow', 'Blue', 'Red', 'Blue', 'Green'), ('Yellow', 'Blue', 'Red', 'Blue', 'Blue'), ('Yellow', 'Blue', 'Red', 'Blue', 'Yellow'), ('Yellow', 'Blue', 'Red', 'Blue', 'Purple'), ('Yellow', 'Blue', 'Red', 'Yellow', 'Red'), ('Yellow', 'Blue', 'Red', 'Yellow', 'Green'), ('Yellow', 'Blue', 'Red', 'Yellow', 'Blue'), ('Yellow', 'Blue', 'Red', 'Yellow', 'Yellow'), ('Yellow', 'Blue', 'Red', 'Yellow', 'Purple'), ('Yellow', 'Blue', 'Red', 'Purple', 'Red'), ('Yellow', 'Blue', 'Red', 'Purple', 'Green'), ('Yellow', 'Blue', 'Red', 'Purple', 'Blue'), ('Yellow', 'Blue', 'Red', 'Purple', 'Yellow'), ('Yellow', 'Blue', 'Red', 'Purple', 'Purple'), ('Yellow', 'Blue', 'Green', 'Red', 'Red'), ('Yellow', 'Blue', 'Green', 'Red', 'Green'), ('Yellow', 'Blue', 'Green', 'Red', 'Blue'), ('Yellow', 'Blue', 'Green', 'Red', 'Yellow'), ('Yellow', 'Blue', 'Green', 'Red', 'Purple'), ('Yellow', 'Blue', 'Green', 'Green', 'Red'), ('Yellow', 'Blue', 'Green', 'Green', 'Green'), ('Yellow', 'Blue', 'Green', 'Green', 'Blue'), ('Yellow', 'Blue', 'Green', 'Green', 'Yellow'), ('Yellow', 'Blue', 'Green', 'Green', 'Purple'), ('Yellow', 'Blue', 'Green', 'Blue', 'Red'), ('Yellow', 'Blue', 'Green', 'Blue', 'Green'), ('Yellow', 'Blue', 'Green', 'Blue', 'Blue'), ('Yellow', 'Blue', 'Green', 'Blue', 'Yellow'), ('Yellow', 'Blue', 'Green', 'Blue', 'Purple'), ('Yellow', 'Blue', 'Green', 'Yellow', 'Red'), ('Yellow', 'Blue', 'Green', 'Yellow', 'Green'), ('Yellow', 'Blue', 'Green', 'Yellow', 'Blue'), ('Yellow', 'Blue', 'Green', 'Yellow', 'Yellow'), ('Yellow', 'Blue', 'Green', 'Yellow', 'Purple'), ('Yellow', 'Blue', 'Green', 'Purple', 'Red'), ('Yellow', 'Blue', 'Green', 'Purple', 'Green'), ('Yellow', 'Blue', 'Green', 'Purple', 'Blue'), ('Yellow', 'Blue', 'Green', 'Purple', 'Yellow'), ('Yellow', 'Blue', 'Green', 'Purple', 'Purple'), ('Yellow', 'Blue', 'Blue', 'Red', 'Red'), ('Yellow', 'Blue', 'Blue', 'Red', 'Green'), ('Yellow', 'Blue', 'Blue', 'Red', 'Blue'), ('Yellow', 'Blue', 'Blue', 'Red', 'Yellow'), ('Yellow', 'Blue', 'Blue', 'Red', 'Purple'), ('Yellow', 'Blue', 'Blue', 'Green', 'Red'), ('Yellow', 'Blue', 'Blue', 'Green', 'Green'), ('Yellow', 'Blue', 'Blue', 'Green', 'Blue'), ('Yellow', 'Blue', 'Blue', 'Green', 'Yellow'), ('Yellow', 'Blue', 'Blue', 'Green', 'Purple'), ('Yellow', 'Blue', 'Blue', 'Blue', 'Red'), ('Yellow', 'Blue', 'Blue', 'Blue', 'Green'), ('Yellow', 'Blue', 'Blue', 'Blue', 'Blue'), ('Yellow', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Yellow', 'Blue', 'Blue', 'Blue', 'Purple'), ('Yellow', 'Blue', 'Blue', 'Yellow', 'Red'), ('Yellow', 'Blue', 'Blue', 'Yellow', 'Green'), ('Yellow', 'Blue', 'Blue', 'Yellow', 'Blue'), ('Yellow', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Yellow', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Yellow', 'Blue', 'Blue', 'Purple', 'Red'), ('Yellow', 'Blue', 'Blue', 'Purple', 'Green'), ('Yellow', 'Blue', 'Blue', 'Purple', 'Blue'), ('Yellow', 'Blue', 'Blue', 'Purple', 'Yellow'), ('Yellow', 'Blue', 'Blue', 'Purple', 'Purple'), ('Yellow', 'Blue', 'Yellow', 'Red', 'Red'), ('Yellow', 'Blue', 'Yellow', 'Red', 'Green'), ('Yellow', 'Blue', 'Yellow', 'Red', 'Blue'), ('Yellow', 'Blue', 'Yellow', 'Red', 'Yellow'), ('Yellow', 'Blue', 'Yellow', 'Red', 'Purple'), ('Yellow', 'Blue', 'Yellow', 'Green', 'Red'), ('Yellow', 'Blue', 'Yellow', 'Green', 'Green'), ('Yellow', 'Blue', 'Yellow', 'Green', 'Blue'), ('Yellow', 'Blue', 'Yellow', 'Green', 'Yellow'), ('Yellow', 'Blue', 'Yellow', 'Green', 'Purple'), ('Yellow', 'Blue', 'Yellow', 'Blue', 'Red'), ('Yellow', 'Blue', 'Yellow', 'Blue', 'Green'), ('Yellow', 'Blue', 'Yellow', 'Blue', 'Blue'), ('Yellow', 'Blue', 'Yellow', 'Blue', 'Yellow'), ('Yellow', 'Blue', 'Yellow', 'Blue', 'Purple'), ('Yellow', 'Blue', 'Yellow', 'Yellow', 'Red'), ('Yellow', 'Blue', 'Yellow', 'Yellow', 'Green'), ('Yellow', 'Blue', 'Yellow', 'Yellow', 'Blue'), ('Yellow', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Yellow', 'Blue', 'Yellow', 'Purple', 'Red'), ('Yellow', 'Blue', 'Yellow', 'Purple', 'Green'), ('Yellow', 'Blue', 'Yellow', 'Purple', 'Blue'), ('Yellow', 'Blue', 'Yellow', 'Purple', 'Yellow'), ('Yellow', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Yellow', 'Blue', 'Purple', 'Red', 'Red'), ('Yellow', 'Blue', 'Purple', 'Red', 'Green'), ('Yellow', 'Blue', 'Purple', 'Red', 'Blue'), ('Yellow', 'Blue', 'Purple', 'Red', 'Yellow'), ('Yellow', 'Blue', 'Purple', 'Red', 'Purple'), ('Yellow', 'Blue', 'Purple', 'Green', 'Red'), ('Yellow', 'Blue', 'Purple', 'Green', 'Green'), ('Yellow', 'Blue', 'Purple', 'Green', 'Blue'), ('Yellow', 'Blue', 'Purple', 'Green', 'Yellow'), ('Yellow', 'Blue', 'Purple', 'Green', 'Purple'), ('Yellow', 'Blue', 'Purple', 'Blue', 'Red'), ('Yellow', 'Blue', 'Purple', 'Blue', 'Green'), ('Yellow', 'Blue', 'Purple', 'Blue', 'Blue'), ('Yellow', 'Blue', 'Purple', 'Blue', 'Yellow'), ('Yellow', 'Blue', 'Purple', 'Blue', 'Purple'), ('Yellow', 'Blue', 'Purple', 'Yellow', 'Red'), ('Yellow', 'Blue', 'Purple', 'Yellow', 'Green'), ('Yellow', 'Blue', 'Purple', 'Yellow', 'Blue'), ('Yellow', 'Blue', 'Purple', 'Yellow', 'Yellow'), ('Yellow', 'Blue', 'Purple', 'Yellow', 'Purple'), ('Yellow', 'Blue', 'Purple', 'Purple', 'Red'), ('Yellow', 'Blue', 'Purple', 'Purple', 'Green'), ('Yellow', 'Blue', 'Purple', 'Purple', 'Blue'), ('Yellow', 'Blue', 'Purple', 'Purple', 'Yellow'), ('Yellow', 'Blue', 'Purple', 'Purple', 'Purple'), ('Yellow', 'Yellow', 'Red', 'Red', 'Red'), ('Yellow', 'Yellow', 'Red', 'Red', 'Green'), ('Yellow', 'Yellow', 'Red', 'Red', 'Blue'), ('Yellow', 'Yellow', 'Red', 'Red', 'Yellow'), ('Yellow', 'Yellow', 'Red', 'Red', 'Purple'), ('Yellow', 'Yellow', 'Red', 'Green', 'Red'), ('Yellow', 'Yellow', 'Red', 'Green', 'Green'), ('Yellow', 'Yellow', 'Red', 'Green', 'Blue'), ('Yellow', 'Yellow', 'Red', 'Green', 'Yellow'), ('Yellow', 'Yellow', 'Red', 'Green', 'Purple'), ('Yellow', 'Yellow', 'Red', 'Blue', 'Red'), ('Yellow', 'Yellow', 'Red', 'Blue', 'Green'), ('Yellow', 'Yellow', 'Red', 'Blue', 'Blue'), ('Yellow', 'Yellow', 'Red', 'Blue', 'Yellow'), ('Yellow', 'Yellow', 'Red', 'Blue', 'Purple'), ('Yellow', 'Yellow', 'Red', 'Yellow', 'Red'), ('Yellow', 'Yellow', 'Red', 'Yellow', 'Green'), ('Yellow', 'Yellow', 'Red', 'Yellow', 'Blue'), ('Yellow', 'Yellow', 'Red', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Red', 'Yellow', 'Purple'), ('Yellow', 'Yellow', 'Red', 'Purple', 'Red'), ('Yellow', 'Yellow', 'Red', 'Purple', 'Green'), ('Yellow', 'Yellow', 'Red', 'Purple', 'Blue'), ('Yellow', 'Yellow', 'Red', 'Purple', 'Yellow'), ('Yellow', 'Yellow', 'Red', 'Purple', 'Purple'), ('Yellow', 'Yellow', 'Green', 'Red', 'Red'), ('Yellow', 'Yellow', 'Green', 'Red', 'Green'), ('Yellow', 'Yellow', 'Green', 'Red', 'Blue'), ('Yellow', 'Yellow', 'Green', 'Red', 'Yellow'), ('Yellow', 'Yellow', 'Green', 'Red', 'Purple'), ('Yellow', 'Yellow', 'Green', 'Green', 'Red'), ('Yellow', 'Yellow', 'Green', 'Green', 'Green'), ('Yellow', 'Yellow', 'Green', 'Green', 'Blue'), ('Yellow', 'Yellow', 'Green', 'Green', 'Yellow'), ('Yellow', 'Yellow', 'Green', 'Green', 'Purple'), ('Yellow', 'Yellow', 'Green', 'Blue', 'Red'), ('Yellow', 'Yellow', 'Green', 'Blue', 'Green'), ('Yellow', 'Yellow', 'Green', 'Blue', 'Blue'), ('Yellow', 'Yellow', 'Green', 'Blue', 'Yellow'), ('Yellow', 'Yellow', 'Green', 'Blue', 'Purple'), ('Yellow', 'Yellow', 'Green', 'Yellow', 'Red'), ('Yellow', 'Yellow', 'Green', 'Yellow', 'Green'), ('Yellow', 'Yellow', 'Green', 'Yellow', 'Blue'), ('Yellow', 'Yellow', 'Green', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Green', 'Yellow', 'Purple'), ('Yellow', 'Yellow', 'Green', 'Purple', 'Red'), ('Yellow', 'Yellow', 'Green', 'Purple', 'Green'), ('Yellow', 'Yellow', 'Green', 'Purple', 'Blue'), ('Yellow', 'Yellow', 'Green', 'Purple', 'Yellow'), ('Yellow', 'Yellow', 'Green', 'Purple', 'Purple'), ('Yellow', 'Yellow', 'Blue', 'Red', 'Red'), ('Yellow', 'Yellow', 'Blue', 'Red', 'Green'), ('Yellow', 'Yellow', 'Blue', 'Red', 'Blue'), ('Yellow', 'Yellow', 'Blue', 'Red', 'Yellow'), ('Yellow', 'Yellow', 'Blue', 'Red', 'Purple'), ('Yellow', 'Yellow', 'Blue', 'Green', 'Red'), ('Yellow', 'Yellow', 'Blue', 'Green', 'Green'), ('Yellow', 'Yellow', 'Blue', 'Green', 'Blue'), ('Yellow', 'Yellow', 'Blue', 'Green', 'Yellow'), ('Yellow', 'Yellow', 'Blue', 'Green', 'Purple'), ('Yellow', 'Yellow', 'Blue', 'Blue', 'Red'), ('Yellow', 'Yellow', 'Blue', 'Blue', 'Green'), ('Yellow', 'Yellow', 'Blue', 'Blue', 'Blue'), ('Yellow', 'Yellow', 'Blue', 'Blue', 'Yellow'), ('Yellow', 'Yellow', 'Blue', 'Blue', 'Purple'), ('Yellow', 'Yellow', 'Blue', 'Yellow', 'Red'), ('Yellow', 'Yellow', 'Blue', 'Yellow', 'Green'), ('Yellow', 'Yellow', 'Blue', 'Yellow', 'Blue'), ('Yellow', 'Yellow', 'Blue', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Blue', 'Yellow', 'Purple'), ('Yellow', 'Yellow', 'Blue', 'Purple', 'Red'), ('Yellow', 'Yellow', 'Blue', 'Purple', 'Green'), ('Yellow', 'Yellow', 'Blue', 'Purple', 'Blue'), ('Yellow', 'Yellow', 'Blue', 'Purple', 'Yellow'), ('Yellow', 'Yellow', 'Blue', 'Purple', 'Purple'), ('Yellow', 'Yellow', 'Yellow', 'Red', 'Red'), ('Yellow', 'Yellow', 'Yellow', 'Red', 'Green'), ('Yellow', 'Yellow', 'Yellow', 'Red', 'Blue'), ('Yellow', 'Yellow', 'Yellow', 'Red', 'Yellow'), ('Yellow', 'Yellow', 'Yellow', 'Red', 'Purple'), ('Yellow', 'Yellow', 'Yellow', 'Green', 'Red'), ('Yellow', 'Yellow', 'Yellow', 'Green', 'Green'), ('Yellow', 'Yellow', 'Yellow', 'Green', 'Blue'), ('Yellow', 'Yellow', 'Yellow', 'Green', 'Yellow'), ('Yellow', 'Yellow', 'Yellow', 'Green', 'Purple'), ('Yellow', 'Yellow', 'Yellow', 'Blue', 'Red'), ('Yellow', 'Yellow', 'Yellow', 'Blue', 'Green'), ('Yellow', 'Yellow', 'Yellow', 'Blue', 'Blue'), ('Yellow', 'Yellow', 'Yellow', 'Blue', 'Yellow'), ('Yellow', 'Yellow', 'Yellow', 'Blue', 'Purple'), ('Yellow', 'Yellow', 'Yellow', 'Yellow', 'Red'), ('Yellow', 'Yellow', 'Yellow', 'Yellow', 'Green'), ('Yellow', 'Yellow', 'Yellow', 'Yellow', 'Blue'), ('Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Yellow', 'Yellow', 'Yellow', 'Purple', 'Red'), ('Yellow', 'Yellow', 'Yellow', 'Purple', 'Green'), ('Yellow', 'Yellow', 'Yellow', 'Purple', 'Blue'), ('Yellow', 'Yellow', 'Yellow', 'Purple', 'Yellow'), ('Yellow', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Yellow', 'Yellow', 'Purple', 'Red', 'Red'), ('Yellow', 'Yellow', 'Purple', 'Red', 'Green'), ('Yellow', 'Yellow', 'Purple', 'Red', 'Blue'), ('Yellow', 'Yellow', 'Purple', 'Red', 'Yellow'), ('Yellow', 'Yellow', 'Purple', 'Red', 'Purple'), ('Yellow', 'Yellow', 'Purple', 'Green', 'Red'), ('Yellow', 'Yellow', 'Purple', 'Green', 'Green'), ('Yellow', 'Yellow', 'Purple', 'Green', 'Blue'), ('Yellow', 'Yellow', 'Purple', 'Green', 'Yellow'), ('Yellow', 'Yellow', 'Purple', 'Green', 'Purple'), ('Yellow', 'Yellow', 'Purple', 'Blue', 'Red'), ('Yellow', 'Yellow', 'Purple', 'Blue', 'Green'), ('Yellow', 'Yellow', 'Purple', 'Blue', 'Blue'), ('Yellow', 'Yellow', 'Purple', 'Blue', 'Yellow'), ('Yellow', 'Yellow', 'Purple', 'Blue', 'Purple'), ('Yellow', 'Yellow', 'Purple', 'Yellow', 'Red'), ('Yellow', 'Yellow', 'Purple', 'Yellow', 'Green'), ('Yellow', 'Yellow', 'Purple', 'Yellow', 'Blue'), ('Yellow', 'Yellow', 'Purple', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Purple', 'Yellow', 'Purple'), ('Yellow', 'Yellow', 'Purple', 'Purple', 'Red'), ('Yellow', 'Yellow', 'Purple', 'Purple', 'Green'), ('Yellow', 'Yellow', 'Purple', 'Purple', 'Blue'), ('Yellow', 'Yellow', 'Purple', 'Purple', 'Yellow'), ('Yellow', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Yellow', 'Purple', 'Red', 'Red', 'Red'), ('Yellow', 'Purple', 'Red', 'Red', 'Green'), ('Yellow', 'Purple', 'Red', 'Red', 'Blue'), ('Yellow', 'Purple', 'Red', 'Red', 'Yellow'), ('Yellow', 'Purple', 'Red', 'Red', 'Purple'), ('Yellow', 'Purple', 'Red', 'Green', 'Red'), ('Yellow', 'Purple', 'Red', 'Green', 'Green'), ('Yellow', 'Purple', 'Red', 'Green', 'Blue'), ('Yellow', 'Purple', 'Red', 'Green', 'Yellow'), ('Yellow', 'Purple', 'Red', 'Green', 'Purple'), ('Yellow', 'Purple', 'Red', 'Blue', 'Red'), ('Yellow', 'Purple', 'Red', 'Blue', 'Green'), ('Yellow', 'Purple', 'Red', 'Blue', 'Blue'), ('Yellow', 'Purple', 'Red', 'Blue', 'Yellow'), ('Yellow', 'Purple', 'Red', 'Blue', 'Purple'), ('Yellow', 'Purple', 'Red', 'Yellow', 'Red'), ('Yellow', 'Purple', 'Red', 'Yellow', 'Green'), ('Yellow', 'Purple', 'Red', 'Yellow', 'Blue'), ('Yellow', 'Purple', 'Red', 'Yellow', 'Yellow'), ('Yellow', 'Purple', 'Red', 'Yellow', 'Purple'), ('Yellow', 'Purple', 'Red', 'Purple', 'Red'), ('Yellow', 'Purple', 'Red', 'Purple', 'Green'), ('Yellow', 'Purple', 'Red', 'Purple', 'Blue'), ('Yellow', 'Purple', 'Red', 'Purple', 'Yellow'), ('Yellow', 'Purple', 'Red', 'Purple', 'Purple'), ('Yellow', 'Purple', 'Green', 'Red', 'Red'), ('Yellow', 'Purple', 'Green', 'Red', 'Green'), ('Yellow', 'Purple', 'Green', 'Red', 'Blue'), ('Yellow', 'Purple', 'Green', 'Red', 'Yellow'), ('Yellow', 'Purple', 'Green', 'Red', 'Purple'), ('Yellow', 'Purple', 'Green', 'Green', 'Red'), ('Yellow', 'Purple', 'Green', 'Green', 'Green'), ('Yellow', 'Purple', 'Green', 'Green', 'Blue'), ('Yellow', 'Purple', 'Green', 'Green', 'Yellow'), ('Yellow', 'Purple', 'Green', 'Green', 'Purple'), ('Yellow', 'Purple', 'Green', 'Blue', 'Red'), ('Yellow', 'Purple', 'Green', 'Blue', 'Green'), ('Yellow', 'Purple', 'Green', 'Blue', 'Blue'), ('Yellow', 'Purple', 'Green', 'Blue', 'Yellow'), ('Yellow', 'Purple', 'Green', 'Blue', 'Purple'), ('Yellow', 'Purple', 'Green', 'Yellow', 'Red'), ('Yellow', 'Purple', 'Green', 'Yellow', 'Green'), ('Yellow', 'Purple', 'Green', 'Yellow', 'Blue'), ('Yellow', 'Purple', 'Green', 'Yellow', 'Yellow'), ('Yellow', 'Purple', 'Green', 'Yellow', 'Purple'), ('Yellow', 'Purple', 'Green', 'Purple', 'Red'), ('Yellow', 'Purple', 'Green', 'Purple', 'Green'), ('Yellow', 'Purple', 'Green', 'Purple', 'Blue'), ('Yellow', 'Purple', 'Green', 'Purple', 'Yellow'), ('Yellow', 'Purple', 'Green', 'Purple', 'Purple'), ('Yellow', 'Purple', 'Blue', 'Red', 'Red'), ('Yellow', 'Purple', 'Blue', 'Red', 'Green'), ('Yellow', 'Purple', 'Blue', 'Red', 'Blue'), ('Yellow', 'Purple', 'Blue', 'Red', 'Yellow'), ('Yellow', 'Purple', 'Blue', 'Red', 'Purple'), ('Yellow', 'Purple', 'Blue', 'Green', 'Red'), ('Yellow', 'Purple', 'Blue', 'Green', 'Green'), ('Yellow', 'Purple', 'Blue', 'Green', 'Blue'), ('Yellow', 'Purple', 'Blue', 'Green', 'Yellow'), ('Yellow', 'Purple', 'Blue', 'Green', 'Purple'), ('Yellow', 'Purple', 'Blue', 'Blue', 'Red'), ('Yellow', 'Purple', 'Blue', 'Blue', 'Green'), ('Yellow', 'Purple', 'Blue', 'Blue', 'Blue'), ('Yellow', 'Purple', 'Blue', 'Blue', 'Yellow'), ('Yellow', 'Purple', 'Blue', 'Blue', 'Purple'), ('Yellow', 'Purple', 'Blue', 'Yellow', 'Red'), ('Yellow', 'Purple', 'Blue', 'Yellow', 'Green'), ('Yellow', 'Purple', 'Blue', 'Yellow', 'Blue'), ('Yellow', 'Purple', 'Blue', 'Yellow', 'Yellow'), ('Yellow', 'Purple', 'Blue', 'Yellow', 'Purple'), ('Yellow', 'Purple', 'Blue', 'Purple', 'Red'), ('Yellow', 'Purple', 'Blue', 'Purple', 'Green'), ('Yellow', 'Purple', 'Blue', 'Purple', 'Blue'), ('Yellow', 'Purple', 'Blue', 'Purple', 'Yellow'), ('Yellow', 'Purple', 'Blue', 'Purple', 'Purple'), ('Yellow', 'Purple', 'Yellow', 'Red', 'Red'), ('Yellow', 'Purple', 'Yellow', 'Red', 'Green'), ('Yellow', 'Purple', 'Yellow', 'Red', 'Blue'), ('Yellow', 'Purple', 'Yellow', 'Red', 'Yellow'), ('Yellow', 'Purple', 'Yellow', 'Red', 'Purple'), ('Yellow', 'Purple', 'Yellow', 'Green', 'Red'), ('Yellow', 'Purple', 'Yellow', 'Green', 'Green'), ('Yellow', 'Purple', 'Yellow', 'Green', 'Blue'), ('Yellow', 'Purple', 'Yellow', 'Green', 'Yellow'), ('Yellow', 'Purple', 'Yellow', 'Green', 'Purple'), ('Yellow', 'Purple', 'Yellow', 'Blue', 'Red'), ('Yellow', 'Purple', 'Yellow', 'Blue', 'Green'), ('Yellow', 'Purple', 'Yellow', 'Blue', 'Blue'), ('Yellow', 'Purple', 'Yellow', 'Blue', 'Yellow'), ('Yellow', 'Purple', 'Yellow', 'Blue', 'Purple'), ('Yellow', 'Purple', 'Yellow', 'Yellow', 'Red'), ('Yellow', 'Purple', 'Yellow', 'Yellow', 'Green'), ('Yellow', 'Purple', 'Yellow', 'Yellow', 'Blue'), ('Yellow', 'Purple', 'Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Purple', 'Yellow', 'Yellow', 'Purple'), ('Yellow', 'Purple', 'Yellow', 'Purple', 'Red'), ('Yellow', 'Purple', 'Yellow', 'Purple', 'Green'), ('Yellow', 'Purple', 'Yellow', 'Purple', 'Blue'), ('Yellow', 'Purple', 'Yellow', 'Purple', 'Yellow'), ('Yellow', 'Purple', 'Yellow', 'Purple', 'Purple'), ('Yellow', 'Purple', 'Purple', 'Red', 'Red'), ('Yellow', 'Purple', 'Purple', 'Red', 'Green'), ('Yellow', 'Purple', 'Purple', 'Red', 'Blue'), ('Yellow', 'Purple', 'Purple', 'Red', 'Yellow'), ('Yellow', 'Purple', 'Purple', 'Red', 'Purple'), ('Yellow', 'Purple', 'Purple', 'Green', 'Red'), ('Yellow', 'Purple', 'Purple', 'Green', 'Green'), ('Yellow', 'Purple', 'Purple', 'Green', 'Blue'), ('Yellow', 'Purple', 'Purple', 'Green', 'Yellow'), ('Yellow', 'Purple', 'Purple', 'Green', 'Purple'), ('Yellow', 'Purple', 'Purple', 'Blue', 'Red'), ('Yellow', 'Purple', 'Purple', 'Blue', 'Green'), ('Yellow', 'Purple', 'Purple', 'Blue', 'Blue'), ('Yellow', 'Purple', 'Purple', 'Blue', 'Yellow'), ('Yellow', 'Purple', 'Purple', 'Blue', 'Purple'), ('Yellow', 'Purple', 'Purple', 'Yellow', 'Red'), ('Yellow', 'Purple', 'Purple', 'Yellow', 'Green'), ('Yellow', 'Purple', 'Purple', 'Yellow', 'Blue'), ('Yellow', 'Purple', 'Purple', 'Yellow', 'Yellow'), ('Yellow', 'Purple', 'Purple', 'Yellow', 'Purple'), ('Yellow', 'Purple', 'Purple', 'Purple', 'Red'), ('Yellow', 'Purple', 'Purple', 'Purple', 'Green'), ('Yellow', 'Purple', 'Purple', 'Purple', 'Blue'), ('Yellow', 'Purple', 'Purple', 'Purple', 'Yellow'), ('Yellow', 'Purple', 'Purple', 'Purple', 'Purple'), ('Purple', 'Red', 'Red', 'Red', 'Red'), ('Purple', 'Red', 'Red', 'Red', 'Green'), ('Purple', 'Red', 'Red', 'Red', 'Blue'), ('Purple', 'Red', 'Red', 'Red', 'Yellow'), ('Purple', 'Red', 'Red', 'Red', 'Purple'), ('Purple', 'Red', 'Red', 'Green', 'Red'), ('Purple', 'Red', 'Red', 'Green', 'Green'), ('Purple', 'Red', 'Red', 'Green', 'Blue'), ('Purple', 'Red', 'Red', 'Green', 'Yellow'), ('Purple', 'Red', 'Red', 'Green', 'Purple'), ('Purple', 'Red', 'Red', 'Blue', 'Red'), ('Purple', 'Red', 'Red', 'Blue', 'Green'), ('Purple', 'Red', 'Red', 'Blue', 'Blue'), ('Purple', 'Red', 'Red', 'Blue', 'Yellow'), ('Purple', 'Red', 'Red', 'Blue', 'Purple'), ('Purple', 'Red', 'Red', 'Yellow', 'Red'), ('Purple', 'Red', 'Red', 'Yellow', 'Green'), ('Purple', 'Red', 'Red', 'Yellow', 'Blue'), ('Purple', 'Red', 'Red', 'Yellow', 'Yellow'), ('Purple', 'Red', 'Red', 'Yellow', 'Purple'), ('Purple', 'Red', 'Red', 'Purple', 'Red'), ('Purple', 'Red', 'Red', 'Purple', 'Green'), ('Purple', 'Red', 'Red', 'Purple', 'Blue'), ('Purple', 'Red', 'Red', 'Purple', 'Yellow'), ('Purple', 'Red', 'Red', 'Purple', 'Purple'), ('Purple', 'Red', 'Green', 'Red', 'Red'), ('Purple', 'Red', 'Green', 'Red', 'Green'), ('Purple', 'Red', 'Green', 'Red', 'Blue'), ('Purple', 'Red', 'Green', 'Red', 'Yellow'), ('Purple', 'Red', 'Green', 'Red', 'Purple'), ('Purple', 'Red', 'Green', 'Green', 'Red'), ('Purple', 'Red', 'Green', 'Green', 'Green'), ('Purple', 'Red', 'Green', 'Green', 'Blue'), ('Purple', 'Red', 'Green', 'Green', 'Yellow'), ('Purple', 'Red', 'Green', 'Green', 'Purple'), ('Purple', 'Red', 'Green', 'Blue', 'Red'), ('Purple', 'Red', 'Green', 'Blue', 'Green'), ('Purple', 'Red', 'Green', 'Blue', 'Blue'), ('Purple', 'Red', 'Green', 'Blue', 'Yellow'), ('Purple', 'Red', 'Green', 'Blue', 'Purple'), ('Purple', 'Red', 'Green', 'Yellow', 'Red'), ('Purple', 'Red', 'Green', 'Yellow', 'Green'), ('Purple', 'Red', 'Green', 'Yellow', 'Blue'), ('Purple', 'Red', 'Green', 'Yellow', 'Yellow'), ('Purple', 'Red', 'Green', 'Yellow', 'Purple'), ('Purple', 'Red', 'Green', 'Purple', 'Red'), ('Purple', 'Red', 'Green', 'Purple', 'Green'), ('Purple', 'Red', 'Green', 'Purple', 'Blue'), ('Purple', 'Red', 'Green', 'Purple', 'Yellow'), ('Purple', 'Red', 'Green', 'Purple', 'Purple'), ('Purple', 'Red', 'Blue', 'Red', 'Red'), ('Purple', 'Red', 'Blue', 'Red', 'Green'), ('Purple', 'Red', 'Blue', 'Red', 'Blue'), ('Purple', 'Red', 'Blue', 'Red', 'Yellow'), ('Purple', 'Red', 'Blue', 'Red', 'Purple'), ('Purple', 'Red', 'Blue', 'Green', 'Red'), ('Purple', 'Red', 'Blue', 'Green', 'Green'), ('Purple', 'Red', 'Blue', 'Green', 'Blue'), ('Purple', 'Red', 'Blue', 'Green', 'Yellow'), ('Purple', 'Red', 'Blue', 'Green', 'Purple'), ('Purple', 'Red', 'Blue', 'Blue', 'Red'), ('Purple', 'Red', 'Blue', 'Blue', 'Green'), ('Purple', 'Red', 'Blue', 'Blue', 'Blue'), ('Purple', 'Red', 'Blue', 'Blue', 'Yellow'), ('Purple', 'Red', 'Blue', 'Blue', 'Purple'), ('Purple', 'Red', 'Blue', 'Yellow', 'Red'), ('Purple', 'Red', 'Blue', 'Yellow', 'Green'), ('Purple', 'Red', 'Blue', 'Yellow', 'Blue'), ('Purple', 'Red', 'Blue', 'Yellow', 'Yellow'), ('Purple', 'Red', 'Blue', 'Yellow', 'Purple'), ('Purple', 'Red', 'Blue', 'Purple', 'Red'), ('Purple', 'Red', 'Blue', 'Purple', 'Green'), ('Purple', 'Red', 'Blue', 'Purple', 'Blue'), ('Purple', 'Red', 'Blue', 'Purple', 'Yellow'), ('Purple', 'Red', 'Blue', 'Purple', 'Purple'), ('Purple', 'Red', 'Yellow', 'Red', 'Red'), ('Purple', 'Red', 'Yellow', 'Red', 'Green'), ('Purple', 'Red', 'Yellow', 'Red', 'Blue'), ('Purple', 'Red', 'Yellow', 'Red', 'Yellow'), ('Purple', 'Red', 'Yellow', 'Red', 'Purple'), ('Purple', 'Red', 'Yellow', 'Green', 'Red'), ('Purple', 'Red', 'Yellow', 'Green', 'Green'), ('Purple', 'Red', 'Yellow', 'Green', 'Blue'), ('Purple', 'Red', 'Yellow', 'Green', 'Yellow'), ('Purple', 'Red', 'Yellow', 'Green', 'Purple'), ('Purple', 'Red', 'Yellow', 'Blue', 'Red'), ('Purple', 'Red', 'Yellow', 'Blue', 'Green'), ('Purple', 'Red', 'Yellow', 'Blue', 'Blue'), ('Purple', 'Red', 'Yellow', 'Blue', 'Yellow'), ('Purple', 'Red', 'Yellow', 'Blue', 'Purple'), ('Purple', 'Red', 'Yellow', 'Yellow', 'Red'), ('Purple', 'Red', 'Yellow', 'Yellow', 'Green'), ('Purple', 'Red', 'Yellow', 'Yellow', 'Blue'), ('Purple', 'Red', 'Yellow', 'Yellow', 'Yellow'), ('Purple', 'Red', 'Yellow', 'Yellow', 'Purple'), ('Purple', 'Red', 'Yellow', 'Purple', 'Red'), ('Purple', 'Red', 'Yellow', 'Purple', 'Green'), ('Purple', 'Red', 'Yellow', 'Purple', 'Blue'), ('Purple', 'Red', 'Yellow', 'Purple', 'Yellow'), ('Purple', 'Red', 'Yellow', 'Purple', 'Purple'), ('Purple', 'Red', 'Purple', 'Red', 'Red'), ('Purple', 'Red', 'Purple', 'Red', 'Green'), ('Purple', 'Red', 'Purple', 'Red', 'Blue'), ('Purple', 'Red', 'Purple', 'Red', 'Yellow'), ('Purple', 'Red', 'Purple', 'Red', 'Purple'), ('Purple', 'Red', 'Purple', 'Green', 'Red'), ('Purple', 'Red', 'Purple', 'Green', 'Green'), ('Purple', 'Red', 'Purple', 'Green', 'Blue'), ('Purple', 'Red', 'Purple', 'Green', 'Yellow'), ('Purple', 'Red', 'Purple', 'Green', 'Purple'), ('Purple', 'Red', 'Purple', 'Blue', 'Red'), ('Purple', 'Red', 'Purple', 'Blue', 'Green'), ('Purple', 'Red', 'Purple', 'Blue', 'Blue'), ('Purple', 'Red', 'Purple', 'Blue', 'Yellow'), ('Purple', 'Red', 'Purple', 'Blue', 'Purple'), ('Purple', 'Red', 'Purple', 'Yellow', 'Red'), ('Purple', 'Red', 'Purple', 'Yellow', 'Green'), ('Purple', 'Red', 'Purple', 'Yellow', 'Blue'), ('Purple', 'Red', 'Purple', 'Yellow', 'Yellow'), ('Purple', 'Red', 'Purple', 'Yellow', 'Purple'), ('Purple', 'Red', 'Purple', 'Purple', 'Red'), ('Purple', 'Red', 'Purple', 'Purple', 'Green'), ('Purple', 'Red', 'Purple', 'Purple', 'Blue'), ('Purple', 'Red', 'Purple', 'Purple', 'Yellow'), ('Purple', 'Red', 'Purple', 'Purple', 'Purple'), ('Purple', 'Green', 'Red', 'Red', 'Red'), ('Purple', 'Green', 'Red', 'Red', 'Green'), ('Purple', 'Green', 'Red', 'Red', 'Blue'), ('Purple', 'Green', 'Red', 'Red', 'Yellow'), ('Purple', 'Green', 'Red', 'Red', 'Purple'), ('Purple', 'Green', 'Red', 'Green', 'Red'), ('Purple', 'Green', 'Red', 'Green', 'Green'), ('Purple', 'Green', 'Red', 'Green', 'Blue'), ('Purple', 'Green', 'Red', 'Green', 'Yellow'), ('Purple', 'Green', 'Red', 'Green', 'Purple'), ('Purple', 'Green', 'Red', 'Blue', 'Red'), ('Purple', 'Green', 'Red', 'Blue', 'Green'), ('Purple', 'Green', 'Red', 'Blue', 'Blue'), ('Purple', 'Green', 'Red', 'Blue', 'Yellow'), ('Purple', 'Green', 'Red', 'Blue', 'Purple'), ('Purple', 'Green', 'Red', 'Yellow', 'Red'), ('Purple', 'Green', 'Red', 'Yellow', 'Green'), ('Purple', 'Green', 'Red', 'Yellow', 'Blue'), ('Purple', 'Green', 'Red', 'Yellow', 'Yellow'), ('Purple', 'Green', 'Red', 'Yellow', 'Purple'), ('Purple', 'Green', 'Red', 'Purple', 'Red'), ('Purple', 'Green', 'Red', 'Purple', 'Green'), ('Purple', 'Green', 'Red', 'Purple', 'Blue'), ('Purple', 'Green', 'Red', 'Purple', 'Yellow'), ('Purple', 'Green', 'Red', 'Purple', 'Purple'), ('Purple', 'Green', 'Green', 'Red', 'Red'), ('Purple', 'Green', 'Green', 'Red', 'Green'), ('Purple', 'Green', 'Green', 'Red', 'Blue'), ('Purple', 'Green', 'Green', 'Red', 'Yellow'), ('Purple', 'Green', 'Green', 'Red', 'Purple'), ('Purple', 'Green', 'Green', 'Green', 'Red'), ('Purple', 'Green', 'Green', 'Green', 'Green'), ('Purple', 'Green', 'Green', 'Green', 'Blue'), ('Purple', 'Green', 'Green', 'Green', 'Yellow'), ('Purple', 'Green', 'Green', 'Green', 'Purple'), ('Purple', 'Green', 'Green', 'Blue', 'Red'), ('Purple', 'Green', 'Green', 'Blue', 'Green'), ('Purple', 'Green', 'Green', 'Blue', 'Blue'), ('Purple', 'Green', 'Green', 'Blue', 'Yellow'), ('Purple', 'Green', 'Green', 'Blue', 'Purple'), ('Purple', 'Green', 'Green', 'Yellow', 'Red'), ('Purple', 'Green', 'Green', 'Yellow', 'Green'), ('Purple', 'Green', 'Green', 'Yellow', 'Blue'), ('Purple', 'Green', 'Green', 'Yellow', 'Yellow'), ('Purple', 'Green', 'Green', 'Yellow', 'Purple'), ('Purple', 'Green', 'Green', 'Purple', 'Red'), ('Purple', 'Green', 'Green', 'Purple', 'Green'), ('Purple', 'Green', 'Green', 'Purple', 'Blue'), ('Purple', 'Green', 'Green', 'Purple', 'Yellow'), ('Purple', 'Green', 'Green', 'Purple', 'Purple'), ('Purple', 'Green', 'Blue', 'Red', 'Red'), ('Purple', 'Green', 'Blue', 'Red', 'Green'), ('Purple', 'Green', 'Blue', 'Red', 'Blue'), ('Purple', 'Green', 'Blue', 'Red', 'Yellow'), ('Purple', 'Green', 'Blue', 'Red', 'Purple'), ('Purple', 'Green', 'Blue', 'Green', 'Red'), ('Purple', 'Green', 'Blue', 'Green', 'Green'), ('Purple', 'Green', 'Blue', 'Green', 'Blue'), ('Purple', 'Green', 'Blue', 'Green', 'Yellow'), ('Purple', 'Green', 'Blue', 'Green', 'Purple'), ('Purple', 'Green', 'Blue', 'Blue', 'Red'), ('Purple', 'Green', 'Blue', 'Blue', 'Green'), ('Purple', 'Green', 'Blue', 'Blue', 'Blue'), ('Purple', 'Green', 'Blue', 'Blue', 'Yellow'), ('Purple', 'Green', 'Blue', 'Blue', 'Purple'), ('Purple', 'Green', 'Blue', 'Yellow', 'Red'), ('Purple', 'Green', 'Blue', 'Yellow', 'Green'), ('Purple', 'Green', 'Blue', 'Yellow', 'Blue'), ('Purple', 'Green', 'Blue', 'Yellow', 'Yellow'), ('Purple', 'Green', 'Blue', 'Yellow', 'Purple'), ('Purple', 'Green', 'Blue', 'Purple', 'Red'), ('Purple', 'Green', 'Blue', 'Purple', 'Green'), ('Purple', 'Green', 'Blue', 'Purple', 'Blue'), ('Purple', 'Green', 'Blue', 'Purple', 'Yellow'), ('Purple', 'Green', 'Blue', 'Purple', 'Purple'), ('Purple', 'Green', 'Yellow', 'Red', 'Red'), ('Purple', 'Green', 'Yellow', 'Red', 'Green'), ('Purple', 'Green', 'Yellow', 'Red', 'Blue'), ('Purple', 'Green', 'Yellow', 'Red', 'Yellow'), ('Purple', 'Green', 'Yellow', 'Red', 'Purple'), ('Purple', 'Green', 'Yellow', 'Green', 'Red'), ('Purple', 'Green', 'Yellow', 'Green', 'Green'), ('Purple', 'Green', 'Yellow', 'Green', 'Blue'), ('Purple', 'Green', 'Yellow', 'Green', 'Yellow'), ('Purple', 'Green', 'Yellow', 'Green', 'Purple'), ('Purple', 'Green', 'Yellow', 'Blue', 'Red'), ('Purple', 'Green', 'Yellow', 'Blue', 'Green'), ('Purple', 'Green', 'Yellow', 'Blue', 'Blue'), ('Purple', 'Green', 'Yellow', 'Blue', 'Yellow'), ('Purple', 'Green', 'Yellow', 'Blue', 'Purple'), ('Purple', 'Green', 'Yellow', 'Yellow', 'Red'), ('Purple', 'Green', 'Yellow', 'Yellow', 'Green'), ('Purple', 'Green', 'Yellow', 'Yellow', 'Blue'), ('Purple', 'Green', 'Yellow', 'Yellow', 'Yellow'), ('Purple', 'Green', 'Yellow', 'Yellow', 'Purple'), ('Purple', 'Green', 'Yellow', 'Purple', 'Red'), ('Purple', 'Green', 'Yellow', 'Purple', 'Green'), ('Purple', 'Green', 'Yellow', 'Purple', 'Blue'), ('Purple', 'Green', 'Yellow', 'Purple', 'Yellow'), ('Purple', 'Green', 'Yellow', 'Purple', 'Purple'), ('Purple', 'Green', 'Purple', 'Red', 'Red'), ('Purple', 'Green', 'Purple', 'Red', 'Green'), ('Purple', 'Green', 'Purple', 'Red', 'Blue'), ('Purple', 'Green', 'Purple', 'Red', 'Yellow'), ('Purple', 'Green', 'Purple', 'Red', 'Purple'), ('Purple', 'Green', 'Purple', 'Green', 'Red'), ('Purple', 'Green', 'Purple', 'Green', 'Green'), ('Purple', 'Green', 'Purple', 'Green', 'Blue'), ('Purple', 'Green', 'Purple', 'Green', 'Yellow'), ('Purple', 'Green', 'Purple', 'Green', 'Purple'), ('Purple', 'Green', 'Purple', 'Blue', 'Red'), ('Purple', 'Green', 'Purple', 'Blue', 'Green'), ('Purple', 'Green', 'Purple', 'Blue', 'Blue'), ('Purple', 'Green', 'Purple', 'Blue', 'Yellow'), ('Purple', 'Green', 'Purple', 'Blue', 'Purple'), ('Purple', 'Green', 'Purple', 'Yellow', 'Red'), ('Purple', 'Green', 'Purple', 'Yellow', 'Green'), ('Purple', 'Green', 'Purple', 'Yellow', 'Blue'), ('Purple', 'Green', 'Purple', 'Yellow', 'Yellow'), ('Purple', 'Green', 'Purple', 'Yellow', 'Purple'), ('Purple', 'Green', 'Purple', 'Purple', 'Red'), ('Purple', 'Green', 'Purple', 'Purple', 'Green'), ('Purple', 'Green', 'Purple', 'Purple', 'Blue'), ('Purple', 'Green', 'Purple', 'Purple', 'Yellow'), ('Purple', 'Green', 'Purple', 'Purple', 'Purple'), ('Purple', 'Blue', 'Red', 'Red', 'Red'), ('Purple', 'Blue', 'Red', 'Red', 'Green'), ('Purple', 'Blue', 'Red', 'Red', 'Blue'), ('Purple', 'Blue', 'Red', 'Red', 'Yellow'), ('Purple', 'Blue', 'Red', 'Red', 'Purple'), ('Purple', 'Blue', 'Red', 'Green', 'Red'), ('Purple', 'Blue', 'Red', 'Green', 'Green'), ('Purple', 'Blue', 'Red', 'Green', 'Blue'), ('Purple', 'Blue', 'Red', 'Green', 'Yellow'), ('Purple', 'Blue', 'Red', 'Green', 'Purple'), ('Purple', 'Blue', 'Red', 'Blue', 'Red'), ('Purple', 'Blue', 'Red', 'Blue', 'Green'), ('Purple', 'Blue', 'Red', 'Blue', 'Blue'), ('Purple', 'Blue', 'Red', 'Blue', 'Yellow'), ('Purple', 'Blue', 'Red', 'Blue', 'Purple'), ('Purple', 'Blue', 'Red', 'Yellow', 'Red'), ('Purple', 'Blue', 'Red', 'Yellow', 'Green'), ('Purple', 'Blue', 'Red', 'Yellow', 'Blue'), ('Purple', 'Blue', 'Red', 'Yellow', 'Yellow'), ('Purple', 'Blue', 'Red', 'Yellow', 'Purple'), ('Purple', 'Blue', 'Red', 'Purple', 'Red'), ('Purple', 'Blue', 'Red', 'Purple', 'Green'), ('Purple', 'Blue', 'Red', 'Purple', 'Blue'), ('Purple', 'Blue', 'Red', 'Purple', 'Yellow'), ('Purple', 'Blue', 'Red', 'Purple', 'Purple'), ('Purple', 'Blue', 'Green', 'Red', 'Red'), ('Purple', 'Blue', 'Green', 'Red', 'Green'), ('Purple', 'Blue', 'Green', 'Red', 'Blue'), ('Purple', 'Blue', 'Green', 'Red', 'Yellow'), ('Purple', 'Blue', 'Green', 'Red', 'Purple'), ('Purple', 'Blue', 'Green', 'Green', 'Red'), ('Purple', 'Blue', 'Green', 'Green', 'Green'), ('Purple', 'Blue', 'Green', 'Green', 'Blue'), ('Purple', 'Blue', 'Green', 'Green', 'Yellow'), ('Purple', 'Blue', 'Green', 'Green', 'Purple'), ('Purple', 'Blue', 'Green', 'Blue', 'Red'), ('Purple', 'Blue', 'Green', 'Blue', 'Green'), ('Purple', 'Blue', 'Green', 'Blue', 'Blue'), ('Purple', 'Blue', 'Green', 'Blue', 'Yellow'), ('Purple', 'Blue', 'Green', 'Blue', 'Purple'), ('Purple', 'Blue', 'Green', 'Yellow', 'Red'), ('Purple', 'Blue', 'Green', 'Yellow', 'Green'), ('Purple', 'Blue', 'Green', 'Yellow', 'Blue'), ('Purple', 'Blue', 'Green', 'Yellow', 'Yellow'), ('Purple', 'Blue', 'Green', 'Yellow', 'Purple'), ('Purple', 'Blue', 'Green', 'Purple', 'Red'), ('Purple', 'Blue', 'Green', 'Purple', 'Green'), ('Purple', 'Blue', 'Green', 'Purple', 'Blue'), ('Purple', 'Blue', 'Green', 'Purple', 'Yellow'), ('Purple', 'Blue', 'Green', 'Purple', 'Purple'), ('Purple', 'Blue', 'Blue', 'Red', 'Red'), ('Purple', 'Blue', 'Blue', 'Red', 'Green'), ('Purple', 'Blue', 'Blue', 'Red', 'Blue'), ('Purple', 'Blue', 'Blue', 'Red', 'Yellow'), ('Purple', 'Blue', 'Blue', 'Red', 'Purple'), ('Purple', 'Blue', 'Blue', 'Green', 'Red'), ('Purple', 'Blue', 'Blue', 'Green', 'Green'), ('Purple', 'Blue', 'Blue', 'Green', 'Blue'), ('Purple', 'Blue', 'Blue', 'Green', 'Yellow'), ('Purple', 'Blue', 'Blue', 'Green', 'Purple'), ('Purple', 'Blue', 'Blue', 'Blue', 'Red'), ('Purple', 'Blue', 'Blue', 'Blue', 'Green'), ('Purple', 'Blue', 'Blue', 'Blue', 'Blue'), ('Purple', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Purple', 'Blue', 'Blue', 'Blue', 'Purple'), ('Purple', 'Blue', 'Blue', 'Yellow', 'Red'), ('Purple', 'Blue', 'Blue', 'Yellow', 'Green'), ('Purple', 'Blue', 'Blue', 'Yellow', 'Blue'), ('Purple', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Purple', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Purple', 'Blue', 'Blue', 'Purple', 'Red'), ('Purple', 'Blue', 'Blue', 'Purple', 'Green'), ('Purple', 'Blue', 'Blue', 'Purple', 'Blue'), ('Purple', 'Blue', 'Blue', 'Purple', 'Yellow'), ('Purple', 'Blue', 'Blue', 'Purple', 'Purple'), ('Purple', 'Blue', 'Yellow', 'Red', 'Red'), ('Purple', 'Blue', 'Yellow', 'Red', 'Green'), ('Purple', 'Blue', 'Yellow', 'Red', 'Blue'), ('Purple', 'Blue', 'Yellow', 'Red', 'Yellow'), ('Purple', 'Blue', 'Yellow', 'Red', 'Purple'), ('Purple', 'Blue', 'Yellow', 'Green', 'Red'), ('Purple', 'Blue', 'Yellow', 'Green', 'Green'), ('Purple', 'Blue', 'Yellow', 'Green', 'Blue'), ('Purple', 'Blue', 'Yellow', 'Green', 'Yellow'), ('Purple', 'Blue', 'Yellow', 'Green', 'Purple'), ('Purple', 'Blue', 'Yellow', 'Blue', 'Red'), ('Purple', 'Blue', 'Yellow', 'Blue', 'Green'), ('Purple', 'Blue', 'Yellow', 'Blue', 'Blue'), ('Purple', 'Blue', 'Yellow', 'Blue', 'Yellow'), ('Purple', 'Blue', 'Yellow', 'Blue', 'Purple'), ('Purple', 'Blue', 'Yellow', 'Yellow', 'Red'), ('Purple', 'Blue', 'Yellow', 'Yellow', 'Green'), ('Purple', 'Blue', 'Yellow', 'Yellow', 'Blue'), ('Purple', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Purple', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Purple', 'Blue', 'Yellow', 'Purple', 'Red'), ('Purple', 'Blue', 'Yellow', 'Purple', 'Green'), ('Purple', 'Blue', 'Yellow', 'Purple', 'Blue'), ('Purple', 'Blue', 'Yellow', 'Purple', 'Yellow'), ('Purple', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Purple', 'Blue', 'Purple', 'Red', 'Red'), ('Purple', 'Blue', 'Purple', 'Red', 'Green'), ('Purple', 'Blue', 'Purple', 'Red', 'Blue'), ('Purple', 'Blue', 'Purple', 'Red', 'Yellow'), ('Purple', 'Blue', 'Purple', 'Red', 'Purple'), ('Purple', 'Blue', 'Purple', 'Green', 'Red'), ('Purple', 'Blue', 'Purple', 'Green', 'Green'), ('Purple', 'Blue', 'Purple', 'Green', 'Blue'), ('Purple', 'Blue', 'Purple', 'Green', 'Yellow'), ('Purple', 'Blue', 'Purple', 'Green', 'Purple'), ('Purple', 'Blue', 'Purple', 'Blue', 'Red'), ('Purple', 'Blue', 'Purple', 'Blue', 'Green'), ('Purple', 'Blue', 'Purple', 'Blue', 'Blue'), ('Purple', 'Blue', 'Purple', 'Blue', 'Yellow'), ('Purple', 'Blue', 'Purple', 'Blue', 'Purple'), ('Purple', 'Blue', 'Purple', 'Yellow', 'Red'), ('Purple', 'Blue', 'Purple', 'Yellow', 'Green'), ('Purple', 'Blue', 'Purple', 'Yellow', 'Blue'), ('Purple', 'Blue', 'Purple', 'Yellow', 'Yellow'), ('Purple', 'Blue', 'Purple', 'Yellow', 'Purple'), ('Purple', 'Blue', 'Purple', 'Purple', 'Red'), ('Purple', 'Blue', 'Purple', 'Purple', 'Green'), ('Purple', 'Blue', 'Purple', 'Purple', 'Blue'), ('Purple', 'Blue', 'Purple', 'Purple', 'Yellow'), ('Purple', 'Blue', 'Purple', 'Purple', 'Purple'), ('Purple', 'Yellow', 'Red', 'Red', 'Red'), ('Purple', 'Yellow', 'Red', 'Red', 'Green'), ('Purple', 'Yellow', 'Red', 'Red', 'Blue'), ('Purple', 'Yellow', 'Red', 'Red', 'Yellow'), ('Purple', 'Yellow', 'Red', 'Red', 'Purple'), ('Purple', 'Yellow', 'Red', 'Green', 'Red'), ('Purple', 'Yellow', 'Red', 'Green', 'Green'), ('Purple', 'Yellow', 'Red', 'Green', 'Blue'), ('Purple', 'Yellow', 'Red', 'Green', 'Yellow'), ('Purple', 'Yellow', 'Red', 'Green', 'Purple'), ('Purple', 'Yellow', 'Red', 'Blue', 'Red'), ('Purple', 'Yellow', 'Red', 'Blue', 'Green'), ('Purple', 'Yellow', 'Red', 'Blue', 'Blue'), ('Purple', 'Yellow', 'Red', 'Blue', 'Yellow'), ('Purple', 'Yellow', 'Red', 'Blue', 'Purple'), ('Purple', 'Yellow', 'Red', 'Yellow', 'Red'), ('Purple', 'Yellow', 'Red', 'Yellow', 'Green'), ('Purple', 'Yellow', 'Red', 'Yellow', 'Blue'), ('Purple', 'Yellow', 'Red', 'Yellow', 'Yellow'), ('Purple', 'Yellow', 'Red', 'Yellow', 'Purple'), ('Purple', 'Yellow', 'Red', 'Purple', 'Red'), ('Purple', 'Yellow', 'Red', 'Purple', 'Green'), ('Purple', 'Yellow', 'Red', 'Purple', 'Blue'), ('Purple', 'Yellow', 'Red', 'Purple', 'Yellow'), ('Purple', 'Yellow', 'Red', 'Purple', 'Purple'), ('Purple', 'Yellow', 'Green', 'Red', 'Red'), ('Purple', 'Yellow', 'Green', 'Red', 'Green'), ('Purple', 'Yellow', 'Green', 'Red', 'Blue'), ('Purple', 'Yellow', 'Green', 'Red', 'Yellow'), ('Purple', 'Yellow', 'Green', 'Red', 'Purple'), ('Purple', 'Yellow', 'Green', 'Green', 'Red'), ('Purple', 'Yellow', 'Green', 'Green', 'Green'), ('Purple', 'Yellow', 'Green', 'Green', 'Blue'), ('Purple', 'Yellow', 'Green', 'Green', 'Yellow'), ('Purple', 'Yellow', 'Green', 'Green', 'Purple'), ('Purple', 'Yellow', 'Green', 'Blue', 'Red'), ('Purple', 'Yellow', 'Green', 'Blue', 'Green'), ('Purple', 'Yellow', 'Green', 'Blue', 'Blue'), ('Purple', 'Yellow', 'Green', 'Blue', 'Yellow'), ('Purple', 'Yellow', 'Green', 'Blue', 'Purple'), ('Purple', 'Yellow', 'Green', 'Yellow', 'Red'), ('Purple', 'Yellow', 'Green', 'Yellow', 'Green'), ('Purple', 'Yellow', 'Green', 'Yellow', 'Blue'), ('Purple', 'Yellow', 'Green', 'Yellow', 'Yellow'), ('Purple', 'Yellow', 'Green', 'Yellow', 'Purple'), ('Purple', 'Yellow', 'Green', 'Purple', 'Red'), ('Purple', 'Yellow', 'Green', 'Purple', 'Green'), ('Purple', 'Yellow', 'Green', 'Purple', 'Blue'), ('Purple', 'Yellow', 'Green', 'Purple', 'Yellow'), ('Purple', 'Yellow', 'Green', 'Purple', 'Purple'), ('Purple', 'Yellow', 'Blue', 'Red', 'Red'), ('Purple', 'Yellow', 'Blue', 'Red', 'Green'), ('Purple', 'Yellow', 'Blue', 'Red', 'Blue'), ('Purple', 'Yellow', 'Blue', 'Red', 'Yellow'), ('Purple', 'Yellow', 'Blue', 'Red', 'Purple'), ('Purple', 'Yellow', 'Blue', 'Green', 'Red'), ('Purple', 'Yellow', 'Blue', 'Green', 'Green'), ('Purple', 'Yellow', 'Blue', 'Green', 'Blue'), ('Purple', 'Yellow', 'Blue', 'Green', 'Yellow'), ('Purple', 'Yellow', 'Blue', 'Green', 'Purple'), ('Purple', 'Yellow', 'Blue', 'Blue', 'Red'), ('Purple', 'Yellow', 'Blue', 'Blue', 'Green'), ('Purple', 'Yellow', 'Blue', 'Blue', 'Blue'), ('Purple', 'Yellow', 'Blue', 'Blue', 'Yellow'), ('Purple', 'Yellow', 'Blue', 'Blue', 'Purple'), ('Purple', 'Yellow', 'Blue', 'Yellow', 'Red'), ('Purple', 'Yellow', 'Blue', 'Yellow', 'Green'), ('Purple', 'Yellow', 'Blue', 'Yellow', 'Blue'), ('Purple', 'Yellow', 'Blue', 'Yellow', 'Yellow'), ('Purple', 'Yellow', 'Blue', 'Yellow', 'Purple'), ('Purple', 'Yellow', 'Blue', 'Purple', 'Red'), ('Purple', 'Yellow', 'Blue', 'Purple', 'Green'), ('Purple', 'Yellow', 'Blue', 'Purple', 'Blue'), ('Purple', 'Yellow', 'Blue', 'Purple', 'Yellow'), ('Purple', 'Yellow', 'Blue', 'Purple', 'Purple'), ('Purple', 'Yellow', 'Yellow', 'Red', 'Red'), ('Purple', 'Yellow', 'Yellow', 'Red', 'Green'), ('Purple', 'Yellow', 'Yellow', 'Red', 'Blue'), ('Purple', 'Yellow', 'Yellow', 'Red', 'Yellow'), ('Purple', 'Yellow', 'Yellow', 'Red', 'Purple'), ('Purple', 'Yellow', 'Yellow', 'Green', 'Red'), ('Purple', 'Yellow', 'Yellow', 'Green', 'Green'), ('Purple', 'Yellow', 'Yellow', 'Green', 'Blue'), ('Purple', 'Yellow', 'Yellow', 'Green', 'Yellow'), ('Purple', 'Yellow', 'Yellow', 'Green', 'Purple'), ('Purple', 'Yellow', 'Yellow', 'Blue', 'Red'), ('Purple', 'Yellow', 'Yellow', 'Blue', 'Green'), ('Purple', 'Yellow', 'Yellow', 'Blue', 'Blue'), ('Purple', 'Yellow', 'Yellow', 'Blue', 'Yellow'), ('Purple', 'Yellow', 'Yellow', 'Blue', 'Purple'), ('Purple', 'Yellow', 'Yellow', 'Yellow', 'Red'), ('Purple', 'Yellow', 'Yellow', 'Yellow', 'Green'), ('Purple', 'Yellow', 'Yellow', 'Yellow', 'Blue'), ('Purple', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Purple', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Purple', 'Yellow', 'Yellow', 'Purple', 'Red'), ('Purple', 'Yellow', 'Yellow', 'Purple', 'Green'), ('Purple', 'Yellow', 'Yellow', 'Purple', 'Blue'), ('Purple', 'Yellow', 'Yellow', 'Purple', 'Yellow'), ('Purple', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Purple', 'Yellow', 'Purple', 'Red', 'Red'), ('Purple', 'Yellow', 'Purple', 'Red', 'Green'), ('Purple', 'Yellow', 'Purple', 'Red', 'Blue'), ('Purple', 'Yellow', 'Purple', 'Red', 'Yellow'), ('Purple', 'Yellow', 'Purple', 'Red', 'Purple'), ('Purple', 'Yellow', 'Purple', 'Green', 'Red'), ('Purple', 'Yellow', 'Purple', 'Green', 'Green'), ('Purple', 'Yellow', 'Purple', 'Green', 'Blue'), ('Purple', 'Yellow', 'Purple', 'Green', 'Yellow'), ('Purple', 'Yellow', 'Purple', 'Green', 'Purple'), ('Purple', 'Yellow', 'Purple', 'Blue', 'Red'), ('Purple', 'Yellow', 'Purple', 'Blue', 'Green'), ('Purple', 'Yellow', 'Purple', 'Blue', 'Blue'), ('Purple', 'Yellow', 'Purple', 'Blue', 'Yellow'), ('Purple', 'Yellow', 'Purple', 'Blue', 'Purple'), ('Purple', 'Yellow', 'Purple', 'Yellow', 'Red'), ('Purple', 'Yellow', 'Purple', 'Yellow', 'Green'), ('Purple', 'Yellow', 'Purple', 'Yellow', 'Blue'), ('Purple', 'Yellow', 'Purple', 'Yellow', 'Yellow'), ('Purple', 'Yellow', 'Purple', 'Yellow', 'Purple'), ('Purple', 'Yellow', 'Purple', 'Purple', 'Red'), ('Purple', 'Yellow', 'Purple', 'Purple', 'Green'), ('Purple', 'Yellow', 'Purple', 'Purple', 'Blue'), ('Purple', 'Yellow', 'Purple', 'Purple', 'Yellow'), ('Purple', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Purple', 'Purple', 'Red', 'Red', 'Red'), ('Purple', 'Purple', 'Red', 'Red', 'Green'), ('Purple', 'Purple', 'Red', 'Red', 'Blue'), ('Purple', 'Purple', 'Red', 'Red', 'Yellow'), ('Purple', 'Purple', 'Red', 'Red', 'Purple'), ('Purple', 'Purple', 'Red', 'Green', 'Red'), ('Purple', 'Purple', 'Red', 'Green', 'Green'), ('Purple', 'Purple', 'Red', 'Green', 'Blue'), ('Purple', 'Purple', 'Red', 'Green', 'Yellow'), ('Purple', 'Purple', 'Red', 'Green', 'Purple'), ('Purple', 'Purple', 'Red', 'Blue', 'Red'), ('Purple', 'Purple', 'Red', 'Blue', 'Green'), ('Purple', 'Purple', 'Red', 'Blue', 'Blue'), ('Purple', 'Purple', 'Red', 'Blue', 'Yellow'), ('Purple', 'Purple', 'Red', 'Blue', 'Purple'), ('Purple', 'Purple', 'Red', 'Yellow', 'Red'), ('Purple', 'Purple', 'Red', 'Yellow', 'Green'), ('Purple', 'Purple', 'Red', 'Yellow', 'Blue'), ('Purple', 'Purple', 'Red', 'Yellow', 'Yellow'), ('Purple', 'Purple', 'Red', 'Yellow', 'Purple'), ('Purple', 'Purple', 'Red', 'Purple', 'Red'), ('Purple', 'Purple', 'Red', 'Purple', 'Green'), ('Purple', 'Purple', 'Red', 'Purple', 'Blue'), ('Purple', 'Purple', 'Red', 'Purple', 'Yellow'), ('Purple', 'Purple', 'Red', 'Purple', 'Purple'), ('Purple', 'Purple', 'Green', 'Red', 'Red'), ('Purple', 'Purple', 'Green', 'Red', 'Green'), ('Purple', 'Purple', 'Green', 'Red', 'Blue'), ('Purple', 'Purple', 'Green', 'Red', 'Yellow'), ('Purple', 'Purple', 'Green', 'Red', 'Purple'), ('Purple', 'Purple', 'Green', 'Green', 'Red'), ('Purple', 'Purple', 'Green', 'Green', 'Green'), ('Purple', 'Purple', 'Green', 'Green', 'Blue'), ('Purple', 'Purple', 'Green', 'Green', 'Yellow'), ('Purple', 'Purple', 'Green', 'Green', 'Purple'), ('Purple', 'Purple', 'Green', 'Blue', 'Red'), ('Purple', 'Purple', 'Green', 'Blue', 'Green'), ('Purple', 'Purple', 'Green', 'Blue', 'Blue'), ('Purple', 'Purple', 'Green', 'Blue', 'Yellow'), ('Purple', 'Purple', 'Green', 'Blue', 'Purple'), ('Purple', 'Purple', 'Green', 'Yellow', 'Red'), ('Purple', 'Purple', 'Green', 'Yellow', 'Green'), ('Purple', 'Purple', 'Green', 'Yellow', 'Blue'), ('Purple', 'Purple', 'Green', 'Yellow', 'Yellow'), ('Purple', 'Purple', 'Green', 'Yellow', 'Purple'), ('Purple', 'Purple', 'Green', 'Purple', 'Red'), ('Purple', 'Purple', 'Green', 'Purple', 'Green'), ('Purple', 'Purple', 'Green', 'Purple', 'Blue'), ('Purple', 'Purple', 'Green', 'Purple', 'Yellow'), ('Purple', 'Purple', 'Green', 'Purple', 'Purple'), ('Purple', 'Purple', 'Blue', 'Red', 'Red'), ('Purple', 'Purple', 'Blue', 'Red', 'Green'), ('Purple', 'Purple', 'Blue', 'Red', 'Blue'), ('Purple', 'Purple', 'Blue', 'Red', 'Yellow'), ('Purple', 'Purple', 'Blue', 'Red', 'Purple'), ('Purple', 'Purple', 'Blue', 'Green', 'Red'), ('Purple', 'Purple', 'Blue', 'Green', 'Green'), ('Purple', 'Purple', 'Blue', 'Green', 'Blue'), ('Purple', 'Purple', 'Blue', 'Green', 'Yellow'), ('Purple', 'Purple', 'Blue', 'Green', 'Purple'), ('Purple', 'Purple', 'Blue', 'Blue', 'Red'), ('Purple', 'Purple', 'Blue', 'Blue', 'Green'), ('Purple', 'Purple', 'Blue', 'Blue', 'Blue'), ('Purple', 'Purple', 'Blue', 'Blue', 'Yellow'), ('Purple', 'Purple', 'Blue', 'Blue', 'Purple'), ('Purple', 'Purple', 'Blue', 'Yellow', 'Red'), ('Purple', 'Purple', 'Blue', 'Yellow', 'Green'), ('Purple', 'Purple', 'Blue', 'Yellow', 'Blue'), ('Purple', 'Purple', 'Blue', 'Yellow', 'Yellow'), ('Purple', 'Purple', 'Blue', 'Yellow', 'Purple'), ('Purple', 'Purple', 'Blue', 'Purple', 'Red'), ('Purple', 'Purple', 'Blue', 'Purple', 'Green'), ('Purple', 'Purple', 'Blue', 'Purple', 'Blue'), ('Purple', 'Purple', 'Blue', 'Purple', 'Yellow'), ('Purple', 'Purple', 'Blue', 'Purple', 'Purple'), ('Purple', 'Purple', 'Yellow', 'Red', 'Red'), ('Purple', 'Purple', 'Yellow', 'Red', 'Green'), ('Purple', 'Purple', 'Yellow', 'Red', 'Blue'), ('Purple', 'Purple', 'Yellow', 'Red', 'Yellow'), ('Purple', 'Purple', 'Yellow', 'Red', 'Purple'), ('Purple', 'Purple', 'Yellow', 'Green', 'Red'), ('Purple', 'Purple', 'Yellow', 'Green', 'Green'), ('Purple', 'Purple', 'Yellow', 'Green', 'Blue'), ('Purple', 'Purple', 'Yellow', 'Green', 'Yellow'), ('Purple', 'Purple', 'Yellow', 'Green', 'Purple'), ('Purple', 'Purple', 'Yellow', 'Blue', 'Red'), ('Purple', 'Purple', 'Yellow', 'Blue', 'Green'), ('Purple', 'Purple', 'Yellow', 'Blue', 'Blue'), ('Purple', 'Purple', 'Yellow', 'Blue', 'Yellow'), ('Purple', 'Purple', 'Yellow', 'Blue', 'Purple'), ('Purple', 'Purple', 'Yellow', 'Yellow', 'Red'), ('Purple', 'Purple', 'Yellow', 'Yellow', 'Green'), ('Purple', 'Purple', 'Yellow', 'Yellow', 'Blue'), ('Purple', 'Purple', 'Yellow', 'Yellow', 'Yellow'), ('Purple', 'Purple', 'Yellow', 'Yellow', 'Purple'), ('Purple', 'Purple', 'Yellow', 'Purple', 'Red'), ('Purple', 'Purple', 'Yellow', 'Purple', 'Green'), ('Purple', 'Purple', 'Yellow', 'Purple', 'Blue'), ('Purple', 'Purple', 'Yellow', 'Purple', 'Yellow'), ('Purple', 'Purple', 'Yellow', 'Purple', 'Purple'), ('Purple', 'Purple', 'Purple', 'Red', 'Red'), ('Purple', 'Purple', 'Purple', 'Red', 'Green'), ('Purple', 'Purple', 'Purple', 'Red', 'Blue'), ('Purple', 'Purple', 'Purple', 'Red', 'Yellow'), ('Purple', 'Purple', 'Purple', 'Red', 'Purple'), ('Purple', 'Purple', 'Purple', 'Green', 'Red'), ('Purple', 'Purple', 'Purple', 'Green', 'Green'), ('Purple', 'Purple', 'Purple', 'Green', 'Blue'), ('Purple', 'Purple', 'Purple', 'Green', 'Yellow'), ('Purple', 'Purple', 'Purple', 'Green', 'Purple'), ('Purple', 'Purple', 'Purple', 'Blue', 'Red'), ('Purple', 'Purple', 'Purple', 'Blue', 'Green'), ('Purple', 'Purple', 'Purple', 'Blue', 'Blue'), ('Purple', 'Purple', 'Purple', 'Blue', 'Yellow'), ('Purple', 'Purple', 'Purple', 'Blue', 'Purple'), ('Purple', 'Purple', 'Purple', 'Yellow', 'Red'), ('Purple', 'Purple', 'Purple', 'Yellow', 'Green'), ('Purple', 'Purple', 'Purple', 'Yellow', 'Blue'), ('Purple', 'Purple', 'Purple', 'Yellow', 'Yellow'), ('Purple', 'Purple', 'Purple', 'Yellow', 'Purple'), ('Purple', 'Purple', 'Purple', 'Purple', 'Red'), ('Purple', 'Purple', 'Purple', 'Purple', 'Green'), ('Purple', 'Purple', 'Purple', 'Purple', 'Blue'), ('Purple', 'Purple', 'Purple', 'Purple', 'Yellow'), ('Purple', 'Purple', 'Purple', 'Purple', 'Purple')]], [[('Black', 'Black', 'Black', 'Black'), ('Black', 'Black', 'Black', 'White'), ('Black', 'Black', 'Black', 'Gray'), ('Black', 'Black', 'White', 'Black'), ('Black', 'Black', 'White', 'White'), ('Black', 'Black', 'White', 'Gray'), ('Black', 'Black', 'Gray', 'Black'), ('Black', 'Black', 'Gray', 'White'), ('Black', 'Black', 'Gray', 'Gray'), ('Black', 'White', 'Black', 'Black'), ('Black', 'White', 'Black', 'White'), ('Black', 'White', 'Black', 'Gray'), ('Black', 'White', 'White', 'Black'), ('Black', 'White', 'White', 'White'), ('Black', 'White', 'White', 'Gray'), ('Black', 'White', 'Gray', 'Black'), ('Black', 'White', 'Gray', 'White'), ('Black', 'White', 'Gray', 'Gray'), ('Black', 'Gray', 'Black', 'Black'), ('Black', 'Gray', 'Black', 'White'), ('Black', 'Gray', 'Black', 'Gray'), ('Black', 'Gray', 'White', 'Black'), ('Black', 'Gray', 'White', 'White'), ('Black', 'Gray', 'White', 'Gray'), ('Black', 'Gray', 'Gray', 'Black'), ('Black', 'Gray', 'Gray', 'White'), ('Black', 'Gray', 'Gray', 'Gray'), ('White', 'Black', 'Black', 'Black'), ('White', 'Black', 'Black', 'White'), ('White', 'Black', 'Black', 'Gray'), ('White', 'Black', 'White', 'Black'), ('White', 'Black', 'White', 'White'), ('White', 'Black', 'White', 'Gray'), ('White', 'Black', 'Gray', 'Black'), ('White', 'Black', 'Gray', 'White'), ('White', 'Black', 'Gray', 'Gray'), ('White', 'White', 'Black', 'Black'), ('White', 'White', 'Black', 'White'), ('White', 'White', 'Black', 'Gray'), ('White', 'White', 'White', 'Black'), ('White', 'White', 'White', 'White'), ('White', 'White', 'White', 'Gray'), ('White', 'White', 'Gray', 'Black'), ('White', 'White', 'Gray', 'White'), ('White', 'White', 'Gray', 'Gray'), ('White', 'Gray', 'Black', 'Black'), ('White', 'Gray', 'Black', 'White'), ('White', 'Gray', 'Black', 'Gray'), ('White', 'Gray', 'White', 'Black'), ('White', 'Gray', 'White', 'White'), ('White', 'Gray', 'White', 'Gray'), ('White', 'Gray', 'Gray', 'Black'), ('White', 'Gray', 'Gray', 'White'), ('White', 'Gray', 'Gray', 'Gray'), ('Gray', 'Black', 'Black', 'Black'), ('Gray', 'Black', 'Black', 'White'), ('Gray', 'Black', 'Black', 'Gray'), ('Gray', 'Black', 'White', 'Black'), ('Gray', 'Black', 'White', 'White'), ('Gray', 'Black', 'White', 'Gray'), ('Gray', 'Black', 'Gray', 'Black'), ('Gray', 'Black', 'Gray', 'White'), ('Gray', 'Black', 'Gray', 'Gray'), ('Gray', 'White', 'Black', 'Black'), ('Gray', 'White', 'Black', 'White'), ('Gray', 'White', 'Black', 'Gray'), ('Gray', 'White', 'White', 'Black'), ('Gray', 'White', 'White', 'White'), ('Gray', 'White', 'White', 'Gray'), ('Gray', 'White', 'Gray', 'Black'), ('Gray', 'White', 'Gray', 'White'), ('Gray', 'White', 'Gray', 'Gray'), ('Gray', 'Gray', 'Black', 'Black'), ('Gray', 'Gray', 'Black', 'White'), ('Gray', 'Gray', 'Black', 'Gray'), ('Gray', 'Gray', 'White', 'Black'), ('Gray', 'Gray', 'White', 'White'), ('Gray', 'Gray', 'White', 'Gray'), ('Gray', 'Gray', 'Gray', 'Black'), ('Gray', 'Gray', 'Gray', 'White'), ('Gray', 'Gray', 'Gray', 'Gray')]]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[['Red', 'Green', 'Blue'], 1], [['Red', 'Green', 'Blue'], 2], [['Red', 'Green', 'Blue'], 3], [[], 1], [['Red'], 1], [['Red'], 2], [['Red', 'Green', 'Red'], 2], [['Red', 'Green'], 0], [['Yellow', 'Yellow', 'Yellow'], 3], [['Red', 'Green', 'Blue', 'Yellow', 'Purple'], 5], [['Black', 'White', 'Gray'], 4]]", "input_output_examples": "[[[['Red', 'Green', 'Blue'], 1]], [[[('Red',), ('Green',), ('Blue',)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List, Tuple\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    \"\"\"\n    Write a function that takes in a list and a positive integer n, and generates all combinations with replacement of the elements of the list. \n    The function returns a list containing tuples for each combination. \n    Combinations with replacement ensure that:\n    1. Order does not matter (e.g., ('Red', 'Green') and ('Green', 'Red') are considered the same).\n    2. Repetition of elements is allowed within combinations.\n    This behavior aligns with the use of `itertools.combinations_with_replacement`.\n\n    Example:\n    assert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\n    \"\"\"", "entry_point": "combinations_colors", "cluster_list": [{"programs_str": ["from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nimport itertools\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(itertools.combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))", "from typing import List, Tuple\nfrom itertools import combinations_with_replacement\n\ndef combinations_colors(l: List, n: int) -> List[Tuple]:\n    return list(combinations_with_replacement(l, n))"], "outputs": "[[[('Red',), ('Green',), ('Blue',)]], [[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]], [[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]], [[]], [[('Red',)]], [[('Red', 'Red')]], [[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Red'), ('Green', 'Green'), ('Green', 'Red'), ('Red', 'Red')]], [[()]], [[('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow')]], [[('Red', 'Red', 'Red', 'Red', 'Red'), ('Red', 'Red', 'Red', 'Red', 'Green'), ('Red', 'Red', 'Red', 'Red', 'Blue'), ('Red', 'Red', 'Red', 'Red', 'Yellow'), ('Red', 'Red', 'Red', 'Red', 'Purple'), ('Red', 'Red', 'Red', 'Green', 'Green'), ('Red', 'Red', 'Red', 'Green', 'Blue'), ('Red', 'Red', 'Red', 'Green', 'Yellow'), ('Red', 'Red', 'Red', 'Green', 'Purple'), ('Red', 'Red', 'Red', 'Blue', 'Blue'), ('Red', 'Red', 'Red', 'Blue', 'Yellow'), ('Red', 'Red', 'Red', 'Blue', 'Purple'), ('Red', 'Red', 'Red', 'Yellow', 'Yellow'), ('Red', 'Red', 'Red', 'Yellow', 'Purple'), ('Red', 'Red', 'Red', 'Purple', 'Purple'), ('Red', 'Red', 'Green', 'Green', 'Green'), ('Red', 'Red', 'Green', 'Green', 'Blue'), ('Red', 'Red', 'Green', 'Green', 'Yellow'), ('Red', 'Red', 'Green', 'Green', 'Purple'), ('Red', 'Red', 'Green', 'Blue', 'Blue'), ('Red', 'Red', 'Green', 'Blue', 'Yellow'), ('Red', 'Red', 'Green', 'Blue', 'Purple'), ('Red', 'Red', 'Green', 'Yellow', 'Yellow'), ('Red', 'Red', 'Green', 'Yellow', 'Purple'), ('Red', 'Red', 'Green', 'Purple', 'Purple'), ('Red', 'Red', 'Blue', 'Blue', 'Blue'), ('Red', 'Red', 'Blue', 'Blue', 'Yellow'), ('Red', 'Red', 'Blue', 'Blue', 'Purple'), ('Red', 'Red', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Red', 'Blue', 'Yellow', 'Purple'), ('Red', 'Red', 'Blue', 'Purple', 'Purple'), ('Red', 'Red', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Red', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Red', 'Yellow', 'Purple', 'Purple'), ('Red', 'Red', 'Purple', 'Purple', 'Purple'), ('Red', 'Green', 'Green', 'Green', 'Green'), ('Red', 'Green', 'Green', 'Green', 'Blue'), ('Red', 'Green', 'Green', 'Green', 'Yellow'), ('Red', 'Green', 'Green', 'Green', 'Purple'), ('Red', 'Green', 'Green', 'Blue', 'Blue'), ('Red', 'Green', 'Green', 'Blue', 'Yellow'), ('Red', 'Green', 'Green', 'Blue', 'Purple'), ('Red', 'Green', 'Green', 'Yellow', 'Yellow'), ('Red', 'Green', 'Green', 'Yellow', 'Purple'), ('Red', 'Green', 'Green', 'Purple', 'Purple'), ('Red', 'Green', 'Blue', 'Blue', 'Blue'), ('Red', 'Green', 'Blue', 'Blue', 'Yellow'), ('Red', 'Green', 'Blue', 'Blue', 'Purple'), ('Red', 'Green', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Green', 'Blue', 'Yellow', 'Purple'), ('Red', 'Green', 'Blue', 'Purple', 'Purple'), ('Red', 'Green', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Green', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Green', 'Yellow', 'Purple', 'Purple'), ('Red', 'Green', 'Purple', 'Purple', 'Purple'), ('Red', 'Blue', 'Blue', 'Blue', 'Blue'), ('Red', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Red', 'Blue', 'Blue', 'Blue', 'Purple'), ('Red', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Red', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Red', 'Blue', 'Blue', 'Purple', 'Purple'), ('Red', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Red', 'Blue', 'Purple', 'Purple', 'Purple'), ('Red', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Red', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Red', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Red', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Red', 'Purple', 'Purple', 'Purple', 'Purple'), ('Green', 'Green', 'Green', 'Green', 'Green'), ('Green', 'Green', 'Green', 'Green', 'Blue'), ('Green', 'Green', 'Green', 'Green', 'Yellow'), ('Green', 'Green', 'Green', 'Green', 'Purple'), ('Green', 'Green', 'Green', 'Blue', 'Blue'), ('Green', 'Green', 'Green', 'Blue', 'Yellow'), ('Green', 'Green', 'Green', 'Blue', 'Purple'), ('Green', 'Green', 'Green', 'Yellow', 'Yellow'), ('Green', 'Green', 'Green', 'Yellow', 'Purple'), ('Green', 'Green', 'Green', 'Purple', 'Purple'), ('Green', 'Green', 'Blue', 'Blue', 'Blue'), ('Green', 'Green', 'Blue', 'Blue', 'Yellow'), ('Green', 'Green', 'Blue', 'Blue', 'Purple'), ('Green', 'Green', 'Blue', 'Yellow', 'Yellow'), ('Green', 'Green', 'Blue', 'Yellow', 'Purple'), ('Green', 'Green', 'Blue', 'Purple', 'Purple'), ('Green', 'Green', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Green', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Green', 'Yellow', 'Purple', 'Purple'), ('Green', 'Green', 'Purple', 'Purple', 'Purple'), ('Green', 'Blue', 'Blue', 'Blue', 'Blue'), ('Green', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Green', 'Blue', 'Blue', 'Blue', 'Purple'), ('Green', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Green', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Green', 'Blue', 'Blue', 'Purple', 'Purple'), ('Green', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Green', 'Blue', 'Purple', 'Purple', 'Purple'), ('Green', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Green', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Green', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Green', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Green', 'Purple', 'Purple', 'Purple', 'Purple'), ('Blue', 'Blue', 'Blue', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue', 'Blue', 'Yellow'), ('Blue', 'Blue', 'Blue', 'Blue', 'Purple'), ('Blue', 'Blue', 'Blue', 'Yellow', 'Yellow'), ('Blue', 'Blue', 'Blue', 'Yellow', 'Purple'), ('Blue', 'Blue', 'Blue', 'Purple', 'Purple'), ('Blue', 'Blue', 'Yellow', 'Yellow', 'Yellow'), ('Blue', 'Blue', 'Yellow', 'Yellow', 'Purple'), ('Blue', 'Blue', 'Yellow', 'Purple', 'Purple'), ('Blue', 'Blue', 'Purple', 'Purple', 'Purple'), ('Blue', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Blue', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Blue', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Blue', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Blue', 'Purple', 'Purple', 'Purple', 'Purple'), ('Yellow', 'Yellow', 'Yellow', 'Yellow', 'Yellow'), ('Yellow', 'Yellow', 'Yellow', 'Yellow', 'Purple'), ('Yellow', 'Yellow', 'Yellow', 'Purple', 'Purple'), ('Yellow', 'Yellow', 'Purple', 'Purple', 'Purple'), ('Yellow', 'Purple', 'Purple', 'Purple', 'Purple'), ('Purple', 'Purple', 'Purple', 'Purple', 'Purple')]], [[('Black', 'Black', 'Black', 'Black'), ('Black', 'Black', 'Black', 'White'), ('Black', 'Black', 'Black', 'Gray'), ('Black', 'Black', 'White', 'White'), ('Black', 'Black', 'White', 'Gray'), ('Black', 'Black', 'Gray', 'Gray'), ('Black', 'White', 'White', 'White'), ('Black', 'White', 'White', 'Gray'), ('Black', 'White', 'Gray', 'Gray'), ('Black', 'Gray', 'Gray', 'Gray'), ('White', 'White', 'White', 'White'), ('White', 'White', 'White', 'Gray'), ('White', 'White', 'Gray', 'Gray'), ('White', 'Gray', 'Gray', 'Gray'), ('Gray', 'Gray', 'Gray', 'Gray')]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['Red', 'Green', 'Blue'], 1], [['Red', 'Green', 'Blue'], 2], [['Red', 'Green', 'Blue'], 3], [[], 1], [['Red'], 1], [['Red'], 2], [['Red', 'Green', 'Red'], 2], [['Red', 'Green'], 0], [['Yellow', 'Yellow', 'Yellow'], 3], [['Red', 'Green', 'Blue', 'Yellow', 'Purple'], 5], [['Black', 'White', 'Gray'], 4]]", "input_output_examples": "[[[['Red', 'Green', 'Blue'], 1]], [[[('Red',), ('Green',), ('Blue',)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/256", "original_requirement": "def count_Primes_nums(n: int) -> int:\n\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_Primes_nums(n: int) -> int:\n\"\"\"\nWrite a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\nassert count_Primes_nums(5) == 2\n\"\"\"", "entry_point": "count_Primes_nums", "cluster_list": [{"programs_str": ["from typing import List\n\ndef count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "from typing import List\n\ndef count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "import math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "import math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "import math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i * i, n, i):\n                sieve[j] = False\n    return sum(sieve)", "from math import sqrt\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0], primes[1] = (False, False)\n    for i in range(2, int(sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "import math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if sieve[i]:\n            for j in range(i * i, n, i):\n                sieve[j] = False\n    return sum(sieve)", "import math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "from typing import List\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0], primes[1] = (False, False)\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "def count_Primes_nums(n: int) -> int:\n    import math\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count", "def count_Primes_nums(n: int) -> int:\n    if n < 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)", "import math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0], primes[1] = (False, False)\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "from typing import List\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)", "import math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "from typing import List\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    primes = [True] * n\n    primes[0] = primes[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "import math\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if sieve[i]:\n            for j in range(i * i, n, i):\n                sieve[j] = False\n    return sum(sieve)", "from typing import List\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i * i, n, i):\n                sieve[j] = False\n    return sum(sieve)", "from typing import List\n\ndef count_Primes_nums(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count", "from typing import List\n\ndef count_Primes_nums(n: int) -> int:\n    if n <= 2:\n        return 0\n    sieve = [True] * n\n    sieve[0] = sieve[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if sieve[i]:\n            for j in range(i * i, n, i):\n                sieve[j] = False\n    return sum(sieve)"], "outputs": "[[4], [0], [0], [0], [8], [25], [168], [669], [1], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10], [0], [1], [2], [20], [100], [999], [5000], [3], [-5]]", "input_output_examples": "[[[5]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/257", "original_requirement": "def swap_numbers(a: int, b: int) -> tuple:\n\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def swap_numbers(a: int, b: int) -> tuple:\n\"\"\"\nWrite a function that takes in two numbers and returns a tuple with the second number and then the first number.\nassert swap_numbers(10,20)==(20,10)\n\"\"\"", "entry_point": "swap_numbers", "cluster_list": [{"programs_str": ["def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "from typing import Tuple\n\ndef swap_numbers(a: int, b: int) -> Tuple[int, int]:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "def swap_numbers(a: int, b: int) -> tuple:\n    return (b, a)", "from typing import Tuple\n\ndef swap_numbers(a: int, b: int) -> Tuple[int, int]:\n    return (b, a)", "from typing import Tuple\n\ndef swap_numbers(a: int, b: int) -> Tuple[int, int]:\n    return (b, a)"], "outputs": "[[(20, 10)], [(15, -5)], [(-100, 0)], [(654321, 123456)], [(1, 1)], [(-2000, -1000)], [(0, 0)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10, 20], [-5, 15], [0, -100], [123456, 654321], [1, 1], [-1000, -2000], [0, 0]]", "input_output_examples": "[[[10, 20]], [[(20, 10)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/259", "original_requirement": "from typing import Tuple\n\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"", "repaired_requirement": "def maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    \"\"\"\n    Write a function to maximize the given two tuples element-wise. For each pair of tuples at the same index in the input tuples, \n    compare corresponding elements and construct a new tuple where each element is the maximum of the two compared values. \n    Return a tuple containing these new tuples.\n\n    Example:\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"", "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n\"\"\"\nWrite a function to maximize the given two tuples.\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\"\"\"", "entry_point": "maximize_elements", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(pair1, pair2))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(pair1, pair2))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a1, b1), max(a2, b2)) for (a1, a2), (b1, b2) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(pair1[0], pair2[0]), max(pair1[1], pair2[1])) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(pair1, pair2))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(pair1, pair2))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a1, b1), max(a2, b2)) for (a1, a2), (b1, b2) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a[i], b[i]) for i in range(len(a)))) for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(pair1, pair2))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(pair1[i], pair2[i]) for i in range(len(pair1)))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(pair1, pair2) for pair1, pair2 in zip(elem1, elem2))) for elem1, elem2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(pair1[0], pair2[0]), max(pair1[1], pair2[1])) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a[0], b[0]), max(a[1], b[1])) for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(pair1[0], pair2[0]), max(pair1[1], pair2[1])) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(pair1, pair2))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(pair1[0], pair2[0]), max(pair1[1], pair2[1])) for pair1, pair2 in zip(test_tup1, test_tup2)))"], "outputs": "[[((6, 7), (4, 9), (2, 9), (7, 10))], [((2, 3), (4, 5))], [((5, 6),)], [((-1, -1), (-5, -5))], [((1, 1), (1, 1), (1, 1))], [((300, 200), (100, 400))], [((4, 7), (8, 9), (3, 5))]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((max(pair1, pair2) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((max(pair) for pair in zip(test_tup1, test_tup2)))"], "outputs": "[[((6, 7), (4, 5), (2, 9), (7, 3))], [((2, 3), (4, 5))], [((5, 6),)], [((-1, -2), (-5, -6))], [((1, 1), (1, 1), (1, 1))], [((300, 200), (100, 400))], [((4, 1), (8, 6), (3, 5))]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [((6, 7), (4, 5), (2, 9), (7, 3))], [((6, 7), (4, 9), (2, 9), (7, 10))]]]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [((1, 2), (3, 4)), ((2, 3), (4, 5))], [((5, 5),), ((5, 6),)], [((-1, -2), (-5, -6)), ((-2, -1), (-6, -5))], [((1, 1), (1, 1), (1, 1)), ((1, 1), (1, 1), (1, 1))], [((100, 200), (50, 300)), ((300, 200), (100, 400))], [((3, 7), (8, 6), (2, 4)), ((4, 1), (7, 9), (3, 5))]]", "input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))]], [[((6, 7), (4, 9), (2, 9), (7, 10))]]]", "weighted_test_consistency": 0.9, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    \"\"\"\n    Write a function to maximize the given two tuples element-wise. For each pair of tuples at the same index in the input tuples, \n    compare corresponding elements and construct a new tuple where each element is the maximum of the two compared values. \n    Return a tuple containing these new tuples.\n\n    Example:\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"", "entry_point": "maximize_elements", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple(((max(a1, b1), max(a2, b2)) for (a1, a2), (b1, b2) in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(pair1[i], pair2[i]) for i in range(len(pair1)))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(sub_tup1, sub_tup2))) for sub_tup1, sub_tup2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(pair1, pair2))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(tuple1, tuple2))) for tuple1, tuple2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(pair1[i], pair2[i]) for i in range(len(pair1)))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(sub_tup1, sub_tup2))) for sub_tup1, sub_tup2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(pair1[i], pair2[i]) for i in range(len(pair1)))) for pair1, pair2 in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef maximize_elements(test_tup1: Tuple[Tuple[int, int], ...], test_tup2: Tuple[Tuple[int, int], ...]) -> Tuple[Tuple[int, int], ...]:\n    return tuple((tuple((max(a, b) for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))"], "outputs": "[[((6, 7), (4, 9), (2, 9), (7, 10))], [((2, 3), (4, 5))], [((5, 6),)], [((-1, -1), (-5, -5))], [((1, 1), (1, 1), (1, 1))], [((300, 200), (100, 400))], [((4, 7), (8, 9), (3, 5))]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))], [((1, 2), (3, 4)), ((2, 3), (4, 5))], [((5, 5),), ((5, 6),)], [((-1, -2), (-5, -6)), ((-2, -1), (-6, -5))], [((1, 1), (1, 1), (1, 1)), ((1, 1), (1, 1), (1, 1))], [((100, 200), (50, 300)), ((300, 200), (100, 400))], [((3, 7), (8, 6), (2, 4)), ((4, 1), (7, 9), (3, 5))]]", "input_output_examples": "[[[((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))]], [[((6, 7), (4, 9), (2, 9), (7, 10))]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9923076923076923, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 0.9, "repaired_avg_pass_rate": 0.9, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/260", "original_requirement": "def newman_prime(n: int) -> int:\n\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\nassert newman_prime(3) == 7\n\"\"\"", "repaired_requirement": "```python\ndef newman_prime(n: int) -> int:\n    \"\"\"\n    Compute the nth term of the Newman-Shanks-Williams sequence.\n\n    The Newman-Shanks-Williams sequence is defined recursively as:\n    S(0) = 1\n    S(1) = 1\n    S(n) = 2 * S(n - 1) + S(n - 2) for n > 1\n\n    This function returns the value of the nth term in the sequence, where n is a non-negative integer.\n\n    Input constraints:\n    - If `n` is negative, the function must raise a `ValueError` with the message 'Input must be a non-negative integer.'\n    - If `n` is not an integer (e.g., a float), the function must raise a `TypeError`.\n\n    Example:\n    assert newman_prime(3) == 7\n    \"\"\"\n```", "original_clusters": {"requirement": "def newman_prime(n: int) -> int:\n\"\"\"\nWrite a function to find the nth newman–shanks–williams prime number.\nassert newman_prime(3) == 7\n\"\"\"", "entry_point": "newman_prime", "cluster_list": [{"programs_str": ["def newman_prime(n: int) -> int:\n\n    def ns_sequence(k):\n        if k == 0 or k == 1:\n            return 1\n        return ns_sequence(k - 1) + ns_sequence(k - 2)\n    primes = []\n    k = 2\n    while len(primes) < n:\n        value = ns_sequence(k)\n        if is_prime(value):\n            primes.append(value)\n        k += 1\n    return primes[-1]\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "from typing import List\n\ndef newman_prime(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def newman_shanks_williams_sequence(k: int) -> int:\n        seq = [1, 1]\n        for i in range(2, k + 1):\n            seq.append(2 * seq[i - 1] + seq[i - 2])\n        return seq\n    nsws_numbers = newman_shanks_williams_sequence(1000)\n    primes = [num for num in nsws_numbers if is_prime(num)]\n    return primes[n - 1]", "from typing import List\n\ndef newman_prime(n: int) -> int:\n\n    def nsw_sequence(limit: int) -> List[int]:\n        nsw_primes = [1, 1]\n        for i in range(2, limit):\n            nsw_primes.append(2 * nsw_primes[i - 1] + nsw_primes[i - 2])\n        return nsw_primes\n    nsw_primes = nsw_sequence(500)\n    primes = [num for num in nsw_primes if is_prime(num)]\n    return primes[n - 1]\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "from typing import List\n\ndef newman_prime(n: int) -> int:\n\n    def generate_nsw_sequence(limit: int) -> List[int]:\n        nsw_sequence = [1, 1]\n        for i in range(2, limit):\n            nsw_sequence.append(2 * nsw_sequence[i - 1] + nsw_sequence[i - 2])\n        return nsw_sequence\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    nsw_sequence = generate_nsw_sequence(100)\n    primes = [num for num in nsw_sequence if is_prime(num)]\n    return primes[n - 1]", "from typing import List\n\ndef newman_prime(n: int) -> int:\n\n    def generate_nsw_primes(count: int) -> List[int]:\n        nsw_numbers = [1, 1]\n        while len(nsw_numbers) < count:\n            nsw_numbers.append(2 * nsw_numbers[-1] + nsw_numbers[-2])\n        primes = []\n        for num in nsw_numbers:\n            if num > 1 and all((num % i != 0 for i in range(2, int(num ** 0.5) + 1))):\n                primes.append(num)\n        return primes\n    primes = generate_nsw_primes(100)\n    return primes[n - 1]", "def newman_prime(n: int) -> int:\n\n    def compute_nsw_sequence(k: int) -> int:\n        if k == 0:\n            return 1\n        elif k == 1:\n            return 1\n        else:\n            return compute_nsw_sequence(k - 1) + compute_nsw_sequence(k - 2)\n    nsw_sequence = []\n    current_number = 0\n    while len(nsw_sequence) < n:\n        value = compute_nsw_sequence(current_number)\n        if is_prime(value):\n            nsw_sequence.append(value)\n        current_number += 1\n    return nsw_sequence[-1]\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"], "outputs": "[[2], [3], [5], [13], ['Timeout'], ['IndexError'], ['Timeout'], ['IndexError'], ['TypeError'], [13]]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [5], [7]]]"}, {"programs_str": ["from functools import lru_cache\n\ndef newman_prime(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)\n\ndef nth_newman_prime(n: int) -> int:\n    count = 0\n    i = 0\n    while count < n:\n        candidate = newman_prime(i)\n        if all((candidate % j != 0 for j in range(2, int(candidate ** 0.5) + 1))):\n            count += 1\n        i += 1\n    return newman_prime(i - 1)", "from functools import lru_cache\n\ndef newman_prime(n: int) -> int:\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)", "from functools import lru_cache\n\ndef newman_prime(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)", "from functools import lru_cache\n\ndef newman_prime(n: int) -> int:\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)", "from functools import lru_cache\n\ndef newman_prime(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)", "from functools import lru_cache\n\ndef newman_prime(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)", "from functools import lru_cache\n\ndef newman_prime(n: int) -> int:\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    return 2 * newman_prime(n - 1) + newman_prime(n - 2)"], "outputs": "[[1], [3], [7], [17], [3363], [1], ['Timeout'], ['RecursionError'], ['TypeError'], ['RecursionError']]", "probability": 0.35, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def newman_prime(n: int) -> int:\n    ns_table = [1, 1]\n    while len(ns_table) <= n:\n        ns_table.append(2 * ns_table[-1] + ns_table[-2])\n    return ns_table[n]", "def newman_prime(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    nsw = [1, 1]\n    while len(nsw) <= n or not is_prime(nsw[n]):\n        nsw.append(2 * nsw[-1] + nsw[-2])\n    return nsw[n]", "from typing import List\n\ndef newman_prime(n: int) -> int:\n\n    def generate_newman_shanks_williams_primes(limit: int) -> List[int]:\n        ns = [1, 1]\n        while len(ns) <= limit:\n            ns.append(2 * ns[-1] + ns[-2])\n        return ns\n    ns_numbers = generate_newman_shanks_williams_primes(n)\n    return ns_numbers[n]"], "outputs": "[[1], [3], [7], [17], [3363], [1], [94741125149636933417873079920900017937], ['IndexError'], ['TypeError'], ['TypeError']]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def newman_prime(n: int) -> int:\n\n    def ns(num: int) -> int:\n        if num == 0:\n            return 1\n        elif num == 1:\n            return 1\n        else:\n            return ns(num - 1) + ns(num - 2) + ns(num - 2)\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    count = 0\n    index = 0\n    while True:\n        num = ns(index)\n        if is_prime(num):\n            count += 1\n            if count == n:\n                return num\n        index += 1"], "outputs": "[[3], [5], [11], [43], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [11], [7]]]"}, {"programs_str": ["from typing import Dict\n\ndef newman_prime(n: int) -> int:\n    memo: Dict[int, int] = {0: 1, 1: 1}\n\n    def ns(n: int) -> int:\n        if n not in memo:\n            memo[n] = ns(n - 1) + ns(n - 2)\n        return memo[n]\n    count, i = (0, 2)\n    while count < n:\n        num = ns(i)\n        if all((num % p != 0 for p in range(2, int(num ** 0.5) + 1))) and num > 1:\n            count += 1\n        i += 1\n    return ns(i - 1)"], "outputs": "[[2], [3], [5], [13], [433494437], [1], ['Timeout'], [1], ['TypeError'], [13]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [5], [7]]]"}, {"programs_str": ["from functools import lru_cache\n\ndef newman_prime(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    return newman_prime(n - 1) + newman_prime(n - 2) + newman_prime(n - 2)\n\ndef find_nsw_prime(n: int) -> int:\n    count = 0\n    i = 0\n    while count < n:\n        num = newman_prime(i)\n        if all((num % divisor != 0 for divisor in range(2, int(num ** 0.5) + 1))) and num > 1:\n            count += 1\n        i += 1\n    return newman_prime(i - 1)"], "outputs": "[[1], [3], [5], [11], [683], [1], ['Timeout'], ['RecursionError'], ['TypeError'], ['RecursionError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [5], [7]]]"}, {"programs_str": ["from typing import List\n\ndef newman_prime(n: int) -> int:\n\n    def generate_nsw_numbers(limit: int) -> List[int]:\n        nsw_list = [1, 1]\n        for i in range(2, limit):\n            nsw_list.append(2 * nsw_list[i - 1] + nsw_list[i - 2])\n        return nsw_list\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    primes = []\n    limit = n * 10\n    nsw_numbers = generate_nsw_numbers(limit)\n    for number in nsw_numbers:\n        if is_prime(number):\n            primes.append(number)\n        if len(primes) == n:\n            break\n    return primes[n - 1]"], "outputs": "[[3], [7], [17], [41], ['Timeout'], ['IndexError'], ['Timeout'], ['IndexError'], ['TypeError'], ['TypeError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [17], [7]]]"}], "entropy": 0.8285809281064431, "llm_generated_inputs": "[[1], [2], [3], [4], [10], [0], [100], [-5], ['string'], [3.5]]", "input_output_examples": "[[[3]], [[7]]]", "weighted_test_consistency": 0.5, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef newman_prime(n: int) -> int:\n    \"\"\"\n    Compute the nth term of the Newman-Shanks-Williams sequence.\n\n    The Newman-Shanks-Williams sequence is defined recursively as:\n    S(0) = 1\n    S(1) = 1\n    S(n) = 2 * S(n - 1) + S(n - 2) for n > 1\n\n    This function returns the value of the nth term in the sequence, where n is a non-negative integer.\n\n    Input constraints:\n    - If `n` is negative, the function must raise a `ValueError` with the message 'Input must be a non-negative integer.'\n    - If `n` is not an integer (e.g., a float), the function must raise a `TypeError`.\n\n    Example:\n    assert newman_prime(3) == 7\n    \"\"\"\n```", "entry_point": "newman_prime", "cluster_list": [{"programs_str": ["def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    s_prev, s_curr = (1, 1)\n    for i in range(2, n + 1):\n        s_next = 2 * s_curr + s_prev\n        s_prev, s_curr = (s_curr, s_next)\n    return s_curr", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    s0, s1 = (1, 1)\n    for _ in range(2, n + 1):\n        sn = 2 * s1 + s0\n        s0, s1 = (s1, sn)\n    return s1", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    s0, s1 = (1, 1)\n    for _ in range(2, n + 1):\n        s_next = 2 * s1 + s0\n        s0, s1 = (s1, s_next)\n    return s1", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    s_prev, s_curr = (1, 1)\n    for _ in range(2, n + 1):\n        s_next = 2 * s_curr + s_prev\n        s_prev, s_curr = (s_curr, s_next)\n    return s_curr", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    a, b = (1, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, 2 * b + a)\n    return b", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    S = [1, 1]\n    for i in range(2, n + 1):\n        S.append(2 * S[i - 1] + S[i - 2])\n    return S[n]", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    s0, s1 = (1, 1)\n    for _ in range(2, n + 1):\n        s_next = 2 * s1 + s0\n        s0, s1 = (s1, s_next)\n    return s1", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    prev1, prev2 = (1, 1)\n    for _ in range(2, n + 1):\n        current = 2 * prev1 + prev2\n        prev2, prev1 = (prev1, current)\n    return current", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    S_prev, S_curr = (1, 1)\n    for _ in range(2, n + 1):\n        S_next = 2 * S_curr + S_prev\n        S_prev, S_curr = (S_curr, S_next)\n    return S_curr", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    s_0, s_1 = (1, 1)\n    for _ in range(2, n + 1):\n        s_2 = 2 * s_1 + s_0\n        s_0, s_1 = (s_1, s_2)\n    return s_1", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    s_prev, s_curr = (1, 1)\n    for _ in range(2, n + 1):\n        s_next = 2 * s_curr + s_prev\n        s_prev, s_curr = (s_curr, s_next)\n    return s_curr", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    s_prev_2, s_prev_1 = (1, 1)\n    for i in range(2, n + 1):\n        s_current = 2 * s_prev_1 + s_prev_2\n        s_prev_2, s_prev_1 = (s_prev_1, s_current)\n    return s_current", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    prev, curr = (1, 1)\n    for _ in range(2, n + 1):\n        next_val = 2 * curr + prev\n        prev, curr = (curr, next_val)\n    return curr", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    s_prev, s_curr = (1, 1)\n    for _ in range(2, n + 1):\n        s_prev, s_curr = (s_curr, 2 * s_curr + s_prev)\n    return s_curr", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    prev2, prev1 = (1, 1)\n    for i in range(2, n + 1):\n        current = 2 * prev1 + prev2\n        prev2, prev1 = (prev1, current)\n    return current", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    s = [1, 1]\n    for i in range(2, n + 1):\n        s.append(2 * s[i - 1] + s[i - 2])\n    return s[n]", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    prev2, prev1 = (1, 1)\n    for _ in range(2, n + 1):\n        current = 2 * prev1 + prev2\n        prev2, prev1 = (prev1, current)\n    return current", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    prev2, prev1 = (1, 1)\n    for _ in range(2, n + 1):\n        current = 2 * prev1 + prev2\n        prev2, prev1 = (prev1, current)\n    return current", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0 or n == 1:\n        return 1\n    prev2, prev1 = (1, 1)\n    for _ in range(2, n + 1):\n        current = 2 * prev1 + prev2\n        prev2, prev1 = (prev1, current)\n    return current", "def newman_prime(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    if n < 0:\n        raise ValueError('Input must be a non-negative integer')\n    if n == 0 or n == 1:\n        return 1\n    s_minus_2, s_minus_1 = (1, 1)\n    for _ in range(2, n + 1):\n        current = 2 * s_minus_1 + s_minus_2\n        s_minus_2, s_minus_1 = (s_minus_1, current)\n    return s_minus_1"], "outputs": "[[1], [3], [7], [17], [3363], [1], [94741125149636933417873079920900017937], ['ValueError'], ['TypeError'], ['TypeError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [10], [0], [100], [-5], ['string'], [3.5]]", "input_output_examples": "[[[3]], [[7]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.19999999999999996, "original_avg_pass_rate": 0.6757009345794392, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.794392523364486, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/261", "original_requirement": "from typing import Tuple\n\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n\"\"\"\nWrite a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\"\"\"", "entry_point": "division_elements", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2))) if test_tup2 else ()", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef division_elements(test_tup1: Tuple[float, ...], test_tup2: Tuple[float, ...]) -> Tuple[float, ...]:\n    return tuple((a / b for a, b in zip(test_tup1, test_tup2)))"], "outputs": "[[(2.0, 2.0, 2.0, 3.0)], [(5.0, 5.0, 5.0)], [(2.0, 2.9999999999999996, 4.0)], [(0.0, 0.0, 0.0)], ['ZeroDivisionError'], [(-2.0, -2.0, -2.0)], [(-1.0, -1.0, -1.0)], [(5.0,)], ['ZeroDivisionError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(10, 4, 6, 9), (5, 2, 3, 3)], [(15, 20, 25), (3, 4, 5)], [(1.2, 2.4, 3.6), (0.6, 0.8, 0.9)], [(0, 0, 0), (1, 2, 3)], [(10, 0, 6), (5, 4, 0)], [(-10, -20, -30), (5, 10, 15)], [(5, 10, 15), (-5, -10, -15)], [(100,), (20,)], [(10, 5), (0, 5)]]", "input_output_examples": "[[[(10, 4, 6, 9), (5, 2, 3, 3)]], [[(2, 2, 2, 3)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/262", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n\"\"\"\nWrite a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\"\"\"", "entry_point": "split_two_parts", "cluster_list": [{"programs_str": ["from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Any, Tuple\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import Any, List, Tuple\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Tuple, Any\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])", "from typing import List, Any, Tuple\n\ndef split_two_parts(list1: List[Any], L: int) -> Tuple[List[Any], List[Any]]:\n    return (list1[:L], list1[L:])"], "outputs": "[[([1, 1, 2], [3, 4, 4, 5, 1])], [([10, 20], [30, 40, 50])], [([1, 2, 3, 4, 5], [])], [([], [1, 2, 3, 4, 5])], [([1, 2, 3, 4, 5], [])], [([], [])], [([1], [])], [([], [1])], [([1, 1], [2])]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[10, 20, 30, 40, 50], 2], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], 0], [[1, 2, 3, 4, 5], 7], [[], 3], [[1], 1], [[1], 0], [[1, 1, 2], -1]]", "input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3]], [[([1, 1, 2], [3, 4, 4, 5, 1])]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/264", "original_requirement": "def dog_age(h_age: float) -> float:\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"", "repaired_requirement": "```python\ndef dog_age(h_age: float) -> float:\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years based on the following rules:\n    - For human ages less than or equal to 2 years, the dog's age is calculated as `h_age * 10.5`.\n    - For human ages greater than 2 years, the dog's age is calculated as `21 + (h_age - 2) * 4`.\n    - The function accepts any real number as input, including negative and zero values, and extrapolates the dog's age accordingly.\n    - Fractional human ages are supported, and the calculation interpolates dog years for such inputs.\n\n    Examples:\n    assert dog_age(12) == 61\n    assert dog_age(-3) == -31.5\n    \"\"\"\n```", "original_clusters": {"requirement": "def dog_age(h_age: float) -> float:\n\"\"\"\nWrite a function to calculate a dog's age in dog's years.\nassert dog_age(12)==61\n\"\"\"", "entry_point": "dog_age", "cluster_list": [{"programs_str": ["def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    dog_years = 0\n    if h_age <= 2:\n        dog_years = h_age * 10.5\n    else:\n        dog_years = 21 + (h_age - 2) * 4\n    return dog_years", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    return 21 + 4 * (h_age - 2) if h_age > 2 else h_age * 10.5", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\nimport math", "def dog_age(h_age: float) -> float:\n    if h_age < 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\nimport pytest", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 2 * 10.5 + (h_age - 2) * 4\nimport math", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 2 * 10.5 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4"], "outputs": "[[10.5], [0.0], [61], [43.0], [97], [73], [-31.5], [413], [40.2], [21.0]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dog_age(h_age: float) -> float:\n    if h_age <= 0:\n        return 0\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 0:\n        return 0.0\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4\nimport math", "def dog_age(h_age: float) -> float:\n    if h_age <= 0:\n        return 0\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 2 * 10.5 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 0:\n        return 0\n    elif h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4"], "outputs": "[[10.5], [0], [61], [43.0], [97], [73], [0], [413], [40.2], [21.0]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[1], [0], [12], [7.5], [21], [15], [-3], [100], [6.8], [2]]", "input_output_examples": "[[[12]], [[61]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef dog_age(h_age: float) -> float:\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years based on the following rules:\n    - For human ages less than or equal to 2 years, the dog's age is calculated as `h_age * 10.5`.\n    - For human ages greater than 2 years, the dog's age is calculated as `21 + (h_age - 2) * 4`.\n    - The function accepts any real number as input, including negative and zero values, and extrapolates the dog's age accordingly.\n    - Fractional human ages are supported, and the calculation interpolates dog years for such inputs.\n\n    Examples:\n    assert dog_age(12) == 61\n    assert dog_age(-3) == -31.5\n    \"\"\"\n```", "entry_point": "dog_age", "cluster_list": [{"programs_str": ["def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "from typing import Union\n\ndef dog_age(h_age: Union[float, int]) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "from typing import Union\n\ndef dog_age(h_age: Union[float, int]) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    else:\n        return 21 + (h_age - 2) * 4", "def dog_age(h_age: float) -> float:\n    if h_age <= 2:\n        return h_age * 10.5\n    return 21 + (h_age - 2) * 4"], "outputs": "[[10.5], [0.0], [61], [43.0], [97], [73], [-31.5], [413], [40.2], [21.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [0], [12], [7.5], [21], [15], [-3], [100], [6.8], [2]]", "input_output_examples": "[[[12]], [[61]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.808490566037736, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/265", "original_requirement": "from typing import List\n\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"", "repaired_requirement": "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n    Write a function that takes in a list `S` and a positive integer `step` and splits the list into `step` sublists. \n    Each sublist contains elements from `S` distributed cyclically based on their index modulo `step`. \n    The function returns a list of these sublists.\n\n    Preconditions:\n    - `step` must be a positive integer greater than zero. If `step` is invalid (e.g., zero or negative), the function should raise a `ValueError`.\n\n    Example:\n    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n\"\"\"\nWrite a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\"\"\"", "entry_point": "list_split", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i, item in enumerate(S):\n        result[i % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, element in enumerate(S):\n        result[index % step].append(element)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i, item in enumerate(S):\n        result[i % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, element in enumerate(S):\n        result[index % step].append(element)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, value in enumerate(S):\n        result[index % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i, elem in enumerate(S):\n        result[i % step].append(elem)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, item in enumerate(S):\n        result[index % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i, item in enumerate(S):\n        result[i % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, element in enumerate(S):\n        result[index % step].append(element)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, element in enumerate(S):\n        result[index % step].append(element)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, item in enumerate(S):\n        result[index % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, item in enumerate(S):\n        result[index % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, element in enumerate(S):\n        result[index % step].append(element)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, value in enumerate(S):\n        result[index % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i, element in enumerate(S):\n        result[i % step].append(element)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i, item in enumerate(S):\n        result[i % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i, value in enumerate(S):\n        result[i % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for i, item in enumerate(S):\n        result[i % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    result = [[] for _ in range(step)]\n    for index, element in enumerate(S):\n        result[index % step].append(element)\n    return result"], "outputs": "[[[['a', 'c', 'e', 'g'], ['b', 'd', 'f', 'h']]], [[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]], [[[1, 5, 9], [2, 6, 10], [3, 7], [4, 8]]], [[[], [], []]], [[['x', 'y', 'z']]], [[['single'], []]], [[[1], [2], [3], [4], [], [], [], [], [], []]], ['IndexError'], [[['apple', 'cherry', 'elderberry'], ['banana', 'date']]], ['ZeroDivisionError']]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    return [S[i::step] for i in range(step)]"], "outputs": "[[[['a', 'c', 'e', 'g'], ['b', 'd', 'f', 'h']]], [[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]], [[[1, 5, 9], [2, 6, 10], [3, 7], [4, 8]]], [[[], [], []]], [[['x', 'y', 'z']]], [[['single'], []]], [[[1], [2], [3], [4], [], [], [], [], [], []]], [[]], [[['apple', 'cherry', 'elderberry'], ['banana', 'date']]], [[]]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 2], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4], [[], 3], [['x', 'y', 'z'], 1], [['single'], 2], [[1, 2, 3, 4], 10], [['a', 'b', 'c', 'd'], -1], [['apple', 'banana', 'cherry', 'date', 'elderberry'], 2], [[1, 2, 3, 4, 5, 6], 0]]", "input_output_examples": "[[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3]], [[[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    \"\"\"\n    Write a function that takes in a list `S` and a positive integer `step` and splits the list into `step` sublists. \n    Each sublist contains elements from `S` distributed cyclically based on their index modulo `step`. \n    The function returns a list of these sublists.\n\n    Preconditions:\n    - `step` must be a positive integer greater than zero. If `step` is invalid (e.g., zero or negative), the function should raise a `ValueError`.\n\n    Example:\n    assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"", "entry_point": "list_split", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for index, value in enumerate(S):\n        result[index % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    sublists = [[] for _ in range(step)]\n    for i, element in enumerate(S):\n        sublists[i % step].append(element)\n    return sublists", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for idx, item in enumerate(S):\n        result[idx % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('step must be a positive integer greater than zero.')\n    sublists = [[] for _ in range(step)]\n    for index, element in enumerate(S):\n        sublists[index % step].append(element)\n    return sublists", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('`step` must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for index, element in enumerate(S):\n        result[index % step].append(element)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for i, item in enumerate(S):\n        result[i % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('`step` must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for i, value in enumerate(S):\n        result[i % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for i, value in enumerate(S):\n        result[i % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for index, value in enumerate(S):\n        result[index % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for index, value in enumerate(S):\n        result[index % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for index, item in enumerate(S):\n        result[index % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for idx, item in enumerate(S):\n        result[idx % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    sublists = [[] for _ in range(step)]\n    for index, element in enumerate(S):\n        sublists[index % step].append(element)\n    return sublists", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for index, item in enumerate(S):\n        result[index % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for i, value in enumerate(S):\n        result[i % step].append(value)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for i, element in enumerate(S):\n        result[i % step].append(element)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for i, element in enumerate(S):\n        result[i % step].append(element)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for i, item in enumerate(S):\n        result[i % step].append(item)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for i, element in enumerate(S):\n        result[i % step].append(element)\n    return result", "from typing import List, Any\n\ndef list_split(S: List[Any], step: int) -> List[List[Any]]:\n    if step <= 0:\n        raise ValueError('Step must be a positive integer greater than zero.')\n    result = [[] for _ in range(step)]\n    for i, value in enumerate(S):\n        result[i % step].append(value)\n    return result"], "outputs": "[[[['a', 'c', 'e', 'g'], ['b', 'd', 'f', 'h']]], [[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]], [[[1, 5, 9], [2, 6, 10], [3, 7], [4, 8]]], [[[], [], []]], [[['x', 'y', 'z']]], [[['single'], []]], [[[1], [2], [3], [4], [], [], [], [], [], []]], ['ValueError'], [[['apple', 'cherry', 'elderberry'], ['banana', 'date']]], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'], 2], [['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4], [[], 3], [['x', 'y', 'z'], 1], [['single'], 2], [[1, 2, 3, 4], 10], [['a', 'b', 'c', 'd'], -1], [['apple', 'banana', 'cherry', 'date', 'elderberry'], 2], [[1, 2, 3, 4, 5, 6], 0]]", "input_output_examples": "[[[['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3]], [[[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/266", "original_requirement": "def lateralsurface_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def lateralsurface_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the lateral surface area of a cube given its side length.\nassert lateralsurface_cube(5)==100\n\"\"\"", "entry_point": "lateralsurface_cube", "cluster_list": [{"programs_str": ["def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "from typing import int\n\ndef lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * (l * l)", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "from typing import int\n\ndef lateralsurface_cube(l: int) -> int:\n    return 4 * l ** 2", "def lateralsurface_cube(l: int) -> int:\n    return 4 * l * l"], "outputs": "[[100], [0], [4], [36], [400000000], [49.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5], [0], [1], [-3], [10000], [3.5]]", "input_output_examples": "[[[5]], [[100]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/267", "original_requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\nassert square_Sum(2) == 10\n\"\"\"", "entry_point": "square_Sum", "cluster_list": [{"programs_str": ["def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    odd_numbers = [2 * i + 1 for i in range(n)]\n    return float(sum((x ** 2 for x in odd_numbers)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    odd_numbers = [i for i in range(1, 2 * n, 2)]\n    return float(sum((x ** 2 for x in odd_numbers)))", "def square_Sum(n: int) -> float:\n    odd_sum = sum(((2 * i - 1) ** 2 for i in range(1, n + 1)))\n    return float(odd_sum)", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i - 1) ** 2 for i in range(1, n + 1)))", "from typing import List\n\ndef square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return float(sum((i ** 2 for i in range(1, 2 * n, 2))))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i - 1) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i - 1) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i - 1) ** 2 for i in range(1, n + 1)))", "from typing import List\n\ndef square_Sum(n: int) -> float:\n    return float(sum(((2 * i + 1) ** 2 for i in range(n))))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))", "from typing import List\n\ndef square_Sum(n: int) -> float:\n    return sum(((2 * i + 1) ** 2 for i in range(n)))"], "outputs": "[[10], [0], [0], [1], [165], [1333300]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2], [0], [-1], [1], [5], [100]]", "input_output_examples": "[[[2]], [[10]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9754098360655737, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/268", "original_requirement": "def find_star_num(n: int) -> int:\n\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def find_star_num(n: int) -> int:\n\"\"\"\nWrite a function to find the n'th star number.\nassert find_star_num(3) == 37\n\"\"\"", "entry_point": "find_star_num", "cluster_list": [{"programs_str": ["def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1", "def find_star_num(n: int) -> int:\n    return 6 * n * (n - 1) + 1"], "outputs": "[[37], [1], [1], [13], [541], [59401], [59999400001], [14701]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3], [1], [0], [-1], [10], [100], [100000], [50]]", "input_output_examples": "[[[3]], [[37]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/269", "original_requirement": "def ascii_value(k: str) -> int:\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def ascii_value(k: str) -> int:\n\"\"\"\nWrite a function to find the ascii value of a character.\nassert ascii_value('A')==65\n\"\"\"", "entry_point": "ascii_value", "cluster_list": [{"programs_str": ["def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)", "def ascii_value(k: str) -> int:\n    return ord(k)"], "outputs": "[[65], [90], [97], [122], [48], [57], [33], [64], [32], [10]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['A'], ['Z'], ['a'], ['z'], ['0'], ['9'], ['!'], ['@'], [' '], ['\\n']]", "input_output_examples": "[[['A']], [[65]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/270", "original_requirement": "from typing import List\n\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of even numbers at even positions of a list.\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\n\"\"\"", "entry_point": "sum_even_and_even_index", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((num for idx, num in enumerate(arr) if idx % 2 == 0 and num % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((num for i, num in enumerate(arr) if i % 2 == 0 and num % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((num for i, num in enumerate(arr) if i % 2 == 0 and num % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum([arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0])", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((num for i, num in enumerate(arr) if i % 2 == 0 and num % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((num for idx, num in enumerate(arr) if idx % 2 == 0 and num % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((num for idx, num in enumerate(arr) if idx % 2 == 0 and num % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))", "from typing import List\n\ndef sum_even_and_even_index(arr: List[int]) -> int:\n    return sum((arr[i] for i in range(0, len(arr), 2) if arr[i] % 2 == 0))"], "outputs": "[[30], [0], [2], [0], [10], [0], [82], [18], [8], [-20], [0], [120]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 6, 12, 1, 18, 8]], [[]], [[2]], [[1]], [[4, 5, 6]], [[0, 3, 0, 2, 0]], [[10, 21, 22, 23, 24, 25, 26]], [[2, 4, 6, 8, 10, 12]], [[7, 13, 8, 15, 9, 31]], [[-4, -5, -6, -8, -10]], [[5, 12, 0, 18]], [[50, 11, 40, 5, 30, 15]]]", "input_output_examples": "[[[[5, 6, 12, 1, 18, 8]]], [[30]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/271", "original_requirement": "def even_Power_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"", "repaired_requirement": "def even_Power_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the fifth powers \n    of the first n even natural numbers (i.e., 2, 4, 6, ..., 2n).\n    assert even_Power_Sum(2) == 1056\n    \"\"\"", "original_clusters": {"requirement": "def even_Power_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\nassert even_Power_Sum(2) == 1056\n\"\"\"", "entry_point": "even_Power_Sum", "cluster_list": [{"programs_str": ["def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))"], "outputs": "[[0], [32], [1056], [141600], [7066400], [0]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def even_Power_Sum(n: int) -> int:\n    return sum([2 * i ** 5 for i in range(1, n + 1)])"], "outputs": "[[0], [2], [66], [8850], [441650], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [66], [1056]]]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[0], [1], [2], [5], [10], [-1]]", "input_output_examples": "[[[2]], [[1056]]]", "weighted_test_consistency": 0.95, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def even_Power_Sum(n: int) -> int:\n    \"\"\"\n    Write a python function that takes in an integer n and finds the sum of the fifth powers \n    of the first n even natural numbers (i.e., 2, 4, 6, ..., 2n).\n    assert even_Power_Sum(2) == 1056\n    \"\"\"", "entry_point": "even_Power_Sum", "cluster_list": [{"programs_str": ["def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))", "def even_Power_Sum(n: int) -> int:\n    return sum(((2 * i) ** 5 for i in range(1, n + 1)))"], "outputs": "[[0], [32], [1056], [141600], [7066400], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [5], [10], [-1]]", "input_output_examples": "[[[2]], [[1056]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/272", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n\"\"\"\nWrite a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\"\"\"", "entry_point": "rear_extract", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tup[-1] for tup in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tup[-1] for tup in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tup[-1] for tup in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [item[-1] for item in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tup[-1] for tup in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tpl[-1] for tpl in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tup[-1] for tup in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tup[-1] for tup in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tup[-1] for tup in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tpl[-1] for tpl in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tup[-1] for tup in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tup[-1] for tup in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [item[-1] for item in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [item[-1] for item in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [item[-1] for item in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [t[-1] for t in test_list]", "from typing import List, Tuple\n\ndef rear_extract(test_list: List[Tuple]) -> List:\n    return [tpl[-1] for tpl in test_list]"], "outputs": "[[[21, 20, 19]], [[5]], [[]], [[10]], [[200]], [[3, 5]], [[22, 45, 67, 32]], [['single']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]], [[(1, 'A', 5)]], [[]], [[(10,)]], [[(100, 200)]], [[(1, 2, 3), (4, 5)]], [[(1, 'apple', 22), (3, 'orange', 45), (5, 'banana', 67), (8, 'peach', 32)]], [[(1, 'single')]]]", "input_output_examples": "[[[[(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]]], [[[21, 20, 19]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/273", "original_requirement": "from typing import Tuple\n\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\"\"\"", "entry_point": "substract_elements", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef substract_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a - b for a, b in zip(test_tup1, test_tup2)))"], "outputs": "[[(8, -1, -13)], [(0, 0, 0)], [(-2, 0, 2)], [(50, 50, 50)], [(2,)], [(0, 0, 0)], [(0, 0, 0)], [(-10, 5, 15)], [(5,)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(10, 4, 5), (2, 5, 18)], [(0, 0, 0), (0, 0, 0)], [(1, 2, 3), (3, 2, 1)], [(100, 200, 300), (50, 150, 250)], [(5,), (3,)], [(5, 3, 7), (5, 3, 7)], [(-5, -10, -15), (-5, -10, -15)], [(-5, 10, 20), (5, 5, 5)], [(10, 4), (5,)]]", "input_output_examples": "[[[(10, 4, 5), (2, 5, 18)]], [[(8, -1, -13)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/274", "original_requirement": "def even_binomial_Coeff_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def even_binomial_Coeff_Sum(n: int) -> int:\n\"\"\"\nWrite a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\nassert even_binomial_Coeff_Sum(4) == 8\n\"\"\"", "entry_point": "even_binomial_Coeff_Sum", "cluster_list": [{"programs_str": ["from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, i) for i in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, i) for i in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, i) for i in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, i) for i in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, i) for i in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, i) for i in range(0, n + 1, 2)))", "from math import comb\n\ndef even_binomial_Coeff_Sum(n: int) -> int:\n    return sum((comb(n, k) for k in range(0, n + 1, 2)))"], "outputs": "[[1], [1], [8], [512], [16384], [524288]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [4], [10], [15], [20]]", "input_output_examples": "[[[4]], [[8]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/276", "original_requirement": "def volume_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def volume_cylinder(r: float, h: float) -> float:\n\"\"\"\nWrite a function that takes in the radius and height of a cylinder and returns the the volume.\nassert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)\n\"\"\"", "entry_point": "volume_cylinder", "cluster_list": [{"programs_str": ["import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h", "import math\n\ndef volume_cylinder(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h"], "outputs": "[[1570.7963267948967], [0.0], [0.0], [0.0], [277.08847204661976], [6283185307.179586], [785.3981633974483], [-785.3981633974483], [-785.3981633974483], [3.1415926535897937e-30], ['OverflowError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10, 5], [0, 10], [5, 0], [0, 0], [3.5, 7.2], [1000, 2000], [-5, 10], [5, -10], [-5, -10], [1e-10, 1e-10], [1.7976931348623157e+308, 1e-100]]", "input_output_examples": "[[[10, 5]], [[1570.7500000000002]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/277", "original_requirement": "def dict_filter(dict1: dict, n: int) -> dict:\n\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def dict_filter(dict1: dict, n: int) -> dict:\n\"\"\"\nWrite a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\"\"\"", "entry_point": "dict_filter", "cluster_list": [{"programs_str": ["def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}", "def dict_filter(dict1: dict, n: int) -> dict:\n    return {key: value for key, value in dict1.items() if value >= n}"], "outputs": "[[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}], [{'Bob': 200, 'Daisy': 180}], [{}], [{}], [{'Anna': 300}], [{'Max': 50, 'Eva': 60, 'Sam': 70}], [{'Two': 2, 'Three': 3}], [{'Single': 100}], [{'Zero': 0, 'Positive': 10}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170], [{'Alice': 150, 'Bob': 200, 'Charlie': 120, 'Daisy': 180}, 160], [{'John': 100, 'Mary': 125, 'Sam': 130}, 140], [{}, 100], [{'Anna': 300, 'Tom': 250, 'Lucy': 200}, 300], [{'Max': 50, 'Eva': 60, 'Sam': 70}, 30], [{'One': 1, 'Two': 2, 'Three': 3}, 2], [{'Single': 100}, 100], [{'Negative': -20, 'Zero': 0, 'Positive': 10}, 0]]", "input_output_examples": "[[[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170]], [[{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/278", "original_requirement": "from typing import Tuple\n\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n\"\"\"\nWrite a function to find the number of elements that occurs before the tuple element in the given tuple.\nassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\"\"\"", "entry_point": "count_first_elements", "cluster_list": [{"programs_str": ["from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for idx, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return idx\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for i, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return i\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return i\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    return next((index for index, value in enumerate(test_tup) if isinstance(value, tuple)), len(test_tup))", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return i\n    return len(test_tup)", "from typing import Any, Tuple\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    return next((i for i, item in enumerate(test_tup) if isinstance(item, tuple)), len(test_tup))", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return i\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    count = 0\n    for elem in test_tup:\n        if isinstance(elem, tuple):\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    count = 0\n    for element in test_tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for idx, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return idx\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for idx, item in enumerate(test_tup):\n        if isinstance(item, tuple):\n            return idx\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return i\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for i, elem in enumerate(test_tup):\n        if isinstance(elem, tuple):\n            return i\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for index, item in enumerate(test_tup):\n        if isinstance(item, tuple):\n            return index\n    return len(test_tup)", "from typing import Tuple, Any\n\ndef count_first_elements(test_tup: Tuple[Any, ...]) -> int:\n    for idx, element in enumerate(test_tup):\n        if isinstance(element, tuple):\n            return idx\n    return len(test_tup)"], "outputs": "[[3], [0], [1], [0], [0], [2], [0], [3], [3], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(1, 5, 7, (4, 6), 10)], [((),)], [(3,)], [((4, 6),)], [((4, 6), 7, 8, 10, (12, 13))], [(1, 2, (3, 4), (5, 6), 7)], [((3, 4, 5),)], [('a', 'b', 'c', (1, 2), 'd')], [(None, True, False, (2, 3), 5)], [((3, 4), (5, 6), (7, 8), 9)], [((4, 6), 5, 6, 7)]]", "input_output_examples": "[[[(1, 5, 7, (4, 6), 10)]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9435483870967742, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/279", "original_requirement": "def is_num_decagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"", "repaired_requirement": "def is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Write a function to calculate the nth decagonal number using the formula: n * (4 * n - 3).\n    A decagonal number is a figurate number that represents a decagon. The nth decagonal number is derived from the formula.\n    Example:\n    assert is_num_decagonal(3) == 27\n    \"\"\"", "original_clusters": {"requirement": "def is_num_decagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth decagonal number.\nassert is_num_decagonal(3) == 27\n\"\"\"", "entry_point": "is_num_decagonal", "cluster_list": [{"programs_str": ["def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)"], "outputs": "[[1], [27], [85], [0], [7], [370], [39700]]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_num_decagonal(n: int) -> int:\n    return n * (8 * n - 7)", "def is_num_decagonal(n: int) -> int:\n    return n * (8 * n - 7)", "def is_num_decagonal(n: int) -> int:\n    return n * (8 * n - 7)", "def is_num_decagonal(n: int) -> int:\n    return n * (8 * n - 7)", "def is_num_decagonal(n: int) -> int:\n    return n * (8 * n - 7)", "def is_num_decagonal(n: int) -> int:\n    return n * (8 * n - 7)"], "outputs": "[[1], [51], [165], [0], [15], [730], [79300]]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [51], [27]]]"}, {"programs_str": ["def is_num_decagonal(n: int) -> int:\n    return n * (8 * n - 6)"], "outputs": "[[2], [54], [170], [0], [14], [740], [79400]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3], [54], [27]]]"}], "entropy": 0.7199877141320895, "llm_generated_inputs": "[[1], [3], [5], [0], [-1], [10], [100]]", "input_output_examples": "[[[3]], [[27]]]", "weighted_test_consistency": 0.65, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def is_num_decagonal(n: int) -> int:\n    \"\"\"\n    Write a function to calculate the nth decagonal number using the formula: n * (4 * n - 3).\n    A decagonal number is a figurate number that represents a decagon. The nth decagonal number is derived from the formula.\n    Example:\n    assert is_num_decagonal(3) == 27\n    \"\"\"", "entry_point": "is_num_decagonal", "cluster_list": [{"programs_str": ["def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)", "def is_num_decagonal(n: int) -> int:\n    return n * (4 * n - 3)"], "outputs": "[[1], [27], [85], [0], [7], [370], [39700]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [3], [5], [0], [-1], [10], [100]]", "input_output_examples": "[[[3]], [[27]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.4, "original_avg_pass_rate": 0.4105263157894738, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/280", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n\"\"\"\nWrite a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\"\"\"", "entry_point": "sequential_search", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List\nfrom typing import Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, element in enumerate(dlist):\n        if element == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)", "from typing import List, Tuple\n\ndef sequential_search(dlist: List[int], item: int) -> Tuple[bool, int]:\n    for index, value in enumerate(dlist):\n        if value == item:\n            return (True, index)\n    return (False, -1)"], "outputs": "[[(True, 3)], [(True, 5)], [(False, -1)], [(False, -1)], [(True, 0)], [(False, -1)], [(True, 0)], [(True, 3)], [(True, 1)], [(False, -1)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 77], [[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 100], [[], 10], [[7], 7], [[7], 5], [[2, 4, 6, 8, 2, 2], 2], [[2, 4, 6, 8, 2, 2], 8], [[-5, -10, 0, 5, 10], -10], [[-5, -10, 0, 5, 10], 15]]", "input_output_examples": "[[[[11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31]], [[(True, 3)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/281", "original_requirement": "from typing import List\n\n\ndef all_unique(test_list: List[int]) -> bool:\n\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef all_unique(test_list: List[int]) -> bool:\n\"\"\"\nWrite a python function to check if the elements of a given list are unique or not.\nassert all_unique([1,2,3]) == True\n\"\"\"", "entry_point": "all_unique", "cluster_list": [{"programs_str": ["from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(set(test_list)) == len(test_list)", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(set(test_list)) == len(test_list)", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))", "from typing import List\n\ndef all_unique(test_list: List[int]) -> bool:\n    return len(test_list) == len(set(test_list))"], "outputs": "[[True], [False], [True], [True], [False], [True], [True], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[1, 1, 2, 3]], [[]], [[1]], [[1, 2, 2, 3, 4]], [[9, 7, 5, 3, 1]], [[100, 200, 300, 400]], [[100, 200, 300, 100]], [[0, -1, -2, -3]], [[0, 0, 0]]]", "input_output_examples": "[[[[1, 2, 3]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/282", "original_requirement": "from typing import List\n\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n\"\"\"\nWrite a function to subtract two lists element-wise.\nassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\"\"\"", "entry_point": "sub_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [x - y for x, y in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef sub_list(nums1: List[int], nums2: List[int]) -> List[int]:\n    return [a - b for a, b in zip(nums1, nums2)]"], "outputs": "[[[-3, -3, -3]], [[3, -6, 5]], [[]], [[]], [[]], [[-1]], [[-2, -2]], [[0, 0, 0]], [[3, 3, 3]], [[0, 0, 0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3], [4, 5, 6]], [[0, -1, 3], [-3, 5, -2]], [[], []], [[1, 2, 3], []], [[], [4, 5, 6]], [[1], [2]], [[1, 2], [3, 4, 5]], [[10, 20, 30], [10, 20, 30]], [[-1, -2, -3], [-4, -5, -6]], [[0, 0, 0], [0, 0, 0]]]", "input_output_examples": "[[[[1, 2, 3], [4, 5, 6]]], [[[-3, -3, -3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/283", "original_requirement": "def validate(n: int) -> bool:\n\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def validate(n: int) -> bool:\n\"\"\"\nWrite a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\nassert validate(1234) == True\n\"\"\"", "entry_point": "validate", "cluster_list": [{"programs_str": ["from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_counts = Counter(str(n))\n    for digit, count in digit_counts.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_counts = Counter(str(n))\n    for digit, count in digit_counts.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digit_counts = Counter(str(n))\n    for digit, count in digit_counts.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digits = str(n)\n    frequency = Counter(digits)\n    return all((frequency[d] <= int(d) for d in digits))", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digits = str(n)\n    freq_count = Counter(digits)\n    for digit, freq in freq_count.items():\n        if freq > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_counts = Counter(str(n))\n    return all((digit_counts[digit] <= int(digit) for digit in digit_counts))", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_counts = Counter(str(n))\n    for digit, count in digit_counts.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_counts = Counter(str(n))\n    for digit, count in digit_counts.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    str_n = str(n)\n    digit_count = Counter(str_n)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "def validate(n: int) -> bool:\n    from collections import Counter\n    digits = str(n)\n    digit_count = Counter(digits)\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_count = Counter(str(n))\n    return all((count <= int(digit) for digit, count in digit_count.items()))", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_count = Counter(str(n))\n    for digit, count in digit_count.items():\n        if count > int(digit):\n            return False\n    return True", "from collections import Counter\n\ndef validate(n: int) -> bool:\n    digit_count = Counter(str(n))\n    return all((digit_count[d] <= int(d) for d in digit_count))"], "outputs": "[[True], [False], [False], [False], [False], [False], [False], [True], [True], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1234], [0], [222], [100], [3211], [9876543210], [11122], [999999999], [444], [567890], [1000000000], [555555555]]", "input_output_examples": "[[[1234]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/284", "original_requirement": "from typing import List\n\n\ndef check_element(list1: List, element: Any) -> bool:\n\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef check_element(list1: List, element: Any) -> bool:\n\"\"\"\nWrite a function that takes in a list and element and checks whether all items in the list are equal to the given element.\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\"\"\"", "entry_point": "check_element", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((x == element for x in list1))", "from typing import List, Any\n\ndef check_element(list1: List[Any], element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List[Any], element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List[Any], element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List[Any], element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List[Any], element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List, element: Any) -> bool:\n    return all((item == element for item in list1))", "from typing import List, Any\n\ndef check_element(list1: List[Any], element: Any) -> bool:\n    return all((item == element for item in list1))"], "outputs": "[[True], [False], [True], [True], [False], [True], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['apple', 'apple', 'apple'], 'apple'], [['banana', 'apple', 'apple'], 'apple'], [[], 'orange'], [['orange'], 'orange'], [['orange', 'orange', 'orange'], 'blue'], [[42, 42, 42], 42], [[1, 42, 42], 42], [[None, None, None], None], [[True, True, True], False], [[True, True, False], True]]", "input_output_examples": "[[[['green', 'orange', 'black', 'white'], 'blue']], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/285", "original_requirement": "def text_match_two_three(text: str) -> bool:\n\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def text_match_two_three(text: str) -> bool:\n\"\"\"\nWrite a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\nassert text_match_two_three(\"ac\")==(False)\n\"\"\"", "entry_point": "text_match_two_three", "cluster_list": [{"programs_str": ["import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'ab{2,3}'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    pattern = 'ab{2,3}'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('a(bb|bbb)', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))", "import re\n\ndef text_match_two_three(text: str) -> bool:\n    return bool(re.search('ab{2,3}', text))"], "outputs": "[[True], [True], [True], [False], [False], [True], [False], [False], [True], [False], [True], [True], [True], [False], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abb'], ['abbb'], ['aabb'], ['ac'], ['bbb'], ['abbbb'], ['a'], ['ab'], ['abbbbbb'], ['xyz'], ['abbcc'], ['abbbc'], ['aabbc'], [''], ['bba'], ['aaaabb'], ['ababb']]", "input_output_examples": "[[['ac']], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9990384615384615, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/286", "original_requirement": "from typing import List\n\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n    Write a function to find the largest sum of a contiguous subarray in the modified \n    array, which is conceptually formed by repeating the given array `k` times. \n\n    Details:\n    - The function should compute the maximum sum of a contiguous subarray that \n      may span one or more repetitions of the original array `a`. \n    - The explicit formation of the repeated array is not required; the function \n      can use optimized techniques to simulate the effect of repetition without \n      creating the full repeated array in memory.\n    - Cross-boundary subarrays (i.e., subarrays spanning multiple repetitions \n      of the original array) must be considered.\n\n    Input:\n    - `a`: A list of integers representing the original array.\n    - `n`: The length of the array `a`. This parameter is provided for clarity \n      and consistency, but does not need to be computed by the function.\n    - `k`: The number of times the array `a` is conceptually repeated.\n\n    Output:\n    - Returns an integer representing the largest sum of a contiguous subarray \n      within the conceptually repeated array.\n\n    Example:\n    >>> assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\"\"\"\nWrite a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\"\"\"", "entry_point": "max_sub_array_sum_repeated", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_sub_array_sum(arr: List[int]) -> int:\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        for i in range(1, len(arr)):\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_single = max_sub_array_sum(a)\n    if k == 1:\n        return max_single\n    total_sum = sum(a)\n    max_prefix_sum = max_suffix_sum = float('-inf')\n    current_prefix_sum = current_suffix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if total_sum > 0:\n        max_wrap_around = max_suffix_sum + max_prefix_sum + (k - 2) * total_sum\n    else:\n        max_wrap_around = max(max_suffix_sum + max_prefix_sum, max_single)\n    return max(max_single, max_wrap_around)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    kadane_once = kadane(a)\n    if k == 1:\n        return kadane_once\n    total_sum = sum(a)\n    kadane_two = kadane(a * 2)\n    if total_sum > 0:\n        return kadane_two + (k - 2) * total_sum\n    return kadane_two", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_sub_array_sum(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_single = max_sub_array_sum(a)\n    if k == 1:\n        return max_single\n    total_sum = sum(a)\n    max_end_to_start = max_sub_array_sum(a * 2)\n    max_start = max_sub_array_sum(a + a)\n    if total_sum > 0:\n        return max(max_single, max_start + (k - 2) * total_sum, max_end_to_start)\n    else:\n        return max(max_single, max_start)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_sub_array_sum(a: List[int], n: int) -> int:\n        current_sum = max_sum = a[0]\n        for i in range(1, n):\n            current_sum = max(a[i], current_sum + a[i])\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    total_sum = sum(a)\n    if k == 1:\n        return max_sub_array_sum(a, n)\n    elif total_sum > 0:\n        return max_sub_array_sum(a * 2, 2 * n) + (k - 2) * total_sum\n    else:\n        return max_sub_array_sum(a * 2, 2 * n)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane_max_subarray(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane_max_subarray(a)\n    array_sum = sum(a)\n    max_prefix_suffix_sum = kadane_max_subarray(a * 2)\n    if array_sum > 0:\n        return max_prefix_suffix_sum + (k - 2) * array_sum\n    else:\n        return max_prefix_suffix_sum", "from typing import List\n\ndef kadane(a: List[int]) -> int:\n    max_ending_here = max_so_far = a[0]\n    for x in a[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    total_sum = sum(a)\n    max_kadane_1 = kadane(a)\n    if k == 1:\n        return max_kadane_1\n    max_prefix_sum = max_suffix_sum = float('-inf')\n    current_prefix_sum = current_suffix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if total_sum > 0:\n        return max(max_kadane_1, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane_1, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    total_sum = sum(a)\n    kadane_one_pass = kadane(a * min(2, k))\n    if total_sum > 0:\n        return kadane_one_pass + (k - 2) * total_sum\n    else:\n        return kadane_one_pass", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_current = max_global = arr[0]\n        for x in arr[1:]:\n            max_current = max(x, max_current + x)\n            if max_current > max_global:\n                max_global = max_current\n        return max_global\n    single_kadane = kadane(a)\n    if k == 1:\n        return single_kadane\n    prefix_sum = suffix_sum = 0\n    max_prefix_sum = max_suffix_sum = float('-inf')\n    current_sum = 0\n    for x in a:\n        current_sum += x\n        max_prefix_sum = max(max_prefix_sum, current_sum)\n    current_sum = 0\n    for x in reversed(a):\n        current_sum += x\n        max_suffix_sum = max(max_suffix_sum, current_sum)\n    total_sum = sum(a)\n    if total_sum > 0:\n        return max(max_suffix_sum + max_prefix_sum + total_sum * (k - 2), single_kadane)\n    else:\n        return max(max_suffix_sum + max_prefix_sum, single_kadane)"], "outputs": "[[12], [30], [50], [0], ['IndexError'], [-1], [107], [200], [15], [30]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_subarray_sum(nums: List[int]) -> int:\n        max_ending_here = max_so_far = nums[0]\n        for x in nums[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = max_subarray_sum(a)\n    if k == 1:\n        return max_kadane\n    sum_a = sum(a)\n    max_prefix_sum, max_suffix_sum = (0, 0)\n    current_prefix_sum, current_suffix_sum = (0, 0)\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if sum_a > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k - 2) * sum_a)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return kadane(a)\n    total_sum = sum(a)\n    max_single = kadane(a)\n    max_prefix = max_suffix = 0\n    current_prefix = current_suffix = 0\n    for i in range(n):\n        current_prefix += a[i]\n        max_prefix = max(max_prefix, current_prefix)\n    for i in range(n - 1, -1, -1):\n        current_suffix += a[i]\n        max_suffix = max(max_suffix, current_suffix)\n    if total_sum > 0:\n        result = max(max_single, max_prefix + max_suffix + total_sum * (k - 2))\n    else:\n        result = max(max_single, max_prefix + max_suffix)\n    return result", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_sub_array_sum(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for num in arr[1:]:\n            max_ending_here = max(num, max_ending_here + num)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_single = max_sub_array_sum(a)\n    total_sum = sum(a)\n    if k == 1:\n        return max_single\n    max_prefix_sum = max_suffix_sum = 0\n    prefix_sum = suffix_sum = 0\n    for i in range(n):\n        prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n    for i in range(n - 1, -1, -1):\n        suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n    if total_sum > 0:\n        return max(max_single, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_single, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadanes_algorithm(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_sub_sum_single = kadanes_algorithm(a)\n    array_sum = sum(a)\n    if k == 1:\n        return max_sub_sum_single\n    max_prefix_sum = max_suffix_sum = curr_prefix_sum = curr_suffix_sum = 0\n    for i in range(n):\n        curr_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, curr_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        curr_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    if array_sum > 0:\n        return max(max_sub_sum_single, max_prefix_sum + max_suffix_sum + (k - 2) * array_sum)\n    else:\n        return max(max_sub_sum_single, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef kadane(a: List[int]) -> int:\n    max_ending_here = max_so_far = a[0]\n    for x in a[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    max_k_sum = kadane(a)\n    total_sum = sum(a)\n    if k == 1:\n        return max_k_sum\n    prefix_sum = suffix_sum = 0\n    current_prefix_sum = current_suffix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        prefix_sum = max(prefix_sum, current_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        suffix_sum = max(suffix_sum, current_suffix_sum)\n    if total_sum > 0:\n        return max(prefix_sum + suffix_sum + (k - 2) * total_sum, max_k_sum)\n    else:\n        return max(prefix_sum + suffix_sum, max_k_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_sum = current_sum = arr[0]\n        for value in arr[1:]:\n            current_sum = max(value, current_sum + value)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    total_sum = sum(a)\n    max_single = kadane(a)\n    if k == 1:\n        return max_single\n    max_prefix_sum = max_suffix_sum = 0\n    current_prefix_sum = current_suffix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    max_combined = max_prefix_sum + max_suffix_sum\n    if total_sum > 0:\n        result = max(max_single, max_combined + (k - 2) * total_sum)\n    else:\n        result = max(max_single, max_combined)\n    return result", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_sub_array_sum(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    if k == 1:\n        return max_sub_array_sum(a)\n    sum_a = sum(a)\n    max_kadane = max_sub_array_sum(a)\n    max_prefix_sum = max_suffix_sum = current_prefix_sum = current_suffix_sum = 0\n    for num in a:\n        current_prefix_sum += num\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    for num in reversed(a):\n        current_suffix_sum += num\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if sum_a > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k - 2) * sum_a)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_sub_array_sum(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_sum_one_array = max_sub_array_sum(a)\n    if k == 1:\n        return max_sum_one_array\n    prefix_sum, suffix_sum, total_sum = ([0] * n, [0] * n, sum(a))\n    current_prefix, current_suffix = (0, 0)\n    for i in range(n):\n        current_prefix += a[i]\n        prefix_sum[i] = max(current_prefix, prefix_sum[i - 1] if i > 0 else 0)\n    for i in range(n - 1, -1, -1):\n        current_suffix += a[i]\n        suffix_sum[i] = max(current_suffix, suffix_sum[i + 1] if i < n - 1 else 0)\n    max_sum_two_arrays = prefix_sum[n - 1] + suffix_sum[0]\n    if total_sum > 0 and k > 2:\n        max_sum_more_arrays = prefix_sum[n - 1] + suffix_sum[0] + (k - 2) * total_sum\n        return max(max_sum_one_array, max_sum_two_arrays, max_sum_more_arrays)\n    else:\n        return max(max_sum_one_array, max_sum_two_arrays)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(array: List[int]) -> int:\n        max_ending_here = max_so_far = array[0]\n        for x in array[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = kadane(a)\n    if k == 1:\n        return max_kadane\n    max_prefix_sum = max_suffix_sum = sum_current = 0\n    for i in range(n):\n        sum_current += a[i]\n        max_prefix_sum = max(max_prefix_sum, sum_current)\n    sum_current = 0\n    for i in range(n - 1, -1, -1):\n        sum_current += a[i]\n        max_suffix_sum = max(max_suffix_sum, sum_current)\n    total_sum = sum(a)\n    if total_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def max_sub_array_sum_single(b: List[int]) -> int:\n        max_ending_here = max_so_far = b[0]\n        for x in b[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_single = max_sub_array_sum_single(a)\n    if k == 1:\n        return max_single\n    max_prefix = 0\n    max_suffix = 0\n    current_prefix_sum = 0\n    current_suffix_sum = 0\n    total_sum = sum(a)\n    for num in a:\n        current_prefix_sum += num\n        if current_prefix_sum > max_prefix:\n            max_prefix = current_prefix_sum\n    for num in reversed(a):\n        current_suffix_sum += num\n        if current_suffix_sum > max_suffix:\n            max_suffix = current_suffix_sum\n    if total_sum > 0:\n        return max(max_single, max_prefix + max_suffix + total_sum * (k - 2))\n    else:\n        return max(max_single, max_prefix + max_suffix)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_sum_one = kadane(a)\n    total_sum = sum(a)\n    if k == 1:\n        return max_sum_one\n    max_prefix_sum = max_suffix_sum = 0\n    current_prefix_sum = current_suffix_sum = 0\n    for x in a:\n        current_prefix_sum += x\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    for x in reversed(a):\n        current_suffix_sum += x\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    max_sum_combined = max_suffix_sum + max_prefix_sum\n    if total_sum > 0:\n        max_sum = max(max_sum_one, max_sum_combined + (k - 2) * total_sum)\n    else:\n        max_sum = max(max_sum_one, max_sum_combined)\n    return max_sum"], "outputs": "[[12], [30], [50], [0], ['IndexError'], [0], [107], [200], [15], [30]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_single = kadane(a)\n    if k == 1:\n        return max_single\n    total_sum = sum(a)\n    prefix_sum = [0] * n\n    suffix_sum = [0] * n\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        prefix_sum[i] = current_prefix_sum if i == 0 else max(prefix_sum[i - 1], current_prefix_sum)\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        suffix_sum[i] = current_suffix_sum if i == n - 1 else max(suffix_sum[i + 1], current_suffix_sum)\n    if total_sum > 0:\n        max_combination = max_single\n        for i in range(n):\n            max_combination = max(max_combination, prefix_sum[i] + suffix_sum[i] + (k - 2) * total_sum)\n        return max(max_combination, max_single)\n    else:\n        return max(max_single, suffix_sum[0] + prefix_sum[n - 1])"], "outputs": "[[9], [30], [50], [0], ['IndexError'], [-1], [106], [200], [10], [30]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7692552373208171, "llm_generated_inputs": "[[[1, 2, 3], 3, 2], [[10, 20, -30, -1], 4, 3], [[5], 1, 10], [[0, 0, 0], 3, 5], [[], 0, 2], [[-1, -2, -3], 3, 3], [[100, -99, 100, -99], 4, 4], [[1, 2, -100, 200], 4, 1], [[2, -1, 2, 3, 4, -5], 6, 2], [[-10, -20, 30], 3, 4]]", "input_output_examples": "[[[[10, 20, -30, -1], 4, 3]], [[30]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n    \"\"\"\n    Write a function to find the largest sum of a contiguous subarray in the modified \n    array, which is conceptually formed by repeating the given array `k` times. \n\n    Details:\n    - The function should compute the maximum sum of a contiguous subarray that \n      may span one or more repetitions of the original array `a`. \n    - The explicit formation of the repeated array is not required; the function \n      can use optimized techniques to simulate the effect of repetition without \n      creating the full repeated array in memory.\n    - Cross-boundary subarrays (i.e., subarrays spanning multiple repetitions \n      of the original array) must be considered.\n\n    Input:\n    - `a`: A list of integers representing the original array.\n    - `n`: The length of the array `a`. This parameter is provided for clarity \n      and consistency, but does not need to be computed by the function.\n    - `k`: The number of times the array `a` is conceptually repeated.\n\n    Output:\n    - Returns an integer representing the largest sum of a contiguous subarray \n      within the conceptually repeated array.\n\n    Example:\n    >>> assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n    \"\"\"\n```", "entry_point": "max_sub_array_sum_repeated", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = kadane(a)\n    sum_a = sum(a)\n    if k == 1:\n        return max_kadane\n    max_prefix_sum = max_suffix_sum = 0\n    current_prefix_sum = current_suffix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if sum_a > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + sum_a * (k - 2))\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = kadane(a)\n    if k == 1:\n        return max_kadane\n    total_sum = sum(a)\n    max_prefix_sum = max_suffix_sum = current_prefix_sum = current_suffix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if total_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_so_far = max_ending_here = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = kadane(a)\n    if k == 1:\n        return max_kadane\n    arr_sum = sum(a)\n    max_prefix_sum, max_prefix = (0, 0)\n    max_suffix_sum, max_suffix = (0, 0)\n    for i in range(n):\n        max_prefix += a[i]\n        max_prefix_sum = max(max_prefix_sum, max_prefix)\n    for i in range(n - 1, -1, -1):\n        max_suffix += a[i]\n        max_suffix_sum = max(max_suffix_sum, max_suffix)\n    if arr_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k - 2) * arr_sum)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    total_sum = sum(a)\n    max_kadane_single = kadane(a)\n    if k == 1:\n        return max_kadane_single\n    max_prefix_sum = prefix_sum = 0\n    for x in a:\n        prefix_sum += x\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n    max_suffix_sum = suffix_sum = 0\n    for x in reversed(a):\n        suffix_sum += x\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n    if total_sum > 0:\n        max_cross_boundary = max_prefix_sum + max_suffix_sum + (k - 2) * total_sum\n    else:\n        max_cross_boundary = max_prefix_sum + max_suffix_sum\n    return max(max_kadane_single, max_cross_boundary)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    sum_a = sum(a)\n    kadane_a = kadane(a)\n    if k == 1:\n        return kadane_a\n    prefix_max = suffix_max = 0\n    current_prefix_sum = current_suffix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        prefix_max = max(prefix_max, current_prefix_sum)\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        suffix_max = max(suffix_max, current_suffix_sum)\n    if sum_a > 0:\n        return max(prefix_max + suffix_max + (k - 2) * sum_a, kadane_a)\n    else:\n        return max(prefix_max + suffix_max, kadane_a)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    single_kadane = kadane(a)\n    total_sum = sum(a)\n    if k == 1:\n        return single_kadane\n    prefix_sums = [0] * n\n    suffix_sums = [0] * n\n    current_prefix_sum = 0\n    for i in range(n):\n        current_prefix_sum += a[i]\n        prefix_sums[i] = max(prefix_sums[i - 1] if i > 0 else 0, current_prefix_sum)\n    current_suffix_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_suffix_sum += a[i]\n        suffix_sums[i] = max(suffix_sums[i + 1] if i < n - 1 else 0, current_suffix_sum)\n    max_prefix_suffix = prefix_sums[-1] + suffix_sums[0]\n    for i in range(n - 1):\n        max_prefix_suffix = max(max_prefix_suffix, prefix_sums[i] + suffix_sums[i + 1])\n    if total_sum > 0:\n        result = max(single_kadane, max_prefix_suffix, prefix_sums[-1] + suffix_sums[0] + (k - 2) * total_sum)\n    else:\n        result = max(single_kadane, max_prefix_suffix)\n    return result", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    total_sum = sum(a)\n    max_single = kadane(a)\n    if k == 1:\n        return max_single\n    max_prefix_sum = cur = 0\n    for x in a:\n        cur += x\n        max_prefix_sum = max(max_prefix_sum, cur)\n    max_suffix_sum = cur = 0\n    for x in reversed(a):\n        cur += x\n        max_suffix_sum = max(max_suffix_sum, cur)\n    if total_sum > 0:\n        return max(max_single, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_single, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_so_far = current_max = arr[0]\n        for num in arr[1:]:\n            current_max = max(num, current_max + num)\n            max_so_far = max(max_so_far, current_max)\n        return max_so_far\n    max_single_kadane = kadane(a)\n    total_sum = sum(a)\n    if k == 1:\n        return max_single_kadane\n    max_prefix_sum = curr_prefix_sum = 0\n    for num in a:\n        curr_prefix_sum += num\n        max_prefix_sum = max(max_prefix_sum, curr_prefix_sum)\n    max_suffix_sum = curr_suffix_sum = 0\n    for num in reversed(a):\n        curr_suffix_sum += num\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    max_combined = max_prefix_sum + max_suffix_sum\n    if total_sum > 0:\n        max_combined += (k - 2) * total_sum\n    return max(max_single_kadane, max_combined)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    one_kadane = kadane(a)\n    sum_a = sum(a)\n    if k == 1:\n        return one_kadane\n    max_prefix_sum = max_suffix_sum = 0\n    curr_prefix_sum = curr_suffix_sum = 0\n    for x in a:\n        curr_prefix_sum += x\n        max_prefix_sum = max(max_prefix_sum, curr_prefix_sum)\n    for x in reversed(a):\n        curr_suffix_sum += x\n        max_suffix_sum = max(max_suffix_sum, curr_suffix_sum)\n    if sum_a < 0:\n        return max(one_kadane, max_prefix_sum + max_suffix_sum)\n    else:\n        return max(one_kadane, max_prefix_sum + max_suffix_sum + (k - 2) * sum_a)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if k == 1:\n        return max_kadane\n    max_prefix_sum = max_suffix_sum = 0\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_sum)\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_sum)\n    if total_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)"], "outputs": "[[12], [30], [50], [0], ['IndexError'], [0], [107], [200], [15], [30]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane_single = kadane(a)\n    total_sum = sum(a)\n    if k == 1:\n        return max_kadane_single\n    double_a = a + a\n    max_kadane_double = kadane(double_a)\n    if total_sum > 0:\n        return max(max_kadane_double, max_kadane_single + (k - 1) * total_sum)\n    else:\n        return max_kadane_double", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        current_max = global_max = arr[0]\n        for num in arr[1:]:\n            current_max = max(num, current_max + num)\n            if current_max > global_max:\n                global_max = current_max\n        return global_max\n    max_current = kadane(a)\n    array_sum = sum(a)\n    if k == 1:\n        return max_current\n    prefix_sum = suffix_sum = float('-inf')\n    current_prefix = current_suffix = 0\n    for i in range(n):\n        current_prefix += a[i]\n        if current_prefix > prefix_sum:\n            prefix_sum = current_prefix\n    for i in range(n - 1, -1, -1):\n        current_suffix += a[i]\n        if current_suffix > suffix_sum:\n            suffix_sum = current_suffix\n    if array_sum > 0:\n        max_cross_boundary = prefix_sum + suffix_sum + (k - 2) * array_sum\n    else:\n        max_cross_boundary = prefix_sum + suffix_sum\n    return max(max_current, max_cross_boundary)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = kadane(a)\n    total_sum = sum(a)\n    if k == 1:\n        return max_kadane\n    prefix_sum = suffix_sum = 0\n    max_prefix_sum = max_suffix_sum = float('-inf')\n    current = 0\n    for i in range(n):\n        current += a[i]\n        max_prefix_sum = max(max_prefix_sum, current)\n    current = 0\n    for i in range(n - 1, -1, -1):\n        current += a[i]\n        max_suffix_sum = max(max_suffix_sum, current)\n    if total_sum > 0:\n        result = max(max_kadane, max_prefix_sum + max_suffix_sum + total_sum * (k - 2))\n    else:\n        result = max(max_kadane, max_prefix_sum + max_suffix_sum)\n    return result", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr):\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_single = kadane(a)\n    if k == 1:\n        return max_single\n    total_sum = sum(a)\n    prefix_sum, max_prefix_sum = (0, float('-inf'))\n    suffix_sum, max_suffix_sum = (0, float('-inf'))\n    for i in range(n):\n        prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n    for i in range(n - 1, -1, -1):\n        suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n    if total_sum > 0:\n        return max(max_single, max_prefix_sum + max_suffix_sum + total_sum * (k - 2))\n    else:\n        return max(max_single, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = kadane(a)\n    if k == 1:\n        return max_kadane\n    current_prefix_sum = 0\n    max_prefix_sum = float('-inf')\n    for x in a:\n        current_prefix_sum += x\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    current_suffix_sum = 0\n    max_suffix_sum = float('-inf')\n    for x in reversed(a):\n        current_suffix_sum += x\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    total_sum = sum(a)\n    if total_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + total_sum * (k - 2))\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane_single = kadane(a)\n    if k == 1:\n        return max_kadane_single\n    total_sum = sum(a)\n    max_prefix, max_suffix = (float('-inf'), float('-inf'))\n    current_prefix, current_suffix = (0, 0)\n    for i in range(n):\n        current_prefix += a[i]\n        max_prefix = max(max_prefix, current_prefix)\n    for i in range(n - 1, -1, -1):\n        current_suffix += a[i]\n        max_suffix = max(max_suffix, current_suffix)\n    max_kadane_double = max_prefix + max_suffix\n    if total_sum > 0:\n        return max(max_kadane_single, max_kadane_double, max_prefix + max_suffix + (k - 2) * total_sum)\n    else:\n        return max(max_kadane_single, max_kadane_double)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n\n    def max_prefix_sum(arr: List[int]) -> int:\n        max_sum = current_sum = arr[0]\n        for x in arr[1:]:\n            current_sum += x\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n\n    def max_suffix_sum(arr: List[int]) -> int:\n        max_sum = current_sum = arr[-1]\n        for x in reversed(arr[:-1]):\n            current_sum += x\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    single_array_max = kadane(a)\n    array_sum = sum(a)\n    if k == 1:\n        return single_array_max\n    prefix_max = max_prefix_sum(a)\n    suffix_max = max_suffix_sum(a)\n    if array_sum > 0:\n        return max(single_array_max, prefix_max + suffix_max + (k - 2) * array_sum)\n    else:\n        return max(single_array_max, prefix_max + suffix_max)", "from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_end = max_so_far = arr[0]\n        for x in arr[1:]:\n            max_end = max(x, max_end + x)\n            max_so_far = max(max_so_far, max_end)\n        return max_so_far\n    max_kadane_single = kadane(a)\n    if k == 1:\n        return max_kadane_single\n    total_sum = sum(a)\n    prefix_sum = suffix_sum = 0\n    max_prefix_sum = max_suffix_sum = float('-inf')\n    current_prefix_sum = 0\n    for num in a:\n        current_prefix_sum += num\n        max_prefix_sum = max(max_prefix_sum, current_prefix_sum)\n    current_suffix_sum = 0\n    for num in reversed(a):\n        current_suffix_sum += num\n        max_suffix_sum = max(max_suffix_sum, current_suffix_sum)\n    if total_sum > 0:\n        return max(max_kadane_single, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane_single, max_prefix_sum + max_suffix_sum)"], "outputs": "[[12], [30], [50], [0], ['IndexError'], [-1], [107], [200], [15], [30]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_ending_here, max_so_far = (0, float('-inf'))\n        for x in arr:\n            max_ending_here = max(x, max_ending_here + x)\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    current_sum = sum(a)\n    max_kadane = kadane(a)\n    if k == 1:\n        return max_kadane\n    max_prefix_sum, max_suffix_sum = (float('-inf'), float('-inf'))\n    prefix_sum, suffix_sum = (0, 0)\n    for i in range(n):\n        prefix_sum += a[i]\n        max_prefix_sum = max(max_prefix_sum, prefix_sum)\n    for i in range(n - 1, -1, -1):\n        suffix_sum += a[i]\n        max_suffix_sum = max(max_suffix_sum, suffix_sum)\n    max_middle_sum = max_kadane\n    if k > 1:\n        max_middle_sum = max_suffix_sum + max_prefix_sum + max(0, (k - 2) * current_sum)\n    return max(max_middle_sum, max_kadane)"], "outputs": "[[12], [30], [50], [0], [-inf], [-1], [107], [200], [15], [30]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum_repeated(a: List[int], n: int, k: int) -> int:\n\n    def kadane(arr: List[int]) -> int:\n        max_so_far = float('-inf')\n        max_ending_here = 0\n        for x in arr:\n            max_ending_here += x\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n            if max_ending_here < 0:\n                max_ending_here = 0\n        return max_so_far\n    max_kadane = kadane(a)\n    if k == 1:\n        return max_kadane\n    total_sum = sum(a)\n    max_prefix_sum = max_suffix_sum = current_prefix = current_suffix = 0\n    for i in range(n):\n        current_prefix += a[i]\n        max_prefix_sum = max(max_prefix_sum, current_prefix)\n    for i in range(n - 1, -1, -1):\n        current_suffix += a[i]\n        max_suffix_sum = max(max_suffix_sum, current_suffix)\n    if total_sum > 0:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum + (k - 2) * total_sum)\n    else:\n        return max(max_kadane, max_prefix_sum + max_suffix_sum)"], "outputs": "[[12], [30], [50], [0], [0], [0], [107], [200], [15], [30]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7304820237218407, "llm_generated_inputs": "[[[1, 2, 3], 3, 2], [[10, 20, -30, -1], 4, 3], [[5], 1, 10], [[0, 0, 0], 3, 5], [[], 0, 2], [[-1, -2, -3], 3, 3], [[100, -99, 100, -99], 4, 4], [[1, 2, -100, 200], 4, 1], [[2, -1, 2, 3, 4, -5], 6, 2], [[-10, -20, 30], 3, 4]]", "input_output_examples": "[[[[10, 20, -30, -1], 4, 3]], [[30]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9180952380952381, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.7, "repaired_avg_pass_rate": 0.9971428571428571, "repaired_nzpassk": true, "repaired_majority_passk": false}}
{"task_id": "Mbpp/287", "original_requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def square_Sum(n: int) -> float:\n\"\"\"\nWrite a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\nassert square_Sum(2) == 20\n\"\"\"", "entry_point": "square_Sum", "cluster_list": [{"programs_str": ["def square_Sum(n: int) -> float:\n    return sum([(2 * i) ** 2 for i in range(1, n + 1)])", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return float(sum(((2 * i) ** 2 for i in range(1, n + 1))))", "def square_Sum(n: int) -> float:\n    return sum(((2 * k) ** 2 for k in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum([(2 * i) ** 2 for i in range(1, n + 1)])", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "from typing import List\n\ndef square_Sum(n: int) -> float:\n    return sum([(2 * i) ** 2 for i in range(1, n + 1)])", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "from typing import List\n\ndef square_Sum(n: int) -> float:\n    return sum([(2 * x) ** 2 for x in range(1, n + 1)])", "def square_Sum(n: int) -> float:\n    return sum([(2 * i) ** 2 for i in range(1, n + 1)])", "from typing import List\n\ndef square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum(((2 * i) ** 2 for i in range(1, n + 1)))", "def square_Sum(n: int) -> float:\n    return sum([2 * i * 2 * i for i in range(1, n + 1)])"], "outputs": "[[20], [0], [4], [1540], [1353400], [0], [1333133340000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2], [0], [1], [10], [100], [-2], [9999]]", "input_output_examples": "[[[2]], [[20]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/290", "original_requirement": "from typing import List\n\n\ndef max_length(list1: List[List]) -> List:\n\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef max_length(list1: List[List]) -> List:\n\"\"\"\nWrite a function to find the list of maximum length in a list of lists.\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\"\"\"", "entry_point": "max_length", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    if not list1:\n        return (0, [])\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)", "from typing import List, Tuple\n\ndef max_length(list1: List[List]) -> Tuple[int, List]:\n    max_list = max(list1, key=len)\n    return (len(max_list), max_list)"], "outputs": "[[(3, [13, 15, 17])], [(1, [1])], [(4, [1, 2, 3, 4])], [(1, [1])], [(0, [])], [(2, [1, 3])], [(3, [1, 2, 3])], [(0, [])], [(4, [2, 2, 2, 2])], [(4, [1, 3, 5, 7])]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[[], [1]]], [[[1, 2, 3, 4], [5, 6, 7], [8, 9]]], [[[1], [2]]], [[[]]], [[[0], [1, 3], [], [9, 11], [13, 15]]], [[[1, 2, 3], [4, 5, 6]]], [[[], [], []]], [[[1, 1, 1], [2, 2, 2, 2]]], [[[True, False], [1, 3, 5, 7]]]]", "input_output_examples": "[[[[[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]]], [[(3, [13, 15, 17])]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9919642857142857, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/292", "original_requirement": "def find(n: int, m: int) -> int:\n\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def find(n: int, m: int) -> int:\n\"\"\"\nWrite a python function to find quotient of two numbers (rounded down to the nearest integer).\nassert find(10,3) == 3\n\"\"\"", "entry_point": "find", "cluster_list": [{"programs_str": ["def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m", "def find(n: int, m: int) -> int:\n    return n // m"], "outputs": "[[3], [3], [-4], [-4], [3], [0], [10], [0], [14], [0], [499], [1], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10, 3], [9, 3], [10, -3], [-10, 3], [-10, -3], [0, 3], [10, 1], [3, 10], [100, 7], [7, 100], [999, 2], [1, 1], [0, 1], [0, -1]]", "input_output_examples": "[[[10, 3]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/293", "original_requirement": "def otherside_rightangle(w: float, h: float) -> float:\n\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def otherside_rightangle(w: float, h: float) -> float:\n\"\"\"\nWrite a function to find the third side of a right angled triangle.\nassert otherside_rightangle(7,8)==10.63014581273465\n\"\"\"", "entry_point": "otherside_rightangle", "cluster_list": [{"programs_str": ["import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "from math import sqrt\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return sqrt(w ** 2 + h ** 2)", "from math import sqrt\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)", "import math\n\ndef otherside_rightangle(w: float, h: float) -> float:\n    return math.sqrt(w ** 2 + h ** 2)"], "outputs": "[[5.0], [10.0], [5.0], [5.0], [0.0], [1.414213562373095e-10], [14142135623.730951], [10.63014581273465], [20.0], [500.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3.0, 4.0], [6.0, 8.0], [0.0, 5.0], [5.0, 0.0], [0.0, 0.0], [1e-10, 1e-10], [10000000000.0, 10000000000.0], [7.0, 8.0], [12.0, 16.0], [300.0, 400.0]]", "input_output_examples": "[[[7, 8]], [[10.63014581273465]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/294", "original_requirement": "def max_val(listval: list) -> int:\n\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"", "repaired_requirement": "```python\ndef max_val(listval: list) -> int:\n    \"\"\"\n    Write a function to find the maximum numeric value in a given heterogeneous list.\n    The input list may contain elements of mixed types, including integers, floats, strings, or other objects.\n    The function should:\n    1. Filter the list to include only numeric values (integers and floats).\n    2. Compute and return the maximum value from the filtered numeric elements.\n    \n    Constraints:\n    - Only integers and floats are considered for the maximum value calculation.\n    - If the list contains no numeric values, the function will raise a ValueError.\n\n    Example:\n    assert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\n    \"\"\"\n```", "original_clusters": {"requirement": "def max_val(listval: list) -> int:\n\"\"\"\nWrite a function to find the maximum value in a given heterogeneous list.\nassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\"\"\"", "entry_point": "max_val", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_val(listval: List) -> int:\n    return max(filter(lambda x: isinstance(x, (int, float)), listval))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((item for item in listval if isinstance(item, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((item for item in listval if isinstance(item, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((item for item in listval if isinstance(item, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((item for item in listval if isinstance(item, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((item for item in listval if isinstance(item, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((item for item in listval if isinstance(item, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max(filter(lambda x: isinstance(x, (int, float)), listval))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max(filter(lambda x: isinstance(x, (int, float)), listval))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((item for item in listval if isinstance(item, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((item for item in listval if isinstance(item, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max(filter(lambda x: isinstance(x, (int, float)), listval))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max(filter(lambda x: isinstance(x, (int, float)), listval))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((x for x in listval if isinstance(x, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((item for item in listval if isinstance(item, (int, float))))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max(filter(lambda x: isinstance(x, (int, float)), listval))"], "outputs": "[[5], [5], ['ValueError'], [1], ['ValueError'], [-1], [50], [999999999], [5.0], [5]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_val(listval: List) -> int:\n    return max(filter(lambda x: isinstance(x, int), listval))", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max([item for item in listval if isinstance(item, int)])", "from typing import List\n\ndef max_val(listval: List) -> int:\n    return max((item for item in listval if isinstance(item, int)))"], "outputs": "[[5], [5], ['ValueError'], [1], ['ValueError'], [-1], [50], [999999999], ['ValueError'], [5]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6098403047164005, "llm_generated_inputs": "[[[3, 2, 4, 5]], [['Python', 3, 2, 4, 5, 'version']], [[]], [[1]], [['Python', 'version']], [[-10, -5, -1]], [['a', 50, -100, 0]], [[999999999, 888888888, 777777777]], [[3.5, 2.5, 4.5, 5.0]], [[[1, 2], 5, {'key': 'value'}]]]", "input_output_examples": "[[[['Python', 3, 2, 4, 5, 'version']]], [[5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef max_val(listval: list) -> int:\n    \"\"\"\n    Write a function to find the maximum numeric value in a given heterogeneous list.\n    The input list may contain elements of mixed types, including integers, floats, strings, or other objects.\n    The function should:\n    1. Filter the list to include only numeric values (integers and floats).\n    2. Compute and return the maximum value from the filtered numeric elements.\n    \n    Constraints:\n    - Only integers and floats are considered for the maximum value calculation.\n    - If the list contains no numeric values, the function will raise a ValueError.\n\n    Example:\n    assert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\n    \"\"\"\n```", "entry_point": "max_val", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_vals = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_vals:\n        raise ValueError('No numeric values in the list')\n    return max(numeric_vals)", "from typing import List, Union\n\ndef max_val(listval: List[Union[int, float, str, object]]) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [val for val in listval if isinstance(val, (int, float))]\n    if not numeric_values:\n        raise ValueError('No numeric values found in the list')\n    return max(numeric_values)", "from typing import List, Union\n\ndef max_val(listval: List[Union[int, float, str, object]]) -> int:\n    numeric_values = [item for item in listval if isinstance(item, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List, Union\n\ndef max_val(listval: List[Union[int, float, str, object]]) -> int:\n    numeric_values = [val for val in listval if isinstance(val, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List, Union\n\ndef max_val(listval: List[Union[int, float, str, object]]) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [item for item in listval if isinstance(item, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List, Union\n\ndef max_val(listval: List[Union[int, float, str, object]]) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [value for value in listval if isinstance(value, (int, float))]\n    if not numeric_values:\n        raise ValueError('No numeric values found in the list.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [item for item in listval if isinstance(item, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('No numeric values in the list.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('No numeric values found in the input list')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('The list contains no numeric values.')\n    return max(numeric_values)", "from typing import List\n\ndef max_val(listval: List) -> int:\n    numeric_values = [x for x in listval if isinstance(x, (int, float))]\n    if not numeric_values:\n        raise ValueError('No numeric values found in the list.')\n    return max(numeric_values)"], "outputs": "[[5], [5], ['ValueError'], [1], ['ValueError'], [-1], [50], [999999999], [5.0], [5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 2, 4, 5]], [['Python', 3, 2, 4, 5, 'version']], [[]], [[1]], [['Python', 'version']], [[-10, -5, -1]], [['a', 50, -100, 0]], [[999999999, 888888888, 777777777]], [[3.5, 2.5, 4.5, 5.0]], [[[1, 2], 5, {'key': 'value'}]]]", "input_output_examples": "[[[['Python', 3, 2, 4, 5, 'version']]], [[5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.30000000000000004, "original_avg_pass_rate": 0.9936936936936938, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.990990990990991, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/296", "original_requirement": "from typing import List\n\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to count inversions in an array.\nassert get_Inv_Count([1,20,6,4,5]) == 5\n\"\"\"", "entry_point": "get_Inv_Count", "cluster_list": [{"programs_str": ["from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(left: List[int], right: List[int]) -> (List[int], int):\n        merged = []\n        i = j = 0\n        inversions = 0\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inversions += len(left) - i\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return (merged, inversions)\n\n    def merge_sort_and_count(arr: List[int]) -> (List[int], int):\n        if len(arr) <= 1:\n            return (arr, 0)\n        mid = len(arr) // 2\n        left, left_inv = merge_sort_and_count(arr[:mid])\n        right, right_inv = merge_sort_and_count(arr[mid:])\n        merged, merge_inv = merge_and_count(left, right)\n        return (merged, left_inv + right_inv + merge_inv)\n    _, total_inversions = merge_sort_and_count(arr)\n    return total_inversions", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp, left, mid, right):\n        inv_count = 0\n        i = left\n        j = mid\n        k = left\n        while i <= mid - 1 and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                inv_count += mid - i\n                j += 1\n            k += 1\n        while i <= mid - 1:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp, left, mid)\n            inv_count += merge_sort_and_count(arr, temp, mid + 1, right)\n            inv_count += merge_and_count(arr, temp, left, mid + 1, right)\n        return inv_count\n    temp = arr.copy()\n    return merge_sort_and_count(arr, temp, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        if left >= right:\n            return 0\n        mid = (left + right) // 2\n        inv_count = merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    return merge_sort_and_count(arr, [0] * len(arr), 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        if left >= right:\n            return 0\n        mid = (left + right) // 2\n        inv_count = merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i, j, k = (left, mid + 1, left)\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_sort_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort(arr, temp_arr, left, mid)\n            inv_count += merge_sort(arr, temp_arr, mid + 1, right)\n            inv_count += merge(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        if left < right:\n            mid = (left + right) // 2\n            inv_count = merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n            return inv_count\n        return 0\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n    return merge_sort_and_count(arr, [0] * len(arr), 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp, left, mid)\n            inv_count += merge_sort_and_count(arr, temp, mid + 1, right)\n            inv_count += merge_and_count(arr, temp, left, mid, right)\n        return inv_count\n    n = len(arr)\n    temp = [0] * n\n    return merge_sort_and_count(arr, temp, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        if left >= right:\n            return 0\n        mid = (left + right) // 2\n        inv_count = merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i, j, k = (left, mid + 1, left)\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        if left >= right:\n            return 0\n        mid = (left + right) // 2\n        inv_count = merge_sort_and_count(arr, temp_arr, left, mid)\n        inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n        inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n    n = len(arr)\n    temp_arr = [0] * n\n    return merge_sort_and_count(arr, temp_arr, 0, n - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_count_inversions(left: List[int], right: List[int]) -> (List[int], int):\n        merged, inversions = ([], 0)\n        i, j = (0, 0)\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                inversions += len(left) - i\n                j += 1\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n        return (merged, inversions)\n\n    def sort_and_count(arr: List[int]) -> (List[int], int):\n        if len(arr) <= 1:\n            return (arr, 0)\n        mid = len(arr) // 2\n        left, left_inversions = sort_and_count(arr[:mid])\n        right, right_inversions = sort_and_count(arr[mid:])\n        merged, merge_inversions = merge_count_inversions(left, right)\n        return (merged, left_inversions + right_inversions + merge_inversions)\n    _, count = sort_and_count(arr)\n    return count", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = [0] * len(arr)\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)", "from typing import List\n\ndef get_Inv_Count(arr: List[int]) -> int:\n\n    def merge_and_count(arr, temp_arr, left, mid, right):\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                inv_count += mid - i + 1\n                j += 1\n            k += 1\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n        return inv_count\n\n    def merge_sort_and_count(arr, temp_arr, left, right):\n        inv_count = 0\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp_arr, left, mid)\n            inv_count += merge_sort_and_count(arr, temp_arr, mid + 1, right)\n            inv_count += merge_and_count(arr, temp_arr, left, mid, right)\n        return inv_count\n    temp_arr = arr[:]\n    return merge_sort_and_count(arr, temp_arr, 0, len(arr) - 1)"], "outputs": "[[5], [0], [10], [0], [0], [0], [6], [6], [1], [6], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 20, 6, 4, 5]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[]], [[1]], [[1, 1, 1, 1]], [[10, 5, 0, -5]], [[4, 3, 2, 1, 5]], [[1, 3, 2]], [[1000, 100, 10, 1]], [[1, 7, 3, 9]]]", "input_output_examples": "[[[[1, 20, 6, 4, 5]]], [[5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/297", "original_requirement": "from typing import List\nfrom typing import Union\n\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Union\n\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n\"\"\"\nWrite a function to flatten a given nested list structure.\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\"\"\"", "entry_point": "flatten_list", "cluster_list": [{"programs_str": ["from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for element in list1:\n        if isinstance(element, list):\n            result.extend(flatten_list(element))\n        else:\n            result.append(element)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened_list = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened_list.extend(flatten_list(element))\n        else:\n            flattened_list.append(element)\n    return flattened_list", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n\n    def flatten(sublist: Union[int, List]) -> List[int]:\n        if isinstance(sublist, int):\n            return [sublist]\n        flattened = []\n        for item in sublist:\n            flattened.extend(flatten(item))\n        return flattened\n    return flatten(list1)", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flat_list = []\n    for item in list1:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for element in list1:\n        if isinstance(element, list):\n            flattened.extend(flatten_list(element))\n        else:\n            flattened.append(element)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    result = []\n    for item in list1:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened", "from typing import List, Union\n\ndef flatten_list(list1: List[Union[int, List]]) -> List[int]:\n    flattened = []\n    for item in list1:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"], "outputs": "[[[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[]], [[42]], [[1, 2, 3, 4, 5, 6]], [[]], [[1, 2, 3, 4]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]], [[1, [2, 3], [4, [5, 6]], [[7, 8], 9], 10]], [[]], [[42]], [[1, [2], [3, [4, [5, [6]]]]]], [[[], [], []]], [[1, [2, [], 3], 4]], [[1, [[[[2]]]], [[[3]]], [4, [5, [6]]]]], [[[1, 2], [3, 4], [5, 6, 7], [8], [9, 10]]], [[[[1]], [[[[[[2]]]]]], [3]]]]", "input_output_examples": "[[[[0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]]], [[[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.9983333333333334, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/299", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n\"\"\"\nWrite a function to calculate the maximum aggregate from the list of tuples.\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\"\"\"", "entry_point": "max_aggregate", "cluster_list": [{"programs_str": ["from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name, max_score = max(aggregates.items(), key=lambda x: x[1])\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    agg_scores = defaultdict(int)\n    for name, score in stdata:\n        agg_scores[name] += score\n    max_name = max(agg_scores, key=agg_scores.get)\n    return (max_name, agg_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_person = max(aggregates.items(), key=lambda x: x[1])\n    return max_person", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, value in stdata:\n        aggregates[name] += value\n    max_name = max(aggregates, key=lambda x: aggregates[x])\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    return max(aggregates.items(), key=lambda x: x[1])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = defaultdict(int)\n    for name, score in stdata:\n        aggregate_scores[name] += score\n    max_name, max_score = max(aggregate_scores.items(), key=lambda x: x[1])\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_dict = defaultdict(int)\n    for name, score in stdata:\n        aggregate_dict[name] += score\n    max_name, max_score = max(aggregate_dict.items(), key=lambda x: x[1])\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_aggregate_name = max(aggregates, key=aggregates.get)\n    return (max_aggregate_name, aggregates[max_aggregate_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    return max(aggregates.items(), key=lambda item: item[1])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    return max(aggregates.items(), key=lambda x: x[1])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate = defaultdict(int)\n    for name, score in stdata:\n        aggregate[name] += score\n    max_name, max_score = max(aggregate.items(), key=lambda x: x[1])\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    return max(aggregates.items(), key=lambda x: x[1])", "from typing import List, Tuple\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregate_scores = {}\n    for name, score in stdata:\n        if name in aggregate_scores:\n            aggregate_scores[name] += score\n        else:\n            aggregate_scores[name] = score\n    max_name = max(aggregate_scores, key=aggregate_scores.get)\n    return (max_name, aggregate_scores[max_name])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name, max_score = max(aggregates.items(), key=lambda x: x[1])\n    return (max_name, max_score)", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    return max(aggregates.items(), key=lambda x: x[1])", "from typing import List, Tuple\nfrom collections import defaultdict\n\ndef max_aggregate(stdata: List[Tuple[str, int]]) -> Tuple[str, int]:\n    aggregates = defaultdict(int)\n    for name, score in stdata:\n        aggregates[name] += score\n    max_name = max(aggregates, key=aggregates.get)\n    return (max_name, aggregates[max_name])"], "outputs": "[[('Juan Whelan', 212)], [('Alice', 200)], [('Alice', 1999999)], [('Alice', -5)], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]], [[('Alice', 50), ('Alice', 50), ('Alice', 50), ('Alice', 50)]], [[('Bob', 999999), ('Alice', 1000000), ('Bob', 111111), ('Alice', 999999)]], [[('Charlie', -20), ('Charlie', -30), ('Charlie', -10), ('Alice', -5)]], [[]]]", "input_output_examples": "[[[[('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]]], [[('Juan Whelan', 212)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/300", "original_requirement": "def count_binary_seq(n: int) -> int:\n\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"", "repaired_requirement": "def count_binary_seq(n: int) -> int:\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits.\n    The function calculates this count by summing the square of combinations for choosing k bits out of n, for all k from 0 to n.\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n    \"\"\"", "original_clusters": {"requirement": "def count_binary_seq(n: int) -> int:\n\"\"\"\nWrite a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n\"\"\"", "entry_point": "count_binary_seq", "cluster_list": [{"programs_str": ["import math\nimport scipy.special\n\ndef count_binary_seq(n: int) -> int:\n    return int(scipy.special.comb(2 * n, n) / (n + 1))", "import math\nimport scipy.special\n\ndef count_binary_seq(n: int) -> int:\n    return int(scipy.special.comb(2 * n, n) / (n + 1))", "from math import isclose, comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n) // (n + 1)", "import math\nfrom math import factorial\n\ndef count_binary_seq(n: int) -> int:\n\n    def binomial_coeff(n, k):\n        if k > n - k:\n            k = n - k\n        c = 1\n        for i in range(k):\n            c = c * (n - i) // (i + 1)\n        return c\n    return binomial_coeff(2 * n, n) // (n + 1)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n) // (n + 1)", "import math\n\ndef count_binary_seq(n: int) -> int:\n\n    def binomial_coefficient(n, k):\n        if k < 0 or k > n:\n            return 0\n        k = min(k, n - k)\n        c = 1\n        for i in range(k):\n            c = c * (n - i) // (i + 1)\n        return c\n    return binomial_coefficient(2 * n, n) // (n + 1)", "import math\nfrom math import factorial\n\ndef count_binary_seq(n: int) -> int:\n\n    def binomial_coeff(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    return int(binomial_coeff(2 * n, n) / (n + 1))", "import math\nimport numpy as np\nfrom scipy.special import comb\n\ndef count_binary_seq(n: int) -> int:\n\n    def catalan_number(k):\n        return comb(2 * k, k) // (k + 1)\n    return int(catalan_number(n))", "import math\n\ndef count_binary_seq(n: int) -> int:\n\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        result = 1\n        for i in range(2, num + 1):\n            result *= i\n        return result\n\n    def binomial_coeff(n, k):\n        return factorial(n) // (factorial(k) * factorial(n - k))\n    return int(binomial_coeff(2 * n, n) // (n + 1))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n) // (n + 1)", "from math import isclose, comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n) // (n + 1)", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n) // (n + 1)", "import math\nimport scipy.special\n\ndef count_binary_seq(n: int) -> int:\n    return int(scipy.special.comb(2 * n, n) / (n + 1))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return comb(2 * n, n) // (n + 1)"], "outputs": "[[1], [2], [5], [1], [16796], [896519947090240742767417305327823495033800739343613034496]]", "probability": 0.7, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[1], [1], [2.0]]]"}, {"programs_str": ["from math import comb\n\ndef count_binary_seq(n: int) -> int:\n    total_count = 0\n    for k in range(n + 1):\n        total_count += comb(n, k) ** 2\n    return total_count", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "from math import isclose, factorial\n\ndef count_binary_seq(n: int) -> int:\n    return factorial(2 * n) // (factorial(n) * factorial(n))", "import math\n\ndef count_binary_seq(n: int) -> int:\n\n    def central_binomial_coeff(n: int) -> int:\n        result = 1\n        for i in range(n):\n            result = result * (2 * n - i) // (i + 1)\n        return result\n    return central_binomial_coeff(n)", "from math import isclose, factorial\n\ndef count_binary_seq(n: int) -> int:\n    return factorial(2 * n) // (factorial(n) * factorial(n))", "import math\n\ndef count_binary_seq(n: int) -> int:\n\n    def binomial_coeff(n, k):\n        if k > n:\n            return 0\n        if k == 0 or k == n:\n            return 1\n        k = min(k, n - k)\n        c = 1\n        for i in range(k):\n            c = c * (n - i) // (i + 1)\n        return c\n    sum_val = 0\n    for i in range(n + 1):\n        sum_val += binomial_coeff(n, i) ** 2\n    return sum_val"], "outputs": "[[2], [6], [20], [1], [184756], [90548514656103281165404177077484163874504589675413336841320]]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8812908992306927, "llm_generated_inputs": "[[1], [2], [3], [0], [10], [100]]", "input_output_examples": "[[[1]], [[2.0]]]", "weighted_test_consistency": 0.3, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def count_binary_seq(n: int) -> int:\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits.\n    The function calculates this count by summing the square of combinations for choosing k bits out of n, for all k from 0 to n.\n    assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\n    \"\"\"", "entry_point": "count_binary_seq", "cluster_list": [{"programs_str": ["import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "from math import comb, isclose\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "from math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "from math import comb, isclose\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nimport itertools\n\ndef count_binary_seq(n: int) -> int:\n    return sum((math.comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum([comb(n, k) ** 2 for k in range(n + 1)])", "from math import comb, isclose\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "from math import comb, isclose\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(0, n + 1)))", "import math\nfrom math import comb\n\ndef count_binary_seq(n: int) -> int:\n    return sum((comb(n, k) ** 2 for k in range(n + 1)))"], "outputs": "[[2], [6], [20], [1], [184756], [90548514656103281165404177077484163874504589675413336841320]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [0], [10], [100]]", "input_output_examples": "[[[1]], [[2.0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.8965517241379309, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.8965517241379309, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/301", "original_requirement": "def dict_depth(d: dict) -> int:\n\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"", "repaired_requirement": "```python\ndef dict_depth(d: dict) -> int:\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n\n    Depth is defined as the maximum number of levels of nested dictionaries, including the outermost dictionary itself.\n    - The outermost dictionary always contributes a depth of 1, even if it is empty.\n    - If a value of a key in the dictionary is another dictionary, depth increases by 1 recursively for each nested level.\n    - Non-dictionary values do not contribute to depth but do not prevent further exploration of nested dictionaries.\n    - If the input is not a dictionary (e.g., a list, integer, or other data type), the function should return 0 without raising an error.\n    - The function does not handle lists or other non-dictionary structures containing dictionaries; such inputs are treated as invalid and return 0.\n    - The function uses the `max` function with a `default=0` parameter to handle cases where no nested dictionaries are found, ensuring that the depth of an empty dictionary is correctly returned as 1.\n\n    Example:\n    assert dict_depth({'a': 1, 'b': {'c': {'d': {}}}}) == 4\n    \"\"\"\n    pass\n```", "original_clusters": {"requirement": "def dict_depth(d: dict) -> int:\n\"\"\"\nWrite a function to find the depth of a dictionary.\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\"\"\"", "entry_point": "dict_depth", "cluster_list": [{"programs_str": ["def dict_depth(d: dict) -> int:\n    if isinstance(d, dict):\n        if not d:\n            return 1\n        return 1 + max((dict_depth(v) for v in d.values()))\n    return 0", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) if isinstance(v, dict) else 0 for v in d.values()))"], "outputs": "[[1], [1], [2], [3], [4], [6], [5], [2], [3], [5]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    else:\n        return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    else:\n        return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)))", "from typing import Dict\n\ndef dict_depth(d: Dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)))"], "outputs": "[[1], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], [6], ['ValueError'], [2], [3], [5]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dict_depth(d: dict) -> int:\n    if isinstance(d, dict) and d:\n        return 1 + max((dict_depth(v) for v in d.values()))\n    return 1", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values()))", "from typing import Any, Dict\n\ndef dict_depth(d: Dict[Any, Any]) -> int:\n    if isinstance(d, dict) and d:\n        return 1 + max((dict_depth(v) for v in d.values()))\n    return 1", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 1\n    return 1 + max((dict_depth(v) for v in d.values()))", "from typing import Dict, Any\n\ndef dict_depth(d: Dict[Any, Any]) -> int:\n    if isinstance(d, dict) and d:\n        return 1 + max((dict_depth(value) for value in d.values()))\n    return 1", "def dict_depth(d: dict) -> int:\n    if isinstance(d, dict) and d:\n        return 1 + max((dict_depth(v) for v in d.values()))\n    return 1"], "outputs": "[[1], [2], [3], [4], [5], [6], [6], [2], [3], [5]]", "probability": 0.35, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values()))", "def dict_depth(d: dict) -> int:\n    if isinstance(d, dict) and d:\n        return 1 + max((dict_depth(value) for value in d.values()))\n    else:\n        return 0"], "outputs": "[[0], [1], [2], [3], [4], [5], [5], [1], [2], [4]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[{'a': 1, 'b': {'c': {'d': {}}}}], [3], [4]]]"}, {"programs_str": ["def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict) or not d:\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict))) if d else 1"], "outputs": "[[0], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], [5], ['ValueError'], [1], [2], [4]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[{'a': 1, 'b': {'c': {'d': {}}}}], [3], [4]]]"}], "entropy": 0.8352342505512773, "llm_generated_inputs": "[[{}], [{'a': 1}], [{'a': {'b': 2}}], [{'a': {'b': {'c': 3}}}], [{'a': {'b': {'c': {'d': 4}}}}], [{'x': 100, 'y': {'a': {'b': {'c': {'d': {}}}}}}], [{'key1': {'key2': {'key3': {'key4': {'key5': 'value'}}}}}], [{'empty_dict': {}}], [{'nested_empty': {'a': {}}}], [{'multiple_nested': {'a': {'b': {'c': {}}, 'd': {}}}}]]", "input_output_examples": "[[[{'a': 1, 'b': {'c': {'d': {}}}}]], [[4]]]", "weighted_test_consistency": 0.85, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef dict_depth(d: dict) -> int:\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n\n    Depth is defined as the maximum number of levels of nested dictionaries, including the outermost dictionary itself.\n    - The outermost dictionary always contributes a depth of 1, even if it is empty.\n    - If a value of a key in the dictionary is another dictionary, depth increases by 1 recursively for each nested level.\n    - Non-dictionary values do not contribute to depth but do not prevent further exploration of nested dictionaries.\n    - If the input is not a dictionary (e.g., a list, integer, or other data type), the function should return 0 without raising an error.\n    - The function does not handle lists or other non-dictionary structures containing dictionaries; such inputs are treated as invalid and return 0.\n    - The function uses the `max` function with a `default=0` parameter to handle cases where no nested dictionaries are found, ensuring that the depth of an empty dictionary is correctly returned as 1.\n\n    Example:\n    assert dict_depth({'a': 1, 'b': {'c': {'d': {}}}}) == 4\n    \"\"\"\n    pass\n```", "entry_point": "dict_depth", "cluster_list": [{"programs_str": ["def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values() if isinstance(value, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values() if isinstance(value, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values() if isinstance(value, dict)), default=0)", "from typing import Any\n\ndef dict_depth(d: Any) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values() if isinstance(value, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values() if isinstance(value, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values() if isinstance(value, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values() if isinstance(value, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(value) for value in d.values() if isinstance(value, dict)), default=0)", "def dict_depth(d: dict) -> int:\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max((dict_depth(v) for v in d.values() if isinstance(v, dict)), default=0)"], "outputs": "[[1], [1], [2], [3], [4], [6], [5], [2], [3], [5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{}], [{'a': 1}], [{'a': {'b': 2}}], [{'a': {'b': {'c': 3}}}], [{'a': {'b': {'c': {'d': 4}}}}], [{'x': 100, 'y': {'a': {'b': {'c': {'d': {}}}}}}], [{'key1': {'key2': {'key3': {'key4': {'key5': 'value'}}}}}], [{'empty_dict': {}}], [{'nested_empty': {'a': {}}}], [{'multiple_nested': {'a': {'b': {'c': {}}, 'd': {}}}}]]", "input_output_examples": "[[[{'a': 1, 'b': {'c': {'d': {}}}}]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.4, "original_avg_pass_rate": 0.7292035398230089, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/305", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    \"\"\"\n    Write a function that takes a list of strings, where each string may contain multiple words separated by spaces, \n    and returns a tuple containing up to two words that start with the letter 'p' (case-insensitive). \n\n    Requirements:\n    1. The input is a list of strings, where each string may contain multiple words.\n    2. The function should split each string into individual words and check if they start with 'p' or 'P'.\n    3. The function should return a tuple containing the first two words (in the order they appear) that start with 'p' or 'P'.\n    4. If fewer than two such words are found, the function should return a tuple containing all the found words (which may have fewer than two elements).\n    5. If no words starting with 'p' or 'P' are found, the function should return an empty tuple.\n    6. The function should handle an empty input list or strings with no valid 'p'-starting words gracefully, returning an empty tuple in such cases.\n\n    Examples:\n    assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\n    assert start_withp([\"pencil pen pool apple Python\"]) == ('pencil', 'pen')\n    assert start_withp([\"parking\"]) == ('parking',)\n    assert start_withp([]) == ()\n    assert start_withp([\"Java JavaScript\"]) == ()\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n\"\"\"\nWrite a function to return two words from a list of words starting with letter 'p'.\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\"\"\"", "entry_point": "start_withp", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    for word_group in words:\n        word_list = word_group.split()\n        p_words = [word for word in word_list if word.lower().startswith('p')]\n        if len(p_words) >= 2:\n            return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    for word_group in words:\n        word_list = word_group.split()\n        p_words = [word for word in word_list if word.lower().startswith('p')]\n        if len(p_words) >= 2:\n            return (p_words[0], p_words[1])\n    return ('', '')", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    for word_group in words:\n        word_list = word_group.split()\n        p_words = [word for word in word_list if word.lower().startswith('p')]\n        if len(p_words) >= 2:\n            return (p_words[0], p_words[1])\n    return ('', '')"], "outputs": "[[('', '')], [('', '')], [('', '')], [('', '')], [('', '')], [('', '')], [('', '')], [('', '')]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.startswith('P'):\n                result.append(word)\n                if len(result) == 2:\n                    return (result[0], result[1])\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.startswith('P'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"], "outputs": "[[('Python', 'Parking')], [('Python',)], [('Python', 'PHP')], [('Paramount', 'Python')], [()], [('Pen',)], [()], [()]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n            if len(result) == 2:\n                return (result[0], result[1])\n    return ()"], "outputs": "[[('Python', 'Parking')], [('pencil', 'pen')], [('Python', 'PHP')], [('Paramount', 'Python')], [()], [()], [()], [()]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.startswith('p') or word.startswith('P'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n            if len(p_words) == 2:\n                return tuple(p_words)\n    return tuple(p_words[:2])", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for group in words:\n        individual_words = group.split()\n        for word in individual_words:\n            if word.lower().startswith('p') and len(p_words) < 2:\n                p_words.append(word)\n    return tuple(p_words)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.startswith('p') or word.startswith('P'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for line in words:\n        for word in line.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for word_group in words:\n        for word in word_group.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    all_words = ' '.join(words).split()\n    p_words = [word for word in all_words if word.lower().startswith('p')]\n    return tuple(p_words[:2])", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)"], "outputs": "[[('Python', 'Parking')], [('pencil', 'pen')], [('Python', 'PHP')], [('Paramount', 'Python')], [('parking',)], [('Pen',)], [()], [()]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    p_words = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                p_words.append(word)\n        if len(p_words) >= 2:\n            return (p_words[0], p_words[1])\n    return ('', '') if len(p_words) < 2 else (p_words[0], p_words[1])"], "outputs": "[[('Python', 'Parking')], [('pencil', 'pen')], [('Python', 'PHP')], [('Paramount', 'Python')], [('', '')], [('', '')], [('', '')], [('', '')]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    result = []\n    for phrase in words:\n        result.extend([word for word in phrase.split() if word.startswith('P')])\n        if len(result) >= 2:\n            return (result[0], result[1])\n    return ()"], "outputs": "[[('Python', 'Parking')], [()], [('Python', 'PHP')], [('Paramount', 'Python')], [()], [()], [()], [()]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, str]:\n    all_words = [word for sentence in words for word in sentence.split()]\n    p_words = [word for word in all_words if word.lower().startswith('p')]\n    return (p_words[0], p_words[1])"], "outputs": "[[('Python', 'Parking')], [('pencil', 'pen')], [('Python', 'PHP')], [('Paramount', 'Python')], ['IndexError'], ['IndexError'], ['IndexError'], ['IndexError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7414439525170823, "llm_generated_inputs": "[[['Python', 'Parking', 'PHP', 'Java', 'JavaScript']], [['pencil', 'pen', 'pool', 'apple', 'Python']], [['Python', 'PHP', 'Pascal']], [['Paramount', 'Java', 'Python']], [['parking']], [['Pen']], [['']], [[]]]", "input_output_examples": "[[[['Python PHP', 'Java JavaScript', 'c c++']]], [[('Python', 'PHP')]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    \"\"\"\n    Write a function that takes a list of strings, where each string may contain multiple words separated by spaces, \n    and returns a tuple containing up to two words that start with the letter 'p' (case-insensitive). \n\n    Requirements:\n    1. The input is a list of strings, where each string may contain multiple words.\n    2. The function should split each string into individual words and check if they start with 'p' or 'P'.\n    3. The function should return a tuple containing the first two words (in the order they appear) that start with 'p' or 'P'.\n    4. If fewer than two such words are found, the function should return a tuple containing all the found words (which may have fewer than two elements).\n    5. If no words starting with 'p' or 'P' are found, the function should return an empty tuple.\n    6. The function should handle an empty input list or strings with no valid 'p'-starting words gracefully, returning an empty tuple in such cases.\n\n    Examples:\n    assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\n    assert start_withp([\"pencil pen pool apple Python\"]) == ('pencil', 'pen')\n    assert start_withp([\"parking\"]) == ('parking',)\n    assert start_withp([]) == ()\n    assert start_withp([\"Java JavaScript\"]) == ()\n    \"\"\"\n```", "entry_point": "start_withp", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n            if len(result) == 2:\n                return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for phrase in words:\n        split_words = phrase.split()\n        for word in split_words:\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for line in words:\n        for word in line.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for sentence in words:\n        for word in sentence.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)", "from typing import List, Tuple\n\ndef start_withp(words: List[str]) -> Tuple[str, ...]:\n    result = []\n    for phrase in words:\n        for word in phrase.split():\n            if word.lower().startswith('p'):\n                result.append(word)\n                if len(result) == 2:\n                    return tuple(result)\n    return tuple(result)"], "outputs": "[[('Python', 'Parking')], [('pencil', 'pen')], [('Python', 'PHP')], [('Paramount', 'Python')], [('parking',)], [('Pen',)], [()], [()]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['Python', 'Parking', 'PHP', 'Java', 'JavaScript']], [['pencil', 'pen', 'pool', 'apple', 'Python']], [['Python', 'PHP', 'Pascal']], [['Paramount', 'Java', 'Python']], [['parking']], [['Pen']], [['']], [[]]]", "input_output_examples": "[[[['Python PHP', 'Java JavaScript', 'c c++']]], [[('Python', 'PHP')]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.26999999999999996, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.18181818181818177, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/306", "original_requirement": "from typing import List\n\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n    Write a function to find the maximum sum of an increasing subsequence from the prefix of the array up to the ith index (`index`), \n    and then include the value of the kth element (`a[k]`) in the sum, where `k > index`. \n\n    The subsequence must satisfy the following conditions:\n    1. The subsequence is formed using elements from the prefix of the array up to `index` (inclusive).\n    2. The subsequence must be strictly increasing during its construction, meaning each element added to the subsequence must be greater than the previous element.\n    3. All elements in the subsequence must be strictly less than the value of the kth element (`a[k]`).\n    4. The kth element (`a[k]`) is added to the maximum sum of the valid subsequence after its construction.\n\n    Edge case handling:\n    - If the array `a` is empty or if `index >= n` or `k >= n` or `k <= index`, the function should raise an `IndexError`.\n    - If no valid subsequence can be formed (i.e., no elements in the prefix satisfy the conditions), the function should return the value of `a[k]` as the result.\n\n    The function returns the maximum sum of the valid subsequence plus the value of the kth element.\n\n    Example:\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\"\"\"\nWrite a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\"\"\"", "entry_point": "max_sum_increasing_subseq", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\n    def find_max_sum_subsequence(sequence):\n        dp = [0] * len(sequence)\n        for i in range(len(sequence)):\n            dp[i] = sequence[i]\n            for j in range(i):\n                if sequence[j] < sequence[i]:\n                    dp[i] = max(dp[i], dp[j] + sequence[i])\n        return max(dp)\n    prefix_subarray = a[:index + 1] + [a[k]]\n    return find_max_sum_subsequence(prefix_subarray)"], "outputs": "[[106], [19], [145], [6], [5], ['IndexError'], [5], [3], [10], [100]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [106], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if n == 0 or index >= n or k >= n or (k <= index):\n        return 0\n    dp = [0] * n\n    max_sum = 0\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n        max_sum = max(max_sum, dp[i])\n    if a[k] > a[index]:\n        return max_sum + a[k]\n    else:\n        return 0", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index or index >= n or k >= n:\n        return 0\n    dp = [0] * n\n    max_sum = 0\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n        max_sum = max(max_sum, dp[i])\n    if a[index] < a[k]:\n        max_sum += a[k]\n    else:\n        max_sum = 0\n    return max_sum"], "outputs": "[[0], [19], [145], [6], [0], [0], [0], [0], [0], [104]]", "probability": 0.10526315789473684, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [0], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\n    def dp(i: int, prev: int) -> int:\n        if i >= n:\n            return 0\n        if i == k:\n            return dp(i + 1, a[i]) + (a[i] if prev < a[i] else 0)\n        if i <= index:\n            include = dp(i + 1, a[i]) + (a[i] if prev < a[i] else 0)\n            exclude = dp(i + 1, prev)\n            return max(include, exclude)\n        return dp(i + 1, prev)\n    return dp(0, float('-inf'))"], "outputs": "[[205], [19], [145], [6], [5], [0], [5], [3], [10], [104]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [205], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if k <= index or k >= n or index >= n:\n        return 0\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_prefix_sum = max(dp[:index + 1])\n    return max_prefix_sum + a[k]"], "outputs": "[[111], [19], [145], [6], [6], [0], [0], [0], [12], [104]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [111], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = [0] * n\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_prefix_sum = dp[index]\n    if a[k] > a[index]:\n        return max_prefix_sum + a[k]\n    return max_prefix_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\n    def find_max_sum(current: int, end: int, must_include: int) -> int:\n        dp = [0] * n\n        for i in range(current + 1):\n            dp[i] = a[i]\n            for j in range(i):\n                if a[j] < a[i]:\n                    dp[i] = max(dp[i], dp[j] + a[i])\n        result = dp[current]\n        if a[must_include] > a[current]:\n            result += a[must_include]\n        return result\n    return find_max_sum(index, index, k)"], "outputs": "[[106], [19], [145], [6], [3], ['IndexError'], [5], [3], [3], [5]]", "probability": 0.10526315789473684, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [106], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i])\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\n    def find_max_sum(ending_index: int, target_index: int) -> int:\n        dp = [0] * len(a)\n        dp[0] = a[0]\n        for i in range(1, ending_index + 1):\n            dp[i] = a[i]\n            for j in range(0, i):\n                if a[j] < a[i]:\n                    dp[i] = max(dp[i], dp[j] + a[i])\n        max_sum = 0\n        for i in range(ending_index + 1):\n            if a[i] < a[target_index]:\n                max_sum = max(max_sum, dp[i])\n        return max_sum + a[target_index]\n    return find_max_sum(index, k)", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\n    def get_max_sum(prefix_end: int, target_index: int) -> int:\n        dp = [0] * (prefix_end + 1)\n        for i in range(prefix_end + 1):\n            dp[i] = a[i]\n            for j in range(i):\n                if a[j] < a[i] and dp[j] + a[i] > dp[i]:\n                    dp[i] = dp[j] + a[i]\n        valid_sums = [dp[i] for i in range(prefix_end + 1) if a[i] < a[target_index]]\n        return max(valid_sums, default=0) + a[target_index]\n    return get_max_sum(index, k)", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i])\n    return max_sum + a[k]"], "outputs": "[[11], [19], [145], [6], [1], ['IndexError'], [5], [3], [2], [5]]", "probability": 0.21052631578947367, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = [0] * n\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_sum = 0\n    if k > index:\n        for i in range(index + 1):\n            if a[i] < a[k]:\n                max_sum = max(max_sum, dp[i] + a[k])\n    return max_sum"], "outputs": "[[11], [19], [145], [6], [0], ['IndexError'], [0], [0], [0], [5]]", "probability": 0.05263157894736842, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            max_sum = max(max_sum, dp[i] + a[k])\n    return max_sum"], "outputs": "[[11], [19], [145], [6], [0], ['IndexError'], [0], [3], [0], [5]]", "probability": 0.05263157894736842, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\n    def helper(seq):\n        dp = [0] * len(seq)\n        for i in range(len(seq)):\n            dp[i] = seq[i]\n            for j in range(i):\n                if seq[j] < seq[i]:\n                    dp[i] = max(dp[i], dp[j] + seq[i])\n        return max(dp)\n    if k <= index or index >= n or k >= n:\n        raise ValueError('Invalid inputs: Ensure k > index and indices are within bounds.')\n    prefix_subseq = a[:index + 1]\n    merged_seq = prefix_subseq + [a[k]]\n    return helper(merged_seq)"], "outputs": "[[106], [19], [145], [6], [5], ['ValueError'], ['ValueError'], ['ValueError'], [10], [100]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [106], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\n    def helper(seq: List[int]) -> int:\n        dp = [0] * len(seq)\n        for i in range(len(seq)):\n            dp[i] = seq[i]\n            for j in range(i):\n                if seq[j] < seq[i]:\n                    dp[i] = max(dp[i], dp[j] + seq[i])\n        return max(dp)\n    if k > index and a[k] > a[index]:\n        prefix = [x for x in a[:index + 1] if x < a[k]] + [a[k]]\n        return helper(prefix)\n    return 0"], "outputs": "[[0], [19], [145], [6], [0], [0], [0], [0], [0], [5]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [0], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\n    def compute_max_sum(sequence, end_index):\n        dp = [0] * len(sequence)\n        for i in range(end_index + 1):\n            dp[i] = sequence[i]\n            for j in range(i):\n                if sequence[j] < sequence[i]:\n                    dp[i] = max(dp[i], dp[j] + sequence[i])\n        return max(dp[:end_index + 1])\n    prefix_sequence = a[:index + 1]\n    if a[k] <= prefix_sequence[-1]:\n        return 0\n    prefix_sequence.append(a[k])\n    prefix_sequence.sort()\n    max_sum = compute_max_sum(prefix_sequence, prefix_sequence.index(a[k]))\n    return max_sum"], "outputs": "[[0], [19], [154], [6], [0], ['IndexError'], [0], [0], [0], [5]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [0], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = [0] * n\n    max_sum = 0\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n        max_sum = max(max_sum, dp[i])\n    if k > index and a[k] > a[index]:\n        max_sum += a[k]\n    return max_sum", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n\n    def find_max_sum_until_index(arr, idx):\n        dp = [0] * (idx + 1)\n        for i in range(idx + 1):\n            dp[i] = arr[i]\n            for j in range(i):\n                if arr[j] < arr[i]:\n                    dp[i] = max(dp[i], dp[j] + arr[i])\n        return max(dp)\n    max_sum_until_index = find_max_sum_until_index(a, index)\n    if a[k] > a[index]:\n        return max_sum_until_index + a[k]\n    else:\n        return max_sum_until_index"], "outputs": "[[106], [19], [145], [6], [5], ['IndexError'], [5], [3], [10], [104]]", "probability": 0.10526315789473684, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [106], [11]]]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    dp = [0] * n\n    for i in range(index + 1):\n        dp[i] = a[i]\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = max(dp[i], dp[j] + a[i])\n    max_prefix_sum = dp[index]\n    if a[index] >= a[k]:\n        return 0\n    return max_prefix_sum + a[k]"], "outputs": "[[0], [19], [145], [6], [0], ['IndexError'], [0], [0], [0], [5]]", "probability": 0.05263157894736842, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [0], [11]]]"}], "entropy": 0.9488292407433715, "llm_generated_inputs": "[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [[3, 4, 5, 6, 7], 5, 2, 4], [[10, 22, 9, 33, 21, 50, 41, 60, 80], 9, 3, 8], [[1, 2, 3, 4, 5], 5, 0, 4], [[5, 4, 3, 2, 1], 5, 2, 4], [[], 0, 0, 0], [[5], 1, 0, 0], [[1, 2, 3], 3, 1, 1], [[10, 3, 7, 2], 4, 1, 3], [[100, 1, 2, 3, 4], 5, 1, 4]]", "input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], [[11]]]", "weighted_test_consistency": 0.3157894736842105, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    \"\"\"\n    Write a function to find the maximum sum of an increasing subsequence from the prefix of the array up to the ith index (`index`), \n    and then include the value of the kth element (`a[k]`) in the sum, where `k > index`. \n\n    The subsequence must satisfy the following conditions:\n    1. The subsequence is formed using elements from the prefix of the array up to `index` (inclusive).\n    2. The subsequence must be strictly increasing during its construction, meaning each element added to the subsequence must be greater than the previous element.\n    3. All elements in the subsequence must be strictly less than the value of the kth element (`a[k]`).\n    4. The kth element (`a[k]`) is added to the maximum sum of the valid subsequence after its construction.\n\n    Edge case handling:\n    - If the array `a` is empty or if `index >= n` or `k >= n` or `k <= index`, the function should raise an `IndexError`.\n    - If no valid subsequence can be formed (i.e., no elements in the prefix satisfy the conditions), the function should return the value of `a[k]` as the result.\n\n    The function returns the maximum sum of the valid subsequence plus the value of the kth element.\n\n    Example:\n    assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11\n    \"\"\"", "entry_point": "max_sum_increasing_subseq", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid indices or empty array')\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            for j in range(i):\n                if a[j] < a[i] and a[j] < a[k]:\n                    current_sum = max(current_sum, max_sum + a[i])\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid input parameters.')\n    max_sum = 0\n    current_max = float('-inf')\n    for i in range(index + 1):\n        if a[i] < a[k] and (current_max == float('-inf') or a[i] > current_max):\n            max_sum += a[i]\n            current_max = a[i]\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid input indices or empty array.')\n    max_sum = 0\n    valid_subsequence = False\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            valid_subsequence = True\n            current_sum = a[i]\n            for j in range(i):\n                if a[j] < a[i]:\n                    current_sum = max(current_sum, max_sum + a[i])\n            max_sum = max(max_sum, current_sum)\n    return a[k] + max_sum if valid_subsequence else a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid input indices or empty array.')\n    max_sum = 0\n    a_k = a[k]\n    for i in range(index + 1):\n        if a[i] < a_k:\n            current_sum = a[i]\n            for j in range(i):\n                if a[j] < a[i]:\n                    current_sum = max(current_sum, max_sum + a[i])\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a_k", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid indices or empty array')\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            for j in range(i + 1, index + 1):\n                if a[j] > a[i] and a[j] < a[k]:\n                    current_sum += a[j]\n                    i = j\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid input parameters')\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = 0\n            prev = float('-inf')\n            for j in range(i + 1):\n                if a[j] > prev and a[j] < a[k]:\n                    current_sum += a[j]\n                    prev = a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid index constraints.')\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            for j in range(i):\n                if a[j] < a[i] and a[j] < a[k]:\n                    current_sum = max(current_sum, max_sum + a[i])\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid index or k value.')\n    max_sum = float('-inf')\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            prev = a[i]\n            for j in range(i + 1, index + 1):\n                if a[j] > prev and a[j] < a[k]:\n                    current_sum += a[j]\n                    prev = a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k] if max_sum != float('-inf') else a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid indices or array is empty.')\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            prev_value = a[i]\n            for j in range(i + 1, index + 1):\n                if a[j] > prev_value and a[j] < a[k]:\n                    current_sum += a[j]\n                    prev_value = a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid index or k value')\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            last_val = a[i]\n            for j in range(i + 1, index + 1):\n                if a[j] > last_val and a[j] < a[k]:\n                    current_sum += a[j]\n                    last_val = a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid indices or empty array.')\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            prev = a[i]\n            for j in range(i + 1, index + 1):\n                if a[j] > prev and a[j] < a[k]:\n                    current_sum += a[j]\n                    prev = a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid input parameters.')\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            prev = a[i]\n            for j in range(i + 1, index + 1):\n                if a[j] > prev and a[j] < a[k]:\n                    current_sum += a[j]\n                    prev = a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid index or k value.')\n    a_k = a[k]\n    max_sum = 0\n    valid_subseq = False\n    for i in range(0, index + 1):\n        if a[i] < a_k:\n            valid_subseq = True\n            current_sum = a[i]\n            last_val = a[i]\n            for j in range(i + 1, index + 1):\n                if a[j] > last_val and a[j] < a_k:\n                    current_sum += a[j]\n                    last_val = a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a_k if valid_subseq else a_k", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid index or input array.')\n    target = a[k]\n    dp = [0] * (index + 1)\n    for i in range(index + 1):\n        if a[i] < target:\n            dp[i] = a[i]\n            for j in range(i):\n                if a[j] < a[i]:\n                    dp[i] = max(dp[i], dp[j] + a[i])\n    max_sum_prefix = max(dp) if dp else 0\n    return max_sum_prefix + target", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid indices or empty array')\n    max_sum = 0\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            current_sum = a[i]\n            prev = a[i]\n            for j in range(i + 1, index + 1):\n                if a[j] > prev and a[j] < a[k]:\n                    current_sum += a[j]\n                    prev = a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid index values or array is empty')\n    max_sum = 0\n    kth_value = a[k]\n    for i in range(index + 1):\n        if a[i] < kth_value:\n            curr_sum = a[i]\n            prev_value = a[i]\n            for j in range(i + 1, index + 1):\n                if a[j] > prev_value and a[j] < kth_value:\n                    curr_sum += a[j]\n                    prev_value = a[j]\n            max_sum = max(max_sum, curr_sum)\n    return max_sum + kth_value"], "outputs": "[[11], [19], [145], [6], [1], ['IndexError'], ['IndexError'], ['IndexError'], [2], [5]]", "probability": 0.8888888888888888, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid index values.')\n    max_sum = 0\n    valid = False\n    for i in range(index + 1):\n        if a[i] < a[k]:\n            valid = True\n            curr_sum = a[i]\n            for j in range(i):\n                if a[j] < a[i] and a[j] < a[k]:\n                    curr_sum += a[j]\n            max_sum = max(max_sum, curr_sum)\n    if not valid:\n        return a[k]\n    return max_sum + a[k]", "from typing import List\n\ndef max_sum_increasing_subseq(a: List[int], n: int, index: int, k: int) -> int:\n    if not a or index >= n or k >= n or (k <= index):\n        raise IndexError('Invalid indices or empty array.')\n    max_sum = 0\n    a_k = a[k]\n    for i in range(index + 1):\n        if a[i] < a_k:\n            current_sum = a[i]\n            for j in range(i):\n                if a[j] < a[i]:\n                    current_sum += a[j]\n            max_sum = max(max_sum, current_sum)\n    return max_sum + a_k"], "outputs": "[[11], [19], [154], [6], [1], ['IndexError'], ['IndexError'], ['IndexError'], [2], [5]]", "probability": 0.1111111111111111, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.5032583347756457, "llm_generated_inputs": "[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6], [[3, 4, 5, 6, 7], 5, 2, 4], [[10, 22, 9, 33, 21, 50, 41, 60, 80], 9, 3, 8], [[1, 2, 3, 4, 5], 5, 0, 4], [[5, 4, 3, 2, 1], 5, 2, 4], [[], 0, 0, 0], [[5], 1, 0, 0], [[1, 2, 3], 3, 1, 1], [[10, 3, 7, 2], 4, 1, 3], [[100, 1, 2, 3, 4], 5, 1, 4]]", "input_output_examples": "[[[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], [[11]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.125, "original_avg_pass_rate": 0.359375, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 0.8, "repaired_avg_pass_rate": 0.9865384615384615, "repaired_nzpassk": true, "repaired_majority_passk": false}}
{"task_id": "Mbpp/308", "original_requirement": "from typing import List\n\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, \n    where each product is obtained by multiplying one factor from each list. \n\n    The results must be returned as a list sorted in descending order. \n    Duplicates in the result must be included if they correspond to distinct combinations \n    of factors from the two lists. For example, if two distinct pairs of numbers produce \n    the same product, both occurrences must be included in the output.\n\n    The function must compute the top `N` largest products, sorted in descending order, \n    after considering all possible products. If `N` exceeds the total number of possible \n    products, the function must return all products (including duplicates from distinct \n    combinations), sorted in descending order. If `N = 0`, the function must return an \n    empty list.\n\n    Efficiency considerations are optional; the function may use optimized approaches \n    (e.g., heap-based methods) or exhaustive computation as long as the output satisfies \n    the requirements.\n\n    Edge cases:\n    - If `N = 0`, return an empty list.\n    - If `N` exceeds the total number of possible products, return all products, sorted \n      in descending order.\n\n    Example:\n    assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n\"\"\"\nWrite a function to find the specified number of largest products from two given lists, selecting one factor from each list.\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\"\"\"", "entry_point": "large_product", "cluster_list": [{"programs_str": ["from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(heap) < N:\n                heapq.heappush(heap, product)\n            else:\n                heapq.heappushpop(heap, product)\n    return sorted(heap, reverse=True)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(max_heap) < N:\n                heapq.heappush(max_heap, product)\n            else:\n                heapq.heappushpop(max_heap, product)\n    return sorted(max_heap, reverse=True)", "from typing import List\nfrom itertools import product\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = sorted([x * y for x, y in product(nums1, nums2)], reverse=True)\n    return products[:N]", "from itertools import product\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    return sorted([a * b for a, b in product(nums1, nums2)], reverse=True)[:N]", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = []\n    for x in nums1:\n        for y in nums2:\n            products.append(x * y)\n    largest_products = heapq.nlargest(N, products)\n    return largest_products", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            max_heap.append(product)\n    largest_products = heapq.nlargest(N, max_heap)\n    return largest_products", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            max_heap.append(product)\n    largest_products = heapq.nlargest(N, max_heap)\n    return largest_products", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    products = [a * b for a in nums1 for b in nums2]\n    return heapq.nlargest(N, products)"], "outputs": "[[[60, 54, 50]], [[20, 10]], [[18, 15, 12]], [[9000]], [[1]], [[18, 15, 12, 12, 10]], [[]], [[18, 15, 12, 12, 10, 8, 6, 5, 4]], [[]], [[6]], [[9, 9, 0]]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(max_heap) < N:\n                heapq.heappush(max_heap, product)\n            elif product > max_heap[0]:\n                heapq.heappushpop(max_heap, product)\n    return sorted(max_heap, reverse=True)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(max_heap) < N:\n                heapq.heappush(max_heap, product)\n            elif product > max_heap[0]:\n                heapq.heappushpop(max_heap, product)\n    return sorted(max_heap, reverse=True)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            if len(max_heap) < N:\n                heapq.heappush(max_heap, product)\n            elif product > max_heap[0]:\n                heapq.heappushpop(max_heap, product)\n    return sorted(max_heap, reverse=True)"], "outputs": "[[[60, 54, 50]], [[20, 10]], [[18, 15, 12]], [[9000]], [[1]], [[18, 15, 12, 12, 10]], ['IndexError'], [[18, 15, 12, 12, 10, 8, 6, 5, 4]], [[]], [[6]], [[9, 9, 0]]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            heapq.heappush(max_heap, -product)\n    largest_products = []\n    for _ in range(N):\n        largest_products.append(-heapq.heappop(max_heap))\n    return largest_products", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(max_heap, -(num1 * num2))\n    largest_products = []\n    for _ in range(N):\n        largest_products.append(-heapq.heappop(max_heap))\n    return largest_products", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(max_products, -(num1 * num2))\n    largest_products = [-heapq.heappop(max_products) for _ in range(N)]\n    return largest_products", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            max_heap.append(-product)\n    heapq.heapify(max_heap)\n    result = []\n    for _ in range(N):\n        result.append(-heapq.heappop(max_heap))\n    return result", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            heapq.heappush(max_heap, -product)\n    largest_products = []\n    for _ in range(N):\n        largest_products.append(-heapq.heappop(max_heap))\n    return largest_products", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            heapq.heappush(max_heap, -product)\n    result = []\n    for _ in range(N):\n        result.append(-heapq.heappop(max_heap))\n    return result", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            product = num1 * num2\n            heapq.heappush(max_heap, -product)\n    result = []\n    for _ in range(N):\n        result.append(-heapq.heappop(max_heap))\n    return result", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(max_products, -(num1 * num2))\n    largest_products = [-heapq.heappop(max_products) for _ in range(N)]\n    return largest_products", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    max_heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            prod = num1 * num2\n            heapq.heappush(max_heap, -prod)\n    largest_products = []\n    for _ in range(N):\n        largest_products.append(-heapq.heappop(max_heap))\n    return largest_products"], "outputs": "[[[60, 54, 50]], [[20, 10]], [[18, 15, 12]], [[9000]], [[1]], [[18, 15, 12, 12, 10]], [[]], ['IndexError'], ['IndexError'], [[6]], [[9, 9, 0]]]", "probability": 0.45, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9197173235750931, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3], [[0, 1, 2], [0, 5, 10], 2], [[-1, -2, -3], [-4, -5, -6], 3], [[100, 200, 300], [10, 20, 30], 1], [[1], [1], 1], [[1, 2, 3], [4, 5, 6], 5], [[10, 5, 15], [20, 25, 5], 0], [[1, 2, 3], [4, 5, 6], 10], [[], [], 3], [[1, 2], [3], 1], [[-3, 0, 3], [-3, 0, 3], 3]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], [[[60, 54, 50]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists, \n    where each product is obtained by multiplying one factor from each list. \n\n    The results must be returned as a list sorted in descending order. \n    Duplicates in the result must be included if they correspond to distinct combinations \n    of factors from the two lists. For example, if two distinct pairs of numbers produce \n    the same product, both occurrences must be included in the output.\n\n    The function must compute the top `N` largest products, sorted in descending order, \n    after considering all possible products. If `N` exceeds the total number of possible \n    products, the function must return all products (including duplicates from distinct \n    combinations), sorted in descending order. If `N = 0`, the function must return an \n    empty list.\n\n    Efficiency considerations are optional; the function may use optimized approaches \n    (e.g., heap-based methods) or exhaustive computation as long as the output satisfies \n    the requirements.\n\n    Edge cases:\n    - If `N = 0`, return an empty list.\n    - If `N` exceeds the total number of possible products, return all products, sorted \n      in descending order.\n\n    Example:\n    assert large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3) == [60, 54, 50]\n    \"\"\"\n```", "entry_point": "large_product", "cluster_list": [{"programs_str": ["from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]", "from typing import List\nfrom heapq import nlargest\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = [a * b for a in nums1 for b in nums2]\n    if N >= len(products):\n        return sorted(products, reverse=True)\n    return nlargest(N, products)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    largest_products = heapq.nlargest(N, products)\n    return sorted(largest_products, reverse=True)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    largest_products = heapq.nlargest(N, products)\n    return sorted(largest_products, reverse=True)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N] if N <= len(products) else products", "from typing import List, Tuple\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for x in nums1:\n        for y in nums2:\n            products.append(x * y)\n    unique_products = sorted(products, reverse=True)\n    return unique_products[:N]", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    if N > len(products):\n        return products\n    else:\n        return products[:N]", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(products, -num1 * num2)\n    largest_products = []\n    for _ in range(min(N, len(products))):\n        largest_products.append(-heapq.heappop(products))\n    return sorted(largest_products, reverse=True)", "from typing import List\nfrom heapq import nlargest\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    all_products = [a * b for a in nums1 for b in nums2]\n    return nlargest(N, all_products) if N <= len(all_products) else sorted(all_products, reverse=True)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    return products[:N]", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    products.sort(reverse=True)\n    if N >= len(products):\n        return products\n    return products[:N]", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    unique_products = list(products)\n    unique_products.sort(reverse=True)\n    if N > len(unique_products):\n        return unique_products\n    return unique_products[:N]", "import heapq\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    if N >= len(products):\n        return sorted(products, reverse=True)\n    top_n_products = heapq.nlargest(N, products)\n    return sorted(top_n_products, reverse=True)", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    all_products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            all_products.append(num1 * num2)\n    unique_products = sorted(all_products, reverse=True)\n    return unique_products[:N]", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = [a * b for a in nums1 for b in nums2]\n    if N >= len(products):\n        return sorted(products, reverse=True)\n    return heapq.nlargest(N, products)", "from typing import List, Tuple\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    if N >= len(products):\n        return sorted(products, reverse=True)\n    largest_products = heapq.nlargest(N, products)\n    return sorted(largest_products, reverse=True)", "import heapq\nfrom typing import List\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for num1 in nums1:\n        for num2 in nums2:\n            products.append(num1 * num2)\n    if N >= len(products):\n        return sorted(products, reverse=True)\n    return heapq.nlargest(N, products)", "from typing import List\nfrom heapq import nlargest\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = [a * b for a in nums1 for b in nums2]\n    unique_products = nlargest(N, products) if N < len(products) else sorted(products, reverse=True)\n    return unique_products", "from typing import List\nimport heapq\n\ndef large_product(nums1: List[int], nums2: List[int], N: int) -> List[int]:\n    if N == 0:\n        return []\n    products = []\n    for a in nums1:\n        for b in nums2:\n            products.append(a * b)\n    products.sort(reverse=True)\n    if N > len(products):\n        return products\n    else:\n        return products[:N]"], "outputs": "[[[60, 54, 50]], [[20, 10]], [[18, 15, 12]], [[9000]], [[1]], [[18, 15, 12, 12, 10]], [[]], [[18, 15, 12, 12, 10, 8, 6, 5, 4]], [[]], [[6]], [[9, 9, 0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3], [[0, 1, 2], [0, 5, 10], 2], [[-1, -2, -3], [-4, -5, -6], 3], [[100, 200, 300], [10, 20, 30], 1], [[1], [1], 1], [[1, 2, 3], [4, 5, 6], 5], [[10, 5, 15], [20, 25, 5], 0], [[1, 2, 3], [4, 5, 6], 10], [[], [], 3], [[1, 2], [3], 1], [[-3, 0, 3], [-3, 0, 3], 3]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], [[[60, 54, 50]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9461538461538461, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/309", "original_requirement": "def maximum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def maximum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the maximum of two numbers.\nassert maximum(5,10) == 10\n\"\"\"", "entry_point": "maximum", "cluster_list": [{"programs_str": ["def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "from typing import Optional\n\ndef maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return a if a > b else b", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "def maximum(a: int, b: int) -> int:\n    return max(a, b)", "def maximum(a: int, b: int) -> int:\n    return max(a, b)"], "outputs": "[[10], [-15], [1000], [0], [10], [2147483647], [999999999], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5, 10], [-20, -15], [1000, 500], [0, 0], [-10, 10], [2147483647, -2147483648], [999999999, 999999998], [-1, 1]]", "input_output_examples": "[[[5, 10]], [[10]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.99375, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/310", "original_requirement": "def string_to_tuple(str1: str) -> tuple:\n\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"", "repaired_requirement": "```python\ndef string_to_tuple(str1: str) -> tuple:\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters, excluding spaces (' ').\n    The function should iterate through each character in the input string and include only non-space characters in the resulting tuple.\n\n    Example:\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n```", "original_clusters": {"requirement": "def string_to_tuple(str1: str) -> tuple:\n\"\"\"\nWrite a function to convert a given string to a tuple of characters.\nassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\"\"\"", "entry_point": "string_to_tuple", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str, ...]:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "from typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str, ...]:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "from typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str, ...]:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "from typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str, ...]:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "from typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str, ...]:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "from typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str, ...]:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)", "def string_to_tuple(str1: str) -> tuple:\n    return tuple(str1)"], "outputs": "[[('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')], [()], [('a',)], [('a', 'b', 'c')], [('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')], [('!', '@', '#', '$', '%', '^', '&', '*', '(', ')')], [('T', 'h', 'e', ' ', 'q', 'u', 'i', 'c', 'k', ' ', 'b', 'r', 'o', 'w', 'n', ' ', 'f', 'o', 'x', ' ', 'j', 'u', 'm', 'p', 's', '!')], [(' ', ' ', ' ', ' ', ' ')], [('M', 'u', 'l', 't', 'i', '-', 'l', 'i', 'n', 'e', '\\n', 't', 'e', 's', 't')], [('S', 'p', 'e', 'c', 'i', 'a', 'l', '\\t', 'c', 'h', 'a', 'r', 's')], [('M', 'i', 'x', '3', 'd', '_', 'C', '4', 's', 'E', '!')]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['python 3.0'], [('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')], [('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')]]]"}], "entropy": 0, "llm_generated_inputs": "[['python 3.0'], [''], ['a'], ['abc'], ['1234567890'], ['!@#$%^&*()'], ['The quick brown fox jumps!'], ['     '], ['Multi-line\\ntest'], ['Special\\tchars'], ['Mix3d_C4sE!']]", "input_output_examples": "[[['python 3.0']], [[('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "```python\ndef string_to_tuple(str1: str) -> tuple:\n    \"\"\"\n    Write a function to convert a given string to a tuple of characters, excluding spaces (' ').\n    The function should iterate through each character in the input string and include only non-space characters in the resulting tuple.\n\n    Example:\n    assert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n```", "entry_point": "string_to_tuple", "cluster_list": [{"programs_str": ["def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "from typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str, ...]:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "def string_to_tuple(str1: str) -> tuple:\n    return tuple((char for char in str1 if char != ' '))", "from typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str, ...]:\n    return tuple((char for char in str1 if char != ' '))", "from typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str, ...]:\n    return tuple((char for char in str1 if char != ' '))", "from typing import Tuple\n\ndef string_to_tuple(str1: str) -> Tuple[str, ...]:\n    return tuple((char for char in str1 if char != ' '))"], "outputs": "[[('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')], [()], [('a',)], [('a', 'b', 'c')], [('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')], [('!', '@', '#', '$', '%', '^', '&', '*', '(', ')')], [('T', 'h', 'e', 'q', 'u', 'i', 'c', 'k', 'b', 'r', 'o', 'w', 'n', 'f', 'o', 'x', 'j', 'u', 'm', 'p', 's', '!')], [()], [('M', 'u', 'l', 't', 'i', '-', 'l', 'i', 'n', 'e', '\\n', 't', 'e', 's', 't')], [('S', 'p', 'e', 'c', 'i', 'a', 'l', '\\t', 'c', 'h', 'a', 'r', 's')], [('M', 'i', 'x', '3', 'd', '_', 'C', '4', 's', 'E', '!')]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['python 3.0'], [''], ['a'], ['abc'], ['1234567890'], ['!@#$%^&*()'], ['The quick brown fox jumps!'], ['     '], ['Multi-line\\ntest'], ['Special\\tchars'], ['Mix3d_C4sE!']]", "input_output_examples": "[[['python 3.0']], [[('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.5431034482758621, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9568965517241379, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/311", "original_requirement": "def set_left_most_unset_bit(n: int) -> int:\n\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"", "repaired_requirement": "```python\ndef set_left_most_unset_bit(n: int) -> int:\n    \"\"\"\n    Write a Python function to set the left-most unset bit in the binary representation of a given integer `n`.\n\n    - The function operates within the binary representation of `n` as determined by its `bit_length()`.\n    - An \"unset bit\" is defined as a bit position where the value is `0` in the binary representation of `n`.\n    - The \"left-most unset bit\" is the highest positional bit (most significant bit) that is unset within the binary representation of `n`.\n\n    Behavior:\n    1. If `n` is `-1` (all bits are set in a signed integer), the function returns `n` unchanged.\n    2. If `n` is `0` (all bits are unset), the function sets the least significant bit (position 0) and returns `1`.\n    3. For positive integers, the function identifies the left-most unset bit within the binary representation of `n` and sets it.\n    4. The function does not consider bits beyond the current `bit_length()` of `n` and does not assume an infinite bit domain.\n\n    Examples:\n    - assert set_left_most_unset_bit(10) == 14\n    - assert set_left_most_unset_bit(0) == 1\n    - assert set_left_most_unset_bit(-1) == -1\n    \"\"\"\n```", "original_clusters": {"requirement": "def set_left_most_unset_bit(n: int) -> int:\n\"\"\"\nWrite a python function to set the left most unset bit.\nassert set_left_most_unset_bit(10) == 14\n\"\"\"", "entry_point": "set_left_most_unset_bit", "cluster_list": [{"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    num_bits = n.bit_length()\n    all_set = (1 << num_bits) - 1\n    inverted_n = ~n & all_set\n    if inverted_n == 0:\n        return n\n    left_most_unset = 1 << inverted_n.bit_length() - 1\n    return n | left_most_unset"], "outputs": "[[14], [0], [-1], [1], [3], [7], [15], [255], [1536], [2147483647], [536870911]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    num_bits = n.bit_length()\n    for i in range(num_bits + 1):\n        if not n & 1 << i:\n            return n | 1 << i\n    return n", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    x = 1\n    while x & n != 0:\n        x = x << 1\n    return n | x", "def set_left_most_unset_bit(n: int) -> int:\n    if ~n == 0:\n        return n\n    position = 1\n    while n & 1 << position - 1 != 0:\n        position += 1\n    return n | 1 << position - 1", "def set_left_most_unset_bit(n: int) -> int:\n    if n == 0:\n        return 1\n    mask = 1\n    while mask & n != 0:\n        mask <<= 1\n    return n | mask"], "outputs": "[[11], [1], [-1], [3], [3], [15], [31], [511], [1025], [4294967295], [1073741823]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [11], [14]]]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    if ~n == 0:\n        return n\n    num_bits = n.bit_length()\n    mask = 1 << num_bits\n    while mask > 0:\n        if n & mask == 0:\n            return n | mask\n        mask >>= 1\n    return n", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    m = n\n    pos = 0\n    while m != 0:\n        m >>= 1\n        pos += 1\n    mask = 1 << pos\n    return n | mask", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    bit_length = n.bit_length()\n    if n == 0:\n        return 1\n    for i in range(bit_length, -1, -1):\n        if n & 1 << i == 0:\n            return n | 1 << i\n    return n | 1 << bit_length", "def set_left_most_unset_bit(n: int) -> int:\n    length = n.bit_length()\n    for i in range(length, -1, -1):\n        if n & 1 << i == 0:\n            return n | 1 << i\n    return n | 1 << length", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    pos = 0\n    m = n\n    while m != 0:\n        pos += 1\n        m >>= 1\n    while n & 1 << pos != 0:\n        pos += 1\n    return n | 1 << pos", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    count = 0\n    num = n\n    while num != 0:\n        count += 1\n        num = num >> 1\n    num = 1 << count\n    while n & num:\n        num = num >> 1\n        if num == 0:\n            return n\n    return n | num", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    mask = 1 << n.bit_length()\n    while n & mask:\n        mask >>= 1\n    return n | mask", "def set_left_most_unset_bit(n: int) -> int:\n    mask = 1\n    while mask <= n:\n        mask <<= 1\n    return n | mask"], "outputs": "[[26], [1], [-1], [3], [6], [15], [31], [511], [3072], [4294967295], [1073741823]]", "probability": 0.4, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [26], [14]]]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    num_bits = n.bit_length()\n    all_set = (1 << num_bits) - 1\n    if n < all_set:\n        pos = 0\n        for i in range(num_bits):\n            if n & 1 << i == 0:\n                pos = i\n                break\n        return n | 1 << pos\n    else:\n        return n + 1"], "outputs": "[[11], [1], [-1], [2], [3], [8], [16], [256], [1025], [2147483648], [536870912]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [11], [14]]]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    inverted = ~n\n    left_most_unset_bit = inverted.bit_length() - 1\n    while left_most_unset_bit >= 0:\n        if not n & 1 << left_most_unset_bit:\n            n = n | 1 << left_most_unset_bit\n            break\n        left_most_unset_bit -= 1\n    return n", "def set_left_most_unset_bit(n: int) -> int:\n    num_bits = n.bit_length()\n    for i in range(num_bits - 1, -1, -1):\n        if not n & 1 << i:\n            n |= 1 << i\n            return n\n    return n | 1 << num_bits", "def set_left_most_unset_bit(n: int) -> int:\n    found_unset_bit = False\n    bit_length = n.bit_length()\n    if 1 << bit_length == 0:\n        return n | 1 << bit_length\n    for i in range(bit_length - 1, -1, -1):\n        if not n & 1 << i:\n            n |= 1 << i\n            found_unset_bit = True\n            break\n    if not found_unset_bit:\n        n |= 1 << bit_length\n    return n", "def set_left_most_unset_bit(n: int) -> int:\n    import math\n    num_bits = int(math.log2(n)) + 1 if n > 0 else 1\n    for i in range(num_bits - 1, -1, -1):\n        if not n & 1 << i:\n            return n | 1 << i\n    return n | 1 << num_bits", "def set_left_most_unset_bit(n: int) -> int:\n    num_bits = n.bit_length()\n    for i in range(num_bits - 1, -1, -1):\n        if not n & 1 << i:\n            n |= 1 << i\n            break\n    else:\n        n |= 1 << num_bits\n    return n"], "outputs": "[[14], [1], [-1], [3], [3], [15], [31], [511], [1536], [4294967295], [1073741823]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    complement = ~n\n    bit = 1 << n.bit_length() - 1\n    while bit > 0 and complement & bit == 0:\n        bit <<= 1\n    return n | bit if bit else n"], "outputs": "[[26], ['ValueError'], ['Timeout'], [3], [6], [15], [31], [511], [3072], [4294967295], [1073741823]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [26], [14]]]"}], "entropy": 0.828424424171762, "llm_generated_inputs": "[[10], [0], [-1], [1], [2], [7], [15], [255], [1024], [2147483647], [536870911]]", "input_output_examples": "[[[10]], [[14]]]", "weighted_test_consistency": 0.3, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef set_left_most_unset_bit(n: int) -> int:\n    \"\"\"\n    Write a Python function to set the left-most unset bit in the binary representation of a given integer `n`.\n\n    - The function operates within the binary representation of `n` as determined by its `bit_length()`.\n    - An \"unset bit\" is defined as a bit position where the value is `0` in the binary representation of `n`.\n    - The \"left-most unset bit\" is the highest positional bit (most significant bit) that is unset within the binary representation of `n`.\n\n    Behavior:\n    1. If `n` is `-1` (all bits are set in a signed integer), the function returns `n` unchanged.\n    2. If `n` is `0` (all bits are unset), the function sets the least significant bit (position 0) and returns `1`.\n    3. For positive integers, the function identifies the left-most unset bit within the binary representation of `n` and sets it.\n    4. The function does not consider bits beyond the current `bit_length()` of `n` and does not assume an infinite bit domain.\n\n    Examples:\n    - assert set_left_most_unset_bit(10) == 14\n    - assert set_left_most_unset_bit(0) == 1\n    - assert set_left_most_unset_bit(-1) == -1\n    \"\"\"\n```", "entry_point": "set_left_most_unset_bit", "cluster_list": [{"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    for i in range(bit_length - 1, -1, -1):\n        if n & 1 << i == 0:\n            return n | 1 << i\n    return n | 1 << bit_length", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    all_set_bits = (1 << bit_length) - 1\n    if n == all_set_bits:\n        return n | 1 << bit_length\n    for i in range(bit_length - 1, -1, -1):\n        if not n & 1 << i:\n            n |= 1 << i\n            break\n    return n", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    elif n == 0:\n        return 1\n    else:\n        bit_length = n.bit_length()\n        for i in range(bit_length - 1, -1, -1):\n            if not n & 1 << i:\n                return n | 1 << i\n        return n | 1 << bit_length", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    for i in range(bit_length - 1, -1, -1):\n        if not n & 1 << i:\n            return n | 1 << i\n    return n | 1 << bit_length", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    num_bits = n.bit_length()\n    for i in range(num_bits - 1, -1, -1):\n        if not n & 1 << i:\n            n |= 1 << i\n            return n\n    return n | 1 << num_bits", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    for i in range(bit_length - 1, -1, -1):\n        if not n & 1 << i:\n            return n | 1 << i\n    return n | 1 << bit_length", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    for i in range(bit_length - 1, -1, -1):\n        if n & 1 << i == 0:\n            return n | 1 << i\n    return n | 1 << bit_length", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_len = n.bit_length()\n    for i in range(bit_len - 1, -1, -1):\n        if not n & 1 << i:\n            n |= 1 << i\n            return n\n    return n | 1 << bit_len", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    for i in range(bit_length - 1, -1, -1):\n        if not n & 1 << i:\n            n |= 1 << i\n            return n\n    return n | 1 << bit_length", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    elif n == 0:\n        return 1\n    num_bits = n.bit_length()\n    bitmask = 1 << num_bits\n    for i in range(num_bits - 1, -1, -1):\n        if n & 1 << i == 0:\n            return n | 1 << i\n    return n | bitmask"], "outputs": "[[14], [1], [-1], [3], [3], [15], [31], [511], [1536], [4294967295], [1073741823]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_len = n.bit_length()\n    mask = 1 << bit_len\n    while mask > 0:\n        if n & mask == 0:\n            return n | mask\n        mask >>= 1\n    return n", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    highest_unset_bit_pos = -1\n    for i in range(bit_length, -1, -1):\n        if not n & 1 << i:\n            highest_unset_bit_pos = i\n            break\n    if highest_unset_bit_pos == -1:\n        return n\n    return n | 1 << highest_unset_bit_pos", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    for i in range(bit_length, -1, -1):\n        if n & 1 << i == 0:\n            return n | 1 << i\n    return n", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    mask = 1 << bit_length\n    while mask > 0:\n        if n & mask == 0:\n            return n | mask\n        mask >>= 1\n    return n"], "outputs": "[[26], [1], [-1], [3], [6], [15], [31], [511], [3072], [4294967295], [1073741823]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [26], [14]]]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    elif n == 0:\n        return 1\n    bit_length = n.bit_length()\n    all_ones_mask = (1 << bit_length) - 1\n    unset_mask = ~n & all_ones_mask\n    if unset_mask == 0:\n        return n\n    left_most_unset_bit = unset_mask.bit_length() - 1\n    return n | 1 << left_most_unset_bit", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    for i in reversed(range(bit_length)):\n        if n & 1 << i == 0:\n            n |= 1 << i\n            break\n    return n", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    for i in range(bit_length - 1, -1, -1):\n        if not n & 1 << i:\n            n |= 1 << i\n            break\n    return n", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    for i in range(bit_length - 1, -1, -1):\n        if not n & 1 << i:\n            n |= 1 << i\n            break\n    return n", "def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    elif n == 0:\n        return 1\n    else:\n        total_bits = n.bit_length()\n        for i in range(total_bits - 1, -1, -1):\n            if n & 1 << i == 0:\n                n = n | 1 << i\n                break\n    return n"], "outputs": "[[14], [1], [-1], [1], [3], [7], [15], [255], [1536], [2147483647], [536870911]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def set_left_most_unset_bit(n: int) -> int:\n    if n == -1:\n        return n\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    all_bits_set = (1 << bit_length) - 1\n    result = n | all_bits_set\n    return result + 1"], "outputs": "[[16], [1], [-1], [2], [4], [8], [16], [256], [2048], [2147483648], [536870912]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [16], [14]]]"}], "entropy": 0.8402410118609203, "llm_generated_inputs": "[[10], [0], [-1], [1], [2], [7], [15], [255], [1024], [2147483647], [536870911]]", "input_output_examples": "[[[10]], [[14]]]", "weighted_test_consistency": 0.75, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.05357142857142857, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.7321428571428572, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/312", "original_requirement": "def volume_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def volume_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the volume of a cone.\nassert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)\n\"\"\"", "entry_point": "volume_cone", "cluster_list": [{"programs_str": ["import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return math.pi * r ** 2 * h / 3", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "from math import pi, isclose\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h", "import math\n\ndef volume_cone(r: float, h: float) -> float:\n    return 1 / 3 * math.pi * r ** 2 * h"], "outputs": "[[314.15926535897927], [0.0], [0.0], [0.0], [37.69911184307752], [5.890486225480862], [2094395.1023931953], [314.15926535897927], [-314.15926535897927], [-314.15926535897927]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5.0, 12.0], [0.0, 10.0], [7.0, 0.0], [0.0, 0.0], [3.0, 4.0], [1.5, 2.5], [100.0, 200.0], [-5.0, 12.0], [5.0, -12.0], [-5.0, -12.0]]", "input_output_examples": "[[[5, 12]], [[314.15926535897927]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/388", "original_requirement": "def highest_Power_of_2(n: int) -> int:\n\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"", "repaired_requirement": "def highest_Power_of_2(n: int) -> int:\n    \"\"\"\n    Write a Python function to find the highest power of 2 that is less than or equal to a given positive integer `n`.\n\n    Constraints:\n    - The input `n` must be a positive integer (`n > 0`).\n    - If `n` is zero or negative, the function must raise a `ValueError`.\n\n    Examples:\n    assert highest_Power_of_2(10) == 8\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [-5]\n    Expected Output: ['ValueError']\n    ### Test 2\n    Input: [0]\n    Expected Output: ['ValueError']\n    ### Test 3\n    Input: [0]\n    Expected Output: ['ValueError']\n    \"\"\"", "original_clusters": {"requirement": "def highest_Power_of_2(n: int) -> int:\n\"\"\"\nWrite a python function to find the highest power of 2 that is less than or equal to n.\nassert highest_Power_of_2(10) == 8\n\"\"\"", "entry_point": "highest_Power_of_2", "cluster_list": [{"programs_str": ["def highest_Power_of_2(n: int) -> int:\n    return 1 << n.bit_length() - 1", "def highest_Power_of_2(n: int) -> int:\n    return 1 << n.bit_length() - 1", "def highest_Power_of_2(n: int) -> int:\n    return 1 << n.bit_length() - 1"], "outputs": "[[8], [1], ['ValueError'], [16], [1024], [16], [4], [524288]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def highest_Power_of_2(n: int) -> int:\n    result = 1\n    while result * 2 <= n:\n        result *= 2\n    return result", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"], "outputs": "[[8], [1], [1], [16], [1024], [16], [1], [524288]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef highest_Power_of_2(n: int) -> int:\n    return 2 ** int(math.log2(n))", "def highest_Power_of_2(n: int) -> int:\n    import math\n    return 2 ** math.floor(math.log2(n))", "def highest_Power_of_2(n: int) -> int:\n    import math\n    return 1 << int(math.log2(n))", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        raise ValueError('Input must be greater than 0.')\n    res = 1\n    while res * 2 <= n:\n        res *= 2\n    return res", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        raise ValueError('Input must be greater than or equal to 1')\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    result = 1\n    while result * 2 <= n:\n        result *= 2\n    return result", "import math\n\ndef highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be greater than 0.')\n    return 2 ** int(math.log2(n))", "from math import log2, floor\n\ndef highest_Power_of_2(n: int) -> int:\n    return 2 ** floor(log2(n))"], "outputs": "[[8], [1], ['ValueError'], [16], [1024], [16], ['ValueError'], [524288]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def highest_Power_of_2(n: int) -> int:\n    return 1 << n.bit_length() - 1 if n > 0 else 0", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    return 1 << n.bit_length() - 1 if n > 0 else 0", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        return 0\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "import math\n\ndef highest_Power_of_2(n: int) -> int:\n    if n < 1:\n        return 0\n    return 2 ** int(math.log2(n))"], "outputs": "[[8], [1], [0], [16], [1024], [16], [0], [524288]]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9354752972273344, "llm_generated_inputs": "[[10], [1], [0], [16], [1024], [31], [-5], [1000000]]", "input_output_examples": "[[[10]], [[8]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def highest_Power_of_2(n: int) -> int:\n    \"\"\"\n    Write a Python function to find the highest power of 2 that is less than or equal to a given positive integer `n`.\n\n    Constraints:\n    - The input `n` must be a positive integer (`n > 0`).\n    - If `n` is zero or negative, the function must raise a `ValueError`.\n\n    Examples:\n    assert highest_Power_of_2(10) == 8\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [-5]\n    Expected Output: ['ValueError']\n    ### Test 2\n    Input: [0]\n    Expected Output: ['ValueError']\n    ### Test 3\n    Input: [0]\n    Expected Output: ['ValueError']\n    \"\"\"", "entry_point": "highest_Power_of_2", "cluster_list": [{"programs_str": ["def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('The input must be a positive integer greater than zero.')\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('n must be a positive integer')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('n must be a positive integer.')\n    power = 1\n    while power <= n:\n        power <<= 1\n    return power >> 1", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('n must be a positive integer.')\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('The input must be a positive integer greater than zero.')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer.')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('The input must be a positive integer.')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "def highest_Power_of_2(n: int) -> int:\n    if n <= 0:\n        raise ValueError('Input must be a positive integer')\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"], "outputs": "[[8], [1], ['ValueError'], [16], [1024], [16], ['ValueError'], [524288]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10], [1], [0], [16], [1024], [31], [-5], [1000000]]", "input_output_examples": "[[[10]], [[8]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/389", "original_requirement": "def find_lucas(n: int) -> int:\n\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"", "repaired_requirement": "```python\ndef find_lucas(n: int) -> int:\n    \"\"\"\n    Write a function to find the n'th Lucas number.\n\n    The Lucas sequence is defined as:\n    - L(0) = 2\n    - L(1) = 1\n    - L(n) = L(n-1) + L(n-2) for n > 1\n\n    Requirements:\n    1. **Valid input range:**\n       - The input `n` must be an integer.\n       - If `n` is non-negative, the function computes the Lucas number at position `n` in the sequence.\n       - If `n` is negative, the function returns `1` as a special case.\n\n    2. **Behavior for invalid inputs:**\n       - If the input is not an integer, the function should raise a `TypeError`.\n\n    3. **Implementation approach:**\n       - The function should use an iterative approach to compute the Lucas sequence for better performance.\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [-1]\n    Expected Output: [1]\n\n    ### Test 2\n    Input: [9]\n    Expected Output: [76]\n\n    assert find_lucas(9) == 76\n    \"\"\"\n```", "original_clusters": {"requirement": "def find_lucas(n: int) -> int:\n\"\"\"\nWrite a function to find the n'th lucas number.\nassert find_lucas(9) == 76\n\"\"\"", "entry_point": "find_lucas", "cluster_list": [{"programs_str": ["from functools import lru_cache\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)", "from functools import lru_cache\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)", "from functools import lru_cache\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)", "from functools import lru_cache\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    return find_lucas(n - 1) + find_lucas(n - 2)"], "outputs": "[[2], [1], [3], [76], [1364], [15127], ['RecursionError'], ['Timeout']]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    lucas_prev, lucas_curr = (2, 1)\n    for _ in range(2, n + 1):\n        lucas_next = lucas_prev + lucas_curr\n        lucas_prev, lucas_curr = (lucas_curr, lucas_next)\n    return lucas_curr", "from typing import List\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    lucas_numbers = [2, 1]\n    for i in range(2, n + 1):\n        lucas_numbers.append(lucas_numbers[-1] + lucas_numbers[-2])\n    return lucas_numbers[n]", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = (2, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "from typing import List\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = (2, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = (2, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "from typing import List\n\ndef find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = (2, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = (2, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def find_lucas(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = (2, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b"], "outputs": "[[2], [1], [3], [76], [1364], [15127], [1], [792070839848372253127]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8112781244591328, "llm_generated_inputs": "[[0], [1], [2], [9], [15], [20], [-1], [100]]", "input_output_examples": "[[[9]], [[76]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef find_lucas(n: int) -> int:\n    \"\"\"\n    Write a function to find the n'th Lucas number.\n\n    The Lucas sequence is defined as:\n    - L(0) = 2\n    - L(1) = 1\n    - L(n) = L(n-1) + L(n-2) for n > 1\n\n    Requirements:\n    1. **Valid input range:**\n       - The input `n` must be an integer.\n       - If `n` is non-negative, the function computes the Lucas number at position `n` in the sequence.\n       - If `n` is negative, the function returns `1` as a special case.\n\n    2. **Behavior for invalid inputs:**\n       - If the input is not an integer, the function should raise a `TypeError`.\n\n    3. **Implementation approach:**\n       - The function should use an iterative approach to compute the Lucas sequence for better performance.\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [-1]\n    Expected Output: [1]\n\n    ### Test 2\n    Input: [9]\n    Expected Output: [76]\n\n    assert find_lucas(9) == 76\n    \"\"\"\n```", "entry_point": "find_lucas", "cluster_list": [{"programs_str": ["def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input n must be an integer')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        next_lucas = prev + curr\n        prev, curr = (curr, next_lucas)\n    return curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    lucas_prev, lucas_curr = (2, 1)\n    for _ in range(2, n + 1):\n        lucas_prev, lucas_curr = (lucas_curr, lucas_prev + lucas_curr)\n    return lucas_curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    prev = 2\n    current = 1\n    for _ in range(2, n + 1):\n        next_value = prev + current\n        prev = current\n        current = next_value\n    return current", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    lucas_prev, lucas_curr = (2, 1)\n    for _ in range(2, n + 1):\n        lucas_next = lucas_prev + lucas_curr\n        lucas_prev, lucas_curr = (lucas_curr, lucas_next)\n    return lucas_curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input n must be an integer.')\n    if n < 0:\n        return 1\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    a, b = (2, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr", "from typing import Union\n\ndef find_lucas(n: Union[int]) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    lucas_prev = 2\n    lucas_curr = 1\n    for _ in range(2, n + 1):\n        lucas_next = lucas_prev + lucas_curr\n        lucas_prev, lucas_curr = (lucas_curr, lucas_next)\n    return lucas_curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    prev1, prev2 = (2, 1)\n    for _ in range(2, n + 1):\n        current = prev1 + prev2\n        prev1, prev2 = (prev2, current)\n    return current", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr if n > 0 else prev", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    if n < 0:\n        return 1\n    lucas_0, lucas_1 = (2, 1)\n    if n == 0:\n        return lucas_0\n    if n == 1:\n        return lucas_1\n    for _ in range(2, n + 1):\n        lucas_0, lucas_1 = (lucas_1, lucas_0 + lucas_1)\n    return lucas_1", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr", "def find_lucas(n: int) -> int:\n    if not isinstance(n, int):\n        raise TypeError('Input must be an integer.')\n    if n < 0:\n        return 1\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    prev, curr = (2, 1)\n    for _ in range(2, n + 1):\n        prev, curr = (curr, prev + curr)\n    return curr"], "outputs": "[[2], [1], [3], [76], [1364], [15127], [1], [792070839848372253127]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [9], [15], [20], [-1], [100]]", "input_output_examples": "[[[9]], [[76]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/390", "original_requirement": "from typing import List\n\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n\"\"\"\nWrite a function to apply a given format string to all of the elements in a list.\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\"\"\"", "entry_point": "add_string", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(element) for element in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(element) for element in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(element) for element in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(elem) for elem in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(element) for element in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]", "from typing import List, Any\n\ndef add_string(list_: List[Any], string: str) -> List[str]:\n    return [string.format(item) for item in list_]"], "outputs": "[[['temp1', 'temp2', 'temp3', 'temp4']], [['number: 10', 'number: 20', 'number: 30']], [[]], [['letter-a', 'letter-b', 'letter-c']], [['value-None']], [['float-1.1', 'float-2.2', 'float-3.3']], [['boolean-True', 'boolean-False']], [['mixed-1000', 'mixed-text', 'mixed-3.5', 'mixed-None', 'mixed-True']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4], 'temp{0}'], [[10, 20, 30], 'number: {0}'], [[], 'empty{0}'], [['a', 'b', 'c'], 'letter-{0}'], [[None], 'value-{0}'], [[1.1, 2.2, 3.3], 'float-{0}'], [[True, False], 'boolean-{0}'], [[1000, 'text', 3.5, None, True], 'mixed-{0}']]", "input_output_examples": "[[[[1, 2, 3, 4], 'temp{0}']], [[['temp1', 'temp2', 'temp3', 'temp4']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/391", "original_requirement": "from typing import List\nfrom typing import Dict\n\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Dict\n\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n\"\"\"\nWrite a function to convert more than one list to nested dictionary.\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\"\"\"", "entry_point": "convert_list_dictionary", "cluster_list": [{"programs_str": ["from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{key: {name: score}} for key, name, score in zip(list1, list2, list3)]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{key: {name: value}} for key, name, value in zip(list1, list2, list3)]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{key: {val: score}} for key, val, score in zip(list1, list2, list3)]", "from typing import List, Any, Dict\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{l1: {l2: l3}} for l1, l2, l3 in zip(list1, list2, list3)]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{k: {v: w}} for k, v, w in zip(list1, list2, list3)]", "from typing import List, Any, Dict\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for key, name, score in zip(list1, list2, list3):\n        result.append({key: {name: score}})\n    return result", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{key: {name: score}} for key, name, score in zip(list1, list2, list3)]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{k1: {k2: k3}} for k1, k2, k3 in zip(list1, list2, list3)]", "from typing import List, Any, Dict\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{key: {name: score}} for key, name, score in zip(list1, list2, list3)]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    result = []\n    for key, name, score in zip(list1, list2, list3):\n        result.append({key: {name: score}})\n    return result", "from typing import Any, List, Dict\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{k: {v: z}} for k, v, z in zip(list1, list2, list3)]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{key: {name: value}} for key, name, value in zip(list1, list2, list3)]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{list1[i]: {list2[i]: list3[i]}} for i in range(len(list1))]", "from typing import List, Dict, Any\n\ndef convert_list_dictionary(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Dict[Any, Dict[Any, Any]]]:\n    return [{k: {v: w}} for k, v, w in zip(list1, list2, list3)]"], "outputs": "[[[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]], [[]], [[{'A001': {'Alice': 100}}]], [[{'B001': {'Bob': 75}}, {'B002': {'Charlie': 88}}]], [[{'C001': {'Clark': 50}}, {'C002': {'Diana': 60}}, {'C003': {'Eve': 70}}]], [[{'D001': {'David': 90}}, {'D002': {'Emma': 80}}, {'D003': {'Frank': 70}}, {'D004': {'Grace': 60}}, {'D005': {'Helen': 50}}]], [[{'X001': {'Xander': 0}}, {'X002': {'Yara': 100}}, {'X003': {'Zoe': -5}}]], [[{'P001': {'Paul': 42}}, {'P002': {'': 78}}]], [[{'Q001': {'Quinn': 100}}, {None: {'Riley': 55}}]], [[{'M001': {None: None}}]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]], [[], [], []], [['A001'], ['Alice'], [100]], [['B001', 'B002'], ['Bob', 'Charlie'], [75, 88]], [['C001', 'C002', 'C003'], ['Clark', 'Diana', 'Eve'], [50, 60, 70]], [['D001', 'D002', 'D003', 'D004', 'D005'], ['David', 'Emma', 'Frank', 'Grace', 'Helen'], [90, 80, 70, 60, 50]], [['X001', 'X002', 'X003'], ['Xander', 'Yara', 'Zoe'], [0, 100, -5]], [['P001', 'P002'], ['Paul', ''], [42, 78]], [['Q001', None], ['Quinn', 'Riley'], [100, 55]], [['M001'], [None], [None]]]", "input_output_examples": "[[[['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92]]], [[[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.6, "original_avg_pass_rate": 0.8728971962616822, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/392", "original_requirement": "def get_max_sum(n: int) -> int:\n\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"", "repaired_requirement": "def get_max_sum(n: int) -> int:\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \n    Requirements:\n    1. The function is defined for non-negative integers only (n >= 0). Negative input values are considered invalid and will result in undefined behavior.\n    2. The base case is explicitly defined as: if n == 0, the function must return 0.\n    3. For positive integers (n > 0), the function recursively computes the maximum sum using the given equation.\n    4. The function does not handle negative inputs explicitly; passing negative values may lead to a RecursionError due to unbounded recursion.\n\n    Example:\n    assert get_max_sum(60) == 106\n    \"\"\"", "original_clusters": {"requirement": "def get_max_sum(n: int) -> int:\n\"\"\"\nWrite a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\nassert get_max_sum(60) == 106\n\"\"\"", "entry_point": "get_max_sum", "cluster_list": [{"programs_str": ["from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n\n    def f(x):\n        if x == 0:\n            return 0\n        return max(f(x // 2) + f(x // 3) + f(x // 4) + f(x // 5), x)\n    return f(n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "def get_max_sum(n: int) -> int:\n    from functools import lru_cache\n\n    def f(x: int) -> int:\n        if x == 0:\n            return 0\n        return max(f(x // 2) + f(x // 3) + f(x // 4) + f(x // 5), x)\n    return f(n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n\n    def helper(x):\n        if x == 0:\n            return 0\n        return max(x, helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5))\n    return helper(n)"], "outputs": "[[106], [1], [0], [5], [12], [200], [3264], ['RecursionError'], [2], [37], [1404]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))"], "outputs": "[['RecursionError'], ['RecursionError'], ['RecursionError'], ['RecursionError'], ['RecursionError'], ['RecursionError'], ['RecursionError'], ['RecursionError'], ['RecursionError'], ['RecursionError'], ['RecursionError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[60], ['RecursionError'], [106]]]"}, {"programs_str": ["from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n) if n > 0 else 0", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))"], "outputs": "[[106], [1], [0], [5], [12], [200], [3264], [0], [2], [37], [1404]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n < 2:\n        return n\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)"], "outputs": "[[106], [1], [0], [5], [12], [200], [3264], [-5], [2], [37], [1404]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.5109640474436812, "llm_generated_inputs": "[[60], [1], [0], [5], [10], [100], [999], [-5], [2], [25], [500]]", "input_output_examples": "[[[60]], [[106]]]", "weighted_test_consistency": 0.9500000000000001, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def get_max_sum(n: int) -> int:\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \n    Requirements:\n    1. The function is defined for non-negative integers only (n >= 0). Negative input values are considered invalid and will result in undefined behavior.\n    2. The base case is explicitly defined as: if n == 0, the function must return 0.\n    3. For positive integers (n > 0), the function recursively computes the maximum sum using the given equation.\n    4. The function does not handle negative inputs explicitly; passing negative values may lead to a RecursionError due to unbounded recursion.\n\n    Example:\n    assert get_max_sum(60) == 106\n    \"\"\"", "entry_point": "get_max_sum", "cluster_list": [{"programs_str": ["def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "def get_max_sum(n: int) -> int:\n    memo = {}\n\n    def helper(x: int) -> int:\n        if x == 0:\n            return 0\n        if x in memo:\n            return memo[x]\n        memo[x] = max(x, helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5))\n        return memo[x]\n    return helper(n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "def get_max_sum(n: int) -> int:\n\n    def helper(x):\n        if x == 0:\n            return 0\n        return max(helper(x // 2) + helper(x // 3) + helper(x // 4) + helper(x // 5), x)\n    return helper(n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "def get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))", "from functools import lru_cache\n\ndef get_max_sum(n: int) -> int:\n    if n == 0:\n        return 0\n    return max(n, get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5))"], "outputs": "[[106], [1], [0], [5], [12], [200], [3264], ['RecursionError'], [2], [37], [1404]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[60], [1], [0], [5], [10], [100], [999], [-5], [2], [25], [500]]", "input_output_examples": "[[[60]], [[106]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/394", "original_requirement": "def check_distinct(test_tup: tuple) -> bool:\n\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def check_distinct(test_tup: tuple) -> bool:\n\"\"\"\nWrite a function to check if given tuple contains no duplicates.\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\"\"\"", "entry_point": "check_distinct", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple[int, ...]) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple[int]) -> bool:\n    return len(test_tup) == len(set(test_tup))", "def check_distinct(test_tup: tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple[int, ...]) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))", "from typing import Tuple\n\ndef check_distinct(test_tup: Tuple) -> bool:\n    return len(test_tup) == len(set(test_tup))"], "outputs": "[[False], [True], [True], [True], [False], [True], [False], [False], [False], [False], [True], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(1, 4, 5, 6, 1, 4)], [(1, 2, 3, 4, 5)], [()], [(1,)], [(1, 1, 1, 1)], [('a', 'b', 'c', 'd')], [('a', 'a', 'b', 'c')], [(True, False, True)], [(True, False, False)], [(None, None, None)], [(None,)], [((1, 2), (3, 4), (1, 2))], [((1, 2), (3, 4), (5, 6))], [(0, 0, 0, 0)], [(0, 1, 2, 3)]]", "input_output_examples": "[[[(1, 4, 5, 6, 1, 4)]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/395", "original_requirement": "def first_non_repeating_character(str1: str) -> Optional[str]:\n\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def first_non_repeating_character(str1: str) -> Optional[str]:\n\"\"\"\nWrite a python function to find the first non-repeated character in a given string.\nassert first_non_repeating_character(\"abcabc\") == None\n\"\"\"", "entry_point": "first_non_repeating_character", "cluster_list": [{"programs_str": ["from typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    count = Counter(str1)\n    for char in str1:\n        if count[char] == 1:\n            return char\n    return None", "from typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\nfrom collections import Counter\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    from collections import Counter\n    char_count = Counter(str1)\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    for char in str1:\n        if str1.count(char) == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    character_count = {}\n    for char in str1:\n        character_count[char] = character_count.get(char, 0) + 1\n    for char in str1:\n        if character_count[char] == 1:\n            return char\n    return None", "from typing import Optional\n\ndef first_non_repeating_character(str1: str) -> Optional[str]:\n    char_count = {}\n    for char in str1:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in str1:\n        if char_count[char] == 1:\n            return char\n    return None"], "outputs": "[[None], [None], ['a'], ['c'], ['a'], [None], [None], ['1'], ['a'], ['A'], ['c'], ['a']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcabc'], ['aabbcc'], ['abcdef'], ['aabbc'], ['a'], ['aa'], [''], ['122333444'], ['aA'], ['AaBbCc'], ['abacabad'], ['1234abc1234']]", "input_output_examples": "[[['abcabc']], [[None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/397", "original_requirement": "def median_numbers(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def median_numbers(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find the median of three numbers.\nassert median_numbers(25,55,65)==55.0\n\"\"\"", "entry_point": "median_numbers", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "from typing import List\n\ndef median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "from typing import Tuple\n\ndef median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "from typing import Union\n\ndef median_numbers(a: int, b: int, c: int) -> Union[int, float]:\n    return sorted([a, b, c])[1]", "def median_numbers(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]"], "outputs": "[[55], [20], [20], [0], [7], [10], [75], [-75], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[25, 55, 65], [10, 20, 30], [30, 10, 20], [-5, 0, 5], [7, 7, 7], [10, 10, 20], [100, 50, 75], [-100, -50, -75], [-7, 0, 7], [0, 0, 0]]", "input_output_examples": "[[[25, 55, 65]], [[55.0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/398", "original_requirement": "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> int:\n\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sum_of_digits(nums: List[int]) -> int:\n\"\"\"\nWrite a function to compute the sum of digits of each number of a given list.\nassert sum_of_digits([10,2,56])==14\n\"\"\"", "entry_point": "sum_of_digits", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(number))) for number in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))", "from typing import List\n\ndef sum_of_digits(nums: List[int]) -> int:\n    return sum((sum((int(digit) for digit in str(num))) for num in nums))"], "outputs": "[[14], [0], [0], [6], [18], [45], ['ValueError'], [0], [19], [5], [19]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[10, 2, 56]], [[]], [[0]], [[123]], [[111, 222, 333]], [[987654321]], [[-10, 23, 45]], [[0, 0, 0]], [[1, 9, 27]], [[5]], [[99, 100]]]", "input_output_examples": "[[[[10, 2, 56]]], [[14]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.16666666666666663, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/404", "original_requirement": "def minimum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def minimum(a: int, b: int) -> int:\n\"\"\"\nWrite a python function to find the minimum of two numbers.\nassert minimum(1,2) == 1\n\"\"\"", "entry_point": "minimum", "cluster_list": [{"programs_str": ["def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return min(a, b)", "from typing import int\n\ndef minimum(a: int, b: int) -> int:\n    return a if a < b else b", "from typing import Any\n\ndef minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "from typing import Any\n\ndef minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "from typing import Tuple\n\ndef minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b", "from typing import Tuple\n\ndef minimum(a: int, b: int) -> int:\n    return a if a < b else b", "def minimum(a: int, b: int) -> int:\n    return a if a < b else b"], "outputs": "[[1], [-5], [50], [-20], [0], [-999999]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1, 2], [-5, 0], [100, 50], [-10, -20], [0, 0], [999999, -999999]]", "input_output_examples": "[[[1, 2]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/405", "original_requirement": "def check_tuplex(tuplex: tuple, element: object) -> bool:\n\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def check_tuplex(tuplex: tuple, element: object) -> bool:\n\"\"\"\nWrite a function to check whether an element exists within a tuple.\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\"\"\"", "entry_point": "check_tuplex", "cluster_list": [{"programs_str": ["def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "from typing import Tuple, Any\n\ndef check_tuplex(tuplex: Tuple[Any, ...], element: Any) -> bool:\n    return element in tuplex", "from typing import Tuple, Any\n\ndef check_tuplex(tuplex: Tuple[Any, ...], element: Any) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "def check_tuplex(tuplex: tuple, element: object) -> bool:\n    return element in tuplex", "from typing import Tuple, Any\n\ndef check_tuplex(tuplex: Tuple[Any, ...], element: Any) -> bool:\n    return element in tuplex"], "outputs": "[[True], [True], [True], [True], [False], [True], [False], [True], [True], [False], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r'], [(1, 2, 3, 4, 5), 3], [(None, False, True, 'test'), None], [(-1, -2, -3, -4, -5), -5], [(('nested', 'tuple'), 'inner'), 'nested'], [(7.0, 8.5, 9.2, 10.0), 8.5], [(1, 2, 3), 4], [([], {}, set()), []], [(1,), 1], [(1,), 2], [(8, 9, 10), '8'], [(True, False, True), 0], [(True, False), False]]", "input_output_examples": "[[[('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/406", "original_requirement": "def find_Parity(x: int) -> bool:\n\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def find_Parity(x: int) -> bool:\n\"\"\"\nWrite a python function to find whether the parity of a given number is odd.\nassert find_Parity(12) == False\n\"\"\"", "entry_point": "find_Parity", "cluster_list": [{"programs_str": ["def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 == 1", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 == 1", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 == 1", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "from typing import Any\n\ndef find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "from typing import Any\n\ndef find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 == 1", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0", "def find_Parity(x: int) -> bool:\n    return bin(x).count('1') % 2 != 0"], "outputs": "[[False], [True], [True], [False], [True], [False], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [9], [100], [12345], [-1], [-2], [2147483647], [-2147483648]]", "input_output_examples": "[[[12]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.19999999999999996, "original_avg_pass_rate": 0.6218181818181818, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/409", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n\"\"\"\nWrite a function to find the minimum product from the pairs of tuples within a given list.\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\"\"\"", "entry_point": "min_product_tuple", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((x * y for x, y in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((x * y for x, y in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    products = [a * b for a, b in list1]\n    return min(products)", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))", "from typing import List, Tuple\n\ndef min_product_tuple(list1: List[Tuple[int, int]]) -> int:\n    return min((a * b for a, b in list1))"], "outputs": "[[8], [4], [2], ['ValueError'], [0], [1], [-6], [-20], [0], [-9999700002]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[(2, 7), (2, 6), (1, 8), (4, 9)]], [[(5, 3), (10, 2), (1, 4)]], [[(1, 2)]], [[]], [[(0, 4), (3, 5), (0, 7)]], [[(1, 1), (2, 2), (3, 3)]], [[(2, -3), (-1, 4), (-5, -6)]], [[(-10, 2), (-1, -1), (-3, -1)]], [[(100, 0), (-100, 0), (0, 0)]], [[(99999, 99998), (-99999, 99998), (-99999, -99998), (1, -99998)]]]", "input_output_examples": "[[[[(2, 7), (2, 6), (1, 8), (4, 9)]]], [[8]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/410", "original_requirement": "from typing import List\nfrom typing import Union\n\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"", "repaired_requirement": "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    \"\"\"\n    Write a function to find the minimum integer value in a given heterogeneous list.\n    \n    The function should:\n    - Only consider integers in the list when determining the minimum value.\n    - Raise a ValueError if the list is empty or if it contains no integers.\n    \n    Examples:\n    assert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\n    \n    Edge cases:\n    - Input: [] (an empty list)\n      Expected Output: ValueError\n    - Input: ['Python', 'version'] (a list with no integers)\n      Expected Output: ValueError\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\nfrom typing import Union\n\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n\"\"\"\nWrite a function to find the minimum value in a given heterogeneous list.\nassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\"\"\"", "entry_point": "min_val", "cluster_list": [{"programs_str": ["from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    return min((item for item in listval if isinstance(item, int)))", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    return min((item for item in listval if isinstance(item, int)))", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [item for item in listval if isinstance(item, int)]\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [item for item in listval if isinstance(item, int)]\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [val for val in listval if isinstance(val, int)]\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [val for val in listval if isinstance(val, int)]\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    return min((x for x in listval if isinstance(x, int)))", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [x for x in listval if isinstance(x, int)]\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [value for value in listval if isinstance(value, int)]\n    if not int_values:\n        raise ValueError('No integers in the list')\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    numeric_values = [item for item in listval if isinstance(item, int)]\n    return min(numeric_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    return min((item for item in listval if isinstance(item, int)))", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [item for item in listval if isinstance(item, int)]\n    return min(int_values)"], "outputs": "[[2], [1], [-10], [2], [0], [1000], [5], [0], [-3], ['ValueError']]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    min_int = float('inf')\n    for item in listval:\n        if isinstance(item, int):\n            if item < min_int:\n                min_int = item\n    return min_int", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    min_value = float('inf')\n    for item in listval:\n        if isinstance(item, int):\n            if item < min_value:\n                min_value = item\n    return min_value"], "outputs": "[[2], [1], [-10], [2], [0], [1000], [5], [0], [-3], [inf]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    numeric_values = [item for item in listval if isinstance(item, int)]\n    return min(numeric_values) if numeric_values else None", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [item for item in listval if isinstance(item, int)]\n    return min(int_values) if int_values else None"], "outputs": "[[2], [1], [-10], [2], [0], [1000], [5], [0], [-3], [None]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.5816718657178868, "llm_generated_inputs": "[[[3, 2, 4, 5]], [[5, 1, 7, 9]], [[-10, 0, -5, 3]], [['Python', 3, 2, 4, 5, 'version']], [['a', 'b', 'c', 1, 0]], [[1000]], [['abc', 'xyz', 5]], [[3.5, 2.1, 'test', 0]], [[True, 2, False, -3]], [[]]]", "input_output_examples": "[[[['Python', 3, 2, 4, 5, 'version']]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    \"\"\"\n    Write a function to find the minimum integer value in a given heterogeneous list.\n    \n    The function should:\n    - Only consider integers in the list when determining the minimum value.\n    - Raise a ValueError if the list is empty or if it contains no integers.\n    \n    Examples:\n    assert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\n    \n    Edge cases:\n    - Input: [] (an empty list)\n      Expected Output: ValueError\n    - Input: ['Python', 'version'] (a list with no integers)\n      Expected Output: ValueError\n    \"\"\"", "entry_point": "min_val", "cluster_list": [{"programs_str": ["from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integers = [item for item in listval if isinstance(item, int)]\n    if not integers:\n        raise ValueError('The list is either empty or contains no integers.')\n    return min(integers)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [x for x in listval if isinstance(x, int)]\n    if not int_values:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integers = [item for item in listval if isinstance(item, int)]\n    if not integers:\n        raise ValueError('The list is either empty or contains no integers')\n    return min(integers)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [x for x in listval if isinstance(x, int)]\n    if not int_values:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [item for item in listval if isinstance(item, int)]\n    if not int_values:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integers = [item for item in listval if isinstance(item, int)]\n    if not integers:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(integers)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    valid_integers = [item for item in listval if isinstance(item, int)]\n    if not valid_integers:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(valid_integers)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    if not listval or all((not isinstance(item, int) for item in listval)):\n        raise ValueError('The list is empty or contains no integers.')\n    return min((item for item in listval if isinstance(item, int)))", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [item for item in listval if isinstance(item, int)]\n    if not int_values:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integer_values = [item for item in listval if isinstance(item, int)]\n    if not integer_values:\n        raise ValueError('The list is either empty or contains no integers.')\n    return min(integer_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integers = [item for item in listval if isinstance(item, int)]\n    if not integers:\n        raise ValueError('The list is either empty or contains no integers.')\n    return min(integers)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integers = [item for item in listval if isinstance(item, int)]\n    if not integers:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(integers)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integers = [item for item in listval if isinstance(item, int)]\n    if not integers:\n        raise ValueError('List is empty or contains no integers')\n    return min(integers)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integer_values = [x for x in listval if isinstance(x, int)]\n    if not integer_values:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(integer_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    int_values = [item for item in listval if isinstance(item, int)]\n    if not int_values:\n        raise ValueError('The list is either empty or contains no integers.')\n    return min(int_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integers = [item for item in listval if isinstance(item, int)]\n    if not integers:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(integers)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integer_values = [item for item in listval if isinstance(item, int)]\n    if not integer_values:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(integer_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integer_values = [item for item in listval if isinstance(item, int)]\n    if not integer_values:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(integer_values)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integers = [item for item in listval if isinstance(item, int)]\n    if not integers:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(integers)", "from typing import List, Union, Any\n\ndef min_val(listval: List[Union[int, Any]]) -> int:\n    integer_values = [item for item in listval if isinstance(item, int)]\n    if not integer_values:\n        raise ValueError('The list is empty or contains no integers.')\n    return min(integer_values)"], "outputs": "[[2], [1], [-10], [2], [0], [1000], [5], [0], [-3], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 2, 4, 5]], [[5, 1, 7, 9]], [[-10, 0, -5, 3]], [['Python', 3, 2, 4, 5, 'version']], [['a', 'b', 'c', 1, 0]], [[1000]], [['abc', 'xyz', 5]], [[3.5, 2.1, 'test', 0]], [[True, 2, False, -3]], [[]]]", "input_output_examples": "[[[['Python', 3, 2, 4, 5, 'version']]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/412", "original_requirement": "from typing import List\n\n\ndef remove_odd(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef remove_odd(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to remove odd numbers from a given list.\nassert remove_odd([1,2,3]) == [2]\n\"\"\"", "entry_point": "remove_odd", "cluster_list": [{"programs_str": ["from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef remove_odd(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]"], "outputs": "[[[2]], [[]], [[2, 4, 6]], [[]], [[0, 2, -4]], [[]], [[-2]], [[10, 12]], [[2]], [[0]], [[100, 50]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[]], [[2, 4, 6]], [[1, 3, 5]], [[0, 2, -4]], [[7]], [[-3, -2, -1]], [[9, 10, 11, 12]], [[1, 1, 1, 2]], [[1, 0]], [[100, 3, 25, 50]]]", "input_output_examples": "[[[[1, 2, 3]]], [[[2]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/413", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List\n\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List\n\"\"\"\nWrite a function to extract the nth element from a given list of tuples.\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\"\"\"", "entry_point": "extract_nth_element", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [tup[n] for tup in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [tup[n] for tup in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [tup[n] for tup in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [tup[n] for tup in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [tup[n] for tup in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [item[n] for item in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [t[n] for t in list1]", "from typing import List, Tuple\n\ndef extract_nth_element(list1: List[Tuple], n: int) -> List:\n    return [tup[n] for tup in list1]"], "outputs": "[[['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']], [[98, 97, 91, 94]], [[99, 96, 94, 98]], [[1, 2, 3]], [[2, 4, 6]], [['item1', 'item2', 'item3']], ['IndexError'], ['IndexError'], ['IndexError'], [['values', 'data']], [['Greyson Fulton']], ['IndexError'], [['value']], [[1]], ['IndexError'], [[98, 97]], ['IndexError'], [[]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0], [[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1], [[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2], [[('A', 1), ('B', 2), ('C', 3)], 1], [[('A', 1, 2), ('B', 3, 4), ('C', 5, 6)], 2], [[('item1',), ('item2',), ('item3',)], 0], [[(), (), ()], 0], [[()], 0], [[('single_element',)], 1], [[('multiple', 1, 2, 'values'), ('elements', 3, 4, 'data')], 3], [[('Greyson Fulton', 98, 99)], 0], [[('value',)], 1], [[('value',)], -1], [[('value', 1)], -1], [[('value', 1)], 2], [[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96)], -2], [[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96, 95)], 3], [[], 0], [[], -1]]", "input_output_examples": "[[[[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0]], [[['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/414", "original_requirement": "from typing import List\n\n\ndef overlapping(list1: List, list2: List) -> bool:\n\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef overlapping(list1: List, list2: List) -> bool:\n\"\"\"\nWrite a python function to check whether any value in a sequence exists in a sequence or not.\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\"\"\"", "entry_point": "overlapping", "cluster_list": [{"programs_str": ["from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List[int], list2: List[int]) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    set1 = set(list1)\n    for item in list2:\n        if item in set1:\n            return True\n    return False", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((element in list2 for element in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))", "from typing import List\n\ndef overlapping(list1: List, list2: List) -> bool:\n    return any((item in list2 for item in list1))"], "outputs": "[[False], [True], [True], [False], [False], [False], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5], [6, 7, 8, 9]], [[1, 2, 3], [3, 4, 5]], [[1, 2, 3], [1, 2, 3]], [[7, 8, 9], []], [[], [7, 8, 9]], [[], []], [['a', 'b', 'c'], ['d', 'e', 'f']], [['x', 'y', 'z'], ['x', 'y', 'z']], [[1, 'a', True], ['a', False, 1]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5], [6, 7, 8, 9]]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/415", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"", "repaired_requirement": "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Write a Python function to find a pair of integers from a given array that produces the numerically largest product. \n    The function should adhere to the following rules:\n    \n    1. If the input array has fewer than two elements, return the default value `(0, 0)`.\n    2. Negative numbers are valid candidates for the pair, and the function should consider their product when determining the numerically largest product.\n    3. The order of the pair in the output should match the order in which the integers appear in the input array.\n    4. The function should iterate through all possible pairs without sorting the input array.\n    5. The input array may include zeros, duplicate values, and both positive and negative integers.\n    6. If there are multiple pairs with the same maximum product, return the first pair encountered during iteration.\n    7. The function maximizes the numeric product, not the absolute product.\n\n    Example:\n    assert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n\"\"\"\nWrite a python function to find a pair with highest product from a given array of integers.\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\"\"\"", "entry_point": "max_Product", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    arr.sort(reverse=True)\n    return (arr[0], arr[1]) if len(arr) >= 2 else (None, None)"], "outputs": "[[(8, 7)], [(5, 2)], [(10, 1)], [(10, 10)], [(None, None)], [(0, 0)], [(-2, -3)], [(4, 2)], [(999, -1000)], [(None, None)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3, 4, 7, 0, 8, 4]], [(8, 7)], [(7, 8)]]]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    max_product = float('-inf')\n    pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    max_product = float('-inf')\n    pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"], "outputs": "[[(7, 8)], [(-3, -4)], [(1, 10)], [(10, 10)], [(0, 0)], [(0, 0)], [(-4, -5)], [(2, 4)], [(999, -1000)], [(0, 0)]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements')\n    max_product = float('-inf')\n    pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair"], "outputs": "[[(7, 8)], [(-3, -4)], [(1, 10)], [(10, 10)], ['ValueError'], [(0, 0)], [(-4, -5)], [(2, 4)], [(999, -1000)], ['ValueError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must have at least two elements')\n    max1, max2 = (float('-inf'), float('-inf'))\n    for number in arr:\n        if number > max1:\n            max2 = max1\n            max1 = number\n        elif number > max2:\n            max2 = number\n    return (max1, max2)"], "outputs": "[[(8, 7)], [(5, 2)], [(10, 1)], [(10, 10)], ['ValueError'], [(0, 0)], [(-2, -3)], [(4, 2)], [(999, -1000)], ['ValueError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3, 4, 7, 0, 8, 4]], [(8, 7)], [(7, 8)]]]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    n = len(arr)\n    if n < 2:\n        return (0, 0)\n    max1, max2 = (float('-inf'), float('-inf'))\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max1, max2)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max1 = max2 = float('-inf')\n    for number in arr:\n        if number > max1:\n            max2 = max1\n            max1 = number\n        elif number > max2:\n            max2 = number\n    return (max1, max2) if max1 * max2 != float('-inf') else (0, 0)"], "outputs": "[[(8, 7)], [(5, 2)], [(10, 1)], [(10, 10)], [(0, 0)], [(0, 0)], [(-2, -3)], [(4, 2)], [(999, -1000)], [(0, 0)]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3, 4, 7, 0, 8, 4]], [(8, 7)], [(7, 8)]]]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    arr.sort()\n    product_with_lowest = arr[0] * arr[1]\n    product_with_highest = arr[-1] * arr[-2]\n    if product_with_highest > product_with_lowest:\n        return (arr[-2], arr[-1])\n    else:\n        return (arr[0], arr[1])", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    if max1 * max2 > min1 * min2:\n        return (max2, max1)\n    else:\n        return (min1, min2)"], "outputs": "[[(7, 8)], [(-4, -3)], [(1, 10)], [(10, 10)], [(0, 0)], [(0, 0)], [(-5, -4)], [(2, 4)], [(-1000, 999)], [(0, 0)]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max1, max2 = sorted(arr[:2])\n    for num in arr[2:]:\n        if num > max1:\n            max1, max2 = (num, max1)\n        elif num > max2:\n            max2 = num\n    return (max2, max1)"], "outputs": "[[(7, 8)], [(2, 5)], [(10, 1)], [(10, 10)], [(0, 0)], [(0, 0)], [(-2, -3)], [(-1, 4)], [(999, -1000)], [(0, 0)]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two numbers')\n    max_num = second_max_num = float('-inf')\n    for num in arr:\n        if num > max_num:\n            second_max_num = max_num\n            max_num = num\n        elif num > second_max_num:\n            second_max_num = num\n    min_num = second_min_num = float('inf')\n    for num in arr:\n        if num < min_num:\n            second_min_num = min_num\n            min_num = num\n        elif num < second_min_num:\n            second_min_num = num\n    product_max = max_num * second_max_num\n    product_min = min_num * second_min_num\n    if product_max >= product_min:\n        return (second_max_num, max_num)\n    else:\n        return (min_num, second_min_num)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array should have at least two elements')\n    arr.sort()\n    return (arr[-2], arr[-1]) if arr[-1] * arr[-2] > arr[0] * arr[1] else (arr[0], arr[1])"], "outputs": "[[(7, 8)], [(-4, -3)], [(1, 10)], [(10, 10)], ['ValueError'], [(0, 0)], [(-5, -4)], [(2, 4)], [(-1000, 999)], ['ValueError']]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max1, max2 = (float('-inf'), float('-inf'))\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max2, max1)"], "outputs": "[[(7, 8)], [(2, 5)], [(1, 10)], [(10, 10)], [(0, 0)], [(0, 0)], [(-3, -2)], [(2, 4)], [(-1000, 999)], [(0, 0)]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('Array must contain at least two elements.')\n    max1, max2 = (float('-inf'), float('-inf'))\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n    return (max2, max1)"], "outputs": "[[(7, 8)], [(2, 5)], [(1, 10)], [(10, 10)], ['ValueError'], [(0, 0)], [(-3, -2)], [(2, 4)], [(-1000, 999)], ['ValueError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max1, max2 = (float('-inf'), float('-inf'))\n    min1, min2 = (float('inf'), float('inf'))\n    for num in arr:\n        if num > max1:\n            max2, max1 = (max1, num)\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2, min1 = (min1, num)\n        elif num < min2:\n            min2 = num\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2, max1 = (max1, num)\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2, min1 = (min1, num)\n        elif num < min2:\n            min2 = num\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"], "outputs": "[[(8, 7)], [(-4, -3)], [(1, 10)], [(10, 10)], [(0, 0)], [(0, 0)], [(-5, -4)], [(4, 2)], [(-1000, 999)], [(0, 0)]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3, 4, 7, 0, 8, 4]], [(8, 7)], [(7, 8)]]]"}, {"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        raise ValueError('The array must contain at least two elements.')\n    max1 = max2 = float('-inf')\n    min1 = min2 = float('inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)"], "outputs": "[[(8, 7)], [(-4, -3)], [(1, 10)], [(10, 10)], ['ValueError'], [(0, 0)], [(-5, -4)], [(4, 2)], [(-1000, 999)], ['ValueError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3, 4, 7, 0, 8, 4]], [(8, 7)], [(7, 8)]]]"}], "entropy": 0.9439941754198046, "llm_generated_inputs": "[[[1, 2, 3, 4, 7, 0, 8, 4]], [[0, -1, 5, -3, -4, 2]], [[1, 10]], [[10, 10]], [[5]], [[0, 0, 0]], [[-2, -3, -4, -5]], [[-1, 2, -3, 4]], [[999, -1000]], [[]]]", "input_output_examples": "[[[[1, 2, 3, 4, 7, 0, 8, 4]]], [[(7, 8)]]]", "weighted_test_consistency": 0.6000000000000001, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    Write a Python function to find a pair of integers from a given array that produces the numerically largest product. \n    The function should adhere to the following rules:\n    \n    1. If the input array has fewer than two elements, return the default value `(0, 0)`.\n    2. Negative numbers are valid candidates for the pair, and the function should consider their product when determining the numerically largest product.\n    3. The order of the pair in the output should match the order in which the integers appear in the input array.\n    4. The function should iterate through all possible pairs without sorting the input array.\n    5. The input array may include zeros, duplicate values, and both positive and negative integers.\n    6. If there are multiple pairs with the same maximum product, return the first pair encountered during iteration.\n    7. The function maximizes the numeric product, not the absolute product.\n\n    Example:\n    assert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)\n    \"\"\"", "entry_point": "max_Product", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    best_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                best_pair = (arr[i], arr[j])\n    return best_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    result_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result_pair = (arr[i], arr[j])\n    return result_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    result_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result_pair = (arr[i], arr[j])\n    return result_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    result_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result_pair = (arr[i], arr[j])\n    return result_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    result_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result_pair = (arr[i], arr[j])\n    return result_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    result_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result_pair = (arr[i], arr[j])\n    return result_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    result = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result = (arr[i], arr[j])\n    return result", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    result_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result_pair = (arr[i], arr[j])\n    return result_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    result_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result_pair = (arr[i], arr[j])\n    return result_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n    return pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    best_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                best_pair = (arr[i], arr[j])\n    return best_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = None\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if max_product is None or product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair", "from typing import List, Tuple\n\ndef max_Product(arr: List[int]) -> Tuple[int, int]:\n    if len(arr) < 2:\n        return (0, 0)\n    max_product = float('-inf')\n    max_pair = (0, 0)\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair"], "outputs": "[[(7, 8)], [(-3, -4)], [(1, 10)], [(10, 10)], [(0, 0)], [(0, 0)], [(-4, -5)], [(2, 4)], [(999, -1000)], [(0, 0)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 7, 0, 8, 4]], [[0, -1, 5, -3, -4, 2]], [[1, 10]], [[10, 10]], [[5]], [[0, 0, 0]], [[-2, -3, -4, -5]], [[-1, 2, -3, 4]], [[999, -1000]], [[]]]", "input_output_examples": "[[[[1, 2, 3, 4, 7, 0, 8, 4]]], [[(7, 8)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.29396551724137937, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.8879310344827587, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/418", "original_requirement": "from typing import List\n\n\ndef Find_Max(lst: List[str]) -> str:\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    \"\"\"\n    Write a Python function to find the sublist within a list of lists that has the maximum length.\n    \n    - The input `lst` is expected to be a list of lists of strings (`List[List[str]]`).\n    - If the input list `lst` is empty, the function should raise a `ValueError`.\n    - The function should return the sublist with the maximum length if the input list is non-empty.\n    \n    Example:\n    assert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef Find_Max(lst: List[str]) -> str:\n\"\"\"\nWrite a python function to find the element of a list having maximum length.\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\"\"\"", "entry_point": "Find_Max", "cluster_list": [{"programs_str": ["from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List, Union\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=lambda x: len(x))", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List, Union\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List, Union\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    return max(lst, key=len)", "from typing import List, Union\n\ndef Find_Max(lst: List[Union[List[str], str]]) -> Union[List[str], str]:\n    return max(lst, key=len)", "from typing import List, Any\n\ndef Find_Max(lst: List[List[Any]]) -> List[Any]:\n    return max(lst, key=len)"], "outputs": "[['A'], ['A'], ['A'], ['ValueError'], ['longest'], ['abcd'], ['same'], ['one_element'], ['12345678'], ['abc']]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        return []\n    return max(lst, key=len)"], "outputs": "[['A'], ['A'], ['A'], [[]], ['longest'], ['abcd'], ['same'], ['one_element'], ['12345678'], ['abc']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[['A']], [['A', 'B']], [['A', 'B', 'C']], [[]], [['short', 'longer', 'longest']], [['a', 'abcd', 'abc', 'ab']], [['same', 'same', 'same']], [['one_element']], [['123', '12345', '12', '12345678']], [['', 'a', 'ab', 'abc']]]", "input_output_examples": "[[[[['A'], ['A', 'B'], ['A', 'B', 'C']]]], [[['A', 'B', 'C']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    \"\"\"\n    Write a Python function to find the sublist within a list of lists that has the maximum length.\n    \n    - The input `lst` is expected to be a list of lists of strings (`List[List[str]]`).\n    - If the input list `lst` is empty, the function should raise a `ValueError`.\n    - The function should return the sublist with the maximum length if the input list is non-empty.\n    \n    Example:\n    assert Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']]) == ['A', 'B', 'C']\n    \"\"\"", "entry_point": "Find_Max", "cluster_list": [{"programs_str": ["from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty.')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty.')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list cannot be empty.')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('The input list is empty.')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list cannot be empty.')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('The input list is empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list cannot be empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty.')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty.')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('The input list is empty.')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty')\n    return max(lst, key=len)", "from typing import List\n\ndef Find_Max(lst: List[List[str]]) -> List[str]:\n    if not lst:\n        raise ValueError('Input list is empty')\n    return max(lst, key=len)"], "outputs": "[['A'], ['A'], ['A'], ['ValueError'], ['longest'], ['abcd'], ['same'], ['one_element'], ['12345678'], ['abc']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['A']], [['A', 'B']], [['A', 'B', 'C']], [[]], [['short', 'longer', 'longest']], [['a', 'abcd', 'abc', 'ab']], [['same', 'same', 'same']], [['one_element']], [['123', '12345', '12', '12345678']], [['', 'a', 'ab', 'abc']]]", "input_output_examples": "[[[[['A'], ['A', 'B'], ['A', 'B', 'C']]]], [[['A', 'B', 'C']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/419", "original_requirement": "from typing import List\n\n\ndef round_and_sum(list1: List[float]) -> float:\n\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef round_and_sum(list1: List[float]) -> float:\n\"\"\"\nWrite a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\"\"\"", "entry_point": "round_and_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    return rounded_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers) * len(list1)\n    return total_sum", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    result = total_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    return rounded_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    return rounded_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_list = [round(num) for num in list1]\n    total_sum = sum(rounded_list)\n    result = total_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    return rounded_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(x) for x in list1))\n    result = rounded_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    return rounded_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_numbers = [round(num) for num in list1]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_values = [round(num) for num in list1]\n    total_sum = sum(rounded_values)\n    result = total_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    total_sum = sum((round(num) for num in list1))\n    return total_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    result = rounded_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    result = rounded_sum * len(list1)\n    return result", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(num) for num in list1))\n    return rounded_sum * len(list1)", "from typing import List\n\ndef round_and_sum(list1: List[float]) -> float:\n    rounded_sum = sum((round(number) for number in list1))\n    result = rounded_sum * len(list1)\n    return result"], "outputs": "[[243], [0], [0], [2], [30], [-8], [9], [3], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]], [[0.5, 1.5, -2.5]], [[0.0]], [[1.999]], [[22.4, 4.0, -16.22]], [[-1.5, -2.5]], [[3.7, 2.6, -3.9]], [[0.1, -0.5, 0.999]], [[]], [[1000000.1, -999999.7]]]", "input_output_examples": "[[[[22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5]]], [[243]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/420", "original_requirement": "def cube_Sum(n: int) -> int:\n\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def cube_Sum(n: int) -> int:\n\"\"\"\nWrite a python function to find the cube sum of first n even natural numbers.\nassert cube_Sum(2) == 72\n\"\"\"", "entry_point": "cube_Sum", "cluster_list": [{"programs_str": ["def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    return sum((x ** 3 for x in even_numbers))", "from typing import List\n\ndef cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "from typing import List\n\ndef cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))", "def cube_Sum(n: int) -> int:\n    return sum(((2 * i) ** 3 for i in range(1, n + 1)))"], "outputs": "[[0], [8], [72], [1800], [24200], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [5], [10], [-1]]", "input_output_examples": "[[[2]], [[72]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/421", "original_requirement": "def concatenate_tuple(test_tup: tuple) -> str:\n\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def concatenate_tuple(test_tup: tuple) -> str:\n\"\"\"\nWrite a function to concatenate each element of tuple by the delimiter.\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\"\"\"", "entry_point": "concatenate_tuple", "cluster_list": [{"programs_str": ["def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "from typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join((str(x) for x in test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "from typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "from typing import Tuple\n\ndef concatenate_tuple(test_tup: Tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join(map(str, test_tup))", "def concatenate_tuple(test_tup: tuple) -> str:\n    return '-'.join((str(item) for item in test_tup))"], "outputs": "[['ID-is-4-UTS'], ['1-2-3'], ['True-False-Test'], [''], ['123'], ['None-Empty-45'], ['One-Two-Three-Four-Five'], ['1-Two-3.0-True'], [\"['List']-{'Key': 'Value'}-('Tuple',)\"], ['1000000-LargeNumber-Text']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[('ID', 'is', 4, 'UTS')], [(1, 2, 3)], [(True, False, 'Test')], [()], [(123,)], [(None, 'Empty', 45)], [('One', 'Two', 'Three', 'Four', 'Five')], [(1, 'Two', 3.0, True)], [(['List'], {'Key': 'Value'}, ('Tuple',))], [(1000000, 'LargeNumber', 'Text')]]", "input_output_examples": "[[[('ID', 'is', 4, 'UTS')]], [['ID-is-4-UTS']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/422", "original_requirement": "def find_Average_Of_Cube(n: int) -> float:\n\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def find_Average_Of_Cube(n: int) -> float:\n\"\"\"\nWrite a python function to find the average of cubes of first n natural numbers.\nassert find_Average_Of_Cube(2) == 4.5\n\"\"\"", "entry_point": "find_Average_Of_Cube", "cluster_list": [{"programs_str": ["def find_Average_Of_Cube(n: int) -> float:\n    return sum((x ** 3 for x in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "from typing import List\n\ndef find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    cubes_sum = sum((i ** 3 for i in range(1, n + 1)))\n    return cubes_sum / n", "from typing import List\n\ndef find_Average_Of_Cube(n: int) -> float:\n    return sum((x ** 3 for x in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "from typing import List\n\ndef find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "from typing import List\n\ndef find_Average_Of_Cube(n: int) -> float:\n    return sum([i ** 3 for i in range(1, n + 1)]) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "from typing import List\n\ndef find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "def find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n", "from typing import List\n\ndef find_Average_Of_Cube(n: int) -> float:\n    return sum((i ** 3 for i in range(1, n + 1))) / n"], "outputs": "[[1.0], [4.5], [45.0], [302.5], ['ZeroDivisionError'], [-0.0], [250500250.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [5], [10], [0], [-5], [1000]]", "input_output_examples": "[[[2]], [[4.5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/424", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n\"\"\"\nWrite a function to extract only the rear index element of each string in the given tuple.\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\"\"\"", "entry_point": "extract_rear", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [item[-1] for item in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [string[-1] for string in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [string[-1] for string in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [word[-1] for word in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [item[-1] for item in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [string[-1] for string in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [word[-1] for word in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [word[-1] for word in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [string[-1] for string in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [word[-1] for word in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [word[-1] for word in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [item[-1] for item in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [s[-1] for s in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [string[-1] for string in test_tuple]", "from typing import List, Tuple\n\ndef extract_rear(test_tuple: Tuple[str, ...]) -> List[str]:\n    return [element[-1] for element in test_tuple]"], "outputs": "[[['s', 'r', 's']], [['c', 'z', '3', 't']], [['e']], [['t', 't', 'k', 'r']], ['IndexError'], ['IndexError'], [['A', 'B', 'X']], [['y', 'r']], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[('Mers', 'for', 'Vers')], [('abc', 'xyz', '123', 'test')], [('single',)], [('last', 'element', 'check', 'rear')], [('', 'empty', 'tuple', 'check')], [('',)], [('A', 'B', 'X')], [('only', 'rear')], [()]]", "input_output_examples": "[[[('Mers', 'for', 'Vers')]], [[['s', 'r', 's']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/425", "original_requirement": "from typing import List\n\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n\"\"\"\nWrite a function to count the number of sublists containing a particular element.\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\"\"\"", "entry_point": "count_element_in_list", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((1 for sublist in list1 if x in sublist))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))", "from typing import List, Any\n\ndef count_element_in_list(list1: List[List[Any]], x: Any) -> int:\n    return sum((x in sublist for sublist in list1))"], "outputs": "[[3], [0], [4], [0], [0], [4], [3], [3], [4], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1], [[[2, 4], [6, 8], [10, 12]], 1], [[[1, 3, 1], [5, 1, 7], [1, 11, 1], [1, 15, 7]], 1], [[[], [5, 7], [8, 9]], 1], [[], 1], [[[None, 3], [5, None], [None, 11], [None, 15]], None], [[[1.5, 3.2], [5.1, 7.3], [1.5, 11.7], [1.5, 15.8]], 1.5], [[['a', 3], ['b', 7], ['a', 11], ['a', 15, 'b']], 'a'], [[[True, False], [True, True], [False, True], [True, False]], True], [[[{'key': 1}, {'key': 2}], [{'key': 3}, {'key': 1}], [{'key': 1}]], {'key': 1}]]", "input_output_examples": "[[[[[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/426", "original_requirement": "from typing import List\n\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to filter odd numbers.\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\"\"\"", "entry_point": "filter_oddnumbers", "cluster_list": [{"programs_str": ["from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]", "from typing import List\n\ndef filter_oddnumbers(nums: List[int]) -> List[int]:\n    return [num for num in nums if num % 2 != 0]"], "outputs": "[[[1, 3, 5, 7, 9]], [[11, 13, 15]], [[]], [[]], [[1]], [[]], [[1, 3, 5]], [[-1, -3, -5]], [[]], [[-1, -3, -5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[11, 13, 15]], [[2, 4, 6, 8, 10]], [[]], [[1]], [[0]], [[1, 3, 5, 2, 4, 6]], [[-1, -3, -5]], [[-2, -4, -6]], [[-1, -2, -3, -4, -5]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 3, 5, 7, 9]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/427", "original_requirement": "def change_date_format(dt: str) -> str:\n\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"", "repaired_requirement": "```python\ndef change_date_format(dt: str) -> str:\n    \"\"\"\n    Write a function to convert a date string from yyyy-mm-dd format to dd-mm-yyyy format.\n    \n    Requirements:\n    1. The input `dt` is assumed to be a string strictly adhering to the `yyyy-mm-dd` format with hyphen (`-`) delimiters.\n       - The function does not validate the input for correctness, structure, or adherence to calendar dates.\n       - Inputs that do not conform to the `yyyy-mm-dd` format (e.g., `2023/06/15`) will not be processed correctly and may produce unexpected outputs.\n    \n    2. The function performs string manipulation only:\n       - It splits the input string by `-` characters, reverses the order of the resulting segments, and rejoins them using `-` as the delimiter.\n       - The function does not validate the output or ensure it conforms to a valid date format.\n    \n    3. Invalid or non-existent dates (e.g., `1900-02-29`) are treated as plain strings and processed without raising errors.\n    \n    Examples:\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'\n    assert change_date_format(\"1900-02-29\") == '29-02-1900'\n    assert change_date_format(\"2023/06/15\") == '2023/06/15'\n    \"\"\"\n    return '-'.join(dt.split('-')[::-1])\n```", "original_clusters": {"requirement": "def change_date_format(dt: str) -> str:\n\"\"\"\nWrite a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\"\"\"", "entry_point": "change_date_format", "cluster_list": [{"programs_str": ["def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(reversed(dt.split('-')))", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "from typing import str\n\ndef change_date_format(dt: str) -> str:\n    year, month, day = dt.split('-')\n    return f'{day}-{month}-{year}'", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])"], "outputs": "[['02-01-2026'], ['25-12-1995'], ['29-02-2020'], ['01-01-2000'], ['31-12-2100'], ['01-01-0001'], ['31-12-9999'], ['15-06-2023'], ['20-08-1980'], ['28-02-2024'], ['29-02-2024'], ['28-02-1900'], ['29-02-1900'], ['01-13-2023'], ['05-00-2023'], ['32-06-2023'], ['00-06-2023'], ['gh-ef-abcd'], ['3-6-2023'], ['2023-06-23'], ['2023/06/15'], ['2023-06-15'], ['2023'], ['']]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def change_date_format(dt: str) -> str:\n    from datetime import datetime\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    return date_obj.strftime('%d-%m-%Y')", "def change_date_format(dt: str) -> str:\n    from datetime import datetime\n    return datetime.strptime(dt, '%Y-%m-%d').strftime('%d-%m-%Y')", "def change_date_format(dt: str) -> str:\n    from datetime import datetime\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    return date_obj.strftime('%d-%m-%Y')", "def change_date_format(dt: str) -> str:\n    from datetime import datetime\n    return datetime.strptime(dt, '%Y-%m-%d').strftime('%d-%m-%Y')", "def change_date_format(dt: str) -> str:\n    from datetime import datetime\n    date_obj = datetime.strptime(dt, '%Y-%m-%d')\n    return date_obj.strftime('%d-%m-%Y')", "def change_date_format(dt: str) -> str:\n    from datetime import datetime\n    parsed_date = datetime.strptime(dt, '%Y-%m-%d')\n    return parsed_date.strftime('%d-%m-%Y')"], "outputs": "[['02-01-2026'], ['25-12-1995'], ['29-02-2020'], ['01-01-2000'], ['31-12-2100'], ['01-01-0001'], ['31-12-9999'], ['15-06-2023'], ['20-08-1980'], ['28-02-2024'], ['29-02-2024'], ['28-02-1900'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['03-06-2023'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def change_date_format(dt: str) -> str:\n    parts = dt.split('-')\n    return f'{parts[2]}-{parts[1]}-{parts[0]}'"], "outputs": "[['02-01-2026'], ['25-12-1995'], ['29-02-2020'], ['01-01-2000'], ['31-12-2100'], ['01-01-0001'], ['31-12-9999'], ['15-06-2023'], ['20-08-1980'], ['28-02-2024'], ['29-02-2024'], ['28-02-1900'], ['29-02-1900'], ['01-13-2023'], ['05-00-2023'], ['32-06-2023'], ['00-06-2023'], ['gh-ef-abcd'], ['3-6-2023'], ['2023-06-23'], ['IndexError'], ['2023-06-15'], ['IndexError'], ['IndexError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7199877141320895, "llm_generated_inputs": "[['2026-01-02'], ['1995-12-25'], ['2020-02-29'], ['2000-01-01'], ['2100-12-31'], ['0001-01-01'], ['9999-12-31'], ['2023-06-15'], ['1980-08-20'], ['2024-02-28'], ['2024-02-29'], ['1900-02-28'], ['1900-02-29'], ['2023-13-01'], ['2023-00-05'], ['2023-06-32'], ['2023-06-00'], ['abcd-ef-gh'], ['2023-6-3'], ['23-06-2023'], ['2023/06/15'], ['15-06-2023'], ['2023'], ['']]", "input_output_examples": "[[['2026-01-02']], [['02-01-2026']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef change_date_format(dt: str) -> str:\n    \"\"\"\n    Write a function to convert a date string from yyyy-mm-dd format to dd-mm-yyyy format.\n    \n    Requirements:\n    1. The input `dt` is assumed to be a string strictly adhering to the `yyyy-mm-dd` format with hyphen (`-`) delimiters.\n       - The function does not validate the input for correctness, structure, or adherence to calendar dates.\n       - Inputs that do not conform to the `yyyy-mm-dd` format (e.g., `2023/06/15`) will not be processed correctly and may produce unexpected outputs.\n    \n    2. The function performs string manipulation only:\n       - It splits the input string by `-` characters, reverses the order of the resulting segments, and rejoins them using `-` as the delimiter.\n       - The function does not validate the output or ensure it conforms to a valid date format.\n    \n    3. Invalid or non-existent dates (e.g., `1900-02-29`) are treated as plain strings and processed without raising errors.\n    \n    Examples:\n    assert change_date_format(\"2026-01-02\") == '02-01-2026'\n    assert change_date_format(\"1900-02-29\") == '29-02-1900'\n    assert change_date_format(\"2023/06/15\") == '2023/06/15'\n    \"\"\"\n    return '-'.join(dt.split('-')[::-1])\n```", "entry_point": "change_date_format", "cluster_list": [{"programs_str": ["def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "from typing import List\n\ndef change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])", "def change_date_format(dt: str) -> str:\n    return '-'.join(dt.split('-')[::-1])"], "outputs": "[['02-01-2026'], ['25-12-1995'], ['29-02-2020'], ['01-01-2000'], ['31-12-2100'], ['01-01-0001'], ['31-12-9999'], ['15-06-2023'], ['20-08-1980'], ['28-02-2024'], ['29-02-2024'], ['28-02-1900'], ['29-02-1900'], ['01-13-2023'], ['05-00-2023'], ['32-06-2023'], ['00-06-2023'], ['gh-ef-abcd'], ['3-6-2023'], ['2023-06-23'], ['2023/06/15'], ['2023-06-15'], ['2023'], ['']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['2026-01-02'], ['1995-12-25'], ['2020-02-29'], ['2000-01-01'], ['2100-12-31'], ['0001-01-01'], ['9999-12-31'], ['2023-06-15'], ['1980-08-20'], ['2024-02-28'], ['2024-02-29'], ['1900-02-28'], ['1900-02-29'], ['2023-13-01'], ['2023-00-05'], ['2023-06-32'], ['2023-06-00'], ['abcd-ef-gh'], ['2023-6-3'], ['23-06-2023'], ['2023/06/15'], ['15-06-2023'], ['2023'], ['']]", "input_output_examples": "[[['2026-01-02']], [['02-01-2026']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.0756521739130435, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.13043478260869568, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/428", "original_requirement": "from typing import List\n\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort the given array by using shell sort.\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\"\"\"", "entry_point": "shell_sort", "cluster_list": [{"programs_str": ["from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list", "from typing import List\n\ndef shell_sort(my_list: List[int]) -> List[int]:\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list"], "outputs": "[[[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]], [[]], [[5]], [[5, 6, 7, 8, 9]], [[1, 3, 5, 7, 9]], [[4, 4, 4, 4]], [[-20, -3, 0, 11, 34]], [[50, 100]], [[1, 1, 2, 2, 3, 3]], [[-45, 0, 1, 99, 234, 234]], [[-3, -1, 0, 1, 7]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]], [[]], [[5]], [[9, 8, 7, 6, 5]], [[1, 3, 5, 7, 9]], [[4, 4, 4, 4]], [[34, -3, 0, 11, -20]], [[100, 50]], [[3, 2, 1, 3, 2, 1]], [[234, -45, 0, 1, 99, 234]], [[7, -3, -1, 0, 1]]]", "input_output_examples": "[[[[12, 23, 4, 5, 3, 2, 12, 81, 56, 95]]], [[[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/429", "original_requirement": "from typing import Tuple\n\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to extract the elementwise and tuples from the given two tuples.\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\"\"\"", "entry_point": "and_tuples", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a & b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef and_tuples(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((x & y for x, y in zip(test_tup1, test_tup2)))"], "outputs": "[[(0, 0, 2, 1)], [(0, 0, 0)], [(1, 0, 4)], [(8, 8, 8)], [(0,)], [(0,)], [(-14, -4, -8)], [(0, -4, 2, -11)], [(2147483647,)], [(0,)], [(0, 0, 0)], [()]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(10, 4, 6, 9), (5, 2, 3, 3)], [(0, 0, 0), (5, 2, 3)], [(15, 2, 7), (1, 8, 12)], [(8, 8, 8), (8, 8, 8)], [(10,), (5,)], [(10, 4, 6), (5,)], [(-10, -4, -6), (-5, -2, -3)], [(10, -4, 6, -9), (5, -2, 3, -3)], [(2147483647,), (2147483647,)], [(0,), (0,)], [(1024, 2048, 4096), (512, 1024, 2048)], [(), ()]]", "input_output_examples": "[[[(10, 4, 6, 9), (5, 2, 3, 3)]], [[(0, 0, 2, 1)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/430", "original_requirement": "def parabola_directrix(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"", "repaired_requirement": "```python\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Write a function to find the directrix of a parabola using the formula:\n    directrix = -((b ** 2 + 1) // (4 * a))\n    \n    The function takes three integer parameters:\n    - a: The coefficient of the quadratic term in the parabola equation.\n    - b: The coefficient of the linear term in the parabola equation.\n    - c: The constant term in the parabola equation (included in the signature but not used in the calculation).\n\n    Notes:\n    - The formula explicitly applies negation to the result of the division operation, not just the numerator.\n    - Ensure `a` is non-zero to avoid division by zero errors. If `a == 0`, the function must raise a `ValueError` with the message: \"Coefficient 'a' must be non-zero to avoid division by zero.\"\n    - The parameter `c` is included for consistency with the general form of a parabola equation but does not influence the calculation.\n    - The expected output for the given example is based on the formula provided.\n\n    Example:\n    assert parabola_directrix(5, 3, 2) == -198\n    \"\"\"\n```", "original_clusters": {"requirement": "def parabola_directrix(a: int, b: int, c: int) -> int:\n\"\"\"\nWrite a function to find the directrix of a parabola.\nassert parabola_directrix(5,3,2)==-198\n\"\"\"", "entry_point": "parabola_directrix", "cluster_list": [{"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    b_squared = b ** 2\n    four_ac = 4 * a * c\n    numerator = -(b_squared - four_ac + 1)\n    denominator = 4 * a\n    directrix = numerator // denominator\n    return directrix", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -1 * (b ** 2 - 4 * a * c + 1) // (4 * a)"], "outputs": "[[1], [1], ['ZeroDivisionError'], [-2], [1999], [-1], ['ZeroDivisionError'], [-19], [-250], [-9]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [1], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return c - (b * b + 1) // (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c + 1) // (4 * a))"], "outputs": "[[2], [2], ['ZeroDivisionError'], [-1], [2000], [0], ['ZeroDivisionError'], [-18], [-249], [-8]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [2], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 + 1) // (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 + 1) // (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b * b + 1) // (4 * a)"], "outputs": "[[-1], [-2], ['ZeroDivisionError'], [1], [-1001], [-1], ['ZeroDivisionError'], [6], [-250], [-3]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [-1], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -b ** 2 - 1 - 4 * a * c"], "outputs": "[[-50], [-17], [-2], [-17], [-16000001], [-1], [-1], [-12501], [-998002], [31]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [-50], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c - 1) // (4 * a)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -1 * (b ** 2 - 4 * a * c - 1) // (4 * a)"], "outputs": "[[1], [2], ['ZeroDivisionError'], [-3], [2000], [0], ['ZeroDivisionError'], [-19], [-250], [-8]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [1], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -c - (b * b + 1) // (4 * a)"], "outputs": "[[-2], [-4], ['ZeroDivisionError'], [5], [-4000], [0], ['ZeroDivisionError'], [32], [-249], [4]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [-2], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c + 1) * 100)"], "outputs": "[[3000], [700], [-200], [700], [799999900], [-100], [-100], [749900], [-99800200], [-6500]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [3000], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    directrix = -b ** 2 + 4 * a * c - 1\n    return directrix", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c + 1)", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -(b ** 2 - 4 * a * c + 1)"], "outputs": "[[30], [7], [-2], [7], [7999999], [-1], [-1], [7499], [-998002], [-65]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [30], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -b * b + 4 * a * c"], "outputs": "[[31], [8], [-1], [8], [8000000], [0], [0], [7500], [-998001], [-64]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [31], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    h = -b / (2 * a)\n    k = a * h ** 2 + b * h + c\n    directrix = k - 1 / (4 * a)\n    return int(directrix * 100)"], "outputs": "[[150], [175], ['ZeroDivisionError'], [-175], [199999], [-25], ['ZeroDivisionError'], [-1874], [-24975], [-812]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [150], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    directrix = c - (b ** 2 + 1) / (4 * a)\n    return int(directrix)"], "outputs": "[[1], [1], ['ZeroDivisionError'], [-1], [1999], [0], ['ZeroDivisionError'], [-18], [-249], [-8]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [1], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return int((b ** 2 - 1) / (4 * a) - c)"], "outputs": "[[-1], [-2], ['ZeroDivisionError'], [2], [-2000], [0], ['ZeroDivisionError'], [18], [249], [7]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [-1], [-198]]]"}, {"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    return -((b ** 2 - 4 * a * c + 1) * a)"], "outputs": "[[150], [7], [0], [-7], [7999999000], [-1], [0], [-749900], [-997003998], [-130]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [150], [-198]]]"}], "entropy": 0.9583832232923284, "llm_generated_inputs": "[[5, 3, 2], [1, 2, 3], [0, 1, -1], [-1, -2, -3], [1000, 2000, 3000], [1, 0, 0], [0, 0, 0], [-100, 50, -25], [999, -999, 0], [2, 4, -6]]", "input_output_examples": "[[[5, 3, 2]], [[-198]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "```python\ndef parabola_directrix(a: int, b: int, c: int) -> int:\n    \"\"\"\n    Write a function to find the directrix of a parabola using the formula:\n    directrix = -((b ** 2 + 1) // (4 * a))\n    \n    The function takes three integer parameters:\n    - a: The coefficient of the quadratic term in the parabola equation.\n    - b: The coefficient of the linear term in the parabola equation.\n    - c: The constant term in the parabola equation (included in the signature but not used in the calculation).\n\n    Notes:\n    - The formula explicitly applies negation to the result of the division operation, not just the numerator.\n    - Ensure `a` is non-zero to avoid division by zero errors. If `a == 0`, the function must raise a `ValueError` with the message: \"Coefficient 'a' must be non-zero to avoid division by zero.\"\n    - The parameter `c` is included for consistency with the general form of a parabola equation but does not influence the calculation.\n    - The expected output for the given example is based on the formula provided.\n\n    Example:\n    assert parabola_directrix(5, 3, 2) == -198\n    \"\"\"\n```", "entry_point": "parabola_directrix", "cluster_list": [{"programs_str": ["def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    directrix = -((b ** 2 + 1) // (4 * a))\n    return directrix", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    directrix = -((b ** 2 + 1) // (4 * a))\n    return directrix", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    directrix = -((b ** 2 + 1) // (4 * a))\n    return directrix", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    directrix = -((b ** 2 + 1) // (4 * a))\n    return directrix", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    directrix = -((b ** 2 + 1) // (4 * a))\n    return directrix", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    directrix = -((b ** 2 + 1) // (4 * a))\n    return directrix", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    directrix = -((b ** 2 + 1) // (4 * a))\n    return directrix", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))", "def parabola_directrix(a: int, b: int, c: int) -> int:\n    if a == 0:\n        raise ValueError(\"Coefficient 'a' must be non-zero to avoid division by zero.\")\n    return -((b ** 2 + 1) // (4 * a))"], "outputs": "[[0], [-1], ['ValueError'], [2], [-1000], [0], ['ValueError'], [7], [-249], [-2]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[5, 3, 2], [0], [-198]]]"}], "entropy": 0, "llm_generated_inputs": "[[5, 3, 2], [1, 2, 3], [0, 1, -1], [-1, -2, -3], [1000, 2000, 3000], [1, 0, 0], [0, 0, 0], [-100, 50, -25], [999, -999, 0], [2, 4, -6]]", "input_output_examples": "[[[5, 3, 2]], [[-198]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.002857142857142847, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.0, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/432", "original_requirement": "def median_trapezium(base1: float, base2: float, height: float) -> float:\n\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def median_trapezium(base1: float, base2: float, height: float) -> float:\n\"\"\"\nWrite a function to find the median length of a trapezium.\nassert median_trapezium(15,25,35)==20\n\"\"\"", "entry_point": "median_trapezium", "cluster_list": [{"programs_str": ["def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "from typing import Tuple\n\ndef median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "from typing import Union\n\ndef median_trapezium(base1: Union[float, int], base2: Union[float, int], height: Union[float, int]) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "from typing import Tuple\n\ndef median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "from typing import Tuple\n\ndef median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2", "def median_trapezium(base1: float, base2: float, height: float) -> float:\n    return (base1 + base2) / 2"], "outputs": "[[20.0], [15.0], [8.0], [10.0], [12.5], [5.0], [15.0], [15000.0], [1.0], [1.6665]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[15, 25, 35], [10, 20, 30], [5.5, 10.5, 15.5], [0, 20, 30], [25, 0, 30], [-10, 20, 30], [10, 20, -30], [10000, 20000, 30000], [1, 1, 1], [1.111, 2.222, 3.333]]", "input_output_examples": "[[[15, 25, 35]], [[20]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.9954128440366972, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/433", "original_requirement": "from typing import List\n\n\ndef check_greater(arr: List[int], number: int) -> bool:\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef check_greater(arr: List[int], number: int) -> bool:\n\"\"\"\nWrite a function to check whether the entered number is greater than the elements of the given array.\nassert check_greater([1, 2, 3, 4, 5], 4) == False\n\"\"\"", "entry_point": "check_greater", "cluster_list": [{"programs_str": ["from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > elem for elem in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    for element in arr:\n        if number <= element:\n            return False\n    return True", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    for element in arr:\n        if number <= element:\n            return False\n    return True", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > elem for elem in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > x for x in arr))", "from typing import List\n\ndef check_greater(arr: List[int], number: int) -> bool:\n    return all((number > element for element in arr))"], "outputs": "[[False], [True], [True], [False], [False], [True], [False], [False], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5], 4], [[1, 2, 3, 4, 5], 6], [[], 1], [[0], -1], [[8, 12, 20, 30], 15], [[8, 12, 20, 30], 35], [[5, 5, 5, 5, 5], 5], [[1, 10, 100], 0], [[10], 9], [[10], 11]]", "input_output_examples": "[[[[1, 2, 3, 4, 5], 4]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/435", "original_requirement": "def last_Digit(n: int) -> int:\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"", "repaired_requirement": "def last_Digit(n: int) -> int:\n    \"\"\"\n    Write a Python function to find the last digit of a given number. \n    The input `n` can be positive or negative. The \"last digit\" is defined as the absolute value of the rightmost digit of the number, ignoring the sign. \n    The function should always return a non-negative single-digit integer between 0 and 9.\n\n    Examples:\n    assert last_Digit(123) == 3\n    assert last_Digit(-456) == 6\n    \"\"\"", "original_clusters": {"requirement": "def last_Digit(n: int) -> int:\n\"\"\"\nWrite a python function to find the last digit of a given number.\nassert last_Digit(123) == 3\n\"\"\"", "entry_point": "last_Digit", "cluster_list": [{"programs_str": ["def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10"], "outputs": "[[3], [0], [7], [0], [6], [1], [0], [0], [9], [9]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def last_Digit(n: int) -> int:\n    return n % 10", "def last_Digit(n: int) -> int:\n    return n % 10"], "outputs": "[[3], [0], [7], [0], [4], [9], [0], [0], [9], [1]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[123], [0], [7], [890], [-456], [-1], [1000000], [-1000000], [999999999], [-999999999]]", "input_output_examples": "[[[123]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def last_Digit(n: int) -> int:\n    \"\"\"\n    Write a Python function to find the last digit of a given number. \n    The input `n` can be positive or negative. The \"last digit\" is defined as the absolute value of the rightmost digit of the number, ignoring the sign. \n    The function should always return a non-negative single-digit integer between 0 and 9.\n\n    Examples:\n    assert last_Digit(123) == 3\n    assert last_Digit(-456) == 6\n    \"\"\"", "entry_point": "last_Digit", "cluster_list": [{"programs_str": ["def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10", "def last_Digit(n: int) -> int:\n    return abs(n) % 10"], "outputs": "[[3], [0], [7], [0], [6], [1], [0], [0], [9], [9]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[123], [0], [7], [890], [-456], [-1], [1000000], [-1000000], [999999999], [-999999999]]", "input_output_examples": "[[[123]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9641509433962264, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/436", "original_requirement": "from typing import List\n\n\ndef neg_nos(list1: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef neg_nos(list1: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to return the negative numbers in a list.\nassert neg_nos([-1,4,5,-6]) == [-1,-6]\n\"\"\"", "entry_point": "neg_nos", "cluster_list": [{"programs_str": ["from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [x for x in list1 if x < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [x for x in list1 if x < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]", "from typing import List\n\ndef neg_nos(list1: List[int]) -> List[int]:\n    return [num for num in list1 if num < 0]"], "outputs": "[[[-1, -6]], [[-2, -7]], [[]], [[-5, -10, -15]], [[]], [[]], [[-1]], [[-1000, -123]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[-1, 4, 5, -6]], [[0, 3, -2, -7, 1]], [[]], [[-5, -10, -15]], [[1, 2, 3]], [[0]], [[-1]], [[999, -1000, 500, -123]]]", "input_output_examples": "[[[[-1, 4, 5, -6]]], [[[-1, -6]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/437", "original_requirement": "def remove_odd(s: str) -> str:\n\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def remove_odd(s: str) -> str:\n\"\"\"\nWrite a function to remove odd characters in a string.\nassert remove_odd(\"python\")==(\"yhn\")\n\"\"\"", "entry_point": "remove_odd", "cluster_list": [{"programs_str": ["def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((c for i, c in enumerate(s) if i % 2 == 1))", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 == 1))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 != 0))", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 == 1))", "def remove_odd(s: str) -> str:\n    return ''.join((s[i] for i in range(len(s)) if i % 2 == 1))", "def remove_odd(s: str) -> str:\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return s[1::2]", "def remove_odd(s: str) -> str:\n    return s[1::2]"], "outputs": "[['yhn'], ['bdf'], [''], ['b'], [''], ['2468'], ['@$^*)'], ['aaa'], ['d_vn']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['python'], ['abcdefg'], ['a'], ['ab'], [''], ['123456789'], ['!@#$%^&*()'], ['aaaaaaa'], ['odd_even']]", "input_output_examples": "[[['python']], [['yhn']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/439", "original_requirement": "from typing import List\n\n\ndef multiple_to_single(L: List[int]) -> int:\n\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef multiple_to_single(L: List[int]) -> int:\n\"\"\"\nWrite a function to join a list of multiple integers into a single integer.\nassert multiple_to_single([11, 33, 50])==113350\n\"\"\"", "entry_point": "multiple_to_single", "cluster_list": [{"programs_str": ["from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))", "from typing import List\n\ndef multiple_to_single(L: List[int]) -> int:\n    return int(''.join(map(str, L)))"], "outputs": "[[113350], [12], [123], [123456789], [102030], [5], ['ValueError'], [0], [0], [100], [111222333], [999888777]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[11, 33, 50]], [[0, 1, 2]], [[1, 2, 3]], [[123, 456, 789]], [[10, 20, 30]], [[5]], [[]], [[0]], [[0, 0, 0]], [[1, 0, 0]], [[111, 222, 333]], [[999, 888, 777]]]", "input_output_examples": "[[[[11, 33, 50]]], [[113350]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/440", "original_requirement": "from typing import Tuple\n\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n\"\"\"\nWrite a function to find the first adverb and their positions in a given sentence.\nassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\"\"\"", "entry_point": "find_adverb_position", "cluster_list": [{"programs_str": ["import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    pattern = re.compile('\\\\b\\\\w+ly\\\\b')\n    match = pattern.search(text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (start, end, match.group())\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b\\\\w+ly\\\\b', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        word = match.group()\n        return (start, end, word)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b\\\\w+ly\\\\b', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b\\\\w+ly\\\\b', text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (start, end, match.group())\n    return (-1, -1, '')", "from typing import Tuple\nimport re\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b\\\\w+ly\\\\b', text)\n    if match:\n        start, end = match.span()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b(\\\\w+ly)\\\\b', text)\n    if match:\n        start_pos = match.start()\n        end_pos = match.end()\n        adverb = match.group(0)\n        return (start_pos, end_pos, adverb)\n    return (-1, -1, '')", "from typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    import re\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return (start, end, match.group())\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b\\\\w+ly\\\\b', text)\n    if match:\n        start, end = match.span()\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = '\\\\b\\\\w+ly\\\\b'\n    match = re.search(adverb_pattern, text)\n    if match:\n        start_pos = match.start()\n        end_pos = match.end()\n        adverb = match.group()\n        return (start_pos, end_pos, adverb)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b(\\\\w+ly)\\\\b', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        return (start, end, match.group(1))\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b(\\\\w+ly)\\\\b', text)\n    if match:\n        start_pos = match.start()\n        end_pos = match.end()\n        adverb = match.group(1)\n        return (start_pos, end_pos, adverb)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b\\\\w+ly\\\\b', text)\n    if match:\n        start, end = match.span()\n        return (start, end, match.group())\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    adverb_pattern = re.compile('\\\\b\\\\w+ly\\\\b')\n    match = adverb_pattern.search(text)\n    if match:\n        start, end = (match.start(), match.end())\n        adverb = match.group()\n        return (start, end, adverb)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b\\\\w+ly\\\\b', text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (start, end, text[start:end])\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b(\\\\w+?ly)\\\\b', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        word = match.group()\n        return (start, end, word)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b\\\\w+ly\\\\b', text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (start, end, match.group())\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b(\\\\w+ly)\\\\b', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        word = match.group(1)\n        return (start, end, word)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b(\\\\w+ly)\\\\b', text)\n    if match:\n        start = match.start()\n        end = match.end()\n        adverb = match.group(1)\n        return (start, end, adverb)\n    return (-1, -1, '')", "import re\nfrom typing import Tuple\n\ndef find_adverb_position(text: str) -> Tuple[int, int, str]:\n    match = re.search('\\\\b\\\\w+ly\\\\b', text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (start, end, match.group())\n    return (-1, -1, '')"], "outputs": "[[(0, 7, 'clearly')], [(0, 7, 'quickly')], [(0, 7, 'happily')], [(0, 6, 'Slowly')], [(-1, -1, '')], [(0, 12, 'unexpectedly')], [(-1, -1, '')], [(0, 8, 'Suddenly')], [(0, 9, 'Gradually')], [(-1, -1, '')], [(-1, -1, '')], [(-1, -1, '')]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['clearly!! we can see the sky'], ['quickly, he ran away'], ['happily-ever-after stories are heartwarming'], ['Slowly, she opened the door.'], ['there is no adverb here'], ['unexpectedly, it rained yesterday'], ['!!?'], ['Suddenly.'], ['Gradually, we approached the mountain.'], ['carefully123 she planned.'], [''], ['!@&']]", "input_output_examples": "[[['clearly!! we can see the sky']], [[(0, 7, 'clearly')]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.3867924528301887, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/441", "original_requirement": "def surfacearea_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def surfacearea_cube(l: int) -> int:\n\"\"\"\nWrite a function to find the surface area of a cube of a given size.\nassert surfacearea_cube(5)==150\n\"\"\"", "entry_point": "surfacearea_cube", "cluster_list": [{"programs_str": ["def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l ** 2", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l", "def surfacearea_cube(l: int) -> int:\n    return 6 * l * l"], "outputs": "[[150], [6], [0], [6], [600], [60000000000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5], [1], [0], [-1], [10], [100000]]", "input_output_examples": "[[[5]], [[150]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/445", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n\"\"\"\nWrite a function to perform index wise multiplication of tuple elements in the given two tuples.\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\"\"\"", "entry_point": "index_multiplication", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(ele1, ele2))) for ele1, ele2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(sub_tup1, sub_tup2))) for sub_tup1, sub_tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((i * j for i, j in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((i * j for i, j in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(t1, t2))) for t1, t2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))", "from typing import List, Tuple\n\ndef index_multiplication(test_tup1: List[Tuple[int, ...]], test_tup2: List[Tuple[int, ...]]) -> Tuple[Tuple[int, ...], ...]:\n    return tuple((tuple((a * b for a, b in zip(tup1, tup2))) for tup1, tup2 in zip(test_tup1, test_tup2)))"], "outputs": "[[((6, 21), (12, 45), (2, 9), (7, 30))], [()], [((6, 21),)], [((0, 2), (12, 0))], [((-6, -21), (-12, -45))], [((3000000000, 8000000000),)], [((4, 10, 18),)], [((6, 21),)], [()], [()]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[(1, 3), (4, 5), (2, 9), (1, 10)], [(6, 7), (3, 9), (1, 1), (7, 3)]], [[], []], [[(1, 3)], [(6, 7)]], [[(0, 2), (3, 0)], [(5, 1), (4, 2)]], [[(1, -3), (-4, 5)], [(-6, 7), (3, -9)]], [[(100000, 200000)], [(30000, 40000)]], [[(1, 2, 3)], [(4, 5, 6)]], [[(1, 3), (4, 5)], [(6, 7)]], [[], [(1, 2), (3, 4)]], [[(1, 2), (3, 4)], []]]", "input_output_examples": "[[[[(1, 3), (4, 5), (2, 9), (1, 10)], [(6, 7), (3, 9), (1, 1), (7, 3)]]], [[((6, 21), (12, 45), (2, 9), (7, 30))]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/446", "original_requirement": "def count_Occurrence(tup: tuple, lst: list) -> int:\n\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_Occurrence(tup: tuple, lst: list) -> int:\n\"\"\"\nWrite a python function to count the occurence of all elements of list in a tuple.\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\"\"\"", "entry_point": "count_Occurrence", "cluster_list": [{"programs_str": ["def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "from typing import List, Tuple\n\ndef count_Occurrence(tup: Tuple, lst: List) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "from typing import Tuple, List\n\ndef count_Occurrence(tup: Tuple, lst: List) -> int:\n    return sum((tup.count(element) for element in lst))", "from typing import List, Tuple\n\ndef count_Occurrence(tup: Tuple, lst: List) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(element) for element in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(element) for element in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "from typing import Tuple, List\n\ndef count_Occurrence(tup: Tuple[str], lst: List[str]) -> int:\n    return sum((tup.count(item) for item in lst))", "from typing import List, Tuple\n\ndef count_Occurrence(tup: Tuple, lst: List) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "from typing import List, Tuple\n\ndef count_Occurrence(tup: Tuple, lst: List) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "def count_Occurrence(tup: tuple, lst: list) -> int:\n    return sum((tup.count(item) for item in lst))", "from typing import List, Tuple\n\ndef count_Occurrence(tup: Tuple, lst: List) -> int:\n    return sum((tup.count(el) for el in lst))"], "outputs": "[[3], [2], [3], [0], [0], [5], [1], [3], [2], [1], [0], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[('a', 'a', 'c', 'b', 'd'), ['a', 'b']], [(1, 2, 3, 4, 5), [1, 2, 6]], [(5, 5, 5, 3, 3), [5]], [(5, 5, 5, 3, 3), []], [(5, 5, 5, 3, 3), [7]], [(1, 2, 3, 4, 5), [1, 2, 3, 4, 5]], [(1, 2, 3, 4, 5), ['1', 2]], [(0, 0, 0), [0]], [(0, 1, None, 'a'), [None, 'a']], [(1,), [1]], [(1,), [2]], [(-1, -2, -2, -3), [-2, -3]]]", "input_output_examples": "[[[('a', 'a', 'c', 'b', 'd'), ['a', 'b']]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/447", "original_requirement": "from typing import List\n\n\ndef cube_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef cube_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to find cubes of individual elements in a list.\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\"\"\"", "entry_point": "cube_nums", "cluster_list": [{"programs_str": ["from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [x ** 3 for x in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]", "from typing import List\n\ndef cube_nums(nums: List[int]) -> List[int]:\n    return [num ** 3 for num in nums]"], "outputs": "[[[1, 8, 27, 64, 125]], [[0, -1, -8]], [[]], [[1000000000]], [[-1000, 1000]], [[1]], [[8, 8, 8]], [[999999997000000002999999999]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[0, -1, -2]], [[]], [[1000]], [[-10, 10]], [[1]], [[2, 2, 2]], [[999999999]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], [[[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/448", "original_requirement": "def cal_sum(n: int) -> int:\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"", "repaired_requirement": "```python\ndef cal_sum(n: int) -> int:\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers up to the nth index.\n\n    The Perrin sequence is defined as:\n    P(0) = 3, P(1) = 0, P(2) = 2, and for n >= 3, P(n) = P(n-2) + P(n-3).\n\n    The function should:\n    - Return the sum of all Perrin numbers from index 0 to n (inclusive), explicitly including the value at index n, when n >= 0.\n    - For example, if n = 1, the sum is P(0) + P(1), and if n = 3, the sum is P(0) + P(1) + P(2) + P(3).\n    - Return 0 for negative values of n, as the sum of an empty sequence is 0.\n\n    Examples:\n    assert cal_sum(9) == 49\n    assert cal_sum(-1) == 0\n    assert cal_sum(1) == 3\n    assert cal_sum(0) == 3\n    \"\"\"\n```", "original_clusters": {"requirement": "def cal_sum(n: int) -> int:\n\"\"\"\nWrite a function to calculate the sum of perrin numbers.\nassert cal_sum(9) == 49\n\"\"\"", "entry_point": "cal_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef perrin_sequence(n: int) -> List[int]:\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 0]\n    elif n == 2:\n        return [3, 0, 2]\n    seq = [3, 0, 2]\n    for i in range(3, n + 1):\n        next_val = seq[i - 2] + seq[i - 3]\n        seq.append(next_val)\n    return seq\n\ndef cal_sum(n: int) -> int:\n    return sum(perrin_sequence(n))", "from typing import List\n\ndef perrin_sequence(n: int) -> List[int]:\n    if n == 0:\n        return [3]\n    if n == 1:\n        return [3, 0]\n    if n == 2:\n        return [3, 0, 2]\n    seq = [3, 0, 2]\n    for i in range(3, n + 1):\n        seq.append(seq[i - 2] + seq[i - 3])\n    return seq\n\ndef cal_sum(n: int) -> int:\n    perrin_numbers = perrin_sequence(n)\n    return sum(perrin_numbers)", "from typing import List\n\ndef perrin_numbers(n: int) -> List[int]:\n    if n == 0:\n        return [3]\n    elif n == 1:\n        return [3, 0]\n    elif n == 2:\n        return [3, 0, 2]\n    p = [3, 0, 2]\n    for i in range(3, n + 1):\n        p.append(p[i - 2] + p[i - 3])\n    return p\n\ndef cal_sum(n: int) -> int:\n    return sum(perrin_numbers(n))"], "outputs": "[[3], [3], [5], [8], [49], [5], [6652110601405]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n\n    def perrin_sequence(n):\n        if n == 0:\n            return 3\n        elif n == 1:\n            return 0\n        elif n == 2:\n            return 2\n        else:\n            a, b, c = (3, 0, 2)\n            for i in range(3, n + 1):\n                a, b, c = (b, c, a + b)\n            return c\n    return sum((perrin_sequence(i) for i in range(n + 1)))", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    perrin = [3, 0, 2]\n    if n < 3:\n        return sum(perrin[:n + 1])\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin)", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    while len(perrin) <= n:\n        perrin.append(perrin[-2] + perrin[-3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    sum_perrin = sum(perrin[:min(n + 1, 3)])\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        sum_perrin += next_perrin\n    return sum_perrin", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    while len(perrin) <= n:\n        perrin.append(perrin[-2] + perrin[-3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n    return sum(perrin[:n + 1])", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    while len(perrin) <= n:\n        perrin.append(perrin[-2] + perrin[-3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])"], "outputs": "[[3], [3], [5], [8], [49], [0], [6652110601405]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    a, b, c = (3, 0, 2)\n    perrin_sum = 0\n    for _ in range(n):\n        perrin_sum += a\n        a, b, c = (b, c, a + b)\n    return perrin_sum", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    total_sum = sum(perrin[:min(n, 3)])\n    for i in range(3, n):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        total_sum += next_perrin\n    return total_sum", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin_sequence = [3, 0, 2]\n    for i in range(3, n):\n        next_perrin = perrin_sequence[i - 2] + perrin_sequence[i - 3]\n        perrin_sequence.append(next_perrin)\n    return sum(perrin_sequence[:n])\nimport doctest\ndoctest.testmod()"], "outputs": "[[0], [3], [3], [5], [37], [0], [5021529726403]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [37], [49]]]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    perrin_numbers = [3, 0, 2]\n    for i in range(3, n):\n        perrin_numbers.append(perrin_numbers[i - 2] + perrin_numbers[i - 3])\n    return sum(perrin_numbers[:n])"], "outputs": "[[0], [3], [3], [5], [37], [3], [5021529726403]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [37], [49]]]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    if n < 3:\n        return [3, 0, 2][n]\n    perrin_sequence = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin_sequence.append(perrin_sequence[i - 2] + perrin_sequence[i - 3])\n    return sum(perrin_sequence[:n + 1])"], "outputs": "[[3], [0], [2], [8], [49], [2], [6652110601405]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    if n < 3:\n        return n\n    perrin = [3, 0, 2]\n    total_sum = sum(perrin)\n    for i in range(3, n + 1):\n        next_perrin = perrin[i - 2] + perrin[i - 3]\n        perrin.append(next_perrin)\n        total_sum += next_perrin\n    return total_sum"], "outputs": "[[0], [1], [2], [8], [49], [-1], [6652110601405]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def cal_sum(n: int) -> int:\n    if n <= 0:\n        return 0\n    perrin_numbers = [3, 0, 2]\n    sum_perrin = 5\n    while len(perrin_numbers) < n:\n        new_perrin = perrin_numbers[-2] + perrin_numbers[-3]\n        perrin_numbers.append(new_perrin)\n        sum_perrin += new_perrin\n    return sum_perrin"], "outputs": "[[0], [5], [5], [5], [37], [0], [5021529726403]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [37], [49]]]"}], "entropy": 0.7784820081194175, "llm_generated_inputs": "[[0], [1], [2], [3], [9], [-1], [100]]", "input_output_examples": "[[[9]], [[49]]]", "weighted_test_consistency": 0.75, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef cal_sum(n: int) -> int:\n    \"\"\"\n    Write a function to calculate the sum of Perrin numbers up to the nth index.\n\n    The Perrin sequence is defined as:\n    P(0) = 3, P(1) = 0, P(2) = 2, and for n >= 3, P(n) = P(n-2) + P(n-3).\n\n    The function should:\n    - Return the sum of all Perrin numbers from index 0 to n (inclusive), explicitly including the value at index n, when n >= 0.\n    - For example, if n = 1, the sum is P(0) + P(1), and if n = 3, the sum is P(0) + P(1) + P(2) + P(3).\n    - Return 0 for negative values of n, as the sum of an empty sequence is 0.\n\n    Examples:\n    assert cal_sum(9) == 49\n    assert cal_sum(-1) == 0\n    assert cal_sum(1) == 3\n    assert cal_sum(0) == 3\n    \"\"\"\n```", "entry_point": "cal_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin_sequence = [3, 0, 2]\n    if n < len(perrin_sequence):\n        return sum(perrin_sequence[:n + 1])\n    for i in range(3, n + 1):\n        perrin_sequence.append(perrin_sequence[i - 2] + perrin_sequence[i - 3])\n    return sum(perrin_sequence)", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    if n == 0:\n        return 3\n    perrin_seq: List[int] = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin_seq.append(perrin_seq[i - 2] + perrin_seq[i - 3])\n    return sum(perrin_seq[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin_sequence = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin_sequence.append(perrin_sequence[i - 2] + perrin_sequence[i - 3])\n    return sum(perrin_sequence[:n + 1])", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    if n == 0:\n        return 3\n    perrin: List[int] = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin_sequence = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin_sequence.append(perrin_sequence[i - 2] + perrin_sequence[i - 3])\n    return sum(perrin_sequence[:n + 1])", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin: List[int] = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin_sequence = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin_sequence.append(perrin_sequence[i - 2] + perrin_sequence[i - 3])\n    return sum(perrin_sequence[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin: List[int] = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "def cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin_sequence = [3, 0, 2]\n    if n <= 2:\n        return sum(perrin_sequence[:n + 1])\n    for i in range(3, n + 1):\n        perrin_sequence.append(perrin_sequence[i - 2] + perrin_sequence[i - 3])\n    return sum(perrin_sequence)", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin: List[int] = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin.append(perrin[i - 2] + perrin[i - 3])\n    return sum(perrin[:n + 1])", "from typing import List\n\ndef cal_sum(n: int) -> int:\n    if n < 0:\n        return 0\n    perrin_sequence = [3, 0, 2]\n    for i in range(3, n + 1):\n        perrin_sequence.append(perrin_sequence[i - 2] + perrin_sequence[i - 3])\n    return sum(perrin_sequence[:n + 1])"], "outputs": "[[3], [3], [5], [8], [49], [0], [6652110601405]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [9], [-1], [100]]", "input_output_examples": "[[[9]], [[49]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.19999999999999996, "original_avg_pass_rate": 0.4798076923076923, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.44230769230769235, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/450", "original_requirement": "from typing import List\n\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"", "repaired_requirement": "def extract_string(str1: List[str], l: int) -> List[str]:\n    \"\"\"\n    Write a function to extract strings from a given list of string values where the length of each string matches the specified size.\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n\"\"\"\nWrite a function to extract specified size of strings from a given list of string values.\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\"\"\"", "entry_point": "extract_string", "cluster_list": [{"programs_str": ["from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]"], "outputs": "[[['practice', 'solution']], [['test', 'data']], [[]], [[]], [[]], [[]], [['minimumsize', 'maximumsize']], [['Python']], [[]], [[]]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) >= l]"], "outputs": "[[['exercises', 'practice', 'solution']], [['test', 'data', 'example', 'execution', 'result']], [[]], [[]], [['exactlysix', 'longstring']], [['largesize', 'tiny', 'min']], [['minimumsize', 'maximumsize']], [['Python']], [[]], [[]]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['exercises', 'practice', 'solution']], [['practice', 'solution']]]]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['test', 'data', 'example', 'execution', 'result'], 4], [[], 3], [['short', 'tiny', 'min'], 6], [['exactlysix', 'size6', 'longstring'], 6], [['largesize', 'tiny', 'min'], 0], [['edgecase', 'minimumsize', 'maximumsize'], 11], [['Python'], 6], [['Python'], 10], [[], 0]]", "input_output_examples": "[[[['Python', 'list', 'exercises', 'practice', 'solution'], 8]], [[['practice', 'solution']]]]", "weighted_test_consistency": 0.9, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def extract_string(str1: List[str], l: int) -> List[str]:\n    \"\"\"\n    Write a function to extract strings from a given list of string values where the length of each string matches the specified size.\n    assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\n    \"\"\"", "entry_point": "extract_string", "cluster_list": [{"programs_str": ["from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]", "from typing import List\n\ndef extract_string(str1: List[str], l: int) -> List[str]:\n    return [s for s in str1 if len(s) == l]"], "outputs": "[[['practice', 'solution']], [['test', 'data']], [[]], [[]], [[]], [[]], [['minimumsize', 'maximumsize']], [['Python']], [[]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['Python', 'list', 'exercises', 'practice', 'solution'], 8], [['test', 'data', 'example', 'execution', 'result'], 4], [[], 3], [['short', 'tiny', 'min'], 6], [['exactlysix', 'size6', 'longstring'], 6], [['largesize', 'tiny', 'min'], 0], [['edgecase', 'minimumsize', 'maximumsize'], 11], [['Python'], 6], [['Python'], 10], [[], 0]]", "input_output_examples": "[[[['Python', 'list', 'exercises', 'practice', 'solution'], 8]], [[['practice', 'solution']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.8240740740740741, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/451", "original_requirement": "def remove_whitespaces(text1: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from the given string.\n\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"", "repaired_requirement": "def remove_whitespaces(text1: str) -> str:\n    \"\"\"\n    Write a function to remove all types of whitespace characters from the given string.\n    Whitespace characters include spaces (' '), tabs ('\\t'), newlines ('\\n'), carriage returns ('\\r'), and other characters defined as whitespace by Python's `str.split()` method.\n\n    Examples:\n    - Input: ' Google    Flutter '\n      Output: 'GoogleFlutter'\n    - Input: 'A\\tB\\nC'\n      Output: 'ABC'\n    - Input: 'Special\\tCharacters\\nInWhitespace'\n      Output: 'SpecialCharactersInWhitespace'\n\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    \"\"\"", "original_clusters": {"requirement": "def remove_whitespaces(text1: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from the given string.\n\n\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\"\"\"", "entry_point": "remove_whitespaces", "cluster_list": [{"programs_str": ["def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())"], "outputs": "[['GoogleFlutter'], ['Leadingspaces'], ['Trailingspaces'], ['Multiplespacesinbetween'], ['NoSpacesAtAll'], ['Singlespace'], [''], [''], ['SpecialCharactersInWhitespace'], ['Tabseparatedvalues'], ['Newlinecharacters']]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def remove_whitespaces(text1: str) -> str:\n    return text1.replace(' ', '')", "def remove_whitespaces(text1: str) -> str:\n    return text1.replace(' ', '')", "def remove_whitespaces(text1: str) -> str:\n    return text1.replace(' ', '')", "def remove_whitespaces(text1: str) -> str:\n    return text1.replace(' ', '')"], "outputs": "[['GoogleFlutter'], ['Leadingspaces'], ['Trailingspaces'], ['Multiplespacesinbetween'], ['NoSpacesAtAll'], ['Singlespace'], [''], [''], ['Special\\tCharacters\\nInWhitespace'], ['Tab\\tseparated\\tvalues'], ['New\\nline\\ncharacters']]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[' Google    Flutter '], ['   Leading spaces'], ['Trailing spaces     '], ['   Multiple   spaces   in   between   '], ['NoSpacesAtAll'], ['Single space '], [' '], [''], ['Special\\tCharacters\\nInWhitespace'], ['Tab\\tseparated\\tvalues'], ['New\\nline\\ncharacters']]", "input_output_examples": "[[[' Google    Flutter ']], [['GoogleFlutter']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def remove_whitespaces(text1: str) -> str:\n    \"\"\"\n    Write a function to remove all types of whitespace characters from the given string.\n    Whitespace characters include spaces (' '), tabs ('\\t'), newlines ('\\n'), carriage returns ('\\r'), and other characters defined as whitespace by Python's `str.split()` method.\n\n    Examples:\n    - Input: ' Google    Flutter '\n      Output: 'GoogleFlutter'\n    - Input: 'A\\tB\\nC'\n      Output: 'ABC'\n    - Input: 'Special\\tCharacters\\nInWhitespace'\n      Output: 'SpecialCharactersInWhitespace'\n\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    \"\"\"", "entry_point": "remove_whitespaces", "cluster_list": [{"programs_str": ["def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "import re\n\ndef remove_whitespaces(text1: str) -> str:\n    return re.sub('\\\\s+', '', text1)", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    import re\n    return re.sub('\\\\s+', '', text1)", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())", "def remove_whitespaces(text1: str) -> str:\n    return ''.join(text1.split())"], "outputs": "[['GoogleFlutter'], ['Leadingspaces'], ['Trailingspaces'], ['Multiplespacesinbetween'], ['NoSpacesAtAll'], ['Singlespace'], [''], [''], ['SpecialCharactersInWhitespace'], ['Tabseparatedvalues'], ['Newlinecharacters']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[' Google    Flutter '], ['   Leading spaces'], ['Trailing spaces     '], ['   Multiple   spaces   in   between   '], ['NoSpacesAtAll'], ['Single space '], [' '], [''], ['Special\\tCharacters\\nInWhitespace'], ['Tab\\tseparated\\tvalues'], ['New\\nline\\ncharacters']]", "input_output_examples": "[[[' Google    Flutter ']], [['GoogleFlutter']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.30000000000000004, "original_avg_pass_rate": 0.94375, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9196428571428571, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/453", "original_requirement": "def sumofFactors(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def sumofFactors(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of even factors of a number.\nassert sumofFactors(18) == 26\n\"\"\"", "entry_point": "sumofFactors", "cluster_list": [{"programs_str": ["def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(1, n + 1) if n % factor == 0 and factor % 2 == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(2, n + 1, 2) if n % i == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((i for i in range(2, n + 1, 2) if n % i == 0))", "def sumofFactors(n: int) -> int:\n\n    def is_even(x: int) -> bool:\n        return x % 2 == 0\n    return sum((factor for factor in range(1, n + 1) if n % factor == 0 and is_even(factor)))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1) if n % factor == 0 and factor % 2 == 0))", "def sumofFactors(n: int) -> int:\n\n    def is_even(x):\n        return x % 2 == 0\n    return sum((factor for factor in range(1, n + 1) if n % factor == 0 and is_even(factor)))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))", "def sumofFactors(n: int) -> int:\n    return sum((factor for factor in range(2, n + 1, 2) if n % factor == 0))"], "outputs": "[[26], [0], [2], [0], [24], [0], [186], [0], [8], [78], [0], [2046]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[18], [1], [2], [0], [12], [25], [100], [-18], [6], [36], [999], [1024]]", "input_output_examples": "[[[18]], [[26]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/454", "original_requirement": "def text_match_wordz(text: str) -> bool:\n\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"", "repaired_requirement": "def text_match_wordz(text: str) -> bool:\n    \"\"\"\n    Write a function that checks if the input text contains at least one distinct word with the lowercase letter 'z'.\n    \n    A \"word\" is defined as a sequence of alphanumeric characters (letters and digits) bounded by non-alphanumeric characters or text boundaries (e.g., spaces, punctuation, or line breaks). \n    The function should:\n    - Match whole words containing one or more occurrences of the lowercase letter 'z'.\n    - Respect case sensitivity, meaning only lowercase 'z' is considered a match.\n    - Ignore surrounding punctuation or spaces when identifying valid words.\n    - Return True if at least one valid word containing 'z' is found; otherwise, return False.\n\n    Example:\n    assert text_match_wordz(\"pythonz.\") == True\n    \"\"\"", "original_clusters": {"requirement": "def text_match_wordz(text: str) -> bool:\n\"\"\"\nWrite a function that matches a word containing 'z'.\nassert text_match_wordz(\"pythonz.\")==True\n\"\"\"", "entry_point": "text_match_wordz", "cluster_list": [{"programs_str": ["import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\bz\\\\w*\\\\b|\\\\b\\\\w*z\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\bz\\\\w*|\\\\w*z\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\bz\\\\w*|\\\\w*z\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\bz\\\\w*|\\\\w*z\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\bz\\\\w*|\\\\w*z\\\\b', text))"], "outputs": "[[True], [True], [True], [True], [True], [False], [False], [False], [False], [False], [False], [False], [False], [False], [True], [False], [False], [True], [True]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return re.search('\\\\b\\\\w*z\\\\w*\\\\b', text) is not None", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [False], [False], [False], [False], [True], [False], [False], [True], [False], [False], [True], [True]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8112781244591328, "llm_generated_inputs": "[['pythonz.'], ['zebras'], ['fizz'], ['buzz'], ['quiz'], ['puzzles'], ['nozzle'], ['hello'], ['world'], ['12345'], ['Zookeeper'], ['amazing'], ['Z'], ['ZZ'], ['z'], [''], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['abcdefghijklmnopqrstuvwxyz'], ['Zzzzzzzzzzzzz!!!']]", "input_output_examples": "[[['pythonz.']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def text_match_wordz(text: str) -> bool:\n    \"\"\"\n    Write a function that checks if the input text contains at least one distinct word with the lowercase letter 'z'.\n    \n    A \"word\" is defined as a sequence of alphanumeric characters (letters and digits) bounded by non-alphanumeric characters or text boundaries (e.g., spaces, punctuation, or line breaks). \n    The function should:\n    - Match whole words containing one or more occurrences of the lowercase letter 'z'.\n    - Respect case sensitivity, meaning only lowercase 'z' is considered a match.\n    - Ignore surrounding punctuation or spaces when identifying valid words.\n    - Return True if at least one valid word containing 'z' is found; otherwise, return False.\n\n    Example:\n    assert text_match_wordz(\"pythonz.\") == True\n    \"\"\"", "entry_point": "text_match_wordz", "cluster_list": [{"programs_str": ["import re\n\ndef text_match_wordz(text: str) -> bool:\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b[a-zA-Z0-9]*z[a-zA-Z0-9]*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b[a-zA-Z0-9]*z[a-zA-Z0-9]*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b[a-zA-Z0-9]*z[a-zA-Z0-9]*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    pattern = '\\\\b\\\\w*z\\\\w*\\\\b'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    pattern = '\\\\b[\\\\w]*z[\\\\w]*\\\\b'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_wordz(text: str) -> bool:\n    return bool(re.search('\\\\b\\\\w*z\\\\w*\\\\b', text))"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [False], [False], [False], [False], [True], [False], [False], [True], [False], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['pythonz.'], ['zebras'], ['fizz'], ['buzz'], ['quiz'], ['puzzles'], ['nozzle'], ['hello'], ['world'], ['12345'], ['Zookeeper'], ['amazing'], ['Z'], ['ZZ'], ['z'], [''], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['abcdefghijklmnopqrstuvwxyz'], ['Zzzzzzzzzzzzz!!!']]", "input_output_examples": "[[['pythonz.']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9933962264150944, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/455", "original_requirement": "def check_monthnumb_number(monthnum2: int) -> bool:\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def check_monthnumb_number(monthnum2: int) -> bool:\n\"\"\"\nWrite a function to check whether the given month number contains 31 days or not.\nassert check_monthnumb_number(5)==True\n\"\"\"", "entry_point": "check_monthnumb_number", "cluster_list": [{"programs_str": ["from typing import List\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    return monthnum2 in months_with_31_days", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "from typing import List\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "from typing import List\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    months_with_31_days = {1, 3, 5, 7, 8, 10, 12}\n    return monthnum2 in months_with_31_days", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "from typing import List\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "from typing import List\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "from typing import List\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in {1, 3, 5, 7, 8, 10, 12}", "def check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]", "from typing import List\n\ndef check_monthnumb_number(monthnum2: int) -> bool:\n    return monthnum2 in [1, 3, 5, 7, 8, 10, 12]"], "outputs": "[[True], [False], [True], [False], [True], [False], [True], [True], [False], [True], [False], [True], [False], [False], [False], [False], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11], [12], [0], [-1], [13], [31], ['5'], [5.0], [None], ['January']]", "input_output_examples": "[[[5]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/456", "original_requirement": "from typing import List\n\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n\"\"\"\nWrite a function to reverse each string in a given list of string values.\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\"\"\"", "entry_point": "reverse_string_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]", "from typing import List\n\ndef reverse_string_list(stringlist: List[str]) -> List[str]:\n    return [s[::-1] for s in stringlist]"], "outputs": "[[['deR', 'neerG', 'eulB', 'etihW', 'kcalB']], [[]], [['a', 'b', 'c']], [['321', '654', '987']], [['racecar', 'madam', 'level']], [['drowelgnis']], [['esaCreppU', 'esaCrewoL']], [['  secaps', 'gnidael  ', '  gniliart']], [['!#@laiceps', '^&*slobmys', 'edlit~']], [['321dexiM', 'ddO654nevEmuN', '@htiWsdnE']], [['']], [['údnañ', 'edaçaf', 'rebü']], [['😊ijome', 'koobeulb📘', 'htrae🌍']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['Red', 'Green', 'Blue', 'White', 'Black']], [[]], [['a', 'b', 'c']], [['123', '456', '789']], [['racecar', 'madam', 'level']], [['singleword']], [['UpperCase', 'LowerCase']], [['spaces  ', '  leading', 'trailing  ']], [['special@#!', 'symbols*&^', '~tilde']], [['Mixed123', 'NumEven456Odd', 'EndsWith@']], [['']], [['ñandú', 'façade', 'über']], [['emoji😊', '📘bluebook', '🌍earth']]]", "input_output_examples": "[[[['Red', 'Green', 'Blue', 'White', 'Black']]], [[['deR', 'neerG', 'eulB', 'etihW', 'kcalB']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/457", "original_requirement": "from typing import List\n\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a Python function that takes a list of sublists (`lst`) as input and returns the sublist with the minimum length. \n    If multiple sublists have the same minimum length, return the first occurrence among those sublists.\n    \n    Edge cases:\n    - If `lst` is an empty list, the function should return an empty list (`[]`).\n    - Sublists can contain elements of any type (`Any`), and the comparison is solely based on length.\n\n    Example:\n    assert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]\n    assert Find_Min([]) == []\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n\"\"\"\nWrite a python function to find the sublist having minimum length.\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\"\"\"", "entry_point": "Find_Min", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    return min(lst, key=len)"], "outputs": "[[[1]], [[8]], [[]], ['ValueError'], [[]], [[5]], [[100]], [[]], [[5]], [[1]]]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    min_length = len(lst[0])\n    min_list = lst[0]\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_list = sublist\n    return min_list", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)"], "outputs": "[[[1]], [[8]], [[]], [[]], [[]], [[5]], [[100]], [[]], [[5]], [[1]]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9709505944546688, "llm_generated_inputs": "[[[[1], [1, 2], [1, 2, 3]]], [[[1, 2, 3], [4, 5, 6, 7], [8]]], [[[], [1], [1, 2]]], [[]], [[[1, 2, 3], [], [4, 5], []]], [[[5], [5, 6, 7], [8, 9], [10]]], [[[100], [200], [300, 400]]], [[[], [], [1, 2, 3, 4, 5]]], [[[1, 2], [3, 4], [5]]], [[[1]]]]", "input_output_examples": "[[[[[1], [1, 2], [1, 2, 3]]]], [[[1]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a Python function that takes a list of sublists (`lst`) as input and returns the sublist with the minimum length. \n    If multiple sublists have the same minimum length, return the first occurrence among those sublists.\n    \n    Edge cases:\n    - If `lst` is an empty list, the function should return an empty list (`[]`).\n    - Sublists can contain elements of any type (`Any`), and the comparison is solely based on length.\n\n    Example:\n    assert Find_Min([[1], [1, 2], [1, 2, 3]]) == [1]\n    assert Find_Min([]) == []\n    \"\"\"\n```", "entry_point": "Find_Min", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)", "from typing import List, Any\n\ndef Find_Min(lst: List[List[Any]]) -> List[Any]:\n    if not lst:\n        return []\n    return min(lst, key=len)"], "outputs": "[[[1]], [[8]], [[]], [[]], [[]], [[5]], [[100]], [[]], [[5]], [[1]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1], [1, 2], [1, 2, 3]]], [[[1, 2, 3], [4, 5, 6, 7], [8]]], [[[], [1], [1, 2]]], [[]], [[[1, 2, 3], [], [4, 5], []]], [[[5], [5, 6, 7], [8, 9], [10]]], [[[100], [200], [300, 400]]], [[[], [], [1, 2, 3, 4, 5]]], [[[1, 2], [3, 4], [5]]], [[[1]]]]", "input_output_examples": "[[[[[1], [1, 2], [1, 2, 3]]]], [[[1]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/458", "original_requirement": "def rectangle_area(l: float, b: float) -> float:\n\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def rectangle_area(l: float, b: float) -> float:\n\"\"\"\nWrite a function to find the area of a rectangle.\nassert rectangle_area(10,20)==200\n\"\"\"", "entry_point": "rectangle_area", "cluster_list": [{"programs_str": ["def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b", "def rectangle_area(l: float, b: float) -> float:\n    return l * b"], "outputs": "[[200], [0], [0], [0], [-50], [-50], [50], [1000000], [1000000], [1.25], [1.25], [8.5094]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10, 20], [0, 0], [0, 10], [10, 0], [-5, 10], [10, -5], [-5, -10], [1000000, 1], [1, 1000000], [0.5, 2.5], [2.5, 0.5], [3.14, 2.71]]", "input_output_examples": "[[[10, 20]], [[200]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.9971698113207547, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/459", "original_requirement": "def remove_uppercase(str1: str) -> str:\n\"\"\"\nWrite a function to remove uppercase substrings from a given string.\n\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def remove_uppercase(str1: str) -> str:\n\"\"\"\nWrite a function to remove uppercase substrings from a given string.\n\n\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\"\"\"", "entry_point": "remove_uppercase", "cluster_list": [{"programs_str": ["import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "def remove_uppercase(str1: str) -> str:\n    import re\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "def remove_uppercase(str1: str) -> str:\n    import re\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return ''.join(re.sub('[A-Z]+', '', str1))", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return ''.join(re.split('[A-Z]+', str1))", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return ''.join(filter(lambda x: not x.isupper(), str1))", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "import re\n\ndef remove_uppercase(str1: str) -> str:\n    return re.sub('[A-Z]+', '', str1)", "def remove_uppercase(str1: str) -> str:\n    import re\n    return re.sub('[A-Z]+', '', str1)"], "outputs": "[['elloorld'], ['cstyoravoitshos'], [''], ['abcghi'], ['12345'], ['abc123456ghi'], [''], ['nopperaseere'], [''], ['ixae']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['HelloWorld'], ['cAstyoUrFavoRitETVshoWs'], ['ABCDEFG'], ['abcDEFghiJKL'], ['12345'], ['abc123DEF456ghi'], [''], ['noUpperCaseHere'], ['ALLUPPERCASE'], ['MixEDCaSe']]", "input_output_examples": "[[['cAstyoUrFavoRitETVshoWs']], [['cstyoravoitshos']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.26415094339622647, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/460", "original_requirement": "from typing import List\n\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a Python function to get the first element of each sublist. \n    The function assumes that all sublists in the input are non-empty. \n    If an empty sublist is encountered, the function will raise an IndexError \n    as a consequence of attempting to access the first element of an empty list. \n    The function does not explicitly validate the input for empty sublists; \n    it relies on Python's natural error mechanism to handle such cases.\n\n    Example:\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n\"\"\"\nWrite a python function to get the first element of each sublist.\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\"\"\"", "entry_point": "Extract", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]"], "outputs": "[[[1, 3, 6]], [[10, 20, 40]], ['IndexError'], [[1, 2, 3, 4]], [[5, 8, 9]], [[1, 4, 7]], [[1]], [[]], [[None, True, False]], [[1.1, 3.3, 5.5]]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst if sublist]"], "outputs": "[[[1, 3, 6]], [[10, 20, 40]], [[1, 4, 6]], [[1, 2, 3, 4]], [[5, 8, 9]], [[1, 4, 7]], [[1]], [[]], [[None, True, False]], [[1.1, 3.3, 5.5]]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8112781244591328, "llm_generated_inputs": "[[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[10], [20, 30], [40, 50, 60]]], [[[], [1, 2, 3], [4, 5], [6]]], [[[1], [2], [3], [4]]], [[[5, 6, 7], [8], [9, 10, 11]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]], [[[1]]], [[]], [[[None], [True], [False]]], [[[1.1, 2.2], [3.3, 4.4], [5.5, 6.6]]]]", "input_output_examples": "[[[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]]], [[[1, 3, 6]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    \"\"\"\n    Write a Python function to get the first element of each sublist. \n    The function assumes that all sublists in the input are non-empty. \n    If an empty sublist is encountered, the function will raise an IndexError \n    as a consequence of attempting to access the first element of an empty list. \n    The function does not explicitly validate the input for empty sublists; \n    it relies on Python's natural error mechanism to handle such cases.\n\n    Example:\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n    \"\"\"\n```", "entry_point": "Extract", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]", "from typing import List, Any\n\ndef Extract(lst: List[List[Any]]) -> List[Any]:\n    return [sublist[0] for sublist in lst]"], "outputs": "[[[1, 3, 6]], [[10, 20, 40]], ['IndexError'], [[1, 2, 3, 4]], [[5, 8, 9]], [[1, 4, 7]], [[1]], [[]], [[None, True, False]], [[1.1, 3.3, 5.5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]], [[[10], [20, 30], [40, 50, 60]]], [[[], [1, 2, 3], [4, 5], [6]]], [[[1], [2], [3], [4]]], [[[5, 6, 7], [8], [9, 10, 11]]], [[[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]], [[[1]]], [[]], [[[None], [True], [False]]], [[[1.1, 2.2], [3.3, 4.4], [5.5, 6.6]]]]", "input_output_examples": "[[[[[1, 2], [3, 4, 5], [6, 7, 8, 9]]]], [[[1, 3, 6]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/462", "original_requirement": "from typing import List\n\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"", "repaired_requirement": "def combinations_list(lst: List[str]) -> List[List[str]]:\n    \"\"\"\n    Write a function to find all possible subsets (combinations) of the elements of a given list.\n    The function should generate subsets incrementally by appending elements in the order they appear in the input list.\n    The subsets must be ordered as follows:\n    - Start with the empty subset.\n    - For each element in the input list, generate new subsets by prepending the element to all previously generated subsets, maintaining the order of elements as they appear in the input list.\n    - Continue this process until all elements have been processed.\n\n    Input:\n    - A list of strings `lst` (e.g., ['orange', 'red', 'green', 'blue']).\n\n    Output:\n    - A list of lists, where each inner list represents a subset of the input list, ordered as described above.\n\n    Example:\n    assert combinations_list(['orange', 'red', 'green', 'blue']) == [\n        [], \n        ['orange'], \n        ['red'], \n        ['red', 'orange'], \n        ['green'], \n        ['green', 'orange'], \n        ['green', 'red'], \n        ['green', 'red', 'orange'], \n        ['blue'], \n        ['blue', 'orange'], \n        ['blue', 'red'], \n        ['blue', 'red', 'orange'], \n        ['blue', 'green'], \n        ['blue', 'green', 'orange'], \n        ['blue', 'green', 'red'], \n        ['blue', 'green', 'red', 'orange']\n    ]\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n\"\"\"\nWrite a function to find all possible combinations of the elements of a given list.\nassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\"\"\"", "entry_point": "combinations_list", "cluster_list": [{"programs_str": ["from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for i in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, i)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(combo) for combo in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for i in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, i)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    all_combinations = []\n    for r in range(len(lst) + 1):\n        all_combinations.extend([list(comb) for comb in combinations(lst, r)])\n    return all_combinations", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend(list(combinations(lst, r)))\n    return [list(comb) for comb in result]", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for i in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, i)])\n    return result", "from itertools import combinations\nfrom typing import List\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(combo) for combo in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for i in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, i)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for i in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, i)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(combo) for combo in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for i in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, i)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for r in range(len(lst) + 1):\n        result.extend([list(comb) for comb in combinations(lst, r)])\n    return result", "from typing import List\nfrom itertools import combinations\n\ndef combinations_list(lst: List[int]) -> List[List[int]]:\n    result = []\n    for i in range(len(lst) + 1):\n        result.extend([list(combo) for combo in combinations(lst, i)])\n    return result"], "outputs": "[[[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]], [[[]]], [[[], [1]]], [[[], [1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]], [[[], [0], [-1], [-2], [0, -1], [0, -2], [-1, -2], [0, -1, -2]]], [[[], [5]]], [[[], [1], [1], [1, 1]]], [[[], [10], [20], [30], [40], [50], [10, 20], [10, 30], [10, 40], [10, 50], [20, 30], [20, 40], [20, 50], [30, 40], [30, 50], [40, 50], [10, 20, 30], [10, 20, 40], [10, 20, 50], [10, 30, 40], [10, 30, 50], [10, 40, 50], [20, 30, 40], [20, 30, 50], [20, 40, 50], [30, 40, 50], [10, 20, 30, 40], [10, 20, 30, 50], [10, 20, 40, 50], [10, 30, 40, 50], [20, 30, 40, 50], [10, 20, 30, 40, 50]]], [[[], [-3], [0], [3], [-3, 0], [-3, 3], [0, 3], [-3, 0, 3]]]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [[[], ['orange'], ['red'], ['green'], ['blue'], ['orange', 'red'], ['orange', 'green'], ['orange', 'blue'], ['red', 'green'], ['red', 'blue'], ['green', 'blue'], ['orange', 'red', 'green'], ['orange', 'red', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[]], [[1]], [[1, 2, 3, 4]], [[0, -1, -2]], [[5]], [[1, 1]], [[10, 20, 30, 40, 50]], [[-3, 0, 3]]]", "input_output_examples": "[[[['orange', 'red', 'green', 'blue']]], [[[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "def combinations_list(lst: List[str]) -> List[List[str]]:\n    \"\"\"\n    Write a function to find all possible subsets (combinations) of the elements of a given list.\n    The function should generate subsets incrementally by appending elements in the order they appear in the input list.\n    The subsets must be ordered as follows:\n    - Start with the empty subset.\n    - For each element in the input list, generate new subsets by prepending the element to all previously generated subsets, maintaining the order of elements as they appear in the input list.\n    - Continue this process until all elements have been processed.\n\n    Input:\n    - A list of strings `lst` (e.g., ['orange', 'red', 'green', 'blue']).\n\n    Output:\n    - A list of lists, where each inner list represents a subset of the input list, ordered as described above.\n\n    Example:\n    assert combinations_list(['orange', 'red', 'green', 'blue']) == [\n        [], \n        ['orange'], \n        ['red'], \n        ['red', 'orange'], \n        ['green'], \n        ['green', 'orange'], \n        ['green', 'red'], \n        ['green', 'red', 'orange'], \n        ['blue'], \n        ['blue', 'orange'], \n        ['blue', 'red'], \n        ['blue', 'red', 'orange'], \n        ['blue', 'green'], \n        ['blue', 'green', 'orange'], \n        ['blue', 'green', 'red'], \n        ['blue', 'green', 'red', 'orange']\n    ]\n    \"\"\"", "entry_point": "combinations_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        result += [current + [element] for current in result]\n    return result", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        new_subsets = [current_subset + [element] for current_subset in result]\n        result.extend(new_subsets)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        new_subsets = [current_subset + [element] for current_subset in result]\n        result.extend(new_subsets)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        result += [current + [element] for current in result]\n    return result", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        result.extend([comb + [element] for comb in result])\n    return result", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for item in lst:\n        result += [current + [item] for current in result]\n    return result", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        additions = []\n        for subset in result:\n            new_subset = subset + [element]\n            additions.append(new_subset)\n        result.extend(additions)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for item in lst:\n        new_combinations = []\n        for subset in result:\n            new_subset = subset + [item]\n            new_combinations.append(new_subset)\n        result.extend(new_combinations)\n    return result"], "outputs": "[[[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]], [[[]]], [[[], [1]]], [[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3], [4], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]], [[[], [0], [-1], [0, -1], [-2], [0, -2], [-1, -2], [0, -1, -2]]], [[[], [5]]], [[[], [1], [1], [1, 1]]], [[[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40], [50], [10, 50], [20, 50], [10, 20, 50], [30, 50], [10, 30, 50], [20, 30, 50], [10, 20, 30, 50], [40, 50], [10, 40, 50], [20, 40, 50], [10, 20, 40, 50], [30, 40, 50], [10, 30, 40, 50], [20, 30, 40, 50], [10, 20, 30, 40, 50]]], [[[], [-3], [0], [-3, 0], [3], [-3, 3], [0, 3], [-3, 0, 3]]]]", "probability": 0.4, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [[[], ['orange'], ['red'], ['orange', 'red'], ['green'], ['orange', 'green'], ['red', 'green'], ['orange', 'red', 'green'], ['blue'], ['orange', 'blue'], ['red', 'blue'], ['orange', 'red', 'blue'], ['green', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}, {"programs_str": ["from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        result += [current + [element] for current in result]\n    return result[::-1]", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        result.extend([subset + [element] for subset in result])\n    return result[::-1]", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for item in lst:\n        new_subsets = [curr + [item] for curr in result]\n        result.extend(new_subsets)\n    return result[::-1]", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for elem in lst:\n        new_subsets = [current_subset + [elem] for current_subset in result]\n        result.extend(new_subsets)\n    return result[::-1]"], "outputs": "[[[[1, 2, 3], [2, 3], [1, 3], [3], [1, 2], [2], [1], []]], [[[]]], [[[1], []]], [[[1, 2, 3, 4], [2, 3, 4], [1, 3, 4], [3, 4], [1, 2, 4], [2, 4], [1, 4], [4], [1, 2, 3], [2, 3], [1, 3], [3], [1, 2], [2], [1], []]], [[[0, -1, -2], [-1, -2], [0, -2], [-2], [0, -1], [-1], [0], []]], [[[5], []]], [[[1, 1], [1], [1], []]], [[[10, 20, 30, 40, 50], [20, 30, 40, 50], [10, 30, 40, 50], [30, 40, 50], [10, 20, 40, 50], [20, 40, 50], [10, 40, 50], [40, 50], [10, 20, 30, 50], [20, 30, 50], [10, 30, 50], [30, 50], [10, 20, 50], [20, 50], [10, 50], [50], [10, 20, 30, 40], [20, 30, 40], [10, 30, 40], [30, 40], [10, 20, 40], [20, 40], [10, 40], [40], [10, 20, 30], [20, 30], [10, 30], [30], [10, 20], [20], [10], []]], [[[-3, 0, 3], [0, 3], [-3, 3], [3], [-3, 0], [0], [-3], []]]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [[['orange', 'red', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'green', 'blue'], ['green', 'blue'], ['orange', 'red', 'blue'], ['red', 'blue'], ['orange', 'blue'], ['blue'], ['orange', 'red', 'green'], ['red', 'green'], ['orange', 'green'], ['green'], ['orange', 'red'], ['red'], ['orange'], []]], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}, {"programs_str": ["from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        current_subsets = []\n        for subset in result:\n            new_subset = [element] + subset\n            current_subsets.append(new_subset)\n        result.extend(current_subsets)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for elem in lst:\n        result += [subset + [elem] for subset in result]\n    final_result = []\n    for subset in result:\n        final_result.append(subset[::-1])\n    return final_result", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        new_subsets = []\n        for subset in result:\n            new_subsets.append([element] + subset)\n        result.extend(new_subsets)\n    return result", "from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        new_subsets = []\n        for subset in result:\n            new_subsets.append([element] + subset)\n        result.extend(new_subsets)\n    return result"], "outputs": "[[[[], [1], [2], [2, 1], [3], [3, 1], [3, 2], [3, 2, 1]]], [[[]]], [[[], [1]]], [[[], [1], [2], [2, 1], [3], [3, 1], [3, 2], [3, 2, 1], [4], [4, 1], [4, 2], [4, 2, 1], [4, 3], [4, 3, 1], [4, 3, 2], [4, 3, 2, 1]]], [[[], [0], [-1], [-1, 0], [-2], [-2, 0], [-2, -1], [-2, -1, 0]]], [[[], [5]]], [[[], [1], [1], [1, 1]]], [[[], [10], [20], [20, 10], [30], [30, 10], [30, 20], [30, 20, 10], [40], [40, 10], [40, 20], [40, 20, 10], [40, 30], [40, 30, 10], [40, 30, 20], [40, 30, 20, 10], [50], [50, 10], [50, 20], [50, 20, 10], [50, 30], [50, 30, 10], [50, 30, 20], [50, 30, 20, 10], [50, 40], [50, 40, 10], [50, 40, 20], [50, 40, 20, 10], [50, 40, 30], [50, 40, 30, 10], [50, 40, 30, 20], [50, 40, 30, 20, 10]]], [[[], [-3], [0], [0, -3], [3], [3, -3], [3, 0], [3, 0, -3]]]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        result += [current + [element] for current in result]\n    ordered_result = []\n    for subset in result:\n        subset_reversed = list(reversed(subset))\n        ordered_result.extend([sub for sub in subset_reversed if sub not in ordered_result])\n    return ordered_result"], "outputs": "[[[1, 2, 3]], [[]], [[1]], [[1, 2, 3, 4]], [[0, -1, -2]], [[5]], [[1]], [[10, 20, 30, 40, 50]], [[-3, 0, 3]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [['orange', 'red', 'green', 'blue']], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}, {"programs_str": ["from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        result += [subset + [element] for subset in result]\n    ordered_result = []\n    for subset in result:\n        ordered_subset = []\n        for element in lst:\n            if element in subset:\n                ordered_subset.append(element)\n        ordered_result.append(ordered_subset)\n    return ordered_result"], "outputs": "[[[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]], [[[]]], [[[], [1]]], [[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3], [4], [1, 4], [2, 4], [1, 2, 4], [3, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]], [[[], [0], [-1], [0, -1], [-2], [0, -2], [-1, -2], [0, -1, -2]]], [[[], [5]]], [[[], [1, 1], [1, 1], [1, 1]]], [[[], [10], [20], [10, 20], [30], [10, 30], [20, 30], [10, 20, 30], [40], [10, 40], [20, 40], [10, 20, 40], [30, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40], [50], [10, 50], [20, 50], [10, 20, 50], [30, 50], [10, 30, 50], [20, 30, 50], [10, 20, 30, 50], [40, 50], [10, 40, 50], [20, 40, 50], [10, 20, 40, 50], [30, 40, 50], [10, 30, 40, 50], [20, 30, 40, 50], [10, 20, 30, 40, 50]]], [[[], [-3], [0], [-3, 0], [3], [-3, 3], [0, 3], [-3, 0, 3]]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [[[], ['orange'], ['red'], ['orange', 'red'], ['green'], ['orange', 'green'], ['red', 'green'], ['orange', 'red', 'green'], ['blue'], ['orange', 'blue'], ['red', 'blue'], ['orange', 'red', 'blue'], ['green', 'blue'], ['orange', 'green', 'blue'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}, {"programs_str": ["from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        new_subsets = []\n        for subset in result:\n            new_subsets.append([element] + subset)\n        result.extend(new_subsets)\n    result.sort(key=lambda x: (len(x), x))\n    return result"], "outputs": "[[[[], [1], [2], [3], [2, 1], [3, 1], [3, 2], [3, 2, 1]]], [[[]]], [[[], [1]]], [[[], [1], [2], [3], [4], [2, 1], [3, 1], [3, 2], [4, 1], [4, 2], [4, 3], [3, 2, 1], [4, 2, 1], [4, 3, 1], [4, 3, 2], [4, 3, 2, 1]]], [[[], [-2], [-1], [0], [-2, -1], [-2, 0], [-1, 0], [-2, -1, 0]]], [[[], [5]]], [[[], [1], [1], [1, 1]]], [[[], [10], [20], [30], [40], [50], [20, 10], [30, 10], [30, 20], [40, 10], [40, 20], [40, 30], [50, 10], [50, 20], [50, 30], [50, 40], [30, 20, 10], [40, 20, 10], [40, 30, 10], [40, 30, 20], [50, 20, 10], [50, 30, 10], [50, 30, 20], [50, 40, 10], [50, 40, 20], [50, 40, 30], [40, 30, 20, 10], [50, 30, 20, 10], [50, 40, 20, 10], [50, 40, 30, 10], [50, 40, 30, 20], [50, 40, 30, 20, 10]]], [[[], [-3], [0], [3], [0, -3], [3, -3], [3, 0], [3, 0, -3]]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [[[], ['blue'], ['green'], ['orange'], ['red'], ['blue', 'green'], ['blue', 'orange'], ['blue', 'red'], ['green', 'orange'], ['green', 'red'], ['red', 'orange'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'red', 'orange'], ['green', 'red', 'orange'], ['blue', 'green', 'red', 'orange']]], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}, {"programs_str": ["from typing import List\n\ndef combinations_list(lst: List[str]) -> List[List[str]]:\n    result = [[]]\n    for element in lst:\n        result += [subset + [element] for subset in result]\n    return sorted(result, key=lambda x: (len(x), x))"], "outputs": "[[[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]], [[[]]], [[[], [1]]], [[[], [1], [2], [3], [4], [1, 2], [1, 3], [1, 4], [2, 3], [2, 4], [3, 4], [1, 2, 3], [1, 2, 4], [1, 3, 4], [2, 3, 4], [1, 2, 3, 4]]], [[[], [-2], [-1], [0], [-1, -2], [0, -2], [0, -1], [0, -1, -2]]], [[[], [5]]], [[[], [1], [1], [1, 1]]], [[[], [10], [20], [30], [40], [50], [10, 20], [10, 30], [10, 40], [10, 50], [20, 30], [20, 40], [20, 50], [30, 40], [30, 50], [40, 50], [10, 20, 30], [10, 20, 40], [10, 20, 50], [10, 30, 40], [10, 30, 50], [10, 40, 50], [20, 30, 40], [20, 30, 50], [20, 40, 50], [30, 40, 50], [10, 20, 30, 40], [10, 20, 30, 50], [10, 20, 40, 50], [10, 30, 40, 50], [20, 30, 40, 50], [10, 20, 30, 40, 50]]], [[[], [-3], [0], [3], [-3, 0], [-3, 3], [0, 3], [-3, 0, 3]]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['orange', 'red', 'green', 'blue']], [[[], ['blue'], ['green'], ['orange'], ['red'], ['green', 'blue'], ['orange', 'blue'], ['orange', 'green'], ['orange', 'red'], ['red', 'blue'], ['red', 'green'], ['orange', 'green', 'blue'], ['orange', 'red', 'blue'], ['orange', 'red', 'green'], ['red', 'green', 'blue'], ['orange', 'red', 'green', 'blue']]], [[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]"}], "entropy": 0.8270874753469163, "llm_generated_inputs": "[[[1, 2, 3]], [[]], [[1]], [[1, 2, 3, 4]], [[0, -1, -2]], [[5]], [[1, 1]], [[10, 20, 30, 40, 50]], [[-3, 0, 3]]]", "input_output_examples": "[[[['orange', 'red', 'green', 'blue']]], [[[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]]]]", "weighted_test_consistency": 0.2, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.009345794392523366, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.009345794392523366, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/463", "original_requirement": "from typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n\n    The function should adhere to the following specifications:\n    1. A subarray is defined as a contiguous portion of the array, and the function should return the maximum product of any such subarray.\n    2. Zeros in the array should be treated as valid subarray elements. If a zero is encountered, it can either terminate a subarray or be considered as a subarray itself with a product of zero. The function should handle zeros without resetting the accumulation process entirely.\n    3. For single-element arrays, the output should simply be the value of the single element, as the single element itself constitutes the only valid subarray.\n    4. For arrays containing only negative numbers or zeros, the function should still compute the maximum product subarray by considering the properties of negative numbers (e.g., the product of two negative numbers is positive) and zeros.\n    5. The initial value of the maximum product (`max_product`) should be set to the first element of the array (`arr[0]`), ensuring consistent behavior for arrays of all sizes and compositions.\n\n    Example:\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef max_subarray_product(arr: List[int]) -> int:\n\"\"\"\nWrite a function to find the maximum product subarray of the given array.\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\"\"\"", "entry_point": "max_subarray_product", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    n = len(arr)\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(arr[i], current_max * arr[i])\n        current_min = min(arr[i], current_min * arr[i])\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        current = arr[i]\n        temp_max = max(current, max_product * current, min_product * current)\n        min_product = min(current, max_product * current, min_product * current)\n        max_product = temp_max\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = float('-inf')\n    current_max, current_min = (1, 1)\n    for num in arr:\n        if num == 0:\n            current_max, current_min = (1, 1)\n            max_product = max(max_product, 0)\n        else:\n            temp_max = current_max\n            current_max = max(num, current_max * num, current_min * num)\n            current_min = min(num, temp_max * num, current_min * num)\n            max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n    for num in arr:\n        if num == 0:\n            current_max, current_min = (1, 1)\n            max_product = max(max_product, 0)\n            continue\n        temp_max = current_max * num\n        temp_min = current_min * num\n        current_max = max(temp_max, temp_min, num)\n        current_min = min(temp_max, temp_min, num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max, current_min = (1, 1)\n    for num in arr:\n        if num == 0:\n            current_max, current_min = (1, 1)\n            max_product = max(max_product, 0)\n        else:\n            temp_max = current_max * num\n            temp_min = current_min * num\n            current_max = max(num, temp_max, temp_min)\n            current_min = min(num, temp_max, temp_min)\n            max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], arr[i] * max_product)\n        min_product = min(arr[i], arr[i] * min_product)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max, current_min = (1, 1)\n    for num in arr:\n        if num == 0:\n            current_max, current_min = (1, 1)\n            max_product = max(max_product, 0)\n            continue\n        temp_max = current_max * num\n        current_max = max(num, temp_max, current_min * num)\n        current_min = min(num, temp_max, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = float('-inf')\n    current_max, current_min = (1, 1)\n    for num in arr:\n        if num == 0:\n            current_max, current_min = (1, 1)\n            max_product = max(max_product, 0)\n        else:\n            temp_max = current_max * num\n            temp_min = current_min * num\n            current_max = max(temp_max, temp_min, num)\n            current_min = min(temp_max, temp_min, num)\n            max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_prod = arr[0]\n    min_prod = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_prod, min_prod = (min_prod, max_prod)\n        max_prod = max(arr[i], max_prod * arr[i])\n        min_prod = min(arr[i], min_prod * arr[i])\n        result = max(result, max_prod)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product"], "outputs": "[[112], [6], [0], [-1], [24], [24], [0], [2], [42], [0]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max, current_min = (1, 1)\n    for num in arr:\n        if num == 0:\n            current_max, current_min = (1, 1)\n            continue\n        temp_max = current_max * num\n        current_max = max(num, temp_max, current_min * num)\n        current_min = min(num, temp_max, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max, current_min = (1, 1)\n    for num in arr:\n        if num == 0:\n            current_max, current_min = (1, 1)\n            continue\n        temp_max = current_max * num\n        current_max = max(num, temp_max, current_min * num)\n        current_min = min(num, temp_max, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    current_max, current_min = (1, 1)\n    for num in arr:\n        if num == 0:\n            current_max, current_min = (1, 1)\n            continue\n        temp_max = current_max * num\n        current_max = max(num, temp_max, current_min * num)\n        current_min = min(num, temp_max, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    min_product = 1\n    current_product = 1\n    for num in arr:\n        if num == 0:\n            current_product = 1\n            min_product = 1\n            continue\n        temp = current_product\n        current_product = max(num, current_product * num, min_product * num)\n        min_product = min(num, temp * num, min_product * num)\n        max_product = max(max_product, current_product)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = float('-inf')\n    curr_max, curr_min = (1, 1)\n    for num in arr:\n        if num == 0:\n            curr_max, curr_min = (1, 1)\n            continue\n        temp_max = curr_max * num\n        curr_max = max(num, temp_max, curr_min * num)\n        curr_min = min(num, temp_max, curr_min * num)\n        max_product = max(max_product, curr_max)\n    return max_product"], "outputs": "[[112], [6], [-inf], [-1], [24], [24], [-inf], [2], [42], [-1]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8112781244591328, "llm_generated_inputs": "[[[1, -2, -3, 0, 7, -8, -2]], [[2, 3, -2, 4]], [[0]], [[-1]], [[1, 2, 3, 4]], [[-1, -2, -3, -4]], [[0, 0, 0]], [[0, -1, -2]], [[-2, -3, 7, 0, 4, -1]], [[-2, 0, -1]]]", "input_output_examples": "[[[[1, -2, -3, 0, 7, -8, -2]]], [[112]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n\n    The function should adhere to the following specifications:\n    1. A subarray is defined as a contiguous portion of the array, and the function should return the maximum product of any such subarray.\n    2. Zeros in the array should be treated as valid subarray elements. If a zero is encountered, it can either terminate a subarray or be considered as a subarray itself with a product of zero. The function should handle zeros without resetting the accumulation process entirely.\n    3. For single-element arrays, the output should simply be the value of the single element, as the single element itself constitutes the only valid subarray.\n    4. For arrays containing only negative numbers or zeros, the function should still compute the maximum product subarray by considering the properties of negative numbers (e.g., the product of two negative numbers is positive) and zeros.\n    5. The initial value of the maximum product (`max_product`) should be set to the first element of the array (`arr[0]`), ensuring consistent behavior for arrays of all sizes and compositions.\n\n    Example:\n    assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n    \"\"\"", "entry_point": "max_subarray_product", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    curr_max, curr_min = (arr[0], arr[0])\n    for num in arr[1:]:\n        if num < 0:\n            curr_max, curr_min = (curr_min, curr_max)\n        curr_max = max(num, curr_max * num)\n        curr_min = min(num, curr_min * num)\n        max_product = max(max_product, curr_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max, current_min = (arr[0], arr[0])\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    curr_max = arr[0]\n    curr_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            curr_max, curr_min = (curr_min, curr_max)\n        curr_max = max(num, curr_max * num)\n        curr_min = min(num, curr_min * num)\n        max_product = max(max_product, curr_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max, current_min = (arr[0], arr[0])\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num == 0:\n            current_max, current_min = (0, 0)\n        else:\n            temp = current_max\n            current_max = max(num, num * current_max, num * current_min)\n            current_min = min(num, num * temp, num * current_min)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(arr[i], current_max * arr[i])\n        current_min = min(arr[i], current_min * arr[i])\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            max_product, min_product = (0, 0)\n            result = max(result, 0)\n        else:\n            temp_max = max(arr[i], max_product * arr[i], min_product * arr[i])\n            min_product = min(arr[i], max_product * arr[i], min_product * arr[i])\n            max_product = temp_max\n            result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            current_max, current_min = (current_min, current_max)\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for num in arr[1:]:\n        if num < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(num, max_product * num)\n        min_product = min(num, min_product * num)\n        result = max(result, max_product)\n    return result", "from typing import List\n\ndef max_subarray_product(arr: List[int]) -> int:\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = (min_product, max_product)\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n        result = max(result, max_product)\n    return result"], "outputs": "[[112], [6], [0], [-1], [24], [24], [0], [2], [42], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, -2, -3, 0, 7, -8, -2]], [[2, 3, -2, 4]], [[0]], [[-1]], [[1, 2, 3, 4]], [[-1, -2, -3, -4]], [[0, 0, 0]], [[0, -1, -2]], [[-2, -3, 7, 0, 4, -1]], [[-2, 0, -1]]]", "input_output_examples": "[[[[1, -2, -3, 0, 7, -8, -2]]], [[112]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/465", "original_requirement": "def drop_empty(dict1: dict) -> dict:\n\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"", "repaired_requirement": "```python\ndef drop_empty(dict1: dict) -> dict:\n    \"\"\"\n    Write a function to drop items from a given dictionary where the value is strictly `None`.\n    Only keys with values equal to `None` should be removed. All other values, including falsy values \n    such as empty strings (`''`), `0`, `False`, or empty lists (`[]`), should be retained.\n\n    Examples:\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': '', 'c2': None, 'c3': 'Blue'}) == {'c1': '', 'c3': 'Blue'}\n    \"\"\"\n```", "original_clusters": {"requirement": "def drop_empty(dict1: dict) -> dict:\n\"\"\"\nWrite a function to drop empty items from a given dictionary.\n\n\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\"\"\"", "entry_point": "drop_empty", "cluster_list": [{"programs_str": ["def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}"], "outputs": "[[{'c1': 'Red', 'c2': 'Green'}], [{}], [{'c1': '', 'c3': 'Blue'}], [{'c1': 'Yellow', 'c2': False, 'c3': []}], [{'c1': 0, 'c2': 'Valid'}], [{'a': '', 'c': {}, 'd': 'Data'}]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v}"], "outputs": "[[{'c1': 'Red', 'c2': 'Green'}], [{}], [{'c3': 'Blue'}], [{'c1': 'Yellow'}], [{'c2': 'Valid'}], [{'d': 'Data'}]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None and v != ''}"], "outputs": "[[{'c1': 'Red', 'c2': 'Green'}], [{}], [{'c3': 'Blue'}], [{'c1': 'Yellow', 'c2': False, 'c3': []}], [{'c1': 0, 'c2': 'Valid'}], [{'c': {}, 'd': 'Data'}]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.3589962496465303, "llm_generated_inputs": "[[{'c1': 'Red', 'c2': 'Green', 'c3': None}], [{}], [{'c1': '', 'c2': None, 'c3': 'Blue'}], [{'c1': 'Yellow', 'c2': False, 'c3': []}], [{'c1': 0, 'c2': 'Valid', 'c3': None}], [{'a': '', 'b': None, 'c': {}, 'd': 'Data'}]]", "input_output_examples": "[[[{'c1': 'Red', 'c2': 'Green', 'c3': None}]], [[{'c1': 'Red', 'c2': 'Green'}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef drop_empty(dict1: dict) -> dict:\n    \"\"\"\n    Write a function to drop items from a given dictionary where the value is strictly `None`.\n    Only keys with values equal to `None` should be removed. All other values, including falsy values \n    such as empty strings (`''`), `0`, `False`, or empty lists (`[]`), should be retained.\n\n    Examples:\n    assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}\n    assert drop_empty({'c1': '', 'c2': None, 'c3': 'Blue'}) == {'c1': '', 'c3': 'Blue'}\n    \"\"\"\n```", "entry_point": "drop_empty", "cluster_list": [{"programs_str": ["def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {k: v for k, v in dict1.items() if v is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}", "def drop_empty(dict1: dict) -> dict:\n    return {key: value for key, value in dict1.items() if value is not None}"], "outputs": "[[{'c1': 'Red', 'c2': 'Green'}], [{}], [{'c1': '', 'c3': 'Blue'}], [{'c1': 'Yellow', 'c2': False, 'c3': []}], [{'c1': 0, 'c2': 'Valid'}], [{'a': '', 'c': {}, 'd': 'Data'}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{'c1': 'Red', 'c2': 'Green', 'c3': None}], [{}], [{'c1': '', 'c2': None, 'c3': 'Blue'}], [{'c1': 'Yellow', 'c2': False, 'c3': []}], [{'c1': 0, 'c2': 'Valid', 'c3': None}], [{'a': '', 'b': None, 'c': {}, 'd': 'Data'}]]", "input_output_examples": "[[[{'c1': 'Red', 'c2': 'Green', 'c3': None}]], [[{'c1': 'Red', 'c2': 'Green'}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.7, "original_avg_pass_rate": 0.8690265486725665, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/468", "original_requirement": "from typing import List\n\n\ndef max_product(arr: List[int]) -> int:\n\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of a strictly increasing subsequence of the array.\n\n    - A \"strictly increasing subsequence\" is defined as any subset of the array (not necessarily contiguous) where the numbers are in strictly increasing order, and the relative order of elements in the original array is preserved.\n    - Single elements are considered valid strictly increasing subsequences.\n    - The function should maximize the product of the selected numbers in the subsequence, prioritizing the overall maximum product regardless of the subsequence length.\n    - If the array is empty, the function should return 0.\n    - If no strictly increasing subsequence exists, the function should return the maximum product of a single element in the array (or 0 if the array is empty).\n\n    Example:\n    assert max_product([3, 100, 4, 5, 150, 6]) == 3000\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef max_product(arr: List[int]) -> int:\n\"\"\"\nWrite a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\n\"\"\"", "entry_point": "max_product", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_product = [0] * n\n    for i in range(n):\n        max_product[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_product[i] = max(max_product[i], max_product[j] * arr[i])\n    return max(max_product)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n    max_prod = 0\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        max_prod = max(max_prod, dp[i])\n    return max_prod", "from typing import List\nfrom functools import lru_cache\n\ndef max_product(arr: List[int]) -> int:\n\n    def dp(i: int) -> int:\n        max_prod = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_prod = max(max_prod, arr[i] * dp(j))\n        return max_prod\n    max_product_value = 0\n    for i in range(len(arr)):\n        max_product_value = max(max_product_value, dp(i))\n    return max_product_value", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_product_at_index = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_product_at_index[i] = max(max_product_at_index[i], max_product_at_index[j] * arr[i])\n    return max(max_product_at_index)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = 0\n    dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [0] * n\n    max_product = 0\n    for i in range(n):\n        max_prod[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n        max_product = max(max_product, max_prod[i])\n    return max_product", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = [0] * n\n    for i in range(n):\n        current_max = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                current_max = max(current_max, max_prod[j] * arr[i])\n        max_prod[i] = current_max\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    max_prod = [0] * n\n    max_prod_global = 0\n    for i in range(n):\n        max_prod[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n        max_prod_global = max(max_prod_global, max_prod[i])\n    return max_prod_global", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    max_product_subseq = [0] * n\n    for i in range(n):\n        max_product_subseq[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_product_subseq[i] = max(max_product_subseq[i], max_product_subseq[j] * arr[i])\n    return max(max_product_subseq)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_product_subseq = [0] * n\n    for i in range(n):\n        current_max = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                current_max = max(current_max, max_product_subseq[j] * arr[i])\n        max_product_subseq[i] = current_max\n    return max(max_product_subseq)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    max_product = [0] * n\n    for i in range(n):\n        max_product[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_product[i] = max(max_product[i], max_product[j] * arr[i])\n    return max(max_product)", "from typing import List\nimport functools\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)"], "outputs": "[[45000], [120], [15000], [5], [0], [0], [7], [120], [524880], [6], [12], [510510], [20], [2], [2400000000]]", "probability": 0.65, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[3, 100, 4, 5, 150, 6]], [45000], [3000]]]"}, {"programs_str": ["from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    max_prod = [0] * n\n    for i in range(n):\n        max_prod[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    max_prod = [0] * n\n    for i in range(n):\n        max_prod[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_prod[i] = max(max_prod[i], max_prod[j] * arr[i])\n    return max(max_prod)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)"], "outputs": "[[45000], [120], [15000], [5], ['ValueError'], [0], [7], [120], [524880], [6], [12], [510510], [20], [2], [2400000000]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[3, 100, 4, 5, 150, 6]], [45000], [3000]]]"}, {"programs_str": ["from typing import List\nimport sys\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    dp = [0] * n\n    max_product = -sys.maxsize\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        max_product = max(max_product, dp[i])\n    return max_product"], "outputs": "[[45000], [120], [15000], [5], [-9223372036854775807], [0], [7], [120], [524880], [6], [12], [510510], [20], [2], [2400000000]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[3, 100, 4, 5, 150, 6]], [45000], [3000]]]"}, {"programs_str": ["from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        max_val = 1\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_val = max(max_val, dp[j])\n        dp[i] = max_val * arr[i]\n    return max(dp)"], "outputs": "[[45000], [120], [15000], [5], ['ValueError'], [0], [7], [120], [524880], [6], [2], [510510], [-1], [2], [2400000000]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[3, 100, 4, 5, 150, 6]], [45000], [3000]]]"}, {"programs_str": ["from typing import List\nfrom itertools import combinations\nimport math\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    max_prod = 0\n    for size in range(2, n + 1):\n        for subseq in combinations(arr, size):\n            if all((subseq[i] < subseq[i + 1] for i in range(len(subseq) - 1))):\n                prod = math.prod(subseq)\n                max_prod = max(max_prod, prod)\n    return max_prod"], "outputs": "[[45000], [120], [15000], [0], [0], [0], [0], [120], [524880], [0], [12], [510510], [120], [2], [2400000000]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[3, 100, 4, 5, 150, 6]], [45000], [3000]]]"}], "entropy": 0.6531822761588254, "llm_generated_inputs": "[[[3, 100, 4, 5, 150, 6]], [[1, 2, 3, 4, 5]], [[10, -20, 30, -40, 50]], [[5]], [[]], [[0, 0, 0]], [[7, 7, 7, 7]], [[1, 2, 3, 0, 4, 5]], [[3, 6, 9, 12, 15, 18]], [[6, 5, 4, 3, 2, 1]], [[-3, -2, -1, 0, 1, 2]], [[2, 3, 5, 7, 11, 13, 17]], [[-5, -4, -3, -2, -1]], [[1, 1, 1, 1, 2, 2, 2, 2]], [[100, 200, 0, 300, 400]]]", "input_output_examples": "[[[[3, 100, 4, 5, 150, 6]]], [[3000]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef max_product(arr: List[int]) -> int:\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of a strictly increasing subsequence of the array.\n\n    - A \"strictly increasing subsequence\" is defined as any subset of the array (not necessarily contiguous) where the numbers are in strictly increasing order, and the relative order of elements in the original array is preserved.\n    - Single elements are considered valid strictly increasing subsequences.\n    - The function should maximize the product of the selected numbers in the subsequence, prioritizing the overall maximum product regardless of the subsequence length.\n    - If the array is empty, the function should return 0.\n    - If no strictly increasing subsequence exists, the function should return the maximum product of a single element in the array (or 0 if the array is empty).\n\n    Example:\n    assert max_product([3, 100, 4, 5, 150, 6]) == 3000\n    \"\"\"\n```", "entry_point": "max_product", "cluster_list": [{"programs_str": ["from typing import List\nfrom functools import lru_cache\nimport math\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n\n    def dp(idx: int) -> int:\n        max_prod = arr[idx]\n        for prev in range(idx):\n            if arr[prev] < arr[idx]:\n                max_prod = max(max_prod, arr[idx] * dp(prev))\n        return max_prod\n    return max((dp(i) for i in range(len(arr))))", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    max_product_dp = [0] * n\n    max_element_dp = [0] * n\n    for i in range(n):\n        max_product_dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_product_dp[i] = max(max_product_dp[i], max_product_dp[j] * arr[i])\n        max_element_dp[i] = max(max_element_dp[i - 1], max_product_dp[i]) if i > 0 else max_product_dp[i]\n    return max(max_product_dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = arr[:]\n    max_prod = max(arr)\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n                max_prod = max(max_prod, dp[i])\n    return max_prod", "from typing import List\nfrom math import inf\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [-inf] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\nfrom math import prod\n\ndef max_product(arr: List[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_products = [0] * n\n    global_max = float('-inf')\n    for i in range(n):\n        max_products[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_products[i] = max(max_products[i], max_products[j] * arr[i])\n        global_max = max(global_max, max_products[i])\n    return global_max", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\nfrom math import prod\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        max_prod = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_prod = max(max_prod, dp[j] * arr[i])\n        dp[i] = max_prod\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [arr[i] for i in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [arr[i] for i in range(n)]\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = arr.copy()\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    max_products = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_products[i] = max(max_products[i], max_products[j] * arr[i])\n    return max(max_products)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = arr[:]\n    for i in range(n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = arr[i]\n    max_res = max(arr)\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        max_res = max(max_res, dp[i])\n    return max_res", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    max_prod = arr[0]\n    dp = [arr[i] for i in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n        max_prod = max(max_prod, dp[i])\n    return max_prod", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    from functools import lru_cache\n    if not arr:\n        return 0\n\n    def max_product_ending_at(index: int) -> int:\n        max_product_here = arr[index]\n        for prev_index in range(index):\n            if arr[prev_index] < arr[index]:\n                max_product_here = max(max_product_here, max_product_ending_at(prev_index) * arr[index])\n        return max_product_here\n    max_product_value = max((max_product_ending_at(i) for i in range(len(arr))))\n    return max_product_value", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n    return max(dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    max_product_dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_product_dp[i] = max(max_product_dp[i], max_product_dp[j] * arr[i])\n    return max(max_product_dp)", "from typing import List\n\ndef max_product(arr: List[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    max_product_ending_at = [0] * n\n    max_global_product = float('-inf')\n    for i in range(n):\n        max_product_ending_at[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                max_product_ending_at[i] = max(max_product_ending_at[i], max_product_ending_at[j] * arr[i])\n        max_global_product = max(max_global_product, max_product_ending_at[i])\n    return max_global_product"], "outputs": "[[45000], [120], [15000], [5], [0], [0], [7], [120], [524880], [6], [12], [510510], [20], [2], [2400000000]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[3, 100, 4, 5, 150, 6]], [45000], [3000]]]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 100, 4, 5, 150, 6]], [[1, 2, 3, 4, 5]], [[10, -20, 30, -40, 50]], [[5]], [[]], [[0, 0, 0]], [[7, 7, 7, 7]], [[1, 2, 3, 0, 4, 5]], [[3, 6, 9, 12, 15, 18]], [[6, 5, 4, 3, 2, 1]], [[-3, -2, -1, 0, 1, 2]], [[2, 3, 5, 7, 11, 13, 17]], [[-5, -4, -3, -2, -1]], [[1, 1, 1, 1, 2, 2, 2, 2]], [[100, 200, 0, 300, 400]]]", "input_output_examples": "[[[[3, 100, 4, 5, 150, 6]]], [[3000]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.3008849557522124, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.3008849557522124, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/470", "original_requirement": "from typing import Tuple\n\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the pairwise addition of the neighboring elements of the given tuple.\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\"\"\"", "entry_point": "add_pairwise", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef add_pairwise(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1)))"], "outputs": "[[(6, 12, 15, 18)], [(0, 0, 0, 0)], [(-6, -12, -15, -18)], [()], [(30, 50)], [()], [(6, -2, 1, -2)], [(300, 500, 700, 900, 1100)], [(4.0, 6.0)], [(0, -10, 0)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(1, 5, 7, 8, 10)], [(0, 0, 0, 0, 0)], [(-1, -5, -7, -8, -10)], [(1,)], [(10, 20, 30)], [()], [(1, 5, -7, 8, -10)], [(100, 200, 300, 400, 500, 600)], [(1.5, 2.5, 3.5)], [(-10, 10, -20, 20)]]", "input_output_examples": "[[[(1, 5, 7, 8, 10)]], [[(6, 12, 15, 18)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/471", "original_requirement": "from typing import List\n\n\ndef find_remainder(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef find_remainder(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the product of the array multiplication modulo n.\nassert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9\n\"\"\"", "entry_point": "find_remainder", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product *= num\n    remainder = product % n\n    return remainder", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for number in arr:\n        product = product * number % n\n    return product", "from typing import List\nfrom functools import reduce\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = reduce(lambda x, y: x * y, arr)\n    return product % n", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n", "from typing import List\nfrom functools import reduce\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = reduce(lambda x, y: x * y, arr)\n    return product % n", "from typing import List\nfrom functools import reduce\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = reduce(lambda x, y: x * y, arr)\n    return product % n", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product % n", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\nfrom functools import reduce\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = reduce(lambda x, y: x * y, arr)\n    return product % n", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\nfrom functools import reduce\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = reduce(lambda x, y: x * y, arr)\n    return product % n", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product = product * num % n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    result = 1\n    for number in arr:\n        result = result * number % n\n    return result", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product", "from typing import List\n\ndef find_remainder(arr: List[int], n: int) -> int:\n    product = 1\n    for num in arr:\n        product *= num\n        product %= n\n    return product"], "outputs": "[[9], [1], [0], [2], [0], [0], [4], [10], [5], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[100, 10, 5, 25, 35, 14], 11], [[7, 3, 5], 8], [[0, 10, 25], 20], [[5], 3], [[1, 2, 3, 4], 1], [[1000, 2000, 3000], 50], [[-1, -2, -3], 5], [[10, 15, 20], 13], [[3, 6, 9, 12, 15], 7], [[1], 2]]", "input_output_examples": "[[[[100, 10, 5, 25, 35, 14], 11]], [[9]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/472", "original_requirement": "from typing import List\n\n\ndef check_Consecutive(l: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n    Write a Python function to check whether the given list contains consecutive numbers or not.\n\n    The function should adhere to the following rules:\n    1. The input list must contain only integers. If the list contains non-integer elements, the function should raise a `TypeError`.\n    2. An empty list (`[]`) is considered invalid input, and the function should raise a `ValueError`.\n    3. A list is considered to contain consecutive numbers if:\n       - The numbers can be arranged in a strictly sequential order without any gaps.\n       - The list does not contain duplicate values.\n       - The range of numbers in the list matches the range from the minimum value to the maximum value in the list.\n\n    Examples:\n    - `check_Consecutive([1, 2, 3, 4, 5])` should return `True` because the list contains consecutive numbers.\n    - `check_Consecutive([1, 2, 2, 3])` should return `False` because the list contains duplicate values.\n    - `check_Consecutive([])` should raise a `ValueError` because an empty list is invalid input.\n    - `check_Consecutive([1, 3, 4])` should return `False` because the numbers are not consecutive.\n\n    assert check_Consecutive([1, 2, 3, 4, 5]) == True\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef check_Consecutive(l: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether the given list contains consecutive numbers or not.\nassert check_Consecutive([1,2,3,4,5]) == True\n\"\"\"", "entry_point": "check_Consecutive", "cluster_list": [{"programs_str": ["from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    return sorted(l) == list(range(min(l), max(l) + 1))"], "outputs": "[[True], [True], [True], [True], [True], [False], [True], ['ValueError'], [True], [True], [False], [True], [True], [True]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    sorted_list = sorted(l)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i + 1] - sorted_list[i] != 1:\n            return False\n    return True", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    sorted_list = sorted(l)\n    return all((sorted_list[i] + 1 == sorted_list[i + 1] for i in range(len(sorted_list) - 1)))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    sorted_list = sorted(l)\n    return all((sorted_list[i] + 1 == sorted_list[i + 1] for i in range(len(sorted_list) - 1)))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    sorted_list = sorted(l)\n    for i in range(len(sorted_list) - 1):\n        if sorted_list[i] + 1 != sorted_list[i + 1]:\n            return False\n    return True"], "outputs": "[[True], [True], [True], [True], [True], [False], [True], [True], [True], [True], [False], [True], [True], [True]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[2]], [[10, 11, 12]], [[1, 3, 2, 5, 4]], [[1, 2, 4, 5]], [[100]], [[]], [[3, 2, 1, 0]], [[7, 8, 9, 10, 11]], [[1, 2, 3, 6]], [[-2, -1, 0, 1]], [[-5, -4, -3]], [[100, 101, 102]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    \"\"\"\n    Write a Python function to check whether the given list contains consecutive numbers or not.\n\n    The function should adhere to the following rules:\n    1. The input list must contain only integers. If the list contains non-integer elements, the function should raise a `TypeError`.\n    2. An empty list (`[]`) is considered invalid input, and the function should raise a `ValueError`.\n    3. A list is considered to contain consecutive numbers if:\n       - The numbers can be arranged in a strictly sequential order without any gaps.\n       - The list does not contain duplicate values.\n       - The range of numbers in the list matches the range from the minimum value to the maximum value in the list.\n\n    Examples:\n    - `check_Consecutive([1, 2, 3, 4, 5])` should return `True` because the list contains consecutive numbers.\n    - `check_Consecutive([1, 2, 2, 3])` should return `False` because the list contains duplicate values.\n    - `check_Consecutive([])` should raise a `ValueError` because an empty list is invalid input.\n    - `check_Consecutive([1, 3, 4])` should return `False` because the numbers are not consecutive.\n\n    assert check_Consecutive([1, 2, 3, 4, 5]) == True\n    \"\"\"", "entry_point": "check_Consecutive", "cluster_list": [{"programs_str": ["from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list is empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('All elements in the list must be integers.')\n    if len(l) != len(set(l)):\n        return False\n    min_val = min(l)\n    max_val = max(l)\n    return sorted(l) == list(range(min_val, max_val + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list is empty')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('Input list must contain only integers')\n    unique_elements = set(l)\n    min_val = min(l)\n    max_val = max(l)\n    return len(unique_elements) == len(l) and max_val - min_val + 1 == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list is invalid: empty list')\n    if not all((isinstance(i, int) for i in l)):\n        raise TypeError('Input list contains non-integer elements')\n    if len(set(l)) != len(l):\n        return False\n    return max(l) - min(l) + 1 == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not isinstance(l, list) or any((not isinstance(i, int) for i in l)):\n        raise TypeError('Input list must contain only integers.')\n    if not l:\n        raise ValueError('Empty list is invalid input.')\n    if len(l) != len(set(l)):\n        return False\n    return max(l) - min(l) + 1 == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list is empty, invalid input.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('Input list must contain only integers.')\n    unique_elements = set(l)\n    if len(unique_elements) != len(l):\n        return False\n    min_val, max_val = (min(l), max(l))\n    return len(unique_elements) == max_val - min_val + 1", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('The input list is invalid; it cannot be empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('The list must contain only integers.')\n    if len(set(l)) != len(l):\n        return False\n    return max(l) - min(l) + 1 == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list is empty.')\n    if any((not isinstance(x, int) for x in l)):\n        raise TypeError('Input list contains non-integer elements.')\n    if len(l) != len(set(l)):\n        return False\n    min_val = min(l)\n    max_val = max(l)\n    return sorted(l) == list(range(min_val, max_val + 1))", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list is empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('Input list must contain only integers.')\n    if len(l) != len(set(l)):\n        return False\n    return max(l) - min(l) + 1 == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list is invalid because it is empty.')\n    if not all((isinstance(i, int) for i in l)):\n        raise TypeError('Input list must contain only integers.')\n    if len(l) != len(set(l)):\n        return False\n    if max(l) - min(l) + 1 == len(l):\n        return True\n    return False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list cannot be empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('Input list must contain only integers.')\n    if len(set(l)) != len(l):\n        return False\n    return max(l) - min(l) + 1 == len(l) and len(set(l)) == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list cannot be empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('All elements in the input list must be integers.')\n    if len(l) != len(set(l)):\n        return False\n    return max(l) - min(l) + 1 == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list cannot be empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('All elements in the list must be integers.')\n    if len(set(l)) != len(l):\n        return False\n    return max(l) - min(l) + 1 == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('The list is empty and therefore invalid input.')\n    if not all((isinstance(item, int) for item in l)):\n        raise TypeError('The list contains non-integer elements.')\n    unique_elements = set(l)\n    if len(unique_elements) != len(l):\n        return False\n    min_val, max_val = (min(l), max(l))\n    expected_range = set(range(min_val, max_val + 1))\n    return unique_elements == expected_range", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not isinstance(l, list):\n        raise TypeError('Input must be a list of integers.')\n    if len(l) == 0:\n        raise ValueError('List cannot be empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('All elements in the list must be integers.')\n    if len(set(l)) != len(l):\n        return False\n    min_val, max_val = (min(l), max(l))\n    expected_range = set(range(min_val, max_val + 1))\n    return set(l) == expected_range", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list is empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('Input list contains non-integer elements.')\n    if len(l) != len(set(l)):\n        return False\n    if max(l) - min(l) + 1 == len(l):\n        return True\n    return False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list cannot be empty.')\n    if not all((isinstance(item, int) for item in l)):\n        raise TypeError('All elements in the list must be integers.')\n    if len(l) != len(set(l)):\n        return False\n    min_val, max_val = (min(l), max(l))\n    if max_val - min_val + 1 == len(l):\n        return True\n    return False", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('The input list should not be empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('The input list must contain only integers.')\n    if len(set(l)) != len(l):\n        return False\n    return max(l) - min(l) + 1 == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('Input list cannot be empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('Input list must contain only integers.')\n    if len(set(l)) != len(l):\n        return False\n    return max(l) - min(l) + 1 == len(l) and len(set(l)) == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('The input list cannot be empty.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('The input list must contain only integers.')\n    min_val, max_val = (min(l), max(l))\n    return len(set(l)) == len(l) and max_val - min_val + 1 == len(l)", "from typing import List\n\ndef check_Consecutive(l: List[int]) -> bool:\n    if not l:\n        raise ValueError('The list is empty and considered invalid input.')\n    if not all((isinstance(x, int) for x in l)):\n        raise TypeError('The list contains non-integer elements.')\n    unique_values = set(l)\n    return len(unique_values) == len(l) and max(unique_values) - min(unique_values) + 1 == len(unique_values)"], "outputs": "[[True], [True], [True], [True], [True], [False], [True], ['ValueError'], [True], [True], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[2]], [[10, 11, 12]], [[1, 3, 2, 5, 4]], [[1, 2, 4, 5]], [[100]], [[]], [[3, 2, 1, 0]], [[7, 8, 9, 10, 11]], [[1, 2, 3, 6]], [[-2, -1, 0, 1]], [[-5, -4, -3]], [[100, 101, 102]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/473", "original_requirement": "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    \"\"\"\n    Write a function to find the intersection of tuples from two lists of tuples, \n    treating tuples as equivalent if their elements match irrespective of order. \n    The function should normalize each tuple by sorting its elements, ensuring that \n    tuples like (4, 5) and (5, 4) are treated as identical. The output should be a \n    set of tuples, preserving the tuple structure and order of elements within each \n    tuple as determined by the normalization process.\n\n    Additional clarifications:\n    1. Input tuples are assumed to have consistent sizes, and the function will \n       normalize each tuple by sorting its elements.\n    2. Duplicate tuples in the input lists are treated as a single instance for \n       the purpose of intersection.\n    3. The output is a set of tuples, where each tuple is normalized (sorted) \n       and represents a unique intersection of the input lists.\n\n    Example:\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , \n                              [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\nfrom typing import Set\nfrom typing import Tuple\n\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n\"\"\"\nWrite a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\"\"\"", "entry_point": "tuple_intersection", "cluster_list": [{"programs_str": ["from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(tup)) for tup in test_list1}\n    normalized_set2 = {tuple(sorted(tup)) for tup in test_list2}\n    return normalized_set1 & normalized_set2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_list1 = set((tuple(sorted(t)) for t in test_list1))\n    normalized_list2 = set((tuple(sorted(t)) for t in test_list2))\n    return normalized_list1.intersection(normalized_list2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    test_set1 = {tuple(sorted(t)) for t in test_list1}\n    test_set2 = {tuple(sorted(t)) for t in test_list2}\n    return test_set1.intersection(test_set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n\n    def normalize(t: Tuple) -> Tuple:\n        return tuple(sorted(t))\n    set1 = {normalize(t) for t in test_list1}\n    set2 = {normalize(t) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tpl)) for tpl in test_list1}\n    set2 = {tuple(sorted(tpl)) for tpl in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_list1 = {tuple(sorted(tpl)) for tpl in test_list1}\n    normalized_list2 = {tuple(sorted(tpl)) for tpl in test_list2}\n    return normalized_list1.intersection(normalized_list2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tpl)) for tpl in test_list1}\n    set2 = {tuple(sorted(tpl)) for tpl in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(item)) for item in test_list1}\n    set2 = {tuple(sorted(item)) for item in test_list2}\n    return set1 & set2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(tpl)) for tpl in test_list1}\n    set2 = {tuple(sorted(tpl)) for tpl in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_test_list1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_test_list2 = {tuple(sorted(t)) for t in test_list2}\n    intersection = normalized_test_list1 & normalized_test_list2\n    return intersection", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_list1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_list2 = {tuple(sorted(t)) for t in test_list2}\n    intersection = normalized_list1.intersection(normalized_list2)\n    return intersection", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = set((tuple(sorted(t)) for t in test_list1))\n    set2 = set((tuple(sorted(t)) for t in test_list2))\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_set1.intersection(normalized_set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(t)) for t in test_list1}\n    set2 = {tuple(sorted(t)) for t in test_list2}\n    return set1.intersection(set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = {tuple(sorted(item)) for item in test_list1}\n    set2 = {tuple(sorted(item)) for item in test_list2}\n    return set1.intersection(set2)"], "outputs": "[[{(4, 5), (5, 6), (3, 4)}], [{(1, 2)}], [{(1, 2), (5, 6), (3, 4)}], [set()], [set()], [set()], [{(1, 1), (2, 2)}], [set()], [{(2, 3), (1, 2), (1, 3)}], [{(1, 2), (1, 3)}]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    set1 = set((frozenset(t) for t in test_list1))\n    set2 = set((frozenset(t) for t in test_list2))\n    intersection = set1.intersection(set2)\n    return {tuple(sorted(t)) for t in intersection}"], "outputs": "[[{(4, 5), (5, 6), (3, 4)}], [{(1, 2)}], [{(1, 2), (5, 6), (3, 4)}], [set()], [set()], [set()], [{(1,), (2,)}], [set()], [{(2, 3), (1, 2), (1, 3)}], [{(1, 2), (1, 3)}]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]], [[(1, 2)], [(2, 1)]], [[(1, 2), (3, 4), (5, 6)], [(6, 5), (4, 3), (2, 1)]], [[], []], [[(1, 2), (3, 4)], []], [[], [(1, 2), (3, 4)]], [[(1, 1), (2, 2)], [(1, 1), (2, 2)]], [[(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10)]], [[(1, 2), (2, 3), (3, 1)], [(3, 2), (2, 1), (1, 3)]], [[(1, 2), (1, 3), (2, 1)], [(2, 1), (1, 2), (3, 1)]]]", "input_output_examples": "[[[[(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]]], [[{(4, 5), (5, 6), (3, 4)}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    \"\"\"\n    Write a function to find the intersection of tuples from two lists of tuples, \n    treating tuples as equivalent if their elements match irrespective of order. \n    The function should normalize each tuple by sorting its elements, ensuring that \n    tuples like (4, 5) and (5, 4) are treated as identical. The output should be a \n    set of tuples, preserving the tuple structure and order of elements within each \n    tuple as determined by the normalization process.\n\n    Additional clarifications:\n    1. Input tuples are assumed to have consistent sizes, and the function will \n       normalize each tuple by sorting its elements.\n    2. Duplicate tuples in the input lists are treated as a single instance for \n       the purpose of intersection.\n    3. The output is a set of tuples, where each tuple is normalized (sorted) \n       and represents a unique intersection of the input lists.\n\n    Example:\n    assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , \n                              [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n```", "entry_point": "tuple_intersection", "cluster_list": [{"programs_str": ["from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    intersection = normalized_set1 & normalized_set2\n    return intersection", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_list1 = {tuple(sorted(tup)) for tup in test_list1}\n    normalized_list2 = {tuple(sorted(tup)) for tup in test_list2}\n    return normalized_list1 & normalized_list2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_list1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_list2 = {tuple(sorted(t)) for t in test_list2}\n    intersection = normalized_list1.intersection(normalized_list2)\n    return intersection", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_list1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_list2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_list1.intersection(normalized_list2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    intersection = normalized_set1 & normalized_set2\n    return intersection", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_set1 & normalized_set2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(tpl)) for tpl in test_list1}\n    normalized_set2 = {tuple(sorted(tpl)) for tpl in test_list2}\n    return normalized_set1 & normalized_set2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_set1 & normalized_set2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_list1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_list2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_list1 & normalized_list2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n\n    def normalize_tuple(t: Tuple) -> Tuple:\n        return tuple(sorted(t))\n    normalized_set1 = {normalize_tuple(t) for t in test_list1}\n    normalized_set2 = {normalize_tuple(t) for t in test_list2}\n    return normalized_set1 & normalized_set2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_set1 & normalized_set2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized1 = {tuple(sorted(t)) for t in test_list1}\n    normalized2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized1 & normalized2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_set1.intersection(normalized_set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_set1 & normalized_set2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(item)) for item in test_list1}\n    normalized_set2 = {tuple(sorted(item)) for item in test_list2}\n    return normalized_set1.intersection(normalized_set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_set1 & normalized_set2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_list1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_list2 = {tuple(sorted(t)) for t in test_list2}\n    intersection = normalized_list1.intersection(normalized_list2)\n    return intersection", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_set1 & normalized_set2", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_set1.intersection(normalized_set2)", "from typing import List, Set, Tuple\n\ndef tuple_intersection(test_list1: List[Tuple], test_list2: List[Tuple]) -> Set[Tuple]:\n    normalized_set1 = {tuple(sorted(t)) for t in test_list1}\n    normalized_set2 = {tuple(sorted(t)) for t in test_list2}\n    return normalized_set1.intersection(normalized_set2)"], "outputs": "[[{(4, 5), (5, 6), (3, 4)}], [{(1, 2)}], [{(1, 2), (5, 6), (3, 4)}], [set()], [set()], [set()], [{(1, 1), (2, 2)}], [set()], [{(2, 3), (1, 2), (1, 3)}], [{(1, 2), (1, 3)}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]], [[(1, 2)], [(2, 1)]], [[(1, 2), (3, 4), (5, 6)], [(6, 5), (4, 3), (2, 1)]], [[], []], [[(1, 2), (3, 4)], []], [[], [(1, 2), (3, 4)]], [[(1, 1), (2, 2)], [(1, 1), (2, 2)]], [[(1, 2), (3, 4), (5, 6)], [(7, 8), (9, 10)]], [[(1, 2), (2, 3), (3, 1)], [(3, 2), (2, 1), (1, 3)]], [[(1, 2), (1, 3), (2, 1)], [(2, 1), (1, 2), (3, 1)]]]", "input_output_examples": "[[[[(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]]], [[{(4, 5), (5, 6), (3, 4)}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/474", "original_requirement": "def replace_char(str1: str, ch: str, newch: str) -> str:\n\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def replace_char(str1: str, ch: str, newch: str) -> str:\n\"\"\"\nWrite a function to replace characters in a string.\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\"\"\"", "entry_point": "replace_char", "cluster_list": [{"programs_str": ["def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)", "def replace_char(str1: str, ch: str, newch: str) -> str:\n    return str1.replace(ch, newch)"], "outputs": "[['pollgon'], ['aqqle'], ['massassappa'], ['baoooon'], ['tistcasi'], ['bbbbb'], [''], ['xhxexlxlxox'], ['hello'], ['12845'], ['python'], ['aBcdeF']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['polygon', 'y', 'l'], ['apple', 'p', 'q'], ['mississippi', 'i', 'a'], ['balloon', 'l', 'o'], ['testcase', 'e', 'i'], ['aaaaa', 'a', 'b'], ['', 'x', 'y'], ['hello', '', 'x'], ['hello', 'x', ''], ['12345', '3', '8'], ['python', 'z', 't'], ['aBcDeF', 'D', 'd']]", "input_output_examples": "[[['polygon', 'y', 'l']], [['pollgon']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/475", "original_requirement": "def sort_counter(dict1: dict) -> list:\n\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def sort_counter(dict1: dict) -> list:\n\"\"\"\nWrite a function to sort a dictionary by value.\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\"\"\"", "entry_point": "sort_counter", "cluster_list": [{"programs_str": ["def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import List, Tuple\n\ndef sort_counter(dict1: dict) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import List, Tuple\n\ndef sort_counter(dict1: dict) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import List, Tuple, Dict\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import Dict, List, Tuple\n\ndef sort_counter(dict1: Dict[str, int]) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import List, Tuple\n\ndef sort_counter(dict1: dict) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import List, Tuple\n\ndef sort_counter(dict1: dict) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import List, Tuple\n\ndef sort_counter(dict1: dict) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "def sort_counter(dict1: dict) -> list:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)", "from typing import List, Tuple\n\ndef sort_counter(dict1: dict) -> List[Tuple[str, int]]:\n    return sorted(dict1.items(), key=lambda item: item[1], reverse=True)"], "outputs": "[[[('Chemistry', 87), ('Physics', 83), ('Math', 81)]], [[('B', 10), ('A', 5), ('C', 1)]], [[('X', 100)]], [[]], [[('F', -1), ('E', -5), ('G', -10)]], [[('Apple', 0), ('Banana', 0), ('Cherry', 0)]], [[('Lion', 30.75), ('Zebra', 25.5), ('Tiger', 20.25)]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{'Math': 81, 'Physics': 83, 'Chemistry': 87}], [{'A': 5, 'B': 10, 'C': 1}], [{'X': 100}], [{}], [{'E': -5, 'F': -1, 'G': -10}], [{'Apple': 0, 'Banana': 0, 'Cherry': 0}], [{'Zebra': 25.5, 'Lion': 30.75, 'Tiger': 20.25}]]", "input_output_examples": "[[[{'Math': 81, 'Physics': 83, 'Chemistry': 87}]], [[[('Chemistry', 87), ('Physics', 83), ('Math', 81)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/476", "original_requirement": "from typing import List\n\n\ndef big_sum(nums: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n    Write a Python function to find the sum of the largest and smallest values in a given list of integers.\n\n    Requirements:\n    1. The input `nums` must be a list of integers.\n    2. If the input list `nums` is empty, the function should raise a `ValueError`.\n    3. The function will return the sum of the largest and smallest integers in the list.\n\n    Example:\n    assert big_sum([1, 2, 3]) == 4\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef big_sum(nums: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of the largest and smallest value in a given array.\nassert big_sum([1,2,3]) == 4\n\"\"\"", "entry_point": "big_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    return min(nums) + max(nums)"], "outputs": "[[4], [60], [-11], [200], [0], [333], ['ValueError']]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        return 0\n    return max(nums) + min(nums)"], "outputs": "[[4], [60], [-11], [200], [0], [333], [0]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[[1, 2, 3]], [[10, 20, 30, 40, 50]], [[-5, -10, -1]], [[100]], [[0, 0, 0]], [[123, -456, 789]], [[]]]", "input_output_examples": "[[[[1, 2, 3]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    \"\"\"\n    Write a Python function to find the sum of the largest and smallest values in a given list of integers.\n\n    Requirements:\n    1. The input `nums` must be a list of integers.\n    2. If the input list `nums` is empty, the function should raise a `ValueError`.\n    3. The function will return the sum of the largest and smallest integers in the list.\n\n    Example:\n    assert big_sum([1, 2, 3]) == 4\n    \"\"\"\n```", "entry_point": "big_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('Input list is empty')\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list cannot be empty.')\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The list is empty')\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list cannot be empty.')\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list cannot be empty.')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list cannot be empty')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list is empty.')\n    return min(nums) + max(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list cannot be empty.')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list cannot be empty.')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('Input list cannot be empty.')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list cannot be empty.')\n    return max(nums) + min(nums)", "from typing import List\n\ndef big_sum(nums: List[int]) -> int:\n    if not nums:\n        raise ValueError('The input list cannot be empty')\n    smallest = min(nums)\n    largest = max(nums)\n    return smallest + largest"], "outputs": "[[4], [60], [-11], [200], [0], [333], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[10, 20, 30, 40, 50]], [[-5, -10, -1]], [[100]], [[0, 0, 0]], [[123, -456, 789]], [[]]]", "input_output_examples": "[[[[1, 2, 3]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/477", "original_requirement": "def is_lower(string: str) -> str:\n\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_lower(string: str) -> str:\n\"\"\"\nWrite a python function to convert the given string to lower case.\nassert is_lower(\"InValid\") == \"invalid\"\n\"\"\"", "entry_point": "is_lower", "cluster_list": [{"programs_str": ["def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()", "def is_lower(string: str) -> str:\n    return string.lower()"], "outputs": "[['uppercase'], ['lowercase'], ['mixedcase'], ['123abcabc'], ['!@#$%^&*()'], [''], ['   '], ['multiple words here'], ['already lowercase'], ['allcaps12345']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['UPPERCASE'], ['lowercase'], ['MixEdCaSe'], ['123ABCabc'], ['!@#$%^&*()'], [''], ['   '], ['Multiple words HERE'], ['Already lowercase'], ['ALLCAPS12345']]", "input_output_examples": "[[['InValid']], [['invalid']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/478", "original_requirement": "def remove_lowercase(str1: str) -> str:\n\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"", "repaired_requirement": "```python\ndef remove_lowercase(str1: str) -> str:\n    \"\"\"\n    Write a function to remove individual lowercase alphabetic characters from a given string.\n    The function should:\n    1. Remove only lowercase alphabetic characters (e.g., 'a' to 'z').\n    2. Retain all other characters, including uppercase alphabetic characters, digits, punctuation, and spaces.\n    3. Preserve the original order of characters in the input string.\n\n    Example:\n    assert remove_lowercase(\"PYTHon\") == 'PYTH'\n    \"\"\"\n```", "original_clusters": {"requirement": "def remove_lowercase(str1: str) -> str:\n\"\"\"\nWrite a function to remove lowercase substrings from a given string.\n\n\nassert remove_lowercase(\"PYTHon\")==('PYTH')\n\"\"\"", "entry_point": "remove_lowercase", "cluster_list": [{"programs_str": ["def remove_lowercase(str1: str) -> str:\n    return ''.join([ch for ch in str1 if not ch.islower()])", "from typing import List\n\ndef remove_lowercase(str1: str) -> str:\n    result = ''.join([char for char in str1 if not char.islower()])\n    return result", "def remove_lowercase(str1: str) -> str:\n    return ''.join(filter(lambda ch: not ch.islower(), str1))", "import re\n\ndef remove_lowercase(str1: str) -> str:\n    return re.sub('[a-z]+', '', str1)", "import re\n\ndef remove_lowercase(str1: str) -> str:\n    return re.sub('[a-z]+', '', str1)", "def remove_lowercase(str1: str) -> str:\n    return ''.join((ch for ch in str1 if not ch.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "import re\n\ndef remove_lowercase(str1: str) -> str:\n    return re.sub('[a-z]+', '', str1)", "def remove_lowercase(str1: str) -> str:\n    result = []\n    current_upper = []\n    for ch in str1:\n        if ch.islower():\n            if current_upper:\n                result.append(''.join(current_upper))\n                current_upper = []\n        else:\n            current_upper.append(ch)\n    if current_upper:\n        result.append(''.join(current_upper))\n    return ''.join(result)", "import re\n\ndef remove_lowercase(str1: str) -> str:\n    return re.sub('[a-z]+', '', str1)", "def remove_lowercase(str1: str) -> str:\n    result = []\n    current_chunk = []\n    for char in str1:\n        if char.islower():\n            if current_chunk:\n                result.append(''.join(current_chunk))\n                current_chunk = []\n        else:\n            current_chunk.append(char)\n    if current_chunk:\n        result.append(''.join(current_chunk))\n    return ''.join(result)", "def remove_lowercase(str1: str) -> str:\n    return ''.join(filter(lambda c: not c.islower(), str1))", "import re\n\ndef remove_lowercase(str1: str) -> str:\n    return re.sub('[a-z]+', '', str1)", "def remove_lowercase(str1: str) -> str:\n    result = []\n    temp = []\n    for char in str1:\n        if char.islower():\n            if temp:\n                result.append(''.join(temp))\n                temp = []\n        else:\n            temp.append(char)\n    if temp:\n        result.append(''.join(temp))\n    return ''.join(result)", "def remove_lowercase(str1: str) -> str:\n    return ''.join([ch for ch in str1 if not ch.islower()])", "def remove_lowercase(str1: str) -> str:\n    result = []\n    i = 0\n    while i < len(str1):\n        if str1[i].islower():\n            while i < len(str1) and str1[i].islower():\n                i += 1\n        else:\n            result.append(str1[i])\n            i += 1\n    return ''.join(result)", "def remove_lowercase(str1: str) -> str:\n    result = []\n    i = 0\n    while i < len(str1):\n        if str1[i].isupper():\n            result.append(str1[i])\n        else:\n            while i < len(str1) and str1[i].islower():\n                i += 1\n            continue\n        i += 1\n    return ''.join(result)"], "outputs": "[['PYTH'], ['TH'], ['PYTHON'], [''], ['123PYON'], ['P123'], [''], ['ABC'], [''], ['PHPTON'], ['123456'], ['ABDEF'], ['!!PY!!']]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def remove_lowercase(str1: str) -> str:\n    result = []\n    last_index = 0\n    for i, c in enumerate(str1):\n        if c.islower() and (i == 0 or not str1[i - 1].islower()):\n            if last_index < i:\n                result.append(str1[last_index:i])\n            last_index = i + 1\n        elif not c.islower() and (i == len(str1) - 1 or str1[i + 1].islower()):\n            result.append(c)\n    return ''.join(result)"], "outputs": "[['HPYTH'], ['HyTH'], ['N'], [''], ['Y123PYN'], ['PP3'], [''], ['C'], [''], ['PPHtHPnPTTN'], ['31236'], ['BABFDEF'], ['Y!!PY!']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['PYTHon'], ['HPYTH'], ['PYTH']]]"}, {"programs_str": ["import re\n\ndef remove_lowercase(str1: str) -> str:\n    return ''.join(re.findall('[A-Z]+', str1))", "def remove_lowercase(str1: str) -> str:\n    result = []\n    i = 0\n    while i < len(str1):\n        if str1[i].isupper():\n            start = i\n            while i < len(str1) and str1[i].isupper():\n                i += 1\n            result.append(str1[start:i])\n        else:\n            i += 1\n    return ''.join(result)"], "outputs": "[['PYTH'], ['TH'], ['PYTHON'], [''], ['PYON'], ['P'], [''], ['ABC'], [''], ['PHPTON'], [''], ['ABDEF'], ['PY']]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.4716734178155153, "llm_generated_inputs": "[['PYTHon'], ['pyTHon'], ['PYTHON'], ['python'], ['123PYthON'], ['Pyth123'], [''], ['ABC'], ['abc'], ['PytHonPyThON'], ['123abc456'], ['ABcDEFgh'], ['!!PYth!!']]", "input_output_examples": "[[['PYTHon']], [['PYTH']]]", "weighted_test_consistency": 0.95, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef remove_lowercase(str1: str) -> str:\n    \"\"\"\n    Write a function to remove individual lowercase alphabetic characters from a given string.\n    The function should:\n    1. Remove only lowercase alphabetic characters (e.g., 'a' to 'z').\n    2. Retain all other characters, including uppercase alphabetic characters, digits, punctuation, and spaces.\n    3. Preserve the original order of characters in the input string.\n\n    Example:\n    assert remove_lowercase(\"PYTHon\") == 'PYTH'\n    \"\"\"\n```", "entry_point": "remove_lowercase", "cluster_list": [{"programs_str": ["def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join([char for char in str1 if not 'a' <= char <= 'z'])", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((c for c in str1 if not 'a' <= c <= 'z'))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not 'a' <= char <= 'z'))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not (char.isalpha() and char.islower())))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not 'a' <= char <= 'z'))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not 'a' <= char <= 'z'))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not 'a' <= char <= 'z'))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not 'a' <= char <= 'z'))", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join([char for char in str1 if not char.islower()])", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not char.islower()))", "def remove_lowercase(str1: str) -> str:\n    return ''.join([char for char in str1 if not (char.isalpha() and char.islower())])", "def remove_lowercase(str1: str) -> str:\n    return ''.join((char for char in str1 if not 'a' <= char <= 'z'))"], "outputs": "[['PYTH'], ['TH'], ['PYTHON'], [''], ['123PYON'], ['P123'], [''], ['ABC'], [''], ['PHPTON'], ['123456'], ['ABDEF'], ['!!PY!!']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['PYTHon'], ['pyTHon'], ['PYTHON'], ['python'], ['123PYthON'], ['Pyth123'], [''], ['ABC'], ['abc'], ['PytHonPyThON'], ['123abc456'], ['ABcDEFgh'], ['!!PYth!!']]", "input_output_examples": "[[['PYTHon']], [['PYTH']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/479", "original_requirement": "def first_Digit(n: int) -> int:\n\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"", "repaired_requirement": "def first_Digit(n: int) -> int:\n    \"\"\"\n    Write a Python function to find the first digit of a given positive integer.\n    \n    Preconditions:\n    - The input `n` must be a positive integer (n > 0).\n    - Negative integers or non-integer inputs are considered invalid and should not be passed to the function.\n    \n    Behavior:\n    - The function extracts the first digit of the input number by converting it to a string, taking the first character, and converting it back to an integer.\n    - If a negative integer is passed, the function behavior is undefined and may raise a runtime error (e.g., ValueError).\n    \n    Example:\n    assert first_Digit(123) == 1\n    \"\"\"", "original_clusters": {"requirement": "def first_Digit(n: int) -> int:\n\"\"\"\nWrite a python function to find the first digit of a given number.\nassert first_Digit(123) == 1\n\"\"\"", "entry_point": "first_Digit", "cluster_list": [{"programs_str": ["def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    n_str = str(n)\n    return int(n_str[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0]) if n != 0 else 0", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0]) if n != 0 else 0", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])"], "outputs": "[[1], [9], [4], [0], ['ValueError'], [1], ['ValueError'], [1], ['ValueError'], [9], [1]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def first_Digit(n: int) -> int:\n    return int(str(abs(n))[0])", "def first_Digit(n: int) -> int:\n    n_str = str(abs(n))\n    return int(n_str[0])", "def first_Digit(n: int) -> int:\n    n = abs(n)\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    n = abs(n)\n    while n >= 10:\n        n //= 10\n    return n", "def first_Digit(n: int) -> int:\n    return int(str(n)[0]) if n > 0 else int(str(-n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(abs(n))[0])"], "outputs": "[[1], [9], [4], [0], [1], [1], [9], [1], [1], [9], [1]]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8812908992306927, "llm_generated_inputs": "[[123], [987654321], [456], [0], [-123], [100], [-987], [1], [-1], [999999], [10]]", "input_output_examples": "[[[123]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def first_Digit(n: int) -> int:\n    \"\"\"\n    Write a Python function to find the first digit of a given positive integer.\n    \n    Preconditions:\n    - The input `n` must be a positive integer (n > 0).\n    - Negative integers or non-integer inputs are considered invalid and should not be passed to the function.\n    \n    Behavior:\n    - The function extracts the first digit of the input number by converting it to a string, taking the first character, and converting it back to an integer.\n    - If a negative integer is passed, the function behavior is undefined and may raise a runtime error (e.g., ValueError).\n    \n    Example:\n    assert first_Digit(123) == 1\n    \"\"\"", "entry_point": "first_Digit", "cluster_list": [{"programs_str": ["def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])", "def first_Digit(n: int) -> int:\n    return int(str(n)[0])"], "outputs": "[[1], [9], [4], [0], ['ValueError'], [1], ['ValueError'], [1], ['ValueError'], [9], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[123], [987654321], [456], [0], [-123], [100], [-987], [1], [-1], [999999], [10]]", "input_output_examples": "[[[123]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/554", "original_requirement": "from typing import List\n\n\ndef Split(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef Split(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function which takes a list of integers and only returns the odd ones.\nassert Split([1,2,3,4,5,6]) == [1,3,5]\n\"\"\"", "entry_point": "Split", "cluster_list": [{"programs_str": ["from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [i for i in l if i % 2 != 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 != 0]"], "outputs": "[[[1, 3, 5]], [[]], [[]], [[1, 3, 5, 7]], [[]], [[-3, -1, 1, 3]], [[999]], [[]], [[1, 1, 1, 1]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6]], [[]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7]], [[0]], [[-3, -2, -1, 0, 1, 2, 3]], [[999]], [[1000]], [[1, 1, 1, 1]], [[0, 2, 4, 6, 8]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6]]], [[[1, 3, 5]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/555", "original_requirement": "def difference(n: int) -> int:\n\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def difference(n: int) -> int:\n\"\"\"\nWrite a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\nassert difference(3) == 30\n\"\"\"", "entry_point": "difference", "cluster_list": [{"programs_str": ["def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_natural_numbers = sum((i for i in range(1, n + 1)))\n    return sum_of_cubes - sum_of_natural_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_natural_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_natural_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_natural_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_natural_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum((i for i in range(1, n + 1)))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum((i for i in range(1, n + 1)))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers", "def difference(n: int) -> int:\n    sum_of_cubes = sum((i ** 3 for i in range(1, n + 1)))\n    sum_of_numbers = sum(range(1, n + 1))\n    return sum_of_cubes - sum_of_numbers"], "outputs": "[[0], [0], [30], [2970], [1624350], [25497450], [0], [249499750500]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [3], [10], [50], [100], [-5], [999]]", "input_output_examples": "[[[3]], [[30]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/556", "original_requirement": "from typing import List\n\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n\"\"\"\nWrite a python function to count the number of pairs whose xor value is odd.\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\n\"\"\"", "entry_point": "find_Odd_Pair", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count_odd = 0\n    count_even = 0\n    for number in A:\n        if number % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\n    return count_odd * count_even", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count_odd = sum((1 for num in A if num % 2 == 1))\n    count_even = N - count_odd\n    return count_odd * count_even", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for num in A if num % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for num in A if num % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    even_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count_even = sum((1 for x in A if x % 2 == 0))\n    count_odd = N - count_even\n    return count_odd * count_even", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    count_odd = sum((1 for num in A if num % 2 != 0))\n    count_even = N - count_odd\n    return count_odd * count_even", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    even_count = 0\n    for number in A:\n        if number % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    even_count = sum((1 for num in A if num % 2 == 0))\n    odd_count = N - even_count\n    return even_count * odd_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = 0\n    even_count = 0\n    for num in A:\n        if num % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count", "from typing import List\n\ndef find_Odd_Pair(A: List[int], N: int) -> int:\n    odd_count = sum((1 for x in A if x % 2 != 0))\n    even_count = N - odd_count\n    return odd_count * even_count"], "outputs": "[[6], [4], [0], [0], [0], [0], [0], [0], [16], [4], [0], [2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 4, 7, 2, 1], 5], [[2, 3, 6, 8, 12], 5], [[1, 1, 1, 1], 4], [[10, 20, 30, 40], 4], [[1], 1], [[], 0], [[1, 3, 5, 7, 9, 11], 6], [[2, 4, 6, 8], 4], [[1, 2, 3, 4, 5, 6, 7, 8], 8], [[-1, -3, 2, 4], 4], [[0, 0, 0, 0], 4], [[15, 22, 33], 3]]", "input_output_examples": "[[[[5, 4, 7, 2, 1], 5]], [[6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.19999999999999996, "original_avg_pass_rate": 0.6132075471698113, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/557", "original_requirement": "def toggle_string(string: str) -> str:\n\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def toggle_string(string: str) -> str:\n\"\"\"\nWrite a function to toggle the case of all characters in a string.\nassert toggle_string(\"Python\")==(\"pYTHON\")\n\"\"\"", "entry_point": "toggle_string", "cluster_list": [{"programs_str": ["def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()", "def toggle_string(string: str) -> str:\n    return string.swapcase()"], "outputs": "[['pYTHON'], ['Python'], ['hELLOwORLD'], ['HelloWorld'], ['123abc'], ['123ABC'], ['!!AbC!@'], [' '], [''], ['upperLOWERcase'], ['CoNFuSeDcAsE']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Python'], ['pYTHON'], ['HelloWorld'], ['hELLOwORLD'], ['123ABC'], ['123abc'], ['!!aBc!@'], [' '], [''], ['UPPERlowerCASE'], ['cOnfUsEdCaSe']]", "input_output_examples": "[[['Python']], [['pYTHON']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/558", "original_requirement": "def digit_distance_nums(n1: int, n2: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def digit_distance_nums(n1: int, n2: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the per-digit difference between two integers.\nassert digit_distance_nums(1,2) == 1\n\"\"\"", "entry_point": "digit_distance_nums", "cluster_list": [{"programs_str": ["def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    distance_sum = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        distance_sum += abs(int(digit1) - int(digit2))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    distance_sum = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    digit_difference_sum = 0\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    for d1, d2 in zip(str_n1, str_n2):\n        digit_difference_sum += abs(int(d1) - int(d2))\n    return digit_difference_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    return sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    distance = sum((abs(int(a) - int(b)) for a, b in zip(str_n1, str_n2)))\n    return distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    return sum((abs(int(a) - int(b)) for a, b in zip(str_n1, str_n2)))", "def digit_distance_nums(n1: int, n2: int) -> int:\n    s1, s2 = (str(n1), str(n2))\n    max_len = max(len(s1), len(s2))\n    s1 = s1.zfill(max_len)\n    s2 = s2.zfill(max_len)\n    distance = sum((abs(int(a) - int(b)) for a, b in zip(s1, s2)))\n    return distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1, str_n2 = (str_n1.zfill(max_len), str_n2.zfill(max_len))\n    return sum((abs(int(a) - int(b)) for a, b in zip(str_n1, str_n2)))", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1, str_n2 = (str_n1.zfill(max_length), str_n2.zfill(max_length))\n    distance_sum = sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    return sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str1, str2 = (str(n1), str(n2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    total_distance = 0\n    for digit1, digit2 in zip(str1, str2):\n        total_distance += abs(int(digit1) - int(digit2))\n    return total_distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    return sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1, str_n2 = (str_n1.zfill(max_len), str_n2.zfill(max_len))\n    return sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    return sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_length = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_length)\n    str_n2 = str_n2.zfill(max_length)\n    distance_sum = 0\n    for d1, d2 in zip(str_n1, str_n2):\n        distance_sum += abs(int(d1) - int(d2))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    distance = sum((abs(int(a) - int(b)) for a, b in zip(str_n1, str_n2)))\n    return distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str1, str2 = (str(n1), str(n2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    distance_sum = sum((abs(int(a) - int(b)) for a, b in zip(str1, str2)))\n    return distance_sum", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1 = str(n1)\n    str_n2 = str(n2)\n    len_n1 = len(str_n1)\n    len_n2 = len(str_n2)\n    max_len = max(len_n1, len_n2)\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    distance = 0\n    for digit1, digit2 in zip(str_n1, str_n2):\n        distance += abs(int(digit1) - int(digit2))\n    return distance", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str1, str2 = (str(n1), str(n2))\n    max_len = max(len(str1), len(str2))\n    str1 = str1.zfill(max_len)\n    str2 = str2.zfill(max_len)\n    return sum((abs(int(a) - int(b)) for a, b in zip(str1, str2)))", "def digit_distance_nums(n1: int, n2: int) -> int:\n    str_n1, str_n2 = (str(n1), str(n2))\n    max_len = max(len(str_n1), len(str_n2))\n    str_n1 = str_n1.zfill(max_len)\n    str_n2 = str_n2.zfill(max_len)\n    return sum((abs(int(d1) - int(d2)) for d1, d2 in zip(str_n1, str_n2)))"], "outputs": "[[3], [3], [9], [27], [1], [0], [28], [0], [3], [20]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[123, 234], [230, 200], [456, 123], [999, 0], [1, 2], [0, 0], [1000, 999], [789, 789], [321, 432], [98765, 54321]]", "input_output_examples": "[[[1, 2]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.5205479452054795, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/559", "original_requirement": "from typing import List\n\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \n    Requirements:\n    1. The input list `a` must be non-empty, and the parameter `size` must match the length of the list (`len(a)`).\n       - If `size` does not match `len(a)`, or if the list is empty, the function will raise an `IndexError`.\n    2. The function assumes valid input and does not handle edge cases such as empty lists or mismatched `size` values.\n    3. The function calculates the sum of the largest contiguous sublist using the given list and size, following the reference implementation.\n    \n    Example:\n    assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n\"\"\"\nWrite a function to find the sum of the largest contiguous sublist in the given list.\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n\"\"\"", "entry_point": "max_sub_array_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far"], "outputs": "[[7], [15], [-1], [0], [5], [23], [-inf], [1], [8], [1], [-1], [900]]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    current_max = a[0]\n    for i in range(1, size):\n        current_max = max(a[i], current_max + a[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    current_max = a[0]\n    for i in range(1, size):\n        current_max = max(a[i], current_max + a[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    current_max = a[0]\n    for i in range(1, size):\n        current_max = max(a[i], current_max + a[i])\n        max_so_far = max(max_so_far, current_max)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    max_ending_here = max_so_far = a[0]\n    for x in a[1:]:\n        max_ending_here = max(x, max_ending_here + x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far"], "outputs": "[[7], [15], [-1], [0], [5], [23], ['IndexError'], [1], [8], [1], [-1], [900]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8812908992306927, "llm_generated_inputs": "[[[-2, -3, 4, -1, -2, 1, 5, -3], 8], [[1, 2, 3, 4, 5], 5], [[-1, -2, -3, -4, -5], 5], [[0, 0, 0, 0], 4], [[5], 1], [[5, -1, 6, 7, -2, 8], 6], [[], 0], [[1, -1, 1, -1], 4], [[-1, 2, 3, -2, 5, -8, 6], 7], [[1], 1], [[-2, -1, -3], 3], [[100, 200, -300, 400, 500], 5]]", "input_output_examples": "[[[[-2, -3, 4, -1, -2, 1, 5, -3], 8]], [[7]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    \"\"\"\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    \n    Requirements:\n    1. The input list `a` must be non-empty, and the parameter `size` must match the length of the list (`len(a)`).\n       - If `size` does not match `len(a)`, or if the list is empty, the function will raise an `IndexError`.\n    2. The function assumes valid input and does not handle edge cases such as empty lists or mismatched `size` values.\n    3. The function calculates the sum of the largest contiguous sublist using the given list and size, following the reference implementation.\n    \n    Example:\n    assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\n    \"\"\"", "entry_point": "max_sub_array_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or size == 0:\n        raise IndexError('Input list size mismatch or list is empty.')\n    max_current = max_global = a[0]\n    for i in range(1, size):\n        max_current = max(a[i], max_current + a[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or size == 0:\n        raise IndexError('Size does not match the length of the list or the list is empty.')\n    max_current = max_global = a[0]\n    for i in range(1, size):\n        max_current = max(a[i], max_current + a[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or size == 0:\n        raise IndexError('List size does not match the provided size or list is empty.')\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if not a or size != len(a):\n        raise IndexError('Size must match the length of the list and the list must not be empty.')\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if not a or size != len(a):\n        raise IndexError('Input list is empty or size does not match the length of the list.')\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) == 0 or size != len(a):\n        raise IndexError('List is empty or size does not match')\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) == 0 or len(a) != size:\n        raise IndexError('Input list is empty or size does not match the length of the list')\n    max_sum = current_sum = a[0]\n    for i in range(1, len(a)):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if size != len(a) or not a:\n        raise IndexError('List size mismatch or list is empty')\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or size == 0:\n        raise IndexError('Input list size mismatch or list is empty.')\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or size == 0:\n        raise IndexError('Invalid input: the list must be non-empty and the size must match the length of the list.')\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, len(a)):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if not a or size != len(a):\n        raise IndexError('Invalid input: List is empty or size mismatched.')\n    max_sum = a[0]\n    current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or not a:\n        raise IndexError('Size mismatch or empty list')\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or size == 0:\n        raise IndexError('Size does not match the length of the list or list is empty.')\n    max_current = max_global = a[0]\n    for i in range(1, size):\n        max_current = max(a[i], max_current + a[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or size == 0:\n        raise IndexError('Input list size does not match the provided size.')\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or size == 0:\n        raise IndexError('Size mismatch or empty list')\n    max_ending_here = max_so_far = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if not a or size != len(a):\n        raise IndexError('Input list is empty or size does not match the list length.')\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or size == 0:\n        raise IndexError('Invalid input: size does not match list length or list is empty')\n    max_so_far = float('-inf')\n    max_ending_here = 0\n    for num in a:\n        max_ending_here += num\n        if max_ending_here > max_so_far:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if not a or size != len(a):\n        raise IndexError('Invalid input: size must match the length of the list and the list must be non-empty.')\n    max_sum = current_sum = a[0]\n    for i in range(1, size):\n        current_sum = max(a[i], current_sum + a[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or not a:\n        raise IndexError('The size parameter does not match the length of the list or the list is empty.')\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "from typing import List\n\ndef max_sub_array_sum(a: List[int], size: int) -> int:\n    if len(a) != size or size == 0:\n        raise IndexError('Invalid input: size must match the length of the list and the list must be non-empty.')\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in a:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum"], "outputs": "[[7], [15], [-1], [0], [5], [23], ['IndexError'], [1], [8], [1], [-1], [900]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[-2, -3, 4, -1, -2, 1, 5, -3], 8], [[1, 2, 3, 4, 5], 5], [[-1, -2, -3, -4, -5], 5], [[0, 0, 0, 0], 4], [[5], 1], [[5, -1, 6, 7, -2, 8], 6], [[], 0], [[1, -1, 1, -1], 4], [[-1, 2, 3, -2, 5, -8, 6], 7], [[1], 1], [[-2, -1, -3], 3], [[100, 200, -300, 400, 500], 5]]", "input_output_examples": "[[[[-2, -3, 4, -1, -2, 1, 5, -3], 8]], [[7]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.34732142857142856, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.1428571428571429, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/560", "original_requirement": "from typing import Tuple\n\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function to find the union of the elements of two given tuples and output them in sorted order.\nassert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\n\"\"\"", "entry_point": "union_elements", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(set(test_tup2))))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))", "from typing import Tuple\n\ndef union_elements(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple(sorted(set(test_tup1).union(test_tup2)))"], "outputs": "[[(3, 4, 5, 6, 7, 10)], [(1, 2, 3, 4, 5, 6)], [(3,)], [(1, 2, 3)], [(1, 2, 3)], [(-3, -2, -1)], [(7, 8, 9, 10, 11)], [(0, 1, 2)], [(50, 75, 100, 125, 150)], [()]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(3, 4, 5, 6), (5, 7, 4, 10)], [(1, 2, 3), (4, 5, 6)], [(3, 3, 3), (3, 3, 3)], [(1, 2, 3), (1, 2, 3)], [(1, 2, 3), ()], [(-1, -2, -3), (-3, -2, -1)], [(7, 8, 9), (9, 10, 11)], [(0,), (0, 1, 2)], [(100,), (50, 75, 100, 125, 150)], [(), ()]]", "input_output_examples": "[[[(3, 4, 5, 6), (5, 7, 4, 10)]], [[(3, 4, 5, 6, 7, 10)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/562", "original_requirement": "from typing import List\n\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n\"\"\"\nWrite a python function to find the length of the longest sublists.\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\n\"\"\"", "entry_point": "Find_Max_Length", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst))", "from typing import List, Any\n\ndef Find_Max_Length(lst: List[List[Any]]) -> int:\n    return max((len(sublist) for sublist in lst)) if lst else 0"], "outputs": "[[4], [3], [1], [4], [0], [4], [3], [3], [4], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1], [1, 4], [5, 6, 7, 8]]], [[[1, 2, 3], [4, 5], [6]]], [[[1], [2], [3]]], [[[1, 2, 3, 4], []]], [[[], []]], [[[1, 2, 3], [4, 5], [6, 7, 8, 9]]], [[[1, 2], [3], [4, 5, 6]]], [[[], [1, 2, 3], []]], [[[1, 2, 3, 4]]], [[[]]]]", "input_output_examples": "[[[[[1], [1, 4], [5, 6, 7, 8]]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/563", "original_requirement": "from typing import List\n\n\ndef extract_values(text: str) -> List[str]:\n\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef extract_values(text: str) -> List[str]:\n\"\"\"\nWrite a function to extract values between quotation marks from a string.\nassert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\n\"\"\"", "entry_point": "extract_values", "cluster_list": [{"programs_str": ["import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"([^\"]*)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"([^\"]*)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"([^\"]*)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "from typing import List\nimport re\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\\\\\"(.*?)\\\\\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)", "import re\nfrom typing import List\n\ndef extract_values(text: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text)"], "outputs": "[[['Python', 'PHP', 'Java']], [['Single']], [[]], [['Mixed', 'values']], [['Intentional mismatch, ']], [['']], [['Escaped \\\\', ' in string']], [['Empty with spaces ']], [[]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1.0, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['\"Python\", \"PHP\", \"Java\"'], ['\"Single\"'], ['No quotes here'], ['\"Mixed\" quotes with \"values\"'], ['\"Intentional mismatch, \"Java'], ['\"\"'], ['\"Escaped \\\\\"quotes\\\\\" in string\"'], ['\"Empty with spaces \" \"'], ['Random text without quotation marks'], ['']]", "input_output_examples": "[[['\"Python\", \"PHP\", \"Java\"']], [[['Python', 'PHP', 'Java']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/564", "original_requirement": "from typing import List\n\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a Python function that takes a list of integers `arr` and an integer `n` (the length of the list) and returns the count of all possible unordered pairs of elements where both elements are unequal. \n\n    The function should:\n    - Consider \"unordered pairs\" as pairs `(a, b)` where the order does not matter (i.e., `(a, b)` is the same as `(b, a)`).\n    - Account for the frequency of individual numbers in the list when calculating the count of pairs.\n    - Exclude pairs where both elements are equal (e.g., `(1, 1)`).\n    - Handle lists with duplicate elements correctly by subtracting pairs formed by equal elements from the total possible pairs.\n    - Return `0` if the list has fewer than two elements, as no pairs can be formed.\n\n    Input assumptions:\n    - `arr` is a valid list of integers.\n    - `n` is the length of the list `arr` and is always non-negative.\n    - The list `arr` may contain duplicates.\n\n    Example:\n    assert count_Pairs([1, 2, 1], 3) == 2\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\nassert count_Pairs([1,2,1],3) == 2\n\"\"\"", "entry_point": "count_Pairs", "cluster_list": [{"programs_str": ["from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = len(set(arr))\n    total_possible_pairs = n * (n - 1) // 2\n    pairs_with_equal_elements = sum((arr.count(i) * (arr.count(i) - 1) // 2 for i in set(arr)))\n    return total_possible_pairs - pairs_with_equal_elements", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    same_element_pairs = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    return total_pairs - same_element_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    identical_pairs = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    return total_pairs - identical_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    same_pairs = sum((arr.count(elem) * (arr.count(elem) - 1) // 2 for elem in unique_elements))\n    return total_pairs - same_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    count = 0\n    for x in unique_elements:\n        count += arr.count(x) * (n - arr.count(x))\n    return count // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    duplicate_pairs = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    return total_pairs - duplicate_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    if len(unique_elements) == 1:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    same_element_pairs = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    return total_pairs - same_element_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    duplicate_pairs = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    return total_pairs - duplicate_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    same_element_pairs = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    return total_pairs - same_element_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    same_element_pairs = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    return total_pairs - same_element_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    for element in unique_elements:\n        count = arr.count(element)\n        if count > 1:\n            total_pairs -= count * (count - 1) // 2\n    return total_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_elements = len(arr)\n    total_unique_pairs = 0\n    for element in unique_elements:\n        count_of_element = arr.count(element)\n        total_unique_pairs += count_of_element * (total_elements - count_of_element)\n    return total_unique_pairs // 2", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    duplicate_count = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    return total_pairs - duplicate_count", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    count = Counter(arr)\n    total_pairs = n * (n - 1) // 2\n    same_pairs = sum((c * (c - 1) // 2 for c in count.values()))\n    return total_pairs - same_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_pairs = n * (n - 1) // 2\n    same_pairs = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    return total_pairs - same_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique = set(arr)\n    total_pairs = n * (n - 1) // 2\n    for value in unique:\n        count = arr.count(value)\n        if count > 1:\n            total_pairs -= count * (count - 1) // 2\n    return total_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    total_pairs = n * (n - 1) // 2\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - equal_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] != arr[j]:\n                count += 1\n    return count", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_elements = set(arr)\n    total_combinations = n * (n - 1) // 2\n    same_combinations = sum((arr.count(x) * (arr.count(x) - 1) // 2 for x in unique_elements))\n    return total_combinations - same_combinations"], "outputs": "[[2], [3], [0], [0], [0], [4], [10], [3], [6], [6]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom itertools import combinations\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    unique_pairs = set(combinations(arr, 2))\n    count = sum((1 for pair in unique_pairs if pair[0] != pair[1]))\n    return count"], "outputs": "[[2], [3], [0], [0], [0], [1], [10], [3], [6], [6]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[1, 2, 1], 3], [[1, 2, 3], 3], [[1, 1, 1], 3], [[1], 1], [[], 0], [[1, 1, 2, 2], 4], [[1, 2, 3, 4, 5], 5], [[1, -1, 0], 3], [[-1, -2, -3, -4], 4], [[100000, 200000, 300000, 400000], 4]]", "input_output_examples": "[[[[1, 2, 1], 3]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    \"\"\"\n    Write a Python function that takes a list of integers `arr` and an integer `n` (the length of the list) and returns the count of all possible unordered pairs of elements where both elements are unequal. \n\n    The function should:\n    - Consider \"unordered pairs\" as pairs `(a, b)` where the order does not matter (i.e., `(a, b)` is the same as `(b, a)`).\n    - Account for the frequency of individual numbers in the list when calculating the count of pairs.\n    - Exclude pairs where both elements are equal (e.g., `(1, 1)`).\n    - Handle lists with duplicate elements correctly by subtracting pairs formed by equal elements from the total possible pairs.\n    - Return `0` if the list has fewer than two elements, as no pairs can be formed.\n\n    Input assumptions:\n    - `arr` is a valid list of integers.\n    - `n` is the length of the list `arr` and is always non-negative.\n    - The list `arr` may contain duplicates.\n\n    Example:\n    assert count_Pairs([1, 2, 1], 3) == 2\n    \"\"\"", "entry_point": "count_Pairs", "cluster_list": [{"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    freq = Counter(arr)\n    same_element_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - same_element_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    freq = Counter(arr)\n    total_pairs = n * (n - 1) // 2\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - equal_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    frequency = Counter(arr)\n    duplicate_pairs = sum((count * (count - 1) // 2 for count in frequency.values()))\n    return total_pairs - duplicate_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    freq = Counter(arr)\n    total_pairs = n * (n - 1) // 2\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - equal_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    freq_counter = Counter(arr)\n    equal_pairs = sum((f * (f - 1) // 2 for f in freq_counter.values()))\n    return total_pairs - equal_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    freq = Counter(arr)\n    total_pairs = n * (n - 1) // 2\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - equal_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    freq_counter = Counter(arr)\n    same_element_pairs = sum((freq * (freq - 1) // 2 for freq in freq_counter.values()))\n    return total_pairs - same_element_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    freq = Counter(arr)\n    total_pairs = n * (n - 1) // 2\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - equal_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    freq = Counter(arr)\n    total_pairs = n * (n - 1) // 2\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - equal_pairs", "from typing import List\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    from collections import Counter\n    freq = Counter(arr)\n    total_pairs = n * (n - 1) // 2\n    same_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - same_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    freq = Counter(arr)\n    duplicate_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - duplicate_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    freq = Counter(arr)\n    repeat_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - repeat_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    element_counts = Counter(arr)\n    duplicate_pairs = sum((count * (count - 1) // 2 for count in element_counts.values()))\n    return total_pairs - duplicate_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    freq_counter = Counter(arr)\n    same_element_pairs = sum((freq * (freq - 1) // 2 for freq in freq_counter.values()))\n    return total_pairs - same_element_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    freq = Counter(arr)\n    repeated_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - repeated_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    freq = Counter(arr)\n    total_pairs = n * (n - 1) // 2\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - equal_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    freq_counter = Counter(arr)\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq_counter.values()))\n    return total_pairs - equal_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    freq = Counter(arr)\n    total_pairs = n * (n - 1) // 2\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - equal_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    freq = Counter(arr)\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - equal_pairs", "from typing import List\nfrom collections import Counter\n\ndef count_Pairs(arr: List[int], n: int) -> int:\n    if n < 2:\n        return 0\n    total_pairs = n * (n - 1) // 2\n    freq = Counter(arr)\n    equal_pairs = sum((count * (count - 1) // 2 for count in freq.values()))\n    return total_pairs - equal_pairs"], "outputs": "[[2], [3], [0], [0], [0], [4], [10], [3], [6], [6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 1], 3], [[1, 2, 3], 3], [[1, 1, 1], 3], [[1], 1], [[], 0], [[1, 1, 2, 2], 4], [[1, 2, 3, 4, 5], 5], [[1, -1, 0], 3], [[-1, -2, -3, -4], 4], [[100000, 200000, 300000, 400000], 4]]", "input_output_examples": "[[[[1, 2, 1], 3]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.2883928571428571, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.4017857142857143, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/565", "original_requirement": "from typing import List\n\n\ndef split(word: str) -> List[str]:\n\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef split(word: str) -> List[str]:\n\"\"\"\nWrite a python function to split a string into characters.\nassert split('python') == ['p','y','t','h','o','n']\n\"\"\"", "entry_point": "split", "cluster_list": [{"programs_str": ["from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)", "from typing import List\n\ndef split(word: str) -> List[str]:\n    return list(word)"], "outputs": "[[['p', 'y', 't', 'h', 'o', 'n']], [['h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd']], [['1', '2', '3', '4', '5']], [['!', '@', '#', '$', '%']], [['a']], [[' ']], [[]], [['l', 'o', 'n', 'g', 's', 't', 'r', 'i', 'n', 'g', 'w', 'i', 't', 'h', 'm', 'u', 'l', 't', 'i', 'p', 'l', 'e', 'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['python'], ['hello world'], ['12345'], ['!@#$%'], ['a'], [' '], [''], ['longstringwithmultiplecharacters']]", "input_output_examples": "[[['python']], [[['p', 'y', 't', 'h', 'o', 'n']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/566", "original_requirement": "def sum_digits(n: int) -> int:\n\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def sum_digits(n: int) -> int:\n\"\"\"\nWrite a function to get the sum of the digits of a non-negative integer.\nassert sum_digits(345)==12\n\"\"\"", "entry_point": "sum_digits", "cluster_list": [{"programs_str": ["def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))", "def sum_digits(n: int) -> int:\n    return sum((int(digit) for digit in str(n)))"], "outputs": "[[12], [0], [45], [2], [45], [1], [7], [9], [8], [8]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[345], [0], [123456789], [1001], [99999], [10], [7], [111111111], [800], [202202]]", "input_output_examples": "[[[345]], [[12]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/567", "original_requirement": "from typing import List\n\n\ndef issort_list(lst: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef issort_list(lst: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether a specified list is sorted or not.\nassert issort_list([1,2,4,6,8,10,12,14,16,17])==True\n\"\"\"", "entry_point": "issort_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return lst == sorted(lst)", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))", "from typing import List\n\ndef issort_list(lst: List[int]) -> bool:\n    return all((lst[i] <= lst[i + 1] for i in range(len(lst) - 1)))"], "outputs": "[[True], [False], [True], [True], [False], [True], [True], [True], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1]], [[1, 2, 2, 3, 5]], [[10, 20, 30, 40]], [[100, 50, 20, 10]], [[1]], [[]], [[5, 5, 5, 5]], [[3, 1, 2, 4]], [[1, 5, 3, 7, 9]], [[8, 8, 8, 7]], [[1, 2, -3, 4]]]", "input_output_examples": "[[[[1, 2, 4, 6, 8, 10, 12, 14, 16, 17]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/568", "original_requirement": "from typing import List\n\n\ndef empty_list(length: int) -> List[dict]:\n\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef empty_list(length: int) -> List[dict]:\n\"\"\"\nWrite a function to create a list of N empty dictionaries.\nassert empty_list(5)==[{},{},{},{},{}]\n\"\"\"", "entry_point": "empty_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]", "from typing import List\n\ndef empty_list(length: int) -> List[dict]:\n    return [{} for _ in range(length)]"], "outputs": "[[[]], [[{}]], [[{}, {}, {}, {}, {}]], [[{}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [5], [100], [-1]]", "input_output_examples": "[[[5]], [[[{}, {}, {}, {}, {}]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/569", "original_requirement": "from typing import List\n\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n\"\"\"\nWrite a function to sort each sublist of strings in a given list of lists.\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\"\"\"", "entry_point": "sort_sublists", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]", "from typing import List\n\ndef sort_sublists(list_of_lists: List[List[str]]) -> List[List[str]]:\n    return [sorted(sublist) for sublist in list_of_lists]"], "outputs": "[[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]], [[['apple', 'banana'], ['cat', 'dog', 'elephant'], ['lion', 'tiger', 'zebra']]], [[[]]], [[[], []]], [[['single']]], [[['a', 'b', 'c'], ['x', 'y', 'z'], ['m', 'n', 'o']]], [[['a', 'ab', 'abc']]], [[['1', '12', '123']]], [[['APPLE', 'aPPLe', 'apple']]], [[['hello', 'world'], ['HELLO', 'WORLD'], ['WORLD', 'hELLo']]], [[['']]], [[['A', 'B', 'a', 'b']]], [[[['cannot', 'be', 'sorted'], ['nested', 'list']]]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]], [[['apple', 'banana'], ['cat', 'dog', 'elephant'], ['zebra', 'lion', 'tiger']]], [[[]]], [[[], []]], [[['single']]], [[['a', 'b', 'c'], ['z', 'x', 'y'], ['m', 'n', 'o']]], [[['abc', 'ab', 'a']]], [[['123', '1', '12']]], [[['apple', 'APPLE', 'aPPLe']]], [[['hello', 'world'], ['HELLO', 'WORLD'], ['hELLo', 'WORLD']]], [[['']]], [[['a', 'A', 'b', 'B']]], [[[['nested', 'list'], ['cannot', 'be', 'sorted']]]]]", "input_output_examples": "[[[[['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]]], [[[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/572", "original_requirement": "from typing import List\n\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to remove duplicate numbers from a given number of lists.\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\n\"\"\"", "entry_point": "two_unique_nums", "cluster_list": [{"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    return [num for num in nums if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    counts = Counter(nums)\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    counter = Counter(nums)\n    return [num for num, count in counter.items() if count == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    return [num for num in nums if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    frequency = Counter(nums)\n    return [num for num in nums if frequency[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    return [num for num in nums if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    return [num for num, freq in count.items() if freq == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    frequency = Counter(nums)\n    return [num for num in nums if frequency[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    counts = Counter(nums)\n    return [num for num in nums if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    return [num for num in nums if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    return [num for num in nums if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    return [num for num in nums if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    return [num for num in nums if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    num_counter = Counter(nums)\n    return [num for num in nums if num_counter[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    counts = Counter(nums)\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    count = Counter(nums)\n    return [num for num in nums if count[num] == 1]", "from typing import List\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    unique_counts = {}\n    for num in nums:\n        unique_counts[num] = unique_counts.get(num, 0) + 1\n    return [num for num in nums if unique_counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    counts = Counter(nums)\n    return [num for num, count in counts.items() if count == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    freq = Counter(nums)\n    return [num for num in nums if freq[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef two_unique_nums(nums: List[int]) -> List[int]:\n    counts = Counter(nums)\n    return [num for num, count in counts.items() if count == 1]"], "outputs": "[[[1, 4, 5]], [[10, 20, 30, 40]], [[]], [[42]], [[]], [[-3, 4]], [[]], [[200]], [[1000]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 2, 3, 4, 5]], [[10, 20, 30, 40]], [[7, 7, 7, 7]], [[42]], [[]], [[-1, -2, -3, -1, -2, 4]], [[0, 0, 0, 0]], [[100, 200, 300, 100, 300]], [[-1000, 0, 1000, -1000, 0]], [[1, -1, 0, 1, -1, 0]]]", "input_output_examples": "[[[[1, 2, 3, 2, 3, 4, 5]]], [[[1, 4, 5]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/573", "original_requirement": "from typing import List\n\n\ndef unique_product(list_data: List[int]) -> int:\n\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef unique_product(list_data: List[int]) -> int:\n\"\"\"\nWrite a python function to calculate the product of the unique numbers in a given list.\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\n\"\"\"", "entry_point": "unique_product", "cluster_list": [{"programs_str": ["from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\nfrom functools import reduce\nfrom operator import mul\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    return reduce(mul, unique_numbers, 1)", "from typing import List\nfrom functools import reduce\nimport operator\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    return reduce(operator.mul, unique_numbers, 1)", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\nfrom functools import reduce\nimport operator\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    return reduce(operator.mul, unique_numbers, 1)", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\nfrom functools import reduce\nimport operator\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    return reduce(operator.mul, unique_numbers, 1)", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "from typing import List\nfrom functools import reduce\nimport operator\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    return reduce(operator.mul, unique_numbers, 1)", "from typing import List\n\ndef unique_product(list_data: List[int]) -> int:\n    unique_numbers = set(list_data)\n    product = 1\n    for number in unique_numbers:\n        product *= number\n    return product"], "outputs": "[[720000000], [120], [1], [0], [2], [24], [40000], [100], [7], [162], [210]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[10, 20, 30, 40, 20, 50, 60, 40]], [[1, 2, 3, 4, 5]], [[]], [[0, 1, 0]], [[2, 2, 2, 2]], [[-1, -2, -3, -4]], [[10, -10, 20, -20]], [[100, 100, 100]], [[7]], [[3, 6, 9, 3]], [[2, 3, 5, 7, 3, 5]]]", "input_output_examples": "[[[[10, 20, 30, 40, 20, 50, 60, 40]]], [[720000000]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/576", "original_requirement": "from typing import List\n\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list is sublist of another or not.\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\n\"\"\"", "entry_point": "is_Sub_Array", "cluster_list": [{"programs_str": ["from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    len_A = len(A)\n    len_B = len(B)\n    for i in range(len_A - len_B + 1):\n        if A[i:i + len_B] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    len_A = len(A)\n    len_B = len(B)\n    if len_B > len_A:\n        return False\n    for i in range(len_A - len_B + 1):\n        if A[i:i + len_B] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    sub_len = len(B)\n    for i in range(len(A) - sub_len + 1):\n        if A[i:i + sub_len] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if not A:\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if not A:\n        return False\n    n, m = (len(A), len(B))\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if not A or len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if not A:\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if not A:\n        return False\n    len_A, len_B = (len(A), len(B))\n    for i in range(len_A - len_B + 1):\n        if A[i:i + len_B] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if not A:\n        return False\n    len_A, len_B = (len(A), len(B))\n    for i in range(len_A - len_B + 1):\n        if A[i:i + len_B] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    n, m = (len(A), len(B))\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if len(B) == 0:\n        return True\n    if len(A) == 0 or len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    n, m = (len(A), len(B))\n    for i in range(n - m + 1):\n        if A[i:i + m] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    len_A = len(A)\n    len_B = len(B)\n    for i in range(len_A - len_B + 1):\n        if A[i:i + len_B] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    if not A or len(B) > len(A):\n        return False\n    for i in range(len(A) - len(B) + 1):\n        if A[i:i + len(B)] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    lenA, lenB = (len(A), len(B))\n    if lenB == 0:\n        return True\n    if lenA < lenB:\n        return False\n    for i in range(lenA - lenB + 1):\n        if A[i:i + lenB] == B:\n            return True\n    return False", "from typing import List\n\ndef is_Sub_Array(A: List[int], B: List[int]) -> bool:\n    if not B:\n        return True\n    len_a = len(A)\n    len_b = len(B)\n    for i in range(len_a - len_b + 1):\n        if A[i:i + len_b] == B:\n            return True\n    return False"], "outputs": "[[False], [True], [True], [False], [True], [True], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 4, 3, 5], [1, 2]], [[1, 4, 3, 5], [4, 3]], [[1, 4, 3, 5], []], [[], [1, 4]], [[], []], [[1, 4, 3, 5], [3]], [[1, 4, 3, 5], [6]], [[1, 4, 3, 5], [4, 3, 5]], [[1, 1, 1, 1], [1, 1]], [[1, 4, 3, 5, 6, 7], [5, 6, 7]]]", "input_output_examples": "[[[[1, 4, 3, 5], [1, 2]]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9486725663716815, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/577", "original_requirement": "def last_Digit_Factorial(n: int) -> int:\n\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def last_Digit_Factorial(n: int) -> int:\n\"\"\"\nWrite a python function to find the last digit in factorial of a given number.\nassert last_Digit_Factorial(4) == 4\n\"\"\"", "entry_point": "last_Digit_Factorial", "cluster_list": [{"programs_str": ["from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "import math\n\ndef last_Digit_Factorial(n: int) -> int:\n    factorial = math.factorial(n)\n    return factorial % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "def last_Digit_Factorial(n: int) -> int:\n    factorial_last_digit = 1\n    for i in range(2, n + 1):\n        factorial_last_digit = factorial_last_digit * i % 10\n    return factorial_last_digit", "import math\n\ndef last_Digit_Factorial(n: int) -> int:\n    factorial_result = math.factorial(n)\n    return factorial_result % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n >= 5:\n        return 0\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "def last_Digit_Factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = last_digit * i % 10\n    return last_digit", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "def last_Digit_Factorial(n: int) -> int:\n    factorial = 1\n    for i in range(2, n + 1):\n        factorial *= i\n    return factorial % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10", "from math import factorial\n\ndef last_Digit_Factorial(n: int) -> int:\n    return factorial(n) % 10"], "outputs": "[[1], [1], [2], [4], [0], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [4], [5], [10], [20]]", "input_output_examples": "[[[4]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.18518518518518523, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/578", "original_requirement": "from typing import List\n\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n\"\"\"\nWrite a function to interleave 3 lists of the same length into a single flat list.\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n\"\"\"", "entry_point": "interleave_lists", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [element for triplet in zip(list1, list2, list3) for element in triplet]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for triple in zip(list1, list2, list3) for item in triple]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [element for trio in zip(list1, list2, list3) for element in trio]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for trio in zip(list1, list2, list3) for item in trio]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for trio in zip(list1, list2, list3) for item in trio]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [elem for triplet in zip(list1, list2, list3) for elem in triplet]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [element for triplet in zip(list1, list2, list3) for element in triplet]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [elem for triplet in zip(list1, list2, list3) for elem in triplet]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    interleaved = []\n    for i in range(len(list1)):\n        interleaved.append(list1[i])\n        interleaved.append(list2[i])\n        interleaved.append(list3[i])\n    return interleaved", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for group in zip(list1, list2, list3) for item in group]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for pair in zip(list1, list2, list3) for item in pair]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    result = []\n    for i in range(len(list1)):\n        result.extend([list1[i], list2[i], list3[i]])\n    return result", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for trio in zip(list1, list2, list3) for item in trio]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for triple in zip(list1, list2, list3) for item in triple]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for pair in zip(list1, list2, list3) for item in pair]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for sublist in zip(list1, list2, list3) for item in sublist]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for trio in zip(list1, list2, list3) for item in trio]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for pair in zip(list1, list2, list3) for item in pair]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [item for triplet in zip(list1, list2, list3) for item in triplet]", "from typing import List, Any\n\ndef interleave_lists(list1: List[Any], list2: List[Any], list3: List[Any]) -> List[Any]:\n    return [val for trio in zip(list1, list2, list3) for val in trio]"], "outputs": "[[[1, 10, 100, 2, 20, 200, 3, 30, 300]], [[]], [[1, 10, 100]], [[1, 10, 100, 2, 20, 200]], [[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400]], [['a', 'x', '@', 'b', 'y', '#', 'c', 'z', '$']], [[True, False, 1, False, True, 0]], [[None, None, None, None, None, None]], [[1, 4, 7, 2, 5, 8, 3, 6, 9]], [[1.1, 4.4, 7.7, 2.2, 5.5, 8.8, 3.3, 6.6, 9.9]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3], [10, 20, 30], [100, 200, 300]], [[], [], []], [[1], [10], [100]], [[1, 2], [10, 20], [100, 200]], [[1, 2, 3, 4], [10, 20, 30, 40], [100, 200, 300, 400]], [['a', 'b', 'c'], ['x', 'y', 'z'], ['@', '#', '$']], [[True, False], [False, True], [1, 0]], [[None, None], [None, None], [None, None]], [[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1.1, 2.2, 3.3], [4.4, 5.5, 6.6], [7.7, 8.8, 9.9]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700]]], [[[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/579", "original_requirement": "from typing import Tuple\n\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to find the dissimilar elements in the given two tuples.\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\n\"\"\"", "entry_point": "find_dissimilar", "cluster_list": [{"programs_str": ["from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(test_tup2))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(test_tup2))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(test_tup2))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(test_tup2))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(test_tup2))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1).symmetric_difference(set(test_tup2)))", "from typing import Tuple, Any\n\ndef find_dissimilar(test_tup1: Tuple[Any, ...], test_tup2: Tuple[Any, ...]) -> Tuple[Any, ...]:\n    return tuple(set(test_tup1) ^ set(test_tup2))"], "outputs": "[[(3, 6, 7, 10)], [(1, 2, 3, 4, 5, 6)], [()], [(1,)], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)], [(1, 2, 5, 6)], [(1.1, 4.4)], [()], [()], [('', 'a', 'd', 'c')], [(1, 2)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(3, 4, 5, 6), (5, 7, 4, 10)], [(1, 2, 3), (4, 5, 6)], [(1, 2, 3), (1, 2, 3)], [(1,), ()], [(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)], [(1, 2, 3, 4), (3, 4, 5, 6)], [(1.1, 2.2, 3.3), (3.3, 2.2, 4.4)], [(True, False), (False, True)], [(None,), (None,)], [('', 'a', 'b'), ('b', 'c', 'd')], [(1, 'a', None), ('a', 2, None)]]", "input_output_examples": "[[[(3, 4, 5, 6), (5, 7, 4, 10)]], [[(3, 6, 7, 10)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.990909090909091, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/580", "original_requirement": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"", "repaired_requirement": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"", "original_clusters": {"requirement": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"", "entry_point": "extract_even", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(i) for i in item if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple)))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n    return tuple((filter_even(element) for element in test_tuple if isinstance(element, int) and element % 2 == 0 or isinstance(element, tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(x) for x in item if isinstance(x, (int, tuple)) and (not isinstance(x, int) or x % 2 == 0)))\n        return item\n    return filter_even(test_tuple)", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(subitem) for subitem in item if isinstance(subitem, int) and subitem % 2 == 0 or isinstance(subitem, tuple)))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n        return None\n    return tuple((filter_even(element) for element in test_tuple if isinstance(element, int) and element % 2 == 0 or isinstance(element, tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (not isinstance(sub_item, int) or sub_item % 2 == 0)))\n        return item\n    return tuple((filter_even(element) for element in test_tuple if isinstance(element, (int, tuple)) and (not isinstance(element, int) or element % 2 == 0)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple))))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n    return tuple((filter_even(item) for item in test_tuple if isinstance(item, (int, tuple)) and (isinstance(item, int) and item % 2 == 0 or isinstance(item, tuple))))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (not isinstance(sub_item, int) or sub_item % 2 == 0)))\n        if isinstance(item, int) and item % 2 == 0:\n            return item\n    return tuple((filter_even(element) for element in test_tuple if isinstance(element, (int, tuple)) and (not isinstance(element, int) or element % 2 == 0)))", "from typing import Tuple\n\ndef extract_even(test_tuple: tuple) -> tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (not isinstance(sub_item, int) or sub_item % 2 == 0)))\n        return item if item % 2 == 0 else None\n    return tuple((filter_even(item) for item in test_tuple if isinstance(item, (int, tuple)) and (not isinstance(item, int) or item % 2 == 0)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple)))\n        return item if isinstance(item, int) and item % 2 == 0 else None\n    return tuple((filter_even(sub_item) for sub_item in test_tuple if isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple)))\n        return item\n    return tuple((filter_even(sub_item) for sub_item in test_tuple if isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(elem) for elem in item if isinstance(elem, int) and elem % 2 == 0 or isinstance(elem, tuple)))\n        return item\n    return tuple((filter_even(i) for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (not isinstance(sub_item, int) or sub_item % 2 == 0)))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n    return tuple((filter_even(item) for item in test_tuple if isinstance(item, (int, tuple)) and (not isinstance(item, int) or item % 2 == 0)))", "from typing import Tuple\n\ndef extract_even(test_tuple: tuple) -> tuple:\n\n    def filter_even(obj):\n        if isinstance(obj, tuple):\n            return tuple((filter_even(x) for x in obj if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple)))\n        elif isinstance(obj, int) and obj % 2 == 0:\n            return obj\n        return None\n    return tuple(filter(lambda x: x is not None, filter_even(test_tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple)))\n        return item if isinstance(item, int) and item % 2 == 0 else None\n    return tuple((filter_even(sub_item) for sub_item in test_tuple if filter_even(sub_item) is not None))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(data):\n        if isinstance(data, tuple):\n            return tuple((filter_even(item) for item in data if isinstance(item, int) and item % 2 == 0 or isinstance(item, tuple)))\n        return data\n    return filter_even(test_tuple)"], "outputs": "[[(4, (6, (2, 4)), 6, 8)], [(((),),)], [(2, 4, (6, 8, (10, 12)), 14, 16)], [(((),),)], [()], [(0, (0, 0))], [((),)], [(2, (4, (6, 8, 10)), 12)], [(42,)], [((100,),)]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef extract_even(test_tuple: tuple) -> tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple(filter(None, (filter_even(sub_item) for sub_item in item)))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n        else:\n            return None\n    return filter_even(test_tuple)", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, int):\n            return item if item % 2 == 0 else None\n        elif isinstance(item, tuple):\n            return tuple(filter(None, map(filter_even, item)))\n        return None\n    return tuple(filter(None, map(filter_even, test_tuple)))"], "outputs": "[[(4, (6, (2, 4)), 6, 8)], [()], [(2, 4, (6, 8, (10, 12)), 14, 16)], [()], [()], [()], [()], [(2, (4, (6, 8, 10)), 12)], [(42,)], [((100,),)]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def is_even(value):\n        if isinstance(value, int):\n            return value % 2 == 0\n        elif isinstance(value, tuple):\n            return tuple(filter(is_even, value))\n        return False\n    return tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple), map(is_even, test_tuple)))"], "outputs": "[[(False, (6, (2, 4, 9)))], [(False, False, (), False, False)], [((6, 8, (10, 12)),)], [(False, False, (), False)], [()], [((0, 0),)], [(False, False, (), False, False)], [((4, (6, 8, 10)),)], [()], [((100,),)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(False, (6, (2, 4)))], [(4, (6, (2, 4)), 6, 8)]]]"}, {"programs_str": ["from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (tuple, int)) and (not isinstance(sub_item, int) or sub_item % 2 == 0)))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n        return None\n    return tuple(filter(filter_even, test_tuple))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(subitem) for subitem in item if isinstance(subitem, int) and subitem % 2 == 0 or isinstance(subitem, tuple)))\n        if isinstance(item, int) and item % 2 == 0:\n            return item\n        return None\n    return tuple(filter(filter_even, test_tuple))"], "outputs": "[[(4, (7, 6, (2, 4, 9)), 6, 8)], [((7, 1, (9, 11)),)], [(2, 4, (6, 8, (10, 12)), 14, 16)], [((5, (7, 9)),)], [()], [((0, 0),)], [()], [(2, (4, (6, 8, 10)), 12)], [(42,)], [((99, 100),)]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(4, (7, 6, (2, 4)), 6, 8)], [(4, (6, (2, 4)), 6, 8)]]]"}, {"programs_str": ["from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, int):\n            return item % 2 == 0\n        elif isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item))\n        else:\n            return item\n    return tuple((filter_even(x) for x in test_tuple if isinstance(x, int) or isinstance(x, tuple)))"], "outputs": "[[(True, False, (False, True, (True, True, False)), True, True)], [(False, False, (False, False, (False, False)), False, False)], [(True, True, (True, True, (True, True)), True, True)], [(False, False, (False, (False, False)), False)], [()], [(True, (True, True))], [(False, False, (False, False, False), False, False)], [(True, (True, (True, True, True)), True)], [(True,)], [((False, True),)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(True, False, (False, True, (True, True)), True, True)], [(4, (6, (2, 4)), 6, 8)]]]"}], "entropy": 0.6274008452952151, "llm_generated_inputs": "[[(4, 5, (7, 6, (2, 4, 9)), 6, 8)], [(3, 5, (7, 1, (9, 11)), 15, 17)], [(2, 4, (6, 8, (10, 12)), 14, 16)], [(1, 3, (5, (7, 9)), 11)], [()], [(0, (0, 0))], [(1, 3, (5, 7, 9), 11, 13)], [(2, (4, (6, 8, 10)), 12)], [(42,)], [((99, 100),)]]", "input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)]], [[(4, (6, (2, 4)), 6, 8)]]]", "weighted_test_consistency": 0.7999999999999999, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def extract_even(test_tuple: tuple) -> tuple:\n\"\"\"\nWrite a function to remove uneven elements in the nested mixed tuple.\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\n\"\"\"", "entry_point": "extract_even", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(i) for i in item if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple)))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n    return tuple((filter_even(element) for element in test_tuple if isinstance(element, int) and element % 2 == 0 or isinstance(element, tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(x) for x in item if isinstance(x, (int, tuple)) and (not isinstance(x, int) or x % 2 == 0)))\n        return item\n    return filter_even(test_tuple)", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(subitem) for subitem in item if isinstance(subitem, int) and subitem % 2 == 0 or isinstance(subitem, tuple)))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n        return None\n    return tuple((filter_even(element) for element in test_tuple if isinstance(element, int) and element % 2 == 0 or isinstance(element, tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (not isinstance(sub_item, int) or sub_item % 2 == 0)))\n        return item\n    return tuple((filter_even(element) for element in test_tuple if isinstance(element, (int, tuple)) and (not isinstance(element, int) or element % 2 == 0)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple))))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n    return tuple((filter_even(item) for item in test_tuple if isinstance(item, (int, tuple)) and (isinstance(item, int) and item % 2 == 0 or isinstance(item, tuple))))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (not isinstance(sub_item, int) or sub_item % 2 == 0)))\n        if isinstance(item, int) and item % 2 == 0:\n            return item\n    return tuple((filter_even(element) for element in test_tuple if isinstance(element, (int, tuple)) and (not isinstance(element, int) or element % 2 == 0)))", "from typing import Tuple\n\ndef extract_even(test_tuple: tuple) -> tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (not isinstance(sub_item, int) or sub_item % 2 == 0)))\n        return item if item % 2 == 0 else None\n    return tuple((filter_even(item) for item in test_tuple if isinstance(item, (int, tuple)) and (not isinstance(item, int) or item % 2 == 0)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple)))\n        return item if isinstance(item, int) and item % 2 == 0 else None\n    return tuple((filter_even(sub_item) for sub_item in test_tuple if isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple)))\n        return item\n    return tuple((filter_even(sub_item) for sub_item in test_tuple if isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(elem) for elem in item if isinstance(elem, int) and elem % 2 == 0 or isinstance(elem, tuple)))\n        return item\n    return tuple((filter_even(i) for i in test_tuple if isinstance(i, int) and i % 2 == 0 or isinstance(i, tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (int, tuple)) and (not isinstance(sub_item, int) or sub_item % 2 == 0)))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n    return tuple((filter_even(item) for item in test_tuple if isinstance(item, (int, tuple)) and (not isinstance(item, int) or item % 2 == 0)))", "from typing import Tuple\n\ndef extract_even(test_tuple: tuple) -> tuple:\n\n    def filter_even(obj):\n        if isinstance(obj, tuple):\n            return tuple((filter_even(x) for x in obj if isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple)))\n        elif isinstance(obj, int) and obj % 2 == 0:\n            return obj\n        return None\n    return tuple(filter(lambda x: x is not None, filter_even(test_tuple)))", "from typing import Tuple\n\ndef extract_even(test_tuple: tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, int) and sub_item % 2 == 0 or isinstance(sub_item, tuple)))\n        return item if isinstance(item, int) and item % 2 == 0 else None\n    return tuple((filter_even(sub_item) for sub_item in test_tuple if filter_even(sub_item) is not None))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(data):\n        if isinstance(data, tuple):\n            return tuple((filter_even(item) for item in data if isinstance(item, int) and item % 2 == 0 or isinstance(item, tuple)))\n        return data\n    return filter_even(test_tuple)"], "outputs": "[[(4, (6, (2, 4)), 6, 8)], [(((),),)], [(2, 4, (6, 8, (10, 12)), 14, 16)], [(((),),)], [()], [(0, (0, 0))], [((),)], [(2, (4, (6, 8, 10)), 12)], [(42,)], [((100,),)]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef extract_even(test_tuple: tuple) -> tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple(filter(None, (filter_even(sub_item) for sub_item in item)))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n        else:\n            return None\n    return filter_even(test_tuple)", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, int):\n            return item if item % 2 == 0 else None\n        elif isinstance(item, tuple):\n            return tuple(filter(None, map(filter_even, item)))\n        return None\n    return tuple(filter(None, map(filter_even, test_tuple)))"], "outputs": "[[(4, (6, (2, 4)), 6, 8)], [()], [(2, 4, (6, 8, (10, 12)), 14, 16)], [()], [()], [()], [()], [(2, (4, (6, 8, 10)), 12)], [(42,)], [((100,),)]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def is_even(value):\n        if isinstance(value, int):\n            return value % 2 == 0\n        elif isinstance(value, tuple):\n            return tuple(filter(is_even, value))\n        return False\n    return tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0 or isinstance(x, tuple), map(is_even, test_tuple)))"], "outputs": "[[(False, (6, (2, 4, 9)))], [(False, False, (), False, False)], [((6, 8, (10, 12)),)], [(False, False, (), False)], [()], [((0, 0),)], [(False, False, (), False, False)], [((4, (6, 8, 10)),)], [()], [((100,),)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(False, (6, (2, 4)))], [(4, (6, (2, 4)), 6, 8)]]]"}, {"programs_str": ["from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item if isinstance(sub_item, (tuple, int)) and (not isinstance(sub_item, int) or sub_item % 2 == 0)))\n        elif isinstance(item, int) and item % 2 == 0:\n            return item\n        return None\n    return tuple(filter(filter_even, test_tuple))", "from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, tuple):\n            return tuple((filter_even(subitem) for subitem in item if isinstance(subitem, int) and subitem % 2 == 0 or isinstance(subitem, tuple)))\n        if isinstance(item, int) and item % 2 == 0:\n            return item\n        return None\n    return tuple(filter(filter_even, test_tuple))"], "outputs": "[[(4, (7, 6, (2, 4, 9)), 6, 8)], [((7, 1, (9, 11)),)], [(2, 4, (6, 8, (10, 12)), 14, 16)], [((5, (7, 9)),)], [()], [((0, 0),)], [()], [(2, (4, (6, 8, 10)), 12)], [(42,)], [((99, 100),)]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(4, (7, 6, (2, 4)), 6, 8)], [(4, (6, (2, 4)), 6, 8)]]]"}, {"programs_str": ["from typing import Tuple\n\ndef extract_even(test_tuple: Tuple) -> Tuple:\n\n    def filter_even(item):\n        if isinstance(item, int):\n            return item % 2 == 0\n        elif isinstance(item, tuple):\n            return tuple((filter_even(sub_item) for sub_item in item))\n        else:\n            return item\n    return tuple((filter_even(x) for x in test_tuple if isinstance(x, int) or isinstance(x, tuple)))"], "outputs": "[[(True, False, (False, True, (True, True, False)), True, True)], [(False, False, (False, False, (False, False)), False, False)], [(True, True, (True, True, (True, True)), True, True)], [(False, False, (False, (False, False)), False)], [()], [(True, (True, True))], [(False, False, (False, False, False), False, False)], [(True, (True, (True, True, True)), True)], [(True,)], [((False, True),)]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)], [(True, False, (False, True, (True, True)), True, True)], [(4, (6, (2, 4)), 6, 8)]]]"}], "entropy": 0.6274008452952151, "llm_generated_inputs": "[[(4, 5, (7, 6, (2, 4, 9)), 6, 8)], [(3, 5, (7, 1, (9, 11)), 15, 17)], [(2, 4, (6, 8, (10, 12)), 14, 16)], [(1, 3, (5, (7, 9)), 11)], [()], [(0, (0, 0))], [(1, 3, (5, 7, 9), 11, 13)], [(2, (4, (6, 8, 10)), 12)], [(42,)], [((99, 100),)]]", "input_output_examples": "[[[(4, 5, (7, 6, (2, 4)), 6, 8)]], [[(4, (6, (2, 4)), 6, 8)]]]", "weighted_test_consistency": 0.7999999999999999, "at_least_one_align": true}, "result": {"original_passk": 0.7, "original_avg_pass_rate": 0.797196261682243, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 0.7, "repaired_avg_pass_rate": 0.797196261682243, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/581", "original_requirement": "def surface_Area(b: float, s: float) -> float:\n\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"", "repaired_requirement": "def surface_Area(b: float, s: float) -> float:\n    \"\"\"\n    Write a Python function to find the surface area of a square pyramid given the base edge length (`b`) and the slant height (`s`).\n    The surface area is calculated using the formula:\n        surface area = base area + lateral area\n        base area = b^2\n        lateral area = 2 * b * s\n    Here, `s` explicitly represents the slant height (the distance from the apex to the midpoint of one base edge along the triangular face).\n    Example:\n        assert surface_Area(3, 4) == 33\n    \"\"\"", "original_clusters": {"requirement": "def surface_Area(b: float, s: float) -> float:\n\"\"\"\nWrite a python function to find the surface area of a square pyramid with a given base edge and height.\nassert surface_Area(3,4) == 33\n\"\"\"", "entry_point": "surface_Area", "cluster_list": [{"programs_str": ["import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "from math import sqrt\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = sqrt((b / 2) ** 2 + s ** 2)\n    triangular_area = b * slant_height / 2\n    total_surface_area = base_area + 4 * triangular_area\n    return total_surface_area", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "from math import sqrt\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "from math import sqrt\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "from math import sqrt\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    side_length = sqrt((b / 2) ** 2 + s ** 2)\n    triangular_area = b * side_length / 2\n    lateral_area = 4 * triangular_area\n    total_surface_area = base_area + lateral_area\n    return total_surface_area", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = math.sqrt(s ** 2 + (b / 2) ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "from math import sqrt\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b * b\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "from math import sqrt\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    side_area = 2 * b * sqrt((b / 2) ** 2 + s ** 2)\n    return base_area + side_area", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "from math import sqrt\n\ndef surface_Area(b: float, s: float) -> float:\n    return b * b + 2 * b * sqrt((b / 2) ** 2 + s ** 2)", "import math\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = math.sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area", "from math import sqrt\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    slant_height = sqrt((b / 2) ** 2 + s ** 2)\n    lateral_area = 2 * b * slant_height\n    return base_area + lateral_area"], "outputs": "[[34.63201123595259], [147.57650672131263], [416.2277660168379], [3.23606797749979], [0.0], [50.0], [-16.63201123595259], [34.63201123595259], [0.0], [44.099999999999994], [41622.7766016838], [0.11049875621120892]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [34.63201123595259], [33]]]"}], "entropy": 0, "llm_generated_inputs": "[[3, 4], [5, 12], [10, 15], [1, 1], [0, 5], [5, 0], [-3, 4], [3, -4], [0, 0], [3.5, 4.2], [100, 150], [0.1, 0.5]]", "input_output_examples": "[[[3, 4]], [[33]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "def surface_Area(b: float, s: float) -> float:\n    \"\"\"\n    Write a Python function to find the surface area of a square pyramid given the base edge length (`b`) and the slant height (`s`).\n    The surface area is calculated using the formula:\n        surface area = base area + lateral area\n        base area = b^2\n        lateral area = 2 * b * s\n    Here, `s` explicitly represents the slant height (the distance from the apex to the midpoint of one base edge along the triangular face).\n    Example:\n        assert surface_Area(3, 4) == 33\n    \"\"\"", "entry_point": "surface_Area", "cluster_list": [{"programs_str": ["def surface_Area(b: float, s: float) -> float:\n    return b ** 2 + 2 * b * s", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    surface_area = base_area + lateral_area\n    return surface_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "def surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    return base_area + lateral_area", "from typing import float\n\ndef surface_Area(b: float, s: float) -> float:\n    base_area = b ** 2\n    lateral_area = 2 * b * s\n    surface_area = base_area + lateral_area\n    return surface_area"], "outputs": "[[33], [145], [400], [3], [0], [25], [-15], [-15], [0], [41.650000000000006], [40000], [0.11000000000000001]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 4], [5, 12], [10, 15], [1, 1], [0, 5], [5, 0], [-3, 4], [3, -4], [0, 0], [3.5, 4.2], [100, 150], [0.1, 0.5]]", "input_output_examples": "[[[3, 4]], [[33]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.047169811320754707, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.8, "repaired_avg_pass_rate": 0.9971698113207548, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/583", "original_requirement": "def catalan_number(num: int) -> int:\n\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def catalan_number(num: int) -> int:\n\"\"\"\nWrite a function which returns nth catalan number.\nassert catalan_number(10)==16796\n\"\"\"", "entry_point": "catalan_number", "cluster_list": [{"programs_str": ["from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "import math\n\ndef catalan_number(num: int) -> int:\n    return math.comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)", "from math import comb\n\ndef catalan_number(num: int) -> int:\n    return comb(2 * num, num) // (num + 1)"], "outputs": "[[1], [1], [2], [42], [16796], [6564120420], ['ValueError'], ['TypeError'], ['TypeError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [5], [10], [20], [-1], ['a'], [1.5]]", "input_output_examples": "[[[10]], [[16796]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/585", "original_requirement": "from typing import List\nfrom typing import Dict\n\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Dict\n\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n\"\"\"\nWrite a function to find the n most expensive items in a given dataset.\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\n\"\"\"", "entry_point": "expensive_items", "cluster_list": [{"programs_str": ["from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda item: item['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    sorted_items = sorted(items, key=lambda item: item['price'], reverse=True)\n    return sorted_items[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]", "from typing import List, Dict, Any\n\ndef expensive_items(items: List[Dict[str, Any]], n: int) -> List[Dict[str, Any]]:\n    return sorted(items, key=lambda x: x['price'], reverse=True)[:n]"], "outputs": "[[[{'name': 'Item-2', 'price': 555.22}]], [[{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]], [[{'name': 'Item-3', 'price': 300}, {'name': 'Item-1', 'price': 200}]], [[{'name': 'Item-3', 'price': 300}, {'name': 'Item-1', 'price': 200}, {'name': 'Item-2', 'price': 100}]], [[]], [[{'name': 'Item-1', 'price': 200}]], [[{'name': 'Item-1', 'price': 200}]], [[]], [[{'name': 'Item-1', 'price': 200}]], [[{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 555.22}]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 2], [[{'name': 'Item-1', 'price': 200}, {'name': 'Item-2', 'price': 100}, {'name': 'Item-3', 'price': 300}], 2], [[{'name': 'Item-1', 'price': 200}, {'name': 'Item-2', 'price': 100}, {'name': 'Item-3', 'price': 300}], 3], [[{'name': 'Item-1', 'price': 200}, {'name': 'Item-2', 'price': 100}, {'name': 'Item-3', 'price': 300}], 0], [[{'name': 'Item-1', 'price': 200}], 1], [[{'name': 'Item-1', 'price': 200}], 2], [[], 1], [[{'name': 'Item-1', 'price': 200}, {'name': 'Item-2', 'price': 200}], 1], [[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 555.22}], 2]]", "input_output_examples": "[[[[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1]], [[[{'name': 'Item-2', 'price': 555.22}]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/586", "original_requirement": "from typing import List\n\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a python function to split a list at the nth eelment and add the first part to the end.\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\n\"\"\"", "entry_point": "split_Arr", "cluster_list": [{"programs_str": ["from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]", "from typing import List\n\ndef split_Arr(arr: List[int], n: int) -> List[int]:\n    return arr[n:] + arr[:n]"], "outputs": "[[[5, 6, 52, 36, 12, 10]], [[4, 5, 1, 2, 3]], [[200, 300, 400, 100]], [[1, 2, 3, 4, 5, 6]], [[1, 2, 3, 4, 5, 6]], [[10, 20, 30, 40]], [[9, 7, 8]], [[45, 15, 25, 35]], [[1]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[12, 10, 5, 6, 52, 36], 2], [[1, 2, 3, 4, 5], 3], [[100, 200, 300, 400], 1], [[1, 2, 3, 4, 5, 6], 0], [[1, 2, 3, 4, 5, 6], 6], [[10, 20, 30, 40], 4], [[7, 8, 9], 2], [[15, 25, 35, 45], -1], [[1], 0], [[], 0]]", "input_output_examples": "[[[[12, 10, 5, 6, 52, 36], 2]], [[[5, 6, 52, 36, 12, 10]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/587", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to convert a list to a tuple.\nassert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\n\"\"\"", "entry_point": "list_tuple", "cluster_list": [{"programs_str": ["from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Any, Tuple\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)", "from typing import List, Tuple, Any\n\ndef list_tuple(listx: List[Any]) -> Tuple[Any, ...]:\n    return tuple(listx)"], "outputs": "[[(5, 10, 7, 4, 15, 3)], [()], [(None,)], [(1, 'a', 3.14, True, (10, 20), {'key': 'value'})], [(1,)], [(5, 5, 5, 5)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 10, 7, 4, 15, 3]], [[]], [[None]], [[1, 'a', 3.14, True, (10, 20), {'key': 'value'}]], [[1]], [[5, 5, 5, 5]]]", "input_output_examples": "[[[[5, 10, 7, 4, 15, 3]]], [[(5, 10, 7, 4, 15, 3)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/588", "original_requirement": "from typing import List\n\n\ndef big_diff(nums: List[int]) -> int:\n\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef big_diff(nums: List[int]) -> int:\n\"\"\"\nWrite a python function to find the difference between largest and smallest value in a given list.\nassert big_diff([1,2,3,4]) == 3\n\"\"\"", "entry_point": "big_diff", "cluster_list": [{"programs_str": ["from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)", "from typing import List\n\ndef big_diff(nums: List[int]) -> int:\n    return max(nums) - min(nums)"], "outputs": "[[3], [20], [20], [0], [0], [200], [2], [800], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4]], [[10, 20, 30]], [[-5, 5, 15]], [[7]], [[1, 1, 1, 1]], [[100, -100]], [[0, -1, 1]], [[999, 500, 200, 1000]], [[]]]", "input_output_examples": "[[[[1, 2, 3, 4]]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/589", "original_requirement": "from typing import List\n\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n    Write a function to find all perfect squares between two given numbers `a` and `b`, inclusive of the boundaries.\n\n    Requirements:\n    1. The function should return a list of integers representing the perfect squares between `a` and `b` (inclusive).\n    2. If `a` or `b` is negative, or if `a > b`, the function must raise a `ValueError`.\n    3. The inputs `a` and `b` must be integers. If non-integer inputs are provided, the function behavior is undefined.\n    4. The function assumes valid input types but explicitly handles invalid ranges as described above.\n\n    Example:\n    assert perfect_squares(1, 30) == [1, 4, 9, 16, 25]\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n\"\"\"\nWrite a function to find perfect squares between two given numbers.\nassert perfect_squares(1,30)==[1, 4, 9, 16, 25]\n\"\"\"", "entry_point": "perfect_squares", "cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    result = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        result.append(i * i)\n    return result", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    result = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        result.append(i * i)\n    return result", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i ** 2 for i in range(start, end + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    squares = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        squares.append(i * i)\n    return squares", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    result = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        result.append(i * i)\n    return result", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [x ** 2 for x in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    result = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        result.append(i * i)\n    return result", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    result = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        result.append(i * i)\n    return result", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i ** 2 for i in range(math.isqrt(a), math.isqrt(b) + 1) if a <= i ** 2 <= b]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i ** 2 for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    result = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        result.append(i * i)\n    return result", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i ** 2 for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [x ** 2 for x in range(math.isqrt(a), math.isqrt(b) + 1) if a <= x ** 2 <= b]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    result = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        result.append(i * i)\n    return result", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [x ** 2 for x in range(math.ceil(math.sqrt(a)), math.floor(math.sqrt(b)) + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i * i for i in range(start, end + 1)]"], "outputs": "[[[1, 4, 9, 16, 25]], [[16, 25, 36, 49]], [[0, 1, 4, 9]], ['ValueError'], [[]], [[25]], [[]]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    result = []\n    start = math.ceil(a ** 0.5)\n    end = math.floor(b ** 0.5)\n    for i in range(start, end + 1):\n        square = i * i\n        if a <= square <= b:\n            result.append(square)\n    return result", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    return [i * i for i in range(int(a ** 0.5), int(b ** 0.5) + 1) if i * i >= a and i * i <= b]"], "outputs": "[[[1, 4, 9, 16, 25]], [[16, 25, 36, 49]], [[0, 1, 4, 9]], ['TypeError'], [[]], [[25]], [[]]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[1, 30], [15, 50], [0, 10], [-20, 20], [10, 10], [25, 25], [20, 5]]", "input_output_examples": "[[[1, 30]], [[[1, 4, 9, 16, 25]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    \"\"\"\n    Write a function to find all perfect squares between two given numbers `a` and `b`, inclusive of the boundaries.\n\n    Requirements:\n    1. The function should return a list of integers representing the perfect squares between `a` and `b` (inclusive).\n    2. If `a` or `b` is negative, or if `a > b`, the function must raise a `ValueError`.\n    3. The inputs `a` and `b` must be integers. If non-integer inputs are provided, the function behavior is undefined.\n    4. The function assumes valid input types but explicitly handles invalid ranges as described above.\n\n    Example:\n    assert perfect_squares(1, 30) == [1, 4, 9, 16, 25]\n    \"\"\"", "entry_point": "perfect_squares", "cluster_list": [{"programs_str": ["from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a > b or a < 0 or b < 0:\n        raise ValueError('Invalid range: a should be <= b and both should be non-negative integers.')\n    result = []\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    for i in range(start, end + 1):\n        square = i * i\n        if a <= square <= b:\n            result.append(square)\n    return result", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range: either boundaries are negative or a > b.')\n    result = []\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    for num in range(start, end + 1):\n        square = num ** 2\n        if a <= square <= b:\n            result.append(square)\n    return result", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError(\"Invalid range: both numbers must be non-negative and 'a' should not be greater than 'b'\")\n    result = []\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    for i in range(start, end + 1):\n        square = i * i\n        if a <= square <= b:\n            result.append(square)\n    return result", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range: a and b must be non-negative and a <= b.')\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    return [i ** 2 for i in range(start, end + 1) if i ** 2 >= a and i ** 2 <= b]", "import math\nfrom typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a > b or a < 0 or b < 0:\n        raise ValueError('Invalid range: either `a` or `b` is negative, or `a > b`.')\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i ** 2 for i in range(start, end + 1)]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a > b or a < 0 or b < 0:\n        raise ValueError(\"Invalid range: 'a' and 'b' must be non-negative and 'a' must be <= 'b'.\")\n    result = []\n    start = int(a ** 0.5)\n    for num in range(start, int(b ** 0.5) + 1):\n        square = num ** 2\n        if square >= a and square <= b:\n            result.append(square)\n    return result", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError(\"Invalid range: 'a' and 'b' must be non-negative integers with a <= b.\")\n    result = []\n    start = int(a ** 0.5)\n    if start ** 2 < a:\n        start += 1\n    current = start\n    while current ** 2 <= b:\n        result.append(current ** 2)\n        current += 1\n    return result", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a > b or a < 0 or b < 0:\n        raise ValueError('Invalid range: `a` and `b` must be non-negative, and `a` must be less than or equal to `b`.')\n    return [x ** 2 for x in range(int(a ** 0.5), int(b ** 0.5) + 1) if x ** 2 >= a and x ** 2 <= b]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range: `a` and `b` must be non-negative integers, and `a` must be less than or equal to `b`.')\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i ** 2 for i in range(start, end + 1)]", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range for perfect squares calculation.')\n    perfect_square_list = []\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for i in range(start, end + 1):\n        perfect_square_list.append(i * i)\n    return perfect_square_list", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range: a and b must be non-negative integers and a must be less than or equal to b.')\n    result = []\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    for i in range(start, end + 1):\n        square = i * i\n        if a <= square <= b:\n            result.append(square)\n    return result", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range: ensure a and b are non-negative and a <= b')\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i ** 2 for i in range(start, end + 1)]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range: a and b must be non-negative and a must be less than or equal to b.')\n    squares = []\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    for i in range(start, end + 1):\n        square = i * i\n        if a <= square <= b:\n            squares.append(square)\n    return squares", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range: ensure both numbers are non-negative and a ≤ b.')\n    result = []\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    for num in range(start, end + 1):\n        square = num ** 2\n        if a <= square <= b:\n            result.append(square)\n    return result", "import math\nfrom typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range: ensure a ≥ 0, b ≥ 0, and a ≤ b.')\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i * i for i in range(start, end + 1)]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a > b or a < 0 or b < 0:\n        raise ValueError('Invalid range: Either negative boundaries or `a` > `b`.')\n    result = []\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    for i in range(start, end + 1):\n        square = i * i\n        if a <= square <= b:\n            result.append(square)\n    return result", "from typing import List\nimport math\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a > b or a < 0 or b < 0:\n        raise ValueError('Invalid input: Ensure a <= b and both a, b are non-negative.')\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    return [i * i for i in range(start, end + 1)]", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a > b or a < 0 or b < 0:\n        raise ValueError('Invalid input range')\n    result = []\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    for num in range(start, end + 1):\n        square = num * num\n        if a <= square <= b:\n            result.append(square)\n    return result", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range: a and b must be non-negative, and a must be less than or equal to b.')\n    result = []\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    for i in range(start, end + 1):\n        square = i * i\n        if a <= square <= b:\n            result.append(square)\n    return result", "from typing import List\n\ndef perfect_squares(a: int, b: int) -> List[int]:\n    if a < 0 or b < 0 or a > b:\n        raise ValueError('Invalid range. Ensure that 0 <= a <= b.')\n    result = []\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    for i in range(start, end + 1):\n        square = i * i\n        if square >= a and square <= b:\n            result.append(square)\n    return result"], "outputs": "[[[1, 4, 9, 16, 25]], [[16, 25, 36, 49]], [[0, 1, 4, 9]], ['ValueError'], [[]], [[25]], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1, 30], [15, 50], [0, 10], [-20, 20], [10, 10], [25, 25], [20, 5]]", "input_output_examples": "[[[1, 30]], [[[1, 4, 9, 16, 25]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.2075471698113207, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.17924528301886788, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/590", "original_requirement": "from typing import Tuple\n\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"", "repaired_requirement": "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    \"\"\"\n    Write a function to convert Cartesian coordinates (x, y) into polar coordinates and a transformed rectangular complex coordinate.\n\n    The function performs the following steps:\n    1. Calculate the polar coordinates:\n       - Magnitude = sqrt(x^2 + y^2)\n       - Angle = atan2(y, x)\n       These values are returned as a tuple (magnitude, angle).\n\n    2. Convert the polar coordinates into a rectangular complex coordinate using the `cmath.rect` function.\n\n    3. Transform the rectangular complex coordinate by negating its real part while retaining its imaginary part. \n       This transformation is applied to the rectangular complex coordinate to produce the final rectangular complex output.\n\n    4. Return a tuple containing:\n       - The polar coordinates as (magnitude, angle)\n       - The transformed rectangular complex coordinate\n\n    Example:\n    assert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"", "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n\"\"\"\nWrite a function to convert polar coordinates to rectangular coordinates.\nassert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n\"\"\"", "entry_point": "polar_rect", "cluster_list": [{"programs_str": ["from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rectangular_from_polar = cmath.rect(magnitude, angle)\n    return (polar_coordinates, rectangular_from_polar)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    complex_number = cmath.rect(magnitude, angle)\n    return (polar_coordinates, complex_number)", "from typing import Tuple\nfrom math import sqrt, atan2, cos, sin\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    radius = sqrt(x ** 2 + y ** 2)\n    angle = atan2(y, x)\n    rect_x = radius * cos(angle)\n    rect_y = radius * sin(angle)\n    return ((radius, angle), complex(rect_x, rect_y))", "from typing import Tuple\nimport math\nimport cmath\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    return ((r, theta), cmath.rect(r, theta))", "import cmath\nfrom typing import Tuple\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = (x ** 2 + y ** 2) ** 0.5\n    angle = cmath.phase(complex(x, y))\n    polar_coordinates = (magnitude, angle)\n    rectangular = cmath.rect(magnitude, angle)\n    return (polar_coordinates, rectangular)", "import cmath\nfrom typing import Tuple\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = (x ** 2 + y ** 2) ** 0.5\n    angle = cmath.phase(complex(x, y))\n    polar_coordinates = (magnitude, angle)\n    rect_coordinates = cmath.rect(magnitude, angle)\n    return (polar_coordinates, rect_coordinates)", "import cmath\nimport math\nfrom typing import Tuple\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coords = (magnitude, angle)\n    rect_coords = cmath.rect(magnitude, angle)\n    return (polar_coords, rect_coords)", "import cmath\nimport math\nfrom typing import Tuple\n\ndef polar_rect(r: float, theta: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(r ** 2 + theta ** 2)\n    angle = math.atan2(theta, r)\n    rect_coord = cmath.rect(magnitude, angle)\n    return ((magnitude, angle), rect_coord)", "from typing import Tuple\nfrom cmath import rect, phase\nfrom math import sqrt, atan2\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = sqrt(x ** 2 + y ** 2)\n    angle = atan2(y, x)\n    complex_rect = rect(magnitude, angle)\n    return ((magnitude, angle), complex_rect)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coords = (magnitude, angle)\n    rectangular_coords = cmath.rect(magnitude, angle)\n    return (polar_coords, rectangular_coords)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    polar = (r, theta)\n    rectangular_as_complex = cmath.rect(r, theta)\n    return (polar, rectangular_as_complex)", "import math\nfrom typing import Tuple\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    complex_form = r * complex(math.cos(theta), math.sin(theta))\n    return ((r, theta), complex_form)", "import cmath\nimport math\nfrom typing import Tuple\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    polar_coordinates = (r, theta)\n    rectangular_complex = cmath.rect(r, theta)\n    return (polar_coordinates, rectangular_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar = (magnitude, angle)\n    rect = cmath.rect(magnitude, angle)\n    return (polar, rect)", "import math\nfrom typing import Tuple\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    polar_coords = (r, theta)\n    rect_coords = complex(r * math.cos(theta), r * math.sin(theta))\n    return (polar_coords, rect_coords)", "import math\nfrom typing import Tuple\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rectangular_coordinates = complex(magnitude * math.cos(angle), magnitude * math.sin(angle))\n    return (polar_coordinates, rectangular_coordinates)"], "outputs": "[[((5.0, 0.9272952180016122), (3+3.9999999999999996j))], [((0.0, 0.0), 0j)], [((5.0, 2.214297435588181), (-2.999999999999999+4.000000000000001j))], [((5.0, -0.9272952180016122), (3-3.9999999999999996j))], [((5.0, -2.214297435588181), (-2.999999999999999-4.000000000000001j))], [((2.9154759474226504, 1.0303768265243125), (1.5+2.5j))], [((0.223606797749979, 1.1071487177940904), (0.10000000000000003+0.2j))], [((2236.06797749979, 1.1071487177940904), (1000.0000000000002+2000j))], [((4.1543511992247355, 0.7132846255518286), (3.14159+2.71828j))], [((4.1543511992247355, -2.4283080280379647), (-3.14159-2.7182799999999996j))]]", "probability": 0.8, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [((5.0, 0.9272952180016122), (3+3.9999999999999996j))], [((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]"}, {"programs_str": ["import cmath\nfrom typing import Tuple\nfrom math import sqrt, atan2, radians\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = sqrt(x ** 2 + y ** 2)\n    theta = atan2(y, x)\n    polar_coords = (r, theta)\n    rectangular_coords = cmath.rect(-r, radians(theta * 180 / cmath.pi))\n    return (polar_coords, rectangular_coords)"], "outputs": "[[((5.0, 0.9272952180016122), (-3-3.9999999999999996j))], [((0.0, 0.0), 0j)], [((5.0, 2.214297435588181), (2.999999999999999-4.000000000000001j))], [((5.0, -0.9272952180016122), (-3+3.9999999999999996j))], [((5.0, -2.214297435588181), (2.999999999999999+4.000000000000001j))], [((2.9154759474226504, 1.0303768265243125), (-1.5-2.5j))], [((0.223606797749979, 1.1071487177940904), (-0.10000000000000003-0.2j))], [((2236.06797749979, 1.1071487177940904), (-1000.0000000000002-2000j))], [((4.1543511992247355, 0.7132846255518286), (-3.1415899999999994-2.7182800000000005j))], [((4.1543511992247355, -2.4283080280379647), (3.141590000000001+2.718279999999998j))]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [((5.0, 0.9272952180016122), (-3-3.9999999999999996j))], [((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]"}, {"programs_str": ["import math\nfrom typing import Tuple\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = math.sqrt(x ** 2 + y ** 2)\n    theta = math.atan2(y, x)\n    rectangular = complex(r * math.cos(theta) - r, r * math.sin(theta))\n    return ((r, theta), rectangular)"], "outputs": "[[((5.0, 0.9272952180016122), (-2+3.9999999999999996j))], [((0.0, 0.0), 0j)], [((5.0, 2.214297435588181), (-7.999999999999999+4.000000000000001j))], [((5.0, -0.9272952180016122), (-2-3.9999999999999996j))], [((5.0, -2.214297435588181), (-7.999999999999999-4.000000000000001j))], [((2.9154759474226504, 1.0303768265243125), (-1.4154759474226504+2.5j))], [((0.223606797749979, 1.1071487177940904), (-0.12360679774997896+0.2j))], [((2236.06797749979, 1.1071487177940904), (-1236.0679774997895+2000j))], [((4.1543511992247355, 0.7132846255518286), (-1.0127611992247356+2.71828j))], [((4.1543511992247355, -2.4283080280379647), (-7.295941199224735-2.7182799999999996j))]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [((5.0, 0.9272952180016122), (-2+3.9999999999999996j))], [((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]"}, {"programs_str": ["from typing import Tuple\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar = (magnitude, angle)\n    rectangular = magnitude * (math.cos(angle) - math.sin(angle) * 1j)\n    return (polar, rectangular)"], "outputs": "[[((5.0, 0.9272952180016122), (3-3.9999999999999996j))], [((0.0, 0.0), 0j)], [((5.0, 2.214297435588181), (-2.999999999999999-4.000000000000001j))], [((5.0, -0.9272952180016122), (3+3.9999999999999996j))], [((5.0, -2.214297435588181), (-2.999999999999999+4.000000000000001j))], [((2.9154759474226504, 1.0303768265243125), (1.5-2.5j))], [((0.223606797749979, 1.1071487177940904), (0.10000000000000003-0.2j))], [((2236.06797749979, 1.1071487177940904), (1000.0000000000002-2000j))], [((4.1543511992247355, 0.7132846255518286), (3.14159-2.71828j))], [((4.1543511992247355, -2.4283080280379647), (-3.14159+2.7182799999999996j))]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [((5.0, 0.9272952180016122), (3-3.9999999999999996j))], [((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]"}, {"programs_str": ["from math import sqrt, atan2, cos, sin, pi\nfrom typing import Tuple\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    r = sqrt(x ** 2 + y ** 2)\n    theta = atan2(y, x)\n    rect_complex = complex(r * cos(theta - pi), r * sin(theta - pi))\n    return ((r, theta), rect_complex)"], "outputs": "[[((5.0, 0.9272952180016122), (-2.999999999999999-4.000000000000001j))], [((0.0, 0.0), 0j)], [((5.0, 2.214297435588181), (3-4j))], [((5.0, -0.9272952180016122), (-3.0000000000000004+3.9999999999999996j))], [((5.0, -2.214297435588181), (2.9999999999999987+4.000000000000001j))], [((2.9154759474226504, 1.0303768265243125), (-1.4999999999999996-2.5000000000000004j))], [((0.223606797749979, 1.1071487177940904), (-0.1-0.2j))], [((2236.06797749979, 1.1071487177940904), (-1000-2000j))], [((4.1543511992247355, 0.7132846255518286), (-3.1415899999999986-2.718280000000001j))], [((4.1543511992247355, -2.4283080280379647), (3.1415899999999986+2.7182800000000014j))]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [((5.0, 0.9272952180016122), (-2.999999999999999-4.000000000000001j))], [((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]"}], "entropy": 0.48318813031192837, "llm_generated_inputs": "[[3, 4], [0, 0], [-3, 4], [3, -4], [-3, -4], [1.5, 2.5], [0.1, 0.2], [1000, 2000], [3.14159, 2.71828], [-3.14159, -2.71828]]", "input_output_examples": "[[[3, 4]], [[((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    \"\"\"\n    Write a function to convert Cartesian coordinates (x, y) into polar coordinates and a transformed rectangular complex coordinate.\n\n    The function performs the following steps:\n    1. Calculate the polar coordinates:\n       - Magnitude = sqrt(x^2 + y^2)\n       - Angle = atan2(y, x)\n       These values are returned as a tuple (magnitude, angle).\n\n    2. Convert the polar coordinates into a rectangular complex coordinate using the `cmath.rect` function.\n\n    3. Transform the rectangular complex coordinate by negating its real part while retaining its imaginary part. \n       This transformation is applied to the rectangular complex coordinate to produce the final rectangular complex output.\n\n    4. Return a tuple containing:\n       - The polar coordinates as (magnitude, angle)\n       - The transformed rectangular complex coordinate\n\n    Example:\n    assert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"", "entry_point": "polar_rect", "cluster_list": [{"programs_str": ["from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rect_complex = cmath.rect(magnitude, angle)\n    transformed_rect_complex = complex(-rect_complex.real, rect_complex.imag)\n    return (polar_coordinates, transformed_rect_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rect_coord = cmath.rect(magnitude, angle)\n    transformed_rect_coord = -rect_coord.real + 1j * rect_coord.imag\n    return (polar_coordinates, transformed_rect_coord)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rect = cmath.rect(magnitude, angle)\n    transformed_rect = complex(-rect.real, rect.imag)\n    return (polar_coordinates, transformed_rect)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rectangular_complex = cmath.rect(magnitude, angle)\n    transformed_complex = complex(-rectangular_complex.real, rectangular_complex.imag)\n    return (polar_coordinates, transformed_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rect_coord = cmath.rect(magnitude, angle)\n    transformed_rect = complex(-rect_coord.real, rect_coord.imag)\n    return (polar_coordinates, transformed_rect)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rectangular_coordinate = cmath.rect(magnitude, angle)\n    transformed_rectangular_coordinate = complex(-rectangular_coordinate.real, rectangular_coordinate.imag)\n    return (polar_coordinates, transformed_rectangular_coordinate)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rectangular_complex = cmath.rect(magnitude, angle)\n    transformed_complex = complex(-rectangular_complex.real, rectangular_complex.imag)\n    return (polar_coordinates, transformed_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rect_complex = cmath.rect(magnitude, angle)\n    transformed_complex = complex(-rect_complex.real, rect_complex.imag)\n    return (polar_coordinates, transformed_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rect_complex = cmath.rect(magnitude, angle)\n    transformed_rect_complex = complex(-rect_complex.real, rect_complex.imag)\n    return (polar_coordinates, transformed_rect_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rect_coordinate = cmath.rect(magnitude, angle)\n    transformed_rect_coordinate = complex(-rect_coordinate.real, rect_coordinate.imag)\n    return (polar_coordinates, transformed_rect_coordinate)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rect_complex = cmath.rect(magnitude, angle)\n    transformed_complex = complex(-rect_complex.real, rect_complex.imag)\n    return (polar_coordinates, transformed_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coords = (magnitude, angle)\n    rect_coord = cmath.rect(magnitude, angle)\n    transformed_coord = complex(-rect_coord.real, rect_coord.imag)\n    return (polar_coords, transformed_coord)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rectangular_complex = cmath.rect(magnitude, angle)\n    transformed_complex = complex(-rectangular_complex.real, rectangular_complex.imag)\n    return (polar_coordinates, transformed_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rectangular_complex = cmath.rect(magnitude, angle)\n    transformed_rectangular = complex(-rectangular_complex.real, rectangular_complex.imag)\n    return (polar_coordinates, transformed_rectangular)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rectangular_complex = cmath.rect(magnitude, angle)\n    transformed_rectangular_complex = complex(-rectangular_complex.real, rectangular_complex.imag)\n    return (polar_coordinates, transformed_rectangular_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rect_complex = cmath.rect(magnitude, angle)\n    transformed_rect_complex = complex(-rect_complex.real, rect_complex.imag)\n    return (polar_coordinates, transformed_rect_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rectangular_complex = cmath.rect(magnitude, angle)\n    transformed_complex = complex(-rectangular_complex.real, rectangular_complex.imag)\n    return (polar_coordinates, transformed_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rectangular_complex = cmath.rect(magnitude, angle)\n    transformed_rectangular_complex = complex(-rectangular_complex.real, rectangular_complex.imag)\n    return (polar_coordinates, transformed_rectangular_complex)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coords = (magnitude, angle)\n    rectangular = cmath.rect(magnitude, angle)\n    transformed_rectangular = complex(-rectangular.real, rectangular.imag)\n    return (polar_coords, transformed_rectangular)", "from typing import Tuple\nimport cmath\nimport math\n\ndef polar_rect(x: float, y: float) -> Tuple[Tuple[float, float], complex]:\n    magnitude = math.sqrt(x ** 2 + y ** 2)\n    angle = math.atan2(y, x)\n    polar_coordinates = (magnitude, angle)\n    rect_complex = cmath.rect(magnitude, angle)\n    transformed_rect_complex = complex(-rect_complex.real, rect_complex.imag)\n    return (polar_coordinates, transformed_rect_complex)"], "outputs": "[[((5.0, 0.9272952180016122), (-3+3.9999999999999996j))], [((0.0, 0.0), (-0+0j))], [((5.0, 2.214297435588181), (2.999999999999999+4.000000000000001j))], [((5.0, -0.9272952180016122), (-3-3.9999999999999996j))], [((5.0, -2.214297435588181), (2.999999999999999-4.000000000000001j))], [((2.9154759474226504, 1.0303768265243125), (-1.5+2.5j))], [((0.223606797749979, 1.1071487177940904), (-0.10000000000000003+0.2j))], [((2236.06797749979, 1.1071487177940904), (-1000.0000000000002+2000j))], [((4.1543511992247355, 0.7132846255518286), (-3.14159+2.71828j))], [((4.1543511992247355, -2.4283080280379647), (3.14159-2.7182799999999996j))]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[3, 4], [((5.0, 0.9272952180016122), (-3+3.9999999999999996j))], [((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]"}], "entropy": 0, "llm_generated_inputs": "[[3, 4], [0, 0], [-3, 4], [3, -4], [-3, -4], [1.5, 2.5], [0.1, 0.2], [1000, 2000], [3.14159, 2.71828], [-3.14159, -2.71828]]", "input_output_examples": "[[[3, 4]], [[((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.009615384615384581, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.0, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/591", "original_requirement": "from typing import List\n\n\ndef swap_List(newList: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef swap_List(newList: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to interchange the first and last elements in a list.\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\n\"\"\"", "entry_point": "swap_List", "cluster_list": [{"programs_str": ["from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if not newList:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) <= 1:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) >= 2:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) > 1:\n        newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList", "from typing import List\n\ndef swap_List(newList: List[int]) -> List[int]:\n    if len(newList) < 2:\n        return newList\n    newList[0], newList[-1] = (newList[-1], newList[0])\n    return newList"], "outputs": "[[[24, 35, 9, 56, 12]], [[5, 2, 3, 4, 1]], [[5]], [[2, 1]], [[]], [[600, 200, 300, 400, 500, 100]], [[-4, -1, -2, -3, 0]], [[999]], [[20, 10, 15, 5]], [[9, 1, 8, 3, 2, 7]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[12, 35, 9, 56, 24]], [[1, 2, 3, 4, 5]], [[5]], [[1, 2]], [[]], [[100, 200, 300, 400, 500, 600]], [[0, -1, -2, -3, -4]], [[999]], [[5, 10, 15, 20]], [[7, 1, 8, 3, 2, 9]]]", "input_output_examples": "[[[[12, 35, 9, 56, 24]]], [[[24, 35, 9, 56, 12]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/592", "original_requirement": "def sum_Of_product(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"", "repaired_requirement": "def sum_Of_product(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"", "original_clusters": {"requirement": "def sum_Of_product(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"", "entry_point": "sum_Of_product", "cluster_list": [{"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))\nimport math"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, i) * comb(n, i + 1) for i in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n + 1):\n        product = math.comb(n, k) * math.comb(n, k + 1)\n        total_sum += product\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        product = comb(n, k) * comb(n, k + 1)\n        total_sum += product\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 1.0, "llm_generated_inputs": "[[1], [2], [3], [5], [10], [0], [-1], [100], [999]]", "input_output_examples": "[[[3]], [[15]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def sum_Of_product(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of the product of consecutive binomial co-efficients.\nassert sum_Of_product(3) == 15\n\"\"\"", "entry_point": "sum_Of_product", "cluster_list": [{"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))\nimport math"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total = 0\n    for k in range(n):\n        total += comb(n, k) * comb(n, k + 1)\n    return total"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, i) * comb(n, i + 1) for i in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    return sum((comb(n, k) * comb(n, k + 1) for k in range(n)))"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n + 1):\n        product = math.comb(n, k) * math.comb(n, k + 1)\n        total_sum += product\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        product = comb(n, k) * comb(n, k + 1)\n        total_sum += product\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import comb\n\ndef sum_Of_product(n: int) -> int:\n    total_sum = 0\n    for k in range(n):\n        total_sum += comb(n, k) * comb(n, k + 1)\n    return total_sum"], "outputs": "[[1], [4], [15], [210], [167960], [0], [0], [89651994709013149668717007007410063242083752153874590932000], [511781759720485298804609139689305707691853042294501159776528828172605412210075455746149089842027912955293472124481747290826179668886073103358186468789267713102663802835839501376028767490886442162433266690665349449454125741095036744097271345663222370639865284579891048612316021769772299671979640225987483835109361235600575231140843700846046330999651561069589670643511138100670151173774583694603890266697347682000703041527508477706273539496520306711573384607476100500872634392367976249561559927210833170816151476258117588364463288907960151831223013205303648378087634835457676553965782358118366690134560]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 1.0, "llm_generated_inputs": "[[1], [2], [3], [5], [10], [0], [-1], [100], [999]]", "input_output_examples": "[[[3]], [[15]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.8301886792452831, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.8301886792452831, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/593", "original_requirement": "def removezero_ip(ip: str) -> str:\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def removezero_ip(ip: str) -> str:\n\"\"\"\nWrite a function to remove leading zeroes from an ip address.\n\n\nassert removezero_ip(\"216.08.094.196\")==('216.8.94.196')\n\"\"\"", "entry_point": "removezero_ip", "cluster_list": [{"programs_str": ["def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join([str(int(segment)) for segment in ip.split('.')])", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(segment)) for segment in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(segment)) for segment in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(segment)) for segment in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(segment)) for segment in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(part)) for part in ip.split('.')))", "def removezero_ip(ip: str) -> str:\n    return '.'.join((str(int(section)) for section in ip.split('.')))"], "outputs": "[['216.8.94.196'], ['1.2.3.4'], ['0.0.0.0'], ['192.168.1.1'], ['10.0.0.1'], ['255.255.255.255'], ['0.0.0.0'], ['1.10.100.1000'], ['127.0.0.1'], ['1.2.3.4'], ['123.456.78.90']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['216.08.094.196'], ['001.002.003.004'], ['000.0.00.0'], ['192.168.001.001'], ['10.0.0.01'], ['255.255.255.255'], ['0.0.0.0'], ['0001.010.0100.1000'], ['127.0.0.001'], ['01.02.003.004'], ['123.456.078.90']]", "input_output_examples": "[[['216.08.094.196']], [['216.8.94.196']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.028846153846153855, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/594", "original_requirement": "from typing import List\n\n\ndef diff_even_odd(list1: List[int]) -> int:\n\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the absolute difference between the first even number and the first odd number in a given list.\n\n    - The function searches for the first even number and the first odd number independently across the entire list, without requiring sequential discovery.\n    - If the list does not contain at least one even number and one odd number, the function will raise a `StopIteration` exception.\n    - If the list is empty, the function will raise a `StopIteration` exception.\n    - The input list is not guaranteed to contain both even and odd numbers, and the function will raise `StopIteration` if either is missing.\n\n    Example:\n    assert diff_even_odd([1,3,5,7,4,1,6,8]) == 3\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef diff_even_odd(list1: List[int]) -> int:\n\"\"\"\nWrite a function to find the difference of the first even and first odd number of a given list.\nassert diff_even_odd([1,3,5,7,4,1,6,8])==3\n\"\"\"", "entry_point": "diff_even_odd", "cluster_list": [{"programs_str": ["from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((num for num in list1 if num % 2 == 0))\n    first_odd = next((num for num in list1 if num % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((num for num in list1 if num % 2 == 0))\n    first_odd = next((num for num in list1 if num % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((num for num in list1 if num % 2 == 0))\n    first_odd = next((num for num in list1 if num % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((num for num in list1 if num % 2 == 0))\n    first_odd = next((num for num in list1 if num % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((num for num in list1 if num % 2 == 0))\n    first_odd = next((num for num in list1 if num % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((num for num in list1 if num % 2 == 0))\n    first_odd = next((num for num in list1 if num % 2 != 0))\n    return abs(first_even - first_odd)"], "outputs": "[[3], [1], [3], ['StopIteration'], ['StopIteration'], ['StopIteration'], ['StopIteration'], [1], [1], [1], [5], [9], [5], [5]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    return abs(first_even - first_odd)"], "outputs": "[[3], [1], [3], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], [1], [1], [1], [5], [9], [5], [5]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    for num in list1:\n        if num % 2 == 0:\n            first_even = num\n            break\n    for num in list1:\n        if num % 2 != 0:\n            first_odd = num\n            break\n    return abs(first_even - first_odd)"], "outputs": "[[3], [1], [3], ['UnboundLocalError'], ['UnboundLocalError'], ['UnboundLocalError'], ['UnboundLocalError'], [1], [1], [1], [5], [9], [5], [5]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.5578578164321781, "llm_generated_inputs": "[[[1, 3, 5, 7, 4, 1, 6, 8]], [[2, 4, 6, 8, 1, 3, 5, 7]], [[1, 5, 7, 4]], [[2, 8, 6, 10]], [[3]], [[8]], [[]], [[0, 1]], [[1, 0]], [[-2, -4, -6, -1, -3]], [[10, 15]], [[11, 20]], [[2, 7, 11]], [[15, 20, 3]]]", "input_output_examples": "[[[[1, 3, 5, 7, 4, 1, 6, 8]]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the absolute difference between the first even number and the first odd number in a given list.\n\n    - The function searches for the first even number and the first odd number independently across the entire list, without requiring sequential discovery.\n    - If the list does not contain at least one even number and one odd number, the function will raise a `StopIteration` exception.\n    - If the list is empty, the function will raise a `StopIteration` exception.\n    - The input list is not guaranteed to contain both even and odd numbers, and the function will raise `StopIteration` if either is missing.\n\n    Example:\n    assert diff_even_odd([1,3,5,7,4,1,6,8]) == 3\n    \"\"\"", "entry_point": "diff_even_odd", "cluster_list": [{"programs_str": ["from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    try:\n        first_even = next((x for x in list1 if x % 2 == 0))\n        first_odd = next((x for x in list1 if x % 2 != 0))\n        return abs(first_even - first_odd)\n    except StopIteration:\n        raise StopIteration('The list must contain at least one even and one odd number.')", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((num for num in list1 if num % 2 == 0), None)\n    odd = next((num for num in list1 if num % 2 != 0), None)\n    if even is None or odd is None:\n        raise StopIteration('List does not contain both even and odd numbers')\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is None or odd is None:\n        raise StopIteration('List must contain at least one even and one odd number.')\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    try:\n        first_even = next((x for x in list1 if x % 2 == 0))\n        first_odd = next((x for x in list1 if x % 2 != 0))\n        return abs(first_even - first_odd)\n    except StopIteration:\n        raise StopIteration('The list does not contain both even and odd numbers.')", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is None or odd is None:\n        raise StopIteration\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even_gen = (x for x in list1 if x % 2 == 0)\n    odd_gen = (x for x in list1 if x % 2 != 0)\n    try:\n        first_even = next(even_gen)\n        first_odd = next(odd_gen)\n    except StopIteration:\n        raise StopIteration('List does not contain both even and odd numbers')\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even_numbers = next((x for x in list1 if x % 2 == 0))\n    odd_numbers = next((x for x in list1 if x % 2 != 0))\n    return abs(even_numbers - odd_numbers)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is None or odd is None:\n        raise StopIteration('List must contain at least one even and one odd number.')\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is None or odd is None:\n        raise StopIteration('List does not contain both even and odd numbers')\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((num for num in list1 if num % 2 == 0), None)\n    odd = next((num for num in list1 if num % 2 != 0), None)\n    if even is None or odd is None:\n        raise StopIteration('The list must contain at least one even and one odd number.')\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is None or odd is None:\n        raise StopIteration('List must contain at least one even and one odd number.')\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even_numbers = (x for x in list1 if x % 2 == 0)\n    odd_numbers = (x for x in list1 if x % 2 != 0)\n    try:\n        first_even = next(even_numbers)\n        first_odd = next(odd_numbers)\n        return abs(first_even - first_odd)\n    except StopIteration:\n        raise StopIteration('List must contain at least one even and one odd number.')", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even_numbers = (x for x in list1 if x % 2 == 0)\n    odd_numbers = (x for x in list1 if x % 2 != 0)\n    try:\n        first_even = next(even_numbers)\n        first_odd = next(odd_numbers)\n    except StopIteration:\n        raise StopIteration('List must contain at least one even number and one odd number.')\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((num for num in list1 if num % 2 == 0))\n    odd = next((num for num in list1 if num % 2 != 0))\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even_gen = (x for x in list1 if x % 2 == 0)\n    odd_gen = (x for x in list1 if x % 2 != 0)\n    try:\n        first_even = next(even_gen)\n        first_odd = next(odd_gen)\n    except StopIteration:\n        raise StopIteration('The list must contain at least one even and one odd number.')\n    return abs(first_even - first_odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is None or odd is None:\n        raise StopIteration\n    return abs(even - odd)", "from typing import List\n\ndef diff_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0), None)\n    odd = next((x for x in list1 if x % 2 != 0), None)\n    if even is None or odd is None:\n        raise StopIteration('List must contain at least one even and one odd number.')\n    return abs(even - odd)"], "outputs": "[[3], [1], [3], ['StopIteration'], ['StopIteration'], ['StopIteration'], ['StopIteration'], [1], [1], [1], [5], [9], [5], [5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 5, 7, 4, 1, 6, 8]], [[2, 4, 6, 8, 1, 3, 5, 7]], [[1, 5, 7, 4]], [[2, 8, 6, 10]], [[3]], [[8]], [[]], [[0, 1]], [[1, 0]], [[-2, -4, -6, -1, -3]], [[10, 15]], [[11, 20]], [[2, 7, 11]], [[15, 20, 3]]]", "input_output_examples": "[[[[1, 3, 5, 7, 4, 1, 6, 8]]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.09999999999999998, "original_avg_pass_rate": 0.7605504587155963, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.7339449541284404, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/596", "original_requirement": "def tuple_size(tuple_list: tuple) -> int:\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def tuple_size(tuple_list: tuple) -> int:\n\"\"\"\nWrite a function to find the size in bytes of the given tuple.\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\"\"\"", "entry_point": "tuple_size", "cluster_list": [{"programs_str": ["import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)", "import sys\n\ndef tuple_size(tuple_list: tuple) -> int:\n    return sys.getsizeof(tuple_list)"], "outputs": "[[88], [40], [48], [64], [64], [64], [72], [56], [80]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[('A', 1, 'B', 2, 'C', 3)], [()], [(1,)], [('a', 'b', 'c')], [(1.5, 2.5, 3.5)], [(True, False, True)], [(1, [1, 2], {3: 'a'}, (4,))], [(None, None)], [(1, 'string', 3.14, True, None)]]", "input_output_examples": "[[[('A', 1, 'B', 2, 'C', 3)]], [[88]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/597", "original_requirement": "from typing import List\n\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\"\"\"\nWrite a function to find kth element from the given two sorted arrays.\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\n\"\"\"", "entry_point": "find_kth", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_util(arr1, arr2, m, n, k):\n        if m > n:\n            return kth_util(arr2, arr1, n, m, k)\n        if m == 0:\n            return arr2[k - 1]\n        if k == 1:\n            return min(arr1[0], arr2[0])\n        i = min(m, k // 2)\n        j = min(n, k // 2)\n        if arr1[i - 1] > arr2[j - 1]:\n            return kth_util(arr1, arr2[j:], m, n - j, k - j)\n        else:\n            return kth_util(arr1[i:], arr2, m - i, n, k - i)\n    return kth_util(arr1, arr2, len(arr1), len(arr2), k)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth(A, B, k):\n        if not A:\n            return B[k]\n        if not B:\n            return A[k]\n        midA, midB = (len(A) // 2, len(B) // 2)\n        if midA + midB < k:\n            if A[midA] > B[midB]:\n                return kth(A, B[midB + 1:], k - midB - 1)\n            else:\n                return kth(A[midA + 1:], B, k - midA - 1)\n        elif A[midA] > B[midB]:\n            return kth(A[:midA], B, k)\n        else:\n            return kth(A, B[:midB], k)\n    return kth(arr1, arr2, k - 1)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_util(a, b, k):\n        if not a:\n            return b[k]\n        if not b:\n            return a[k]\n        mid_a, mid_b = (len(a) // 2, len(b) // 2)\n        mid_val_a, mid_val_b = (a[mid_a], b[mid_b])\n        if mid_a + mid_b < k:\n            if mid_val_a > mid_val_b:\n                return kth_util(a, b[mid_b + 1:], k - mid_b - 1)\n            else:\n                return kth_util(a[mid_a + 1:], b, k - mid_a - 1)\n        elif mid_val_a > mid_val_b:\n            return kth_util(a[:mid_a], b, k)\n        else:\n            return kth_util(a, b[:mid_b], k)\n    return kth_util(arr1, arr2, k - 1)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = min(len2, k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_util(a, start_a, b, start_b, k):\n        if start_a >= len(a):\n            return b[start_b + k - 1]\n        if start_b >= len(b):\n            return a[start_a + k - 1]\n        if k == 1:\n            return min(a[start_a], b[start_b])\n        mid_a = float('inf') if start_a + k // 2 - 1 >= len(a) else a[start_a + k // 2 - 1]\n        mid_b = float('inf') if start_b + k // 2 - 1 >= len(b) else b[start_b + k // 2 - 1]\n        if mid_a < mid_b:\n            return kth_util(a, start_a + k // 2, b, start_b, k - k // 2)\n        else:\n            return kth_util(a, start_a, b, start_b + k // 2, k - k // 2)\n    return kth_util(arr1, 0, arr2, 0, k)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = min(len2, k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_element(a, b, k):\n        if not a:\n            return b[k]\n        if not b:\n            return a[k]\n        ia, ib = (len(a) // 2, len(b) // 2)\n        ma, mb = (a[ia], b[ib])\n        if ia + ib < k:\n            if ma > mb:\n                return kth_element(a, b[ib + 1:], k - ib - 1)\n            else:\n                return kth_element(a[ia + 1:], b, k - ia - 1)\n        elif ma > mb:\n            return kth_element(a[:ia], b, k)\n        else:\n            return kth_element(a, b[:ib], k)\n    return kth_element(arr1, arr2, k - 1)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    len1, len2 = (len(arr1), len(arr2))\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k - 1]\n    if k == 1:\n        return min(arr1[0], arr2[0])\n    i = min(len1, k // 2)\n    j = min(len2, k // 2)\n    if arr1[i - 1] > arr2[j - 1]:\n        return find_kth(arr1, arr2[j:], k - j)\n    else:\n        return find_kth(arr1[i:], arr2, k - i)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_smallest(a, b, k):\n        if not a:\n            return b[k]\n        if not b:\n            return a[k]\n        mid_a, mid_b = (len(a) // 2, len(b) // 2)\n        if mid_a + mid_b < k:\n            if a[mid_a] > b[mid_b]:\n                return kth_smallest(a, b[mid_b + 1:], k - mid_b - 1)\n            else:\n                return kth_smallest(a[mid_a + 1:], b, k - mid_a - 1)\n        elif a[mid_a] > b[mid_b]:\n            return kth_smallest(a[:mid_a], b, k)\n        else:\n            return kth_smallest(a, b[:mid_b], k)\n    return kth_smallest(arr1, arr2, k - 1)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_util(a, b, k):\n        if not a:\n            return b[k]\n        if not b:\n            return a[k]\n        mid_a, mid_b = (len(a) // 2, len(b) // 2)\n        if mid_a + mid_b < k:\n            if a[mid_a] > b[mid_b]:\n                return kth_util(a, b[mid_b + 1:], k - mid_b - 1)\n            else:\n                return kth_util(a[mid_a + 1:], b, k - mid_a - 1)\n        elif a[mid_a] > b[mid_b]:\n            return kth_util(a[:mid_a], b, k)\n        else:\n            return kth_util(a, b[:mid_b], k)\n    return kth_util(arr1, arr2, k - 1)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    index1, index2 = (0, 0)\n    len1, len2 = (len(arr1), len(arr2))\n    while True:\n        if index1 == len1:\n            return arr2[index2 + k - 1]\n        if index2 == len2:\n            return arr1[index1 + k - 1]\n        if k == 1:\n            return min(arr1[index1], arr2[index2])\n        half_k = k // 2\n        new_index1 = min(index1 + half_k, len1) - 1\n        new_index2 = min(index2 + half_k, len2) - 1\n        if arr1[new_index1] <= arr2[new_index2]:\n            k -= new_index1 - index1 + 1\n            index1 = new_index1 + 1\n        else:\n            k -= new_index2 - index2 + 1\n            index2 = new_index2 + 1", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth(arr1, start1, end1, arr2, start2, end2, k):\n        if start1 > end1:\n            return arr2[start2 + k - 1]\n        if start2 > end2:\n            return arr1[start1 + k - 1]\n        mid1 = (end1 - start1) // 2\n        mid2 = (end2 - start2) // 2\n        if mid1 + mid2 < k - 1:\n            if arr1[start1 + mid1] > arr2[start2 + mid2]:\n                return kth(arr1, start1, end1, arr2, start2 + mid2 + 1, end2, k - mid2 - 1)\n            else:\n                return kth(arr1, start1 + mid1 + 1, end1, arr2, start2, end2, k - mid1 - 1)\n        elif arr1[start1 + mid1] > arr2[start2 + mid2]:\n            return kth(arr1, start1, start1 + mid1 - 1, arr2, start2, end2, k)\n        else:\n            return kth(arr1, start1, end1, arr2, start2, start2 + mid2 - 1, k)\n    return kth(arr1, 0, len(arr1) - 1, arr2, 0, len(arr2) - 1, k)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n    idx1, idx2 = (0, 0)\n    while True:\n        if idx1 == len(arr1):\n            return arr2[idx2 + k - 1]\n        if idx2 == len(arr2):\n            return arr1[idx1 + k - 1]\n        if k == 1:\n            return min(arr1[idx1], arr2[idx2])\n        mid1 = min(idx1 + k // 2 - 1, len(arr1) - 1)\n        mid2 = min(idx2 + k // 2 - 1, len(arr2) - 1)\n        if arr1[mid1] <= arr2[mid2]:\n            k -= mid1 - idx1 + 1\n            idx1 = mid1 + 1\n        else:\n            k -= mid2 - idx2 + 1\n            idx2 = mid2 + 1", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_element(a, b, k):\n        l, r = (0, 0)\n        while True:\n            if l == len(a):\n                return b[r + k - 1]\n            if r == len(b):\n                return a[l + k - 1]\n            if k == 1:\n                return min(a[l], b[r])\n            new_l = min(l + k // 2 - 1, len(a) - 1)\n            new_r = min(r + k // 2 - 1, len(b) - 1)\n            if a[new_l] <= b[new_r]:\n                k -= new_l - l + 1\n                l = new_l + 1\n            else:\n                k -= new_r - r + 1\n                r = new_r + 1\n    return kth_element(arr1, arr2, k)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_util(a: List[int], b: List[int], k: int) -> int:\n        if len(a) > len(b):\n            return kth_util(b, a, k)\n        if not a:\n            return b[k - 1]\n        if k == 1:\n            return min(a[0], b[0])\n        i = min(len(a), k // 2)\n        j = min(len(b), k // 2)\n        if a[i - 1] > b[j - 1]:\n            return kth_util(a, b[j:], k - j)\n        else:\n            return kth_util(a[i:], b, k - i)\n    return kth_util(arr1, arr2, k)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_util(a, b, k):\n        if not a:\n            return b[k]\n        if not b:\n            return a[k]\n        mid_a, mid_b = (len(a) // 2, len(b) // 2)\n        mid_a_val, mid_b_val = (a[mid_a], b[mid_b])\n        if mid_a + mid_b < k:\n            if mid_a_val > mid_b_val:\n                return kth_util(a, b[mid_b + 1:], k - mid_b - 1)\n            else:\n                return kth_util(a[mid_a + 1:], b, k - mid_a - 1)\n        elif mid_a_val > mid_b_val:\n            return kth_util(a[:mid_a], b, k)\n        else:\n            return kth_util(a, b[:mid_b], k)\n    return kth_util(arr1, arr2, k - 1)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_util(a: List[int], b: List[int], k: int) -> int:\n        if not a:\n            return b[k - 1]\n        if not b:\n            return a[k - 1]\n        mid_a, mid_b = (len(a) // 2, len(b) // 2)\n        mid_val_a, mid_val_b = (a[mid_a], b[mid_b])\n        if mid_a + mid_b < k - 1:\n            if mid_val_a > mid_val_b:\n                return kth_util(a, b[mid_b + 1:], k - mid_b - 1)\n            else:\n                return kth_util(a[mid_a + 1:], b, k - mid_a - 1)\n        elif mid_val_a > mid_val_b:\n            return kth_util(a[:mid_a], b, k)\n        else:\n            return kth_util(a, b[:mid_b], k)\n    return kth_util(arr1, arr2, k)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_smallest(a, b, k):\n        if not a:\n            return b[k]\n        if not b:\n            return a[k]\n        i, j = (len(a) // 2, len(b) // 2)\n        if i + j < k:\n            if a[i] > b[j]:\n                return kth_smallest(a, b[j + 1:], k - j - 1)\n            else:\n                return kth_smallest(a[i + 1:], b, k - i - 1)\n        elif a[i] > b[j]:\n            return kth_smallest(a[:i], b, k)\n        else:\n            return kth_smallest(a, b[:j], k)\n    return kth_smallest(arr1, arr2, k - 1)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def kth_smallest(a: List[int], b: List[int], k: int) -> int:\n        if not a:\n            return b[k]\n        if not b:\n            return a[k]\n        mid_a, mid_b = (len(a) // 2, len(b) // 2)\n        mid_a_val, mid_b_val = (a[mid_a], b[mid_b])\n        if mid_a + mid_b < k:\n            if mid_a_val > mid_b_val:\n                return kth_smallest(a, b[mid_b + 1:], k - mid_b - 1)\n            else:\n                return kth_smallest(a[mid_a + 1:], b, k - mid_a - 1)\n        elif mid_a_val > mid_b_val:\n            return kth_smallest(a[:mid_a], b, k)\n        else:\n            return kth_smallest(a, b[:mid_b], k)\n    return kth_smallest(arr1, arr2, k - 1)", "from typing import List\n\ndef find_kth(arr1: List[int], arr2: List[int], k: int) -> int:\n\n    def get_kth_element(arr1, arr2, k):\n        index1, index2 = (0, 0)\n        while True:\n            if index1 == len(arr1):\n                return arr2[index2 + k - 1]\n            if index2 == len(arr2):\n                return arr1[index1 + k - 1]\n            if k == 1:\n                return min(arr1[index1], arr2[index2])\n            new_index1 = min(index1 + k // 2 - 1, len(arr1) - 1)\n            new_index2 = min(index2 + k // 2 - 1, len(arr2) - 1)\n            pivot1, pivot2 = (arr1[new_index1], arr2[new_index2])\n            if pivot1 <= pivot2:\n                k -= new_index1 - index1 + 1\n                index1 = new_index1 + 1\n            else:\n                k -= new_index2 - index2 + 1\n                index2 = new_index2 + 1\n    return get_kth_element(arr1, arr2, k)"], "outputs": "[[6], [4], [1], [2], [1], ['IndexError'], [1], [8], [3], ['IndexError'], [1], [6], [10]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5], [[1, 2, 3], [4, 5, 6], 4], [[1, 1, 1], [1, 1, 1], 6], [[], [1, 2, 3], 2], [[1, 2, 3], [], 1], [[], [], 1], [[1, 3, 8], [2, 5], 1], [[1, 3, 8], [2, 5], 5], [[1, 2], [3, 4], 3], [[1, 4], [2, 5], 6], [[1], [1], 2], [[1, 3, 5], [2, 4, 6], 6], [[5, 10, 15], [2, 7, 12], 4]]", "input_output_examples": "[[[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5]], [[6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.41682242990654206, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/598", "original_requirement": "def armstrong_number(number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def armstrong_number(number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is armstrong or not.\nassert armstrong_number(153)==True\n\"\"\"", "entry_point": "armstrong_number", "cluster_list": [{"programs_str": ["def armstrong_number(number: int) -> bool:\n    digits = [int(digit) for digit in str(number)]\n    return number == sum((digit ** len(digits) for digit in digits))", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    num_len = len(num_str)\n    return sum((int(digit) ** num_len for digit in num_str)) == number", "def armstrong_number(number: int) -> bool:\n    digits = list(map(int, str(number)))\n    return sum((d ** len(digits) for d in digits)) == number", "def armstrong_number(number: int) -> bool:\n    digit_count = len(str(number))\n    return number == sum((int(digit) ** digit_count for digit in str(number)))", "def armstrong_number(number: int) -> bool:\n    digits = [int(d) for d in str(number)]\n    power = len(digits)\n    return sum((d ** power for d in digits)) == number", "def armstrong_number(number: int) -> bool:\n    temp = number\n    num_digits = len(str(number))\n    sum_of_powers = sum((int(digit) ** num_digits for digit in str(number)))\n    return temp == sum_of_powers", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    length = len(num_str)\n    armstrong_sum = sum((int(digit) ** length for digit in num_str))\n    return armstrong_sum == number", "def armstrong_number(number: int) -> bool:\n    digits = [int(digit) for digit in str(number)]\n    return number == sum((digit ** len(digits) for digit in digits))", "def armstrong_number(number: int) -> bool:\n    digit_count = len(str(number))\n    total = sum((int(digit) ** digit_count for digit in str(number)))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    num_digits = len(num_str)\n    total = sum((int(digit) ** num_digits for digit in num_str))\n    return total == number", "def armstrong_number(number: int) -> bool:\n    digits = list(map(int, str(number)))\n    power = len(digits)\n    return number == sum((digit ** power for digit in digits))", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    num_digits = len(num_str)\n    return number == sum((int(digit) ** num_digits for digit in num_str))", "def armstrong_number(number: int) -> bool:\n    digits = list(map(int, str(number)))\n    power = len(digits)\n    armstrong_sum = sum((digit ** power for digit in digits))\n    return armstrong_sum == number", "def armstrong_number(number: int) -> bool:\n    digits = list(map(int, str(number)))\n    return number == sum((d ** len(digits) for d in digits))", "def armstrong_number(number: int) -> bool:\n    digits = [int(d) for d in str(number)]\n    return number == sum((d ** len(digits) for d in digits))", "def armstrong_number(number: int) -> bool:\n    digits = list(map(int, str(number)))\n    power = len(digits)\n    return sum((d ** power for d in digits)) == number", "def armstrong_number(number: int) -> bool:\n    digits = [int(digit) for digit in str(number)]\n    return number == sum((digit ** len(digits) for digit in digits))", "def armstrong_number(number: int) -> bool:\n    digits = list(map(int, str(number)))\n    power = len(digits)\n    return sum((d ** power for d in digits)) == number", "def armstrong_number(number: int) -> bool:\n    digits = list(map(int, str(number)))\n    power = len(digits)\n    return sum((d ** power for d in digits)) == number", "def armstrong_number(number: int) -> bool:\n    num_str = str(number)\n    power = len(num_str)\n    armstrong_sum = sum((int(digit) ** power for digit in num_str))\n    return armstrong_sum == number"], "outputs": "[[True], [True], [False], [True], [True], [True], [True], [False], [False], [True], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[153], [9474], [9475], [1], [0], [370], [407], [10], [100], [8208], [-153]]", "input_output_examples": "[[[153]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/599", "original_requirement": "from typing import Tuple\n\n\ndef sum_average(number: int) -> Tuple[int, float]:\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"", "repaired_requirement": "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n    Write a function to find the sum and average of the first n natural numbers.\n\n    - The input `number` represents the count of the first natural numbers to consider.\n    - If `number > 0`, the function computes the sum of the first `number` natural numbers (1 through `number`) and their average.\n    - If `number = 0`, the function explicitly raises a `ZeroDivisionError` with the message 'Cannot compute average for an empty set.' This behavior is mandatory and ensures that the average cannot be computed for an empty set.\n    - If `number < 0`, the function returns `(0, -0.0)` to indicate that the sum and average over an empty range are `0` and `-0.0`, respectively. This behavior is explicitly defined and does not raise an exception.\n    - The function assumes that the input `number` is always an integer and does not validate the input type.\n\n    Example:\n    assert sum_average(10) == (55, 5.5)\n    \"\"\"", "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef sum_average(number: int) -> Tuple[int, float]:\n\"\"\"\nWrite a function to find sum and average of first n natural numbers.\nassert sum_average(10)==(55, 5.5)\n\"\"\"", "entry_point": "sum_average", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    avg = total_sum / number\n    return (total_sum, avg)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    avg = total_sum / number\n    return (total_sum, avg)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    n_sum = sum(range(1, number + 1))\n    n_average = n_sum / number\n    return (n_sum, n_average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = sum(range(1, number + 1))\n    average = total_sum / number\n    return (total_sum, average)"], "outputs": "[[(1, 1.0)], ['ZeroDivisionError'], [(55, 5.5)], [(5050, 50.5)], [(0, -0.0)]]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number if number > 0 else 0\n    return (total_sum, average)"], "outputs": "[[(1, 1.0)], [(0, 0)], [(55, 5.5)], [(5050, 50.5)], [(10, 0)]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    sum_n = number * (number + 1) // 2\n    average_n = sum_n / number\n    return (sum_n, average_n)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    n_sum = number * (number + 1) // 2\n    n_avg = n_sum / number\n    return (n_sum, n_avg)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return (total_sum, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    total_sum = number * (number + 1) // 2\n    average = total_sum / number\n    return (total_sum, average)"], "outputs": "[[(1, 1.0)], ['ZeroDivisionError'], [(55, 5.5)], [(5050, 50.5)], [(10, -2.0)]]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7199877141320895, "llm_generated_inputs": "[[1], [0], [10], [100], [-5]]", "input_output_examples": "[[[10]], [[(55, 5.5)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    \"\"\"\n    Write a function to find the sum and average of the first n natural numbers.\n\n    - The input `number` represents the count of the first natural numbers to consider.\n    - If `number > 0`, the function computes the sum of the first `number` natural numbers (1 through `number`) and their average.\n    - If `number = 0`, the function explicitly raises a `ZeroDivisionError` with the message 'Cannot compute average for an empty set.' This behavior is mandatory and ensures that the average cannot be computed for an empty set.\n    - If `number < 0`, the function returns `(0, -0.0)` to indicate that the sum and average over an empty range are `0` and `-0.0`, respectively. This behavior is explicitly defined and does not raise an exception.\n    - The function assumes that the input `number` is always an integer and does not validate the input type.\n\n    Example:\n    assert sum_average(10) == (55, 5.5)\n    \"\"\"", "entry_point": "sum_average", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total = sum(range(1, number + 1))\n        average = total / number\n        return (total, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    elif number < 0:\n        return (0, -0.0)\n    else:\n        sum_of_numbers = sum(range(1, number + 1))\n        average = sum_of_numbers / number\n        return (sum_of_numbers, average)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)", "from typing import Tuple\n\ndef sum_average(number: int) -> Tuple[int, float]:\n    if number > 0:\n        total_sum = sum(range(1, number + 1))\n        average = total_sum / number\n        return (total_sum, average)\n    elif number == 0:\n        raise ZeroDivisionError('Cannot compute average for an empty set.')\n    else:\n        return (0, -0.0)"], "outputs": "[[(1, 1.0)], ['ZeroDivisionError'], [(55, 5.5)], [(5050, 50.5)], [(0, -0.0)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [0], [10], [100], [-5]]", "input_output_examples": "[[[10]], [[(55, 5.5)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/600", "original_requirement": "def is_Even(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_Even(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the given number is even or not.\nassert is_Even(1) == False\n\"\"\"", "entry_point": "is_Even", "cluster_list": [{"programs_str": ["def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "from typing import Optional\n\ndef is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0", "def is_Even(n: int) -> bool:\n    return n % 2 == 0"], "outputs": "[[True], [False], [True], [True], [False], [False], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [-2], [7], [-7], [100], [-100], [99999], [-99999]]", "input_output_examples": "[[[1]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/602", "original_requirement": "def first_repeated_char(str1: str) -> str:\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"", "repaired_requirement": "```python\ndef first_repeated_char(str1: str) -> str:\n    \"\"\"\n    Write a Python function to find the first repeated character in a given string.\n    \n    The function should analyze the input string `str1` and determine the first character \n    that appears more than once when traversing the string from left to right. If a repeated \n    character is found, the function should return it. The function must be case-sensitive, \n    meaning that 'a' and 'A' are treated as different characters. If no repeated character \n    is found, the function should return an empty string (`\"\"`).\n    \n    The function is expected to handle all valid string inputs, including:\n      - Strings with alphabetic characters, digits, whitespaces, and special characters.\n      - Edge cases such as an empty string, which should return an empty string (`\"\"`).\n\n    Examples:\n    assert first_repeated_char(\"abcabc\") == \"a\"  # 'a' is the first repeated character\n    \"\"\"\n```", "original_clusters": {"requirement": "def first_repeated_char(str1: str) -> str:\n\"\"\"\nWrite a python function to find the first repeated character in a given string.\nassert first_repeated_char(\"abcabc\") == \"a\"\n\"\"\"", "entry_point": "first_repeated_char", "cluster_list": [{"programs_str": ["def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen_chars = set()\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    char_seen = set()\n    for char in str1:\n        if char in char_seen:\n            return char\n        char_seen.add(char)\n    return ''"], "outputs": "[['a'], ['a'], [''], ['c'], [''], ['1'], ['!'], [''], [''], [''], ['a'], ['a'], ['a'], [' '], ['t']]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None", "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    seen_chars = set()\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return None", "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None", "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None", "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None", "from typing import Optional\n\ndef first_repeated_char(str1: str) -> Optional[str]:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None"], "outputs": "[['a'], ['a'], [None], ['c'], [None], ['1'], ['!'], [None], [None], [None], ['a'], ['a'], ['a'], [' '], ['t']]", "probability": 0.35, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9340680553754911, "llm_generated_inputs": "[['abcabc'], ['aabbcc'], ['abcdef'], ['racecar'], ['AaBbCc'], ['112233'], ['!@#$%!@'], [''], ['a'], ['ab'], ['abab'], ['abcdabc'], ['aaaa'], ['  '], ['test input']]", "input_output_examples": "[[['abcabc']], [['a']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef first_repeated_char(str1: str) -> str:\n    \"\"\"\n    Write a Python function to find the first repeated character in a given string.\n    \n    The function should analyze the input string `str1` and determine the first character \n    that appears more than once when traversing the string from left to right. If a repeated \n    character is found, the function should return it. The function must be case-sensitive, \n    meaning that 'a' and 'A' are treated as different characters. If no repeated character \n    is found, the function should return an empty string (`\"\"`).\n    \n    The function is expected to handle all valid string inputs, including:\n      - Strings with alphabetic characters, digits, whitespaces, and special characters.\n      - Edge cases such as an empty string, which should return an empty string (`\"\"`).\n\n    Examples:\n    assert first_repeated_char(\"abcabc\") == \"a\"  # 'a' is the first repeated character\n    \"\"\"\n```", "entry_point": "first_repeated_char", "cluster_list": [{"programs_str": ["def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen_chars = set()\n    for char in str1:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen = set()\n    for char in str1:\n        if char in seen:\n            return char\n        seen.add(char)\n    return ''", "def first_repeated_char(str1: str) -> str:\n    seen_characters = set()\n    for char in str1:\n        if char in seen_characters:\n            return char\n        seen_characters.add(char)\n    return ''"], "outputs": "[['a'], ['a'], [''], ['c'], [''], ['1'], ['!'], [''], [''], [''], ['a'], ['a'], ['a'], [' '], ['t']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcabc'], ['aabbcc'], ['abcdef'], ['racecar'], ['AaBbCc'], ['112233'], ['!@#$%!@'], [''], ['a'], ['ab'], ['abab'], ['abcdabc'], ['aaaa'], ['  '], ['test input']]", "input_output_examples": "[[['abcabc']], [['a']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.7, "original_avg_pass_rate": 0.9833333333333334, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9444444444444444, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/603", "original_requirement": "from typing import List\n\n\ndef get_ludic(n: int) -> List[int]:\n\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    \"\"\"\n    Write a function to generate all ludic numbers smaller than or equal to a given integer `n`.\n    \n    Ludic numbers are a sequence of integers derived through an iterative filtering process:\n    1. Start with a list of integers from 1 to `n`.\n    2. Begin with the first number in the list (the number 1) and repeatedly apply the following steps:\n       - Select the current number from the list and add it to the list of ludic numbers.\n       - Remove all remaining numbers in the list that are divisible by the current number.\n    3. Continue the filtering process with the next number in the updated list, repeating until no further filtering can be applied (i.e., the list is empty).\n    \n    The function should return the list of ludic numbers up to `n`.\n\n    Constraints:\n    - If `n < 1`, return an empty list.\n    - The input `n` is guaranteed to be a non-negative integer.\n    \n    Example:\n    assert get_ludic(10) == [1, 2, 3, 5, 7]\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef get_ludic(n: int) -> List[int]:\n\"\"\"\nWrite a function to get all lucid numbers smaller than or equal to a given integer.\nassert get_ludic(10) == [1, 2, 3, 5, 7]\n\"\"\"", "entry_point": "get_ludic", "cluster_list": [{"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    index = 0\n    while index < len(ludic_numbers):\n        step = ludic_numbers[index]\n        ludic_numbers = [ludic_numbers[i] for i in range(len(ludic_numbers)) if i % step != step - 1]\n        index += 1\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    index = 0\n    while index < len(ludic_numbers):\n        step = ludic_numbers[index]\n        ludic_numbers = [num for i, num in enumerate(ludic_numbers) if i % step != step - 1]\n        index += 1\n    return ludic_numbers"], "outputs": "[[[]], [[]], [[]], [[]], [[]], [[]], [[]], [[]], [[]]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = list(range(1, n + 1))\n    i = 0\n    while i < len(ludics):\n        step = ludics[i]\n        ludics = [num for idx, num in enumerate(ludics) if idx % step != 0 or idx == 0]\n        i += 1\n    return ludics", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    numbers = list(range(1, n + 1))\n    while numbers:\n        current = numbers.pop(0)\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = [i for i in range(1, n + 1)]\n    i = 0\n    while i < len(ludics):\n        step = ludics[i]\n        ludics = [num for j, num in enumerate(ludics) if j % step != 0 or j == 0]\n        i += 1\n    return ludics", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    i = 0\n    while i < len(ludic_numbers):\n        step = ludic_numbers[i]\n        ludic_numbers = [num for idx, num in enumerate(ludic_numbers) if idx % step != 0 or idx == 0]\n        i += 1\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = list(range(1, n + 1))\n    i = 0\n    while i < len(ludics):\n        step = ludics[i]\n        ludics = [num for idx, num in enumerate(ludics) if idx % step != 0 or idx == 0]\n        i += 1\n    return ludics", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = list(range(1, n + 1))\n    idx = 0\n    while idx < len(ludics):\n        step = ludics[idx]\n        ludics = [ludics[i] for i in range(len(ludics)) if i % step != 0 or i == 0]\n        idx += 1\n    return ludics", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = list(range(1, n + 1))\n    i = 0\n    while i < len(ludics):\n        step = ludics[i]\n        ludics = [ludics[j] for j in range(len(ludics)) if j % step != 0 or j == 0]\n        i += 1\n    return ludics", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = list(range(1, n + 1))\n    i = 0\n    while i < len(ludics):\n        step = ludics[i]\n        ludics = [num for j, num in enumerate(ludics) if j % step != 0 or j == 0]\n        i += 1\n    return ludics", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    i = 0\n    while i < len(ludic_numbers):\n        step = ludic_numbers[i]\n        ludic_numbers = [ludic_numbers[j] for j in range(len(ludic_numbers)) if (j + 1) % step != 0 or j == i]\n        i += 1\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    i = 0\n    while i < len(ludic_numbers):\n        current = ludic_numbers[i]\n        ludic_numbers = [num for j, num in enumerate(ludic_numbers) if j % current != 0 or j == 0]\n        i += 1\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = []\n    sequence = list(range(1, n + 1))\n    while sequence:\n        first = sequence.pop(0)\n        ludic_numbers.append(first)\n        sequence = [sequence[i] for i in range(len(sequence)) if (i + 1) % first != 0]\n    return ludic_numbers"], "outputs": "[[[1]], [[1]], [[1]], [[1]], [[1]], [[]], [[]], [[1]], [[1]]]", "probability": 0.55, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    i = 0\n    while i < len(ludic_numbers):\n        step = ludic_numbers[i]\n        if step > 1:\n            ludic_numbers = [ludic_numbers[idx] for idx in range(len(ludic_numbers)) if idx % step != 0 or idx == 0]\n        i += 1\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    i = 0\n    while i < len(ludic_numbers):\n        step = ludic_numbers[i]\n        if step > 1:\n            ludic_numbers = [x for j, x in enumerate(ludic_numbers) if j % step != 0 or j == 0]\n        i += 1\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    idx = 0\n    while idx < len(ludic_numbers):\n        step = ludic_numbers[idx]\n        if step > 1:\n            ludic_numbers = [ludic_numbers[i] for i in range(len(ludic_numbers)) if i % step != 0 or i == 0]\n        idx += 1\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludics = list(range(1, n + 1))\n    i = 0\n    while i < len(ludics):\n        step = ludics[i]\n        if step > 1:\n            ludics = [num for idx, num in enumerate(ludics) if idx % step != 0 or idx == 0]\n        i += 1\n    return ludics"], "outputs": "[[[1]], [[1, 2, 4, 6, 10]], [[1, 2, 4, 6, 10, 12]], [[1, 2, 4, 6, 10, 12, 18, 20, 22]], [[1, 2, 4, 6, 10, 12, 18, 20, 22, 26, 34, 36, 42, 44, 50, 52, 54, 58, 68, 70, 76, 84, 90, 98, 100]], [[]], [[]], [[1, 2]], [[1, 2]]]", "probability": 0.2, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 2, 4, 6, 10]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    idx = 0\n    while idx < len(ludic_numbers):\n        step = ludic_numbers[idx]\n        if step > 1:\n            ludic_numbers = [num for i, num in enumerate(ludic_numbers) if i % step != step - 1]\n        idx += 1\n    return ludic_numbers"], "outputs": "[[[1]], [[1, 3, 5, 7]], [[1, 3, 5, 7, 11, 13]], [[1, 3, 5, 7, 11, 13, 17, 21, 23, 25]], [[1, 3, 5, 7, 11, 13, 17, 21, 23, 25, 31, 35, 41, 43, 45, 47, 55, 57, 63, 65, 73, 75, 83, 87, 95, 97]], [[]], [[]], [[1]], [[1, 3]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 3, 5, 7]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    index = 0\n    while index < len(ludic_numbers):\n        step = ludic_numbers[index]\n        if step > 1:\n            ludic_numbers = [num for i, num in enumerate(ludic_numbers) if (i + 1) % step != 0 or num == step]\n        index += 1\n    return ludic_numbers"], "outputs": "[[[1]], [[1, 2, 3, 5]], [[1, 2, 3, 5, 11, 13]], [[1, 2, 3, 5, 11, 13, 17, 19, 25]], [[1, 2, 3, 5, 11, 13, 17, 19, 25, 29, 35, 41, 47, 49, 55, 59, 65, 71, 79, 85, 89, 91]], [[]], [[]], [[1, 2]], [[1, 2, 3]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1, 2, 3, 5]], [[1, 2, 3, 5, 7]]]]"}, {"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    ludic_numbers = list(range(1, n + 1))\n    index = 0\n    while index < len(ludic_numbers):\n        step = ludic_numbers[index]\n        if step > 1:\n            ludic_numbers = [ludic_numbers[i] for i in range(len(ludic_numbers)) if i % step != 0 or i == index]\n        index += 1\n    return ludic_numbers"], "outputs": "[[[1]], [[6, 8, 10]], [[6, 8, 10, 12]], [[12, 16, 18, 20, 22, 24]], [[42, 44, 48, 54, 56, 58, 60, 66, 68, 70, 72, 78, 82, 84, 88, 92, 94, 96]], [[]], [[]], [[2]], [[2]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[6, 8, 10]], [[1, 2, 3, 5, 7]]]]"}], "entropy": 0.7424636543475647, "llm_generated_inputs": "[[1], [10], [15], [25], [100], [0], [-5], [2], [3]]", "input_output_examples": "[[[10]], [[[1, 2, 3, 5, 7]]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    \"\"\"\n    Write a function to generate all ludic numbers smaller than or equal to a given integer `n`.\n    \n    Ludic numbers are a sequence of integers derived through an iterative filtering process:\n    1. Start with a list of integers from 1 to `n`.\n    2. Begin with the first number in the list (the number 1) and repeatedly apply the following steps:\n       - Select the current number from the list and add it to the list of ludic numbers.\n       - Remove all remaining numbers in the list that are divisible by the current number.\n    3. Continue the filtering process with the next number in the updated list, repeating until no further filtering can be applied (i.e., the list is empty).\n    \n    The function should return the list of ludic numbers up to `n`.\n\n    Constraints:\n    - If `n < 1`, return an empty list.\n    - The input `n` is guaranteed to be a non-negative integer.\n    \n    Example:\n    assert get_ludic(10) == [1, 2, 3, 5, 7]\n    \"\"\"\n```", "entry_point": "get_ludic", "cluster_list": [{"programs_str": ["from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers.pop(0)\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludics = []\n    while numbers:\n        current = numbers.pop(0)\n        ludics.append(current)\n        numbers = [num for idx, num in enumerate(numbers) if (idx + 1) % current != 0]\n    return ludics", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers[0]\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers[0]\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers.pop(0)\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers.pop(0)\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludics = []\n    while numbers:\n        current = numbers[0]\n        ludics.append(current)\n        numbers = [num for idx, num in enumerate(numbers) if (idx + 1) % current != 0]\n    return ludics", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers[0]\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers[0]\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if i % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers[0]\n        ludic_numbers.append(current)\n        numbers = [num for index, num in enumerate(numbers) if index % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    ludic_numbers = []\n    candidates = list(range(1, n + 1))\n    while candidates:\n        current = candidates.pop(0)\n        ludic_numbers.append(current)\n        candidates = [num for i, num in enumerate(candidates) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers[0]\n        ludic_numbers.append(current)\n        numbers = [x for i, x in enumerate(numbers) if i % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers[0]\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if i % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers[0]\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers[0]\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    ludics = []\n    numbers = list(range(1, n + 1))\n    while numbers:\n        current = numbers.pop(0)\n        ludics.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludics", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludic_numbers = []\n    while numbers:\n        current = numbers.pop(0)\n        ludic_numbers.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    ludic_numbers = []\n    candidates = list(range(1, n + 1))\n    while candidates:\n        current = candidates.pop(0)\n        ludic_numbers.append(current)\n        candidates = [num for i, num in enumerate(candidates, start=1) if i % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    ludic_numbers = []\n    candidates = list(range(1, n + 1))\n    while candidates:\n        current = candidates[0]\n        ludic_numbers.append(current)\n        candidates = [num for i, num in enumerate(candidates) if (i + 1) % current != 0]\n    return ludic_numbers", "from typing import List\n\ndef get_ludic(n: int) -> List[int]:\n    if n < 1:\n        return []\n    numbers = list(range(1, n + 1))\n    ludics = []\n    while numbers:\n        current = numbers[0]\n        ludics.append(current)\n        numbers = [num for i, num in enumerate(numbers) if (i + 1) % current != 0]\n    return ludics"], "outputs": "[[[1]], [[1]], [[1]], [[1]], [[1]], [[]], [[]], [[1]], [[1]]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[10], [[1]], [[1, 2, 3, 5, 7]]]]"}], "entropy": 0, "llm_generated_inputs": "[[1], [10], [15], [25], [100], [0], [-5], [2], [3]]", "input_output_examples": "[[[10]], [[[1, 2, 3, 5, 7]]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.010377358490566035, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.009433962264150941, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/604", "original_requirement": "def reverse_words(s: str) -> str:\n\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"", "repaired_requirement": "```python\ndef reverse_words(s: str) -> str:\n    \"\"\"\n    Write a function to reverse words in a given string. Words are defined as sequences of non-space characters \n    separated by one or more spaces. The function should normalize spacing by collapsing multiple consecutive spaces \n    into a single space and removing any leading or trailing spaces in the input. The output should contain words \n    in reverse order, separated by a single space.\n\n    Edge-case behavior:\n    - For an empty string input, the output should also be an empty string.\n    - For input strings containing only spaces, the output should be an empty string.\n    - For input strings with multiple consecutive spaces between words, the output should have single spaces between words.\n    - Leading and trailing spaces in the input should be ignored in the output.\n\n    Example:\n    assert reverse_words(\"python program\") == \"program python\"\n    \"\"\"\n```", "original_clusters": {"requirement": "def reverse_words(s: str) -> str:\n\"\"\"\nWrite a function to reverse words seperated by spaces in a given string.\nassert reverse_words(\"python program\")==(\"program python\")\n\"\"\"", "entry_point": "reverse_words", "cluster_list": [{"programs_str": ["def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])"], "outputs": "[['program python'], ['world hello'], ['c b a'], ['single'], ['words between spaces multiple'], ['trailing and leading'], ['emptystring'], [''], [''], ['word'], ['Word3 Word2 Word1']]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split(' ')))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split(' ')))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split(' ')))"], "outputs": "[['program python'], ['world hello'], ['c b a'], ['single'], ['words between spaces    multiple'], ['  trailing and leading  '], ['emptystring'], ['    '], [''], ['word'], ['Word3 Word2 Word1']]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6098403047164005, "llm_generated_inputs": "[['python program'], ['hello world'], ['a b c'], ['single'], ['multiple    spaces between words'], ['  leading and trailing  '], ['emptystring'], ['    '], [''], ['word'], ['Word1 Word2 Word3']]", "input_output_examples": "[[['python program']], [['program python']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef reverse_words(s: str) -> str:\n    \"\"\"\n    Write a function to reverse words in a given string. Words are defined as sequences of non-space characters \n    separated by one or more spaces. The function should normalize spacing by collapsing multiple consecutive spaces \n    into a single space and removing any leading or trailing spaces in the input. The output should contain words \n    in reverse order, separated by a single space.\n\n    Edge-case behavior:\n    - For an empty string input, the output should also be an empty string.\n    - For input strings containing only spaces, the output should be an empty string.\n    - For input strings with multiple consecutive spaces between words, the output should have single spaces between words.\n    - Leading and trailing spaces in the input should be ignored in the output.\n\n    Example:\n    assert reverse_words(\"python program\") == \"program python\"\n    \"\"\"\n```", "entry_point": "reverse_words", "cluster_list": [{"programs_str": ["def reverse_words(s: str) -> str:\n    words = s.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    words = s.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words", "def reverse_words(s: str) -> str:\n    words = s.split()\n    return ' '.join(reversed(words))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    words = s.split()\n    reversed_words = reversed(words)\n    return ' '.join(reversed_words)", "def reverse_words(s: str) -> str:\n    words = s.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "def reverse_words(s: str) -> str:\n    words = s.split()\n    return ' '.join(reversed(words))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    return ' '.join(reversed(s.split()))", "def reverse_words(s: str) -> str:\n    words = s.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words"], "outputs": "[['program python'], ['world hello'], ['c b a'], ['single'], ['words between spaces multiple'], ['trailing and leading'], ['emptystring'], [''], [''], ['word'], ['Word3 Word2 Word1']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['python program'], ['hello world'], ['a b c'], ['single'], ['multiple    spaces between words'], ['  leading and trailing  '], ['emptystring'], ['    '], [''], ['word'], ['Word1 Word2 Word3']]", "input_output_examples": "[[['python program']], [['program python']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9508620689655173, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/605", "original_requirement": "def prime_num(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def prime_num(num: int) -> bool:\n\"\"\"\nWrite a function to check if the given integer is a prime number.\nassert prime_num(13)==True\n\"\"\"", "entry_point": "prime_num", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef prime_num(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, math.isqrt(num) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "from typing import Optional\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "from math import isqrt\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, isqrt(num) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "import math\n\ndef prime_num(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True", "def prime_num(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True"], "outputs": "[[True], [True], [False], [True], [False], [False], [False], [True], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2], [3], [4], [13], [0], [1], [-7], [17], [101], [200], [29], [997]]", "input_output_examples": "[[[13]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/606", "original_requirement": "def radian_degree(degree: float) -> float:\n\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def radian_degree(degree: float) -> float:\n\"\"\"\nWrite a function to convert degrees to radians.\nassert radian_degree(90)==1.5707963267948966\n\"\"\"", "entry_point": "radian_degree", "cluster_list": [{"programs_str": ["import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * math.pi / 180", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * (math.pi / 180)", "import math\n\ndef radian_degree(degree: float) -> float:\n    return degree * math.pi / 180", "import math\n\ndef radian_degree(degree: float) -> float:\n    return math.radians(degree)"], "outputs": "[[1.5707963267948966], [0.7853981633974483], [0.0], [3.141592653589793], [-1.5707963267948966], [6.283185307179586], [0.008726646259971648], [1745329.2345410371]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[90], [45], [0], [180], [-90], [360], [0.5], [99999999]]", "input_output_examples": "[[[90]], [[1.5707963267948966]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/607", "original_requirement": "from typing import Tuple\n\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n\"\"\"\nWrite a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\"\"\"", "entry_point": "find_literals", "cluster_list": [{"programs_str": ["import re\nfrom typing import Optional, Tuple\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "import re\nfrom typing import Optional, Tuple\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "import re\nfrom typing import Optional, Tuple\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "import re\nfrom typing import Optional, Tuple\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (text[start:end], start, end)\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "import re\nfrom typing import Tuple, Optional\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "import re\nfrom typing import Optional, Tuple\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "import re\nfrom typing import Optional, Tuple\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Optional, Tuple\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "import re\nfrom typing import Tuple, Optional\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Optional, Tuple\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (text[start:end], start, end)\n    return None", "import re\nfrom typing import Tuple, Optional\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Optional, Tuple\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (text[start:end], start, end)\n    return None", "import re\nfrom typing import Tuple, Optional\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(0), match.start(), match.end())\n    return None", "from typing import Tuple, Optional\nimport re\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (text[start:end], start, end)\n    return None", "import re\nfrom typing import Optional, Tuple\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None", "import re\nfrom typing import Optional, Tuple\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(pattern, text)\n    if match:\n        start, end = (match.start(), match.end())\n        return (match.group(), start, end)\n    else:\n        return None", "import re\nfrom typing import Tuple, Optional\n\ndef find_literals(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    match = re.search(re.escape(pattern), text)\n    if match:\n        return (match.group(), match.start(), match.end())\n    return None"], "outputs": "[[('fox', 16, 19)], [('quick', 4, 9)], [('dog', 40, 43)], [('jump', 20, 24)], [None], [None], [('fox', 0, 3)], [('f', 0, 1)], [('', 0, 0)], [('fox', 19, 22)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['The quick brown fox jumps over the lazy dog.', 'fox'], ['The quick brown fox jumps over the lazy dog.', 'quick'], ['The quick brown fox jumps over the lazy dog.', 'dog'], ['The quick brown fox jumps over the lazy dog.', 'jump'], ['The quick brown fox jumps over the lazy dog.', 'zebra'], ['', 'fox'], ['fox', 'fox'], ['fox', 'f'], ['fox', ''], ['FoX jumps over the fox.', 'fox']]", "input_output_examples": "[[['The quick brown fox jumps over the lazy dog.', 'fox']], [[('fox', 16, 19)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/608", "original_requirement": "def bell_Number(n: int) -> int:\n\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"", "repaired_requirement": "```python\ndef bell_Number(n: int) -> int:\n    \"\"\"\n    Write a Python function to compute the nth Bell number, which represents the number of ways to partition a set of n elements.\n    \n    Constraints:\n    - The input `n` must be a non-negative integer (n >= 0).\n    - If `n` is negative or not an integer, the function should raise a `ValueError` with an appropriate error message.\n    \n    Computation:\n    - The Bell numbers are computed using Bell's triangle:\n        - Start with `bell[0][0] = 1`.\n        - For each row `i` (1 to n), set `bell[i][0] = bell[i-1][i-1]`.\n        - For each column `j` (1 to i), compute `bell[i][j] = bell[i-1][j-1] + bell[i][j-1]`.\n    - The nth Bell number is the first element of the nth row, i.e., `bell[n][0]`.\n\n    Examples:\n    - assert bell_Number(2) == 2\n    - For `n = 0`, the output is `1` (base case).\n    - For invalid inputs (e.g., `n < 0` or non-integer types), the function raises a `ValueError`.\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [-1]\n    Expected Output: ['ValueError']\n    ### Test 2\n    Input: [-1]\n    Expected Output: ['ValueError']\n    \"\"\"\n```", "original_clusters": {"requirement": "def bell_Number(n: int) -> int:\n\"\"\"\nWrite a python function to find nth bell number.\nassert bell_Number(2) == 2\n\"\"\"", "entry_point": "bell_Number", "cluster_list": [{"programs_str": ["def bell_Number(n: int) -> int:\n    from math import factorial\n\n    def stirling_second_kind(n, k):\n        if n == k:\n            return 1\n        elif k == 0 or k > n:\n            return 0\n        else:\n            return k * stirling_second_kind(n - 1, k) + stirling_second_kind(n - 1, k - 1)\n    bell = 0\n    for k in range(n + 1):\n        bell += stirling_second_kind(n, k)\n    return bell"], "outputs": "[[1], [1], [2], [52], [115975], [0], [1382958545]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def bell_Number(n: int) -> int:\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n\n    def bell_triangle(n):\n        triangle = [[1]]\n        for i in range(1, n):\n            row = [triangle[i - 1][-1]]\n            for j in range(i):\n                row.append(row[j] + triangle[i - 1][j])\n            triangle.append(row)\n        return triangle\n    triangle = bell_triangle(n + 1)\n    return triangle[n - 1][-1]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]\n    return bell[n][0]", "import math\n\ndef bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from math import comb\n\ndef bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for __ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "import math\n\ndef bell_Number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for __ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from math import factorial\n\ndef bell_Number(n: int) -> int:\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    bell = [[0 for i in range(n + 1)] for j in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from typing import List\n\ndef bell_Number(n: int) -> int:\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]\n    return bell[n][0]"], "outputs": "[[1], [1], [2], [52], [115975], ['IndexError'], [1382958545]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import factorial\n\ndef bell_Number(n: int) -> int:\n    bell_triangle = [[1]]\n    for i in range(1, n + 1):\n        row = [bell_triangle[-1][-1]]\n        for j in range(1, i + 1):\n            row.append(row[-1] + bell_triangle[-1][j - 1])\n        bell_triangle.append(row)\n    return bell_triangle[-1][0]", "from math import factorial\n\ndef bell_Number(n: int) -> int:\n    bell_triangle = [[1]]\n    for i in range(1, n + 1):\n        row = [bell_triangle[i - 1][-1]]\n        for j in range(i):\n            row.append(row[-1] + (bell_triangle[i - 1][j] if j < len(bell_triangle[i - 1]) else 0))\n        bell_triangle.append(row)\n    return bell_triangle[-1][0]"], "outputs": "[[1], [1], [2], [52], [115975], [1], [1382958545]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import factorial\n\ndef bell_Number(n: int) -> int:\n\n    def stirling_second_kind(n, k):\n        return sum(((-1) ** (k - i) * factorial(k) // (factorial(i) * factorial(k - i)) * i ** n for i in range(k + 1)))\n    bell = 0\n    for k in range(n + 1):\n        bell += stirling_second_kind(n, k)\n    return bell"], "outputs": "[[1], [1], [3], [541], [102247563], [0], [230283190977853]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[2], [3], [2]]]"}], "entropy": 0.5109640474436812, "llm_generated_inputs": "[[0], [1], [2], [5], [10], [-1], [15]]", "input_output_examples": "[[[2]], [[2]]]", "weighted_test_consistency": 0.9500000000000001, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef bell_Number(n: int) -> int:\n    \"\"\"\n    Write a Python function to compute the nth Bell number, which represents the number of ways to partition a set of n elements.\n    \n    Constraints:\n    - The input `n` must be a non-negative integer (n >= 0).\n    - If `n` is negative or not an integer, the function should raise a `ValueError` with an appropriate error message.\n    \n    Computation:\n    - The Bell numbers are computed using Bell's triangle:\n        - Start with `bell[0][0] = 1`.\n        - For each row `i` (1 to n), set `bell[i][0] = bell[i-1][i-1]`.\n        - For each column `j` (1 to i), compute `bell[i][j] = bell[i-1][j-1] + bell[i][j-1]`.\n    - The nth Bell number is the first element of the nth row, i.e., `bell[n][0]`.\n\n    Examples:\n    - assert bell_Number(2) == 2\n    - For `n = 0`, the output is `1` (base case).\n    - For invalid inputs (e.g., `n < 0` or non-integer types), the function raises a `ValueError`.\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [-1]\n    Expected Output: ['ValueError']\n    ### Test 2\n    Input: [-1]\n    Expected Output: ['ValueError']\n    \"\"\"\n```", "entry_point": "bell_Number", "cluster_list": [{"programs_str": ["def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('The input must be a non-negative integer.')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    from typing import List\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer')\n    bell: List[List[int]] = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer')\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from typing import List\n\ndef bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell: List[List[int]] = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer')\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from typing import List\n\ndef bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "from typing import List\n\ndef bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    if n == 0:\n        return 1\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('The input must be a non-negative integer.')\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer')\n    if n == 0:\n        return 1\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]", "def bell_Number(n: int) -> int:\n    if not isinstance(n, int) or n < 0:\n        raise ValueError('Input must be a non-negative integer.')\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n    return bell[n][0]"], "outputs": "[[1], [1], [2], [52], [115975], ['ValueError'], [1382958545]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [5], [10], [-1], [15]]", "input_output_examples": "[[[2]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/610", "original_requirement": "from typing import List\n\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    \"\"\"\n    Write a Python function that takes a list of integers `list1` and an integer `k`, and returns a new list with the same elements, \n    but with the k'th element removed. The parameter `k` is interpreted using 1-based indexing, meaning `k=1` refers to the first element, \n    `k=2` refers to the second element, and so on. \n\n    Constraints:\n    - `k` must be a positive integer within the range `1 <= k <= len(list1)`. \n    - If `k` is out of bounds (e.g., `k <= 0` or `k > len(list1)`), the behavior is undefined.\n\n    Example:\n    assert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function which takes a list and returns a list with the same elements, but the k'th element removed.\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\n\"\"\"", "entry_point": "remove_kth_element", "cluster_list": [{"programs_str": ["from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]"], "outputs": "[[[1, 3, 4, 5]], [[10, 20, 30, 50]], [[1, 1, 3, 4, 4, 5, 1]], [[7, 8, 7, 8, 9]], [[5]], [[1, 2]], [[]], [[1, 3]], [[1, 3, 4, 5]]]", "probability": 0.55, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return [list1[i] for i in range(len(list1)) if i != k - 1]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return [element for idx, element in enumerate(list1) if idx != k - 1]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return [list1[i] for i in range(len(list1)) if i != k - 1]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return [element for index, element in enumerate(list1) if index != k - 1]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return [list1[i] for i in range(len(list1)) if i != k - 1]"], "outputs": "[[[1, 3, 4, 5]], [[10, 20, 30, 50]], [[1, 1, 3, 4, 4, 5, 1]], [[7, 8, 9]], [[5]], [[1, 2]], [[]], [[1, 2, 3]], [[1, 2, 3, 4, 5]]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k] + list1[k + 1:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k] + list1[k + 1:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k] + list1[k + 1:]"], "outputs": "[[[1, 2, 4, 5]], [[10, 20, 30, 40]], [[1, 1, 2, 4, 4, 5, 1]], [[8, 9]], [[]], [[1, 2, 3]], [[]], [[1, 2, 1, 2, 3]], [[1, 2, 4, 5]]]", "probability": 0.15, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[1, 1, 2, 4, 4, 5, 1]], [[1, 1, 3, 4, 4, 5, 1]]]]"}, {"programs_str": ["from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return [element for index, element in enumerate(list1) if index != k]"], "outputs": "[[[1, 2, 4, 5]], [[10, 20, 30, 40]], [[1, 1, 2, 4, 4, 5, 1]], [[8, 9]], [[]], [[1, 2, 3]], [[]], [[1, 2, 3]], [[1, 2, 3, 4, 5]]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3], [[1, 1, 2, 4, 4, 5, 1]], [[1, 1, 3, 4, 4, 5, 1]]]]"}], "entropy": 0.8005071529034175, "llm_generated_inputs": "[[[1, 2, 3, 4, 5], 2], [[10, 20, 30, 40, 50], 4], [[1, 1, 2, 3, 4, 4, 5, 1], 3], [[7, 8, 9], 0], [[5], 0], [[1, 2, 3], 3], [[], 0], [[1, 2, 3], -1], [[1, 2, 3, 4, 5], -3]]", "input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3]], [[[1, 1, 3, 4, 4, 5, 1]]]]", "weighted_test_consistency": 0.8, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    \"\"\"\n    Write a Python function that takes a list of integers `list1` and an integer `k`, and returns a new list with the same elements, \n    but with the k'th element removed. The parameter `k` is interpreted using 1-based indexing, meaning `k=1` refers to the first element, \n    `k=2` refers to the second element, and so on. \n\n    Constraints:\n    - `k` must be a positive integer within the range `1 <= k <= len(list1)`. \n    - If `k` is out of bounds (e.g., `k <= 0` or `k > len(list1)`), the behavior is undefined.\n\n    Example:\n    assert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]\n    \"\"\"\n```", "entry_point": "remove_kth_element", "cluster_list": [{"programs_str": ["from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]", "from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    return list1[:k - 1] + list1[k:]"], "outputs": "[[[1, 3, 4, 5]], [[10, 20, 30, 50]], [[1, 1, 3, 4, 4, 5, 1]], [[7, 8, 7, 8, 9]], [[5]], [[1, 2]], [[]], [[1, 3]], [[1, 3, 4, 5]]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef remove_kth_element(list1: List[int], k: int) -> List[int]:\n    if 1 <= k <= len(list1):\n        return list1[:k - 1] + list1[k:]\n    raise ValueError('k is out of bounds')"], "outputs": "[[[1, 3, 4, 5]], [[10, 20, 30, 50]], [[1, 1, 3, 4, 4, 5, 1]], ['ValueError'], ['ValueError'], [[1, 2]], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[1, 2, 3, 4, 5], 2], [[10, 20, 30, 40, 50], 4], [[1, 1, 2, 3, 4, 4, 5, 1], 3], [[7, 8, 9], 0], [[5], 0], [[1, 2, 3], 3], [[], 0], [[1, 2, 3], -1], [[1, 2, 3, 4, 5], -3]]", "input_output_examples": "[[[[1, 1, 2, 3, 4, 4, 5, 1], 3]], [[[1, 1, 3, 4, 4, 5, 1]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.7, "original_avg_pass_rate": 0.7638888888888888, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/611", "original_requirement": "from typing import List\n\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    \"\"\"\n    Write a function which, given a matrix represented as a list of lists, returns the maximum value \n    from the N'th column. The function assumes the input matrix is well-formed, meaning all rows \n    must have at least N+1 elements. If any row does not have enough elements to access the N'th \n    column, or if the matrix is empty, the function will raise an IndexError.\n\n    Parameters:\n    - test_list: A list of lists of integers representing the matrix.\n    - N: An integer representing the column index (0-based) to find the maximum value from.\n\n    Returns:\n    - The maximum value from the N'th column.\n\n    Behavior:\n    - If the matrix is empty (`test_list = []`), an IndexError is raised.\n    - If any row in the matrix does not have at least N+1 elements, an IndexError is raised.\n    - The function does not skip rows with insufficient columns; it strictly enforces well-formedness.\n\n    Example:\n    assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [[[3, 2, 1], [], [6, 5, 4]], 0]\n    Expected Output: ['IndexError']\n    ### Test 2\n    Input: [[[], [], [1, 2, 3]], 2]\n    Expected Output: ['IndexError']\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n\"\"\"\nWrite a function which given a matrix represented as a list of lists returns the max of the n'th column.\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\"\"\"", "entry_point": "max_of_nth", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list if N < len(row)))"], "outputs": "[[19], [9], [20], [11], [100], [400], [7], [6], [3], ['ValueError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    column_values = [row[N] for row in test_list]\n    return max(column_values)", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    return max((row[N] for row in test_list))"], "outputs": "[[19], [9], [20], [11], [100], [400], [7], ['IndexError'], ['IndexError'], ['ValueError']]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list or N >= len(test_list[0]):\n        raise ValueError('Invalid input: N is out of range for the given matrix.')\n    return max((row[N] for row in test_list))"], "outputs": "[[19], [9], [20], [11], [100], [400], [7], ['IndexError'], ['ValueError'], ['ValueError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.3589962496465303, "llm_generated_inputs": "[[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2], [[[3, 2, 1], [9, 8, 7], [6, 5, 4]], 0], [[[10, 20, 30], [5, 15, 25], [1, 2, 3]], 1], [[[7, 11, 17], [4, 10, 16]], 1], [[[100]], 0], [[[100, 200], [300, 400]], 1], [[[1, 2, 3], [4, 5, 6], [7]], 0], [[[3, 2, 1], [], [6, 5, 4]], 0], [[[], [], [1, 2, 3]], 2], [[], 0]]", "input_output_examples": "[[[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2]], [[19]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    \"\"\"\n    Write a function which, given a matrix represented as a list of lists, returns the maximum value \n    from the N'th column. The function assumes the input matrix is well-formed, meaning all rows \n    must have at least N+1 elements. If any row does not have enough elements to access the N'th \n    column, or if the matrix is empty, the function will raise an IndexError.\n\n    Parameters:\n    - test_list: A list of lists of integers representing the matrix.\n    - N: An integer representing the column index (0-based) to find the maximum value from.\n\n    Returns:\n    - The maximum value from the N'th column.\n\n    Behavior:\n    - If the matrix is empty (`test_list = []`), an IndexError is raised.\n    - If any row in the matrix does not have at least N+1 elements, an IndexError is raised.\n    - The function does not skip rows with insufficient columns; it strictly enforces well-formedness.\n\n    Example:\n    assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [[[3, 2, 1], [], [6, 5, 4]], 0]\n    Expected Output: ['IndexError']\n    ### Test 2\n    Input: [[[], [], [1, 2, 3]], 2]\n    Expected Output: ['IndexError']\n    \"\"\"\n```", "entry_point": "max_of_nth", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('The matrix is empty.')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError(f'A row in the matrix does not have enough columns to access index {N}.')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('Matrix is empty')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError('Row does not have enough columns')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('Matrix is empty.')\n    try:\n        return max((row[N] for row in test_list))\n    except IndexError:\n        raise IndexError('One or more rows have insufficient columns.')", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('The matrix is empty.')\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError(f'Row does not have column {N}.')\n        max_value = max(max_value, row[N])\n    return max_value", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('Matrix is empty.')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError('One or more rows lack sufficient elements.')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list or any((len(row) <= N for row in test_list)):\n        raise IndexError(\"Matrix is empty or one of the rows is not well-formed for the N'th column.\")\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list or any((len(row) <= N for row in test_list)):\n        raise IndexError('Matrix is either empty or has insufficient columns.')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('Matrix is empty.')\n    try:\n        max_value = max((row[N] for row in test_list))\n    except IndexError:\n        raise IndexError(\"One or more rows do not have enough columns to access the N'th element.\")\n    return max_value", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('The matrix is empty.')\n    try:\n        nth_column_values = [row[N] for row in test_list]\n    except IndexError:\n        raise IndexError('One or more rows do not contain enough elements.')\n    return max(nth_column_values)", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('Matrix is empty.')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError('Insufficient columns in matrix.')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('Matrix is empty.')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError('One or more rows do not have sufficient columns.')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list or any((len(row) <= N for row in test_list)):\n        raise IndexError('Invalid matrix or column index out of range.')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if len(test_list) == 0:\n        raise IndexError('Matrix is empty')\n    nth_values = []\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError('Row has insufficient columns')\n        nth_values.append(row[N])\n    return max(nth_values)", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('Matrix is empty.')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError('Row does not have enough columns.')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('Matrix is empty')\n    max_value = float('-inf')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError(f'Row has insufficient columns to access index {N}')\n        max_value = max(max_value, row[N])\n    return max_value", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('The matrix is empty.')\n    max_value = None\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError(f'A row does not have enough elements for column {N}.')\n        if max_value is None or row[N] > max_value:\n            max_value = row[N]\n    return max_value", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list or any((len(row) <= N for row in test_list)):\n        raise IndexError('Invalid matrix or column index.')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('The matrix is empty.')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError('All rows must have at least N+1 elements.')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('The matrix is empty.')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError('A row does not have enough elements.')\n    return max((row[N] for row in test_list))", "from typing import List\n\ndef max_of_nth(test_list: List[List[int]], N: int) -> int:\n    if not test_list:\n        raise IndexError('The matrix is empty.')\n    for row in test_list:\n        if len(row) <= N:\n            raise IndexError('One or more rows in the matrix do not have enough elements.')\n    return max((row[N] for row in test_list))"], "outputs": "[[19], [9], [20], [11], [100], [400], [7], ['IndexError'], ['IndexError'], ['IndexError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2], [[[3, 2, 1], [9, 8, 7], [6, 5, 4]], 0], [[[10, 20, 30], [5, 15, 25], [1, 2, 3]], 1], [[[7, 11, 17], [4, 10, 16]], 1], [[[100]], 0], [[[100, 200], [300, 400]], 1], [[[1, 2, 3], [4, 5, 6], [7]], 0], [[[3, 2, 1], [], [6, 5, 4]], 0], [[[], [], [1, 2, 3]], 2], [[], 0]]", "input_output_examples": "[[[[[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2]], [[19]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/612", "original_requirement": "from typing import List\n\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n\"\"\"\nWrite a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\n\"\"\"", "entry_point": "merge", "cluster_list": [{"programs_str": ["from typing import List, Union\n\ndef merge(lst: List[List[Union[int, str]]]) -> List[List[Union[int, str]]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]", "from typing import List, Union\n\ndef merge(lst: List[List[Union[int, str]]]) -> List[List[Union[int, str]]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]", "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    return [[pair[0] for pair in lst], [pair[1] for pair in lst]]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]", "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    first_elements = [pair[0] for pair in lst]\n    second_elements = [pair[1] for pair in lst]\n    return [first_elements, second_elements]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    return [[sublist[i] for sublist in lst] for i in range(2)]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]", "from typing import List\n\ndef merge(lst: List[List[int]]) -> List[List[int]]:\n    return [[sublist[0] for sublist in lst], [sublist[1] for sublist in lst]]", "from typing import List, Any\n\ndef merge(lst: List[List[Any]]) -> List[List[Any]]:\n    first_elements = [sublist[0] for sublist in lst]\n    second_elements = [sublist[1] for sublist in lst]\n    return [first_elements, second_elements]"], "outputs": "[[[[1, 3, 5], [2, 4, 6]]], [[[7], [8]]], [[[0, 0, 0], [0, 0, 0]]], [[[-1, -3], [-2, -4]]], [[[10, 30, 50, 70], [20, 40, 60, 80]]], ['IndexError'], [[[999], [1000]]], [[[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]], ['IndexError'], [[['x', 'a', 'm'], ['y', 'b', 'n']]], [[[1.5, 3.5, 5.5], [2.5, 4.5, 6.5]]], ['IndexError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 2], [3, 4], [5, 6]]], [[[7, 8]]], [[[0, 0], [0, 0], [0, 0]]], [[[-1, -2], [-3, -4]]], [[[10, 20], [30, 40], [50, 60], [70, 80]]], [[[]]], [[[999, 1000]]], [[[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]], [[[100], [200], [300]]], [[['x', 'y'], ['a', 'b'], ['m', 'n']]], [[[1.5, 2.5], [3.5, 4.5], [5.5, 6.5]]], [[[1]]]]", "input_output_examples": "[[[[['x', 'y'], ['a', 'b'], ['m', 'n']]]], [[[['x', 'a', 'm'], ['y', 'b', 'n']]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/614", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n\"\"\"\nWrite a function to find the cumulative sum of all the values that are present in the given tuple list.\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\n\"\"\"", "entry_point": "cummulative_sum", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(inner_tuple) for inner_tuple in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(t) for t in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(tup) for tup in test_list))", "from typing import List, Tuple\n\ndef cummulative_sum(test_list: List[Tuple[int]]) -> int:\n    return sum((sum(inner_tuple) for inner_tuple in test_list))"], "outputs": "[[30], [0], [0], [5], [21], [0], [-1], [60], [600], [15]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[(1, 3), (5, 6, 7), (2, 6)]], [[]], [[(0,)]], [[(5,)]], [[(1, 2, 3), (4, 5, 6)]], [[()]], [[(1, -3), (-5, 6, 0)]], [[(10, 20), (30,)]], [[(100, 200, 300)]], [[(1,), (2,), (3,), (4,), (5,)]]]", "input_output_examples": "[[[[(1, 3), (5, 6, 7), (2, 6)]]], [[30]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/615", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"", "repaired_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"", "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"", "entry_point": "average_tuple", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(inner_tuple) / len(inner_tuple) for inner_tuple in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(inner_tuple) / len(inner_tuple) for inner_tuple in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(inner_tuple) / len(inner_tuple) for inner_tuple in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(inner_tuple) / len(inner_tuple) for inner_tuple in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]"], "outputs": "[[[10.5, 44.0, 58.0, 2.5]], ['ZeroDivisionError'], [[5.0]], [[10.0, 25.0]], [[0.0, 100.0]], [[2.5, 5.5]], [[-20.0, 20.0]], [[0.19999999999999998, 0.5]], [[3.0, 8.0]], ['TypeError']]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))], [[10.5, 44.0, 58.0, 2.5]], [[30.5, 34.25, 27.0, 23.25]]]]"}], "entropy": 0, "llm_generated_inputs": "[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))], [((),)], [((5,),)], [((5, 10, 15), (20, 25, 30))], [((0, 0, 0), (100, 100, 100))], [((1.5, 2.5, 3.5), (4.5, 5.5, 6.5))], [((-10, -20, -30), (10, 20, 30))], [((0.1, 0.2, 0.3), (0.4, 0.5, 0.6))], [((1, 2, 3, 4, 5), (6, 7, 8, 9, 10))], [(((3, 5), (7, 9)),)]]", "input_output_examples": "[[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))]], [[[30.5, 34.25, 27.0, 23.25]]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n\"\"\"\nWrite a function which takes a tuple of tuples and returns the average value for each tuple as a list.\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\n\"\"\"", "entry_point": "average_tuple", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(inner_tuple) / len(inner_tuple) for inner_tuple in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(inner_tuple) / len(inner_tuple) for inner_tuple in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(inner_tuple) / len(inner_tuple) for inner_tuple in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(inner_tuple) / len(inner_tuple) for inner_tuple in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]", "from typing import List, Tuple\n\ndef average_tuple(nums: Tuple[Tuple[float, ...], ...]) -> List[float]:\n    return [sum(t) / len(t) for t in nums]"], "outputs": "[[[10.5, 44.0, 58.0, 2.5]], ['ZeroDivisionError'], [[5.0]], [[10.0, 25.0]], [[0.0, 100.0]], [[2.5, 5.5]], [[-20.0, 20.0]], [[0.19999999999999998, 0.5]], [[3.0, 8.0]], ['TypeError']]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))], [[10.5, 44.0, 58.0, 2.5]], [[30.5, 34.25, 27.0, 23.25]]]]"}], "entropy": 0, "llm_generated_inputs": "[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))], [((),)], [((5,),)], [((5, 10, 15), (20, 25, 30))], [((0, 0, 0), (100, 100, 100))], [((1.5, 2.5, 3.5), (4.5, 5.5, 6.5))], [((-10, -20, -30), (10, 20, 30))], [((0.1, 0.2, 0.3), (0.4, 0.5, 0.6))], [((1, 2, 3, 4, 5), (6, 7, 8, 9, 10))], [(((3, 5), (7, 9)),)]]", "input_output_examples": "[[[((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))]], [[[30.5, 34.25, 27.0, 23.25]]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.013333333333333308, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.013333333333333308, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/616", "original_requirement": "from typing import Tuple\n\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function which takes two tuples of the same length and performs the element wise modulo.\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\n\"\"\"", "entry_point": "tuple_modulo", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((x % y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef tuple_modulo(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((a % b for a, b in zip(test_tup1, test_tup2)))"], "outputs": "[[(0, 4, 5, 1)], [(1, 2, 3)], [(0, 0, 0)], [(0, 0, 4)], [(0, 0, 0)], [(0, 0, 0)], [(1,)], ['ZeroDivisionError'], ['ZeroDivisionError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(10, 4, 5, 6), (5, 6, 7, 5)], [(9, 8, 7), (2, 3, 4)], [(1, 2, 3), (1, 2, 3)], [(15, 20, 25), (3, 5, 7)], [(0, 0, 0), (1, 1, 1)], [(8, 16, 32), (4, 8, 16)], [(7,), (3,)], [(100, 200, 300), (0, 1, 1)], [(2, 4), (2, 0)]]", "input_output_examples": "[[[(10, 4, 5, 6), (5, 6, 7, 5)]], [[(0, 4, 5, 1)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/618", "original_requirement": "from typing import List\n\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n\"\"\"\nWrite a function to divide two lists element wise.\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\n\"\"\"", "entry_point": "div_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [x / y for x, y in zip(nums1, nums2)] if nums2 else []", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [x / y for x, y in zip(nums1, nums2)]", "from typing import List\n\ndef div_list(nums1: List[float], nums2: List[float]) -> List[float]:\n    return [a / b for a, b in zip(nums1, nums2)]"], "outputs": "[[[4.0, 2.5, 2.0]], [[5.0, 4.0, 3.0]], [[3.0, 4.0, 4.0]], [[0.0, 1.0, 1.3333333333333333]], ['ZeroDivisionError'], [[1.0]], [[0.0]], [[1.0, 1.0, 1.0]], [[0.3333333333333333, 0.5]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4, 5, 6], [1, 2, 3]], [[10, 20, 30], [2, 5, 10]], [[1.5, 3.2, 7.6], [0.5, 0.8, 1.9]], [[0, 2, 4], [1, 2, 3]], [[5, 10, 15], [1, 0, 3]], [[1], [1]], [[0], [1]], [[1, 2, 3, 4], [1, 2, 3]], [[1, 2], [3, 4, 5]], [[], []]]", "input_output_examples": "[[[[4, 5, 6], [1, 2, 3]]], [[[4.0, 2.5, 2.0]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/619", "original_requirement": "def move_num(test_str: str) -> str:\n\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def move_num(test_str: str) -> str:\n\"\"\"\nWrite a function to move all the numbers to the end of the given string.\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\n\"\"\"", "entry_point": "move_num", "cluster_list": [{"programs_str": ["import re\n\ndef move_num(test_str: str) -> str:\n    numbers = re.findall('\\\\d+', test_str)\n    no_numbers = re.sub('\\\\d+', '', test_str)\n    return no_numbers + ''.join(numbers)", "import re\n\ndef move_num(test_str: str) -> str:\n    letters = re.findall('[^\\\\d]+', test_str)\n    digits = re.findall('\\\\d+', test_str)\n    return ''.join(letters) + ''.join(digits)", "import re\n\ndef move_num(test_str: str) -> str:\n    non_numbers = ''.join(re.findall('[^\\\\d]', test_str))\n    numbers = ''.join(re.findall('[\\\\d]', test_str))\n    return non_numbers + numbers", "def move_num(test_str: str) -> str:\n    alpha_part = []\n    num_part = []\n    for char in test_str:\n        if char.isdigit():\n            num_part.append(char)\n        else:\n            alpha_part.append(char)\n    return ''.join(alpha_part) + ''.join(num_part)", "def move_num(test_str: str) -> str:\n    letters = []\n    numbers = []\n    i = 0\n    while i < len(test_str):\n        if test_str[i].isdigit():\n            num_start = i\n            while i < len(test_str) and test_str[i].isdigit():\n                i += 1\n            numbers.append(test_str[num_start:i])\n        else:\n            letters.append(test_str[i])\n            i += 1\n    return ''.join(letters) + ''.join(numbers)", "def move_num(test_str: str) -> str:\n    alpha_part = ''\n    num_part = ''\n    current_num = ''\n    for char in test_str:\n        if char.isdigit():\n            current_num += char\n        else:\n            if current_num:\n                num_part += current_num\n                current_num = ''\n            alpha_part += char\n    if current_num:\n        num_part += current_num\n    return alpha_part + num_part", "def move_num(test_str: str) -> str:\n    non_digits = ''.join([char for char in test_str if not char.isdigit()])\n    digits = ''.join([char for char in test_str if char.isdigit()])\n    return non_digits + digits", "import re\n\ndef move_num(test_str: str) -> str:\n    non_numeric_parts = re.findall('[^\\\\d]+', test_str)\n    numeric_parts = re.findall('\\\\d+', test_str)\n    return ''.join(non_numeric_parts) + ''.join(numeric_parts)", "import re\n\ndef move_num(test_str: str) -> str:\n    letters = re.findall('[a-zA-Z]+', test_str)\n    numbers = re.findall('\\\\d+', test_str)\n    return ''.join(letters) + ''.join(numbers)", "import re\n\ndef move_num(test_str: str) -> str:\n    letters = re.findall('[^\\\\d]+', test_str)\n    numbers = re.findall('\\\\d+', test_str)\n    return ''.join(letters) + ''.join(numbers)", "import re\n\ndef move_num(test_str: str) -> str:\n    letters = ''.join(filter(lambda x: x.isalpha(), test_str))\n    numbers = ''.join(re.findall('\\\\d+', test_str))\n    return letters + numbers", "import re\n\ndef move_num(test_str: str) -> str:\n    letters = ''.join(filter(lambda x: not x.isdigit(), test_str))\n    numbers = ''.join(filter(lambda x: x.isdigit(), test_str))\n    return letters + numbers", "def move_num(test_str: str) -> str:\n    alphabets = []\n    numbers = []\n    for char in test_str:\n        if char.isdigit():\n            numbers.append(char)\n        else:\n            alphabets.append(char)\n    return ''.join(alphabets) + ''.join(numbers)", "import re\n\ndef move_num(test_str: str) -> str:\n    alpha_part = ''.join(filter(lambda c: not c.isdigit(), test_str))\n    numeric_part = ''.join(filter(lambda c: c.isdigit(), test_str))\n    return alpha_part + numeric_part", "import re\n\ndef move_num(test_str: str) -> str:\n    letters = re.findall('[a-zA-Z]+', test_str)\n    numbers = re.findall('\\\\d+', test_str)\n    return ''.join(letters) + ''.join(numbers)", "import re\n\ndef move_num(test_str: str) -> str:\n    non_digits = re.findall('[^\\\\d]+', test_str)\n    digits = re.findall('\\\\d+', test_str)\n    return ''.join(non_digits) + ''.join(digits)", "def move_num(test_str: str) -> str:\n    from itertools import groupby\n    char_groups = [''.join(group) for k, group in groupby(test_str, key=str.isdigit) if not k]\n    num_groups = [''.join(group) for k, group in groupby(test_str, key=str.isdigit) if k]\n    return ''.join(char_groups) + ''.join(num_groups)", "import re\n\ndef move_num(test_str: str) -> str:\n    letters = re.findall('\\\\D+', test_str)\n    digits = re.findall('\\\\d+', test_str)\n    return ''.join(letters) + ''.join(digits)", "import re\n\ndef move_num(test_str: str) -> str:\n    chars_part = re.sub('\\\\d+', '', test_str)\n    nums_part = ''.join(re.findall('\\\\d+', test_str))\n    return chars_part + nums_part", "def move_num(test_str: str) -> str:\n    alpha_part = []\n    num_part = []\n    for char in test_str:\n        if char.isdigit():\n            num_part.append(char)\n        else:\n            alpha_part.append(char)\n    return ''.join(alpha_part) + ''.join(num_part)"], "outputs": "[['Iloveyouthreethousand1143553000'], ['abcxyz123'], ['abcdef123456'], ['numbersonly456789'], ['emptystring'], ['123456'], ['abcd1234'], ['numberatstart1'], ['numberatend9'], ['multiplenumbersinstring9999777555'], ['nonumbersonlywords12'], ['numbersatstartthenwords3'], ['wordsfirstthennumbers123456']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['I1love143you55three3000thousand'], ['abc123xyz'], ['123abc456def'], ['numbers456only789'], ['emptystring'], ['123456'], ['a1b2c3d4'], ['1numberatstart'], ['numberatend9'], ['multiple9999numbers777instring555'], ['no1numbers2onlywords'], ['3numbersatstartthenwords'], ['wordsfirstthen123456numbers']]", "input_output_examples": "[[['I1love143you55three3000thousand']], [['Iloveyouthreethousand1143553000']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9317757009345794, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/620", "original_requirement": "from typing import List\n\n\ndef largest_subset(a: List[int]) -> int:\n\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers such that for every pair of numbers in the subset, one number is divisible by the other. \n    The function should:\n    1. Consider only positive integers for divisibility checks. Negative numbers in the input list should be treated as their absolute values.\n    2. Preserve duplicates in the input list. Each instance of a duplicate number should be treated as a distinct element when calculating the subset size.\n    3. Perform the transformation of negative numbers to their absolute values before any other processing, including subset calculations.\n    4. Return 0 for an empty list.\n    5. Assume the input list contains only integers and does not require validation for invalid inputs.\n\n    Examples:\n    assert largest_subset([1, 3, 6, 13, 17, 18]) == 4\n    assert largest_subset([-2, -4, 8, 16]) == 3\n    assert largest_subset([]) == 0\n    assert largest_subset([5, 5, 5, 5]) == 4\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef largest_subset(a: List[int]) -> int:\n\"\"\"\nWrite a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\nassert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4\n\"\"\"", "entry_point": "largest_subset", "cluster_list": [{"programs_str": ["from typing import List\nfrom collections import defaultdict\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\nfrom collections import defaultdict\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"], "outputs": "[[4], [3], [1], [1], [4], [0], [1], [4], [3], [3]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0 or a[j] % a[i] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"], "outputs": "[[4], [3], [1], [1], [4], [0], [1], [4], [4], [3]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\nfrom collections import defaultdict\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"], "outputs": "[[4], [3], [1], [1], [4], ['ValueError'], [1], [4], [3], [3]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7298466991620975, "llm_generated_inputs": "[[[1, 3, 6, 13, 17, 18]], [[8, 16, 24, 64]], [[10, 21, 33]], [[7]], [[5, 5, 5, 5]], [[]], [[2, 3, 5, 7, 11]], [[1, 100, 50, 25, 75]], [[-2, -4, 8, 16]], [[9, 18, 27, 36, 45]]]", "input_output_examples": "[[[[1, 3, 6, 13, 17, 18]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    \"\"\"\n    Write a function to find the size of the largest subset of a list of numbers such that for every pair of numbers in the subset, one number is divisible by the other. \n    The function should:\n    1. Consider only positive integers for divisibility checks. Negative numbers in the input list should be treated as their absolute values.\n    2. Preserve duplicates in the input list. Each instance of a duplicate number should be treated as a distinct element when calculating the subset size.\n    3. Perform the transformation of negative numbers to their absolute values before any other processing, including subset calculations.\n    4. Return 0 for an empty list.\n    5. Assume the input list contains only integers and does not require validation for invalid inputs.\n\n    Examples:\n    assert largest_subset([1, 3, 6, 13, 17, 18]) == 4\n    assert largest_subset([-2, -4, 8, 16]) == 3\n    assert largest_subset([]) == 0\n    assert largest_subset([5, 5, 5, 5]) == 4\n    \"\"\"", "entry_point": "largest_subset", "cluster_list": [{"programs_str": ["from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = sorted(map(abs, a))\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(x) for x in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(x) for x in a]\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(x) for x in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = sorted((abs(num) for num in a))\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(x) for x in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    dp = [1] * len(a)\n    for i in range(1, len(a)):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "from typing import List\n\ndef largest_subset(a: List[int]) -> int:\n    if not a:\n        return 0\n    a = [abs(num) for num in a]\n    a.sort()\n    n = len(a)\n    dp = [1] * n\n    for i in range(n):\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"], "outputs": "[[4], [3], [1], [1], [4], [0], [1], [4], [4], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 6, 13, 17, 18]], [[8, 16, 24, 64]], [[10, 21, 33]], [[7]], [[5, 5, 5, 5]], [[]], [[2, 3, 5, 7, 11]], [[1, 100, 50, 25, 75]], [[-2, -4, 8, 16]], [[9, 18, 27, 36, 45]]]", "input_output_examples": "[[[[1, 3, 6, 13, 17, 18]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.5201834862385322, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9357798165137614, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/622", "original_requirement": "from typing import List\n\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    \"\"\"\n    Write a function to find the median of two sorted lists of the same size. \n\n    Requirements:\n    1. Both input lists (`nums1` and `nums2`) must be non-empty and sorted in ascending order.\n    2. The value of `n` must match the actual size of both input lists. If `n` does not match the size of either list, or if the lists are empty, the function should raise a `ValueError`.\n    3. The function calculates the median by merging the two sorted lists into one sorted list and finding the average of the two middle elements of the merged list.\n    4. The function returns the median as a floating-point number.\n\n    Edge Case Handling:\n    - If either list is empty or `n` is zero, the function raises a `ValueError`.\n    - If the sizes of the two lists do not match or differ from `n`, the function raises a `ValueError`.\n\n    Example:\n    assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n\"\"\"\nWrite a function to find the median of two sorted lists of same size.\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n\"\"\"", "entry_point": "get_median", "cluster_list": [{"programs_str": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] <= nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = len(merged) // 2\n    return (merged[mid - 1] + merged[mid]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    if len(merged) % 2 == 0:\n        return (merged[n - 1] + merged[n]) / 2\n    else:\n        return merged[n // 2]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid_index = len(merged) // 2\n    return (merged[mid_index - 1] + merged[mid_index]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    i = j = count = 0\n    m1 = m2 = 0\n    while count <= n:\n        if i == n:\n            m1 = m2\n            m2 = nums2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = nums1[0]\n            break\n        if nums1[i] <= nums2[j]:\n            m1 = m2\n            m2 = nums1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = nums2[j]\n            j += 1\n        count += 1\n    return (m1 + m2) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged_list = sorted(nums1 + nums2)\n    mid = len(merged_list) // 2\n    if len(merged_list) % 2 == 0:\n        return (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        return merged_list[mid]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] <= nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = len(merged) // 2\n    if len(merged) % 2 == 0:\n        return (merged[mid - 1] + merged[mid]) / 2.0\n    else:\n        return merged[mid]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = []\n    i = j = 0\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    return (merged[n - 1] + merged[n]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid_index = len(merged) // 2\n    return (merged[mid_index - 1] + merged[mid_index]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = len(merged) // 2\n    return (merged[mid - 1] + merged[mid]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = len(merged) // 2\n    return (merged[mid - 1] + merged[mid]) / 2 if len(merged) % 2 == 0 else merged[mid]", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = []\n    i, j = (0, 0)\n    while i < n and j < n:\n        if nums1[i] < nums2[j]:\n            merged.append(nums1[i])\n            i += 1\n        else:\n            merged.append(nums2[j])\n            j += 1\n    while i < n:\n        merged.append(nums1[i])\n        i += 1\n    while j < n:\n        merged.append(nums2[j])\n        j += 1\n    mid = len(merged) // 2\n    return (merged[mid - 1] + merged[mid]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged_list = sorted(nums1 + nums2)\n    return (merged_list[n - 1] + merged_list[n]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    i = 0\n    j = 0\n    count = 0\n    median_idx1 = n - 1\n    median_idx2 = n\n    merged_median_values = []\n    while count <= median_idx2:\n        if i < n and (j >= n or nums1[i] <= nums2[j]):\n            merged_median_values.append(nums1[i])\n            i += 1\n        else:\n            merged_median_values.append(nums2[j])\n            j += 1\n        count += 1\n    return (merged_median_values[median_idx1] + merged_median_values[median_idx2]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged_list = sorted(nums1 + nums2)\n    mid = len(merged_list) // 2\n    return (merged_list[mid - 1] + merged_list[mid]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = len(merged) // 2\n    return (merged[mid - 1] + merged[mid]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged_list = sorted(nums1 + nums2)\n    total_len = len(merged_list)\n    mid = total_len // 2\n    if total_len % 2 == 0:\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        median = merged_list[mid]\n    return median", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    merged = sorted(nums1 + nums2)\n    mid = len(merged) // 2\n    return (merged[mid - 1] + merged[mid]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    i = 0\n    j = 0\n    count = 0\n    m1 = -1\n    m2 = -1\n    while count <= n:\n        if i == n:\n            m1 = m2\n            m2 = nums2[0]\n            break\n        elif j == n:\n            m1 = m2\n            m2 = nums1[0]\n            break\n        if nums1[i] <= nums2[j]:\n            m1 = m2\n            m2 = nums1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = nums2[j]\n            j += 1\n        count += 1\n    return (m1 + m2) / 2.0"], "outputs": "[[16.0], [3.5], [32.5], [3.5], [225.0], ['IndexError'], [1.5], [0.0], [1.0], [4.5]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if n <= 0:\n        return 0.0\n    i = 0\n    j = 0\n    med1 = -1\n    med2 = -1\n    count = 0\n    while count <= n:\n        if i == n:\n            med1 = med2\n            med2 = nums2[0]\n            break\n        elif j == n:\n            med1 = med2\n            med2 = nums1[0]\n            break\n        if nums1[i] <= nums2[j]:\n            med1 = med2\n            med2 = nums1[i]\n            i += 1\n        else:\n            med1 = med2\n            med2 = nums2[j]\n            j += 1\n        count += 1\n    return (med1 + med2) / 2.0"], "outputs": "[[16.0], [3.5], [32.5], [3.5], [225.0], [0.0], [1.5], [0.0], [1.0], [4.5]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n\n    def median(arr: List[int], size: int) -> float:\n        if size % 2 == 0:\n            return (arr[size // 2 - 1] + arr[size // 2]) / 2\n        else:\n            return arr[size // 2]\n    if n <= 0:\n        return -1\n    if n == 1:\n        return (nums1[0] + nums2[0]) / 2\n    if n == 2:\n        return (max(nums1[0], nums2[0]) + min(nums1[1], nums2[1])) / 2\n    m1 = median(nums1, n)\n    m2 = median(nums2, n)\n    if m1 == m2:\n        return m1\n    if m1 < m2:\n        if n % 2 == 0:\n            return get_median(nums1[n // 2 - 1:], nums2[:n // 2 + 1], n // 2 + 1)\n        else:\n            return get_median(nums1[n // 2:], nums2[:n // 2 + 1], n // 2 + 1)\n    elif n % 2 == 0:\n        return get_median(nums2[n // 2 - 1:], nums1[:n // 2 + 1], n // 2 + 1)\n    else:\n        return get_median(nums2[n // 2:], nums1[:n // 2 + 1], n // 2 + 1)"], "outputs": "[[16.0], [3.5], [32.5], [3.5], [225.0], [-1], [1.5], [0], [1], [4.5]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.3589962496465303, "llm_generated_inputs": "[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [[1, 3, 8], [2, 4, 6], 3], [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], 5], [[1, 2, 3], [4, 5, 6], 3], [[100, 200, 300], [150, 250, 350], 3], [[], [], 0], [[1], [2], 1], [[0, 0, 0], [0, 0, 0], 3], [[1, 1, 1], [1, 1, 1], 3], [[1, 2, 3, 4], [5, 6, 7, 8], 4]]", "input_output_examples": "[[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], [[16.0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    \"\"\"\n    Write a function to find the median of two sorted lists of the same size. \n\n    Requirements:\n    1. Both input lists (`nums1` and `nums2`) must be non-empty and sorted in ascending order.\n    2. The value of `n` must match the actual size of both input lists. If `n` does not match the size of either list, or if the lists are empty, the function should raise a `ValueError`.\n    3. The function calculates the median by merging the two sorted lists into one sorted list and finding the average of the two middle elements of the merged list.\n    4. The function returns the median as a floating-point number.\n\n    Edge Case Handling:\n    - If either list is empty or `n` is zero, the function raises a `ValueError`.\n    - If the sizes of the two lists do not match or differ from `n`, the function raises a `ValueError`.\n\n    Example:\n    assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\n    \"\"\"", "entry_point": "get_median", "cluster_list": [{"programs_str": ["from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0 or (len(nums1) != n) or (len(nums2) != n):\n        raise ValueError('Input lists must be non-empty and of the same size matching n.')\n    merged = sorted(nums1 + nums2)\n    middle = len(merged) // 2\n    return (merged[middle - 1] + merged[middle]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if len(nums1) != n or len(nums2) != n or n == 0 or (not nums1) or (not nums2):\n        raise ValueError('Invalid input: Lists must be non-empty and match the specified size.')\n    merged = sorted(nums1 + nums2)\n    middle = len(merged) // 2\n    return (merged[middle - 1] + merged[middle]) / 2 if len(merged) % 2 == 0 else float(merged[middle])", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0 or (len(nums1) != n) or (len(nums2) != n):\n        raise ValueError('Invalid input: Lists must be non-empty and of size n.')\n    merged = sorted(nums1 + nums2)\n    mid1 = len(merged) // 2\n    mid2 = mid1 - 1\n    return (merged[mid1] + merged[mid2]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0:\n        raise ValueError('Input lists must not be empty and n must be greater than zero.')\n    if len(nums1) != n or len(nums2) != n:\n        raise ValueError('The size of the lists must match the value of n.')\n    merged_list = sorted(nums1 + nums2)\n    mid_index = len(merged_list) // 2\n    return (merged_list[mid_index - 1] + merged_list[mid_index]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or len(nums1) != n or (len(nums2) != n):\n        raise ValueError('Invalid input: Lists must be of the same size and match the given size n.')\n    merged_list = sorted(nums1 + nums2)\n    median_index1 = len(merged_list) // 2 - 1\n    median_index2 = len(merged_list) // 2\n    return (merged_list[median_index1] + merged_list[median_index2]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0 or (len(nums1) != n) or (len(nums2) != n):\n        raise ValueError('Invalid input: Lists must be non-empty and sizes must match `n`.')\n    merged_list = sorted(nums1 + nums2)\n    middle1 = len(merged_list) // 2 - 1\n    middle2 = len(merged_list) // 2\n    return (merged_list[middle1] + merged_list[middle2]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n <= 0 or (len(nums1) != n) or (len(nums2) != n):\n        raise ValueError('Invalid input lists or size')\n    merged_list = sorted(nums1 + nums2)\n    mid = len(merged_list) // 2\n    return (merged_list[mid - 1] + merged_list[mid]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n <= 0:\n        raise ValueError('Input lists must be non-empty and n must be positive.')\n    if len(nums1) != n or len(nums2) != n:\n        raise ValueError('The size of the lists must match n.')\n    merged_list = sorted(nums1 + nums2)\n    mid = len(merged_list) // 2\n    return (merged_list[mid - 1] + merged_list[mid]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0:\n        raise ValueError('Input lists cannot be empty and n must be greater than zero.')\n    if len(nums1) != n or len(nums2) != n:\n        raise ValueError('The size of both lists must match n.')\n    merged_list = sorted(nums1 + nums2)\n    total_length = len(merged_list)\n    mid1, mid2 = (total_length // 2 - 1, total_length // 2)\n    return (merged_list[mid1] + merged_list[mid2]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if len(nums1) != n or len(nums2) != n or n == 0 or (not nums1) or (not nums2):\n        raise ValueError('Invalid inputs: Ensure lists are non-empty and their sizes match n.')\n    merged_list = sorted(nums1 + nums2)\n    mid_index = len(merged_list) // 2\n    return (merged_list[mid_index - 1] + merged_list[mid_index]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if len(nums1) != n or len(nums2) != n or n == 0 or (not nums1) or (not nums2):\n        raise ValueError(\"Invalid input: Lists must be of size 'n' and non-empty.\")\n    merged_list = sorted(nums1 + nums2)\n    mid_index = len(merged_list) // 2\n    return (merged_list[mid_index - 1] + merged_list[mid_index]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0 or (len(nums1) != n) or (len(nums2) != n):\n        raise ValueError('Input lists are invalid or do not match the specified size.')\n    merged_list = sorted(nums1 + nums2)\n    mid_index = len(merged_list) // 2\n    return (merged_list[mid_index - 1] + merged_list[mid_index]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0 or (len(nums1) != n) or (len(nums2) != n):\n        raise ValueError(\"Invalid input: lists must be non-empty and sizes must match 'n'\")\n    merged_list = sorted(nums1 + nums2)\n    mid_index = len(merged_list) // 2\n    return (merged_list[mid_index - 1] + merged_list[mid_index]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0:\n        raise ValueError('Input lists cannot be empty, and n must be greater than zero.')\n    if len(nums1) != n or len(nums2) != n:\n        raise ValueError('The size of the input lists must match the value of n.')\n    merged_list = sorted(nums1 + nums2)\n    mid_index = len(merged_list) // 2\n    return (merged_list[mid_index - 1] + merged_list[mid_index]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or len(nums1) != n or (len(nums2) != n):\n        raise ValueError(\"Invalid input: Lists must not be empty and their size must match 'n'\")\n    merged_list = sorted(nums1 + nums2)\n    mid = len(merged_list) // 2\n    return (merged_list[mid - 1] + merged_list[mid]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0 or (len(nums1) != n) or (len(nums2) != n):\n        raise ValueError('Invalid input')\n    merged_list = sorted(nums1 + nums2)\n    mid = len(merged_list) // 2\n    return (merged_list[mid - 1] + merged_list[mid]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0 or (len(nums1) != n) or (len(nums2) != n):\n        raise ValueError('Invalid input: Lists must be non-empty, of same size, and match the given size `n`.')\n    merged = sorted(nums1 + nums2)\n    middle_index1 = len(merged) // 2 - 1\n    middle_index2 = len(merged) // 2\n    return (merged[middle_index1] + merged[middle_index2]) / 2.0", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if not nums1 or not nums2 or n == 0 or (len(nums1) != n) or (len(nums2) != n):\n        raise ValueError('Both lists must be non-empty, sorted, and of size n matching the given value.')\n    merged_list = sorted(nums1 + nums2)\n    total_length = len(merged_list)\n    mid_left = total_length // 2 - 1\n    mid_right = total_length // 2\n    return (merged_list[mid_left] + merged_list[mid_right]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if len(nums1) != n or len(nums2) != n or (not nums1) or (not nums2):\n        raise ValueError(\"Invalid input. Lists must be non-empty and size must match 'n'.\")\n    merged = sorted(nums1 + nums2)\n    mid = len(merged) // 2\n    return (merged[mid - 1] + merged[mid]) / 2", "from typing import List\n\ndef get_median(nums1: List[int], nums2: List[int], n: int) -> float:\n    if len(nums1) != n or len(nums2) != n or n == 0:\n        raise ValueError('Input lists must have size equal to n and must be non-empty.')\n    merged_list = sorted(nums1 + nums2)\n    mid_index = len(merged_list) // 2\n    return (merged_list[mid_index - 1] + merged_list[mid_index]) / 2.0"], "outputs": "[[16.0], [3.5], [32.5], [3.5], [225.0], ['ValueError'], [1.5], [0.0], [1.0], [4.5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5], [[1, 3, 8], [2, 4, 6], 3], [[10, 20, 30, 40, 50], [15, 25, 35, 45, 55], 5], [[1, 2, 3], [4, 5, 6], 3], [[100, 200, 300], [150, 250, 350], 3], [[], [], 0], [[1], [2], 1], [[0, 0, 0], [0, 0, 0], 3], [[1, 1, 1], [1, 1, 1], 3], [[1, 2, 3, 4], [5, 6, 7, 8], 4]]", "input_output_examples": "[[[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], [[16.0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.09999999999999998, "original_avg_pass_rate": 0.8061403508771929, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.19298245614035092, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/623", "original_requirement": "from typing import List\n\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n\"\"\"\nWrite a function to compute the n-th power of each number in a list.\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n\"\"\"", "entry_point": "nth_nums", "cluster_list": [{"programs_str": ["from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [x ** n for x in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]", "from typing import List\n\ndef nth_nums(nums: List[int], n: int) -> List[int]:\n    return [num ** n for num in nums]"], "outputs": "[[[1, 4, 9, 16, 25]], [[0, -1, -8, -27]], [[1, 1, 1]], [[]], [[1.0, 0.5, 0.3333333333333333]], [[10000]], [[1, 2, 3, 4, 5]], [[0, 0, 0, 0]], [[1267650600228229401496703205376, 515377520732011331036461129765621272702107522001, 1606938044258990275541962092341162602522202993782792835301376]], [[27]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5], 2], [[0, -1, -2, -3], 3], [[10, 20, 30], 0], [[], 5], [[1, 2, 3], -1], [[100], 2], [[1, 2, 3, 4, 5], 1], [[0, 0, 0, 0], 2], [[2, 3, 4], 100], [[3], 3]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2]], [[[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/624", "original_requirement": "def is_upper(string: str) -> str:\n\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_upper(string: str) -> str:\n\"\"\"\nWrite a python function to convert a given string to uppercase.\nassert is_upper(\"person\") ==\"PERSON\"\n\"\"\"", "entry_point": "is_upper", "cluster_list": [{"programs_str": ["def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "from typing import str\n\ndef is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "from typing import str\n\ndef is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "from typing import str\n\ndef is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "def is_upper(string: str) -> str:\n    return string.upper()", "from typing import str\n\ndef is_upper(string: str) -> str:\n    return string.upper()"], "outputs": "[['PERSON'], ['HELLO WORLD'], ['123ABC'], ['ALREADYUPPER'], ['MIXEDCASE'], ['!@#$%^&*()'], [''], [' '], ['A'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['person'], ['hello world'], ['123abc'], ['alreadyUpper'], ['mixedCASE'], ['!@#$%^&*()'], [''], [' '], ['a'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ']]", "input_output_examples": "[[['person']], [['PERSON']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/626", "original_requirement": "def triangle_area(radius: float) -> float:\n\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"", "repaired_requirement": "def triangle_area(radius: float) -> Optional[float]:\n    \"\"\"\n    Write a Python function to compute the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Clarifications:\n    1. The \"largest triangle\" refers to a right triangle whose hypotenuse coincides with the diameter of the semicircle. The area of such a triangle is calculated as (radius * radius), where the base and height are both equal to the radius of the semicircle.\n    2. If the radius is non-positive (radius <= 0), the function should return None, as a semicircle with a non-positive radius cannot inscribe a meaningful triangle.\n    3. The output type is either a float (for valid radius > 0) or None (for invalid radius <= 0).\n\n    Examples:\n    assert triangle_area(1) == 1\n    assert triangle_area(0) == None\n    assert triangle_area(-1) == None\n    \"\"\"", "original_clusters": {"requirement": "def triangle_area(radius: float) -> float:\n\"\"\"\nWrite a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\nassert triangle_area(-1) == None\n\"\"\"", "entry_point": "triangle_area", "cluster_list": [{"programs_str": ["import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius ** 2", "from typing import Optional\nimport math\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius ** 2", "from math import pi\n\ndef triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius * radius", "from math import sqrt\n\ndef triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    base = radius * 2\n    height = radius\n    return 0.5 * base * height", "import math\nfrom typing import Union\n\ndef triangle_area(radius: float) -> Union[float, None]:\n    if radius <= 0:\n        return None\n    return radius ** 2", "import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius ** 2", "import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius ** 2", "from math import sqrt\n\ndef triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius * radius", "import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius ** 2"], "outputs": "[[None], [None], [1], [25], [100], [10000], [2.25], [9.869587728099999]]", "probability": 0.6, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius ** 2 * math.sqrt(3)", "from math import sqrt\n\ndef triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius * radius * sqrt(3)"], "outputs": "[[None], [None], [1.7320508075688772], [43.30127018922193], [173.20508075688772], [17320.508075688773], [3.8971143170299736], [17.094627394827484]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import sqrt\n\ndef triangle_area(radius: float) -> float:\n    if radius <= 0:\n        return None\n    return radius * radius / sqrt(2)"], "outputs": "[[None], [None], [0.7071067811865475], [17.677669529663685], [70.71067811865474], [7071.067811865475], [1.590990257669732], [6.97885241005504]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius / 2", "import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius / 2"], "outputs": "[[None], [None], [0.5], [12.5], [50.0], [5000.0], [1.125], [4.9347938640499995]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\nfrom typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius < 0:\n        return None\n    return radius ** 2 / 2"], "outputs": "[[None], [0.0], [0.5], [12.5], [50.0], [5000.0], [1.125], [4.9347938640499995]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Optional\nimport math\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius < 0:\n        return None\n    return radius ** 2", "from math import sqrt\n\ndef triangle_area(radius: float) -> float:\n    if radius < 0:\n        return None\n    return radius * radius"], "outputs": "[[None], [0], [1], [25], [100], [10000], [2.25], [9.869587728099999]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7237824896619229, "llm_generated_inputs": "[[-1], [0], [1], [5], [10], [100], [1.5], [3.14159]]", "input_output_examples": "[[[-1]], [[None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def triangle_area(radius: float) -> Optional[float]:\n    \"\"\"\n    Write a Python function to compute the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Clarifications:\n    1. The \"largest triangle\" refers to a right triangle whose hypotenuse coincides with the diameter of the semicircle. The area of such a triangle is calculated as (radius * radius), where the base and height are both equal to the radius of the semicircle.\n    2. If the radius is non-positive (radius <= 0), the function should return None, as a semicircle with a non-positive radius cannot inscribe a meaningful triangle.\n    3. The output type is either a float (for valid radius > 0) or None (for invalid radius <= 0).\n\n    Examples:\n    assert triangle_area(1) == 1\n    assert triangle_area(0) == None\n    assert triangle_area(-1) == None\n    \"\"\"", "entry_point": "triangle_area", "cluster_list": [{"programs_str": ["from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius > 0:\n        return radius * radius\n    else:\n        return None", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius", "from typing import Optional\n\ndef triangle_area(radius: float) -> Optional[float]:\n    if radius <= 0:\n        return None\n    return radius * radius"], "outputs": "[[None], [None], [1], [25], [100], [10000], [2.25], [9.869587728099999]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[-1], [0], [1], [5], [10], [100], [1.5], [3.14159]]", "input_output_examples": "[[[-1]], [[None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.19999999999999996, "original_avg_pass_rate": 0.8648148148148149, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9722222222222221, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/628", "original_requirement": "def replace_spaces(string: str) -> str:\n\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def replace_spaces(string: str) -> str:\n\"\"\"\nWrite a function to replace all spaces in the given string with '%20'.\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\n\"\"\"", "entry_point": "replace_spaces", "cluster_list": [{"programs_str": ["def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')", "def replace_spaces(string: str) -> str:\n    return string.replace(' ', '%20')"], "outputs": "[['My%20Name%20is%20Dawood'], ['Hello%20World'], ['NoSpacesHere'], ['%20Leading%20space'], ['Trailing%20space%20'], ['%20Multiple%20%20%20spaces%20'], [''], ['%20'], ['%20%20%20'], ['A%20B%20C']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['My Name is Dawood'], ['Hello World'], ['NoSpacesHere'], [' Leading space'], ['Trailing space '], [' Multiple   spaces '], [''], [' '], ['   '], ['A B C']]", "input_output_examples": "[[['My Name is Dawood']], [['My%20Name%20is%20Dawood']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/629", "original_requirement": "from typing import List\n\n\ndef Split(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef Split(l: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to find even numbers from a list of numbers.\nassert Split([1,2,3,4,5]) == [2,4]\n\"\"\"", "entry_point": "Split", "cluster_list": [{"programs_str": ["from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [num for num in l if num % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]", "from typing import List\n\ndef Split(l: List[int]) -> List[int]:\n    return [x for x in l if x % 2 == 0]"], "outputs": "[[[2, 4]], [[]], [[2, 4, 6, 8]], [[]], [[0, 2]], [[-2, -4, 6, 8]], [[]], [[1000000000]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[]], [[2, 4, 6, 8]], [[1, 3, 5, 7]], [[0, 1, 2, 3]], [[-2, -4, 6, 8]], [[-1, -3, -5]], [[1000000000, 2000000001]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5]]], [[[2, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/630", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n\"\"\"\nWrite a function to extract all the adjacent coordinates of the given coordinate tuple.\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n\"\"\"", "entry_point": "get_coordinates", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    adjacents = []\n    for dx in range(-1, 2):\n        for dy in range(-1, 2):\n            adjacents.append([x + dx, y + dy])\n    return adjacents", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            coordinates.append([i, j])\n    return coordinates", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    if len(test_tup) != 2:\n        raise ValueError('The input tuple must contain exactly two integers.')\n    x, y = test_tup\n    return [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]", "from typing import List, Tuple\n\ndef get_coordinates(test_tup: Tuple[int, ...]) -> List[List[int]]:\n    x, y = test_tup\n    coordinates = [[i, j] for i in range(x - 1, x + 2) for j in range(y - 1, y + 2)]\n    return coordinates"], "outputs": "[[[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]], [[[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 0], [0, 1], [1, -1], [1, 0], [1, 1]]], [[[-2, -2], [-2, -1], [-2, 0], [-1, -2], [-1, -1], [-1, 0], [0, -2], [0, -1], [0, 0]]], [[[99, 199], [99, 200], [99, 201], [100, 199], [100, 200], [100, 201], [101, 199], [101, 200], [101, 201]]], [[[49, 49], [49, 50], [49, 51], [50, 49], [50, 50], [50, 51], [51, 49], [51, 50], [51, 51]]], [[[-1, 99], [-1, 100], [-1, 101], [0, 99], [0, 100], [0, 101], [1, 99], [1, 100], [1, 101]]], [[[99, -1], [99, 0], [99, 1], [100, -1], [100, 0], [100, 1], [101, -1], [101, 0], [101, 1]]], [[[2147483646, 2147483646], [2147483646, 2147483647], [2147483646, 2147483648], [2147483647, 2147483646], [2147483647, 2147483647], [2147483647, 2147483648], [2147483648, 2147483646], [2147483648, 2147483647], [2147483648, 2147483648]]], [[[-2147483649, -2147483649], [-2147483649, -2147483648], [-2147483649, -2147483647], [-2147483648, -2147483649], [-2147483648, -2147483648], [-2147483648, -2147483647], [-2147483647, -2147483649], [-2147483647, -2147483648], [-2147483647, -2147483647]]], [[[12344, 67889], [12344, 67890], [12344, 67891], [12345, 67889], [12345, 67890], [12345, 67891], [12346, 67889], [12346, 67890], [12346, 67891]]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(3, 4)], [(0, 0)], [(-1, -1)], [(100, 200)], [(50, 50)], [(0, 100)], [(100, 0)], [(2147483647, 2147483647)], [(-2147483648, -2147483648)], [(12345, 67890)]]", "input_output_examples": "[[[(3, 4)]], [[[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.03252032520325199, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/631", "original_requirement": "def replace_spaces(text: str) -> str:\n\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"", "repaired_requirement": "```python\ndef replace_spaces(text: str) -> str:\n    \"\"\"\n    Write a function to replace whitespaces (' ') with underscores ('_') and underscores ('_') with whitespaces (' ') \n    in a given string. Each character in the string should be processed independently in a single pass, without \n    iterative or sequential transformations. The function should handle all input cases, including strings with \n    pre-existing underscores, multiple consecutive whitespaces, or a mix of both.\n\n    Example:\n    assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    \"\"\"\n```", "original_clusters": {"requirement": "def replace_spaces(text: str) -> str:\n\"\"\"\nWrite a function to replace whitespaces with an underscore and vice versa in a given string.\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n\"\"\"", "entry_point": "replace_spaces", "cluster_list": [{"programs_str": ["def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))"], "outputs": "[['Jumanji_The_Jungle'], ['Hello_World'], ['A_B_C'], ['___'], ['Underscore Test'], ['Multiple____Spaces'], ['NoSpaces'], [' '], ['_  _'], ['Space End_'], ['_ Start'], [' Middle '], ['Space____ ___Test'], ['']]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ', 1).replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ', 1).replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')", "def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ')"], "outputs": "[['Jumanji The Jungle'], ['Hello World'], ['A B C'], ['   '], ['Underscore Test'], ['Multiple    Spaces'], ['NoSpaces'], [' '], ['    '], ['Space End '], ['  Start'], [' Middle '], ['Space        Test'], ['']]", "probability": 0.65, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['Jumanji The Jungle'], ['Jumanji The Jungle'], ['Jumanji_The_Jungle']]]"}, {"programs_str": ["def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ', text.count('_'))"], "outputs": "[['Jumanji_The_Jungle'], ['Hello_World'], ['A_B_C'], ['___'], ['Underscore Test'], ['Multiple____Spaces'], ['NoSpaces'], [' '], ['  __'], ['Space End_'], [' _Start'], [' Middle '], ['Space _______Test'], ['']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def replace_spaces(text: str) -> str:\n    return text.replace(' ', '_').replace('_', ' ', 1).replace(' ', '_')"], "outputs": "[['Jumanji_The_Jungle'], ['Hello_World'], ['A_B_C'], ['___'], ['Underscore_Test'], ['Multiple____Spaces'], ['NoSpaces'], ['_'], ['____'], ['Space_End_'], ['__Start'], ['_Middle_'], ['Space________Test'], ['']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6680801271869059, "llm_generated_inputs": "[['Jumanji The Jungle'], ['Hello World'], ['A B C'], ['   '], ['Underscore_Test'], ['Multiple    Spaces'], ['NoSpaces'], ['_'], [' __ '], ['Space_End '], [' _Start'], ['_Middle_'], ['Space    _   Test'], ['']]", "input_output_examples": "[[['Jumanji The Jungle']], [['Jumanji_The_Jungle']]]", "weighted_test_consistency": 0.35, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef replace_spaces(text: str) -> str:\n    \"\"\"\n    Write a function to replace whitespaces (' ') with underscores ('_') and underscores ('_') with whitespaces (' ') \n    in a given string. Each character in the string should be processed independently in a single pass, without \n    iterative or sequential transformations. The function should handle all input cases, including strings with \n    pre-existing underscores, multiple consecutive whitespaces, or a mix of both.\n\n    Example:\n    assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\n    \"\"\"\n```", "entry_point": "replace_spaces", "cluster_list": [{"programs_str": ["def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if c == ' ' else ' ' if c == '_' else c for c in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if c == ' ' else ' ' if c == '_' else c for c in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if c == ' ' else ' ' if c == '_' else c for c in text))", "def replace_spaces(text: str) -> str:\n    return ''.join(('_' if char == ' ' else ' ' if char == '_' else char for char in text))"], "outputs": "[['Jumanji_The_Jungle'], ['Hello_World'], ['A_B_C'], ['___'], ['Underscore Test'], ['Multiple____Spaces'], ['NoSpaces'], [' '], ['_  _'], ['Space End_'], ['_ Start'], [' Middle '], ['Space____ ___Test'], ['']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Jumanji The Jungle'], ['Hello World'], ['A B C'], ['   '], ['Underscore_Test'], ['Multiple    Spaces'], ['NoSpaces'], ['_'], [' __ '], ['Space_End '], [' _Start'], ['_Middle_'], ['Space    _   Test'], ['']]", "input_output_examples": "[[['Jumanji The Jungle']], [['Jumanji_The_Jungle']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.19999999999999996, "original_avg_pass_rate": 0.7596330275229357, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/632", "original_requirement": "from typing import List\n\n\ndef move_zero(num_list: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef move_zero(num_list: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to move all zeroes to the end of the given list.\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\n\"\"\"", "entry_point": "move_zero", "cluster_list": [{"programs_str": ["from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [x for x in num_list if x != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [x for x in num_list if x != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [x for x in num_list if x != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [x for x in num_list if x != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zero = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    return non_zero + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [x for x in num_list if x != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zero_elements = [num for num in num_list if num != 0]\n    zeros = [0] * (len(num_list) - len(non_zero_elements))\n    return non_zero_elements + zeros", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [x for x in num_list if x != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zeroes = [num for num in num_list if num != 0]\n    zeroes = [num for num in num_list if num == 0]\n    return non_zeroes + zeroes", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [x for x in num_list if x != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zero_nums = [num for num in num_list if num != 0]\n    zero_count = num_list.count(0)\n    return non_zero_nums + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    non_zero_elements = [x for x in num_list if x != 0]\n    zero_count = num_list.count(0)\n    return non_zero_elements + [0] * zero_count", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [x for x in num_list if x != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [x for x in num_list if x != 0] + [0] * num_list.count(0)", "from typing import List\n\ndef move_zero(num_list: List[int]) -> List[int]:\n    return [num for num in num_list if num != 0] + [0] * num_list.count(0)"], "outputs": "[[[1, 2, 3, 4, 0, 0]], [[1, 2, 3, 0, 0, 0]], [[1, 2, 3, 4, 5]], [[0, 0, 0]], [[0]], [[1]], [[]], [[1, 2, 0, 0, 0, 0]], [[1, 2, 3, 0, 0, 0, 0]], [[1, 2, 3, 4, 0, 0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 0, 2, 0, 3, 4]], [[0, 0, 0, 1, 2, 3]], [[1, 2, 3, 4, 5]], [[0, 0, 0]], [[0]], [[1]], [[]], [[1, 0, 0, 0, 0, 2]], [[0, 1, 0, 2, 0, 3, 0]], [[1, 2, 0, 3, 0, 4]]]", "input_output_examples": "[[[[1, 0, 2, 0, 3, 4]]], [[[1, 2, 3, 4, 0, 0]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/633", "original_requirement": "from typing import List\n\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of xor of all pairs of numbers in the given list.\nassert pair_xor_Sum([5,9,7,6],4) == 47\n\"\"\"", "entry_point": "pair_xor_Sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += arr[i] ^ arr[j]\n    return result", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += arr[i] ^ arr[j]\n    return result", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += arr[i] ^ arr[j]\n    return result", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += arr[i] ^ arr[j]\n    return result", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_sum += arr[i] ^ arr[j]\n    return total_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    total_xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            total_xor_sum += arr[i] ^ arr[j]\n    return total_xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum", "from typing import List\n\ndef pair_xor_Sum(arr: List[int], n: int) -> int:\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum"], "outputs": "[[47], [6], [0], [14336], [0], [28], [0], [127], [0], [0], [63]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 9, 7, 6], 4], [[1, 2, 3], 3], [[0, 0, 0, 0], 4], [[1024, 2048, 4096], 3], [[1, 1, 1, 1], 4], [[5, 9, 7, 6], 3], [[], 0], [[1000000, 999999], 2], [[10], 1], [[5, 5, 5], 3], [[1, 2, 3, 4, 5, 6], 6]]", "input_output_examples": "[[[[5, 9, 7, 6], 4]], [[47]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/635", "original_requirement": "from typing import List\n\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n\"\"\"\nWrite a function to sort the given list.\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\"\"\"", "entry_point": "heap_sort", "cluster_list": [{"programs_str": ["from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    h = []\n    for value in iterable:\n        heapq.heappush(h, value)\n    return [heapq.heappop(h) for _ in range(len(h))]", "import heapq\nfrom typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heap = []\n    for item in iterable:\n        heapq.heappush(heap, item)\n    sorted_list = [heapq.heappop(heap) for _ in range(len(heap))]\n    return sorted_list", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    sorted_list = [heapq.heappop(iterable) for _ in range(len(iterable))]\n    return sorted_list", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        sorted_list.append(heapq.heappop(iterable))\n    return sorted_list", "import heapq\nfrom typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    h = []\n    for value in iterable:\n        heapq.heappush(h, value)\n    return [heapq.heappop(h) for _ in range(len(h))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "import heapq\nfrom typing import List\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]", "from typing import List\nimport heapq\n\ndef heap_sort(iterable: List[int]) -> List[int]:\n    heapq.heapify(iterable)\n    return [heapq.heappop(iterable) for _ in range(len(iterable))]"], "outputs": "[[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[]], [[5]], [[1, 5]], [[3, 3, 3]], [[-2, -1, 0, 5, 10]], [[0, 0, 9, 9]], [[10, 25, 50, 75, 100]], [[-1, 0, 1]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[-1000000, 0, 1000000]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]], [[]], [[5]], [[5, 1]], [[3, 3, 3]], [[10, -2, 5, 0, -1]], [[9, 0, 0, 9]], [[100, 50, 25, 75, 10]], [[1, -1, 0]], [[5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5]], [[1000000, -1000000, 0]]]", "input_output_examples": "[[[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]]], [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/637", "original_requirement": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n\"\"\"\nWrite a function to check whether the given amount has no profit and no loss\nassert noprofit_noloss(1500,1200)==False\n\"\"\"", "entry_point": "noprofit_noloss", "cluster_list": [{"programs_str": ["def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount", "def noprofit_noloss(actual_cost: int, sale_amount: int) -> bool:\n    return actual_cost == sale_amount"], "outputs": "[[True], [False], [False], [True], [False], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1500, 1500], [1500, 1200], [1200, 1500], [0, 0], [0, 1500], [1500, 0], [-1500, -1500], [-1500, 1500], [1500, -1500]]", "input_output_examples": "[[[1500, 1200]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/638", "original_requirement": "def wind_chill(v: float, t: float) -> int:\n\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"", "repaired_requirement": "```python\ndef wind_chill(v: float, t: float) -> int:\n    \"\"\"\n    Write a function to calculate the wind chill index rounded using standard mathematical rounding \n    (rounding up for .5 and above, down otherwise) given the wind velocity in km/h and a temperature in Celsius.\n\n    The function must validate inputs:\n    - Wind velocity `v` must be non-negative (v >= 0). If `v` is negative, raise a `ValueError`.\n    - Temperature `t` is assumed to be a valid float without additional constraints.\n\n    The formula for calculating the wind chill index is:\n    wind_chill = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n\n    Example:\n    assert wind_chill(120, 35) == 40\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [-1, 20]\n    Expected Output: ['ValueError']\n    ### Test 2\n    Input: [0, 10]\n    Expected Output: [19]\n    \"\"\"\n```", "original_clusters": {"requirement": "def wind_chill(v: float, t: float) -> int:\n\"\"\"\nWrite a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\nassert wind_chill(120,35)==40\n\"\"\"", "entry_point": "wind_chill", "cluster_list": [{"programs_str": ["import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return math.ceil(wind_chill_index)"], "outputs": "[[41], [20], [-9], [-1], [-21], [27], [4], [-52], [3], ['ValueError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[120, 35], [41], [40]]]"}, {"programs_str": ["import math\n\ndef wind_chill(v: float, t: float) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16))", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16))", "from math import pow\n\ndef wind_chill(v: float, t: float) -> int:\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16)\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16))", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16))", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16))", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16))", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wind_chill_index)", "from math import pow\n\ndef wind_chill(v: float, t: float) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16))", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16))", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wind_chill_index)", "from math import pow\n\ndef wind_chill(v: float, t: float) -> int:\n    index = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16)\n    return round(index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wci = 13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16)\n    return round(wci)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * math.pow(v, 0.16) + 0.3965 * t * math.pow(v, 0.16))"], "outputs": "[[40], [19], [-9], [-2], [-22], [26], [4], [-52], [3], ['ValueError']]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    wc_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wc_index)"], "outputs": "[[41], [20], [-9], [-1], [-21], [27], [4], [-52], [3], ['TypeError']]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[120, 35], [41], [40]]]"}, {"programs_str": ["import math\n\ndef wind_chill(v: float, t: float) -> int:\n    return round(13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16)"], "outputs": "[[40], [19], [-9], [-2], [-22], [26], [4], [-52], [3], ['TypeError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef wind_chill(v: float, t: float) -> int:\n    v = v * 1000 / 3600\n    wci = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return math.ceil(wci)"], "outputs": "[[40], [20], [-5], [2], [-16], [27], [4], [-43], [6], ['TypeError']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.5563308144749578, "llm_generated_inputs": "[[120, 35], [0, 10], [10, -5], [5, 0], [50, -10], [20, 25], [0, -15], [80, -30], [150, 10], [-1, 20]]", "input_output_examples": "[[[120, 35]], [[40]]]", "weighted_test_consistency": 0.85, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef wind_chill(v: float, t: float) -> int:\n    \"\"\"\n    Write a function to calculate the wind chill index rounded using standard mathematical rounding \n    (rounding up for .5 and above, down otherwise) given the wind velocity in km/h and a temperature in Celsius.\n\n    The function must validate inputs:\n    - Wind velocity `v` must be non-negative (v >= 0). If `v` is negative, raise a `ValueError`.\n    - Temperature `t` is assumed to be a valid float without additional constraints.\n\n    The formula for calculating the wind chill index is:\n    wind_chill = 13.12 + 0.6215 * t - 11.37 * (v ** 0.16) + 0.3965 * t * (v ** 0.16)\n\n    Example:\n    assert wind_chill(120, 35) == 40\n\n    Input and expected output examples:\n    ### Test 1\n    Input: [-1, 20]\n    Expected Output: ['ValueError']\n    ### Test 2\n    Input: [0, 10]\n    Expected Output: [19]\n    \"\"\"\n```", "entry_point": "wind_chill", "cluster_list": [{"programs_str": ["import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity cannot be negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_value = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_value)", "from typing import Union\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity `v` must be non-negative.')\n    chill = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(chill)", "def wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "def wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "from math import pow\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * pow(v, 0.16) + 0.3965 * t * pow(v, 0.16)\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "from typing import Union\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "from typing import Union\n\ndef wind_chill(v: float, t: float) -> Union[int, ValueError]:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative')\n    wind_chill_value = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_value)", "from typing import Union\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wc = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wc)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity cannot be negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "from typing import Union\n\ndef wind_chill(v: float, t: float) -> Union[int, str]:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative.')\n    wind_chill_index = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(wind_chill_index)", "import math\n\ndef wind_chill(v: float, t: float) -> int:\n    if v < 0:\n        raise ValueError('Wind velocity must be non-negative')\n    chill = 13.12 + 0.6215 * t - 11.37 * v ** 0.16 + 0.3965 * t * v ** 0.16\n    return round(chill)"], "outputs": "[[40], [19], [-9], [-2], [-22], [26], [4], [-52], [3], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[120, 35], [0, 10], [10, -5], [5, 0], [50, -10], [20, 25], [0, -15], [80, -30], [150, 10], [-1, 20]]", "input_output_examples": "[[[120, 35]], [[40]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.4, "original_avg_pass_rate": 0.6571428571428571, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/639", "original_requirement": "from typing import List\n\n\ndef sample_nam(sample_names: List[str]) -> int:\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sample_nam(sample_names: List[str]) -> int:\n\"\"\"\nWrite a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\nassert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\n\"\"\"", "entry_point": "sample_nam", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name and name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name and name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name and name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name and name[0].isupper()))", "from typing import List\n\ndef sample_nam(sample_names: List[str]) -> int:\n    return sum((len(name) for name in sample_names if name[0].isupper()))"], "outputs": "[[16], [0], [0], [13], [16], [8], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']], [[]], [['apple', 'banana', 'cherry']], [['Alice', 'Bob', 'Carol']], [['Eve', 'daniel', 'Chris', 'ben', 'Margaret', 'annabelle']], [['Jonathan']], [['eliza']]]", "input_output_examples": "[[[['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']]], [[16]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.6666666666666667, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/641", "original_requirement": "def is_nonagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_nonagonal(n: int) -> int:\n\"\"\"\nWrite a function to find the nth nonagonal number.\nassert is_nonagonal(10) == 325\n\"\"\"", "entry_point": "is_nonagonal", "cluster_list": [{"programs_str": ["def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2", "def is_nonagonal(n: int) -> int:\n    return n * (7 * n - 5) // 2"], "outputs": "[[1], [325], [75], [0], [34750], [6], ['TypeError'], [4.0], ['TypeError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [10], [5], [0], [100], [-1], ['a'], [1.5], [None]]", "input_output_examples": "[[[10]], [[325]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/643", "original_requirement": "def text_match_wordz_middle(text: str) -> bool:\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"", "repaired_requirement": "```python\ndef text_match_wordz_middle(text: str) -> bool:\n    \"\"\"\n    Write a function that checks if the input string contains the character 'z' \n    such that 'z' is surrounded by other characters within a word. A word is \n    defined as a sequence of non-whitespace characters. The function should \n    return True if 'z' is found in the middle of a word (not at the start or \n    end of the word), and False otherwise.\n\n    Notes:\n    - The function should handle input strings with multiple words separated \n      by spaces.\n    - Words are sequences of characters separated by whitespace.\n    - The implementation should use regular expressions to identify 'z' \n      surrounded by other characters within a word.\n\n    Example:\n    assert text_match_wordz_middle(\"pythonzabc.\") == True\n    \"\"\"\n```", "original_clusters": {"requirement": "def text_match_wordz_middle(text: str) -> bool:\n\"\"\"\nWrite a function that checks if a strings contains 'z', except at the start and end of the word.\nassert text_match_wordz_middle(\"pythonzabc.\")==True\n\"\"\"", "entry_point": "text_match_wordz_middle", "cluster_list": [{"programs_str": ["import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return re.search('\\\\Bz\\\\B', text) is not None", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('(?<!^)(?<!\\\\s)z(?!$|\\\\s)', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))"], "outputs": "[[True], [False], [False], [True], [False], [False], [True], [True], [True], [False]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\b[a-yA-Y]*z[a-yA-Y]*\\\\b', text))"], "outputs": "[[True], [True], [True], [True], [True], [False], [False], [False], [False], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[['pythonzabc.'], ['zabc'], ['abcdez'], ['abcdezabc'], ['z'], ['python'], ['zzzz'], ['abc123zabc'], ['zzzabczzz'], ['abc']]", "input_output_examples": "[[['pythonzabc.']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef text_match_wordz_middle(text: str) -> bool:\n    \"\"\"\n    Write a function that checks if the input string contains the character 'z' \n    such that 'z' is surrounded by other characters within a word. A word is \n    defined as a sequence of non-whitespace characters. The function should \n    return True if 'z' is found in the middle of a word (not at the start or \n    end of the word), and False otherwise.\n\n    Notes:\n    - The function should handle input strings with multiple words separated \n      by spaces.\n    - Words are sequences of characters separated by whitespace.\n    - The implementation should use regular expressions to identify 'z' \n      surrounded by other characters within a word.\n\n    Example:\n    assert text_match_wordz_middle(\"pythonzabc.\") == True\n    \"\"\"\n```", "entry_point": "text_match_wordz_middle", "cluster_list": [{"programs_str": ["import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    pattern = '\\\\Bz\\\\B'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    pattern = '\\\\Bz\\\\B'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    pattern = '\\\\Bz\\\\B'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    pattern = '\\\\Bz\\\\B'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    pattern = '\\\\Bz\\\\B'\n    return bool(re.search(pattern, text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))", "import re\n\ndef text_match_wordz_middle(text: str) -> bool:\n    return bool(re.search('\\\\Bz\\\\B', text))"], "outputs": "[[True], [False], [False], [True], [False], [False], [True], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['pythonzabc.'], ['zabc'], ['abcdez'], ['abcdezabc'], ['z'], ['python'], ['zzzz'], ['abc123zabc'], ['zzzabczzz'], ['abc']]", "input_output_examples": "[[['pythonzabc.']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/644", "original_requirement": "from typing import List\n\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n    Write a Python function to reverse the elements of an array up to a given position `k`.\n    \n    The function performs the following:\n    1. Reverses the elements of the array from the start up to (and including) the element at index `k-1`.\n    2. Appends the remaining elements of the array (from index `k` onward) unchanged.\n    \n    Special cases:\n    - If `k <= 0`, the function returns the original array unchanged.\n    - If `k > len(input)`, the function treats `k` as equal to `len(input)` and reverses the entire array.\n    - If the input array is empty, the function returns an empty list regardless of the value of `k`.\n\n    Example:\n    assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n\"\"\"\nWrite a python function to reverse an array upto a given position.\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n\"\"\"", "entry_point": "reverse_Array_Upto_K", "cluster_list": [{"programs_str": ["from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0 or k > len(input):\n        return input\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0 or not input:\n        return input\n    return input[:k][::-1] + input[k:]"], "outputs": "[[[4, 3, 2, 1, 5, 6]], [[1, 2, 3, 4, 5, 6]], [[6, 5, 4, 3, 2, 1]], [[]], [[30, 20, 10, 40, 50]], [[1]], [[5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5]], [[3, 4, 5, 2, 1]], [[8, 3, 9]]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    reversed_part = input[:k][::-1]\n    return reversed_part + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input):\n        k = len(input)\n    reversed_part = input[:k][::-1]\n    return reversed_part + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    return input[:k][::-1] + input[k:]"], "outputs": "[[[4, 3, 2, 1, 5, 6]], [[1, 2, 3, 4, 5, 6]], [[6, 5, 4, 3, 2, 1]], [[]], [[30, 20, 10, 40, 50]], [[1]], [[5, 4, 3, 2, 1]], [[4, 3, 2, 1, 5]], [[3, 4, 5, 2, 1]], [[8, 3, 9]]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6], 4], [[1, 2, 3, 4, 5, 6], 0], [[1, 2, 3, 4, 5, 6], 6], [[], 3], [[10, 20, 30, 40, 50], 3], [[1], 1], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], -1], [[5, 4, 3, 2, 1], 3], [[3, 8, 9], 2]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], 4]], [[[4, 3, 2, 1, 5, 6]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    \"\"\"\n    Write a Python function to reverse the elements of an array up to a given position `k`.\n    \n    The function performs the following:\n    1. Reverses the elements of the array from the start up to (and including) the element at index `k-1`.\n    2. Appends the remaining elements of the array (from index `k` onward) unchanged.\n    \n    Special cases:\n    - If `k <= 0`, the function returns the original array unchanged.\n    - If `k > len(input)`, the function treats `k` as equal to `len(input)` and reverses the entire array.\n    - If the input array is empty, the function returns an empty list regardless of the value of `k`.\n\n    Example:\n    assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\n    \"\"\"\n```", "entry_point": "reverse_Array_Upto_K", "cluster_list": [{"programs_str": ["from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0 or not input:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0 or not input:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if not input or k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0:\n        return input\n    n = len(input)\n    if k > n:\n        k = n\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if not input or k <= 0:\n        return input\n    k = min(k, len(input))\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if not input or k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0 or not input:\n        return input\n    k = min(k, len(input))\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if not input or k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if not input or k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if not input or k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0 or not input:\n        return input\n    k = min(k, len(input))\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0 or not input:\n        return input\n    k = min(k, len(input))\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0 or not input:\n        return input\n    k = min(k, len(input))\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if k <= 0:\n        return input\n    if k > len(input):\n        k = len(input)\n    return input[:k][::-1] + input[k:]", "from typing import List\n\ndef reverse_Array_Upto_K(input: List[int], k: int) -> List[int]:\n    if not input or k <= 0:\n        return input\n    k = min(k, len(input))\n    return input[:k][::-1] + input[k:]"], "outputs": "[[[4, 3, 2, 1, 5, 6]], [[1, 2, 3, 4, 5, 6]], [[6, 5, 4, 3, 2, 1]], [[]], [[30, 20, 10, 40, 50]], [[1]], [[5, 4, 3, 2, 1]], [[1, 2, 3, 4, 5]], [[3, 4, 5, 2, 1]], [[8, 3, 9]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6], 4], [[1, 2, 3, 4, 5, 6], 0], [[1, 2, 3, 4, 5, 6], 6], [[], 3], [[10, 20, 30, 40, 50], 3], [[1], 1], [[1, 2, 3, 4, 5], 5], [[1, 2, 3, 4, 5], -1], [[5, 4, 3, 2, 1], 3], [[3, 8, 9], 2]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6], 4]], [[[4, 3, 2, 1, 5, 6]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/720", "original_requirement": "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n\"\"\"\nWrite a function to add a dictionary to the tuple. The output should be a tuple.\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n\"\"\"", "entry_point": "add_dict_to_tuple", "cluster_list": [{"programs_str": ["from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, ...], test_dict: Dict[str, int]) -> Tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, ...], test_dict: Dict[str, int]) -> Tuple:\n    return test_tup + (test_dict,)", "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple, test_dict: Dict) -> Tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple, test_dict: Dict) -> Tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple, test_dict: Dict) -> Tuple:\n    return test_tup + (test_dict,)", "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple, test_dict: Dict) -> Tuple:\n    return test_tup + (test_dict,)", "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple, test_dict: Dict) -> Tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple, test_dict: Dict) -> Tuple:\n    return test_tup + (test_dict,)", "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, ...], test_dict: Dict[str, int]) -> Tuple[int, ...]:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)", "from typing import Tuple, Dict\n\ndef add_dict_to_tuple(test_tup: Tuple[int, ...], test_dict: Dict[str, int]) -> Tuple[int, ...]:\n    return test_tup + (test_dict,)", "def add_dict_to_tuple(test_tup: tuple, test_dict: dict) -> tuple:\n    return test_tup + (test_dict,)"], "outputs": "[[(4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})], [(1, 2, 3, {'x': 10, 'y': 20, 'z': 30})], [({'a': 1, 'b': 2},)], [(7, 8, 9, {})], [(None, {'key': 'value'})], [(True, False, {'flag': 'test'})], [(4, {'duplicate': 4, 'value': 1})]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3}], [(1, 2, 3), {'x': 10, 'y': 20, 'z': 30}], [(), {'a': 1, 'b': 2}], [(7, 8, 9), {}], [(None,), {'key': 'value'}], [(True, False), {'flag': 'test'}], [(4,), {'duplicate': 4, 'value': 1}]]", "input_output_examples": "[[[(4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3}]], [[(4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/721", "original_requirement": "from typing import List\n\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n\"\"\"\nGiven a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\n\"\"\"", "entry_point": "maxAverageOfPath", "cluster_list": [{"programs_str": ["from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    if N == 0:\n        return 0.0\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    max_sum = dp[N - 1][N - 1]\n    path_length = 2 * N - 1\n    return max_sum / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    max_cost = dp[n - 1][n - 1]\n    num_cells = 2 * n - 1\n    return max_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    max_cost = dp[n - 1][n - 1]\n    num_cells = 2 * n - 1\n    return max_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n\n    def find_path(row: int, col: int) -> int:\n        if row == n - 1 and col == n - 1:\n            return cost[row][col]\n        if row < n - 1:\n            down = find_path(row + 1, col)\n        else:\n            down = float('-inf')\n        if col < n - 1:\n            right = find_path(row, col + 1)\n        else:\n            right = float('-inf')\n        return cost[row][col] + max(down, right)\n    max_sum = find_path(0, 0)\n    number_of_cells = 2 * n - 1\n    return max_sum / number_of_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    path_length = 2 * N - 1\n    return dp[-1][-1] / path_length", "from typing import List\nimport sys\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[-sys.maxsize] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + cost[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j - 1] + cost[i][j])\n    path_length = 2 * n - 1\n    return dp[n - 1][n - 1] / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cells = 2 * n - 1\n    max_average = dp[-1][-1] / total_cells\n    return max_average", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cells = 2 * n - 1\n    return dp[n - 1][n - 1] / total_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    path_length = 2 * n - 1\n    max_average = dp[-1][-1] / path_length\n    return max_average", "from typing import List, Tuple\nimport heapq\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[float('-inf')] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    pq: List[Tuple[float, int, int]] = []\n    heapq.heappush(pq, (-cost[0][0], 0, 0))\n    while pq:\n        negative_average, i, j = heapq.heappop(pq)\n        average_so_far = -negative_average\n        if i == n - 1 and j == n - 1:\n            num_steps = i + j + 1\n            return average_so_far / num_steps\n        if j + 1 < n:\n            potential_average = average_so_far + cost[i][j + 1]\n            if potential_average > dp[i][j + 1]:\n                dp[i][j + 1] = potential_average\n                heapq.heappush(pq, (-potential_average, i, j + 1))\n        if i + 1 < n:\n            potential_average = average_so_far + cost[i + 1][j]\n            if potential_average > dp[i + 1][j]:\n                dp[i + 1][j] = potential_average\n                heapq.heappush(pq, (-potential_average, i + 1, j))\n    return 0.0", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    number_of_cells = 2 * n - 1\n    return total_cost / number_of_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[n - 1][n - 1]\n    number_of_cells = 2 * n - 1\n    return total_cost / number_of_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[-1][-1]\n    num_cells = 2 * n - 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    path_length = 2 * N - 1\n    return dp[N - 1][N - 1] / path_length", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n\n    def maxPathSum(r: int, c: int) -> int:\n        if r == 0 and c == 0:\n            return cost[0][0]\n        if r < 0 or c < 0:\n            return float('-inf')\n        if dp[r][c] != -1:\n            return dp[r][c]\n        dp[r][c] = cost[r][c] + max(maxPathSum(r - 1, c), maxPathSum(r, c - 1))\n        return dp[r][c]\n    n = len(cost)\n    dp = [[-1] * n for _ in range(n)]\n    max_sum = maxPathSum(n - 1, n - 1)\n    return max_sum / (2 * n - 1)", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[-1][-1]\n    num_cells = 2 * n - 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    if N == 0:\n        return 0.0\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n    for j in range(1, N):\n        dp[0][j] = dp[0][j - 1] + cost[0][j]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cells = 2 * N - 1\n    return dp[-1][-1] / total_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    total_cost = dp[-1][-1]\n    num_cells = 2 * n - 1\n    return total_cost / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = cost[i][j] + max(dp[i - 1][j], dp[i][j - 1])\n    max_sum = dp[n - 1][n - 1]\n    num_cells = 2 * n - 1\n    return max_sum / num_cells", "from typing import List\n\ndef maxAverageOfPath(cost: List[List[int]]) -> float:\n    N = len(cost)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = cost[0][0]\n    for i in range(1, N):\n        dp[i][0] = dp[i - 1][0] + cost[i][0]\n        dp[0][i] = dp[0][i - 1] + cost[0][i]\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + cost[i][j]\n    max_cost = dp[-1][-1]\n    num_cells = 2 * N - 1\n    return max_cost / num_cells"], "outputs": "[[1.0], [2.6666666666666665], [58.0], [1.0], [-4.2], [60.4], [0.0], [10.428571428571429], [1.8], [366.6666666666667]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1]]], [[[1, 2], [3, 4]]], [[[10, 20, 30], [40, 50, 60], [70, 80, 90]]], [[[1, 1, 1], [1, 1, 1], [1, 1, 1]]], [[[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]], [[[100, 1, 1], [1, 100, 1], [1, 1, 100]]], [[[0, 0, 0], [0, 0, 0], [0, 0, 0]]], [[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]], [[[-1, 2, 3], [4, -5, 6], [7, 8, -9]]], [[[500, 400], [300, 200]]]]", "input_output_examples": "[[[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]]], [[5.2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9361904761904762, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/722", "original_requirement": "from typing import Dict\nfrom typing import Tuple\n\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"", "repaired_requirement": "def filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    \"\"\"\n    The input is given as:\n    - a dictionary where the key is a student name (string) and the value is a tuple of two floats representing (student_height, student_weight),\n    - a minimal height (float),\n    - a minimal weight (float).\n\n    Write a function to filter and return a dictionary of students whose height is greater than or equal to the minimal height and whose weight is greater than or equal to the minimal weight.\n\n    Example:\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70) == {'Cierra Vega': (6.2, 70)}\n    \"\"\"", "original_clusters": {"requirement": "from typing import Dict\nfrom typing import Tuple\n\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n\"\"\"\nThe input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\n\"\"\"", "entry_point": "filter_data", "cluster_list": [{"programs_str": ["from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: measurements for name, measurements in students.items() if measurements[0] > h and measurements[1] > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: data for name, data in students.items() if data[0] > h and data[1] > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height > h and weight > w}"], "outputs": "[[{}], [{}], [{'Alice Smith': (6.0, 80), 'Bob Jones': (5.7, 60)}], [{}], [{}], [{}], [{'Tall Person': (7.0, 90)}], [{}], [{}], [{}]]", "probability": 0.8, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70], [{}], [{'Cierra Vega': (6.2, 70)}]]]"}, {"programs_str": ["from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: hw for name, hw in students.items() if hw[0] >= h and hw[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}"], "outputs": "[[{'Cierra Vega': (6.2, 70)}], [{'Jane Roe': (5.5, 55)}], [{'Alice Smith': (6.0, 80), 'Bob Jones': (5.7, 60)}], [{'Cierra Vega': (6.2, 70)}], [{'Cierra Vega': (6.2, 70)}], [{}], [{'Tall Person': (7.0, 90)}], [{}], [{'Multiple Students': (6.5, 80)}], [{'Edge Case Student': (6.0, 70)}]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70], [{'John Doe': (5.4, 50), 'Jane Roe': (5.5, 55)}, 5.5, 55], [{'Alice Smith': (6.0, 80), 'Bob Jones': (5.7, 60)}, 5.5, 55], [{'Cierra Vega': (6.2, 70)}, 6.2, 70], [{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65)}, 6.2, 70], [{}, 6.0, 70], [{'Tall Person': (7.0, 90), 'Small Person': (5.0, 40)}, 5.5, 55], [{'Single Student': (5.9, 65)}, 6.0, 70], [{'Multiple Students': (6.5, 80)}, 6.5, 80], [{'Edge Case Student': (6.0, 70)}, 6.0, 70]]", "input_output_examples": "[[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70]], [[{'Cierra Vega': (6.2, 70)}]]]", "weighted_test_consistency": 0.2, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    \"\"\"\n    The input is given as:\n    - a dictionary where the key is a student name (string) and the value is a tuple of two floats representing (student_height, student_weight),\n    - a minimal height (float),\n    - a minimal weight (float).\n\n    Write a function to filter and return a dictionary of students whose height is greater than or equal to the minimal height and whose weight is greater than or equal to the minimal weight.\n\n    Example:\n    assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70) == {'Cierra Vega': (6.2, 70)}\n    \"\"\"", "entry_point": "filter_data", "cluster_list": [{"programs_str": ["from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: data for name, data in students.items() if data[0] >= h and data[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: details for name, details in students.items() if details[0] >= h and details[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: data for name, data in students.items() if data[0] >= h and data[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: data for name, data in students.items() if data[0] >= h and data[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: stats for name, stats in students.items() if stats[0] >= h and stats[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: data for name, data in students.items() if data[0] >= h and data[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: stats for name, stats in students.items() if stats[0] >= h and stats[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: data for name, data in students.items() if data[0] >= h and data[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: details for name, details in students.items() if details[0] >= h and details[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: data for name, data in students.items() if data[0] >= h and data[1] >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= h and weight >= w}", "from typing import Dict, Tuple\n\ndef filter_data(students: Dict[str, Tuple[float, float]], h: float, w: float) -> Dict[str, Tuple[float, float]]:\n    return {name: stats for name, stats in students.items() if stats[0] >= h and stats[1] >= w}"], "outputs": "[[{'Cierra Vega': (6.2, 70)}], [{'Jane Roe': (5.5, 55)}], [{'Alice Smith': (6.0, 80), 'Bob Jones': (5.7, 60)}], [{'Cierra Vega': (6.2, 70)}], [{'Cierra Vega': (6.2, 70)}], [{}], [{'Tall Person': (7.0, 90)}], [{}], [{'Multiple Students': (6.5, 80)}], [{'Edge Case Student': (6.0, 70)}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70], [{'John Doe': (5.4, 50), 'Jane Roe': (5.5, 55)}, 5.5, 55], [{'Alice Smith': (6.0, 80), 'Bob Jones': (5.7, 60)}, 5.5, 55], [{'Cierra Vega': (6.2, 70)}, 6.2, 70], [{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65)}, 6.2, 70], [{}, 6.0, 70], [{'Tall Person': (7.0, 90), 'Small Person': (5.0, 40)}, 5.5, 55], [{'Single Student': (5.9, 65)}, 6.0, 70], [{'Multiple Students': (6.5, 80)}, 6.5, 80], [{'Edge Case Student': (6.0, 70)}, 6.0, 70]]", "input_output_examples": "[[[{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70]], [[{'Cierra Vega': (6.2, 70)}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.09999999999999998, "original_avg_pass_rate": 0.9116071428571428, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/723", "original_requirement": "from typing import List\n\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n\"\"\"\nThe input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\n\"\"\"", "entry_point": "count_same_pair", "cluster_list": [{"programs_str": ["from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for a, b in zip(nums1, nums2) if a == b))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for i in range(len(nums1)) if nums1[i] == nums2[i]))", "from typing import List\n\ndef count_same_pair(nums1: List[int], nums2: List[int]) -> int:\n    return sum((1 for x, y in zip(nums1, nums2) if x == y))"], "outputs": "[[1], [0], [1], [0], [5], [0], [1], [4], [4], [4], [4], [0], [2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], [[], []], [[1], [1]], [[1], [2]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5], [0, 0, 0, 0, 0]], [[1, 2, 3], [1, 3, 2]], [[1, 1, 1, 1], [1, 1, 1, 1]], [[1, 2, 3, 4, 5, 6, 7], [2, 2, 3, 1, 2, 6, 7]], [[10, 20, 30, 40, 50, 60], [10, 20, 35, 40, 55, 60]], [[0, 0, 0, 0], [0, 0, 0, 0]], [[1, 2, 3, 4], [4, 3, 2, 1]], [[10, 20, 30, 40], [10, 25, 30, 45]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/724", "original_requirement": "def power_base_sum(base: int, power: int) -> int:\n\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def power_base_sum(base: int, power: int) -> int:\n\"\"\"\nWrite a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\nassert power_base_sum(2,100)==115\n\"\"\"", "entry_point": "power_base_sum", "cluster_list": [{"programs_str": ["from typing import int\n\ndef power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "from typing import List\n\ndef power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))\nfrom typing import Callable", "from typing import List\n\ndef power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum(map(int, str(base ** power)))", "from typing import int\n\ndef power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "import math\n\ndef power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))", "from typing import int\n\ndef power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))", "from typing import int\n\ndef power_base_sum(base: int, power: int) -> int:\n    result = base ** power\n    return sum((int(digit) for digit in str(result)))", "import math\n\ndef power_base_sum(base: int, power: int) -> int:\n    result = pow(base, power)\n    return sum((int(digit) for digit in str(result)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum(map(int, str(base ** power)))", "def power_base_sum(base: int, power: int) -> int:\n    return sum((int(digit) for digit in str(base ** power)))"], "outputs": "[['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout'], ['Timeout']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2, 100], [5, 3], [10, 5], [0, 1], [1, 100], [2, 0], [9, 15], [99, 2], [25, 25], [7, 7], [2, 50]]", "input_output_examples": "[[[2, 100]], [[115]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/725", "original_requirement": "from typing import List\n\n\ndef extract_quotation(text1: str) -> List[str]:\n\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef extract_quotation(text1: str) -> List[str]:\n\"\"\"\nWrite a function to extract values between quotation marks \" \" of the given string.\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\n\"\"\"", "entry_point": "extract_quotation", "cluster_list": [{"programs_str": ["from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "import re\nfrom typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "import re\nfrom typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "import re\nfrom typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "import re\nfrom typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "import re\nfrom typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "import re\nfrom typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "import re\nfrom typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "from typing import List\nimport re\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)", "import re\nfrom typing import List\n\ndef extract_quotation(text1: str) -> List[str]:\n    return re.findall('\"(.*?)\"', text1)"], "outputs": "[[['A53', 'multi', 'Processor']], [['quotes']], [['', '']], [['SingleQuote']], [['double', 'nested ', ' quotes']], [['quotes', 'a single']], [['Test']], [[]], [['quote at the']], [['Leading quote']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Cortex \"A53\" Based \"multi\" tasking \"Processor\"'], ['No \"quotes\" here'], ['Empty \"\" quotes \"\"'], ['\"SingleQuote\"'], ['Mixed \"double\" and \"nested \"inner\" quotes\"'], ['Multiple \"quotes\" in \"a single\" line'], ['Escape sequence test: \"Test\" quote\"'], ['No quotes'], ['Trailing \"quote at the\" end'], ['\"Leading quote\" at the beginning']]", "input_output_examples": "[[['Cortex \"A53\" Based \"multi\" tasking \"Processor\"']], [[['A53', 'multi', 'Processor']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/726", "original_requirement": "from typing import Tuple\n\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n\"\"\"\nWrite a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\n\"\"\"", "entry_point": "multiply_elements", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))", "from typing import Tuple\n\ndef multiply_elements(test_tup: Tuple[int, ...]) -> Tuple[int, ...]:\n    return tuple((test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1)))"], "outputs": "[[(5, 35, 56, 80)], [(6, 12)], [(200, 600, 1200, 2000, 3000)], [(5, 50)], [()], [()], [(0, 200)], [(0, 0, 2, -6)], [(0, 0, 0, 0)], [(888888887111111112, 691358023308641976)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(1, 5, 7, 8, 10)], [(2, 3, 4)], [(10, 20, 30, 40, 50, 60)], [(-1, -5, -10)], [()], [(5,)], [(0, 10, 20)], [(1, 0, -1, -2, 3)], [(100, 0, 200, 0, 300)], [(999999999, 888888888, 777777777)]]", "input_output_examples": "[[[(1, 5, 7, 8, 10)]], [[(5, 35, 56, 80)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/728", "original_requirement": "from typing import List\n\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n\"\"\"\nWrite a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\nassert sum_list([10,20,30],[15,25,35])==[25,45,65]\n\"\"\"", "entry_point": "sum_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [x + y for x, y in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]", "from typing import List\n\ndef sum_list(lst1: List[int], lst2: List[int]) -> List[int]:\n    return [a + b for a, b in zip(lst1, lst2)]"], "outputs": "[[[5, 7, 9]], [[25, 45, 65]], [[]], [[0, 0, 0]], [[3]], [[11]], [[400, 600]], [[0, 0, 0]], [[6, 8, 10]], [[2147483648, -2147483649]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3], [4, 5, 6]], [[10, 20, 30], [15, 25, 35]], [[], []], [[0, 0, 0], [0, 0, 0]], [[1], [2]], [[1, 2, 3], [10]], [[100, 200], [300, 400]], [[1, -2, 3], [-1, 2, -3]], [[1, 2, 3, 4], [5, 6, 7]], [[2147483647, -2147483648], [1, -1]]]", "input_output_examples": "[[[[10, 20, 30], [15, 25, 35]]], [[[25, 45, 65]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/730", "original_requirement": "from typing import List\n\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n\"\"\"\nWrite a function to remove consecutive duplicates of a given list.\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n\"\"\"", "entry_point": "consecutive_duplicates", "cluster_list": [{"programs_str": ["from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or num != nums[i - 1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in nums:\n        if not result or result[-1] != i:\n            result.append(i)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or num != nums[i - 1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or num != nums[i - 1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or num != nums[i - 1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    return [nums[i] for i in range(len(nums)) if i == 0 or nums[i] != nums[i - 1]]", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i in range(len(nums)):\n        if i == 0 or nums[i] != nums[i - 1]:\n            result.append(nums[i])\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or num != nums[i - 1]:\n            result.append(num)\n    return result", "from typing import List\n\ndef consecutive_duplicates(nums: List[int]) -> List[int]:\n    result = []\n    for i, num in enumerate(nums):\n        if i == 0 or num != nums[i - 1]:\n            result.append(num)\n    return result"], "outputs": "[[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]], [[]], [[1]], [[1]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5]], [[1, 2, 3, 4, 5, 6]], [[5, 6, 7, 8]], [[5, 6, 7, 8, 9, 10]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]], [[]], [[1]], [[1, 1, 1, 1, 1]], [[1, 2, 3, 4, 5]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]], [[1, 2, 2, 2, 3, 4, 4, 5]], [[1, 2, 3, 4, 4, 4, 5, 5, 6]], [[5, 5, 6, 6, 6, 6, 7, 7, 8]], [[5, 6, 7, 8, 9, 10]]]", "input_output_examples": "[[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]], [[[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/731", "original_requirement": "def lateralsurface_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def lateralsurface_cone(r: float, h: float) -> float:\n\"\"\"\nWrite a function to find the lateral surface area of a cone given radius r and the height h.\nassert lateralsurface_cone(5,12)==204.20352248333654\n\"\"\"", "entry_point": "lateralsurface_cone", "cluster_list": [{"programs_str": ["import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    slant_height = math.sqrt(r ** 2 + h ** 2)\n    lateral_surface_area = math.pi * r * slant_height\n    return lateral_surface_area", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)", "import math\n\ndef lateralsurface_cone(r: float, h: float) -> float:\n    return math.pi * r * math.sqrt(r ** 2 + h ** 2)"], "outputs": "[[204.20352248333654], [86.0539804552489], [0.0], [78.53981633974483], [3.1415926537468734e-05], [4.442882938158366], [4442882.938158366], [40.43084501875301], [-204.20352248333654], [204.20352248333654], [-71.77697052236633], [0.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5, 12], [3.5, 7], [0, 10], [5, 0], [1e-05, 1], [1, 1], [1000, 1000], [2.5, 4.5], [-5, 12], [5, -12], [-3, -7], [0, 0]]", "input_output_examples": "[[[5, 12]], [[204.20352248333654]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/732", "original_requirement": "def replace_specialchar(text: str) -> str:\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def replace_specialchar(text: str) -> str:\n\"\"\"\nWrite a function to replace all occurrences of spaces, commas, or dots with a colon.\nassert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n\"\"\"", "entry_point": "replace_specialchar", "cluster_list": [{"programs_str": ["def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    import re\n    return re.sub('[ ,.]', ':', text)", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    import re\n    return re.sub('[ ,.]', ':', text)", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "import re\n\ndef replace_specialchar(text: str) -> str:\n    return re.sub('[ ,\\\\.]', ':', text)", "from typing import str\n\ndef replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    import re\n    return re.sub('[ ,.]', ':', text)", "def replace_specialchar(text: str) -> str:\n    import re\n    return re.sub('[ ,.]', ':', text)", "def replace_specialchar(text: str) -> str:\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "import re\n\ndef replace_specialchar(text: str) -> str:\n    return re.sub('[ ,.]', ':', text)", "import re\n\ndef replace_specialchar(text: str) -> str:\n    return re.sub('[ ,.]', ':', text)", "import re\n\ndef replace_specialchar(text: str) -> str:\n    return re.sub('[ ,.]', ':', text)", "def replace_specialchar(text: str) -> str:\n    import re\n    return re.sub('[ ,.]', ':', text)", "def replace_specialchar(text: str) -> str:\n    from typing import Any\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "def replace_specialchar(text: str) -> str:\n    import re\n    return re.sub('[ ,.]', ':', text)", "def replace_specialchar(text: str) -> str:\n    import re\n    return re.sub('[ ,.]', ':', text)"], "outputs": "[['Python:language::Programming:language:'], ['Hello:world:This:is:a:test:'], ['a:b:c:d:e'], [':::::'], [':::::::::'], ['No:special:characters'], ['::'], ['Single:Space'], [''], ['Multiple:spaces'], ['::spacing::']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Python language, Programming language.'], ['Hello,world.This is a test.'], ['a b c,d.e'], ['.....'], [' , . , . '], ['No special characters'], [' ,'], ['Single.Space'], [''], ['Multiple spaces'], [' ,spacing, ']]", "input_output_examples": "[[['Python language, Programming language.']], [['Python:language::Programming:language:']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/733", "original_requirement": "from typing import List\n\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n\"\"\"\nWrite a function to find the index of the first occurrence of a given number in a sorted array.\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\n\"\"\"", "entry_point": "find_first_occurrence", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] < x:\n            low = mid + 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            result = mid\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid - 1] != x:\n                return mid\n            else:\n                right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    first_occurrence = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            first_occurrence = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return first_occurrence", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    first_occurrence = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            first_occurrence = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return first_occurrence", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    left, right = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if A[mid] == x:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef find_first_occurrence(A: List[int], x: int) -> int:\n    low, high = (0, len(A) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            result = mid\n            high = mid - 1\n        elif A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result"], "outputs": "[[1], [1], [0], [8], [0], [0], [-1], [-1], [0], [-1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5], [[1, 3, 3, 3, 3, 4, 5, 7, 7, 8], 3], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 9], [[4, 4, 4, 4, 4, 4, 4, 4, 4], 4], [[1, 1, 1, 1, 1, 1, 1, 1, 1], 1], [[1, 2, 3, 4, 5, 6, 7, 8, 9], 10], [[], 5], [[1], 1], [[1], 2]]", "input_output_examples": "[[[[2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/734", "original_requirement": "from typing import List\n\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. \nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"", "repaired_requirement": "def sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to calculate the sum of the products of all contiguous subarrays \n    (sublists formed by consecutive elements) of a given list. For each subarray, compute the \n    product of its elements and add it to the total sum.\n\n    Example:\n    assert sum_Of_Subarray_Prod([1,2,3]) == 20\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find sum of products of all possible sublists of a given list. \nassert sum_Of_Subarray_Prod([1,2,3]) == 20\n\"\"\"", "entry_point": "sum_Of_Subarray_Prod", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        current_product = 1\n        for end in range(start, n):\n            current_product *= arr[end]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        current_product = 1\n        for j in range(i, n):\n            current_product *= arr[j]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        product = 1\n        for end in range(start, n):\n            product *= arr[end]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = arr[i]\n        total_sum += product\n        for j in range(i + 1, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        product = 1\n        for end in range(start, n):\n            product *= arr[end]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        current_prod = 1\n        for end in range(start, n):\n            current_prod *= arr[end]\n            total_sum += current_prod\n    return total_sum"], "outputs": "[[20], [29], [1], [0], [5], [-12], [0], [272100], [1000000], [-4], [0]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nfrom itertools import combinations\nimport math\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for r in range(1, n + 1):\n        for subset in combinations(arr, r):\n            total_sum += math.prod(subset)\n    return total_sum", "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nfrom operator import mul\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for r in range(1, n + 1):\n        for subarray in combinations(arr, r):\n            product = reduce(mul, subarray, 1)\n            total_sum += product\n    return total_sum", "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n\n    def product(sublist):\n        return reduce(lambda x, y: x * y, sublist, 1)\n    n = len(arr)\n    total_sum = 0\n    for r in range(1, n + 1):\n        for sublist in combinations(arr, r):\n            total_sum += product(sublist)\n    return total_sum", "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1):\n        for sublist in combinations(arr, length):\n            product = reduce(operator.mul, sublist, 1)\n            total_sum += product\n    return total_sum", "from typing import List\nfrom itertools import combinations\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for sub_size in range(1, n + 1):\n        for sub in combinations(arr, sub_size):\n            prod = 1\n            for num in sub:\n                prod *= num\n            total_sum += prod\n    return total_sum", "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nfrom operator import mul\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    for l in range(1, len(arr) + 1):\n        for sublist in combinations(arr, l):\n            total_sum += reduce(mul, sublist, 1)\n    return total_sum", "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for r in range(1, n + 1):\n        for combo in combinations(arr, r):\n            prod = reduce(operator.mul, combo, 1)\n            total_sum += prod\n    return total_sum", "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for r in range(1, n + 1):\n        for sub in combinations(arr, r):\n            total_sum += reduce(operator.mul, sub, 1)\n    return total_sum", "from typing import List\nfrom itertools import combinations\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    for length in range(1, len(arr) + 1):\n        for sublist in combinations(arr, length):\n            prod = 1\n            for num in sublist:\n                prod *= num\n            total_sum += prod\n    return total_sum", "from typing import List\nfrom itertools import combinations\nfrom functools import reduce\nimport operator\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    for r in range(1, len(arr) + 1):\n        for sublist in combinations(arr, r):\n            total_sum += reduce(operator.mul, sublist, 1)\n    return total_sum"], "outputs": "[[23], [29], [1], [0], [5], [-9], [0], [293600], [1000000], [-1], [-1]]", "probability": 0.5, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3]], [23], [20]]]"}], "entropy": 1.0, "llm_generated_inputs": "[[[1, 2, 3]], [[4, 5]], [[1]], [[0]], [[0, 1, 2]], [[1, -2, 3]], [[]], [[10, 20, 30, 40]], [[1000000]], [[-1, -2, -3]], [[1, 0, -1]]]", "input_output_examples": "[[[[1, 2, 3]]], [[20]]]", "weighted_test_consistency": 0.5, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    \"\"\"\n    Write a python function to calculate the sum of the products of all contiguous subarrays \n    (sublists formed by consecutive elements) of a given list. For each subarray, compute the \n    product of its elements and add it to the total sum.\n\n    Example:\n    assert sum_Of_Subarray_Prod([1,2,3]) == 20\n    \"\"\"", "entry_point": "sum_Of_Subarray_Prod", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            result += prod\n    return result", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        product = 1\n        for end in range(start, n):\n            product *= arr[end]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        subarray_prod = 1\n        for j in range(i, n):\n            subarray_prod *= arr[j]\n            total_sum += subarray_prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        product = 1\n        for end in range(start, n):\n            product *= arr[end]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for start in range(n):\n        subarray_product = 1\n        for end in range(start, n):\n            subarray_product *= arr[end]\n            total_sum += subarray_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        prod = 1\n        for j in range(i, n):\n            prod *= arr[j]\n            total_sum += prod\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        current_product = 1\n        for j in range(i, n):\n            current_product *= arr[j]\n            total_sum += current_product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for start in range(n):\n        product = 1\n        for end in range(start, n):\n            product *= arr[end]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            total_sum += product\n    return total_sum", "from typing import List\n\ndef sum_Of_Subarray_Prod(arr: List[int]) -> int:\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n    return result"], "outputs": "[[20], [29], [1], [0], [5], [-12], [0], [272100], [1000000], [-4], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[4, 5]], [[1]], [[0]], [[0, 1, 2]], [[1, -2, 3]], [[]], [[10, 20, 30, 40]], [[1000000]], [[-1, -2, -3]], [[1, 0, -1]]]", "input_output_examples": "[[[[1, 2, 3]]], [[20]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9981308411214954, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/735", "original_requirement": "def toggle_middle_bits(n: int) -> int:\n\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. \nassert toggle_middle_bits(9) == 15\n\"\"\"", "repaired_requirement": "def toggle_middle_bits(n: int) -> int:\n    \"\"\"\n    Toggle all bits of the integer `n` except for the most significant bit and the least significant bit.\n    If `n` has fewer than 3 bits, return `n` unchanged.\n    The function should ensure that the result has the same number of bits as `n`.\n    \n    Example:\n    assert toggle_middle_bits(9) == 15\n    \"\"\"", "original_clusters": {"requirement": "def toggle_middle_bits(n: int) -> int:\n\"\"\"\nWrite a python function to toggle bits of the number except the first and the last bit. \nassert toggle_middle_bits(9) == 15\n\"\"\"", "entry_point": "toggle_middle_bits", "cluster_list": [{"programs_str": ["def toggle_middle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    if num_bits < 3:\n        return n\n    first_bit = 1 << num_bits - 1\n    last_bit = 1\n    mask = first_bit | last_bit\n    toggled = ~n\n    result = toggled ^ mask\n    relevant_mask = (1 << num_bits) - 1\n    result = result & relevant_mask\n    return result", "def toggle_middle_bits(n: int) -> int:\n    binary = bin(n)[2:]\n    if len(binary) <= 2:\n        return n\n    toggled_middle = ''.join(('1' if bit == '0' else '0' for bit in binary[1:-1]))\n    toggled_binary = binary[0] + toggled_middle + binary[-1]\n    return int(toggled_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    if n == 0:\n        return 0\n    num_bits = n.bit_length()\n    if num_bits <= 2:\n        return n\n    mask = (1 << num_bits - 1) - 1\n    mask ^= 1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    if num_bits <= 2:\n        return n\n    mask = (1 << num_bits) - 1\n    toggle_mask = mask & ~(1 | 1 << num_bits - 1)\n    return n ^ toggle_mask", "def toggle_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    bit_length = n.bit_length()\n    mask = (1 << bit_length - 1) - 1\n    mask ^= 1\n    result = n ^ mask\n    return result", "def toggle_middle_bits(n: int) -> int:\n    bin_str = bin(n)[2:]\n    if len(bin_str) <= 2:\n        return n\n    first_bit = bin_str[0]\n    middle_bits = bin_str[1:-1]\n    last_bit = bin_str[-1]\n    toggled_middle_bits = ''.join(('1' if bit == '0' else '0' for bit in middle_bits))\n    new_bin_str = first_bit + toggled_middle_bits + last_bit\n    return int(new_bin_str, 2)", "def toggle_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    num_bits = n.bit_length()\n    mask = (1 << num_bits - 1) - 1\n    mask = mask ^ 1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    if num_bits < 3:\n        return n\n    mask = (1 << num_bits - 1) - 1 ^ 1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    if n == 0:\n        return 0\n    num_bits = n.bit_length()\n    if num_bits <= 2:\n        return n\n    mask = (1 << num_bits - 1) - 1 & ~1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    bin_n = bin(n)[2:]\n    if len(bin_n) <= 2:\n        return n\n    first_bit = bin_n[0]\n    last_bit = bin_n[-1]\n    middle_bits = bin_n[1:-1]\n    toggled_middle_bits = ''.join(('1' if bit == '0' else '0' for bit in middle_bits))\n    toggled_bin = first_bit + toggled_middle_bits + last_bit\n    return int(toggled_bin, 2)", "def toggle_middle_bits(n: int) -> int:\n    if n == 0:\n        return 0\n    num_bits = n.bit_length()\n    if num_bits <= 2:\n        return n\n    toggle_mask = (1 << num_bits - 1) - 1\n    toggle_mask &= ~(1 | 1 << num_bits - 1)\n    return n ^ toggle_mask", "def toggle_middle_bits(n: int) -> int:\n    bin_n = bin(n)[2:]\n    if len(bin_n) <= 2:\n        return n\n    first_bit = bin_n[0]\n    last_bit = bin_n[-1]\n    middle_bits = ''.join(('1' if b == '0' else '0' for b in bin_n[1:-1]))\n    toggled_bin = first_bit + middle_bits + last_bit\n    return int(toggled_bin, 2)", "def toggle_middle_bits(n: int) -> int:\n    if n == 0:\n        return 0\n    bit_length = n.bit_length()\n    if bit_length <= 2:\n        return n\n    mask = (1 << bit_length - 1) - 2\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    if n == 0:\n        return 0\n    num_bits = n.bit_length()\n    if num_bits <= 2:\n        return n\n    mask = (1 << num_bits - 1) - 1 ^ 1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    bin_representation = bin(n)[2:]\n    if len(bin_representation) < 3:\n        return n\n    first_bit = bin_representation[0]\n    last_bit = bin_representation[-1]\n    toggled_middle_bits = ''.join(('1' if bit == '0' else '0' for bit in bin_representation[1:-1]))\n    toggled_bin_representation = first_bit + toggled_middle_bits + last_bit\n    return int(toggled_bin_representation, 2)", "def toggle_middle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    if num_bits <= 2:\n        return n\n    middle_bits_mask = (1 << num_bits - 2) - 1\n    middle_bits_mask <<= 1\n    return n ^ middle_bits_mask", "def toggle_middle_bits(n: int) -> int:\n    if n == 0:\n        return 0\n    num_bits = n.bit_length()\n    if num_bits <= 2:\n        return n\n    mask = (1 << num_bits) - 1 ^ 1 ^ 1 << num_bits - 1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    binary_rep = bin(n)[2:]\n    if len(binary_rep) <= 2:\n        return n\n    first_bit = binary_rep[0]\n    last_bit = binary_rep[-1]\n    middle_bits = ''.join(('1' if bit == '0' else '0' for bit in binary_rep[1:-1]))\n    toggled_binary = first_bit + middle_bits + last_bit\n    return int(toggled_binary, 2)"], "outputs": "[[15], [6], [1], [0], [129], [513], [2], [16385], [1073741825]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def toggle_middle_bits(n: int) -> int:\n    if n == 0 or n == 1:\n        return n\n    num_bits = n.bit_length()\n    if num_bits < 3:\n        return n\n    mask = (1 << num_bits - 1) - 1\n    mask ^= 1\n    mask <<= 1\n    mask ^= 1\n    return n ^ mask"], "outputs": "[[4], [1], [1], [0], [2], [2], [2], [2], [2]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [4], [15]]]"}, {"programs_str": ["def toggle_middle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    if num_bits <= 1:\n        return n\n    middle_mask = (1 << num_bits - 1) - 1\n    middle_mask ^= 1\n    middle_mask = middle_mask << 1 | 1\n    result = n ^ middle_mask\n    return result"], "outputs": "[[4], [1], [1], [0], [2], [2], [3], [2], [2]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[9], [4], [15]]]"}], "entropy": 0.3589962496465303, "llm_generated_inputs": "[[9], [4], [1], [0], [255], [1023], [2], [32767], [2147483647]]", "input_output_examples": "[[[9]], [[15]]]", "weighted_test_consistency": 0.9, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def toggle_middle_bits(n: int) -> int:\n    \"\"\"\n    Toggle all bits of the integer `n` except for the most significant bit and the least significant bit.\n    If `n` has fewer than 3 bits, return `n` unchanged.\n    The function should ensure that the result has the same number of bits as `n`.\n    \n    Example:\n    assert toggle_middle_bits(9) == 15\n    \"\"\"", "entry_point": "toggle_middle_bits", "cluster_list": [{"programs_str": ["def toggle_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    num_bits = n.bit_length()\n    mask = (1 << num_bits) - 1\n    mask ^= 1 << num_bits - 1\n    mask ^= 1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    if n == 0 or n.bit_length() < 3:\n        return n\n    num_bits = n.bit_length()\n    mask = (1 << num_bits) - 1\n    most_significant_bit = 1 << num_bits - 1\n    least_significant_bit = 1\n    middle_bits_mask = mask ^ (most_significant_bit | least_significant_bit)\n    toggled_n = n ^ middle_bits_mask\n    return toggled_n", "def toggle_middle_bits(n: int) -> int:\n    bit_length = n.bit_length()\n    if bit_length < 3:\n        return n\n    most_significant_bit = 1 << bit_length - 1\n    least_significant_bit = 1\n    full_mask = (1 << bit_length) - 1\n    mask = full_mask ^ (most_significant_bit | least_significant_bit)\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    import math\n\n    def bit_length(value: int) -> int:\n        return value.bit_length()\n    bits = bit_length(n)\n    if bits < 3:\n        return n\n    msb = 1 << bits - 1\n    lsb = 1\n    middle_mask = msb - 1 ^ lsb\n    toggled_n = n ^ middle_mask\n    return toggled_n", "def toggle_middle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    if num_bits < 3:\n        return n\n    most_significant_bit = 1 << num_bits - 1\n    least_significant_bit = 1\n    mask = (1 << num_bits) - 1\n    middle_mask = mask ^ (most_significant_bit | least_significant_bit)\n    result = n ^ middle_mask\n    return result", "def toggle_middle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    if num_bits < 3:\n        return n\n    mask = (1 << num_bits) - 1\n    msb_mask = 1 << num_bits - 1\n    lsb_mask = 1\n    toggle_mask = mask ^ (msb_mask | lsb_mask)\n    return n ^ toggle_mask", "def toggle_middle_bits(n: int) -> int:\n    bit_length = n.bit_length()\n    if bit_length < 3:\n        return n\n    mask = (1 << bit_length) - 1\n    mask ^= 1 << bit_length - 1\n    mask ^= 1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    if n.bit_length() < 3:\n        return n\n    num_bits = n.bit_length()\n    middle_mask = (1 << num_bits - 1) - 1 & ~1\n    return n ^ middle_mask", "def toggle_middle_bits(n: int) -> int:\n    bit_length = n.bit_length()\n    if bit_length < 3:\n        return n\n    mask = (1 << bit_length) - 1\n    mask ^= 1 << bit_length - 1\n    mask ^= 1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    num_bits = n.bit_length()\n    mask = (1 << num_bits) - 1\n    msb_mask = 1 << num_bits - 1\n    lsb_mask = 1\n    middle_mask = mask & ~msb_mask & ~lsb_mask\n    toggled = n ^ middle_mask\n    return toggled", "def toggle_middle_bits(n: int) -> int:\n    binary_n = bin(n)[2:]\n    if len(binary_n) < 3:\n        return n\n    toggled_binary = binary_n[0] + ''.join(('1' if bit == '0' else '0' for bit in binary_n[1:-1])) + binary_n[-1]\n    return int(toggled_binary, 2)", "def toggle_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    num_bits = n.bit_length()\n    mask = (1 << num_bits) - 1\n    mask ^= 1 << num_bits - 1\n    mask ^= 1\n    return n ^ mask", "def toggle_middle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    if num_bits < 3:\n        return n\n    toggle_mask = (1 << num_bits) - 1\n    toggle_mask &= ~(1 << num_bits - 1 | 1)\n    return n ^ toggle_mask", "def toggle_middle_bits(n: int) -> int:\n    if n.bit_length() < 3:\n        return n\n    most_significant_bit = 1 << n.bit_length() - 1\n    least_significant_bit = 1\n    mask = most_significant_bit | least_significant_bit\n    full_mask = (1 << n.bit_length()) - 1\n    toggle_mask = full_mask ^ mask\n    return n ^ toggle_mask", "def toggle_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    bit_length = n.bit_length()\n    most_significant_bit = 1 << bit_length - 1\n    least_significant_bit = 1\n    all_bits_mask = (1 << bit_length) - 1\n    middle_bits_mask = all_bits_mask & ~most_significant_bit & ~least_significant_bit\n    toggled_middle_bits = n ^ middle_bits_mask\n    return toggled_middle_bits", "def toggle_middle_bits(n: int) -> int:\n    bit_length = n.bit_length()\n    if bit_length < 3:\n        return n\n    msb_mask = 1 << bit_length - 1\n    lsb_mask = 1\n    all_bits_mask = (1 << bit_length) - 1\n    middle_bits_mask = all_bits_mask & ~msb_mask & ~lsb_mask\n    return n ^ middle_bits_mask", "def toggle_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    num_bits = n.bit_length()\n    most_significant_bit = 1 << num_bits - 1\n    least_significant_bit = 1\n    full_mask = (1 << num_bits) - 1\n    middle_mask = full_mask ^ (most_significant_bit | least_significant_bit)\n    return n ^ middle_mask", "def toggle_middle_bits(n: int) -> int:\n    bit_length = n.bit_length()\n    if bit_length < 3:\n        return n\n    mask = (1 << bit_length) - 1\n    msb_and_lsb_mask = 1 << bit_length - 1 | 1\n    middle_bits_mask = mask ^ msb_and_lsb_mask\n    return n ^ middle_bits_mask", "def toggle_middle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    if num_bits < 3:\n        return n\n    mask = (1 << num_bits) - 1\n    most_significant_bit = 1 << num_bits - 1\n    least_significant_bit = 1\n    toggled_bits = n ^ (mask ^ (most_significant_bit | least_significant_bit))\n    return toggled_bits & mask", "def toggle_middle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    if num_bits < 3:\n        return n\n    mask = (1 << num_bits - 1) - 1\n    mask &= ~(1 << num_bits - 1)\n    mask &= ~1\n    return n ^ mask"], "outputs": "[[15], [6], [1], [0], [129], [513], [2], [16385], [1073741825]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[9], [4], [1], [0], [255], [1023], [2], [32767], [2147483647]]", "input_output_examples": "[[[9]], [[15]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.30000000000000004, "original_avg_pass_rate": 0.8892857142857142, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9821428571428571, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/736", "original_requirement": "from typing import List\n\n\ndef left_insertion(a: List[int], x: int) -> int:\n\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. \nassert left_insertion([1,2,4,5],6)==4\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef left_insertion(a: List[int], x: int) -> int:\n\"\"\"\nWrite a function to locate the left insertion point for a specified value in sorted order. \nassert left_insertion([1,2,4,5],6)==4\n\"\"\"", "entry_point": "left_insertion", "cluster_list": [{"programs_str": ["from typing import List\nimport bisect\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect.bisect_left(a, x)", "from typing import List\nimport bisect\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect.bisect_left(a, x)", "from typing import List\nfrom bisect import bisect_left\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect_left(a, x)", "from typing import List\nimport bisect\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect.bisect_left(a, x)", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    for i in range(len(a)):\n        if a[i] >= x:\n            return i\n    return len(a)", "from typing import List\nimport bisect\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect.bisect_left(a, x)", "from typing import List\nfrom bisect import bisect_left\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect_left(a, x)", "from typing import List\nfrom bisect import bisect_left\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect_left(a, x)", "from typing import List\nimport bisect\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect.bisect_left(a, x)", "from typing import List\nfrom bisect import bisect_left\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect_left(a, x)", "from typing import List\nimport bisect\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect.bisect_left(a, x)", "from typing import List\nfrom bisect import bisect_left\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect_left(a, x)", "from typing import List\nfrom bisect import bisect_left\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect_left(a, x)", "from typing import List\nfrom bisect import bisect_left\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect_left(a, x)", "from typing import List\nfrom bisect import bisect_left\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect_left(a, x)", "from typing import List\nfrom bisect import bisect_left\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect_left(a, x)", "from typing import List\nimport bisect\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect.bisect_left(a, x)", "from typing import List\nimport bisect\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect.bisect_left(a, x)", "from typing import List\n\ndef left_insertion(a: List[int], x: int) -> int:\n    import bisect\n    return bisect.bisect_left(a, x)", "from typing import List\nfrom bisect import bisect_left\n\ndef left_insertion(a: List[int], x: int) -> int:\n    return bisect_left(a, x)"], "outputs": "[[4], [2], [0], [3], [0], [0], [4], [0], [0], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 3], [[1, 2, 4, 5], 1], [[1, 2, 4, 5], 5], [[1, 2, 4, 5], 0], [[], 3], [[1, 2, 4, 5], 7], [[1, 2, 4, 5], -1], [[1, 1, 1, 1], 1], [[1, 3, 3, 5], 3]]", "input_output_examples": "[[[[1, 2, 4, 5], 6]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/737", "original_requirement": "def check_str(s: str) -> bool:\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def check_str(s: str) -> bool:\n\"\"\"\nWrite a function to check whether the given string is starting with a vowel or not using regex.\nassert check_str(\"annie\")\n\"\"\"", "entry_point": "check_str", "cluster_list": [{"programs_str": ["import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    pattern = '^[aeiouAEIOU]'\n    return bool(re.match(pattern, s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))", "import re\n\ndef check_str(s: str) -> bool:\n    return bool(re.match('^[aeiouAEIOU]', s))"], "outputs": "[[True], [True], [True], [True], [True], [True], [False], [False], [False], [False], [True], [False], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['annie'], ['orange'], ['umbrella'], ['apple'], ['Indigo'], ['Echo'], ['table'], ['xylophone'], ['123abc'], ['!start'], ['aeiou'], ['bcdfg'], [''], ['Aardvark'], ['opal'], ['Igloo']]", "input_output_examples": "[[['annie']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.0, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/739", "original_requirement": "def find_Index(n: int) -> int:\n\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. \nassert find_Index(2) == 4\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def find_Index(n: int) -> int:\n\"\"\"\nWrite a python function to find the index of smallest triangular number with n digits. \nassert find_Index(2) == 4\n\"\"\"", "entry_point": "find_Index", "cluster_list": [{"programs_str": ["def find_Index(n: int) -> int:\n    import math\n\n    def has_n_digits(number, n):\n        return len(str(number)) == n\n    index = 0\n    triangular_number = 0\n    while True:\n        index += 1\n        triangular_number = index * (index + 1) // 2\n        if has_n_digits(triangular_number, n):\n            return index", "import math\n\ndef find_Index(n: int) -> int:\n\n    def num_digits(x: int) -> int:\n        return len(str(x))\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if num_digits(triangular_number) == n:\n            return index\n        index += 1", "import math\n\ndef find_Index(n: int) -> int:\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1", "import math\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number(index):\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        if len(str(triangular_number(index))) == n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n    import math\n\n    def num_of_digits(x: int) -> int:\n        return len(str(x))\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if num_of_digits(triangular_number) == n:\n            return index\n        index += 1", "from math import sqrt\n\ndef find_Index(n: int) -> int:\n\n    def is_n_digits(num):\n        return len(str(num)) == n\n    index = 1\n    while True:\n        triangular_number = index * (index + 1) // 2\n        if is_n_digits(triangular_number):\n            return index\n        index += 1", "import math\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number(index):\n        return index * (index + 1) // 2\n    digits_limit = 10 ** (n - 1)\n    index = 1\n    while triangular_number(index) < digits_limit:\n        index += 1\n    return index", "from math import sqrt, ceil\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number_digits(index):\n        triangular_number = index * (index + 1) // 2\n        return len(str(triangular_number))\n    index = 1\n    while triangular_number_digits(index) < n:\n        index += 1\n    return index", "import math\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number(index):\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if len(str(t_number)) == n:\n            return index\n        index += 1", "import math\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number(k: int) -> int:\n        return k * (k + 1) // 2\n    k = 1\n    while True:\n        t = triangular_number(k)\n        if len(str(t)) == n:\n            return k\n        k += 1", "import math\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number(index):\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        number = triangular_number(index)\n        if len(str(number)) == n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n    import math\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_num = triangular_number(index)\n        if math.floor(math.log10(t_num) + 1) == n:\n            return index\n        index += 1", "import math\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n\n    def num_digits(number: int) -> int:\n        return int(math.log10(number)) + 1 if number > 0 else 1\n    index = 1\n    while num_digits(triangular_number(index)) < n:\n        index += 1\n    return index", "import math\n\ndef find_Index(n: int) -> int:\n    i = 1\n    while True:\n        triangular_number = i * (i + 1) // 2\n        if len(str(triangular_number)) == n:\n            return i\n        i += 1", "import math\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while len(str(triangular_number(index))) < n:\n        index += 1\n    return index", "from math import sqrt, ceil\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number_formula(k):\n        return k * (k + 1) // 2\n    num_digits = lambda x: len(str(x))\n    k = 1\n    while num_digits(triangular_number_formula(k)) < n:\n        k += 1\n    return k", "import math\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number(index):\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        tri_num = triangular_number(index)\n        if len(str(tri_num)) == n:\n            return index\n        index += 1", "import math\n\ndef find_Index(n: int) -> int:\n\n    def triangular_number(index):\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        if len(str(triangular_number(index))) == n:\n            return index\n        index += 1", "def find_Index(n: int) -> int:\n    import math\n\n    def triangular_number(index: int) -> int:\n        return index * (index + 1) // 2\n    index = 1\n    while True:\n        t_number = triangular_number(index)\n        if math.floor(math.log10(t_number)) + 1 == n:\n            return index\n        index += 1", "from math import ceil, sqrt\n\ndef find_Index(n: int) -> int:\n    digits = 10 ** (n - 1)\n    index = ceil((sqrt(1 + 8 * digits) - 1) / 2)\n    return index"], "outputs": "[[1], [4], [14], [45], [141], [44721], ['Timeout'], ['Timeout']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [10], [15], [20]]", "input_output_examples": "[[[2]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/740", "original_requirement": "from typing import Dict\nfrom typing import Tuple\n\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. \nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"", "repaired_requirement": "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    The function should pair elements at even indices as keys with elements at the subsequent odd indices as values. \n    If the tuple length is odd, the last unpaired element should be ignored. \n    If the tuple is empty or contains only a single element, the function should return an empty dictionary without raising an error.\n    \n    Example:\n    assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    \"\"\"", "original_clusters": {"requirement": "from typing import Dict\nfrom typing import Tuple\n\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n\"\"\"\nWrite a function to convert the given tuple to a key-value dictionary using adjacent elements. \nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n\"\"\"", "entry_point": "tuple_to_dict", "cluster_list": [{"programs_str": ["from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}"], "outputs": "[[{1: 5, 7: 10, 13: 5}], [{2: 4, 6: 8}], [{}], [{}], [{None: 'value', 'key': None}], [{True: False, 3.5: 7.2}], [{1: 2, 3: 4, 5: 6, 7: 8, 9: 10}], [{1: 'one', 2: 'two', 3: 'three'}], [{}], [{0: -1, -2: -3, -4: -5}], [{'a': 'b', 'c': 'd', 'e': 'f'}], [{1: 2, 3: 4, 5: 6, 7: 8}]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import Any, Dict, Tuple\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup), 2)}"], "outputs": "[[{1: 5, 7: 10, 13: 5}], [{2: 4, 6: 8}], ['IndexError'], [{}], [{None: 'value', 'key': None}], [{True: False, 3.5: 7.2}], [{1: 2, 3: 4, 5: 6, 7: 8, 9: 10}], [{1: 'one', 2: 'two', 3: 'three'}], ['IndexError'], [{0: -1, -2: -3, -4: -5}], [{'a': 'b', 'c': 'd', 'e': 'f'}], [{1: 2, 3: 4, 5: 6, 7: 8}]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[(1, 5, 7, 10, 13, 5)], [(2, 4, 6, 8)], [(1,)], [()], [(None, 'value', 'key', None)], [(True, False, 3.5, 7.2)], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)], [(1, 'one', 2, 'two', 3, 'three')], [(100,)], [(0, -1, -2, -3, -4, -5)], [('a', 'b', 'c', 'd', 'e', 'f')], [(1, 2, 3, 4, 5, 6, 7, 8)]]", "input_output_examples": "[[[(1, 5, 7, 10, 13, 5)]], [[{1: 5, 7: 10, 13: 5}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n    The function should pair elements at even indices as keys with elements at the subsequent odd indices as values. \n    If the tuple length is odd, the last unpaired element should be ignored. \n    If the tuple is empty or contains only a single element, the function should return an empty dictionary without raising an error.\n    \n    Example:\n    assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    \"\"\"", "entry_point": "tuple_to_dict", "cluster_list": [{"programs_str": ["from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}", "from typing import Dict, Tuple, Any\n\ndef tuple_to_dict(test_tup: Tuple[Any, ...]) -> Dict[Any, Any]:\n    return {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}"], "outputs": "[[{1: 5, 7: 10, 13: 5}], [{2: 4, 6: 8}], [{}], [{}], [{None: 'value', 'key': None}], [{True: False, 3.5: 7.2}], [{1: 2, 3: 4, 5: 6, 7: 8, 9: 10}], [{1: 'one', 2: 'two', 3: 'three'}], [{}], [{0: -1, -2: -3, -4: -5}], [{'a': 'b', 'c': 'd', 'e': 'f'}], [{1: 2, 3: 4, 5: 6, 7: 8}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(1, 5, 7, 10, 13, 5)], [(2, 4, 6, 8)], [(1,)], [()], [(None, 'value', 'key', None)], [(True, False, 3.5, 7.2)], [(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)], [(1, 'one', 2, 'two', 3, 'three')], [(100,)], [(0, -1, -2, -3, -4, -5)], [('a', 'b', 'c', 'd', 'e', 'f')], [(1, 2, 3, 4, 5, 6, 7, 8)]]", "input_output_examples": "[[[(1, 5, 7, 10, 13, 5)]], [[{1: 5, 7: 10, 13: 5}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/741", "original_requirement": "def all_Characters_Same(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def all_Characters_Same(s: str) -> bool:\n\"\"\"\nWrite a python function to check whether all the characters are same or not.\nassert all_Characters_Same(\"python\") == False\n\"\"\"", "entry_point": "all_Characters_Same", "cluster_list": [{"programs_str": ["def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "from typing import List\n\ndef all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "from typing import List\n\ndef all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1", "def all_Characters_Same(s: str) -> bool:\n    return len(set(s)) == 1"], "outputs": "[[True], [True], [True], [False], [False], [True], [True], [False], [False], [True], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['aaaa'], ['bbbbbbbb'], ['a'], ['ab'], ['abc'], ['A'], ['AAA'], ['AaA'], [''], ['11111'], ['12345'], ['!!!!!'], ['!@!']]", "input_output_examples": "[[['python']], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9903846153846153, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/742", "original_requirement": "def area_tetrahedron(side: float) -> float:\n\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def area_tetrahedron(side: float) -> float:\n\"\"\"\nWrite a function to caluclate the area of a tetrahedron.\nassert area_tetrahedron(3)==15.588457268119894\n\"\"\"", "entry_point": "area_tetrahedron", "cluster_list": [{"programs_str": ["import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side * side", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side * side", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side * side", "from math import sqrt\n\ndef area_tetrahedron(side: float) -> float:\n    return sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side * side", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "from math import sqrt\n\ndef area_tetrahedron(side: float) -> float:\n    return sqrt(3) * side * side", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side * side", "from math import sqrt\n\ndef area_tetrahedron(side: float) -> float:\n    return sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side * side", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side * side", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side * side", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side * side", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side * side", "import math\n\ndef area_tetrahedron(side: float) -> float:\n    return math.sqrt(3) * side ** 2"], "outputs": "[[15.588457268119896], [0.0], [6.928203230275509], [173.2050807568877], [1.7320508075688775e-20], [1.732050807568877e+20]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3], [0], [-2], [10], [1e-10], [10000000000.0]]", "input_output_examples": "[[[3]], [[15.588457268119894]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/743", "original_requirement": "from typing import List\n\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. \nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    \"\"\"\n    Write a function to rotate a given list by a specified number of items to the right direction. \n    The rotation wraps around the list, meaning elements shifted beyond the end of the list reappear at the beginning.\n    \n    Requirements:\n    1. If the input list is empty (`[]`), the function should raise a `ZeroDivisionError` as the operation `m % len(l)` is undefined.\n    2. If `m` is greater than the length of the list, the rotation should wrap around using modular arithmetic (`m = m % len(l)`).\n    3. The input `m` is assumed to be a non-negative integer. Negative values for `m` or non-integer inputs are not valid and are outside the scope of this function.\n    4. If `m` is zero, the function should return the list unchanged.\n    5. The function should handle edge cases gracefully, adhering to the behavior demonstrated in the provided example.\n\n    Example:\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n\"\"\"\nWrite a function to rotate a given list by specified number of items to the right direction. \nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n\"\"\"", "entry_point": "rotate_right", "cluster_list": [{"programs_str": ["from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m] if n else l", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    n = len(l)\n    m = m % n\n    return l[-m:] + l[:-m]"], "outputs": "[[[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]], [[1]], [[10, 20, 30, 40]], [[1, 2, 3, 4]], [[2, 3, 4, 5, 1]], ['ZeroDivisionError'], [[1, 1, 1, 1, 1]], [[40, 50, 10, 20, 30]]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        return l\n    m = m % len(l)\n    return l[-m:] + l[:-m]"], "outputs": "[[[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]], [[1]], [[10, 20, 30, 40]], [[1, 2, 3, 4]], [[2, 3, 4, 5, 1]], [[]], [[1, 1, 1, 1, 1]], [[40, 50, 10, 20, 30]]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3], [[1], 5], [[10, 20, 30, 40], 0], [[1, 2, 3, 4], 4], [[1, 2, 3, 4, 5], -1], [[], 2], [[1, 1, 1, 1, 1], 3], [[10, 20, 30, 40, 50], 102]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3]], [[[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    \"\"\"\n    Write a function to rotate a given list by a specified number of items to the right direction. \n    The rotation wraps around the list, meaning elements shifted beyond the end of the list reappear at the beginning.\n    \n    Requirements:\n    1. If the input list is empty (`[]`), the function should raise a `ZeroDivisionError` as the operation `m % len(l)` is undefined.\n    2. If `m` is greater than the length of the list, the rotation should wrap around using modular arithmetic (`m = m % len(l)`).\n    3. The input `m` is assumed to be a non-negative integer. Negative values for `m` or non-integer inputs are not valid and are outside the scope of this function.\n    4. If `m` is zero, the function should return the list unchanged.\n    5. The function should handle edge cases gracefully, adhering to the behavior demonstrated in the provided example.\n\n    Example:\n    assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"", "entry_point": "rotate_right", "cluster_list": [{"programs_str": ["from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Cannot perform modulus operation on an empty list')\n    m = m % len(l)\n    return l[-m:] + l[:-m] if m else l", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Operation undefined for empty list.')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if len(l) == 0:\n        raise ZeroDivisionError('Operation undefined for empty list.')\n    m %= len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Cannot perform modulo operation on an empty list.')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Cannot perform modulo operation on an empty list')\n    m %= len(l)\n    return l[-m:] + l[:-m] if m > 0 else l", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('The list is empty, rotation is undefined.')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Operation m % len(l) is undefined for an empty list.')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Cannot rotate an empty list')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Division by zero is undefined for an empty list.')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Cannot perform modulo operation with an empty list.')\n    m %= len(l)\n    return l[-m:] + l[:-m] if m > 0 else l", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Cannot perform modulo operation on an empty list')\n    m %= len(l)\n    return l[-m:] + l[:-m] if m > 0 else l", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Rotation undefined for empty list.')\n    m %= len(l)\n    return l[-m:] + l[:-m] if m else l", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Cannot perform rotation on an empty list.')\n    m = m % len(l)\n    return l[-m:] + l[:-m] if m > 0 else l", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if len(l) == 0:\n        raise ZeroDivisionError('Cannot rotate an empty list')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Cannot perform modulo operation with an empty list')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Operation undefined: rotation with an empty list.')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Cannot perform modulo operation with an empty list.')\n    n = len(l)\n    m = m % n\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('Cannot perform rotation on an empty list')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('The operation is undefined for an empty list.')\n    m = m % len(l)\n    if m == 0:\n        return l\n    return l[-m:] + l[:-m]", "from typing import List\n\ndef rotate_right(l: List[int], m: int) -> List[int]:\n    if not l:\n        raise ZeroDivisionError('The input list is empty, rotation is undefined.')\n    m = m % len(l)\n    return l[-m:] + l[:-m]"], "outputs": "[[[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]], [[1]], [[10, 20, 30, 40]], [[1, 2, 3, 4]], [[2, 3, 4, 5, 1]], ['ZeroDivisionError'], [[1, 1, 1, 1, 1]], [[40, 50, 10, 20, 30]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3], [[1], 5], [[10, 20, 30, 40], 0], [[1, 2, 3, 4], 4], [[1, 2, 3, 4, 5], -1], [[], 2], [[1, 1, 1, 1, 1], 3], [[10, 20, 30, 40, 50], 102]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3]], [[[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.09999999999999998, "original_avg_pass_rate": 0.9923728813559322, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9915254237288135, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/744", "original_requirement": "from typing import Tuple\n\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n\"\"\"\nWrite a function to check if the given tuple has any none value or not.\nassert check_none((10, 4, 5, 6, None)) == True\n\"\"\"", "entry_point": "check_none", "cluster_list": [{"programs_str": ["from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((element is None for element in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return None in test_tup", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((elem is None for elem in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((x is None for x in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((element is None for element in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((val is None for val in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((value is None for value in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((val is None for val in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((element is None for element in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))", "from typing import Tuple, Any\n\ndef check_none(test_tup: Tuple[Any, ...]) -> bool:\n    return any((item is None for item in test_tup))"], "outputs": "[[True], [True], [False], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(10, 4, 5, 6, None)], [(None,)], [(10, 20, 30)], [(None, None, None)], [(10, None, 20, None)], [(10,)], [()]]", "input_output_examples": "[[[(10, 4, 5, 6, None)]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/745", "original_requirement": "from typing import List\n\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"", "repaired_requirement": "def divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum (inclusive) \n    where every number is divisible by each of its non-zero digits. A number is considered \n    valid if for every digit in the number, the digit is not zero and the number is divisible \n    by that digit without a remainder.\n\n    assert divisible_by_digits(1,22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\"\"\"\nWrite a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. \nassert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n\"\"\"", "entry_point": "divisible_by_digits", "cluster_list": [{"programs_str": ["from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % d == 0 for d in digits))\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % d == 0 for d in digits))\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % digit == 0 for digit in digits))\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all((num % d == 0 for d in digits)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(d) for d in str(num) if d != '0']\n        if all((num % d == 0 for d in digits)):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(number: int) -> bool:\n        digits = [int(d) for d in str(number) if d != '0']\n        return all((number % digit == 0 for digit in digits))\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % d == 0 for d in digits))\n    return [num for num in range(startnum, endnum + 1) if is_divisible(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        for digit in digits:\n            if num % digit != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % d == 0 for d in digits))\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % d == 0 for d in digits))\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]"], "outputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]], [[10, 11, 12, 15]], [[50, 55, 60]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[100, 101, 102, 104, 105, 110, 111, 112, 115, 120, 122, 124, 126, 128, 132, 135, 140, 144, 150]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[22, 24, 30]], [[1]], [[200, 202, 204, 208, 210, 212, 216, 220]], [[0]]]", "probability": 0.5, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[1, 22], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]]]]"}, {"programs_str": ["from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_its_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_its_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    result = []\n    for num in range(startnum, endnum + 1):\n        if is_divisible_by_digits(num):\n            result.append(num)\n    return result", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(number: int) -> bool:\n        for digit in str(number):\n            if digit == '0' or number % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(number: int) -> bool:\n        for digit in str(number):\n            if digit == '0' or number % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_all_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_all_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    result = []\n    for number in range(startnum, endnum + 1):\n        if is_divisible_by_digits(number):\n            result.append(number)\n    return result"], "outputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]], [[11, 12, 15]], [[55]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[111, 112, 115, 122, 124, 126, 128, 132, 135, 144]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[22, 24]], [[1]], [[212, 216]], [[]]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 1.0, "llm_generated_inputs": "[[1, 22], [10, 15], [50, 60], [1, 10], [100, 150], [0, 9], [22, 30], [1, 1], [200, 220], [0, 0]]", "input_output_examples": "[[[1, 22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]]]]", "weighted_test_consistency": 0.5, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n    \"\"\"\n    Write a function to find numbers within a given range from startnum to endnum (inclusive) \n    where every number is divisible by each of its non-zero digits. A number is considered \n    valid if for every digit in the number, the digit is not zero and the number is divisible \n    by that digit without a remainder.\n\n    assert divisible_by_digits(1,22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    \"\"\"", "entry_point": "divisible_by_digits", "cluster_list": [{"programs_str": ["from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(number: int) -> bool:\n        for digit in str(number):\n            if digit != '0' and number % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % d == 0 for d in digits))\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % digit == 0 for digit in digits))\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(number: int) -> bool:\n        digits = [int(d) for d in str(number) if d != '0']\n        return all((number % d == 0 for d in digits))\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        digits = [int(d) for d in str(num) if d != '0']\n        return all((num % d == 0 for d in digits))\n    return [n for n in range(startnum, endnum + 1) if is_valid(n)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0':\n                continue\n            if num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]"], "outputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]], [[10, 11, 12, 15]], [[50, 55, 60]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[100, 101, 102, 104, 105, 110, 111, 112, 115, 120, 122, 124, 126, 128, 132, 135, 140, 144, 150]], [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[22, 24, 30]], [[1]], [[200, 202, 204, 208, 210, 212, 216, 220]], [[0]]]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[1, 22], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 15, 20, 22]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]]]]"}, {"programs_str": ["from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid_number(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0':\n                return False\n            if num % int(digit) != 0:\n                return False\n        return True\n    valid_numbers = [num for num in range(startnum, endnum + 1) if is_valid_number(num)]\n    return valid_numbers", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(number: int) -> bool:\n        for digit in str(number):\n            if digit == '0' or number % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        for digit_str in str(num):\n            digit = int(digit_str)\n            if digit == 0 or num % digit != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(number: int) -> bool:\n        for digit in map(int, str(number)):\n            if digit == 0 or number % digit != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid_number(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid_number(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(number: int) -> bool:\n        for digit in str(number):\n            if digit == '0' or number % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_divisible_by_digits(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_divisible_by_digits(num)]", "from typing import List\n\ndef divisible_by_digits(startnum: int, endnum: int) -> List[int]:\n\n    def is_valid(num: int) -> bool:\n        for digit in str(num):\n            if digit == '0' or num % int(digit) != 0:\n                return False\n        return True\n    return [num for num in range(startnum, endnum + 1) if is_valid(num)]"], "outputs": "[[[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]], [[11, 12, 15]], [[55]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[111, 112, 115, 122, 124, 126, 128, 132, 135, 144]], [[1, 2, 3, 4, 5, 6, 7, 8, 9]], [[22, 24]], [[1]], [[212, 216]], [[]]]", "probability": 0.7, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8812908992306927, "llm_generated_inputs": "[[1, 22], [10, 15], [50, 60], [1, 10], [100, 150], [0, 9], [22, 30], [1, 1], [200, 220], [0, 0]]", "input_output_examples": "[[[1, 22]], [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]]]]", "weighted_test_consistency": 0.7, "at_least_one_align": true}, "result": {"original_passk": 0.4, "original_avg_pass_rate": 0.5233644859813084, "original_nzpassk": true, "original_majority_passk": false, "repaired_passk": 0.8, "repaired_avg_pass_rate": 0.8411214953271028, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/748", "original_requirement": "def capital_words_spaces(str1: str) -> str:\n\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"", "repaired_requirement": "```python\ndef capital_words_spaces(str1: str) -> str:\n    \"\"\"\n    Write a function to insert spaces between words in a given string, where each word starts with an uppercase letter.\n    The function should treat every transition into an uppercase letter (except at the start of the string) as the beginning of a new word, regardless of the preceding character type (e.g., lowercase, uppercase, digits, symbols, or whitespace).\n    The output must preserve the exact ordering of characters in the input string, inserting spaces only at the identified transitions.\n\n    Edge cases:\n    - Strings with all uppercase letters (e.g., \"TEST\") should remain unchanged.\n    - Strings with no uppercase letters (e.g., \"test\") should remain unchanged.\n    - Mixed-case strings with symbols or numbers (e.g., \"example123Test\") should handle transitions into uppercase letters as word boundaries.\n\n    Example:\n    assert capital_words_spaces(\"Python\") == 'Python'\n    assert capital_words_spaces(\"PythonRocksIsFun\") == 'Python Rocks Is Fun'\n    assert capital_words_spaces(\"ThisIsATest\") == 'This Is A Test'\n    \"\"\"\n```", "original_clusters": {"requirement": "def capital_words_spaces(str1: str) -> str:\n\"\"\"\nWrite a function to put spaces between words starting with capital letters in a given string.\nassert capital_words_spaces(\"Python\") == 'Python'\n\"\"\"", "entry_point": "capital_words_spaces", "cluster_list": [{"programs_str": ["import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)"], "outputs": "[['Python'], ['Python Is Fun'], ['Hello World'], ['This Is A Test'], ['Lowercase'], ['A Long String With Capital Letters'], [''], ['word Without Capital Letters'], ['A L O N G S T R I N G W I T H N O S P A C E S O R C A P I T A L L E T T E R S'], ['Single Word Sample']]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<=[a-z])([A-Z])', ' \\\\1', str1)"], "outputs": "[['Python'], ['Python Is Fun'], ['Hello World'], ['This Is ATest'], ['Lowercase'], ['ALong String With Capital Letters'], [''], ['word Without Capital Letters'], ['ALONGSTRINGWITHNOSPACESORCAPITALLETTERS'], ['Single Word Sample']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[['Python'], ['PythonIsFun'], ['HelloWorld'], ['ThisIsATest'], ['Lowercase'], ['ALongStringWithCapitalLetters'], [''], ['wordWithoutCapitalLetters'], ['ALONGSTRINGWITHNOSPACESORCAPITALLETTERS'], ['SingleWordSample']]", "input_output_examples": "[[['Python']], [['Python']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef capital_words_spaces(str1: str) -> str:\n    \"\"\"\n    Write a function to insert spaces between words in a given string, where each word starts with an uppercase letter.\n    The function should treat every transition into an uppercase letter (except at the start of the string) as the beginning of a new word, regardless of the preceding character type (e.g., lowercase, uppercase, digits, symbols, or whitespace).\n    The output must preserve the exact ordering of characters in the input string, inserting spaces only at the identified transitions.\n\n    Edge cases:\n    - Strings with all uppercase letters (e.g., \"TEST\") should remain unchanged.\n    - Strings with no uppercase letters (e.g., \"test\") should remain unchanged.\n    - Mixed-case strings with symbols or numbers (e.g., \"example123Test\") should handle transitions into uppercase letters as word boundaries.\n\n    Example:\n    assert capital_words_spaces(\"Python\") == 'Python'\n    assert capital_words_spaces(\"PythonRocksIsFun\") == 'Python Rocks Is Fun'\n    assert capital_words_spaces(\"ThisIsATest\") == 'This Is A Test'\n    \"\"\"\n```", "entry_point": "capital_words_spaces", "cluster_list": [{"programs_str": ["import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<=[a-zA-Z0-9])(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<=[a-zA-Z0-9])(?=[A-Z])', ' ', str1)", "def capital_words_spaces(str1: str) -> str:\n    import re\n    return re.sub('(?<=[a-zA-Z0-9]|[^ ])([A-Z])', ' \\\\1', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<=\\\\w)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)", "import re\n\ndef capital_words_spaces(str1: str) -> str:\n    return re.sub('(?<!^)(?=[A-Z])', ' ', str1)"], "outputs": "[['Python'], ['Python Is Fun'], ['Hello World'], ['This Is A Test'], ['Lowercase'], ['A Long String With Capital Letters'], [''], ['word Without Capital Letters'], ['A L O N G S T R I N G W I T H N O S P A C E S O R C A P I T A L L E T T E R S'], ['Single Word Sample']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Python'], ['PythonIsFun'], ['HelloWorld'], ['ThisIsATest'], ['Lowercase'], ['ALongStringWithCapitalLetters'], [''], ['wordWithoutCapitalLetters'], ['ALONGSTRINGWITHNOSPACESORCAPITALLETTERS'], ['SingleWordSample']]", "input_output_examples": "[[['Python']], [['Python']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.24778761061946905, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.2805309734513275, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/749", "original_requirement": "from typing import List\n\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. \nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n\"\"\"\nWrite a function to sort a given list of strings of numbers numerically. \nassert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\n\"\"\"", "entry_point": "sort_numeric_strings", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))", "from typing import List\n\ndef sort_numeric_strings(nums_str: List[str]) -> List[int]:\n    return sorted(map(int, nums_str))"], "outputs": "[[[-500, -12, 0, 4, 7, 12, 45, 100, 200]], [[6, 7, 8, 9, 10]], [[0]], [[-10, -1, 0, 5, 20]], [[-1000, 0, 1000]], [[-50, 0, 50, 99, 100, 101]], [[5, 5, 5, 5, 5]], ['ValueError'], ['ValueError'], [[-5000000, 0, 5000000]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['4', '12', '45', '7', '0', '100', '200', '-12', '-500']], [['10', '9', '8', '7', '6']], [['0']], [['-1', '-10', '0', '5', '20']], [['-1000', '1000', '0']], [['99', '100', '101', '50', '-50', '0']], [['5', '5', '5', '5', '5']], [['']], [['2.5', '3.5', '4', '1', '3']], [['5000000', '-5000000', '0']]]", "input_output_examples": "[[[['4', '12', '45', '7', '0', '100', '200', '-12', '-500']]], [[[-500, -12, 0, 4, 7, 12, 45, 100, 200]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/750", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n\"\"\"\nWrite a function to add the given tuple to the given list.\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n\"\"\"", "entry_point": "add_tuple", "cluster_list": [{"programs_str": ["from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Any, Tuple\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Any, Tuple\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Any, Tuple\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import Any, List, Tuple\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)", "from typing import List, Tuple, Any\n\ndef add_tuple(test_list: List[Any], test_tup: Tuple[Any, ...]) -> List[Any]:\n    return test_list + list(test_tup)"], "outputs": "[[[1, 2, 3, 4, 5]], [[10, 20, 30, 40]], [[100, 200]], [['a', 'b', 'c', 'd']], [[True, False, None]], [[]], [['apple', 'banana', 'cherry']], [[1.5, 2.5, 3.5, 4.5, 5.5]], [[1, 'a', True, None, 'b', 2]], [[1, 2]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3], (4, 5)], [[10], (20, 30, 40)], [[], (100, 200)], [['a', 'b'], ('c', 'd')], [[True, False], (None,)], [[], ()], [['apple'], ('banana', 'cherry')], [[1.5, 2.5], (3.5, 4.5, 5.5)], [[1, 'a', True], (None, 'b', 2)], [[1], (2,)]]", "input_output_examples": "[[[[5, 6, 7], (9, 10)]], [[[5, 6, 7, 9, 10]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/751", "original_requirement": "from typing import List\n\n\ndef check_min_heap(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check if the given array represents min heap or not. \nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef check_min_heap(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check if the given array represents min heap or not. \nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\n\"\"\"", "entry_point": "check_min_heap", "cluster_list": [{"programs_str": ["from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    for i in range(len(arr) // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < len(arr) and arr[i] > arr[left]:\n            return False\n        if right < len(arr) and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range(n // 2):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < n and arr[i] > arr[left]:\n            return False\n        if right < n and arr[i] > arr[right]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    n = len(arr)\n    for i in range((n - 2) // 2 + 1):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True", "from typing import List\n\ndef check_min_heap(arr: List[int]) -> bool:\n    for i in range(len(arr)):\n        left = 2 * i + 1\n        right = 2 * i + 2\n        if left < len(arr) and arr[i] > arr[left]:\n            return False\n        if right < len(arr) and arr[i] > arr[right]:\n            return False\n    return True"], "outputs": "[[True], [True], [True], [True], [True], [True], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[10, 20, 15, 30, 40, 50]], [[2, 3, 4, 5, 6, 7]], [[1]], [[1, 1, 1, 1, 1]], [[]], [[1, 2, 3, 4, 5, 6]], [[10, 15, 20, 17, 25, 30]], [[3, 4, 5]], [[1, 2, 3, 6, 5, 7]], [[1, 3, 2, 4, 10, 8]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5, 6]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/752", "original_requirement": "def jacobsthal_num(n: int) -> int:\n\"\"\"\nWrite a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"", "repaired_requirement": "```python\ndef jacobsthal_num(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth Jacobsthal number. The Jacobsthal sequence is defined as:\n    - jacobsthal_num(0) = 0\n    - jacobsthal_num(1) = 1\n    - jacobsthal_num(n) = jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2) for n > 1\n\n    The function assumes that the input `n` is a non-negative integer. \n    If `n` is negative, the behavior is undefined and may result in a RecursionError.\n\n    Example sequence: 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    Example:\n    assert jacobsthal_num(5) == 11\n    \"\"\"\n```", "original_clusters": {"requirement": "def jacobsthal_num(n: int) -> int:\n\"\"\"\nWrite a function to find the nth jacobsthal number.  0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\nassert jacobsthal_num(5) == 11\n\"\"\"", "entry_point": "jacobsthal_num", "cluster_list": [{"programs_str": ["def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from typing import List\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from typing import List\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"], "outputs": "[[0], [1], [1], [11], [341], [10923], ['RecursionError'], ['Timeout']]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def jacobsthal_num(n: int) -> int:\n    if n < 0:\n        raise ValueError('n should be a non-negative integer')\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"], "outputs": "[[0], [1], [1], [11], [341], [10923], ['ValueError'], ['Timeout']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[0], [1], [2], [5], [10], [15], [-1], [100]]", "input_output_examples": "[[[5]], [[11]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef jacobsthal_num(n: int) -> int:\n    \"\"\"\n    Write a function to find the nth Jacobsthal number. The Jacobsthal sequence is defined as:\n    - jacobsthal_num(0) = 0\n    - jacobsthal_num(1) = 1\n    - jacobsthal_num(n) = jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2) for n > 1\n\n    The function assumes that the input `n` is a non-negative integer. \n    If `n` is negative, the behavior is undefined and may result in a RecursionError.\n\n    Example sequence: 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    Example:\n    assert jacobsthal_num(5) == 11\n    \"\"\"\n```", "entry_point": "jacobsthal_num", "cluster_list": [{"programs_str": ["from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "from functools import lru_cache\n\ndef jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "def jacobsthal_num(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"], "outputs": "[[0], [1], [1], [11], [341], [10923], ['RecursionError'], ['Timeout']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [5], [10], [15], [-1], [100]]", "input_output_examples": "[[[5]], [[11]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.8773584905660379, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.8773584905660379, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/753", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n\"\"\"\nWrite a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n\"\"\"\nWrite a function to find minimum k records from tuple list.  - in this case a verbatim copy of test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\n\"\"\"", "entry_point": "min_k", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List\nfrom typing import Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple], K: int) -> List[Tuple]:\n    return sorted(test_list, key=lambda x: x[1])[:K]", "from typing import List, Tuple\n\ndef min_k(test_list: List[Tuple[str, int]], K: int) -> List[Tuple[str, int]]:\n    return sorted(test_list, key=lambda x: x[1])[:K]"], "outputs": "[[[('Akash', 2), ('Akshat', 4)]], [[('Alice', 1), ('John', 3), ('Bob', 5)]], [[]], [[]], [[('Akash', 2), ('Akshat', 4), ('Nikhil', 8), ('Manjeet', 10)]], [[('Akash', 2), ('Akshat', 4), ('Manjeet', 10)]], [[('Bob', 2), ('Charlie', 5)]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2], [[('John', 3), ('Doe', 6), ('Alice', 1), ('Bob', 5)], 3], [[], 2], [[('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 0], [[('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 4], [[('Manjeet', 10), ('Akshat', 4), ('Akash', 2)], 5], [[('Alice', 7), ('Bob', 2), ('Charlie', 5)], -1]]", "input_output_examples": "[[[[('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2]], [[[('Akash', 2), ('Akshat', 4)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/754", "original_requirement": "from typing import List\n\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists at the same index. \n    The function should find such common elements and return them as a list. \n\n    The comparison is restricted to indices that are valid in all three lists, meaning the range of indices \n    considered is determined by the shortest list. If the lists have differing lengths, the function will \n    only compare elements up to the length of the shortest list. No error will be raised for differing lengths.\n\n    Examples:\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\n    assert extract_index_list([1, 2, 3], [1, 2], [1, 2, 3]) == [1, 2]\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n\"\"\"\nWe say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\n\"\"\"", "entry_point": "extract_index_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(len(l1)) if i < len(l2) and i < len(l3) and (l1[i] == l2[i] == l3[i])]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(len(l1)) if i < len(l2) and i < len(l3) and (l1[i] == l2[i] == l3[i])]"], "outputs": "[[[1, 7]], [[8, 11]], [[1, 2, 3, 4]], [[1]], [[]], [[]], [[]], [[1, 2]], [[0, -1, -2]]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(len(l1)) if l1[i] == l2[i] == l3[i]]"], "outputs": "[[[1, 7]], [[8, 11]], [[1, 2, 3, 4]], [[1]], [[]], [[]], [[]], ['IndexError'], [[0, -1, -2]]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[8, 9, 10, 11], [8, 12, 10, 11], [8, 9, 15, 11]], [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], [[1], [1], [1]], [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], [[], [], []], [[1, 2, 3, 4], [1, 0, 3, 0], [0, 0, 0, 0]], [[1, 2, 3], [1, 2], [1, 2, 3]], [[0, -1, -2], [0, -1, -2], [0, -1, -2]]]", "input_output_examples": "[[[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]]], [[[1, 7]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    \"\"\"\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists at the same index. \n    The function should find such common elements and return them as a list. \n\n    The comparison is restricted to indices that are valid in all three lists, meaning the range of indices \n    considered is determined by the shortest list. If the lists have differing lengths, the function will \n    only compare elements up to the length of the shortest list. No error will be raised for differing lengths.\n\n    Examples:\n    assert extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]) == [1, 7]\n    assert extract_index_list([1, 2, 3], [1, 2], [1, 2, 3]) == [1, 2]\n    \"\"\"\n```", "entry_point": "extract_index_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(min_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(min_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    shortest_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(shortest_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    shortest_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(shortest_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    shortest_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(shortest_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(min_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_length = min(len(l1), len(l2), len(l3))\n    common_elements = [l1[i] for i in range(min_length) if l1[i] == l2[i] == l3[i]]\n    return common_elements", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    shortest_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(shortest_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(min_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    shortest_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(shortest_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_len = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(min_len) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    shortest_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(shortest_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    shortest_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(shortest_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    return [l1[i] for i in range(min(len(l1), len(l2), len(l3))) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(min_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(min_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    shortest_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(shortest_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(min_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(min_length) if l1[i] == l2[i] == l3[i]]", "from typing import List\n\ndef extract_index_list(l1: List[int], l2: List[int], l3: List[int]) -> List[int]:\n    min_length = min(len(l1), len(l2), len(l3))\n    return [l1[i] for i in range(min_length) if l1[i] == l2[i] == l3[i]]"], "outputs": "[[[1, 7]], [[8, 11]], [[1, 2, 3, 4]], [[1]], [[]], [[]], [[]], [[1, 2]], [[0, -1, -2]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]], [[8, 9, 10, 11], [8, 12, 10, 11], [8, 9, 15, 11]], [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]], [[1], [1], [1]], [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], [[], [], []], [[1, 2, 3, 4], [1, 0, 3, 0], [0, 0, 0, 0]], [[1, 2, 3], [1, 2], [1, 2, 3]], [[0, -1, -2], [0, -1, -2], [0, -1, -2]]]", "input_output_examples": "[[[[1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7]]], [[[1, 7]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/755", "original_requirement": "from typing import List\n\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n\"\"\"\nWrite a function to find the second smallest number in a list.\nassert second_smallest([1, 2, -8, -2, 0, -2])==-2\n\"\"\"", "entry_point": "second_smallest", "cluster_list": [{"programs_str": ["from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for num in numbers:\n        if num < first:\n            first, second = (num, first)\n        elif first < num < second:\n            second = num\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first = second = float('inf')\n    for num in numbers:\n        if num < first:\n            second = first\n            first = num\n        elif first < num < second:\n            second = num\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first = second = float('inf')\n    for n in numbers:\n        if n < first:\n            second, first = (first, n)\n        elif first < n < second:\n            second = n\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first = second = float('inf')\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first_min = float('inf')\n    second_min = float('inf')\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif first_min < num < second_min:\n            second_min = num\n    return second_min if second_min != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second < float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first_min, second_min = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first_min:\n            first_min, second_min = (number, first_min)\n        elif first_min < number < second_min:\n            second_min = number\n    return second_min if second_min < float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first = second = float('inf')\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first_min = second_min = float('inf')\n    for num in numbers:\n        if num < first_min:\n            second_min = first_min\n            first_min = num\n        elif first_min < num < second_min:\n            second_min = num\n    return second_min if second_min != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif number < second and number != first:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for num in numbers:\n        if num < first:\n            second = first\n            first = num\n        elif first < num < second:\n            second = num\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first = second = float('inf')\n    for number in numbers:\n        if number < first:\n            first, second = (number, first)\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first_smallest, second_smallest = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first_smallest:\n            second_smallest = first_smallest\n            first_smallest = number\n        elif first_smallest < number < second_smallest:\n            second_smallest = number\n    return second_smallest if second_smallest != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first = second = float('inf')\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for number in numbers:\n        if number < first:\n            second = first\n            first = number\n        elif first < number < second:\n            second = number\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for num in numbers:\n        if num < first:\n            first, second = (num, first)\n        elif first < num < second:\n            second = num\n    return second if second != float('inf') else None", "from typing import List, Optional\n\ndef second_smallest(numbers: List[int]) -> Optional[int]:\n    if len(numbers) < 2:\n        return None\n    first, second = (float('inf'), float('inf'))\n    for num in numbers:\n        if num < first:\n            second = first\n            first = num\n        elif first < num < second:\n            second = num\n    return second if second != float('inf') else None"], "outputs": "[[-2], [20], [-30], [None], [None], [2], [50], [-4], [2], [2], [None], [9]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, -8, -2, 0, -2]], [[10, 20, 30, 40]], [[-10, -20, -30, -40]], [[5, 5, 5, 5]], [[1]], [[1, 2]], [[100, 50, 200, 10]], [[-1, -2, -3, -4, -5]], [[2, 2, 3, 1]], [[3, 1, 2, 1]], [[100]], [[10, 9, 8]]]", "input_output_examples": "[[[[1, 2, -8, -2, 0, -2]]], [[-2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/757", "original_requirement": "from typing import List\n\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. \nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"", "repaired_requirement": "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. \n    A reverse string pair consists of two distinct strings where one is the reverse of the other. \n    Palindromic strings (strings that reverse to themselves) are explicitly excluded from being considered as valid reverse pairs.\n\n    Each reverse pair should be counted only once, irrespective of duplicates. This means that if a reverse pair is found, it should contribute only one to the count, even if either string in the pair appears multiple times in the list. Once a reverse pair is identified, both strings in the pair are globally excluded from further consideration, ensuring that neither string can participate in forming additional reverse pairs. Unmatched duplicates should remain in the list for further processing.\n\n    The function should handle edge cases gracefully, such as lists containing only palindromic strings or repeated strings, without raising runtime errors.\n\n    Example:\n    assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n\"\"\"\nWrite a function to count the pairs of reverse strings in the given string list. \nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== 2\n\"\"\"", "entry_point": "count_reverse_pairs", "cluster_list": [{"programs_str": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_count = 0\n    reverse_set = set()\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in reverse_set:\n            reverse_count += 1\n        reverse_set.add(word)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set()\n    reverse_count = 0\n    for s in test_list:\n        reversed_s = s[::-1]\n        if reversed_s in reverse_set:\n            reverse_count += 1\n        reverse_set.add(s)\n    return reverse_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set()\n    count = 0\n    for word in test_list:\n        reverse_word = word[::-1]\n        if reverse_word in reverse_set:\n            count += 1\n        reverse_set.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set()\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in reverse_set:\n            count += 1\n        reverse_set.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set()\n    count = 0\n    for word in test_list:\n        reverse_word = word[::-1]\n        if reverse_word in reverse_set:\n            count += 1\n        reverse_set.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set()\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in reverse_set:\n            count += 1\n        reverse_set.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reversed_set = set()\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in reversed_set:\n            count += 1\n        reversed_set.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set()\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in reverse_set:\n            count += 1\n        reverse_set.add(word)\n    return count"], "outputs": "[[2], [2], [2], [2], [0], [0], [2], [2], [2], [2]]", "probability": 0.4, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set(test_list)\n    count = 0\n    for string in test_list:\n        reversed_string = string[::-1]\n        if reversed_string in reverse_set:\n            count += 1\n            reverse_set.remove(string)\n            reverse_set.remove(reversed_string)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set(test_list)\n    count = 0\n    for string in test_list:\n        if string[::-1] in reverse_set:\n            count += 1\n            reverse_set.remove(string)\n            reverse_set.remove(string[::-1])\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set(test_list)\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in reverse_set:\n            count += 1\n            reverse_set.remove(word)\n            reverse_set.remove(reversed_word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set(test_list)\n    count = 0\n    for word in test_list:\n        reverse_word = word[::-1]\n        if reverse_word in reverse_set:\n            count += 1\n            reverse_set.remove(word)\n            reverse_set.remove(reverse_word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set(test_list)\n    count = 0\n    for word in test_list:\n        if word[::-1] in reverse_set:\n            count += 1\n            reverse_set.remove(word)\n            reverse_set.remove(word[::-1])\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set(test_list)\n    count = 0\n    for string in test_list:\n        if string[::-1] in reverse_set:\n            count += 1\n            reverse_set.remove(string)\n            reverse_set.remove(string[::-1])\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set(test_list)\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in reverse_set:\n            count += 1\n            reverse_set.remove(word)\n            reverse_set.remove(reversed_word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set(test_list)\n    count = 0\n    for word in test_list:\n        if word[::-1] in reverse_set:\n            count += 1\n            reverse_set.remove(word)\n            reverse_set.remove(word[::-1])\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set(test_list)\n    count = 0\n    for word in test_list:\n        if word[::-1] in reverse_set:\n            count += 1\n            reverse_set.remove(word)\n            reverse_set.remove(word[::-1])\n    return count"], "outputs": "[[2], [2], [1], ['KeyError'], [0], [0], ['KeyError'], [2], ['KeyError'], ['KeyError']]", "probability": 0.45, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_strings = set(test_list)\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in reverse_strings and reversed_word != word:\n            count += 1\n            reverse_strings.remove(word)\n    return count // 2"], "outputs": "[[1], [1], ['KeyError'], [0], [0], [0], [0], [1], [1], [0]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[['julia', 'best', 'tseb', 'for', 'ailuj']], [1], [2]]]"}, {"programs_str": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_strings = {s[::-1] for s in test_list}\n    return sum((1 for s in test_list if s in reverse_strings)) // 2", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set(test_list)\n    count = 0\n    for word in test_list:\n        if word[::-1] in reverse_set:\n            count += 1\n    return count // 2"], "outputs": "[[2], [2], [1], [2], [0], [0], [2], [2], [3], [2]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7977309221191609, "llm_generated_inputs": "[[['julia', 'best', 'tseb', 'for', 'ailuj']], [['abc', 'xyz', 'cba', 'zyx', 'def']], [['abcd', 'dcba', 'abcd', 'cbad']], [['level', 'level', 'deified', 'deified', 'a']], [[]], [['single']], [['mirror', 'rorrim', 'radar', 'radar']], [['julia', 'best', 'tseb', 'for', 'ailuj', 'not']], [['a', 'b', 'ba', 'ab', 'abc', 'cba']], [['aa', 'aaa', 'aaa', 'aa']]]", "input_output_examples": "[[[['julia', 'best', 'tseb', 'for', 'ailuj']]], [[2]]]", "weighted_test_consistency": 0.9500000000000001, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    \"\"\"\n    Write a function to count the pairs of reverse strings in the given string list. \n    A reverse string pair consists of two distinct strings where one is the reverse of the other. \n    Palindromic strings (strings that reverse to themselves) are explicitly excluded from being considered as valid reverse pairs.\n\n    Each reverse pair should be counted only once, irrespective of duplicates. This means that if a reverse pair is found, it should contribute only one to the count, even if either string in the pair appears multiple times in the list. Once a reverse pair is identified, both strings in the pair are globally excluded from further consideration, ensuring that neither string can participate in forming additional reverse pairs. Unmatched duplicates should remain in the list for further processing.\n\n    The function should handle edge cases gracefully, such as lists containing only palindromic strings or repeated strings, without raising runtime errors.\n\n    Example:\n    assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\n    \"\"\"", "entry_point": "count_reverse_pairs", "cluster_list": [{"programs_str": ["from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if word != reversed_word and reversed_word in seen:\n            count += 1\n            seen.remove(reversed_word)\n        elif word not in seen:\n            seen.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    pairs_count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in seen and reversed_word != word:\n            pairs_count += 1\n            seen.remove(reversed_word)\n        elif word != word[::-1]:\n            seen.add(word)\n    return pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    reverse_pair_count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if word == reversed_word:\n            continue\n        if reversed_word in seen:\n            reverse_pair_count += 1\n            seen.remove(reversed_word)\n        else:\n            seen.add(word)\n    return reverse_pair_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    count = 0\n    for word in test_list:\n        rev_word = word[::-1]\n        if word != rev_word and rev_word in seen:\n            count += 1\n            seen.remove(rev_word)\n        else:\n            seen.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_set = set()\n    pair_count = 0\n    for string in test_list:\n        reverse_string = string[::-1]\n        if reverse_string in reverse_set:\n            pair_count += 1\n            reverse_set.remove(reverse_string)\n        elif string != reverse_string:\n            reverse_set.add(string)\n    return pair_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen_set = set()\n    reverse_pairs_count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if reversed_word in seen_set and word != reversed_word:\n            reverse_pairs_count += 1\n            seen_set.remove(reversed_word)\n        elif word not in seen_set:\n            seen_set.add(word)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if word != reversed_word and reversed_word in seen:\n            count += 1\n            seen.remove(reversed_word)\n        elif word not in seen:\n            seen.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    reverse_pairs = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if word in seen or word == reversed_word:\n            continue\n        if reversed_word in seen:\n            reverse_pairs += 1\n            seen.remove(reversed_word)\n        else:\n            seen.add(word)\n    return reverse_pairs", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if word in seen or reversed_word in seen:\n            continue\n        if reversed_word in test_list and word != reversed_word:\n            count += 1\n            seen.add(word)\n            seen.add(reversed_word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    reverse_seen = set()\n    count = 0\n    for string in test_list:\n        reverse_string = string[::-1]\n        if string in reverse_seen:\n            count += 1\n            reverse_seen.remove(string)\n            seen.remove(reverse_string)\n        elif string != reverse_string:\n            if string not in seen:\n                seen.add(string)\n                reverse_seen.add(reverse_string)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    count = 0\n    for word in test_list:\n        reverse_word = word[::-1]\n        if word == reverse_word or word in seen:\n            continue\n        if reverse_word in seen:\n            count += 1\n            seen.remove(reverse_word)\n        else:\n            seen.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    count = 0\n    for word in test_list:\n        reversed_word = word[::-1]\n        if word == reversed_word:\n            continue\n        if reversed_word in seen:\n            count += 1\n            seen.remove(reversed_word)\n        elif word not in seen:\n            seen.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    reverse_pairs_count = 0\n    excluded = set()\n    for string in test_list:\n        if string in excluded:\n            continue\n        reverse_string = string[::-1]\n        if string == reverse_string:\n            continue\n        if reverse_string in seen:\n            reverse_pairs_count += 1\n            excluded.add(string)\n            excluded.add(reverse_string)\n        else:\n            seen.add(string)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    used_strings = set()\n    for string in test_list:\n        if string in used_strings:\n            continue\n        reversed_string = string[::-1]\n        if string != reversed_string and reversed_string in test_list and (reversed_string not in used_strings):\n            reverse_pairs_count += 1\n            used_strings.add(string)\n            used_strings.add(reversed_string)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    reverse_pairs_count = 0\n    visited = set()\n    for word in test_list:\n        if word in visited:\n            continue\n        reversed_word = word[::-1]\n        if word != reversed_word and reversed_word in test_list and (reversed_word not in visited):\n            reverse_pairs_count += 1\n            visited.add(word)\n            visited.add(reversed_word)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    count = 0\n    for word in test_list:\n        rev_word = word[::-1]\n        if word != rev_word and rev_word in seen:\n            count += 1\n            seen.discard(rev_word)\n        elif word != rev_word:\n            seen.add(word)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    reverse_pairs_count = 0\n    for string in test_list:\n        reversed_string = string[::-1]\n        if string != reversed_string and reversed_string in seen:\n            reverse_pairs_count += 1\n            seen.remove(reversed_string)\n        elif string not in seen:\n            seen.add(string)\n    return reverse_pairs_count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    processed_set = set()\n    count = 0\n    for string in test_list:\n        if string in processed_set:\n            continue\n        reversed_string = string[::-1]\n        if string != reversed_string and reversed_string in test_list:\n            count += 1\n            processed_set.add(string)\n            processed_set.add(reversed_string)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    count = 0\n    seen = set()\n    for string in test_list:\n        rev = string[::-1]\n        if rev in seen:\n            count += 1\n            seen.remove(rev)\n        elif string != rev:\n            seen.add(string)\n    return count", "from typing import List\n\ndef count_reverse_pairs(test_list: List[str]) -> int:\n    seen = set()\n    reverse_pairs_count = 0\n    for s in test_list:\n        if s in seen:\n            continue\n        reverse_s = s[::-1]\n        if reverse_s in seen:\n            continue\n        if reverse_s != s and reverse_s in test_list:\n            reverse_pairs_count += 1\n            seen.add(s)\n            seen.add(reverse_s)\n    return reverse_pairs_count"], "outputs": "[[2], [2], [1], [0], [0], [0], [1], [2], [2], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['julia', 'best', 'tseb', 'for', 'ailuj']], [['abc', 'xyz', 'cba', 'zyx', 'def']], [['abcd', 'dcba', 'abcd', 'cbad']], [['level', 'level', 'deified', 'deified', 'a']], [[]], [['single']], [['mirror', 'rorrim', 'radar', 'radar']], [['julia', 'best', 'tseb', 'for', 'ailuj', 'not']], [['a', 'b', 'ba', 'ab', 'abc', 'cba']], [['aa', 'aaa', 'aaa', 'aa']]]", "input_output_examples": "[[[['julia', 'best', 'tseb', 'for', 'ailuj']]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.727433628318584, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.6371681415929203, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/758", "original_requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Dict\nfrom typing import Tuple\n\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n\"\"\"\nWrite a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\"\"\"", "entry_point": "unique_sublists", "cluster_list": [{"programs_str": ["from typing import List, Dict, Tuple\nfrom collections import defaultdict\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = defaultdict(int)\n    for sublist in list1:\n        result[tuple(sublist)] += 1\n    return dict(result)", "from typing import List, Dict, Tuple\nfrom collections import defaultdict\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = defaultdict(int)\n    for sublist in list1:\n        result[tuple(sublist)] += 1\n    return dict(result)", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        tuple_key = tuple(sublist)\n        result[tuple_key] = result.get(tuple_key, 0) + 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        tpl = tuple(sublist)\n        if tpl in result:\n            result[tpl] += 1\n        else:\n            result[tpl] = 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        t = tuple(sublist)\n        if t in result:\n            result[t] += 1\n        else:\n            result[t] = 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        tup = tuple(sublist)\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result", "from typing import List, Dict, Tuple\nfrom collections import Counter\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    return dict(Counter((tuple(sublist) for sublist in list1)))", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        t = tuple(sublist)\n        if t in result:\n            result[t] += 1\n        else:\n            result[t] = 1\n    return result", "from typing import List, Dict, Tuple\nfrom collections import defaultdict\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = defaultdict(int)\n    for sublist in list1:\n        result[tuple(sublist)] += 1\n    return dict(result)", "from typing import List, Dict, Tuple\nfrom collections import Counter\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    tuples_count = Counter((tuple(sublist) for sublist in list1))\n    return dict(tuples_count)", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        tuple_key = tuple(sublist)\n        if tuple_key in result:\n            result[tuple_key] += 1\n        else:\n            result[tuple_key] = 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    sublist_count = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result", "from typing import List, Dict, Tuple\n\ndef unique_sublists(list1: List[List[int]]) -> Dict[Tuple[int, ...], int]:\n    result = {}\n    for sublist in list1:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in result:\n            result[sublist_tuple] += 1\n        else:\n            result[sublist_tuple] = 1\n    return result"], "outputs": "[[{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}], [{(1, 2): 3, (3, 4): 1, (5, 6): 1}], [{(1, 2, 3): 2, (4, 5, 6): 2, (7, 8): 3}], [{(1,): 2, (2,): 1, (3,): 3}], [{(10, 20): 1, (30, 40): 1, (50, 60): 1}], [{(7,): 1}], [{(): 3, (3, 4): 2, (5, 6): 1}], [{(1, 2, 2): 2, (1, 2): 1, (2, 2, 2): 1, (2, 2): 1}], [{(1, 2): 2, (1, 2, 3): 1, (): 2}], [{}]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]], [[[1, 2], [1, 2], [3, 4], [5, 6], [1, 2]]], [[[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8], [4, 5, 6], [7, 8], [7, 8]]], [[[1], [1], [2], [3], [3], [3]]], [[[10, 20], [30, 40], [50, 60]]], [[[7]]], [[[], [], [3, 4], [3, 4], [], [5, 6]]], [[[1, 2, 2], [1, 2], [2, 2, 2], [1, 2, 2], [2, 2]]], [[[1, 2], [1, 2, 3], [], [1, 2], []]], [[]]]", "input_output_examples": "[[[[[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]]], [[{(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/759", "original_requirement": "def is_decimal(num: str) -> bool:\n\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"", "repaired_requirement": "```python\ndef is_decimal(num: str) -> bool:\n    \"\"\"\n    Write a function to check whether a given string is a strictly positive decimal number \n    with exactly two digits after the decimal point. The input must adhere to the following rules:\n    - The number must not include a positive ('+') or negative ('-') sign.\n    - The number must not have leading zeros unless it is '0.xx'.\n    - The number must not have trailing zeros after the decimal point unless required to meet the precision of 2.\n    - The format must strictly match the pattern: one or more digits, followed by a dot ('.'), followed by exactly two digits.\n\n    Examples:\n    assert is_decimal('123.11') == True\n    assert is_decimal('-123.45') == False\n    assert is_decimal('+123.45') == False\n    assert is_decimal('123.0') == False\n    assert is_decimal('0.12') == True\n    \"\"\"\n```", "original_clusters": {"requirement": "def is_decimal(num: str) -> bool:\n\"\"\"\nWrite a function to check whether a given string is a decimal number with a precision of 2.\nassert is_decimal('123.11')==True\n\"\"\"", "entry_point": "is_decimal", "cluster_list": [{"programs_str": ["import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.match('^\\\\d+\\\\.\\\\d{2}$', num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.match('^\\\\d+\\\\.\\\\d{2}$', num))", "from typing import Optional\n\ndef is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) != 2:\n            return False\n        integer_part, decimal_part = parts\n        if not integer_part.isdigit() or not decimal_part.isdigit():\n            return False\n        if len(decimal_part) != 2:\n            return False\n        float(num)\n        return True\n    except ValueError:\n        return False", "from typing import Optional\nimport re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^\\\\d+\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.match('^\\\\d+\\\\.\\\\d{2}$', num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^\\\\d+\\\\.\\\\d{2}$'\n    if re.match(pattern, num):\n        return True\n    return False", "import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.match('^\\\\d+\\\\.\\\\d{2}$', num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.match('^\\\\d+\\\\.\\\\d{2}$', num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.fullmatch('\\\\d+\\\\.\\\\d{2}', num))", "from typing import Tuple\n\ndef is_decimal(num: str) -> bool:\n    if '.' in num:\n        parts = num.split('.')\n        if len(parts) == 2 and len(parts[1]) == 2 and parts[0].isdigit() and parts[1].isdigit():\n            return True\n    return False", "import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.match('^\\\\d+\\\\.\\\\d{2}$', num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.fullmatch('\\\\d+\\\\.\\\\d{2}', num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.match('^\\\\d+\\\\.\\\\d{2}$', num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.match('^\\\\d+\\\\.\\\\d{2}$', num))", "from typing import Union\n\ndef is_decimal(num: str) -> bool:\n    try:\n        parts = num.split('.')\n        if len(parts) == 2 and len(parts[1]) == 2 and parts[0].isdigit() and parts[1].isdigit():\n            float(num)\n            return True\n        return False\n    except ValueError:\n        return False", "import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.fullmatch('\\\\d+\\\\.\\\\d{2}', num))", "from typing import Optional\n\ndef is_decimal(num: str) -> bool:\n    if '.' in num:\n        parts = num.split('.')\n        if len(parts) == 2 and len(parts[1]) == 2 and parts[0].isdigit() and parts[1].isdigit():\n            return True\n    return False"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [True], [True], [True]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef is_decimal(num: str) -> bool:\n    return bool(re.match('^[+-]?\\\\d+\\\\.\\\\d{2}$', num))", "from typing import Tuple\n\ndef is_decimal(num: str) -> bool:\n    if '.' in num:\n        integer_part, decimal_part = num.split('.')\n        if decimal_part.isdigit() and len(decimal_part) == 2:\n            return integer_part.isdigit() or (integer_part.startswith('-') and integer_part[1:].isdigit())\n    return False"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [False], [False], [True], [False], [False], [False], [False], [True], [True], [True], [True]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_decimal(num: str) -> bool:\n    if '.' in num:\n        integer_part, fractional_part = num.split('.')\n        if fractional_part.isdigit() and len(fractional_part) == 2:\n            return True\n    return False"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [False], [False], [True], [False], [False], [True], [False], [True], [True], [True], [True]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.4716734178155153, "llm_generated_inputs": "[['123.11'], ['0.99'], ['456.00'], ['123'], ['12.1'], ['12.123'], ['abc'], ['0'], ['0.0'], ['-123.45'], ['-123'], ['123.1'], ['.23'], ['123.'], ['-0.25'], ['003.10'], ['12.00'], ['000.00']]", "input_output_examples": "[[['123.11']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef is_decimal(num: str) -> bool:\n    \"\"\"\n    Write a function to check whether a given string is a strictly positive decimal number \n    with exactly two digits after the decimal point. The input must adhere to the following rules:\n    - The number must not include a positive ('+') or negative ('-') sign.\n    - The number must not have leading zeros unless it is '0.xx'.\n    - The number must not have trailing zeros after the decimal point unless required to meet the precision of 2.\n    - The format must strictly match the pattern: one or more digits, followed by a dot ('.'), followed by exactly two digits.\n\n    Examples:\n    assert is_decimal('123.11') == True\n    assert is_decimal('-123.45') == False\n    assert is_decimal('+123.45') == False\n    assert is_decimal('123.0') == False\n    assert is_decimal('0.12') == True\n    \"\"\"\n```", "entry_point": "is_decimal", "cluster_list": [{"programs_str": ["import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(0|[1-9]\\\\d*)\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^([1-9]\\\\d*|0)\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?:0|[1-9]\\\\d*)\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?:[1-9]\\\\d*|0)\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?:0\\\\.\\\\d{2}|[1-9]\\\\d*\\\\.\\\\d{2})$'\n    return bool(re.fullmatch(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?!0[1-9]+|0?\\\\.\\\\d*0$)(?:[1-9]\\\\d*|0)\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(0|[1-9]\\\\d*)\\\\.\\\\d{2}$'\n    if re.match(pattern, num):\n        return True\n    return False", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?:0|[1-9]\\\\d*)\\\\.\\\\d\\\\d$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?:0|[1-9]\\\\d*)\\\\.\\\\d{2}$'\n    match = re.fullmatch(pattern, num)\n    return bool(match)", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?:[1-9]\\\\d*|0)\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(0|[1-9]\\\\d*)\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = re.compile('^(0|[1-9][0-9]*)\\\\.[0-9]{2}$')\n    return bool(pattern.match(num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(0|[1-9]\\\\d*)\\\\.\\\\d{2}$'\n    return bool(re.fullmatch(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(0|[1-9][0-9]*)\\\\.\\\\d{2}$'\n    if re.match(pattern, num):\n        return True\n    return False", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?!0\\\\d)(\\\\d+|0)\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(0\\\\.\\\\d{2}|[1-9]\\\\d*\\\\.\\\\d{2})$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?:0|[1-9]\\\\d*)\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?!0\\\\d)\\\\d+\\\\.((?!0$)\\\\d{2}|0[1-9]|[1-9]0)$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?:[1-9]\\\\d*|0)\\\\.\\\\d{2}$'\n    return bool(re.match(pattern, num))", "import re\n\ndef is_decimal(num: str) -> bool:\n    pattern = '^(?:0|[1-9][0-9]*)\\\\.[0-9]{2}$'\n    return bool(re.match(pattern, num))"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['123.11'], ['0.99'], ['456.00'], ['123'], ['12.1'], ['12.123'], ['abc'], ['0'], ['0.0'], ['-123.45'], ['-123'], ['123.1'], ['.23'], ['123.'], ['-0.25'], ['003.10'], ['12.00'], ['000.00']]", "input_output_examples": "[[['123.11']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9417391304347825, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9391304347826088, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/760", "original_requirement": "from typing import List\n\n\ndef unique_Element(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef unique_Element(arr: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether a list of numbers contains only one distinct element or not.\nassert unique_Element([1,1,1]) == True\n\"\"\"", "entry_point": "unique_Element", "cluster_list": [{"programs_str": ["from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1", "from typing import List\n\ndef unique_Element(arr: List[int]) -> bool:\n    return len(set(arr)) == 1"], "outputs": "[[True], [True], [True], [True], [False], [False], [False], [False], [True], [True], [True], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 1, 1]], [[0, 0, 0]], [[5, 5, 5, 5]], [[10]], [[1, 1, 2]], [[1, 2, 1]], [[1, 2, 3]], [[]], [[1]], [[-1, -1, -1]], [[1.5, 1.5, 1.5]], [[1.5, 1.6]], [[0]], [[0, 1]]]", "input_output_examples": "[[[[1, 1, 1]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/762", "original_requirement": "def check_monthnumber_number(month_number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n\nassert check_monthnumber_number(6)==True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def check_monthnumber_number(month_number: int) -> bool:\n\"\"\"\nWrite a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n\nassert check_monthnumber_number(6)==True\n\"\"\"", "entry_point": "check_monthnumber_number", "cluster_list": [{"programs_str": ["def check_monthnumber_number(month_number: int) -> bool:\n    months_with_30_days = {4, 6, 9, 11}\n    return month_number in months_with_30_days", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "from typing import List\n\ndef check_monthnumber_number(month_number: int) -> bool:\n    months_with_30_days = [4, 6, 9, 11]\n    return month_number in months_with_30_days", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    months_with_30_days = {4, 6, 9, 11}\n    return month_number in months_with_30_days", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    if month_number in {4, 6, 9, 11}:\n        return True\n    return False", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "def check_monthnumber_number(month_number: int) -> bool:\n    if month_number in [4, 6, 9, 11]:\n        return True\n    return False", "from typing import List\n\ndef check_monthnumber_number(month_number: int) -> bool:\n    thirty_day_months = [4, 6, 9, 11]\n    return month_number in thirty_day_months", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "from typing import List\n\ndef check_monthnumber_number(month_number: int) -> bool:\n    months_with_30_days = [4, 6, 9, 11]\n    return month_number in months_with_30_days", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}", "from typing import List\n\ndef check_monthnumber_number(month_number: int) -> bool:\n    return month_number in [4, 6, 9, 11]", "from typing import List\n\ndef check_monthnumber_number(month_number: int) -> bool:\n    months_with_30_days = [4, 6, 9, 11]\n    return month_number in months_with_30_days", "def check_monthnumber_number(month_number: int) -> bool:\n    return month_number in {4, 6, 9, 11}"], "outputs": "[[False], [True], [True], [True], [False], [False], [False], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [4], [6], [11], [12], [2], [13], [0], [-1], ['June'], [30.5]]", "input_output_examples": "[[[6]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/763", "original_requirement": "from typing import List\n\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. \nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"", "repaired_requirement": "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    \"\"\"\n    Write a Python function to find the minimum difference between any two elements in a given array. \n\n    Requirements:\n    1. The input `arr` can be either a list or a tuple of integers. The function will internally convert tuples to lists for processing.\n    2. The parameter `n` is ignored and has no effect on the function's behavior. The function will always consider all elements in `arr`.\n    3. The function assumes that `arr` is a non-empty collection of integers with at least two elements. Behavior for empty arrays or arrays with fewer than two elements is undefined.\n    4. The function calculates the minimum absolute difference between any two elements in the array by:\n       - Sorting the array.\n       - Iterating through adjacent elements in the sorted array to find the smallest difference.\n    5. The function does not handle invalid input types (e.g., non-integer elements in `arr`).\n\n    Example:\n    assert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n\"\"\"\nWrite a python function to find the minimum difference between any two elements in a given array. \nassert find_min_diff((1,5,3,19,18,25),6) == 1\n\"\"\"", "entry_point": "find_min_diff", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1]))\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        min_diff = min(min_diff, abs(arr[i + 1] - arr[i]))\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1]))\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        min_diff = min(min_diff, abs(arr[i + 1] - arr[i]))\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    if n < 2:\n        return float('inf')\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        min_diff = min(min_diff, abs(arr[i + 1] - arr[i]))\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List\n\ndef find_min_diff(arr: List[int], n: int) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, n):\n        min_diff = min(min_diff, arr[i] - arr[i - 1])\n    return min_diff"], "outputs": "[[1], [90], [4], [0], [inf], [inf], [5], [1], [1], [10]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[(1, 5, 3, 19, 18, 25), 6], ['AttributeError'], [1]]]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 5, 3, 19, 18, 25], 6], [[10, 100, 1000, 10000], 4], [[-3, -7, 4, 10], 4], [[3, 3, 3, 3], 4], [[], 0], [[5], 1], [[-5, -10, -15, -20], 4], [[1, 2], 2], [[1000000, 999999], 2], [[50, 40, 30, 20, 10], 5]]", "input_output_examples": "[[[(1, 5, 3, 19, 18, 25), 6]], [[1]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    \"\"\"\n    Write a Python function to find the minimum difference between any two elements in a given array. \n\n    Requirements:\n    1. The input `arr` can be either a list or a tuple of integers. The function will internally convert tuples to lists for processing.\n    2. The parameter `n` is ignored and has no effect on the function's behavior. The function will always consider all elements in `arr`.\n    3. The function assumes that `arr` is a non-empty collection of integers with at least two elements. Behavior for empty arrays or arrays with fewer than two elements is undefined.\n    4. The function calculates the minimum absolute difference between any two elements in the array by:\n       - Sorting the array.\n       - Iterating through adjacent elements in the sorted array to find the smallest difference.\n    5. The function does not handle invalid input types (e.g., non-integer elements in `arr`).\n\n    Example:\n    assert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1\n    \"\"\"", "entry_point": "find_min_diff", "cluster_list": [{"programs_str": ["from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    sorted_arr = sorted(arr if isinstance(arr, list) else list(arr))\n    min_diff = float('inf')\n    for i in range(1, len(sorted_arr)):\n        min_diff = min(min_diff, abs(sorted_arr[i] - sorted_arr[i - 1]))\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        min_diff = min(min_diff, abs(arr[i + 1] - arr[i]))\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    if isinstance(arr, tuple):\n        arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = arr[i + 1] - arr[i]\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        diff = abs(arr[i] - arr[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        min_diff = min(min_diff, abs(arr[i + 1] - arr[i]))\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    if isinstance(arr, tuple):\n        arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        min_diff = min(min_diff, arr[i + 1] - arr[i])\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1]))\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        min_diff = min(min_diff, abs(arr[i] - arr[i - 1]))\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        diff = arr[i] - arr[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i + 1] - arr[i])\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr = list(arr)\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(len(arr) - 1):\n        diff = abs(arr[i] - arr[i + 1])\n        min_diff = min(min_diff, diff)\n    return min_diff", "from typing import List, Union\n\ndef find_min_diff(arr: Union[List[int], tuple], n: int) -> int:\n    arr_list = list(arr)\n    arr_list.sort()\n    min_diff = float('inf')\n    for i in range(len(arr_list) - 1):\n        diff = abs(arr_list[i + 1] - arr_list[i])\n        min_diff = min(min_diff, diff)\n    return min_diff"], "outputs": "[[1], [90], [4], [0], [inf], [inf], [5], [1], [1], [10]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 5, 3, 19, 18, 25], 6], [[10, 100, 1000, 10000], 4], [[-3, -7, 4, 10], 4], [[3, 3, 3, 3], 4], [[], 0], [[5], 1], [[-5, -10, -15, -20], 4], [[1, 2], 2], [[1000000, 999999], 2], [[50, 40, 30, 20, 10], 5]]", "input_output_examples": "[[[(1, 5, 3, 19, 18, 25), 6]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.0, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/764", "original_requirement": "def number_ctr(s: str) -> int:\n\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def number_ctr(s: str) -> int:\n\"\"\"\nWrite a python function to count number of digits in a given string.\nassert number_ctr('program2bedone') == 1\n\"\"\"", "entry_point": "number_ctr", "cluster_list": [{"programs_str": ["def number_ctr(s: str) -> int:\n    return sum((1 for char in s if char.isdigit()))", "import re\n\ndef number_ctr(s: str) -> int:\n    return len(re.findall('\\\\d', s))", "import re\n\ndef number_ctr(s: str) -> int:\n    return len(re.findall('\\\\d', s))", "def number_ctr(s: str) -> int:\n    return sum((1 for char in s if char.isdigit()))", "import re\n\ndef number_ctr(s: str) -> int:\n    return len(re.findall('\\\\d', s))", "def number_ctr(s: str) -> int:\n    return sum((1 for char in s if char.isdigit()))", "import re\n\ndef number_ctr(s: str) -> int:\n    return len(re.findall('\\\\d', s))", "def number_ctr(s: str) -> int:\n    return sum((char.isdigit() for char in s))", "def number_ctr(s: str) -> int:\n    return sum((char.isdigit() for char in s))", "import re\n\ndef number_ctr(s: str) -> int:\n    return len(re.findall('\\\\d', s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "import re\n\ndef number_ctr(s: str) -> int:\n    return len(re.findall('\\\\d', s))", "def number_ctr(s: str) -> int:\n    return sum((char.isdigit() for char in s))", "import re\n\ndef number_ctr(s: str) -> int:\n    return len(re.findall('\\\\d', s))", "import re\n\ndef number_ctr(s: str) -> int:\n    return len(re.findall('\\\\d', s))", "def number_ctr(s: str) -> int:\n    return sum((c.isdigit() for c in s))", "def number_ctr(s: str) -> int:\n    return sum((char.isdigit() for char in s))", "def number_ctr(s: str) -> int:\n    return sum((1 for char in s if char.isdigit()))", "import re\n\ndef number_ctr(s: str) -> int:\n    return len(re.findall('\\\\d', s))", "def number_ctr(s: str) -> int:\n    return sum((char.isdigit() for char in s))"], "outputs": "[[1], [5], [0], [6], [0], [1], [1], [6], [1], [10]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['program2bedone'], ['12345'], ['no_digits_here'], ['12ab34cd56'], [''], ['0'], ['a1'], ['test123test456'], ['only1digit'], ['multiple_digits_1234567890']]", "input_output_examples": "[[['program2bedone']], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/765", "original_requirement": "def is_polite(n: int) -> int:\n\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_polite(n: int) -> int:\n\"\"\"\nWrite a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\nassert is_polite(7) == 11\n\"\"\"", "entry_point": "is_polite", "cluster_list": [{"programs_str": ["from typing import List\n\ndef is_polite(n: int) -> int:\n    polite_numbers = []\n    num = 1\n    while len(polite_numbers) < n:\n        if num & num - 1 != 0:\n            polite_numbers.append(num)\n        num += 1\n    return polite_numbers[n - 1]", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(num: int) -> bool:\n        return num & num - 1 == 0 and num != 0\n    count = 0\n    current = 1\n    while True:\n        if not is_power_of_two(current):\n            count += 1\n            if count == n:\n                return current\n        current += 1", "from typing import List\n\ndef is_polite(n: int) -> int:\n\n    def is_power_of_two(x: int) -> bool:\n        return x & x - 1 == 0 and x > 0\n    polite_numbers = []\n    i = 1\n    while len(polite_numbers) < n:\n        if not is_power_of_two(i):\n            polite_numbers.append(i)\n        i += 1\n    return polite_numbers[-1]", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x: int) -> bool:\n        return x & x - 1 == 0 and x > 0\n    polite_count = 0\n    current_number = 1\n    while polite_count < n:\n        if not is_power_of_two(current_number):\n            polite_count += 1\n            if polite_count == n:\n                return current_number\n        current_number += 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x > 0 and x & x - 1 == 0\n    count = 0\n    num = 1\n    while True:\n        if not is_power_of_two(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "from typing import List\n\ndef is_polite(n: int) -> int:\n\n    def get_polite_numbers(limit: int) -> List[int]:\n        polite_nums = []\n        num = 1\n        while len(polite_nums) < limit:\n            if num & num - 1 != 0:\n                polite_nums.append(num)\n            num += 1\n        return polite_nums\n    polite_numbers = get_polite_numbers(n)\n    return polite_numbers[n - 1]", "def is_polite(n: int) -> int:\n\n    def is_polite_num(x):\n        if x & x - 1 == 0:\n            return False\n        return True\n    count = 0\n    num = 1\n    while count < n:\n        if is_polite_num(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x != 0 and x & x - 1 == 0\n    count = 0\n    number = 0\n    while count < n:\n        number += 1\n        if not is_power_of_two(number):\n            count += 1\n    return number", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0 and x != 0\n    count = 0\n    num = 1\n    while True:\n        if not is_power_of_two(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "from typing import List\n\ndef is_polite(n: int) -> int:\n\n    def is_power_of_two(x: int) -> bool:\n        return x & x - 1 == 0 and x != 0\n    polite_numbers = []\n    current = 1\n    while len(polite_numbers) < n:\n        if not is_power_of_two(current):\n            polite_numbers.append(current)\n        current += 1\n    return polite_numbers[n - 1]", "def is_polite(n: int) -> int:\n\n    def is_power_of_2(x):\n        return x & x - 1 == 0 and x != 0\n    count, num = (0, 1)\n    while count < n:\n        num += 1\n        if not is_power_of_2(num):\n            count += 1\n    return num", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x: int) -> bool:\n        return x & x - 1 == 0 and x != 0\n    count, current = (0, 1)\n    while count < n:\n        if not is_power_of_two(current):\n            count += 1\n        current += 1\n    return current - 1", "from typing import List\n\ndef is_polite(n: int) -> int:\n\n    def polite_numbers(count: int) -> List[int]:\n        polite_nums = []\n        number = 1\n        while len(polite_nums) < count:\n            if number & number - 1 != 0:\n                polite_nums.append(number)\n            number += 1\n        return polite_nums\n    return polite_numbers(n)[-1]", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0 and x != 0\n    count, num = (0, 1)\n    while count < n:\n        num += 1\n        if not is_power_of_two(num):\n            count += 1\n    return num", "import math\n\ndef is_polite(n: int) -> int:\n\n    def is_power_of_two(num):\n        return num > 0 and math.log2(num).is_integer()\n    count = 0\n    current_num = 1\n    while True:\n        if not is_power_of_two(current_num):\n            count += 1\n            if count == n:\n                return current_num\n        current_num += 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x and x & x - 1 == 0\n    count = 0\n    current = 1\n    while count < n:\n        if not is_power_of_two(current):\n            count += 1\n        current += 1\n    return current - 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x: int) -> bool:\n        return x & x - 1 == 0 and x > 0\n    polite_numbers = []\n    current = 1\n    while len(polite_numbers) < n:\n        if not is_power_of_two(current):\n            polite_numbers.append(current)\n        current += 1\n    return polite_numbers[-1]", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x & x - 1 == 0 and x != 0\n    count = 0\n    current = 1\n    while count < n:\n        current += 1\n        if not is_power_of_two(current):\n            count += 1\n    return current", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x: int) -> bool:\n        return x > 0 and x & x - 1 == 0\n    count = 0\n    num = 1\n    while True:\n        if not is_power_of_two(num):\n            count += 1\n            if count == n:\n                return num\n        num += 1", "def is_polite(n: int) -> int:\n\n    def is_power_of_two(x):\n        return x > 0 and x & x - 1 == 0\n    polite_numbers = []\n    current = 1\n    while len(polite_numbers) < n:\n        if not is_power_of_two(current):\n            polite_numbers.append(current)\n        current += 1\n    return polite_numbers[n - 1]"], "outputs": "[[3], [11], [14], [25], [107], [509], [1010]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [7], [10], [20], [100], [500], [1000]]", "input_output_examples": "[[[7]], [[11]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/766", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to return a list of all pairs of consecutive items in a given list.\nassert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n\"\"\"", "entry_point": "pair_wise", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    result = [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\n    return result", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]", "from typing import List, Tuple\n\ndef pair_wise(l1: List[int]) -> List[Tuple[int, int]]:\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]"], "outputs": "[[[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]], [[]], [[]], [[(10, 20), (20, 30)]], [[(5, 5), (5, 5), (5, 5)]], [[(1000, -1000), (-1000, 500), (500, -500)]], [[(1, 2)]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 1, 2, 3, 3, 4, 4, 5]], [[1]], [[]], [[10, 20, 30]], [[5, 5, 5, 5]], [[1000, -1000, 500, -500]], [[1, 2]]]", "input_output_examples": "[[[[1, 1, 2, 3, 3, 4, 4, 5]]], [[[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/767", "original_requirement": "from typing import List\n\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n\"\"\"\nWrite a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,\nassert get_pairs_count([1,1,1,1],2) == 6\n\"\"\"", "entry_point": "get_pairs_count", "cluster_list": [{"programs_str": ["from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    from collections import Counter\n    freq = Counter(arr)\n    count = 0\n    for num in arr:\n        complement = sum_ - num\n        count += freq[complement]\n        if complement == num:\n            count -= 1\n    return count / 2", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    from collections import Counter\n    count = 0\n    freq = Counter(arr)\n    for num in arr:\n        complement = sum_ - num\n        count += freq[complement]\n        if complement == num:\n            count -= 1\n    return count / 2", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    nums = Counter(arr)\n    for num in nums:\n        complement = sum_ - num\n        if complement in nums:\n            if complement == num:\n                count += nums[num] * (nums[num] - 1) // 2\n            elif complement > num:\n                count += nums[num] * nums[complement]\n    return float(count)", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    from collections import Counter\n    count = 0\n    freq = Counter(arr)\n    for num in arr:\n        complement = sum_ - num\n        count += freq[complement]\n        if complement == num:\n            count -= 1\n    return count / 2", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in arr:\n        complement = sum_ - num\n        count += freq.get(complement, 0)\n        if complement == num:\n            count -= 1\n    return count / 2", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    pair_count = 0\n    frequency = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in frequency:\n            pair_count += frequency[complement]\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return float(pair_count)", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in freq:\n            count += freq[complement]\n        freq[num] = freq.get(num, 0) + 1\n    return float(count)", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    pair_count = 0\n    freq = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in freq:\n            pair_count += freq[complement]\n        freq[num] = freq.get(num, 0) + 1\n    return float(pair_count)", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    from collections import Counter\n    count = Counter(arr)\n    pairs = 0\n    for num in arr:\n        complement = sum_ - num\n        pairs += count[complement]\n        if complement == num:\n            pairs -= 1\n    return pairs / 2", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in freq:\n            count += freq[complement]\n        freq[num] = freq.get(num, 0) + 1\n    return float(count)", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    freq = Counter(arr)\n    count = 0\n    for num in arr:\n        complement = sum_ - num\n        count += freq[complement]\n        if complement == num:\n            count -= 1\n    return count / 2", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    pair_count = 0\n    freq = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in freq:\n            pair_count += freq[complement]\n        freq[num] = freq.get(num, 0) + 1\n    return float(pair_count)", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in freq:\n            count += freq[complement]\n        freq[num] = freq.get(num, 0) + 1\n    return float(count)", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = {}\n    for num in arr:\n        complement = sum_ - num\n        if complement in freq:\n            count += freq[complement]\n        freq[num] = freq.get(num, 0) + 1\n    return count", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in arr:\n        complement = sum_ - num\n        count += freq[complement]\n        if complement == num:\n            count -= 1\n    return count / 2", "from typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    from collections import Counter\n    count = 0\n    freq = Counter(arr)\n    for num in arr:\n        complement = sum_ - num\n        count += freq.get(complement, 0)\n        if complement == num:\n            count -= 1\n    return count / 2", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in arr:\n        complement = sum_ - num\n        count += freq[complement]\n        if complement == num:\n            count -= 1\n    return count / 2", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in arr:\n        complement = sum_ - num\n        count += freq[complement]\n        if complement == num:\n            count -= 1\n    return count / 2", "from collections import Counter\nfrom typing import List\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = 0\n    freq = Counter(arr)\n    for num in arr:\n        complement = sum_ - num\n        count += freq[complement]\n        if complement == num:\n            count -= 1\n    return count / 2", "from typing import List\nfrom collections import Counter\n\ndef get_pairs_count(arr: List[int], sum_: int) -> float:\n    count = Counter(arr)\n    pairs = 0\n    for num in arr:\n        complement = sum_ - num\n        pairs += count[complement]\n        if complement == num:\n            pairs -= 1\n    return pairs / 2"], "outputs": "[[6.0], [2.0], [3.0], [2.0], [0.0], [0.0], [5.0], [0.0], [15.0], [3.0], [6.0], [0.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 1, 1, 1], 2], [[1, 2, 3, 4, 5], 5], [[1, -1, 2, -2, 3, -3], 0], [[10, 20, 30, 40, 50], 70], [[], 5], [[5], 5], [[1, 2, 3, 1, 2, 3], 4], [[1, 2, 3, 4, 5, 6], 100], [[1, 1, 1, 1, 1, 1], 2], [[1, 2, 3, 4, 5, -1, -2, -3], 3], [[0, 0, 0, 0], 0], [[1, 2, 3], 0]]", "input_output_examples": "[[[[1, 1, 1, 1], 2]], [[6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/769", "original_requirement": "from typing import List\n\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"", "repaired_requirement": "def Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n    Write a Python function to compute the symmetric difference between two lists.\n    The symmetric difference includes elements that are in either of the lists but not in both.\n    The result combines elements unique to the first list and elements unique to the second list.\n    assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n\"\"\"\nWrite a python function to get the difference between two lists.\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n\"\"\"", "entry_point": "Diff", "cluster_list": [{"programs_str": ["from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [x for x in li1 if x not in li2] + [x for x in li2 if x not in li1]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2] + [item for item in li2 if item not in li1]"], "outputs": "[[[10, 15, 30]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[]], [[1, 2, 3]], [[5, 10, 15]], [[2, 4]], [[]], [[10, 20, 30, 40, 50, 60, 70, 80]]]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]], [[10, 15, 20, 30]], [[10, 20, 30, 15]]]]"}, {"programs_str": ["from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return [item for item in li1 if item not in li2]"], "outputs": "[[[10, 15, 30]], [[1, 2, 3, 4, 5]], [[]], [[]], [[5, 10, 15]], [[2]], [[]], [[10, 20, 30, 40, 50]]]", "probability": 0.65, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]], [[10, 15, 20, 30]], [[10, 20, 30, 15]]]]"}, {"programs_str": ["from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) - set(li2)) + list(set(li2) - set(li1))"], "outputs": "[[[10, 30, 15]], [[1, 2, 3, 4, 5, 8, 6, 7]], [[]], [[1, 2, 3]], [[10, 5, 15]], [[2, 4]], [[]], [[40, 10, 50, 20, 30, 80, 60, 70]]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7199877141320895, "llm_generated_inputs": "[[[10, 15, 20, 25, 30], [25, 20]], [[1, 2, 3, 4, 5], [6, 7, 8]], [[10, 15, 20], [10, 15, 20]], [[], [1, 2, 3]], [[5, 10, 15], []], [[1, 1, 2, 3], [1, 3, 4]], [[], []], [[10, 20, 30, 40, 50], [60, 70, 80]]]", "input_output_examples": "[[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]]], [[[10, 20, 30, 15]]]]", "weighted_test_consistency": 0.05, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def Diff(li1: List[int], li2: List[int]) -> List[int]:\n    \"\"\"\n    Write a Python function to compute the symmetric difference between two lists.\n    The symmetric difference includes elements that are in either of the lists but not in both.\n    The result combines elements unique to the first list and elements unique to the second list.\n    assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\n    \"\"\"", "entry_point": "Diff", "cluster_list": [{"programs_str": ["from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1).symmetric_difference(set(li2)))"], "outputs": "[[[10, 30, 15]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[]], [[1, 2, 3]], [[10, 5, 15]], [[2, 4]], [[]], [[70, 40, 10, 80, 50, 20, 60, 30]]]", "probability": 0.8, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]], [[20, 10, 30, 15]], [[10, 20, 30, 15]]]]"}, {"programs_str": ["from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) - set(li2) | set(li2) - set(li1))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) - set(li2) | set(li2) - set(li1))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) - set(li2) | set(li2) - set(li1))", "from typing import List\n\ndef Diff(li1: List[int], li2: List[int]) -> List[int]:\n    return list(set(li1) - set(li2) | set(li2) - set(li1))"], "outputs": "[[[10, 30, 15]], [[1, 2, 3, 4, 5, 6, 7, 8]], [[]], [[1, 2, 3]], [[10, 5, 15]], [[2, 4]], [[]], [[80, 50, 20, 70, 40, 10, 60, 30]]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[[10, 15, 20, 25, 30], [25, 20]], [[1, 2, 3, 4, 5], [6, 7, 8]], [[10, 15, 20], [10, 15, 20]], [[], [1, 2, 3]], [[5, 10, 15], []], [[1, 1, 2, 3], [1, 3, 4]], [[], []], [[10, 20, 30, 40, 50], [60, 70, 80]]]", "input_output_examples": "[[[[10, 15, 20, 25, 30, 35, 40], [25, 40, 35]]], [[[10, 20, 30, 15]]]]", "weighted_test_consistency": 0.2, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.6642857142857143, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.8660714285714286, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/770", "original_requirement": "def odd_num_sum(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def odd_num_sum(n: int) -> int:\n\"\"\"\nWrite a python function to find the sum of fourth power of first n odd natural numbers.\nassert odd_num_sum(2) == 82\n\"\"\"", "entry_point": "odd_num_sum", "cluster_list": [{"programs_str": ["def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum([(2 * i - 1) ** 4 for i in range(1, n + 1)])", "def odd_num_sum(n: int) -> int:\n    return sum([(2 * i - 1) ** 4 for i in range(1, n + 1)])", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum([(2 * i - 1) ** 4 for i in range(1, n + 1)])", "def odd_num_sum(n: int) -> int:\n    return sum([(2 * i - 1) ** 4 for i in range(1, n + 1)])", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))", "def odd_num_sum(n: int) -> int:\n    return sum(((2 * i - 1) ** 4 for i in range(1, n + 1)))"], "outputs": "[[1], [82], [9669], [0], [317338]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [5], [0], [10]]", "input_output_examples": "[[[2]], [[82]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/771", "original_requirement": "def check_expression(expression: str) -> bool:\n\"\"\"\nWrite a function to check if the given expression is balanced or not. \nassert check_expression(\"{()}[{}]\") == True\n\"\"\"", "repaired_requirement": "```python\ndef check_expression(expression: str) -> bool:\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. \n    The function should determine if the expression contains properly balanced \n    pairs of parentheses-like symbols: '()', '{}', and '[]'. \n\n    Rules:\n    1. Only the characters '(', ')', '{', '}', '[', and ']' are considered for balancing.\n       Any other characters in the input string are ignored.\n    2. A pair is considered balanced if:\n       - Every opening symbol ('(', '{', '[') has a corresponding closing symbol \n         (')', '}', ']') in the correct order.\n       - No unmatched opening or closing symbols remain after processing the expression.\n    3. The function should return True if the expression is balanced according to the above rules, \n       and False otherwise.\n\n    Example:\n    assert check_expression(\"{()}[{}]\") == True\n    \"\"\"\n```", "original_clusters": {"requirement": "def check_expression(expression: str) -> bool:\n\"\"\"\nWrite a function to check if the given expression is balanced or not. \nassert check_expression(\"{()}[{}]\") == True\n\"\"\"", "entry_point": "check_expression", "cluster_list": [{"programs_str": ["from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    stack = deque()\n    pairs = {'(': ')', '{': '}', '[': ']'}\n    for char in expression:\n        if char in pairs:\n            stack.append(char)\n        elif char in pairs.values():\n            if not stack or pairs[stack.pop()] != char:\n                return False\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    stack = deque()\n    matching_pairs = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in matching_pairs.values():\n            stack.append(char)\n        elif char in matching_pairs.keys():\n            if not stack or stack.pop() != matching_pairs[char]:\n                return False\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack.pop() != pairs[char]:\n                return False\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    stack = deque()\n    matching_pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in matching_pairs.values():\n            stack.append(char)\n        elif char in matching_pairs.keys():\n            if not stack or stack.pop() != matching_pairs[char]:\n                return False\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    matching = {')': '(', '}': '{', ']': '['}\n    stack = deque()\n    for char in expression:\n        if char in matching.values():\n            stack.append(char)\n        elif char in matching.keys():\n            if not stack or stack.pop() != matching[char]:\n                return False\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in matching_brackets.values():\n            stack.append(char)\n        elif char in matching_brackets.keys():\n            if not stack or stack.pop() != matching_brackets[char]:\n                return False\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    pairs = {'(': ')', '{': '}', '[': ']'}\n    stack = deque()\n    for char in expression:\n        if char in pairs.keys():\n            stack.append(char)\n        elif char in pairs.values():\n            if not stack:\n                return False\n            top = stack.pop()\n            if pairs[top] != char:\n                return False\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    bracket_pairs = {'(': ')', '{': '}', '[': ']'}\n    open_brackets = set(bracket_pairs.keys())\n    close_brackets = set(bracket_pairs.values())\n    stack = deque()\n    for char in expression:\n        if char in open_brackets:\n            stack.append(char)\n        elif char in close_brackets:\n            if not stack or bracket_pairs[stack.pop()] != char:\n                return False\n    return len(stack) == 0", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    pairs = {'(': ')', '{': '}', '[': ']'}\n    for char in expression:\n        if char in pairs:\n            stack.append(char)\n        elif char in pairs.values():\n            if not stack or pairs[stack.pop()] != char:\n                return False\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    pairs = {')': '(', '}': '{', ']': '['}\n    stack = deque()\n    for char in expression:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or stack.pop() != pairs[char]:\n                return False\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    stack = deque()\n    brackets = {'(': ')', '{': '}', '[': ']'}\n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if stack and stack[-1] == pairs[char]:\n                stack.pop()\n            else:\n                return False\n    return len(stack) == 0", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack = []\n    matching_braces = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in matching_braces.values():\n            stack.append(char)\n        elif char in matching_braces.keys():\n            if not stack or stack[-1] != matching_braces[char]:\n                return False\n            stack.pop()\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    brackets = {'(': ')', '{': '}', '[': ']'}\n    stack = deque()\n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    pairs = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack.pop() != pairs[char]:\n                return False\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    stack = deque()\n    matching_parentheses = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in matching_parentheses.values():\n            stack.append(char)\n        elif char in matching_parentheses:\n            if not stack or stack.pop() != matching_parentheses[char]:\n                return False\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping.values():\n            stack.append(char)\n        elif char in mapping.keys():\n            if not stack or stack.pop() != mapping[char]:\n                return False\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack = []\n    matching_pairs = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack or stack[-1] != matching_pairs[char]:\n                return False\n            stack.pop()\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    matching_brackets = {')': '(', ']': '[', '}': '{'}\n    for char in expression:\n        if char in matching_brackets.values():\n            stack.append(char)\n        elif char in matching_brackets.keys():\n            if not stack or stack[-1] != matching_brackets[char]:\n                return False\n            stack.pop()\n    return not stack"], "outputs": "[[True], [True], [False], [True], [True], [True], [True], [False], [False], [True], [True], [True], [True]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack"], "outputs": "[[True], [True], [False], [True], [True], [True], [True], [False], [False], [True], [True], [False], [True]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[['{()}[{}]'], ['{[()]}'], ['{[(])}'], ['{}'], ['[]'], ['()'], ['{[]()}'], ['{[}'], ['(]'], ['{([])}'], ['{[()]}'], ['<<<>>>'], ['']]", "input_output_examples": "[[['{()}[{}]']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef check_expression(expression: str) -> bool:\n    \"\"\"\n    Write a function to check if the given expression is balanced or not. \n    The function should determine if the expression contains properly balanced \n    pairs of parentheses-like symbols: '()', '{}', and '[]'. \n\n    Rules:\n    1. Only the characters '(', ')', '{', '}', '[', and ']' are considered for balancing.\n       Any other characters in the input string are ignored.\n    2. A pair is considered balanced if:\n       - Every opening symbol ('(', '{', '[') has a corresponding closing symbol \n         (')', '}', ']') in the correct order.\n       - No unmatched opening or closing symbols remain after processing the expression.\n    3. The function should return True if the expression is balanced according to the above rules, \n       and False otherwise.\n\n    Example:\n    assert check_expression(\"{()}[{}]\") == True\n    \"\"\"\n```", "entry_point": "check_expression", "cluster_list": [{"programs_str": ["def check_expression(expression: str) -> bool:\n    stack = []\n    matching_pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack.pop() != matching_pairs[char]:\n                return False\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    stack = deque()\n    matching_pairs = {')': '(', '}': '{', ']': '['}\n    opening_symbols = set(matching_pairs.values())\n    for char in expression:\n        if char in opening_symbols:\n            stack.append(char)\n        elif char in matching_pairs:\n            if not stack or stack.pop() != matching_pairs[char]:\n                return False\n    return not stack", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    matching_pairs = {')': '(', '}': '{', ']': '['}\n    stack = deque()\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != matching_pairs[char]:\n                return False\n            stack.pop()\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    pairs = {')': '(', '}': '{', ']': '['}\n    stack: List[str] = []\n    for char in expression:\n        if char in pairs.values():\n            stack.append(char)\n        elif char in pairs.keys():\n            if not stack or stack[-1] != pairs[char]:\n                return False\n            stack.pop()\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    pairings = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in pairings.values():\n            stack.append(char)\n        elif char in pairings.keys():\n            if not stack or stack.pop() != pairings[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack.pop() != pairs[char]:\n                return False\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    matching_pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != matching_pairs[char]:\n                return False\n            stack.pop()\n    return len(stack) == 0", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    opening_brackets = set(bracket_map.values())\n    stack = deque()\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in bracket_map:\n            if not stack or stack[-1] != bracket_map[char]:\n                return False\n            stack.pop()\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != matching_brackets[char]:\n                return False\n            stack.pop()\n    return len(stack) == 0", "from collections import deque\n\ndef check_expression(expression: str) -> bool:\n    matching_pairs = {')': '(', '}': '{', ']': '['}\n    stack = deque()\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != matching_pairs[char]:\n                return False\n            stack.pop()\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    matching_pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack.pop() != matching_pairs[char]:\n                return False\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    stack: List[str] = []\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != matching_brackets[char]:\n                return False\n            stack.pop()\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    matching = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != matching[char]:\n                return False\n            stack.pop()\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    closing_to_opening = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != closing_to_opening[char]:\n                return False\n            stack.pop()\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    matching_brackets = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != matching_brackets[char]:\n                return False\n            stack.pop()\n    return not stack", "def check_expression(expression: str) -> bool:\n    stack = []\n    pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != pairs[char]:\n                return False\n            stack.pop()\n    return len(stack) == 0", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    bracket_map = {')': '(', '}': '{', ']': '['}\n    stack: List[str] = []\n    for char in expression:\n        if char in bracket_map.values():\n            stack.append(char)\n        elif char in bracket_map.keys():\n            if not stack or stack.pop() != bracket_map[char]:\n                return False\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    matching_pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != matching_pairs[char]:\n                return False\n            stack.pop()\n    return not stack", "from typing import List\n\ndef check_expression(expression: str) -> bool:\n    stack: List[str] = []\n    matching_pairs = {')': '(', '}': '{', ']': '['}\n    for char in expression:\n        if char in '({[':\n            stack.append(char)\n        elif char in ')}]':\n            if not stack or stack[-1] != matching_pairs[char]:\n                return False\n            stack.pop()\n    return not stack"], "outputs": "[[True], [True], [False], [True], [True], [True], [True], [False], [False], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['{()}[{}]'], ['{[()]}'], ['{[(])}'], ['{}'], ['[]'], ['()'], ['{[]()}'], ['{[}'], ['(]'], ['{([])}'], ['{[()]}'], ['<<<>>>'], ['']]", "input_output_examples": "[[['{()}[{}]']], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9735849056603774, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9905660377358491, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/772", "original_requirement": "def remove_length(test_str: str, K: int) -> str:\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def remove_length(test_str: str, K: int) -> str:\n\"\"\"\nWrite a function to remove all the words with k length in the given string.\nassert remove_length('The person is most value tet', 3) == 'person is most value'\n\"\"\"", "entry_point": "remove_length", "cluster_list": [{"programs_str": ["def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "from typing import str\n\ndef remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join([word for word in test_str.split() if len(word) != K])", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join([word for word in test_str.split() if len(word) != K])", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "from typing import List\n\ndef remove_length(test_str: str, K: int) -> str:\n    return ' '.join([word for word in test_str.split() if len(word) != K])", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join([word for word in test_str.split() if len(word) != K])", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))", "def remove_length(test_str: str, K: int) -> str:\n    return ' '.join((word for word in test_str.split() if len(word) != K))"], "outputs": "[['person is most value'], ['are words to remove remove'], ['The fox over the lazy dog'], [''], ['All words or longer than K should not be'], ['Exactly matching K words are removed'], [''], ['Multiple spaces should have effect'], ['EdgeCaseWithNoSpacesButMatchingWordLengths'], ['Words at the start removeWords words at the end too'], ['Numerical123 123Values AreNotRemoved'], ['Same k repeated repeated repeated text']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['The person is most value tet', 3], ['Here are some words to remove remove', 4], ['The quick brown fox jumps over the lazy dog', 5], ['', 3], ['All words shorter or longer than K should not be removed', 7], ['Exactly matching K length words are removed', 6], ['SingleWord', 10], ['Multiple spaces   should   have no  effect', 2], ['EdgeCaseWithNoSpacesButMatchingWordLengths', 10], ['Words at the start removeWords words at the end too', 10], ['Numerical123 123Values AreNotRemoved', 3], ['Same k repeated repeated repeated text', 9]]", "input_output_examples": "[[['The person is most value tet', 3]], [['person is most value']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/773", "original_requirement": "from typing import Tuple\n\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n\"\"\"\nWrite a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\nassert occurance_substring('python programming, python language','python')==('python', 0, 6)\n\"\"\"", "entry_point": "occurance_substring", "cluster_list": [{"programs_str": ["from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index != -1:\n        return (pattern, index, index + len(pattern))\n    return None", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index != -1:\n        return (pattern, index, index + len(pattern))\n    return None", "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index != -1:\n        return (pattern, index, index + len(pattern))\n    return None", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    if pattern in text:\n        start_index = text.index(pattern)\n        end_index = start_index + len(pattern)\n        return (pattern, start_index, end_index)\n    return None", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index == -1:\n        return None\n    return (pattern, index, index + len(pattern))", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_idx = text.find(pattern)\n    if start_idx == -1:\n        return None\n    end_idx = start_idx + len(pattern)\n    return (pattern, start_idx, end_idx)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index != -1:\n        return (pattern, index, index + len(pattern))\n    return None", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    index = text.find(pattern)\n    if index != -1:\n        return (pattern, index, index + len(pattern))\n    return None", "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start = text.find(pattern)\n    if start == -1:\n        return None\n    end = start + len(pattern)\n    return (pattern, start, end)", "from typing import Optional, Tuple\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index != -1:\n        end_index = start_index + len(pattern)\n        return (pattern, start_index, end_index)\n    return None", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    if pattern in text:\n        start_index = text.index(pattern)\n        end_index = start_index + len(pattern)\n        return (pattern, start_index, end_index)\n    return None", "from typing import Tuple, Optional\n\ndef occurance_substring(text: str, pattern: str) -> Optional[Tuple[str, int, int]]:\n    start_index = text.find(pattern)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(pattern)\n    return (pattern, start_index, end_index)"], "outputs": "[[('python', 0, 6)], [('world', 6, 11)], [None], [None], [('', 0, 0)], [('aaa', 0, 3)], [('substring', 0, 9)], [('python', 0, 6)], [('Python', 0, 6)], [None], [('123', 0, 3)], [('@', 19, 20)], [('repeat', 0, 6)], [('CASE', 5, 9)], [('here', 10, 14)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['python programming, python language', 'python'], ['hello world', 'world'], ['abcdef', 'gh'], ['', 'test'], ['test', ''], ['aaa aaa aaa', 'aaa'], ['substring substring substring', 'substring'], ['pythonPYTHON', 'python'], ['Python programming, python language', 'Python'], ['no match here', 'missing'], ['123 123 123', '123'], ['special characters @#!', '@'], ['repeat repeat repeat', 'repeat'], ['case CASE case', 'CASE'], ['edge case here', 'here']]", "input_output_examples": "[[['python programming, python language', 'python']], [[('python', 0, 6)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/775", "original_requirement": "from typing import List\n\n\ndef odd_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef odd_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every odd index contains odd numbers of a given list.\nassert odd_position([2,1,4,3,6,7,6,3]) == True\n\"\"\"", "entry_point": "odd_position", "cluster_list": [{"programs_str": ["from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 1 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 1 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 1 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))", "from typing import List\n\ndef odd_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 != 0 for i in range(1, len(nums), 2)))"], "outputs": "[[True], [True], [True], [False], [True], [False], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 1, 4, 3, 6, 7, 6, 3]], [[]], [[1]], [[2, 2]], [[2, 3]], [[2, 1, 4, 2, 6, 7, 6, 4]], [[1, 3, 5, 7, 9, 11]], [[2, 1, 4, 9, 6, 7, 6, 11]], [[0, 3, 0, 5, 0, 7]], [[8, 1, 8, 3, 8, 5, 8, 7]], [[2, -3, 4, -5, 6, -7, 8, -9]]]", "input_output_examples": "[[[[2, 1, 4, 3, 6, 7, 6, 3]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/777", "original_requirement": "from typing import List\n\n\ndef find_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"", "repaired_requirement": "from typing import List\n\n\ndef find_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef find_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"", "entry_point": "find_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum([x for x in arr if arr.count(x) == 1])", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_counts = Counter(arr)\n    return sum((num for num, count in element_counts.items() if count == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_counts = Counter(arr)\n    return sum((e for e, count in element_counts.items() if count == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in arr if arr.count(num) == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = Counter(arr)\n    non_repeated_elements = [key for key, count in element_count.items() if count == 1]\n    return sum(non_repeated_elements)", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_counts = Counter(arr)\n    return sum((value for value, count in element_counts.items() if count == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_counts = Counter(arr)\n    return sum((element for element, count in element_counts.items() if count == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = Counter(arr)\n    return sum([num for num, count in element_count.items() if count == 1])", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = Counter(arr)\n    return sum((x for x in arr if element_count[x] == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_counts = Counter(arr)\n    non_repeated_elements = [key for key, count in element_counts.items() if count == 1]\n    return sum(non_repeated_elements)", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))"], "outputs": "[[20], [140], [0], [0], [0], [1], [15], [1000], [-20], [0]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3, 1, 1, 4, 5, 6]], [20], [21]]]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 1, 1, 4, 5, 6]], [[10, 20, 30, 10, 40, 50]], [[1, 1, 1, 1, 1]], [[]], [[0, 0, 0, 0]], [[1]], [[1, 2, 3, 4, 5]], [[100, 200, 300, 400]], [[-1, -2, -3, -1, -1, -4, -5, -6]], [[1, -1, 2, -2, 3, -3]]]", "input_output_examples": "[[[[1, 2, 3, 1, 1, 4, 5, 6]]], [[21]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "from typing import List\n\n\ndef find_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of non-repeated elements in a given list.\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\n\"\"\"", "entry_point": "find_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum([x for x in arr if arr.count(x) == 1])", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_counts = Counter(arr)\n    return sum((num for num, count in element_counts.items() if count == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_counts = Counter(arr)\n    return sum((e for e, count in element_counts.items() if count == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((num for num in arr if arr.count(num) == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = Counter(arr)\n    non_repeated_elements = [key for key, count in element_count.items() if count == 1]\n    return sum(non_repeated_elements)", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_counts = Counter(arr)\n    return sum((value for value, count in element_counts.items() if count == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_counts = Counter(arr)\n    return sum((element for element, count in element_counts.items() if count == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = Counter(arr)\n    return sum([num for num, count in element_count.items() if count == 1])", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_count = Counter(arr)\n    return sum((x for x in arr if element_count[x] == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))", "from typing import List\nfrom collections import Counter\n\ndef find_sum(arr: List[int]) -> int:\n    element_counts = Counter(arr)\n    non_repeated_elements = [key for key, count in element_counts.items() if count == 1]\n    return sum(non_repeated_elements)", "from typing import List\n\ndef find_sum(arr: List[int]) -> int:\n    return sum((x for x in arr if arr.count(x) == 1))"], "outputs": "[[20], [140], [0], [0], [0], [1], [15], [1000], [-20], [0]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[1, 2, 3, 1, 1, 4, 5, 6]], [20], [21]]]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 1, 1, 4, 5, 6]], [[10, 20, 30, 10, 40, 50]], [[1, 1, 1, 1, 1]], [[]], [[0, 0, 0, 0]], [[1]], [[1, 2, 3, 4, 5]], [[100, 200, 300, 400]], [[-1, -2, -3, -1, -1, -4, -5, -6]], [[1, -1, 2, -2, 3, -3]]]", "input_output_examples": "[[[[1, 2, 3, 1, 1, 4, 5, 6]]], [[21]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.053097345132743334, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.053097345132743334, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/778", "original_requirement": "from typing import List\n\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n\"\"\"\nWrite a function to pack consecutive duplicates of a given list elements into sublists.\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n\"\"\"", "entry_point": "pack_consecutive_duplicates", "cluster_list": [{"programs_str": ["from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    sublist = []\n    for i in range(len(list1)):\n        if not sublist or list1[i] == sublist[-1]:\n            sublist.append(list1[i])\n        else:\n            result.append(sublist)\n            sublist = [list1[i]]\n    if sublist:\n        result.append(sublist)\n    return result", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    packed_list = []\n    if not list1:\n        return packed_list\n    current_sublist = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [list1[i]]\n    packed_list.append(current_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    packed_list = []\n    current_sublist = []\n    for i in range(len(list1)):\n        if current_sublist and list1[i] != current_sublist[-1]:\n            packed_list.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(list1[i])\n    if current_sublist:\n        packed_list.append(current_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    packed_list = []\n    temp_sublist = [list1[0]] if list1 else []\n    for idx in range(1, len(list1)):\n        if list1[idx] == list1[idx - 1]:\n            temp_sublist.append(list1[idx])\n        else:\n            packed_list.append(temp_sublist)\n            temp_sublist = [list1[idx]]\n    if temp_sublist:\n        packed_list.append(temp_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_sublist = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            packed.append(current_sublist)\n            current_sublist = [list1[i]]\n    packed.append(current_sublist)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    sublist = []\n    for i in range(len(list1)):\n        if not sublist or list1[i] == sublist[-1]:\n            sublist.append(list1[i])\n        else:\n            result.append(sublist)\n            sublist = [list1[i]]\n    if sublist:\n        result.append(sublist)\n    return result", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    if not list1:\n        return result\n    current_sublist = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [list1[i]]\n    result.append(current_sublist)\n    return result", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    packed_list = []\n    if not list1:\n        return packed_list\n    current_sublist = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [list1[i]]\n    packed_list.append(current_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    packed_list = []\n    current_sublist = []\n    for item in list1:\n        if not current_sublist or item == current_sublist[-1]:\n            current_sublist.append(item)\n        else:\n            packed_list.append(current_sublist)\n            current_sublist = [item]\n    if current_sublist:\n        packed_list.append(current_sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    temp = []\n    for i in range(len(list1)):\n        if not temp or list1[i] == temp[-1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = [list1[i]]\n    if temp:\n        result.append(temp)\n    return result", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    packed_list = []\n    sublist = []\n    for i in list1:\n        if not sublist or i == sublist[-1]:\n            sublist.append(i)\n        else:\n            packed_list.append(sublist)\n            sublist = [i]\n    if sublist:\n        packed_list.append(sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    if not list1:\n        return result\n    current_sublist = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [list1[i]]\n    result.append(current_sublist)\n    return result", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    if not list1:\n        return result\n    temp_list = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            temp_list.append(list1[i])\n        else:\n            result.append(temp_list)\n            temp_list = [list1[i]]\n    result.append(temp_list)\n    return result", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    current_sublist = []\n    for index, element in enumerate(list1):\n        if not current_sublist or element == current_sublist[-1]:\n            current_sublist.append(element)\n        else:\n            result.append(current_sublist)\n            current_sublist = [element]\n    if current_sublist:\n        result.append(current_sublist)\n    return result", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    if not list1:\n        return result\n    current_sublist = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [list1[i]]\n    result.append(current_sublist)\n    return result", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    if not list1:\n        return []\n    packed = []\n    current_sublist = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            current_sublist.append(list1[i])\n        else:\n            packed.append(current_sublist)\n            current_sublist = [list1[i]]\n    packed.append(current_sublist)\n    return packed", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    packed_list = []\n    sublist = []\n    for i in range(len(list1)):\n        if not sublist or list1[i] == sublist[-1]:\n            sublist.append(list1[i])\n        else:\n            packed_list.append(sublist)\n            sublist = [list1[i]]\n    if sublist:\n        packed_list.append(sublist)\n    return packed_list", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    current_pack = []\n    for num in list1:\n        if not current_pack or current_pack[-1] == num:\n            current_pack.append(num)\n        else:\n            result.append(current_pack)\n            current_pack = [num]\n    if current_pack:\n        result.append(current_pack)\n    return result", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    if not list1:\n        return result\n    sublist = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            sublist.append(list1[i])\n        else:\n            result.append(sublist)\n            sublist = [list1[i]]\n    result.append(sublist)\n    return result", "from typing import List\n\ndef pack_consecutive_duplicates(list1: List[int]) -> List[List[int]]:\n    result = []\n    if not list1:\n        return result\n    temp = [list1[0]]\n    for i in range(1, len(list1)):\n        if list1[i] == list1[i - 1]:\n            temp.append(list1[i])\n        else:\n            result.append(temp)\n            temp = [list1[i]]\n    result.append(temp)\n    return result"], "outputs": "[[[[1, 1], [2], [3, 3, 3], [4]]], [[[0]]], [[]], [[[5], [6], [7]]], [[[9, 9, 9, 9]]], [[[1], [2, 2], [3], [4, 4, 4], [5]]], [[[1, 1, 1], [2], [3, 3, 3], [4, 4, 4]]], [[[4, 4, 4], [5], [6, 6], [7, 7], [8], [9, 9]]], [[[7], [5, 5]]], [[[0], [1, 1], [2], [0, 0]]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 1, 2, 3, 3, 3, 4]], [[0]], [[]], [[5, 6, 7]], [[9, 9, 9, 9]], [[1, 2, 2, 3, 4, 4, 4, 5]], [[1, 1, 1, 2, 3, 3, 3, 4, 4, 4]], [[4, 4, 4, 5, 6, 6, 7, 7, 8, 9, 9]], [[7, 5, 5]], [[0, 1, 1, 2, 0, 0]]]", "input_output_examples": "[[[[0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]]], [[[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.999090909090909, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/780", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"", "repaired_requirement": "def find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Write a function to find all unique combinations of sums between pairs of tuples in the given tuple list.\n    For each pair of tuples (a, b) where a comes before b in the list, calculate a new tuple by summing the \n    corresponding elements of a and b. Return a list of these resulting tuples.\n\n    Example:\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n\"\"\"\nWrite a function to find the combinations of sums with tuples in the given tuple list. \nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\"\"\"", "entry_point": "find_combinations", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return [(a[0] + b[0], a[1] + b[1]) for i, a in enumerate(test_list) for b in test_list[i + 1:]]", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            sum1 = test_list[i][0] + test_list[j][0]\n            sum2 = test_list[i][1] + test_list[j][1]\n            result.append((sum1, sum2))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            sum_1 = test_list[i][0] + test_list[j][0]\n            sum_2 = test_list[i][1] + test_list[j][1]\n            result.append((sum_1, sum_2))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            sum1 = test_list[i][0] + test_list[j][0]\n            sum2 = test_list[i][1] + test_list[j][1]\n            result.append((sum1, sum2))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            sum_1 = test_list[i][0] + test_list[j][0]\n            sum_2 = test_list[i][1] + test_list[j][1]\n            result.append((sum_1, sum_2))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i != j:\n                result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            first_sum = test_list[i][0] + test_list[j][0]\n            second_sum = test_list[i][1] + test_list[j][1]\n            result.append((first_sum, second_sum))\n    return result"], "outputs": "[[[]], [[]], [[]], [[]], [[]], [[]], [[]], [[]], [[]], [[]]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return [(a + c, b + d) for i, (a, b) in enumerate(test_list) for j, (c, d) in enumerate(test_list) if i != j]"], "outputs": "[['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], [[]], ['ValueError']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]], [[(8, 11), (7, 5), (8, 14), (8, 11), (11, 8), (12, 17), (7, 5), (11, 8), (11, 11), (8, 14), (12, 17), (11, 11)]], [[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]]], [[[(1, 2), (3, 4), (5, 6)]]], [[[]]], [[[(7, 8)]]], [[[(1, 2), (1, 2), (1, 2)]]], [[[(100, 200), (300, 400), (500, 600)]]], [[[(0, 0), (0, 0), (0, 0)]]], [[[(1, -1), (-1, 1), (0, 0)]]], [[[(99999999, 99999999), (33333333, 33333333)]]], [[[(2, 4), (6, 7), (5, 1), (6, 10), (3, 1), (8, 9)]]]]", "input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]]], [[[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]", "weighted_test_consistency": 0.95, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    \"\"\"\n    Write a function to find all unique combinations of sums between pairs of tuples in the given tuple list.\n    For each pair of tuples (a, b) where a comes before b in the list, calculate a new tuple by summing the \n    corresponding elements of a and b. Return a list of these resulting tuples.\n\n    Example:\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"", "entry_point": "find_combinations", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            combined = (test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1])\n            result.append(combined)\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            combined = (test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1])\n            result.append(combined)\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            sum_tuple = (test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1])\n            result.append(sum_tuple)\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            combined_tuple = (test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1])\n            result.append(combined_tuple)\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            sum_tuple = (test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1])\n            if sum_tuple not in result:\n                result.append(sum_tuple)\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            combined = (test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1])\n            result.append(combined)\n    return result", "from itertools import combinations\nfrom typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return [tuple(map(sum, zip(a, b))) for a, b in combinations(test_list, 2)]", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            combination = (test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1])\n            result.append(combination)\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    n = len(test_list)\n    for i in range(n):\n        for j in range(i + 1, n):\n            a, b = (test_list[i], test_list[j])\n            result.append((a[0] + b[0], a[1] + b[1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result", "from typing import List, Tuple\n\ndef find_combinations(test_list: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    result = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            result.append((test_list[i][0] + test_list[j][0], test_list[i][1] + test_list[j][1]))\n    return result"], "outputs": "[[[]], [[]], [[]], [[]], [[]], [[]], [[]], [[]], [[]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]]], [[[(1, 2), (3, 4), (5, 6)]]], [[[]]], [[[(7, 8)]]], [[[(1, 2), (1, 2), (1, 2)]]], [[[(100, 200), (300, 400), (500, 600)]]], [[[(0, 0), (0, 0), (0, 0)]]], [[[(1, -1), (-1, 1), (0, 0)]]], [[[(99999999, 99999999), (33333333, 33333333)]]], [[[(2, 4), (6, 7), (5, 1), (6, 10), (3, 1), (8, 9)]]]]", "input_output_examples": "[[[[(2, 4), (6, 7), (5, 1), (6, 10)]]], [[[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.4878048780487805, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.4878048780487805, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/781", "original_requirement": "def count_divisors(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the count of divisors is even. \nassert count_divisors(10)\n\"\"\"", "repaired_requirement": "```python\ndef count_divisors(n: int) -> bool:\n    \"\"\"\n    Write a Python function to determine whether the count of divisors of a given integer `n` is even.\n\n    - The function should accept any integer input, including negative numbers and zero.\n    - For negative numbers, the function should compute the divisors of their positive counterpart by taking the absolute value of `n`.\n    - Divisors are defined as all positive integers `i` such that `n % i == 0`. Both `i` and its paired quotient `n // i` are counted as separate divisors unless `i * i == n` (i.e., when `i` is the square root of `n`), in which case it is counted only once.\n    - For zero, the function should return `True`, treating zero as having an even count of divisors (special case logic).\n    - The function should return `True` if the count of divisors is even, and `False` otherwise.\n    - The function assumes valid integer input and does not handle non-integer or invalid types.\n\n    Example:\n    assert count_divisors(10)  # 10 has 4 divisors (1, 2, 5, 10), which is even, so the result is True.\n    \"\"\"\n```", "original_clusters": {"requirement": "def count_divisors(n: int) -> bool:\n\"\"\"\nWrite a python function to check whether the count of divisors is even. \nassert count_divisors(10)\n\"\"\"", "entry_point": "count_divisors", "cluster_list": [{"programs_str": ["def count_divisors(n: int) -> bool:\n    count = sum((1 for i in range(1, n + 1) if n % i == 0))\n    return count % 2 == 0", "from typing import List\n\ndef count_divisors(n: int) -> bool:\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return len(divisors) % 2 == 0", "def count_divisors(n: int) -> bool:\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return len(divisors) % 2 == 0", "from typing import List\n\ndef count_divisors(n: int) -> bool:\n    divisors_count = sum((1 for i in range(1, n + 1) if n % i == 0))\n    return divisors_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = sum((1 for i in range(1, n + 1) if n % i == 0))\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return len(divisors) % 2 == 0", "def count_divisors(n: int) -> bool:\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return len(divisors) % 2 == 0", "def count_divisors(n: int) -> bool:\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return len(divisors) % 2 == 0", "def count_divisors(n: int) -> bool:\n    divisors = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            divisors += 1\n    return divisors % 2 == 0", "def count_divisors(n: int) -> bool:\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return len(divisors) % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = sum((1 for i in range(1, n + 1) if n % i == 0))\n    return count % 2 == 0", "from typing import List\n\ndef count_divisors(n: int) -> bool:\n    count = sum((1 for i in range(1, n + 1) if n % i == 0))\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = sum((1 for i in range(1, n + 1) if n % i == 0))\n    return count % 2 == 0", "from typing import List\n\ndef count_divisors(n: int) -> bool:\n    divisor_count = sum((1 for i in range(1, n + 1) if n % i == 0))\n    return divisor_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    count = sum((1 for i in range(1, n + 1) if n % i == 0))\n    return count % 2 == 0"], "outputs": "[[False], [True], [True], [True], [False], [False], [True], [True], [True], [True], [True], [False], [True], [True], [True]]", "probability": 0.75, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from math import isqrt\n\ndef count_divisors(n: int) -> bool:\n    divisors = 0\n    for i in range(1, isqrt(n) + 1):\n        if n % i == 0:\n            divisors += 1\n            if i != n // i:\n                divisors += 1\n    return divisors % 2 == 0", "def count_divisors(n: int) -> bool:\n    import math\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors += 2 if i != n // i else 1\n    return divisors % 2 == 0", "def count_divisors(n: int) -> bool:\n    from math import sqrt\n    count = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n // i:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0", "import math\n\ndef count_divisors(n: int) -> bool:\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    from math import isqrt\n    divisors = 0\n    for i in range(1, isqrt(n) + 1):\n        if n % i == 0:\n            divisors += 2 if i != n // i else 1\n    return divisors % 2 == 0"], "outputs": "[[False], [True], [True], [True], [False], [False], [True], ['ValueError'], ['ValueError'], [True], [True], [False], [True], [True], [True]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8112781244591328, "llm_generated_inputs": "[[1], [2], [10], [15], [16], [25], [0], [-1], [-10], [13], [17], [100], [255], [1000], [999983]]", "input_output_examples": "[[[10]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef count_divisors(n: int) -> bool:\n    \"\"\"\n    Write a Python function to determine whether the count of divisors of a given integer `n` is even.\n\n    - The function should accept any integer input, including negative numbers and zero.\n    - For negative numbers, the function should compute the divisors of their positive counterpart by taking the absolute value of `n`.\n    - Divisors are defined as all positive integers `i` such that `n % i == 0`. Both `i` and its paired quotient `n // i` are counted as separate divisors unless `i * i == n` (i.e., when `i` is the square root of `n`), in which case it is counted only once.\n    - For zero, the function should return `True`, treating zero as having an even count of divisors (special case logic).\n    - The function should return `True` if the count of divisors is even, and `False` otherwise.\n    - The function assumes valid integer input and does not handle non-integer or invalid types.\n\n    Example:\n    assert count_divisors(10)  # 10 has 4 divisors (1, 2, 5, 10), which is even, so the result is True.\n    \"\"\"\n```", "entry_point": "count_divisors", "cluster_list": [{"programs_str": ["def count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    divisors_count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors_count += 1\n            if i != n // i:\n                divisors_count += 1\n    return divisors_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    n = abs(n)\n    if n == 0:\n        return True\n    divisor_count = 0\n    limit = int(n ** 0.5)\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            if i * i == n:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count % 2 == 0", "from math import isqrt\n\ndef count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    divisors_count = 0\n    for i in range(1, isqrt(n) + 1):\n        if n % i == 0:\n            divisors_count += 1\n            if i != n // i:\n                divisors_count += 1\n    return divisors_count % 2 == 0", "from math import isqrt\n\ndef count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    count = 0\n    for i in range(1, isqrt(n) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    count = 0\n    limit = int(n ** 0.5) + 1\n    for i in range(1, limit):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0", "import math\n\ndef count_divisors(n: int) -> bool:\n    n = abs(n)\n    if n == 0:\n        return True\n    divisors = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors += 1\n            if i != n // i:\n                divisors += 1\n    return divisors % 2 == 0", "def count_divisors(n: int) -> bool:\n    import math\n    if n == 0:\n        return True\n    n = abs(n)\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            if i != n // i:\n                count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 1 if i * i == n else 2\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    divisors_count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                divisors_count += 1\n            else:\n                divisors_count += 2\n    return divisors_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    n = abs(n)\n    if n == 0:\n        return True\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    count = 0\n    abs_n = abs(n)\n    for i in range(1, int(abs_n ** 0.5) + 1):\n        if abs_n % i == 0:\n            count += 1\n            paired_divisor = abs_n // i\n            if paired_divisor != i:\n                count += 1\n    return count % 2 == 0", "def count_divisors(n: int) -> bool:\n    import math\n    n = abs(n)\n    if n == 0:\n        return True\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i * i == n:\n                divisor_count += 1\n            else:\n                divisor_count += 2\n    return divisor_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    n = abs(n)\n    if n == 0:\n        return True\n    divisors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return len(divisors) % 2 == 0", "def count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    divisors_count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                divisors_count += 1\n            else:\n                divisors_count += 2\n    return divisors_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    n = abs(n)\n    if n == 0:\n        return True\n    divisors_count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                divisors_count += 1\n            else:\n                divisors_count += 2\n    return divisors_count % 2 == 0", "import math\n\ndef count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    divisor_count = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisor_count += 2 if i * i != n else 1\n    return divisor_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    divisors_count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors_count += 2 if i != n // i else 1\n    return divisors_count % 2 == 0", "def count_divisors(n: int) -> bool:\n    n = abs(n)\n    if n == 0:\n        return True\n    divisors_count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if i * i == n:\n                divisors_count += 1\n            else:\n                divisors_count += 2\n    return divisors_count % 2 == 0", "import math\n\ndef count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return len(divisors) % 2 == 0", "def count_divisors(n: int) -> bool:\n    if n == 0:\n        return True\n    n = abs(n)\n    divisors_count = 0\n    limit = int(n ** 0.5)\n    for i in range(1, limit + 1):\n        if n % i == 0:\n            divisors_count += 1\n            if i != n // i:\n                divisors_count += 1\n    return divisors_count % 2 == 0"], "outputs": "[[False], [True], [True], [True], [False], [False], [True], [False], [True], [True], [True], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [10], [15], [16], [25], [0], [-1], [-10], [13], [17], [100], [255], [1000], [999983]]", "input_output_examples": "[[[10]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/782", "original_requirement": "from typing import List\n\n\ndef odd_length_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays. \nassert odd_length_sum([1,2,4]) == 14\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef odd_length_sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of all odd length subarrays. \nassert odd_length_sum([1,2,4]) == 14\n\"\"\"", "entry_point": "odd_length_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total += sum(arr[i:i + length])\n    return total", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total = 0\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total += sum(arr[i:i + length])\n    return total", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total += sum(arr[i:j + 1])\n    return total", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for length in range(1, n + 1, 2):\n            if i + length <= n:\n                total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    n = len(arr)\n    total_sum = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 == 1:\n                total_sum += sum(arr[i:j + 1])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            subarray = arr[i:i + length]\n            total_sum += sum(subarray)\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n, 2):\n            total_sum += sum(arr[i:j + 1])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 == 1:\n                total_sum += sum(arr[i:j + 1])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for i in range(n):\n        for length in range(1, n - i + 1, 2):\n            total_sum += sum(arr[i:i + length])\n    return total_sum", "from typing import List\n\ndef odd_length_sum(arr: List[int]) -> int:\n    total_sum = 0\n    n = len(arr)\n    for length in range(1, n + 1, 2):\n        for start in range(n - length + 1):\n            total_sum += sum(arr[start:start + length])\n    return total_sum"], "outputs": "[[14], [20], [0], [7], [12], [150], [95], [0], [-60], [28]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 4]], [[5, 8, -3]], [[]], [[7]], [[2, 2, 2]], [[100, -50, 25]], [[1, 3, 5, 7, 9]], [[1, 0, 0, -1]], [[-5, -10, -15]], [[1, 1, 1, 1, 1, 1]]]", "input_output_examples": "[[[[1, 2, 4]]], [[14]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/784", "original_requirement": "from typing import List\n\n\ndef mul_even_odd(list1: List[int]) -> int:\n\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"", "repaired_requirement": "```python\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the product of the first even and the first odd number in a given list.\n    \n    Requirements:\n    1. The function assumes the presence of at least one even and one odd number in `list1`.\n    2. If either an even or odd number is absent in the list, the function will raise a `StopIteration` exception.\n    3. The caller is responsible for handling cases where the input list lacks an even or odd number.\n    4. The function does not handle empty lists or lists with all even or all odd numbers internally.\n    \n    Example:\n    assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    \"\"\"\n```", "original_clusters": {"requirement": "from typing import List\n\n\ndef mul_even_odd(list1: List[int]) -> int:\n\"\"\"\nWrite a function to find the product of first even and odd number of a given list.\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4\n\"\"\"", "entry_point": "mul_even_odd", "cluster_list": [{"programs_str": ["from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if first_even is None and num % 2 == 0:\n            first_even = num\n        if first_odd is None and num % 2 != 0:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            break\n    return first_even * first_odd"], "outputs": "[[4], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], ['TypeError'], [4], [18], [50], [14], [6], [0], [56]]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((num for num in list1 if num % 2 == 0))\n    first_odd = next((num for num in list1 if num % 2 != 0))\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((num for num in list1 if num % 2 == 0))\n    first_odd = next((num for num in list1 if num % 2 != 0))\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((num for num in list1 if num % 2 == 0))\n    first_odd = next((num for num in list1 if num % 2 != 0))\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0))\n    first_odd = next((x for x in list1 if x % 2 != 0))\n    return first_even * first_odd"], "outputs": "[[4], ['StopIteration'], ['StopIteration'], ['StopIteration'], ['StopIteration'], ['StopIteration'], [4], [18], [50], [14], [6], [0], [56]]", "probability": 0.5, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    return first_even * first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    return first_even * first_odd if first_even is not None and first_odd is not None else 0", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = next((x for x in list1 if x % 2 == 0), None)\n    first_odd = next((x for x in list1 if x % 2 != 0), None)\n    if first_even is not None and first_odd is not None:\n        return first_even * first_odd\n    return 0"], "outputs": "[[4], [0], [0], [0], [0], [0], [4], [18], [50], [14], [6], [0], [56]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    first_even = None\n    first_odd = None\n    for num in list1:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n        if first_even is not None and first_odd is not None:\n            return first_even * first_odd"], "outputs": "[[4], [None], [None], [None], [None], [None], [4], [18], [50], [14], [6], [0], [56]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8238654610595805, "llm_generated_inputs": "[[[1, 3, 5, 7, 4, 1, 6, 8]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[]], [[1]], [[2]], [[1, 1, 1, 4]], [[6, 2, 8, 3, 1]], [[5, 10, 15, 2, 4]], [[7, 9, 11, 13, 2]], [[2, 10, 8, 6, 3]], [[0, 0, 0, 5]], [[8, 7, 6, 5]]]", "input_output_examples": "[[[[1, 3, 5, 7, 4, 1, 6, 8]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\nfrom typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    \"\"\"\n    Write a function to find the product of the first even and the first odd number in a given list.\n    \n    Requirements:\n    1. The function assumes the presence of at least one even and one odd number in `list1`.\n    2. If either an even or odd number is absent in the list, the function will raise a `StopIteration` exception.\n    3. The caller is responsible for handling cases where the input list lacks an even or odd number.\n    4. The function does not handle empty lists or lists with all even or all odd numbers internally.\n    \n    Example:\n    assert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n    \"\"\"\n```", "entry_point": "mul_even_odd", "cluster_list": [{"programs_str": ["from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_num = next(filter(lambda x: x % 2 == 0, list1))\n    odd_num = next(filter(lambda x: x % 2 != 0, list1))\n    return even_num * odd_num", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_numbers = (num for num in list1 if num % 2 == 0)\n    odd_numbers = (num for num in list1 if num % 2 != 0)\n    try:\n        first_even = next(even_numbers)\n        first_odd = next(odd_numbers)\n        return first_even * first_odd\n    except StopIteration:\n        raise StopIteration('List must contain at least one even and one odd number.')", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 == 1))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_iter = (x for x in list1 if x % 2 == 0)\n    odd_iter = (x for x in list1 if x % 2 != 0)\n    first_even = next(even_iter)\n    first_odd = next(odd_iter)\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_iterator = (x for x in list1 if x % 2 == 0)\n    odd_iterator = (x for x in list1 if x % 2 != 0)\n    first_even = next(even_iterator)\n    first_odd = next(odd_iterator)\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_gen = (x for x in list1 if x % 2 == 0)\n    odd_gen = (x for x in list1 if x % 2 != 0)\n    first_even = next(even_gen)\n    first_odd = next(odd_gen)\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    evens = (x for x in list1 if x % 2 == 0)\n    odds = (x for x in list1 if x % 2 != 0)\n    first_even = next(evens)\n    first_odd = next(odds)\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even = next((x for x in list1 if x % 2 == 0))\n    odd = next((x for x in list1 if x % 2 != 0))\n    return even * odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_gen = (x for x in list1 if x % 2 == 0)\n    odd_gen = (x for x in list1 if x % 2 != 0)\n    first_even = next(even_gen)\n    first_odd = next(odd_gen)\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_iter = (x for x in list1 if x % 2 == 0)\n    odd_iter = (x for x in list1 if x % 2 != 0)\n    first_even = next(even_iter)\n    first_odd = next(odd_iter)\n    return first_even * first_odd", "from typing import List\n\ndef mul_even_odd(list1: List[int]) -> int:\n    even_numbers = (num for num in list1 if num % 2 == 0)\n    odd_numbers = (num for num in list1 if num % 2 != 0)\n    first_even = next(even_numbers)\n    first_odd = next(odd_numbers)\n    return first_even * first_odd"], "outputs": "[[4], ['StopIteration'], ['StopIteration'], ['StopIteration'], ['StopIteration'], ['StopIteration'], [4], [18], [50], [14], [6], [0], [56]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 5, 7, 4, 1, 6, 8]], [[2, 4, 6, 8, 10]], [[1, 3, 5, 7, 9]], [[]], [[1]], [[2]], [[1, 1, 1, 4]], [[6, 2, 8, 3, 1]], [[5, 10, 15, 2, 4]], [[7, 9, 11, 13, 2]], [[2, 10, 8, 6, 3]], [[0, 0, 0, 5]], [[8, 7, 6, 5]]]", "input_output_examples": "[[[[1, 3, 5, 7, 4, 1, 6, 8]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/785", "original_requirement": "def tuple_str_int(test_str: str) -> tuple:\n\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def tuple_str_int(test_str: str) -> tuple:\n\"\"\"\nWrite a function to convert tuple string to integer tuple.\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\n\"\"\"", "entry_point": "tuple_str_int", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(',')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(',')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(',')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "from typing import Tuple\n\ndef tuple_str_int(test_str: str) -> Tuple[int, ...]:\n    return tuple(map(int, test_str.strip('()').split(', ')))", "def tuple_str_int(test_str: str) -> tuple:\n    return tuple(map(int, test_str.strip('()').split(',')))"], "outputs": "[[(7, 8, 9)], [(0, -1, 2)], [(100, 200, 300)], ['ValueError'], [(1,)], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError'], ['ValueError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['(7, 8, 9)'], ['(0, -1, 2)'], ['(100, 200, 300)'], ['(1,)'], ['(1)'], ['()'], ['(7, 8.5, 9)'], ['(seven, eight, nine)'], ['invalid string'], ['(7, , 9)']]", "input_output_examples": "[[['(7, 8, 9)']], [[(7, 8, 9)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9826446280991735, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/786", "original_requirement": "def right_insertion(a: list, x: int) -> int:\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def right_insertion(a: list, x: int) -> int:\n\"\"\"\nWrite a function to locate the right insertion point for a specified value in sorted order.\nassert right_insertion([1,2,4,5],6)==4\n\"\"\"", "entry_point": "right_insertion", "cluster_list": [{"programs_str": ["from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)", "from bisect import bisect_right\n\ndef right_insertion(a: list, x: int) -> int:\n    return bisect_right(a, x)"], "outputs": "[[4], [2], [0], [4], [3], [0], [1], [0], [4], [5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 4, 5], 6], [[1, 2, 4, 5], 3], [[1, 2, 4, 5], 0], [[1, 2, 4, 5], 5], [[1, 2, 4, 5], 4], [[], 6], [[1], 6], [[1], 0], [[1, 3, 5, 7, 9], 8], [[1, 3, 5, 7, 9], 10]]", "input_output_examples": "[[[[1, 2, 4, 5], 6]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/787", "original_requirement": "def text_match_three(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"", "repaired_requirement": "def text_match_three(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"", "original_clusters": {"requirement": "def text_match_three(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"", "entry_point": "text_match_three", "cluster_list": [{"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('abbb', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.search('a{1}b{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('abbb', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.search('a{1}b{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[b]{3}'\n    return re.search(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a(b{3})', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a{1}b{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.match('a(b{3})$', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a{1}b{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('ab{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a{1}b{3}'\n    return re.search(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a(b{3})', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a(b{3})$', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(bbb)'\n    return re.search(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a(b{3})', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.match('a(?:b{3})$', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.match('a(b{3})$', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.match('a(b{3})', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.search('ab{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.match('a(b{3})', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 1.0, "llm_generated_inputs": "[['abbb'], ['aabbb'], ['abbbb'], ['abbbcd'], ['ac'], ['aaaabbb'], ['bbba'], [''], ['bbbb'], ['abbbbbb'], ['abcabbb'], ['a']]", "input_output_examples": "[[['ac']], [[None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def text_match_three(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an a followed by three 'b'.\nassert not text_match_three(\"ac\")\n\"\"\"", "entry_point": "text_match_three", "cluster_list": [{"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('abbb', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.search('a{1}b{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('abbb', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.search('a{1}b{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a[b]{3}'\n    return re.search(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a(b{3})', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a{1}b{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.match('a(b{3})$', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a{1}b{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('ab{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a{1}b{3}'\n    return re.search(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a(b{3})', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a(b{3})$', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    pattern = 'a(bbb)'\n    return re.search(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.fullmatch('a(b{3})', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.match('a(?:b{3})$', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.match('a(b{3})$', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.match('a(b{3})', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.search('ab{3}', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(1, 5), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(3, 7), match=<'abbb'>], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(3, 7), match=<'abbb'>], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_match_three(text: str) -> re.Match:\n    return re.match('a(b{3})', text)"], "outputs": "[[<re.Match object; span=(0, 4), match=<'abbb'>], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 4), match=<'abbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 1.0, "llm_generated_inputs": "[['abbb'], ['aabbb'], ['abbbb'], ['abbbcd'], ['ac'], ['aaaabbb'], ['bbba'], [''], ['bbbb'], ['abbbbbb'], ['abcabbb'], ['a']]", "input_output_examples": "[[['ac']], [[None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9809523809523808, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9809523809523808, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/788", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n\"\"\"\nWrite a function to create a new tuple from the given string and list.\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\n\"\"\"", "entry_point": "new_tuple", "cluster_list": [{"programs_str": ["from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Any, Tuple\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Any, Tuple\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list + [test_str])", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list) + (test_str,)", "from typing import List, Tuple, Any\n\ndef new_tuple(test_list: List[Any], test_str: Any) -> Tuple[Any, ...]:\n    return tuple(test_list + [test_str])"], "outputs": "[[('WEB', 'is', 'best')], [('value',)], [('single_element', 42)], [('A', 'B', 'C', None)], [(1, 2, 3, 4)], [(True, False, True)], [('',)], [(None, 'None')], [('complex_case', {'key': 'value'}, [1, 2], 'added')]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['WEB', 'is'], 'best'], [[], 'value'], [['single_element'], 42], [['A', 'B', 'C'], None], [[1, 2, 3], 4], [[True, False], True], [[], ''], [[None], 'None'], [['complex_case', {'key': 'value'}, [1, 2]], 'added']]", "input_output_examples": "[[[['WEB', 'is'], 'best']], [[('WEB', 'is', 'best')]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/790", "original_requirement": "from typing import List\n\n\ndef even_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef even_position(nums: List[int]) -> bool:\n\"\"\"\nWrite a python function to check whether every even index contains even numbers of a given list.\nassert even_position([3,2,1]) == False\n\"\"\"", "entry_point": "even_position", "cluster_list": [{"programs_str": ["from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 != 0:\n            return False\n    return True", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))", "from typing import List\n\ndef even_position(nums: List[int]) -> bool:\n    return all((nums[i] % 2 == 0 for i in range(0, len(nums), 2)))"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [True], [True], [False], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[2, 3, 4, 5, 6]], [[1, 3, 5, 7, 9]], [[0, 1, 2, 3, 4]], [[2, 2, 2, 2, 2]], [[2]], [[1]], [[0]], [[]], [[2, 3, 4, 6, 8, 10]], [[1, 2, 3, 4, 5, 6]], [[2, 4, 6, 8, 10, 12]], [[2, 4, 6, 7, 10]], [[3, 3, 3, 3, 3, 3]]]", "input_output_examples": "[[[[3, 2, 1]]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.8596491228070174, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/791", "original_requirement": "def remove_nested(test_tup: tuple) -> tuple:\n\"\"\"\nWrite a function to remove tuples from the given tuple.\n\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def remove_nested(test_tup: tuple) -> tuple:\n\"\"\"\nWrite a function to remove tuples from the given tuple.\n\n\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\n\"\"\"", "entry_point": "remove_nested", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((i for i in test_tup if not isinstance(i, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((ele for ele in test_tup if not isinstance(ele, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((x for x in test_tup if not isinstance(x, tuple)))", "def remove_nested(test_tup: tuple) -> tuple:\n    return tuple((item for item in test_tup if not isinstance(item, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((elem for elem in test_tup if not isinstance(elem, tuple)))", "from typing import Tuple\n\ndef remove_nested(test_tup: Tuple) -> Tuple:\n    return tuple((i for i in test_tup if not isinstance(i, tuple)))"], "outputs": "[[(1, 5, 7, 10)], [()], [(2, 4, 6, 12)], [(11,)], [(1, 7)], [(1, 2, 3)], [(0,)], [(1, 6, 7)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(1, 5, 7, (4, 6), 10)], [((),)], [(2, 4, 6, (8, 10), 12)], [((3, 5), (7, 9), 11)], [(1, (2, 3), (4, (5, 6)), 7)], [(1, 2, 3)], [(0, (), ())], [(1, (2, 3, (4,), 5), 6, 7)]]", "input_output_examples": "[[[(1, 5, 7, (4, 6), 10)]], [[(1, 5, 7, 10)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/792", "original_requirement": "from typing import List\n\n\ndef count_list(input_list: List[Any]) -> int:\n\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef count_list(input_list: List[Any]) -> int:\n\"\"\"\nWrite a python function to count the number of lists in a given number of lists.\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\n\"\"\"", "entry_point": "count_list", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import Any, List\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for element in input_list if isinstance(element, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))", "from typing import List, Any\n\ndef count_list(input_list: List[Any]) -> int:\n    return sum((1 for item in input_list if isinstance(item, list)))"], "outputs": "[[4], [2], [0], [3], [2], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 3], [5, 7], [9, 11], [13, 15, 17]]], [[[1, 3], 'hello', [9, 11], 42]], [[]], [[['a', 'b', 'c'], [], [1, 2, 3]]], [[[[1, 2]], [3, [4]], 5]], [['not a list', 42, None]]]", "input_output_examples": "[[[[[1, 3], [5, 7], [9, 11], [13, 15, 17]]]], [[4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/793", "original_requirement": "from typing import List\n\n\ndef last(arr: List[int], x: int) -> int:\n\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef last(arr: List[int], x: int) -> int:\n\"\"\"\nWrite a python function to find the last position of an element in a sorted array.\nassert last([1,2,3],1) == 0\n\"\"\"", "entry_point": "last", "cluster_list": [{"programs_str": ["from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    low, high = (0, len(arr) - 1)\n    result = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == x:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "from typing import List\nfrom bisect import bisect_right\n\ndef last(arr: List[int], x: int) -> int:\n    index = bisect_right(arr, x) - 1\n    if index >= 0 and arr[index] == x:\n        return index\n    return -1", "from typing import List\n\ndef last(arr: List[int], x: int) -> int:\n    left, right = (0, len(arr) - 1)\n    result = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == x:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result"], "outputs": "[[5], [2], [4], [-1], [-1], [1], [0], [-1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 2, 3, 3, 3], 3], [[1, 2, 4, 5], 4], [[1, 1, 1, 1, 1], 1], [[1, 2, 3, 4, 5], 6], [[], 1], [[1, 3, 5, 7, 9], 3], [[10], 10], [[5], 1]]", "input_output_examples": "[[[[1, 2, 3], 1]], [[0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/794", "original_requirement": "def text_starta_endb(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"", "repaired_requirement": "```python\nimport re\n\ndef text_starta_endb(text: str) -> re.Match:\n    \"\"\"\n    Write a function that matches an entire string that starts with a single 'a', \n    is followed by zero or more characters that are NOT 'a', and ends with exactly one 'b'.\n    \n    - The match must encompass the entire string (use `re.fullmatch`).\n    - The string must start with exactly one 'a'.\n    - After the initial 'a', the string can contain any sequence of characters except 'a'.\n    - The string must end with exactly one 'b', with no additional characters after it.\n    - If the string does not meet these criteria, the function should return None.\n\n    Examples:\n    assert text_starta_endb(\"aabbbb\") is None\n    \"\"\"\n```", "original_clusters": {"requirement": "def text_starta_endb(text: str) -> re.Match:\n\"\"\"\nWrite a function that matches a string that has an 'a' followed by anything, ending in 'b'.\nassert text_starta_endb(\"aabbbb\")\n\"\"\"", "entry_point": "text_starta_endb", "cluster_list": [{"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a.*b', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.match('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.search('^a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.match('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.match('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.match('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.search('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [<re.Match object; span=(3, 5), match=<'ab'>], [<re.Match object; span=(3, 6), match=<'abb'>], [None], [None], [None], [<re.Match object; span=(3, 5), match=<'ab'>], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.match('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.search('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [<re.Match object; span=(3, 5), match=<'ab'>], [<re.Match object; span=(3, 6), match=<'abb'>], [None], [None], [None], [<re.Match object; span=(3, 5), match=<'ab'>], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.match('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a.*b$'\n    return re.match(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a.*b', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.search('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [<re.Match object; span=(3, 5), match=<'ab'>], [<re.Match object; span=(3, 6), match=<'abb'>], [None], [None], [None], [<re.Match object; span=(3, 5), match=<'ab'>], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a.*b', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.match('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = 'a.*b$'\n    return re.search(pattern, text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [<re.Match object; span=(3, 5), match=<'ab'>], [<re.Match object; span=(3, 6), match=<'abb'>], [None], [None], [None], [<re.Match object; span=(3, 5), match=<'ab'>], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.search('^a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.search('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [<re.Match object; span=(3, 5), match=<'ab'>], [<re.Match object; span=(3, 6), match=<'abb'>], [None], [None], [None], [<re.Match object; span=(3, 5), match=<'ab'>], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.match('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.match('a.*b$', text)"], "outputs": "[[<re.Match object; span=(0, 6), match=<'aabbbb'>], [<re.Match object; span=(0, 2), match=<'ab'>], [<re.Match object; span=(0, 3), match=<'acb'>], [<re.Match object; span=(0, 5), match=<'a123b'>], [<re.Match object; span=(0, 3), match=<'abb'>], [None], [None], [<re.Match object; span=(0, 6), match=<'aaabbb'>], [None], [None], [None], [None], [None], [None], [<re.Match object; span=(0, 7), match=<'aaaxxbb'>], [None], [None]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['aabbbb'], [<re.Match object; span=(0, 6), match=<'aabbbb'>], [None]]]"}], "entropy": 1.0, "llm_generated_inputs": "[['aabbbb'], ['ab'], ['acb'], ['a123b'], ['abb'], ['a'], ['b'], ['aaabbb'], ['xyzab'], ['xyzabb'], ['xyz'], ['abc'], ['a123xyz'], ['123ab'], ['aaaxxbb'], ['bbb'], ['']]", "input_output_examples": "[[['aabbbb']], [[None]]]", "weighted_test_consistency": 0.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "```python\nimport re\n\ndef text_starta_endb(text: str) -> re.Match:\n    \"\"\"\n    Write a function that matches an entire string that starts with a single 'a', \n    is followed by zero or more characters that are NOT 'a', and ends with exactly one 'b'.\n    \n    - The match must encompass the entire string (use `re.fullmatch`).\n    - The string must start with exactly one 'a'.\n    - After the initial 'a', the string can contain any sequence of characters except 'a'.\n    - The string must end with exactly one 'b', with no additional characters after it.\n    - If the string does not meet these criteria, the function should return None.\n\n    Examples:\n    assert text_starta_endb(\"aabbbb\") is None\n    \"\"\"\n```", "entry_point": "text_starta_endb", "cluster_list": [{"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a[^a]*b$'\n    return re.fullmatch(pattern, text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a[^a]*b$'\n    return re.fullmatch(pattern, text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a[^a]*b$'\n    return re.fullmatch(pattern, text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a[^a]*b$'\n    return re.fullmatch(pattern, text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a[^a]*b$'\n    return re.fullmatch(pattern, text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a[^a]*b$'\n    return re.fullmatch(pattern, text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    pattern = '^a[^a]*b$'\n    return re.fullmatch(pattern, text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef text_starta_endb(text: str) -> re.Match:\n    return re.fullmatch('a[^a]*b', text)"], "outputs": "[[None], [<re.Match object; span=(0, 2), match='ab'>], [<re.Match object; span=(0, 3), match='acb'>], [<re.Match object; span=(0, 5), match='a123b'>], [<re.Match object; span=(0, 3), match='abb'>], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None], [None]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 1.0, "llm_generated_inputs": "[['aabbbb'], ['ab'], ['acb'], ['a123b'], ['abb'], ['a'], ['b'], ['aaabbb'], ['xyzab'], ['xyzabb'], ['xyz'], ['abc'], ['a123xyz'], ['123ab'], ['aaaxxbb'], ['bbb'], ['']]", "input_output_examples": "[[['aabbbb']], [[None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.4716981132075472, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.4716981132075472, "repaired_nzpassk": false, "repaired_majority_passk": false}}
{"task_id": "Mbpp/796", "original_requirement": "def return_sum(d: dict) -> int:\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def return_sum(d: dict) -> int:\n\"\"\"\nWrite function to find the sum of all items in the given dictionary.\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\n\"\"\"", "entry_point": "return_sum", "cluster_list": [{"programs_str": ["from typing import Dict\n\ndef return_sum(d: Dict) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict[str, int]) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict[str, int]) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict) -> int:\n    return sum(d.values())", "def return_sum(d: dict) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict) -> int:\n    return sum(d.values())", "from typing import Dict\n\ndef return_sum(d: Dict) -> int:\n    return sum(d.values())"], "outputs": "[[600], [0], [0], [0], [0], [42], [3012000.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{'a': 100, 'b': 200, 'c': 300}], [{}], [{'x': -50, 'y': 50}], [{'key1': 0, 'key2': 0, 'key3': 0}], [{'p1': -100, 'p2': -200, 'p3': 300}], [{'single': 42}], [{'m1': 10000.0, 'm2': 3000000.0, 'm3': 2000.0}]]", "input_output_examples": "[[[{'a': 100, 'b': 200, 'c': 300}]], [[600]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/797", "original_requirement": "def sum_in_range(l: int, r: int) -> int:\n\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def sum_in_range(l: int, r: int) -> int:\n\"\"\"\nWrite a python function to find the sum of all odd natural numbers within the range l and r.\nassert sum_in_range(2,5) == 8\n\"\"\"", "entry_point": "sum_in_range", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sum_in_range(l: int, r: int) -> int:\n    return sum((x for x in range(l, r + 1) if x % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((num for num in range(l, r + 1) if num % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 == 1))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((n for n in range(l, r + 1) if n % 2 != 0))", "from typing import List\n\ndef sum_in_range(l: int, r: int) -> int:\n    return sum((x for x in range(l, r + 1) if x % 2 != 0))", "from typing import List\n\ndef sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((n for n in range(l, r + 1) if n % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((num for num in range(l, r + 1) if num % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((x for x in range(l, r + 1) if x % 2 != 0))", "from typing import List\n\ndef sum_in_range(l: int, r: int) -> int:\n    return sum((num for num in range(l, r + 1) if num % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((x for x in range(l, r + 1) if x % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((num for num in range(l, r + 1) if num % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "from typing import List\n\ndef sum_in_range(l: int, r: int) -> int:\n    return sum((num for num in range(l, r + 1) if num % 2 == 1))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((x for x in range(l, r + 1) if x % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((i for i in range(l, r + 1) if i % 2 != 0))", "from typing import List\n\ndef sum_in_range(l: int, r: int) -> int:\n    return sum((x for x in range(l, r + 1) if x % 2 != 0))", "from typing import List\n\ndef sum_in_range(l: int, r: int) -> int:\n    return sum((x for x in range(l, r + 1) if x % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum((x for x in range(l, r + 1) if x % 2 != 0))", "def sum_in_range(l: int, r: int) -> int:\n    return sum([x for x in range(l, r + 1) if x % 2 != 0])"], "outputs": "[[8], [25], [5], [3], [0], [0], [75], [0], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[2, 5], [1, 10], [5, 5], [3, 3], [-5, 5], [0, 0], [10, 20], [20, 10], [1, 1]]", "input_output_examples": "[[[2, 5]], [[8]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/798", "original_requirement": "from typing import List\n\n\ndef _sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef _sum(arr: List[int]) -> int:\n\"\"\"\nWrite a python function to find the sum of an array.\nassert _sum([1, 2, 3]) == 6\n\"\"\"", "entry_point": "_sum", "cluster_list": [{"programs_str": ["from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)", "from typing import List\n\ndef _sum(arr: List[int]) -> int:\n    return sum(arr)"], "outputs": "[[6], [0], [100], [-6], [0], [0], [55]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[0, 0, 0]], [[100]], [[-1, -2, -3]], [[]], [[1, -1, 1, -1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]", "input_output_examples": "[[[[1, 2, 3]]], [[6]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/799", "original_requirement": "def left_rotate(n: int, d: int) -> int:\n\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def left_rotate(n: int, d: int) -> int:\n\"\"\"\nWrite a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\nassert left_rotate(16,2) == 64\n\"\"\"", "entry_point": "left_rotate", "cluster_list": [{"programs_str": ["def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d & 4294967295 | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    mask = 4294967295\n    result = (n << d | n >> 32 - d) & mask\n    return result", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d & 4294967295 | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d & 4294967295 | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d & 4294967295 | n >> 32 - d & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d & 4294967295 | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    mask = 4294967295\n    return (n << d | n >> 32 - d) & mask", "def left_rotate(n: int, d: int) -> int:\n    n = n & 4294967295\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    MAX_BITS = 32\n    d = d % MAX_BITS\n    return (n << d | n >> MAX_BITS - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    return n << d & 4294967295 | n >> 32 - d", "def left_rotate(n: int, d: int) -> int:\n    INT_BITS = 32\n    return (n << d | n >> INT_BITS - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    d = d % 32\n    return n << d & 4294967295 | n >> 32 - d & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    return (n << d | n >> 32 - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    INT_BITS = 32\n    d = d % INT_BITS\n    return (n << d | n >> INT_BITS - d) & 4294967295", "def left_rotate(n: int, d: int) -> int:\n    INT_BITS = 32\n    d = d % INT_BITS\n    return (n << d | n >> INT_BITS - d) & 4294967295"], "outputs": "[[64], [0], [4294967295], [2147483648], [1234], [123456789], [4294967295], [65536], [404520960], [3606267273]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[16, 2], [0, 5], [4294967295, 1], [1, 31], [1234, 0], [123456789, 32], [4294967295, 30], [256, 8], [12345, 15], [987654321, 3]]", "input_output_examples": "[[[16, 2]], [[64]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/800", "original_requirement": "def remove_all_spaces(text: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from a string.\n\n\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"", "repaired_requirement": "```python\ndef remove_all_spaces(text: str) -> str:\n    \"\"\"\n    Write a function to remove all space characters (' ') from a string.\n    The function should not remove other types of whitespace characters, such as tabs ('\\\\t') or newlines ('\\\\n').\n    \n    Example:\n    assert remove_all_spaces('python  program') == 'pythonprogram'\n    \n    Additional clarification:\n    - Input strings may contain a mix of spaces and other whitespace characters (e.g., tabs, newlines).\n    - Only space characters (' ') should be removed, while other whitespace characters should remain unchanged.\n    - For example, remove_all_spaces('\\\\t\\\\nno_spaces_hardcase\\\\t\\\\n') should return '\\\\t\\\\nno_spaces_hardcase\\\\t\\\\n'.\n    \"\"\"\n```", "original_clusters": {"requirement": "def remove_all_spaces(text: str) -> str:\n\"\"\"\nWrite a function to remove all whitespaces from a string.\n\n\nassert remove_all_spaces('python  program')==('pythonprogram')\n\"\"\"", "entry_point": "remove_all_spaces", "cluster_list": [{"programs_str": ["def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')"], "outputs": "[['pythonprogram'], ['no_spaces_here'], [''], ['abcdefg'], ['string_with_multiplespaces_and_words'], ['singleword'], ['\\t\\nno_spaces_hardcase\\t\\n']]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def remove_all_spaces(text: str) -> str:\n    return ''.join(text.split())"], "outputs": "[['pythonprogram'], ['no_spaces_here'], [''], ['abcdefg'], ['string_with_multiplespaces_and_words'], ['singleword'], ['no_spaces_hardcase']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[['python  program'], [' no_spaces_here '], ['    '], ['a b c d e f g'], ['string_with_multiple spaces_and_words'], ['singleword'], ['\\t\\nno_spaces_hardcase\\t\\n']]", "input_output_examples": "[[['python  program']], [['pythonprogram']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef remove_all_spaces(text: str) -> str:\n    \"\"\"\n    Write a function to remove all space characters (' ') from a string.\n    The function should not remove other types of whitespace characters, such as tabs ('\\\\t') or newlines ('\\\\n').\n    \n    Example:\n    assert remove_all_spaces('python  program') == 'pythonprogram'\n    \n    Additional clarification:\n    - Input strings may contain a mix of spaces and other whitespace characters (e.g., tabs, newlines).\n    - Only space characters (' ') should be removed, while other whitespace characters should remain unchanged.\n    - For example, remove_all_spaces('\\\\t\\\\nno_spaces_hardcase\\\\t\\\\n') should return '\\\\t\\\\nno_spaces_hardcase\\\\t\\\\n'.\n    \"\"\"\n```", "entry_point": "remove_all_spaces", "cluster_list": [{"programs_str": ["def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')", "def remove_all_spaces(text: str) -> str:\n    return text.replace(' ', '')"], "outputs": "[['pythonprogram'], ['no_spaces_here'], [''], ['abcdefg'], ['string_with_multiplespaces_and_words'], ['singleword'], ['\\t\\nno_spaces_hardcase\\t\\n']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['python  program'], [' no_spaces_here '], ['    '], ['a b c d e f g'], ['string_with_multiple spaces_and_words'], ['singleword'], ['\\t\\nno_spaces_hardcase\\t\\n']]", "input_output_examples": "[[['python  program']], [['pythonprogram']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/801", "original_requirement": "def test_three_equal(x: int, y: int, z: int) -> int:\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\n\nassert test_three_equal(1,1,1) == 3\n\"\"\"", "repaired_requirement": "```python\ndef test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n    Write a Python function to determine how many of the three given integers are equal.\n\n    The function should return:\n    - 3 if all three numbers are equal.\n    - 2 if exactly two numbers are equal.\n    - 0 if no numbers are equal.\n\n    Examples:\n    assert test_three_equal(1, 1, 1) == 3\n    assert test_three_equal(1, 2, 3) == 0\n    assert test_three_equal(1, 1, 2) == 2\n    \"\"\"\n```", "original_clusters": {"requirement": "def test_three_equal(x: int, y: int, z: int) -> int:\n\"\"\"\nWrite a python function to count the number of equal numbers from three given integers.\n\n\nassert test_three_equal(1,1,1) == 3\n\"\"\"", "entry_point": "test_three_equal", "cluster_list": [{"programs_str": ["def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0"], "outputs": "[[3], [2], [0], [3], [3], [2], [2], [3], [2], [3], [0], [2], [3]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 1"], "outputs": "[[3], [2], [1], [3], [3], [2], [2], [3], [2], [3], [1], [2], [3]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[1, 1, 1], [1, 1, 2], [1, 2, 3], [-1, -1, -1], [0, 0, 0], [1, 1, 0], [1, 2, 2], [99999999, 99999999, 99999999], [-100, -100, -101], [42, 42, 42], [0, 1, 2], [100000, 100000, 100001], [-2, -2, -2]]", "input_output_examples": "[[[1, 1, 1]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "```python\ndef test_three_equal(x: int, y: int, z: int) -> int:\n    \"\"\"\n    Write a Python function to determine how many of the three given integers are equal.\n\n    The function should return:\n    - 3 if all three numbers are equal.\n    - 2 if exactly two numbers are equal.\n    - 0 if no numbers are equal.\n\n    Examples:\n    assert test_three_equal(1, 1, 1) == 3\n    assert test_three_equal(1, 2, 3) == 0\n    assert test_three_equal(1, 1, 2) == 2\n    \"\"\"\n```", "entry_point": "test_three_equal", "cluster_list": [{"programs_str": ["def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or x == z or y == z:\n        return 2\n    else:\n        return 0", "def test_three_equal(x: int, y: int, z: int) -> int:\n    if x == y == z:\n        return 3\n    elif x == y or y == z or x == z:\n        return 2\n    else:\n        return 0"], "outputs": "[[3], [2], [0], [3], [3], [2], [2], [3], [2], [3], [0], [2], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1, 1, 1], [1, 1, 2], [1, 2, 3], [-1, -1, -1], [0, 0, 0], [1, 1, 0], [1, 2, 2], [99999999, 99999999, 99999999], [-100, -100, -101], [42, 42, 42], [0, 1, 2], [100000, 100000, 100001], [-2, -2, -2]]", "input_output_examples": "[[[1, 1, 1]], [[3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true}}
{"task_id": "Mbpp/803", "original_requirement": "def is_perfect_square(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is a perfect square or not. \nassert not is_perfect_square(10)\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_perfect_square(n: int) -> bool:\n\"\"\"\nWrite a function to check whether the given number is a perfect square or not. \nassert not is_perfect_square(10)\n\"\"\"", "entry_point": "is_perfect_square", "cluster_list": [{"programs_str": ["import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "from math import isqrt\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    sqrt_n = int(math.sqrt(n))\n    return sqrt_n * sqrt_n == n", "from math import isqrt\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = isqrt(n)\n    return root * root == n", "from math import isqrt\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n", "import math\n\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = math.isqrt(n)\n    return root * root == n"], "outputs": "[[True], [True], [True], [True], [False], [False], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[16], [25], [0], [1], [-4], [3], [10], [1000000], [999999]]", "input_output_examples": "[[[10]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/804", "original_requirement": "from typing import List\n\n\ndef is_product_even(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef is_product_even(arr: List[int]) -> bool:\n\"\"\"\nWrite a function to check whether the product of numbers in a list is even or not.\nassert is_product_even([1,2,3])\n\"\"\"", "entry_point": "is_product_even", "cluster_list": [{"programs_str": ["from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for number in arr:\n        if number % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False", "from typing import List\n\ndef is_product_even(arr: List[int]) -> bool:\n    for num in arr:\n        if num % 2 == 0:\n            return True\n    return False"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [False], [True], [True], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[1, 3, 5]], [[2, 4, 6]], [[0, 1, 2]], [[10]], [[1]], [[0]], [[]], [[-1, -2, -3]], [[1, -2]], [[-2]], [[1, 2, 3, 4]], [[1, 3, 5, 7]], [[1, 2, 3, 0]]]", "input_output_examples": "[[[[1, 2, 3]]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/805", "original_requirement": "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n\"\"\"\nWrite a function that returns the list in a list of lists whose sum of elements is the highest.\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]\n\"\"\"", "entry_point": "max_sum_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    max_sum = float('-inf')\n    max_list = []\n    for l in lists:\n        current_sum = sum(l)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = l\n    return max_list", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)", "from typing import List\n\ndef max_sum_list(lists: List[List[int]]) -> List[int]:\n    return max(lists, key=sum)"], "outputs": "[[[10, 11, 12]], [[1, 1, 1]], [[1, 1, 1]], [[]], [[]], [[100]], [[1, 2, 3]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]], [[[0, 0, 0], [1, 1, 1], [-1, -1, -1]]], [[[1], [1, 1], [1, 1, 1]]], [[[], [0], [-1]]], [[[], [], []]], [[[100], [10, 20], [-50, -25, 150]]], [[[1, 2, 3], [-4, -5, -6], [4, -5, 6]]]]", "input_output_examples": "[[[[[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]]]], [[[10, 11, 12]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/806", "original_requirement": "def max_run_uppercase(test_str: str) -> int:\n\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def max_run_uppercase(test_str: str) -> int:\n\"\"\"\nWrite a function to find maximum run of uppercase characters in the given string.\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\n\"\"\"", "entry_point": "max_run_uppercase", "cluster_list": [{"programs_str": ["def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    max_run = max(max_run, current_run)\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n        else:\n            max_count = max(max_count, current_count)\n            current_count = 0\n    max_count = max(max_count, current_count)\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_run = 0\n    current_run = 0\n    for char in test_str:\n        if char.isupper():\n            current_run += 1\n            if current_run > max_run:\n                max_run = current_run\n        else:\n            current_run = 0\n    return max_run", "def max_run_uppercase(test_str: str) -> int:\n    max_count = 0\n    current_count = 0\n    for char in test_str:\n        if char.isupper():\n            current_count += 1\n            max_count = max(max_count, current_count)\n        else:\n            current_count = 0\n    return max_count"], "outputs": "[[5], [5], [6], [5], [0], [12], [0], [10], [1], [0], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['GeMKSForGERksISBESt'], ['ABCDE'], ['aBcDeFGHIJKlMnOpQrStUvWxYz'], ['HELLOworldHELLO'], ['thisstringhasnouppercase'], ['ALLUPPERCASE123'], ['12345!@#$%'], ['UPPERlowerUPPERLOWERupper'], ['A'], ['abcdefghijklmnopqrstuvwxyz'], ['']]", "input_output_examples": "[[['GeMKSForGERksISBESt']], [[5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.5428571428571429, "original_nzpassk": false, "original_majority_passk": false, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/807", "original_requirement": "from typing import List\n\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n\"\"\"\nWrite a python function to find the first odd number in a given list of numbers.\nassert first_odd([1,3,5]) == 1\n\"\"\"", "entry_point": "first_odd", "cluster_list": [{"programs_str": ["from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None", "from typing import List, Optional\n\ndef first_odd(nums: List[int]) -> Optional[int]:\n    for num in nums:\n        if num % 2 != 0:\n            return num\n    return None"], "outputs": "[[1], [None], [1], [11], [None], [-1], [None], [7], [-3], [11]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 5]], [[2, 4, 6]], [[0, 2, 4, 1, 3]], [[11, 22, 33, 44]], [[]], [[2, 6, 8, -1, 3]], [[2]], [[7]], [[-3, -5, -7]], [[4, 8, 11]]]", "input_output_examples": "[[[[1, 3, 5]]], [[1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/808", "original_requirement": "def check_K(test_tup: tuple, K: any) -> bool:\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def check_K(test_tup: tuple, K: any) -> bool:\n\"\"\"\nWrite a function to check if the given tuples contain the k or not.\nassert check_K((10, 4, 5, 6, 8), 6) == True\n\"\"\"", "entry_point": "check_K", "cluster_list": [{"programs_str": ["def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "from typing import Any, Tuple\n\ndef check_K(test_tup: Tuple, K: Any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "from typing import Tuple, Any\n\ndef check_K(test_tup: Tuple[Any, ...], K: Any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "from typing import Any, Tuple\n\ndef check_K(test_tup: Tuple, K: Any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup", "def check_K(test_tup: tuple, K: any) -> bool:\n    return K in test_tup"], "outputs": "[[True], [False], [True], [True], [False], [True], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(10, 4, 5, 6, 8), 6], [(1, 2, 3, 4), 5], [(10,), 10], [(5, 4, 3, 2, 1), 3], [(10, 20, 30, 40, 50), 25], [(1, 1, 1, 1), 1], [(-1, -2, -3, -4), -3], [(0,), 1], [(100, 200, 300, 400, 500), 400], [('', 'hello', 'world'), 'hello']]", "input_output_examples": "[[[(10, 4, 5, 6, 8), 6]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
{"task_id": "Mbpp/809", "original_requirement": "from typing import Tuple\n\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Tuple\n\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n\"\"\"\nWrite a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\n\"\"\"", "entry_point": "check_smaller", "cluster_list": [{"programs_str": ["from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((a > b for a, b in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))", "from typing import Tuple\n\ndef check_smaller(test_tup1: Tuple[int, ...], test_tup2: Tuple[int, ...]) -> bool:\n    return all((x > y for x, y in zip(test_tup1, test_tup2)))"], "outputs": "[[True], [False], [True], [True], [False], [False], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[(1, 2, 3), (0, 1, 2)], [(1, 2, 3), (1, 2, 3)], [(), ()], [(10,), (5,)], [(5,), (10,)], [(1, 2, 3), (2, 1)], [(7, 8, 9), (10, 12, 15)], [(5, 10, 15), (4, 9, 14)], [(3, -1, 5), (2, -2, 4)], [(2, 2, 2), (1, 1, 1)]]", "input_output_examples": "[[[(1, 2, 3), (2, 3, 4)]], [[False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null}}
