{"task_id": "HumanEval/0", "original_requirement": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"", "entry_point": "has_close_elements", "cluster_list": [{"programs_str": ["from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    if not numbers or len(numbers) < 2:\n        return False\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i + 1] - sorted_numbers[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers = sorted(numbers)\n    for i in range(len(numbers) - 1):\n        if abs(numbers[i + 1] - numbers[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if numbers_sorted[i + 1] - numbers_sorted[i] < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if numbers_sorted[i + 1] - numbers_sorted[i] < threshold:\n            return True\n    return False"], "outputs": "[[False], [True], [False], [False], [True], [True], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1.0, 2.0, 3.0], 0.5], [[1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3], [[], 1.0], [[5.0], 1.0], [[1.0, 1.0, 1.0], 0.1], [[1.0, 1.05, 2.0, 4.0], 0.1], [[1.0, 1.05, 2.0, 4.0], 0.06], [[1.0, 2.0, 3.0, 3.999999], 1e-05], [[-1.0, -1.1, -2.0], 0.15], [[0.0, 1e-09, 2e-09], 1e-08]]", "input_output_examples": "[[[[1.0, 2.0, 3.0], 0.5], [[1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3]], [[False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/1", "original_requirement": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"", "entry_point": "separate_paren_groups", "cluster_list": [{"programs_str": ["from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    stack = []\n    current = []\n    for ch in paren_string:\n        current.append(ch)\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            if stack:\n                stack.pop()\n            if not stack:\n                groups.append(''.join(current))\n                current = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    s = paren_string.replace(' ', '')\n    groups = []\n    current = ''\n    balance = 0\n    for char in s:\n        current += char\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance == 0 and current:\n            groups.append(current)\n            current = ''\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    cleaned = paren_string.replace(' ', '')\n    result = []\n    stack = []\n    current = []\n    for char in cleaned:\n        if char == '(':\n            stack.append(char)\n            current.append(char)\n        elif char == ')':\n            current.append(char)\n            stack.pop()\n            if not stack:\n                result.append(''.join(current))\n                current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    current = []\n    balance = 0\n    for char in paren_string:\n        current.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current:\n            result.append(''.join(current))\n            current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    stack = []\n    current = ''\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current += char\n        elif char == ')':\n            stack.pop()\n            current += char\n            if not stack:\n                result.append(current)\n                current = ''\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    current = []\n    balance = 0\n    for char in paren_string:\n        current.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current:\n            result.append(''.join(current))\n            current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = []\n    balance = 0\n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current_group:\n            groups.append(''.join(current_group))\n            current_group = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    cleaned = paren_string.replace(' ', '')\n    results = []\n    current = ''\n    balance = 0\n    for ch in cleaned:\n        current += ch\n        if ch == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance == 0 and current:\n            results.append(current)\n            current = ''\n    return results", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = []\n    balance = 0\n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current_group:\n            groups.append(''.join(current_group))\n            current_group = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = []\n    balance = 0\n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current_group:\n            groups.append(''.join(current_group))\n            current_group = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    s = paren_string.replace(' ', '')\n    result = []\n    current = ''\n    balance = 0\n    for ch in s:\n        current += ch\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n        if balance == 0 and current:\n            result.append(current)\n            current = ''\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    count = 0\n    start = 0\n    for i, ch in enumerate(paren_string):\n        if ch == '(':\n            if count == 0:\n                start = i\n            count += 1\n        elif ch == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i + 1])\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    stack = []\n    current = []\n    for char in paren_string:\n        if char == '(':\n            stack.append(char)\n            current.append(char)\n        elif char == ')':\n            if stack:\n                stack.pop()\n                current.append(char)\n                if not stack:\n                    result.append(''.join(current))\n                    current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    s = paren_string.replace(' ', '')\n    groups = []\n    current = []\n    balance = 0\n    for char in s:\n        current.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n            if balance == 0:\n                groups.append(''.join(current))\n                current = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = []\n    balance = 0\n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current_group:\n            groups.append(''.join(current_group))\n            current_group = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    stack = []\n    start = 0\n    for i, ch in enumerate(paren_string):\n        if ch == '(':\n            if not stack:\n                start = i\n            stack.append(ch)\n        elif ch == ')':\n            stack.pop()\n            if not stack:\n                result.append(paren_string[start:i + 1])\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    group = []\n    balance = 0\n    for ch in paren_string:\n        group.append(ch)\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n        if balance == 0 and group:\n            result.append(''.join(group))\n            group = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    current = []\n    balance = 0\n    for ch in paren_string:\n        current.append(ch)\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n        if balance == 0 and current:\n            result.append(''.join(current))\n            current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    depth = 0\n    current_group = []\n    for ch in paren_string:\n        if ch == '(':\n            if depth == 0:\n                current_group = []\n            current_group.append(ch)\n            depth += 1\n        elif ch == ')':\n            current_group.append(ch)\n            depth -= 1\n            if depth == 0:\n                result.append(''.join(current_group))\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    s = paren_string.replace(' ', '')\n    groups = []\n    current = []\n    balance = 0\n    for char in s:\n        current.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current:\n            groups.append(''.join(current))\n            current = []\n    return groups"], "outputs": "[[['()', '(())', '(()())']], [['()', '()', '()']], [['((()))']], [['(())', '(())']], [['()', '((()))', '()']], [['((()))', '(())', '()']], [[]], [[]], [['()', '((())(()()))']], [['()', '(())', '(())', '(())']], [['()', '(())', '((()))', '(((())))']], [['()', '(())']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['( ) (( )) (( )( ))'], ['()()()'], ['((()))'], ['(())(())'], ['() ((())) ()'], [' ((( ))) (( ))  ( ) '], [''], ['   '], ['( )((())(()()))'], ['( ) (( )) ( () ) (( ))'], ['() (()) ((())) (((())))'], ['( )( ( ) )']]", "input_output_examples": "[[['( ) (( )) (( )( ))']], [[['()', '(())', '(()())']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/2", "original_requirement": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"", "entry_point": "truncate_number", "cluster_list": [{"programs_str": ["def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part"], "outputs": "[[0.5], [0.0], [0.9990000000000001], [0.9876543283462524], [1e-06], [0.0], [0.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3.5], [0.0], [1.999], [123456789.98765433], [1e-06], [10.0], [10000000000000.0]]", "input_output_examples": "[[[3.5]], [[0.5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/3", "original_requirement": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"", "entry_point": "below_zero", "cluster_list": [{"programs_str": ["from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"], "outputs": "[[False], [True], [True], [False], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[1, 2, -4, 5]], [[-1]], [[0]], [[-1, 1]], [[10, -5, -6]], [[5, -3, -1, -1]], [[]]]", "input_output_examples": "[[[[1, 2, 3]], [[1, 2, -4, 5]]], [[False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/4", "original_requirement": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"", "entry_point": "mean_absolute_deviation", "cluster_list": [{"programs_str": ["from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_value = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean_value) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    deviations = [abs(x - mean) for x in numbers]\n    return sum(deviations) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)"], "outputs": "[[1.0], [0.0], [0.0], [1.0], [500012.25], ['ZeroDivisionError'], [0.0], [1.111]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1.0, 2.0, 3.0, 4.0]], [[5.5, 5.5, 5.5, 5.5]], [[10.0]], [[-1.0, -2.0, -3.0, -4.0]], [[1.0, 1000000.0, -1000000.0, 50.0]], [[]], [[0.0, 0.0, 0.0, 0.0]], [[1.234, 2.345, 3.456, 4.567]]]", "input_output_examples": "[[[[1.0, 2.0, 3.0, 4.0]]], [[1.0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/5", "original_requirement": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"", "entry_point": "intersperse", "cluster_list": [{"programs_str": ["from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for num in numbers[:-1]:\n        result.append(num)\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result"], "outputs": "[[[]], [[1, 4, 2, 4, 3]], [[5]], [[0, 1, 0, 1, 0]], [[-1, 0, -2, 0, -3]], [[1, -1, 2, -1, 3, -1, 4, -1, 5]], [[999999, 777777, 888888]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[], 4], [[1, 2, 3], 4], [[5], 9], [[0, 0, 0], 1], [[-1, -2, -3], 0], [[1, 2, 3, 4, 5], -1], [[999999, 888888], 777777]]", "input_output_examples": "[[[[], 4], [[1, 2, 3], 4]], [[[]], [[1, 4, 2, 4, 3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/6", "original_requirement": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"", "entry_point": "parse_nested_parens", "cluster_list": [{"programs_str": ["from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        cur_depth = 0\n        for ch in group:\n            if ch == '(':\n                cur_depth += 1\n                if cur_depth > max_depth:\n                    max_depth = cur_depth\n            elif ch == ')':\n                cur_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"], "outputs": "[[[2, 3, 1, 3]], [[1]], [[]], [[2, 3, 4]], [[3, 2, 2]], [[10]], [[1, 1, 1, 1, 1]], [[4, 1, 3]], [[2, 2, 3, 4]], [[1, 2, 3, 0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['(()()) ((())) () ((())()())'], ['()'], [''], ['(()) ((())()) (((()())))'], ['((())(())) (()) (())'], ['(((((((((())))))))))'], ['() () () () ()'], ['((())(()(())())) () ((())(()))'], ['(()) (()) ((())) (((())))'], ['() (()) ((( )))']]", "input_output_examples": "[[['(()()) ((())) () ((())()())']], [[[2, 3, 1, 3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/7", "original_requirement": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"", "entry_point": "filter_by_substring", "cluster_list": [{"programs_str": ["from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"], "outputs": "[[['hello', 'help']], [['apple', 'apricot']], [['test', 'best', 'rest', 'nest']], [[]], [[]], [['a', 'b', 'c']], [[]], [['Abc']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['hello', 'world', 'help', 'hold'], 'hel'], [['apple', 'banana', 'apricot', 'cherry'], 'ap'], [['test', 'best', 'rest', 'nest'], 'est'], [['same', 'none', 'some', 'done'], 'z'], [[], 'any'], [['a', 'b', 'c'], ''], [['abcd', 'efgh', 'ijkl'], 'mnop'], [['abc', 'Abc', 'aBC', 'ABC'], 'Ab']]", "input_output_examples": "[[[[], 'a'], [['abc', 'bacd', 'cde', 'array'], 'a']], [[[]], [['abc', 'bacd', 'array']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/8", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"", "entry_point": "sum_product", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n    return (s, p)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)"], "outputs": "[[(0, 1)], [(10, 24)], [(0, 0)], [(-6, -6)], [(5, 5)], [(4, 0)], [(0, 0)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[]], [[1, 2, 3, 4]], [[0]], [[-1, -2, -3]], [[5]], [[1, 0, 3]], [[-1, 0, 1]]]", "input_output_examples": "[[[[]], [[1, 2, 3, 4]]], [[(0, 1)], [(10, 24)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/9", "original_requirement": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"", "entry_point": "rolling_max", "cluster_list": [{"programs_str": ["from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        max_list.append(current_max)\n    return max_list", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        rolling_max_list.append(current_max)\n    return rolling_max_list", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        rolling_max_list.append(current_max)\n    return rolling_max_list", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    rolling_max_list = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        rolling_max_list.append(current_max)\n    return rolling_max_list", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result"], "outputs": "[[[1, 2, 3, 3, 3, 4, 4]], [[5, 5, 5, 5]], [[-1, -1, -1, -1]], [[]], [[10]], [[3, 3, 4, 4, 5, 9, 9, 9, 9, 9, 9]], [[7, 7, 8, 8, 8, 8, 9]], [[100, 100, 100, 120, 120, 120]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 2, 3, 4, 2]], [[5, 5, 5, 5]], [[-1, -2, -3, -4]], [[]], [[10]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]], [[7, 7, 8, 8, 7, 6, 9]], [[100, 90, 80, 120, 110, 115]]]", "input_output_examples": "[[[[1, 2, 3, 2, 3, 4, 2]]], [[[1, 2, 3, 3, 3, 4, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/10", "original_requirement": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "repaired_requirement": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Given a string, return the shortest palindrome string that starts with the given string as its prefix.\n    \n    The palindrome is constructed by:\n    - Finding the longest palindromic suffix of the input string.\n    - Appending to the end of the input string the reverse of the prefix that precedes this palindromic suffix.\n    \n    This ensures the resulting string begins exactly with the original string and is a palindrome.\n    \n    Examples:\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "original_clusters": {"requirement": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "entry_point": "make_palindrome", "cluster_list": [{"programs_str": ["from typing import Optional\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string[::-1] + string", "from typing import Optional\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "from typing import Optional\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "from typing import Optional\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "from typing import Optional\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return ''", "def make_palindrome(string: str) -> str:\n    if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return ''", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "from typing import Optional\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "from typing import Optional\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "from typing import Optional\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]"], "outputs": "[[''], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError']]", "probability": 0.95, "is_align_req": 0, "test_consistency": 0.33333333333333337, "failed_input_output_examples": "[[['cat'], ['NameError'], ['catac']], [['cata'], ['NameError'], ['catac']]]"}, {"programs_str": ["from typing import Optional\n\ndef is_palindrome(string: str) -> bool:\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            prefix = string[:i]\n            return string + prefix[::-1]"], "outputs": "[[''], ['catac'], ['catac'], ['a'], ['aa'], ['aaa'], ['racecar'], ['racecar'], ['level'], ['noon'], ['palindromemordnilap'], ['abba'], ['abcba'], ['abcba']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[''], ['cat'], ['cata'], ['a'], ['aa'], ['aaa'], ['race'], ['racecar'], ['level'], ['noon'], ['palindrome'], ['abba'], ['abcba'], ['abc']]", "input_output_examples": "[[[''], ['cat'], ['cata']], [[''], ['catac'], ['catac']]]", "weighted_test_consistency": 0.3666666666666667, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Given a string, return the shortest palindrome string that starts with the given string as its prefix.\n    \n    The palindrome is constructed by:\n    - Finding the longest palindromic suffix of the input string.\n    - Appending to the end of the input string the reverse of the prefix that precedes this palindromic suffix.\n    \n    This ensures the resulting string begins exactly with the original string and is a palindrome.\n    \n    Examples:\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "entry_point": "make_palindrome", "cluster_list": [{"programs_str": ["def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return ''", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix_to_add = string[:i][::-1]\n            return string + prefix_to_add\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    def is_palindrome(s):\n        return s == s[::-1]\n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string[::-1] + string", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string[::-1] + string", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string[::-1] + string", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix_to_add = string[:i][::-1]\n            return string + prefix_to_add\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix_to_add = string[:i][::-1]\n            return string + prefix_to_add\n    return string[::-1] + string", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return ''", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return ''", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return ''", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix_to_add = string[:i][::-1]\n            return string + prefix_to_add\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    n = len(string)\n    if n == 0:\n        return string\n\n    def is_palindrome(s):\n        return s == s[::-1]\n    for i in range(n):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            prefix_to_add = string[:i][::-1]\n            return string + prefix_to_add\n    return string[::-1] + string", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix_to_add = string[:i][::-1]\n            return string + prefix_to_add\n    return string + string[:-1][::-1]"], "outputs": "[[''], ['catac'], ['catac'], ['a'], ['aa'], ['aaa'], ['racecar'], ['racecar'], ['level'], ['noon'], ['palindromemordnilap'], ['abba'], ['abcba'], ['abcba']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['cat'], ['cata'], ['a'], ['aa'], ['aaa'], ['race'], ['racecar'], ['level'], ['noon'], ['palindrome'], ['abba'], ['abcba'], ['abc']]", "input_output_examples": "[[[''], ['cat'], ['cata']], [[''], ['catac'], ['catac']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.002547770700636942, "original_nzpassk": false, "original_majority_passk": false, "original_entropy": 0.2863969571159562, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/11", "original_requirement": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"", "entry_point": "string_xor", "cluster_list": [{"programs_str": ["def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "from typing import Literal\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "from typing import List\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "from typing import *\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "from typing import Optional\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "from typing import Optional\n\ndef string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))"], "outputs": "[['100'], ['1111'], ['0000'], ['1111111'], ['1'], ['0'], ['00000000'], ['11111111'], ['0000'], ['']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['010', '110'], ['1111', '0000'], ['0000', '0000'], ['1010101', '0101010'], ['1', '0'], ['0', '0'], ['11111111', '11111111'], ['00000000', '11111111'], ['1010', '1010'], ['', '']]", "input_output_examples": "[[['010', '110']], [['100']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/12", "original_requirement": "from typing import List\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"", "entry_point": "longest", "cluster_list": [{"programs_str": ["from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = len(strings[0])\n    longest_str = strings[0]\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    result = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            result = s\n    return result", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_length:\n            longest_str = s\n            max_length = len(s)\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str"], "outputs": "[[None], ['a'], ['a'], ['ccc'], ['abc'], ['bb'], ['ab'], ['longest']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[]], [['a']], [['a', 'b', 'c']], [['a', 'bb', 'ccc']], [['abc', 'def', 'ghi']], [['a', 'bb', 'cc']], [['', 'a', 'ab']], [['longest', 'longest', 'short']]]", "input_output_examples": "[[[[]], [['a', 'b', 'c']], [['a', 'bb', 'ccc']]], [[None], ['a'], ['ccc']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/13", "original_requirement": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"", "entry_point": "greatest_common_divisor", "cluster_list": [{"programs_str": ["def greatest_common_divisor(a: int, b: int) -> int:\n    while b != 0:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)"], "outputs": "[[1], [5], [5], [5], [0], [1], [3], [3], [2], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 5], [25, 15], [0, 5], [5, 0], [0, 0], [1, 1], [-3, 9], [9, -3], [-4, -6], [17, 13]]", "input_output_examples": "[[[3, 5], [25, 15]], [[1], [5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/14", "original_requirement": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"", "entry_point": "all_prefixes", "cluster_list": [{"programs_str": ["from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"], "outputs": "[[['a', 'ab', 'abc']], [[]], [['a']], [['a', 'ab']], [['a', 'ab', 'abc', 'abcd']], [['1', '12', '123', '1234', '12345']], [['!', '!@', '!@#']], [['h', 'he', 'hel', 'hell', 'hello', 'hello ', 'hello w', 'hello wo', 'hello wor', 'hello worl', 'hello world']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abc'], [''], ['a'], ['ab'], ['abcd'], ['12345'], ['!@#'], ['hello world']]", "input_output_examples": "[[['abc']], [[['a', 'ab', 'abc']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/15", "original_requirement": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"", "entry_point": "string_sequence", "cluster_list": [{"programs_str": ["def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))"], "outputs": "[['0'], ['0 1'], ['0 1 2 3 4 5'], ['0 1 2 3 4 5 6 7 8 9 10'], ['0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [5], [10], [100]]", "input_output_examples": "[[[0], [5]], [['0'], ['0 1 2 3 4 5']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/16", "original_requirement": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"", "entry_point": "count_distinct_characters", "cluster_list": [{"programs_str": ["def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"], "outputs": "[[3], [10], [3], [0], [1], [10], [27], [15], [1], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcABC'], ['Hello, World!'], ['123123'], [''], ['aAaAaA'], ['!@#$%^&*()'], ['The quick brown fox jumps over the lazy dog'], ['MixedCASEinput123'], ['     '], ['😊😊😎😎😇']]", "input_output_examples": "[[['xyzXYZ'], ['Jerry']], [[3], [4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/17", "original_requirement": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"", "entry_point": "parse_music", "cluster_list": [{"programs_str": ["from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_values = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_values[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    tokens = music_string.split()\n    beat_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [beat_map[token] for token in tokens]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_values = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_values[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    mapping = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    return [mapping[token] for token in tokens]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [notes_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    mapping = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split(' ')\n    result = []\n    for token in tokens:\n        if token in mapping:\n            result.append(mapping[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token == 'o':\n            result.append(4)\n        elif token == 'o|':\n            result.append(2)\n        elif token == '.|':\n            result.append(1)\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [beats_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token == 'o':\n            result.append(4)\n        elif token == 'o|':\n            result.append(2)\n        elif token == '.|':\n            result.append(1)\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [beats_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    tokens = music_string.split()\n    mapping = {'o': 4, 'o|': 2, '.|': 1}\n    return [mapping[token] for token in tokens]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token == 'o':\n            result.append(4)\n        elif token == 'o|':\n            result.append(2)\n        elif token == '.|':\n            result.append(1)\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = [note_map[token] for token in tokens]\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token == 'o':\n            result.append(4)\n        elif token == 'o|':\n            result.append(2)\n        elif token == '.|':\n            result.append(1)\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats = []\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n    return beats"], "outputs": "[[[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]], [[]], [[4]], [[2]], [[1]], [[4, 4, 4, 4]], [[1, 1, 1, 1]], [[2, 2, 2]], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 2, 1]], [[4, 2, 1]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['o o| .| o| o| .| .| .| .| o o'], [''], ['o'], ['o|'], ['.|'], ['o o o o'], ['.| .| .| .|'], ['o| o| o|'], ['o o| .| o| o| .| .| .| .| o o o| .|'], ['   o     o|      .|']]", "input_output_examples": "[[['o o| .| o| o| .| .| .| .| o o']], [[[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/18", "original_requirement": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"", "entry_point": "how_many_times", "cluster_list": [{"programs_str": ["def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    sub_len = len(substring)\n    for i in range(len(string) - sub_len + 1):\n        if string[i:i + sub_len] == substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        pos = string.find(substring, start)\n        if pos == -1:\n            break\n        count += 1\n        start = pos + 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1"], "outputs": "[[0], [3], [3], [3], [4], [0], [3], [1], [4], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['', 'a'], ['aaa', 'a'], ['aaaa', 'aa'], ['abcabcabc', 'abc'], ['ababababa', 'aba'], ['abcdef', 'gh'], ['aaaaa', 'aaa'], ['', ''], ['abc', ''], ['a', 'aa']]", "input_output_examples": "[[['', 'a'], ['aaa', 'a'], ['aaaa', 'aa']], [[0], [3], [3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/19", "original_requirement": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"", "entry_point": "sort_numbers", "cluster_list": [{"programs_str": ["def sort_numbers(numbers: str) -> str:\n    word_to_digit = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    digit_to_word = {v: k for k, v in word_to_digit.items()}\n    number_list = numbers.split()\n    sorted_digits = sorted((word_to_digit[n] for n in number_list))\n    sorted_words = [digit_to_word[d] for d in sorted_digits]\n    return ' '.join(sorted_words)", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    words_list: List[str] = numbers.split()\n    nums = [word_to_num[word] for word in words_list]\n    nums.sort()\n    sorted_words = [num_to_word[num] for num in nums]\n    return ' '.join(sorted_words)", "def sort_numbers(numbers: str) -> str:\n    order = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    nums_list = numbers.split()\n    nums_list.sort(key=lambda x: order.index(x))\n    return ' '.join(nums_list)", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    words = numbers.split()\n    sorted_nums = sorted((word_to_num[word] for word in words))\n    return ' '.join((num_to_word[num] for num in sorted_nums))", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    words.sort(key=lambda x: num_map[x])\n    return ' '.join(words)", "def sort_numbers(numbers: str) -> str:\n    word_to_digit = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    digit_to_word = {v: k for k, v in word_to_digit.items()}\n    nums = numbers.split()\n    sorted_nums = sorted(nums, key=lambda x: word_to_digit[x])\n    return ' '.join(sorted_nums)", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: words.index(x))\n    return ' '.join(num_list)", "def sort_numbers(numbers: str) -> str:\n    numeral_to_digit = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    digit_to_numeral = {v: k for k, v in numeral_to_digit.items()}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: numeral_to_digit[x])\n    return ' '.join(num_list)", "def sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    inv_map = {v: k for k, v in num_map.items()}\n    num_list = numbers.split()\n    sorted_nums = sorted(num_list, key=lambda x: num_map[x])\n    return ' '.join(sorted_nums)", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    nums = numbers.split()\n    nums_sorted = sorted(nums, key=lambda x: word_to_num[x])\n    return ' '.join(nums_sorted)", "def sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    sorted_nums = sorted(numbers.split(), key=lambda x: word_to_num[x])\n    return ' '.join(sorted_nums)", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    word_to_digit = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    digit_to_word = {v: k for k, v in word_to_digit.items()}\n    nums = numbers.split()\n    nums.sort(key=lambda x: word_to_digit[x])\n    return ' '.join(nums)", "def sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    nums = numbers.split()\n    nums_sorted = sorted(nums, key=lambda x: word_to_num[x])\n    return ' '.join(nums_sorted)", "def sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    nums = [word_to_num[word] for word in numbers.split()]\n    nums.sort()\n    return ' '.join((num_to_word[num] for num in nums))", "def sort_numbers(numbers: str) -> str:\n    word_to_digit = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    digit_to_word = {v: k for k, v in word_to_digit.items()}\n    words = numbers.split()\n    digits = [word_to_digit[word] for word in words]\n    digits.sort()\n    sorted_words = [digit_to_word[d] for d in digits]\n    return ' '.join(sorted_words)", "def sort_numbers(numbers: str) -> str:\n    digit_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    reverse_map = {v: k for k, v in digit_map.items()}\n    words = numbers.split()\n    nums = [digit_map[word] for word in words]\n    nums.sort()\n    sorted_words = [reverse_map[num] for num in nums]\n    return ' '.join(sorted_words)", "def sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    nums = numbers.split()\n    nums.sort(key=lambda x: words.index(x))\n    return ' '.join(nums)", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    nums = numbers.split()\n    nums.sort(key=words.index)\n    return ' '.join(nums)", "def sort_numbers(numbers: str) -> str:\n    order = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    nums = numbers.split()\n    nums.sort(key=lambda x: order.index(x))\n    return ' '.join(nums)", "def sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    tokens = numbers.split()\n    tokens.sort(key=lambda x: num_map[x])\n    return ' '.join(tokens)"], "outputs": "[['one three five'], ['zero one two three four five six seven eight nine'], ['zero'], ['five five five five'], ['zero one two three four five six seven eight nine'], [''], ['seven seven seven seven seven seven seven'], ['zero one two four seven nine']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['three one five'], ['nine eight seven six five four three two one zero'], ['zero'], ['five five five five'], ['one two three four five six seven eight nine zero'], [''], ['seven seven seven seven seven seven seven'], ['four two nine zero seven one']]", "input_output_examples": "[[['three one five']], [['one three five']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/20", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"", "entry_point": "find_closest_elements", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_nums = sorted(numbers)\n    closest_pair = (sorted_nums[0], sorted_nums[1])\n    min_diff = abs(sorted_nums[1] - sorted_nums[0])\n    for i in range(1, len(sorted_nums) - 1):\n        diff = abs(sorted_nums[i + 1] - sorted_nums[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_nums[i], sorted_nums[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_nums = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_nums[0], sorted_nums[1])\n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_nums[i], sorted_nums[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i - 1], sorted_numbers[i])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_nums = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_nums[0], sorted_nums[1])\n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_nums[i], sorted_nums[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    result = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_numbers[i], sorted_numbers[i + 1])\n    return result"], "outputs": "[[(2.0, 2.2)], [(2.0, 2.0)], [(10.5, 10.5)], [(2.2, 5.5)], [(-1.1, -1.0)], [(-10.0, -9.9999)], [(1.0000001, 1.0000002)], [(999999.9, 1000000.0)], [(0, 0)], [(49.999, 50)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]], [[10.5, 10.5, 10.5, 10.5]], [[5.5, 2.2]], [[-1.0, -1.1, 0.0, 1.0]], [[-10.0, -9.9999, 0, 10]], [[1.0000001, 1.0000002, 1.0000003]], [[1000000.0, 999999.9, 1000001.0]], [[0, 0, 0, 0]], [[-100, 50, 49.999, 0, 1]]]", "input_output_examples": "[[[[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]]], [[(2.0, 2.2)], [(2.0, 2.0)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/21", "original_requirement": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"", "entry_point": "rescale_to_unit", "cluster_list": [{"programs_str": ["from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = max_num - min_num\n    return [(num - min_num) / scale for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    minimum = min(numbers)\n    maximum = max(numbers)\n    range_val = maximum - minimum\n    return [(num - minimum) / range_val for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scale = max_num - min_num\n    return [(num - min_num) / scale for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]"], "outputs": "[[[0.0, 0.25, 0.5, 0.75, 1.0]], [[0.0, 0.5, 1.0]], ['ZeroDivisionError'], [[1.0, 0.75, 0.5, 0.25, 0.0]], [[0.0, 1.0]], [[0.0, 1.0]], ['ZeroDivisionError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1.0, 2.0, 3.0, 4.0, 5.0]], [[-10.0, 0.0, 10.0]], [[5.0, 5.0, 5.0, 5.0]], [[100.0, 50.0, 0.0, -50.0, -100.0]], [[0.1, 0.2]], [[-1.5, 2.5]], [[1.0, 1.0]]]", "input_output_examples": "[[[[1.0, 2.0, 3.0, 4.0, 5.0]]], [[[0.0, 0.25, 0.5, 0.75, 1.0]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/22", "original_requirement": "from typing import List\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"", "entry_point": "filter_integers", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import Any, List\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]"], "outputs": "[[[5]], [[1, 2, 3]], [[-10, 0, 10]], [[0]], [[]], [[True, False, 1, 0]], [[42]], [[True, False, 123]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['a', 3.14, 5]], [[1, 2, 3, 'abc', {}, []]], [[-10, 0, 10, None, '0']], [['', 0.0, 0, [1, 2], (3, 4)]], [[]], [['string', True, False, 1, 0]], [[3.14159, 2.71828, 42]], [[True, False, None, '123', 123]]]", "input_output_examples": "[[[['a', 3.14, 5]], [[1, 2, 3, 'abc', {}, []]]], [[[5]], [[1, 2, 3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.09999999999999998, "original_avg_pass_rate": 0.843723849372385, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": false, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/23", "original_requirement": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "entry_point": "strlen", "cluster_list": [{"programs_str": ["def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)"], "outputs": "[[0], [3], [1], [1], [47], [10], [1], [1], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['abc'], [' '], ['a'], ['long string with multiple words and symbols #!@'], ['1234567890'], ['\\n'], ['\\t'], ['😊']]", "input_output_examples": "[[[''], ['abc']], [[0], [3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/24", "original_requirement": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"", "repaired_requirement": "def largest_divisor(n: int) -> int | None:\n    \"\"\"\n    For a given integer n greater than 1, return the largest integer divisor of n that is strictly less than n.\n    If n is 1 or less, return None since no such divisor exists.\n\n    The divisor must divide n evenly (i.e., n % divisor == 0).\n\n    Examples:\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(1) is None\n    True\n    \"\"\"", "original_clusters": {"requirement": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"", "entry_point": "largest_divisor", "cluster_list": [{"programs_str": ["def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i"], "outputs": "[[5], [None], [1], [5], [1], [50], [1], [None], [None], [333]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1"], "outputs": "[[5], [1], [1], [5], [1], [50], [1], [1], [1], [333]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[15], [1], [2], [10], [17], [100], [37], [0], [-10], [999]]", "input_output_examples": "[[[15]], [[5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def largest_divisor(n: int) -> int | None:\n    \"\"\"\n    For a given integer n greater than 1, return the largest integer divisor of n that is strictly less than n.\n    If n is 1 or less, return None since no such divisor exists.\n\n    The divisor must divide n evenly (i.e., n % divisor == 0).\n\n    Examples:\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(1) is None\n    True\n    \"\"\"", "entry_point": "largest_divisor", "cluster_list": [{"programs_str": ["def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None"], "outputs": "[[5], [None], [1], [5], [1], [50], [1], [None], [None], [333]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[15], [1], [2], [10], [17], [100], [37], [0], [-10], [999]]", "input_output_examples": "[[[15]], [[5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.46899559358928117, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/25", "original_requirement": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"", "entry_point": "factorize", "cluster_list": [{"programs_str": ["from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n                break\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1 if divisor == 2 else 2\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1 if divisor == 2 else 2\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1 if divisor == 2 else 2\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1 if divisor == 2 else 2\n    if n > 1:\n        factors.append(n)\n    return factors"], "outputs": "[[[2, 2, 2]], [[5, 5]], [[2, 5, 7]], [[]], [[2]], [[13]], [[2, 2, 5, 5]], [[101]], [[]], [[3, 3, 3, 37]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[8], [25], [70], [1], [2], [13], [100], [101], [0], [999]]", "input_output_examples": "[[[8], [25], [70]], [[[2, 2, 2]], [[5, 5]], [[2, 5, 7]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/26", "original_requirement": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"", "entry_point": "remove_duplicates", "cluster_list": [{"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = Counter(numbers)\n    return [num for num in numbers if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = Counter(numbers)\n    return [num for num in numbers if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]"], "outputs": "[[[1, 3, 4]], [[]], [[]], [[1, 2, 3, 4, 5]], [[5, 4, 1]], [[10]], [[-3]], [[1, 2, 4]], [[200, 300, 400, 500]], [[9, 10]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 2, 4]], [[]], [[1, 1, 1, 1]], [[1, 2, 3, 4, 5]], [[5, 4, 3, 2, 1, 2, 3]], [[10]], [[-1, -2, -2, -3, -1]], [[0, 0, 0, 1, 2, 3, 3, 4]], [[100, 200, 300, 100, 400, 500]], [[7, 7, 8, 9, 10, 8]]]", "input_output_examples": "[[[[1, 2, 3, 2, 4]]], [[[1, 3, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/27", "original_requirement": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"", "entry_point": "flip_case", "cluster_list": [{"programs_str": ["def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "from typing import *\n\ndef flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return string.swapcase()", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))"], "outputs": "[['hELLO'], ['world'], ['PYTHON'], ['1234'], ['tEST1234cASE'], [''], ['!@#$'], ['Aa'], ['zZzZzZ']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hello'], ['WORLD'], ['python'], ['1234'], ['Test1234Case'], [''], ['!@#$'], ['aA'], ['ZzZzZz']]", "input_output_examples": "[[['Hello']], [['hELLO']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/28", "original_requirement": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"", "entry_point": "concatenate", "cluster_list": [{"programs_str": ["from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"], "outputs": "[[''], ['abc'], ['hello world'], [''], [''], ['single'], ['ac'], ['1234567890'], ['!@#$%^&*()'], ['   ']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[]], [['a', 'b', 'c']], [['hello', ' ', 'world']], [['']], [['', '']], [['single']], [['a', '', 'c']], [['123', '456', '7890']], [['!@#', '$%^', '&*()']], [[' ', ' ', ' ']]]", "input_output_examples": "[[[[]], [['a', 'b', 'c']]], [[''], ['abc']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/29", "original_requirement": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"", "entry_point": "filter_by_prefix", "cluster_list": [{"programs_str": ["from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"], "outputs": "[[['apple', 'application']], [['deer', 'deal']], [['hello', 'helium', 'hero', 'help', 'heat']], [['123', '124', '125', '126', '127']], [['Test']], [[]], [['abc', 'bcd', 'cde', 'array']], [[]], [['x']], [['prefix', 'prefixed', 'prelude', 'presentation']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['apple', 'application', 'banana', 'apex', 'berry'], 'app'], [['dog', 'deer', 'deal', 'cat', 'caterpillar'], 'de'], [['hello', 'helium', 'hero', 'help', 'heat'], 'he'], [['123', '124', '125', '126', '127'], '12'], [['test', 'Test', 'testing', 'tester', 'TEST'], 'Test'], [[], 'any'], [['abc', 'bcd', 'cde', 'array'], ''], [['abc', 'bcd', 'cde', 'array'], 'z'], [['x', 'y', 'z'], 'x'], [['prefix', 'prefixed', 'prelude', 'presentation'], 'pre']]", "input_output_examples": "[[[[], 'a'], [['abc', 'bcd', 'cde', 'array'], 'a']], [[[]], [['abc', 'array']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/30", "original_requirement": "from typing import List\n\n\ndef get_positive(l: List[int]) -> List[int]:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef get_positive(l: List[int]) -> List[int]:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"", "entry_point": "get_positive", "cluster_list": [{"programs_str": ["from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]"], "outputs": "[[[2, 5, 6]], [[5, 3, 2, 3, 9, 123, 1]], [[]], [[]], [[]], [[1, 2, 3, 4, 5]], [[3, 5]], [[2147483647]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[-1, 2, -4, 5, 6]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[]], [[-5, -1, -10, -100]], [[0, 0, 0]], [[1, 2, 3, 4, 5]], [[-2, 0, 3, -1, 5]], [[2147483647, -2147483648]]]", "input_output_examples": "[[[[-1, 2, -4, 5, 6]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], [[[2, 5, 6]], [[5, 3, 2, 3, 9, 123, 1]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/31", "original_requirement": "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "entry_point": "is_prime", "cluster_list": [{"programs_str": ["def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i <= isqrt(n):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"], "outputs": "[[False], [True], [True], [True], [True], [False], [False], [False], [True], [True], [True], [False], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[6], [101], [11], [13441], [61], [4], [1], [0], [2], [3], [17], [25], [29], [97], [100], [-1]]", "input_output_examples": "[[[6], [101], [11], [13441], [61], [4], [1]], [[False], [True], [True], [True], [True], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/32", "original_requirement": "from typing import List\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: List[float]) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    \"\"\"\n    Given a list of coefficients xs representing a polynomial \n    p(x) = xs[0] + xs[1]*x + xs[2]*x^2 + ... + xs[n]*x^n,\n    where n = len(xs) - 1, find and return a single real root x0 such that p(x0) = 0.\n\n    Requirements and clarifications:\n    - The input list xs will always have an even number of coefficients.\n    - The leading coefficient (xs[-1]) is guaranteed to be non-zero.\n    - The polynomial is guaranteed to have at least one real root.\n    - The function must return exactly one root (any one root if multiple exist).\n    - The root must be found using a robust numerical method that:\n        * Does not rely on derivatives (to avoid issues with zero derivatives).\n        * Uses interval expansion starting from [-1.0, 1.0] to find an interval \n          where the polynomial changes sign.\n        * Applies the bisection method within that interval to approximate the root.\n    - The returned root should be accurate within a tolerance of approximately 1e-14.\n    - If the polynomial evaluates to zero at the interval endpoints during expansion, \n      return that endpoint as the root.\n    - The function should not raise exceptions for valid inputs as described above.\n\n    Examples:\n    >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)  # (x - 1)(x - 2)(x - 3)\n    1.0\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: List[float]) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"", "entry_point": "find_zero", "cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        return sum((i * coeff * x ** (i - 1) for i, coeff in enumerate(xs) if i > 0))\n    x0 = 0.0\n    for _ in range(100):\n        y = f(x0)\n        dy = df(x0)\n        if dy == 0:\n            x0 += 0.001\n            continue\n        x1 = x0 - y / dy\n        if abs(x1 - x0) < 1e-12:\n            return x1\n        x0 = x1\n    return x0"], "outputs": "[[-0.5], [1.0], [0.9999999925494194], [1.0], [9.275972725450102e-13]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def derivative(xs):\n        return [i * xs[i] for i in range(1, len(xs))]\n    d_xs = derivative(xs)\n    x = 0.0\n    for _ in range(1000):\n        fx = poly(xs, x)\n        if abs(fx) < 1e-14:\n            return x\n        fpx = poly(d_xs, x)\n        if fpx == 0:\n            break\n        x = x - fx / fpx\n    a, b = (-1000000.0, 1000000.0)\n    fa, fb = (poly(xs, a), poly(xs, b))\n    if fa == 0:\n        return a\n    if fb == 0:\n        return b\n    if fa * fb > 0:\n        for start in range(-1000, 1000):\n            a, b = (start, start + 1)\n            fa, fb = (poly(xs, a), poly(xs, b))\n            if fa * fb <= 0:\n                break\n        else:\n            return 0.0\n    for _ in range(1000):\n        c = (a + b) / 2\n        fc = poly(xs, c)\n        if abs(fc) < 1e-14:\n            return c\n        if fa * fc < 0:\n            b = c\n            fb = fc\n        else:\n            a = c\n            fa = fc\n    return (a + b) / 2", "from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def f(x):\n        return poly(xs, x)\n    a, b = (-1.0, 1.0)\n    fa, fb = (f(a), f(b))\n    max_iter = 1000\n    i = 0\n    while fa * fb > 0 and i < max_iter:\n        a *= 2\n        b *= 2\n        fa = f(a)\n        fb = f(b)\n        i += 1\n    if fa == 0:\n        return a\n    if fb == 0:\n        return b\n    if fa * fb > 0:\n        return 0.0\n    for _ in range(100):\n        c = (a + b) / 2\n        fc = f(c)\n        if abs(fc) < 1e-12:\n            return c\n        if fa * fc < 0:\n            b = c\n            fb = fc\n        else:\n            a = c\n            fa = fc\n    return (a + b) / 2"], "outputs": "[[-0.5], [1.0000000000000007], [0.9999999403953552], [-1.0000000000000036], [0.0]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def f(x):\n        return poly(xs, x)\n    left, right = (-1.0, 1.0)\n    while f(left) * f(right) > 0:\n        left *= 2\n        right *= 2\n    for _ in range(100):\n        mid = (left + right) / 2\n        val = f(mid)\n        if abs(val) < 1e-14:\n            return mid\n        if f(left) * val < 0:\n            right = mid\n        else:\n            left = mid\n    return (left + right) / 2", "import math\nfrom typing import List\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def deriv(xs: List[float]) -> List[float]:\n        return [i * xs[i] for i in range(1, len(xs))]\n\n    def poly_eval(xs: List[float], x: float) -> float:\n        return sum((coeff * x ** i for i, coeff in enumerate(xs)))\n\n    def poly_deriv_eval(xs: List[float], x: float) -> float:\n        d = deriv(xs)\n        return poly_eval(d, x)\n    x0 = 0.0\n    max_iter = 1000\n    tol = 1e-12\n    for _ in range(max_iter):\n        y = poly_eval(xs, x0)\n        if abs(y) < tol:\n            return x0\n        y_prime = poly_deriv_eval(xs, x0)\n        if y_prime == 0:\n            x0 += 0.1\n            continue\n        x1 = x0 - y / y_prime\n        if abs(x1 - x0) < tol:\n            return x1\n        x0 = x1\n    return x0", "from typing import List\nimport math\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly(xs: list, x: float):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    a, b = (-1.0, 1.0)\n    fa, fb = (poly(xs, a), poly(xs, b))\n    while fa * fb > 0:\n        a *= 2\n        b *= 2\n        fa, fb = (poly(xs, a), poly(xs, b))\n    for _ in range(100):\n        c = (a + b) / 2\n        fc = poly(xs, c)\n        if abs(fc) < 1e-12:\n            return c\n        if fa * fc < 0:\n            b = c\n            fb = fc\n        else:\n            a = c\n            fa = fc\n    return (a + b) / 2", "from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly_val(x):\n        return poly(xs, x)\n    a, b = (-1, 1)\n    fa, fb = (poly_val(a), poly_val(b))\n    while fa * fb > 0:\n        a *= 2\n        b *= 2\n        fa = poly_val(a)\n        fb = poly_val(b)\n    for _ in range(100):\n        c = (a + b) / 2\n        fc = poly_val(c)\n        if abs(fc) < 1e-12:\n            return c\n        if fa * fc < 0:\n            b, fb = (c, fc)\n        else:\n            a, fa = (c, fc)\n    return (a + b) / 2"], "outputs": "[[-0.5], [0.9999999999999964], [0.9999999403953552], [0.9999999999999964], [0.0]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def d_poly(xs: List[float]) -> List[float]:\n        return [i * xs[i] for i in range(1, len(xs))]\n\n    def poly_val(xs: List[float], x: float) -> float:\n        return sum((c * x ** i for i, c in enumerate(xs)))\n    x0 = 0.0\n    eps = 1e-12\n    max_iter = 1000\n    xs_derivative = d_poly(xs)\n    for _ in range(max_iter):\n        y = poly_val(xs, x0)\n        y_prime = poly_val(xs_derivative, x0)\n        if abs(y_prime) < eps:\n            x0 += 1.0\n            continue\n        x1 = x0 - y / y_prime\n        if abs(x1 - x0) < eps:\n            return x1\n        x0 = x1\n    return x0"], "outputs": "[[-0.5], [1.0], [0.9999999925494194], [1.0], [0.3522011287389576]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\nfrom typing import List\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    import numpy as np\n    coeffs = xs[::-1]\n    roots = np.roots(coeffs)\n    real_roots = [r.real for r in roots if abs(r.imag) < 1e-10]\n    if not real_roots:\n        raise ValueError('No real root found')\n    return real_roots[0]", "from typing import List\nimport numpy as np\n\ndef find_zero(xs: List[float]) -> float:\n    roots = np.roots(xs[::-1])\n    real_roots = roots[np.isreal(roots)].real\n    return float(real_roots[0])", "from typing import List\nimport numpy as np\n\ndef find_zero(xs: List[float]) -> float:\n    roots = np.roots(xs[::-1])\n    real_roots = [r.real for r in roots if abs(r.imag) < 1e-10]\n    if not real_roots:\n        raise ValueError('No real roots found')\n    return real_roots[0]", "from typing import List\nimport numpy as np\n\ndef find_zero(xs: List[float]) -> float:\n    roots = np.roots(xs[::-1])\n    for root in roots:\n        if np.isreal(root):\n            return root.real\n    return roots[0].real", "from typing import List\nimport numpy as np\n\ndef find_zero(xs: List[float]) -> float:\n    roots = np.roots(xs[::-1])\n    for root in roots:\n        if np.isclose(root.imag, 0):\n            return root.real\n    return roots[0].real", "from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    import numpy as np\n    roots = np.roots(xs[::-1])\n    real_roots = [r.real for r in roots if abs(r.imag) < 1e-12]\n    if real_roots:\n        return real_roots[0]\n    else:\n        return float('nan')"], "outputs": "[[np.float64(-0.5)], [np.float64(3.0000000000000018)], [np.float64(1.0)], [np.float64(-1.0)], [np.float64(0.3522011287389578)]]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.5, "failed_input_output_examples": "[[[[-6, 11, -6, 1]], [np.float64(3.0000000000000018)], [1.0]]]"}, {"programs_str": ["from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def f(x):\n        return poly(xs, x)\n    low, high = (-1000000.0, 1000000.0)\n    f_low, f_high = (f(low), f(high))\n    if f_low == 0:\n        return low\n    if f_high == 0:\n        return high\n    if f_low * f_high > 0:\n        raise ValueError('No root found in range')\n    for _ in range(1000):\n        mid = (low + high) / 2\n        f_mid = f(mid)\n        if abs(f_mid) < 1e-12:\n            return mid\n        if f_low * f_mid < 0:\n            high = mid\n            f_high = f_mid\n        else:\n            low = mid\n            f_low = f_mid\n    return (low + high) / 2", "from typing import List\nimport math\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly(xs: list, x: float):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    low, high = (-100.0, 100.0)\n    f_low = poly(xs, low)\n    f_high = poly(xs, high)\n    if abs(f_low) < 1e-12:\n        return low\n    if abs(f_high) < 1e-12:\n        return high\n    if f_low * f_high > 0:\n        for factor in [1000, 10000, 100000]:\n            low, high = (-factor, factor)\n            f_low = poly(xs, low)\n            f_high = poly(xs, high)\n            if f_low * f_high <= 0:\n                break\n        else:\n            raise ValueError('No root found in checked range')\n    for _ in range(1000):\n        mid = (low + high) / 2\n        f_mid = poly(xs, mid)\n        if abs(f_mid) < 1e-14:\n            return mid\n        if f_low * f_mid < 0:\n            high = mid\n            f_high = f_mid\n        else:\n            low = mid\n            f_low = f_mid\n    return (low + high) / 2", "from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def f(x):\n        return poly(xs, x)\n    a, b = (-1000000.0, 1000000.0)\n    fa, fb = (f(a), f(b))\n    if fa == 0:\n        return a\n    if fb == 0:\n        return b\n    if fa * fb > 0:\n        raise ValueError('No root found in the initial interval')\n    for _ in range(1000):\n        c = (a + b) / 2\n        fc = f(c)\n        if abs(fc) < 1e-12:\n            return c\n        if fa * fc < 0:\n            b, fb = (c, fc)\n        else:\n            a, fa = (c, fc)\n    return (a + b) / 2"], "outputs": "[[-0.4999999999996327], [1.0000000000001328], ['ValueError'], ['ValueError'], [0.0]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    n = len(xs) - 1\n    if n == 0:\n        return 0.0\n\n    def sign(x):\n        return math.copysign(1, x)\n    a, b = (-1.0, 1.0)\n    while sign(poly(xs, a)) == sign(poly(xs, b)):\n        a *= 2\n        b *= 2\n    fa = poly(xs, a)\n    fb = poly(xs, b)\n    for _ in range(100):\n        c = (a + b) / 2\n        fc = poly(xs, c)\n        if abs(fc) < 1e-14:\n            return c\n        if sign(fc) == sign(fa):\n            a = c\n            fa = fc\n        else:\n            b = c\n            fb = fc\n    return (a + b) / 2"], "outputs": "[[-0.5], [0.9999999999999964], ['OverflowError'], ['OverflowError'], [0.0]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def dpoly(xs: List[float], x: float) -> float:\n        return sum((i * coeff * x ** (i - 1) for i, coeff in enumerate(xs) if i > 0))\n    x = 0.0\n    for _ in range(1000):\n        y = poly(xs, x)\n        if abs(y) < 1e-12:\n            return x\n        dy = dpoly(xs, x)\n        if dy == 0:\n            break\n        x = x - y / dy\n    return x", "import math\nfrom typing import List\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    n = len(xs) - 1\n    if n == 1:\n        return -xs[0] / xs[1]\n\n    def dpoly(xs, x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n    x0 = 0.0\n    for _ in range(1000):\n        y = poly(xs, x0)\n        dy = dpoly(xs, x0)\n        if dy == 0:\n            break\n        x1 = x0 - y / dy\n        if abs(x1 - x0) < 1e-12:\n            return x1\n        x0 = x1\n    return x0"], "outputs": "[[-0.5], [1.0000000000000007], [0.9999995231628418], [0.0], [0.0]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.9028983231876141, "llm_generated_inputs": "[[[1, 2]], [[-6, 11, -6, 1]], [[2, -4, 2, 0]], [[-1, 0, 1, 0]], [[0, 0, 2, -8, 8, -4]]]", "input_output_examples": "[[[[1, 2]], [[-6, 11, -6, 1]]], [[-0.5], [1.0]]]", "weighted_test_consistency": 0.85, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    \"\"\"\n    Given a list of coefficients xs representing a polynomial \n    p(x) = xs[0] + xs[1]*x + xs[2]*x^2 + ... + xs[n]*x^n,\n    where n = len(xs) - 1, find and return a single real root x0 such that p(x0) = 0.\n\n    Requirements and clarifications:\n    - The input list xs will always have an even number of coefficients.\n    - The leading coefficient (xs[-1]) is guaranteed to be non-zero.\n    - The polynomial is guaranteed to have at least one real root.\n    - The function must return exactly one root (any one root if multiple exist).\n    - The root must be found using a robust numerical method that:\n        * Does not rely on derivatives (to avoid issues with zero derivatives).\n        * Uses interval expansion starting from [-1.0, 1.0] to find an interval \n          where the polynomial changes sign.\n        * Applies the bisection method within that interval to approximate the root.\n    - The returned root should be accurate within a tolerance of approximately 1e-14.\n    - If the polynomial evaluates to zero at the interval endpoints during expansion, \n      return that endpoint as the root.\n    - The function should not raise exceptions for valid inputs as described above.\n\n    Examples:\n    >>> round(find_zero([1, 2]), 2)  # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)  # (x - 1)(x - 2)(x - 3)\n    1.0\n    \"\"\"", "entry_point": "find_zero", "cluster_list": [{"programs_str": ["from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        res = 0.0\n        power = 1.0\n        for coef in xs:\n            res += coef * power\n            power *= x\n        return res\n    a, b = (-1.0, 1.0)\n    fa, fb = (p(a), p(b))\n    if abs(fa) < 1e-16:\n        return a\n    if abs(fb) < 1e-16:\n        return b\n    step = 1.0\n    while fa * fb > 0:\n        a -= step\n        b += step\n        fa, fb = (p(a), p(b))\n        if abs(fa) < 1e-16:\n            return a\n        if abs(fb) < 1e-16:\n            return b\n        step *= 2\n    tol = 1e-14\n    while (b - a) / 2 > tol:\n        c = (a + b) / 2\n        fc = p(c)\n        if abs(fc) < tol:\n            return c\n        if fa * fc < 0:\n            b, fb = (c, fc)\n        else:\n            a, fa = (c, fc)\n    return (a + b) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for coeff in xs:\n            result += coeff * power\n            power *= x\n        return result\n    a, b = (-1.0, 1.0)\n    fa, fb = (p(a), p(b))\n    if abs(fa) < 1e-15:\n        return a\n    if abs(fb) < 1e-15:\n        return b\n    while fa * fb > 0:\n        if abs(fa) < abs(fb):\n            a *= 2\n            fa = p(a)\n            if abs(fa) < 1e-15:\n                return a\n        else:\n            b *= 2\n            fb = p(b)\n            if abs(fb) < 1e-15:\n                return b\n    tol = 1e-14\n    while (b - a) / 2 > tol:\n        c = (a + b) / 2\n        fc = p(c)\n        if abs(fc) < tol:\n            return c\n        if fa * fc < 0:\n            b, fb = (c, fc)\n        else:\n            a, fa = (c, fc)\n    return (a + b) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for coeff in xs:\n            result += coeff * power\n            power *= x\n        return result\n    low, high = (-1.0, 1.0)\n    f_low = p(low)\n    if abs(f_low) < 1e-15:\n        return low\n    f_high = p(high)\n    if abs(f_high) < 1e-15:\n        return high\n    while f_low * f_high > 0:\n        old_low, old_high = (low, high)\n        low *= 2.0\n        high *= 2.0\n        f_low = p(low)\n        if abs(f_low) < 1e-15:\n            return low\n        f_high = p(high)\n        if abs(f_high) < 1e-15:\n            return high\n        if abs(low) > 10000000000.0 and abs(high) > 10000000000.0:\n            break\n    for _ in range(500):\n        mid = (low + high) / 2\n        f_mid = p(mid)\n        if abs(f_mid) < 1e-15 or (high - low) / 2 < 1e-14:\n            return mid\n        if f_low * f_mid < 0:\n            high = mid\n            f_high = f_mid\n        else:\n            low = mid\n            f_low = f_mid\n    return (low + high) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for coeff in xs:\n            result += coeff * power\n            power *= x\n        return result\n    left, right = (-1.0, 1.0)\n    p_left = p(left)\n    if abs(p_left) < 1e-15:\n        return left\n    p_right = p(right)\n    if abs(p_right) < 1e-15:\n        return right\n    while p_left * p_right > 0:\n        left *= 2.0\n        right *= 2.0\n        p_left = p(left)\n        if abs(p_left) < 1e-15:\n            return left\n        p_right = p(right)\n        if abs(p_right) < 1e-15:\n            return right\n    tol = 1e-14\n    while right - left > tol:\n        mid = (left + right) / 2.0\n        p_mid = p(mid)\n        if abs(p_mid) < tol:\n            return mid\n        if p_left * p_mid < 0:\n            right = mid\n            p_right = p_mid\n        else:\n            left = mid\n            p_left = p_mid\n    return (left + right) / 2.0", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        res = 0.0\n        power = 1.0\n        for coeff in xs:\n            res += coeff * power\n            power *= x\n        return res\n    left, right = (-1.0, 1.0)\n    f_left, f_right = (p(left), p(right))\n    if abs(f_left) < 1e-16:\n        return left\n    if abs(f_right) < 1e-16:\n        return right\n    while f_left * f_right > 0:\n        interval = right - left\n        left -= interval\n        right += interval\n        f_left, f_right = (p(left), p(right))\n        if abs(f_left) < 1e-16:\n            return left\n        if abs(f_right) < 1e-16:\n            return right\n    for _ in range(1000):\n        mid = 0.5 * (left + right)\n        f_mid = p(mid)\n        if abs(f_mid) < 1e-14 or (right - left) / 2 < 1e-14:\n            return mid\n        if f_left * f_mid < 0:\n            right = mid\n            f_right = f_mid\n        else:\n            left = mid\n            f_left = f_mid\n    return 0.5 * (left + right)", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        val = 0.0\n        power = 1.0\n        for coeff in xs:\n            val += coeff * power\n            power *= x\n        return val\n    left, right = (-1.0, 1.0)\n    f_left, f_right = (p(left), p(right))\n    if abs(f_left) < 1e-14:\n        return left\n    if abs(f_right) < 1e-14:\n        return right\n    while f_left * f_right > 0:\n        left *= 2\n        right *= 2\n        f_left, f_right = (p(left), p(right))\n        if abs(f_left) < 1e-14:\n            return left\n        if abs(f_right) < 1e-14:\n            return right\n    tol = 1e-14\n    while right - left > tol:\n        mid = (left + right) / 2\n        f_mid = p(mid)\n        if abs(f_mid) < tol:\n            return mid\n        if f_left * f_mid < 0:\n            right = mid\n            f_right = f_mid\n        else:\n            left = mid\n            f_left = f_mid\n    return (left + right) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for c in xs:\n            result += c * power\n            power *= x\n        return result\n    a, b = (-1.0, 1.0)\n    fa, fb = (poly(a), poly(b))\n    if abs(fa) < 1e-14:\n        return a\n    if abs(fb) < 1e-14:\n        return b\n    step = 1.0\n    max_steps = 1000\n    for _ in range(max_steps):\n        if fa * fb < 0:\n            break\n        if abs(fa) < 1e-14:\n            return a\n        if abs(fb) < 1e-14:\n            return b\n        step *= 2\n        a, b = (-step, step)\n        fa, fb = (poly(a), poly(b))\n    else:\n        return a\n    for _ in range(1000):\n        c = (a + b) / 2\n        fc = poly(c)\n        if abs(fc) < 1e-14 or (b - a) / 2 < 1e-14:\n            return c\n        if fa * fc < 0:\n            b, fb = (c, fc)\n        else:\n            a, fa = (c, fc)\n    return (a + b) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        result = 0.0\n        xn = 1.0\n        for coef in xs:\n            result += coef * xn\n            xn *= x\n        return result\n    left, right = (-1.0, 1.0)\n    f_left, f_right = (p(left), p(right))\n    if abs(f_left) < 1e-15:\n        return left\n    if abs(f_right) < 1e-15:\n        return right\n    expansion_factor = 2.0\n    max_expansions = 1000\n    expansions = 0\n    while f_left * f_right > 0 and expansions < max_expansions:\n        left *= expansion_factor\n        right *= expansion_factor\n        f_left = p(left)\n        f_right = p(right)\n        if abs(f_left) < 1e-15:\n            return left\n        if abs(f_right) < 1e-15:\n            return right\n        expansions += 1\n    tol = 1e-15\n    while (right - left) / 2 > tol:\n        mid = (left + right) / 2\n        f_mid = p(mid)\n        if abs(f_mid) < tol:\n            return mid\n        if f_left * f_mid < 0:\n            right = mid\n            f_right = f_mid\n        else:\n            left = mid\n            f_left = f_mid\n    return (left + right) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        res = 0.0\n        power = 1.0\n        for c in xs:\n            res += c * power\n            power *= x\n        return res\n    tol = 1e-14\n    a, b = (-1.0, 1.0)\n    fa, fb = (p(a), p(b))\n    if abs(fa) < tol:\n        return a\n    if abs(fb) < tol:\n        return b\n    while fa * fb > 0:\n        a_new = a * 2\n        b_new = b * 2\n        fa_new, fb_new = (p(a_new), p(b_new))\n        if abs(fa_new) < tol:\n            return a_new\n        if abs(fb_new) < tol:\n            return b_new\n        a, b = (a_new, b_new)\n        fa, fb = (fa_new, fb_new)\n    while b - a > tol:\n        m = (a + b) / 2\n        fm = p(m)\n        if abs(fm) < tol:\n            return m\n        if fa * fm < 0:\n            b = m\n            fb = fm\n        else:\n            a = m\n            fa = fm\n    return (a + b) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        val = 0.0\n        power = 1.0\n        for c in xs:\n            val += c * power\n            power *= x\n        return val\n    left, right = (-1.0, 1.0)\n    f_left, f_right = (p(left), p(right))\n    if abs(f_left) < 1e-16:\n        return left\n    if abs(f_right) < 1e-16:\n        return right\n    expansion_factor = 2.0\n    max_expansions = 1000\n    expansions = 0\n    while f_left * f_right > 0 and expansions < max_expansions:\n        if abs(f_left) < abs(f_right):\n            left *= expansion_factor\n            f_left = p(left)\n            if abs(f_left) < 1e-16:\n                return left\n        else:\n            right *= expansion_factor\n            f_right = p(right)\n            if abs(f_right) < 1e-16:\n                return right\n        expansions += 1\n    tol = 1e-15\n    while right - left > tol:\n        mid = (left + right) / 2\n        f_mid = p(mid)\n        if abs(f_mid) < tol:\n            return mid\n        if f_left * f_mid < 0:\n            right = mid\n            f_right = f_mid\n        else:\n            left = mid\n            f_left = f_mid\n    return (left + right) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for coeff in xs:\n            result += coeff * power\n            power *= x\n        return result\n    left, right = (-1.0, 1.0)\n    pl, pr = (p(left), p(right))\n    if abs(pl) < 1e-15:\n        return left\n    if abs(pr) < 1e-15:\n        return right\n    step = 1.0\n    while pl * pr > 0:\n        step *= 2\n        left, right = (-step, step)\n        pl, pr = (p(left), p(right))\n        if abs(pl) < 1e-15:\n            return left\n        if abs(pr) < 1e-15:\n            return right\n    tol = 1e-15\n    while right - left > tol:\n        mid = (left + right) / 2\n        pm = p(mid)\n        if abs(pm) < tol:\n            return mid\n        if pl * pm < 0:\n            right, pr = (mid, pm)\n        else:\n            left, pl = (mid, pm)\n    return (left + right) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        val = 0.0\n        power = 1.0\n        for coef in xs:\n            val += coef * power\n            power *= x\n        return val\n    left, right = (-1.0, 1.0)\n    f_left, f_right = (p(left), p(right))\n    if f_left == 0.0:\n        return left\n    if f_right == 0.0:\n        return right\n    step = 1.0\n    while f_left * f_right > 0.0:\n        left -= step\n        right += step\n        f_left = p(left)\n        f_right = p(right)\n        if f_left == 0.0:\n            return left\n        if f_right == 0.0:\n            return right\n        step *= 2\n    tol = 1e-15\n    while right - left > tol:\n        mid = (left + right) / 2.0\n        f_mid = p(mid)\n        if f_mid == 0.0:\n            return mid\n        if f_left * f_mid < 0.0:\n            right = mid\n            f_right = f_mid\n        else:\n            left = mid\n            f_left = f_mid\n    return (left + right) / 2.0", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for c in xs:\n            result += c * power\n            power *= x\n        return result\n    left, right = (-1.0, 1.0)\n    p_left = p(left)\n    if abs(p_left) < 1e-14:\n        return left\n    p_right = p(right)\n    if abs(p_right) < 1e-14:\n        return right\n    step = 2.0\n    max_iter = 1000\n    for _ in range(max_iter):\n        if p_left * p_right < 0:\n            break\n        if abs(p_left) < 1e-14:\n            return left\n        if abs(p_right) < 1e-14:\n            return right\n        left *= step\n        right *= step\n        p_left = p(left)\n        p_right = p(right)\n    else:\n        left, right = (-1.0, 1.0)\n        p_left = p(left)\n        p_right = p(right)\n    for _ in range(1000):\n        mid = (left + right) / 2\n        p_mid = p(mid)\n        if abs(p_mid) < 1e-14 or (right - left) / 2 < 1e-14:\n            return mid\n        if p_left * p_mid < 0:\n            right, p_right = (mid, p_mid)\n        else:\n            left, p_left = (mid, p_mid)\n    return (left + right) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        res = 0.0\n        power = 1.0\n        for c in xs:\n            res += c * power\n            power *= x\n        return res\n    left, right = (-1.0, 1.0)\n    pl, pr = (p(left), p(right))\n    if pl == 0.0:\n        return left\n    if pr == 0.0:\n        return right\n    step = 1.0\n    while pl * pr > 0:\n        step *= 2.0\n        if abs(pl) < abs(pr):\n            left_new = left - step\n            pl_new = p(left_new)\n            if pl_new == 0.0:\n                return left_new\n            if pl_new * pr < 0:\n                left = left_new\n                pl = pl_new\n                break\n            left = left_new\n            pl = pl_new\n        else:\n            right_new = right + step\n            pr_new = p(right_new)\n            if pr_new == 0.0:\n                return right_new\n            if pl * pr_new < 0:\n                right = right_new\n                pr = pr_new\n                break\n            right = right_new\n            pr = pr_new\n    tol = 1e-15\n    for _ in range(1000):\n        mid = 0.5 * (left + right)\n        pm = p(mid)\n        if abs(pm) < tol:\n            return mid\n        if pl * pm < 0:\n            right = mid\n            pr = pm\n        else:\n            left = mid\n            pl = pm\n        if right - left < tol:\n            return 0.5 * (left + right)\n    return 0.5 * (left + right)", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for coef in xs:\n            result += coef * power\n            power *= x\n        return result\n    left, right = (-1.0, 1.0)\n    f_left = p(left)\n    if f_left == 0.0:\n        return left\n    f_right = p(right)\n    if f_right == 0.0:\n        return right\n    while f_left * f_right > 0:\n        length = right - left\n        left -= length\n        right += length\n        f_left = p(left)\n        if f_left == 0.0:\n            return left\n        f_right = p(right)\n        if f_right == 0.0:\n            return right\n    tol = 1e-14\n    while right - left > tol:\n        mid = (left + right) / 2\n        f_mid = p(mid)\n        if f_mid == 0.0:\n            return mid\n        if f_left * f_mid < 0:\n            right = mid\n            f_right = f_mid\n        else:\n            left = mid\n            f_left = f_mid\n    return (left + right) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        res = 0.0\n        power = 1.0\n        for c in xs:\n            res += c * power\n            power *= x\n        return res\n    left, right = (-1.0, 1.0)\n    f_left, f_right = (p(left), p(right))\n    if f_left == 0.0:\n        return left\n    if f_right == 0.0:\n        return right\n    step = 1.0\n    while f_left * f_right > 0:\n        step *= 2\n        left, right = (-step, step)\n        f_left, f_right = (p(left), p(right))\n        if f_left == 0.0:\n            return left\n        if f_right == 0.0:\n            return right\n    tol = 1e-15\n    while right - left > tol:\n        mid = (left + right) / 2\n        f_mid = p(mid)\n        if f_mid == 0.0:\n            return mid\n        if f_left * f_mid < 0:\n            right, f_right = (mid, f_mid)\n        else:\n            left, f_left = (mid, f_mid)\n    return (left + right) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        res = 0.0\n        power = 1.0\n        for coeff in xs:\n            res += coeff * power\n            power *= x\n        return res\n    left, right = (-1.0, 1.0)\n    f_left, f_right = (p(left), p(right))\n    if abs(f_left) < 1e-16:\n        return left\n    if abs(f_right) < 1e-16:\n        return right\n    while f_left * f_right > 0:\n        length = right - left\n        left -= length\n        right += length\n        f_left, f_right = (p(left), p(right))\n        if abs(f_left) < 1e-16:\n            return left\n        if abs(f_right) < 1e-16:\n            return right\n    for _ in range(1000):\n        mid = (left + right) / 2\n        f_mid = p(mid)\n        if abs(f_mid) < 1e-14 or (right - left) / 2 < 1e-14:\n            return mid\n        if f_mid * f_left < 0:\n            right = mid\n            f_right = f_mid\n        else:\n            left = mid\n            f_left = f_mid\n    return (left + right) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for coeff in xs:\n            result += coeff * power\n            power *= x\n        return result\n    a, b = (-1.0, 1.0)\n    fa, fb = (p(a), p(b))\n    if abs(fa) < 1e-14:\n        return a\n    if abs(fb) < 1e-14:\n        return b\n    expansion_factor = 2.0\n    while fa * fb > 0:\n        if abs(fa) < abs(fb):\n            a -= (b - a) * expansion_factor\n            fa = p(a)\n            if abs(fa) < 1e-14:\n                return a\n        else:\n            b += (b - a) * expansion_factor\n            fb = p(b)\n            if abs(fb) < 1e-14:\n                return b\n    tol = 1e-15\n    while b - a > tol:\n        c = (a + b) / 2.0\n        fc = p(c)\n        if abs(fc) < 1e-14:\n            return c\n        if fa * fc < 0:\n            b, fb = (c, fc)\n        else:\n            a, fa = (c, fc)\n    return (a + b) / 2.0", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        val = 0.0\n        power = 1.0\n        for coeff in xs:\n            val += coeff * power\n            power *= x\n        return val\n    left, right = (-1.0, 1.0)\n    p_left, p_right = (p(left), p(right))\n    if p_left == 0:\n        return left\n    if p_right == 0:\n        return right\n    while p_left * p_right > 0:\n        if abs(p_left) < abs(p_right):\n            left *= 2\n            p_left = p(left)\n            if p_left == 0:\n                return left\n        else:\n            right *= 2\n            p_right = p(right)\n            if p_right == 0:\n                return right\n    for _ in range(1000):\n        mid = (left + right) / 2\n        p_mid = p(mid)\n        if p_mid == 0 or (right - left) / 2 < 1e-14:\n            return mid\n        if p_mid * p_left < 0:\n            right = mid\n            p_right = p_mid\n        else:\n            left = mid\n            p_left = p_mid\n    return (left + right) / 2", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def p(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for coef in xs:\n            result += coef * power\n            power *= x\n        return result\n    left, right = (-1.0, 1.0)\n    f_left, f_right = (p(left), p(right))\n    if abs(f_left) < 1e-16:\n        return left\n    if abs(f_right) < 1e-16:\n        return right\n    while f_left * f_right > 0:\n        left_new = left * 2\n        right_new = right * 2\n        f_left_new = p(left_new)\n        f_right_new = p(right_new)\n        if abs(f_left_new) < 1e-16:\n            return left_new\n        if abs(f_right_new) < 1e-16:\n            return right_new\n        left, right = (left_new, right_new)\n        f_left, f_right = (f_left_new, f_right_new)\n    for _ in range(1000):\n        mid = 0.5 * (left + right)\n        f_mid = p(mid)\n        if abs(f_mid) < 1e-15 or (right - left) / 2 < 1e-14:\n            return mid\n        if f_left * f_mid <= 0:\n            right = mid\n            f_right = f_mid\n        else:\n            left = mid\n            f_left = f_mid\n    return 0.5 * (left + right)"], "outputs": "[[-0.5], [1.0], [1.0], [-1.0], [0.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2]], [[-6, 11, -6, 1]], [[2, -4, 2, 0]], [[-1, 0, 1, 0]], [[0, 0, 2, -8, 8, -4]]]", "input_output_examples": "[[[[1, 2]], [[-6, 11, -6, 1]]], [[-0.5], [1.0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.09999999999999998, "original_avg_pass_rate": 0.7400337837837838, "original_nzpassk": true, "original_majority_passk": false, "original_entropy": 0.9028983231876141, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.768918918918919, "repaired_nzpassk": false, "repaired_majority_passk": false, "repaired_entropy": 0}}
{"task_id": "HumanEval/33", "original_requirement": "from typing import List\n\n\ndef sort_third(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sort_third(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "entry_point": "sort_third", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices_div_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    values = [l[i] for i in indices_div_by_three]\n    values.sort()\n    result = l[:]\n    for idx, val in zip(indices_div_by_three, values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    res = l[:]\n    for idx, val in zip(indices, values):\n        res[idx] = val\n    return res", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in third_indices))\n    result = l[:]\n    for idx, val in zip(third_indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    divisible_by_three_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in divisible_by_three_indices))\n    result = l[:]\n    for idx, val in zip(divisible_by_three_indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = list(l)\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    idx_div_3 = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in idx_div_3))\n    result = l.copy()\n    for i, idx in enumerate(idx_div_3):\n        result[idx] = values[i]\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_vals = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_vals):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    idxs = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in idxs))\n    res = l[:]\n    for i, v in zip(idxs, values):\n        res[i] = v\n    return res", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result"], "outputs": "[[[1, 2, 3]], [[2, 6, 3, 4, 8, 9, 5]], [[]], [[10]], [[9, 7]], [[0, 11, 9, 3, 5, 4, 6, 2, 1, 12]], [[100, 200, 300, 400]], [[-9, -3, -2, -6, -5, -4, -1, -8, -7]], [[3, 3, 3, 3, 3, 3, 3]], [[1, 1, 4, 2, 5, 9, 3, 6, 5, 5, 5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[5, 6, 3, 4, 8, 9, 2]], [[]], [[10]], [[9, 7]], [[12, 11, 9, 6, 5, 4, 3, 2, 1, 0]], [[100, 200, 300, 400]], [[-1, -3, -2, -6, -5, -4, -9, -8, -7]], [[3, 3, 3, 3, 3, 3, 3]], [[5, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]]]", "input_output_examples": "[[[[1, 2, 3]], [[5, 6, 3, 4, 8, 9, 2]]], [[[1, 2, 3]], [[2, 6, 3, 4, 8, 9, 5]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/34", "original_requirement": "from typing import List\n\n\ndef unique(l: List[int]) -> List[int]:\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef unique(l: List[int]) -> List[int]:\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"", "entry_point": "unique", "cluster_list": [{"programs_str": ["from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))"], "outputs": "[[[0, 2, 3, 5, 9, 123]], [[]], [[1]], [[-5, -3, -1]], [[0, 1, 2, 3]], [[999999, 1000000]], [[2]], [[1, 2, 3]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 3, 5, 2, 3, 3, 9, 0, 123]], [[]], [[1, 1, 1, 1]], [[-1, -5, -3, -1, -5]], [[0, 0, 0, 1, 2, 2, 3]], [[1000000, 999999, 1000000]], [[2]], [[3, 2, 1]]]", "input_output_examples": "[[[[5, 3, 5, 2, 3, 3, 9, 0, 123]]], [[[0, 2, 3, 5, 9, 123]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/35", "original_requirement": "from typing import List\n\n\ndef max_element(l: List[int]) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef max_element(l: List[int]) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "entry_point": "max_element", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)"], "outputs": "[[3], [123], [-1], [7], [0], [100]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[-1, -2, -3, -4]], [[7]], [[0, 0, 0]], [[100, 100, 99, 99]]]", "input_output_examples": "[[[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], [[3], [123]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/36", "original_requirement": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"", "entry_point": "fizz_buzz", "cluster_list": [{"programs_str": ["def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"], "outputs": "[[0], [0], [0], [2], [3], [4], [6], [47]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [50], [78], [79], [143], [200], [1000]]", "input_output_examples": "[[[50], [78], [79]], [[0], [2], [3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/37", "original_requirement": "from typing import List\n\n\ndef sort_even(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sort_even(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"", "entry_point": "sort_even", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indices])\n    result = l[:]\n    for idx, even_idx in enumerate(even_indices):\n        result[even_idx] = even_values[idx]\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indices])\n    result = l[:]\n    for i, val in zip(even_indices, even_values):\n        result[i] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    evens = sorted((l[i] for i in range(0, len(l), 2)))\n    result = l.copy()\n    for idx, val in zip(range(0, len(l), 2), evens):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted([l[i] for i in even_indices])\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [l[i] for i in range(0, len(l), 2)]\n    even_indices.sort()\n    result = l[:]\n    for idx, value in zip(range(0, len(l), 2), even_indices):\n        result[idx] = value\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices_values = sorted((l[i] for i in range(0, len(l), 2)))\n    result = []\n    even_index = 0\n    for i in range(len(l)):\n        if i % 2 == 0:\n            result.append(even_indices_values[even_index])\n            even_index += 1\n        else:\n            result.append(l[i])\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices_values = [l[i] for i in range(0, len(l), 2)]\n    even_indices_values.sort()\n    result = l[:]\n    for idx, val in zip(range(0, len(l), 2), even_indices_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l.copy()\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indices])\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_values = sorted((l[i] for i in range(0, len(l), 2)))\n    result = l[:]\n    even_index = 0\n    for i in range(0, len(l), 2):\n        result[i] = even_values[even_index]\n        even_index += 1\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result"], "outputs": "[[[1, 2, 3]], [[3, 6, 5, 4]], [[]], [[2]], [[3, 1]], [[6, 5, 7, 3, 9]], [[7, 11, 9, 8, 10, 6]], [[0, 1, 2, 3, 4]], [[-1, 3, 0, 4, 1, 6, 2]], [[-3, -2, -1, 0, 1]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[5, 6, 3, 4]], [[]], [[2]], [[3, 1]], [[9, 5, 7, 3, 6]], [[10, 11, 9, 8, 7, 6]], [[4, 1, 2, 3, 0]], [[1, 3, 2, 4, 0, 6, -1]], [[-3, -2, -1, 0, 1]]]", "input_output_examples": "[[[[1, 2, 3]], [[5, 6, 3, 4]]], [[[1, 2, 3]], [[3, 6, 5, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/38", "original_requirement": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"", "entry_point": "decode_cyclic", "cluster_list": [{"programs_str": ["def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:2] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)"], "outputs": "[['abcdefihg'], ['abcdef'], ['abcfdeighj'], ['cab'], ['ab'], ['']]", "probability": 1.0, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['bcaefdhgi'], ['bcaefd'], ['bcadefghij'], ['abc'], ['ab'], ['']]", "input_output_examples": "[[], []]", "weighted_test_consistency": -1.0, "at_least_one_align": false}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/39", "original_requirement": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"", "entry_point": "prime_fib", "cluster_list": [{"programs_str": ["from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    fib = [0, 1]\n    prime_fibs: List[int] = []\n    i = 2\n    while len(prime_fibs) < n:\n        fib.append(fib[i - 1] + fib[i - 2])\n        if is_prime(fib[i]):\n            prime_fibs.append(fib[i])\n        i += 1\n    return prime_fibs[-1]", "from typing import Iterator\n\ndef prime_fib(n: int) -> int:\n\n    def fib_generator() -> Iterator[int]:\n        a, b = (0, 1)\n        while True:\n            a, b = (b, a + b)\n            yield a\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    for f in fib_generator():\n        if is_prime(f):\n            count += 1\n            if count == n:\n                return f", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    a, b = (1, 1)\n    found = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            found += 1\n            if found == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    a, b = (1, 1)\n    prime_fibs: List[int] = []\n    while len(prime_fibs) < n:\n        a, b = (b, a + b)\n        if is_prime(a):\n            prime_fibs.append(a)\n    return prime_fibs[-1]", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num in (2, 3):\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    a, b = (1, 1)\n    prime_fibs: List[int] = []\n    while len(prime_fibs) < n:\n        a, b = (b, a + b)\n        if is_prime(a):\n            prime_fibs.append(a)\n    return prime_fibs[-1]", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        p = 3\n        while p * p <= x:\n            if x % p == 0:\n                return False\n            p += 2\n        return True\n    a, b = (1, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num in (2, 3):\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    fibs: List[int] = [0, 1]\n    prime_fibs: List[int] = []\n    while len(prime_fibs) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            prime_fibs.append(next_fib)\n    return prime_fibs[n - 1]", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        i = 3\n        while i * i <= x:\n            if x % i == 0:\n                return False\n            i += 2\n        return True\n    fib = [0, 1]\n    prime_fibs = []\n    idx = 2\n    while len(prime_fibs) < n:\n        fib.append(fib[-1] + fib[-2])\n        if is_prime(fib[-1]):\n            prime_fibs.append(fib[-1])\n        idx += 1\n    return prime_fibs[-1]", "from math import isqrt\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, isqrt(num) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from math import isqrt\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i <= isqrt(num):\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        p = 3\n        while p * p <= x:\n            if x % p == 0:\n                return False\n            p += 2\n        return True\n    fibs = [0, 1]\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            prime_fibs.append(next_fib)\n    return prime_fibs[n - 1]", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0:\n            return False\n        r = int(x ** 0.5) + 1\n        for i in range(3, r, 2):\n            if x % i == 0:\n                return False\n        return True\n    a, b = (1, 1)\n    prime_fibs: List[int] = []\n    while len(prime_fibs) < n:\n        a, b = (b, a + b)\n        if is_prime(a):\n            prime_fibs.append(a)\n    return prime_fibs[-1]", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        i = 3\n        while i * i <= num:\n            if num % i == 0:\n                return False\n            i += 2\n        return True\n    a, b = (0, 1)\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        a, b = (b, a + b)\n        if is_prime(a):\n            prime_fibs.append(a)\n    return prime_fibs[-1]", "from math import isqrt\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0:\n            return False\n        for i in range(3, isqrt(x) + 1, 2):\n            if x % i == 0:\n                return False\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import Iterator\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fib_generator() -> Iterator[int]:\n        a, b = (0, 1)\n        while True:\n            a, b = (b, a + b)\n            yield a\n    count = 0\n    for f in fib_generator():\n        if is_prime(f):\n            count += 1\n            if count == n:\n                return f", "from math import isqrt\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    if num in (2, 3):\n        return True\n    if num % 2 == 0:\n        return False\n    limit = isqrt(num)\n    for i in range(3, limit + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    a, b = (1, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    count = 0\n    a, b = (0, 1)\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x <= 1:\n            return False\n        if x <= 3:\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    fibs: List[int] = [0, 1]\n    prime_fibs: List[int] = []\n    while len(prime_fibs) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            prime_fibs.append(next_fib)\n    return prime_fibs[n - 1]", "from math import isqrt\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0:\n            return False\n        limit = isqrt(x)\n        for i in range(3, limit + 1, 2):\n            if x % i == 0:\n                return False\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from math import isqrt\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num in (2, 3):\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, isqrt(num) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    a, b = (1, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a"], "outputs": "[[2], [3], [5], [13], [89], ['IndexError'], ['IndexError']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [0], [-1]]", "input_output_examples": "[[[1], [2], [3], [4], [5]], [[2], [3], [5], [13], [89]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/40", "original_requirement": "from typing import List\n\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"", "entry_point": "triples_sum_to_zero", "cluster_list": [{"programs_str": ["from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            sum_ = l[i] + l[left] + l[right]\n            if sum_ == 0:\n                return True\n            elif sum_ < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n):\n        target = -l[i]\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[left] + l[right]\n            if current_sum == target:\n                return True\n            elif current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            _sum = l[i] + l[left] + l[right]\n            if _sum == 0:\n                return True\n            elif _sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"], "outputs": "[[False], [True], [False], [True], [False], [False], [True], [True], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 9, 7]], [[1]], [[]], [[0, 0, 0]], [[-1, 0, 1]], [[-5, -2, -3]], [[10, -10, 0]], [[1, 1, -2]], [[1000, -1000, 0]]]", "input_output_examples": "[[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 9, 7]], [[1]]], [[False], [True], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/41", "original_requirement": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"", "entry_point": "car_race_collision", "cluster_list": [{"programs_str": ["def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n"], "outputs": "[[0], [1], [4], [100], [10000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [10], [100]]", "input_output_examples": "[[[1], [2], [3]], [[1], [4], [9]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/42", "original_requirement": "from typing import List\n\n\ndef incr_list(l: List[int]) -> List[int]:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef incr_list(l: List[int]) -> List[int]:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"", "entry_point": "incr_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]"], "outputs": "[[[2, 3, 4]], [[6, 4, 6, 3, 4, 4, 10, 1, 124]], [[]], [[0, -1, -2]], [[1]], [[1000000, 1, -999998]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[5, 3, 5, 2, 3, 3, 9, 0, 123]], [[]], [[-1, -2, -3]], [[0]], [[999999, 0, -999999]]]", "input_output_examples": "[[[[1, 2, 3]], [[5, 3, 5, 2, 3, 3, 9, 0, 123]]], [[[2, 3, 4]], [[6, 4, 6, 3, 4, 4, 10, 1, 124]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/43", "original_requirement": "from typing import List\n\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    Returns True if there exist two distinct elements in the list whose sum is zero, and False otherwise.\n    \n    Two elements are considered distinct if they have different indices in the list.\n    This includes the case where the element is zero and appears at least twice in the list.\n    \n    Examples:\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    >>> pairs_sum_to_zero([0, 0])\n    True\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"", "entry_point": "pairs_sum_to_zero", "cluster_list": [{"programs_str": ["from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen and -num != num:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen and num != 0:\n            return True\n        seen.add(num)\n    return False"], "outputs": "[[False], [False], [False], [True], [False], [False], [False], [True], [True], [False], [True], [True]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            if num != 0 or l.count(0) > 1:\n                return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            if num != 0 or l.count(num) > 1:\n                return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            if num != 0 or l.count(0) > 1:\n                return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"], "outputs": "[[False], [False], [False], [True], [False], [False], [True], [True], [True], [False], [True], [True]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]], [[]], [[0, 0]], [[-1, 1]], [[-10, 10, 5, -5]], [[0]], [[-100000, 100000]], [[1, -1, 1, -1]]]", "input_output_examples": "[[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]]], [[False], [False], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    Returns True if there exist two distinct elements in the list whose sum is zero, and False otherwise.\n    \n    Two elements are considered distinct if they have different indices in the list.\n    This includes the case where the element is zero and appears at least twice in the list.\n    \n    Examples:\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    >>> pairs_sum_to_zero([0, 0])\n    True\n    \"\"\"", "entry_point": "pairs_sum_to_zero", "cluster_list": [{"programs_str": ["from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n        if -num in seen:\n            return True\n        seen.add(num)\n    return zero_count >= 2", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for i, num in enumerate(l):\n        if -num in seen:\n            if num != 0 or (num == 0 and seen[-num] != i):\n                return True\n        seen[num] = i\n    return l.count(0) > 1", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for i, num in enumerate(l):\n        if -num in seen:\n            if num != 0 or (num == 0 and seen[-num] != i):\n                return True\n        seen[num] = i\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n            if zero_count > 1:\n                return True\n        elif -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n        if -num in seen:\n            if num != 0 or zero_count > 1:\n                return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n            if zero_count > 1:\n                return True\n        elif -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n        if -num in seen:\n            return True\n        seen.add(num)\n    return zero_count > 1", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n            if zero_count > 1:\n                return True\n        elif -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n            if zero_count > 1:\n                return True\n        elif -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n            if zero_count > 1:\n                return True\n        else:\n            if -num in seen:\n                return True\n            seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n        if -num in seen:\n            return True\n        seen.add(num)\n    return zero_count > 1", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n        if -num in seen:\n            return True\n        seen.add(num)\n    if zero_count > 1:\n        return True\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n            if zero_count > 1:\n                return True\n        else:\n            if -num in seen:\n                return True\n            seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n        if -num in seen:\n            return True\n        seen.add(num)\n    return zero_count > 1", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = {}\n    for i, num in enumerate(l):\n        if -num in seen:\n            if num == 0:\n                if seen[-num] != i:\n                    return True\n            else:\n                return True\n        seen[num] = i\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n        if -num in seen:\n            return True\n        seen.add(num)\n    return zero_count > 1", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n        if -num in seen:\n            return True\n        seen.add(num)\n    return zero_count > 1", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n            if zero_count > 1:\n                return True\n        elif -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n            if zero_count > 1:\n                return True\n        elif -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    zero_count = 0\n    for num in l:\n        if num == 0:\n            zero_count += 1\n        if -num in seen:\n            return True\n        seen.add(num)\n    return zero_count > 1"], "outputs": "[[False], [False], [False], [True], [False], [False], [True], [True], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]], [[]], [[0, 0]], [[-1, 1]], [[-10, 10, 5, -5]], [[0]], [[-100000, 100000]], [[1, -1, 1, -1]]]", "input_output_examples": "[[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]]], [[False], [False], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.95, "original_avg_pass_rate": 0.9938962360122074, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.46899559358928117, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/44", "original_requirement": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"", "entry_point": "change_base", "cluster_list": [{"programs_str": ["def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"], "outputs": "[['22'], ['1000'], ['111'], ['0'], ['1'], ['16'], ['377'], ['10']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[8, 3], [8, 2], [7, 2], [0, 2], [1, 2], [15, 9], [255, 8], [10, 10]]", "input_output_examples": "[[[8, 3], [8, 2], [7, 2]], [['22'], ['1000'], ['111']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/45", "original_requirement": "def triangle_area(a: float, h: float) -> float:\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def triangle_area(a: float, h: float) -> float:\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"", "entry_point": "triangle_area", "cluster_list": [{"programs_str": ["def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h"], "outputs": "[[7.5], [0.0], [0.0], [0.0], [5.0000000000000005e-21], [-7.5], [-7.5], [7.5], [1000000000000.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5, 3], [0, 10], [10, 0], [0, 0], [1e-10, 1e-10], [-5, 3], [5, -3], [-5, -3], [1000000, 2000000]]", "input_output_examples": "[[[5, 3]], [[7.5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/46", "original_requirement": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"", "entry_point": "fib4", "cluster_list": [{"programs_str": ["def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        next_val = a + b + c + d\n        a, b, c, d = (b, c, d, next_val)\n    return d", "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        e = a + b + c + d\n        a, b, c, d = (b, c, d, e)\n    return d", "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        s = a + b + c + d\n        a, b, c, d = (b, c, d, s)\n    return d", "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 2\n    if n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "from typing import List\n\ndef fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    dp: List[int] = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        dp.append(dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4])\n    return dp[n]", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d"], "outputs": "[[0], [0], [2], [0], [2], [4], [8], [14], [104], [73552]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [6], [7], [10], [20]]", "input_output_examples": "[[[5], [6], [7]], [[4], [8], [14]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/47", "original_requirement": "from typing import List\n\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "repaired_requirement": "from typing import List\n\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "entry_point": "median", "cluster_list": [{"programs_str": ["from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2.0", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    s = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(s[mid]) if isinstance(s[mid], float) else s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid]) if not isinstance(sorted_l[mid], float) else sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_list[mid]\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2.0", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_list[mid]\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2.0", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2.0", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    s = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid]) if isinstance(sorted_l[mid], float) else sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid]) if isinstance(sorted_l[mid], float) else sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_list[mid])\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2"], "outputs": "[[3], [8.0], [1], [5], [5.5], [-3], [1.5], [1.5], [2.5], [3.0]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.5, "failed_input_output_examples": "[[[[-10, 4, 6, 1000, 10, 20]], [8.0], [15.0]]]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]], [[1]], [[5, 5, 5, 5, 5]], [[10, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[-5, -1, -3, -2, -4]], [[1, 2]], [[2, 1]], [[1, 2, 3, 4]], [[3, 3, 3, 3]]]", "input_output_examples": "[[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]]], [[3], [15.0]]]", "weighted_test_consistency": 0.5, "at_least_one_align": false}, "repaired_clusters": {"requirement": "from typing import List\n\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "entry_point": "median", "cluster_list": [{"programs_str": ["from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2.0", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    s = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(s[mid]) if isinstance(s[mid], float) else s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid]) if not isinstance(sorted_l[mid], float) else sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_list[mid]\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2.0", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_list[mid]\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2.0", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2.0", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    s = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid]) if isinstance(sorted_l[mid], float) else sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid]) if isinstance(sorted_l[mid], float) else sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_list[mid])\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2"], "outputs": "[[3], [8.0], [1], [5], [5.5], [-3], [1.5], [1.5], [2.5], [3.0]]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.5, "failed_input_output_examples": "[[[[-10, 4, 6, 1000, 10, 20]], [8.0], [15.0]]]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]], [[1]], [[5, 5, 5, 5, 5]], [[10, 1, 2, 3, 4, 5, 6, 7, 8, 9]], [[-5, -1, -3, -2, -4]], [[1, 2]], [[2, 1]], [[1, 2, 3, 4]], [[3, 3, 3, 3]]]", "input_output_examples": "[[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]]], [[3], [15.0]]]", "weighted_test_consistency": 0.5, "at_least_one_align": false}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/48", "original_requirement": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"", "entry_point": "is_palindrome", "cluster_list": [{"programs_str": ["def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"], "outputs": "[[True], [True], [True], [True], [True], [True], [False], [False], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['a'], ['aba'], ['aaaaa'], ['abccba'], ['abcba'], ['abc'], ['zbcd'], ['A man a plan a canal Panama'], ['12321'], ['123456']]", "input_output_examples": "[[[''], ['aba'], ['aaaaa'], ['zbcd']], [[True], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/49", "original_requirement": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"", "entry_point": "modp", "cluster_list": [{"programs_str": ["def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)"], "outputs": "[[3], [2], [1], [8], [1], [0], [0], [0], [4], ['ValueError'], [510646]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 5], [1101, 101], [0, 101], [3, 11], [100, 101], [1, 1], [0, 1], [10, 2], [50, 97], [20, 0], [1000, 1000003]]", "input_output_examples": "[[[3, 5], [1101, 101], [0, 101], [3, 11], [100, 101]], [[3], [2], [1], [8], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/50", "original_requirement": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "entry_point": "decode_shift", "cluster_list": [{"programs_str": ["def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "from typing import List\n\ndef decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "from typing import *\n\ndef decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])"], "outputs": "[['hello'], [''], ['vwxyzabcdefghijklmnopqrstu'], ['abcde'], ['uvwxy']]", "probability": 1.0, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['mjqqt'], [''], ['abcdefghijklmnopqrstuvwxyz'], ['fghij'], ['zabcd']]", "input_output_examples": "[[], []]", "weighted_test_consistency": -1.0, "at_least_one_align": false}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/51", "original_requirement": "def remove_vowels(text: str) -> str:\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def remove_vowels(text: str) -> str:\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"", "entry_point": "remove_vowels", "cluster_list": [{"programs_str": ["def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((ch for ch in text if ch not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((ch for ch in text if ch not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((ch for ch in text if ch not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((ch for ch in text if ch not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((ch for ch in text if ch not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))"], "outputs": "[[''], ['bcdf\\nghjklm'], ['bcdf'], [''], ['B'], ['zbcd'], [''], ['Pythn Prgrmmng'], ['12345!@#$%'], ['Why? Bcs  cn!'], ['Ths s  tsT']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['abcdef\\nghijklm'], ['abcdef'], ['aaaaa'], ['aaBAA'], ['zbcd'], ['AEIOUaeiou'], ['Python Programming'], ['12345!@#$%'], ['Why? Because I can!'], ['ThIs Is A tEsT']]", "input_output_examples": "[[[''], ['abcdef\\nghijklm'], ['abcdef'], ['aaaaa'], ['aaBAA'], ['zbcd']], [[''], ['bcdf\\nghjklm'], ['bcdf'], [''], ['B'], ['zbcd']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/52", "original_requirement": "from typing import List\n\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"", "entry_point": "below_threshold", "cluster_list": [{"programs_str": ["from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))"], "outputs": "[[True], [False], [True], [False], [False], [True], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5], [[], 0], [[0, 0, 0], 0], [[5, 5, 5], 5], [[-1, -2, -3], 0], [[-10, 0, 10], 10], [[1], 1], [[1], 0], [[1000000, 999999], 1000000]]", "input_output_examples": "[[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5]], [[True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/53", "original_requirement": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "entry_point": "add", "cluster_list": [{"programs_str": ["def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y"], "outputs": "[[0], [2], [-2], [0], [5], [12], [2147483648], [-2147483649]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0, 0], [1, 1], [-1, -1], [-5, 5], [2, 3], [5, 7], [2147483647, 1], [-2147483648, -1]]", "input_output_examples": "[[[2, 3], [5, 7]], [[5], [12]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/54", "original_requirement": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "entry_point": "same_chars", "cluster_list": [{"programs_str": ["def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [False], [True], [True], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc'], ['', ''], ['a', 'a'], ['a', 'b'], ['abc', 'acb'], ['abc', 'abcc'], ['abc', 'abd'], ['abc123', '321cba'], ['abc123', 'abc124'], ['aaaa', 'aaaaa']]", "input_output_examples": "[[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc']], [[True], [True], [True], [False], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/55", "original_requirement": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"", "repaired_requirement": "def fib(n: int) -> int:\n    \"\"\"\n    Return the n-th Fibonacci number using zero-based indexing, where:\n    fib(0) = 0,\n    fib(1) = 1,\n    and for n > 1, fib(n) = fib(n-1) + fib(n-2).\n\n    Examples:\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    >>> fib(10)\n    55\n\n    If n is less than or equal to 0, return 0.\n    \"\"\"", "original_clusters": {"requirement": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"", "entry_point": "fib", "cluster_list": [{"programs_str": ["def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    a, b = (1, 1)\n    for _ in range(3, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    a, b = (1, 1)\n    for _ in range(3, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    a, b = (0, 1)\n    for _ in range(n):\n        a, b = (b, a + b)\n    return a", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b"], "outputs": "[[55], [1], [21], [0], [1], [6765], [832040]]", "probability": 0.8, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def fib(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    a, b = (1, 1)\n    for _ in range(3, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    a, b = (1, 1)\n    for _ in range(3, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    a, b = (1, 1)\n    for _ in range(3, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    a, b = (1, 1)\n    for _ in range(3, n + 1):\n        a, b = (b, a + b)\n    return b"], "outputs": "[[55], [1], [21], [1], [1], [6765], [832040]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7219280948873623, "llm_generated_inputs": "[[10], [1], [8], [0], [2], [20], [30]]", "input_output_examples": "[[[10], [1], [8]], [[55], [1], [21]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def fib(n: int) -> int:\n    \"\"\"\n    Return the n-th Fibonacci number using zero-based indexing, where:\n    fib(0) = 0,\n    fib(1) = 1,\n    and for n > 1, fib(n) = fib(n-1) + fib(n-2).\n\n    Examples:\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    >>> fib(10)\n    55\n\n    If n is less than or equal to 0, return 0.\n    \"\"\"", "entry_point": "fib", "cluster_list": [{"programs_str": ["def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b"], "outputs": "[[55], [1], [21], [0], [1], [6765], [832040]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[10], [1], [8], [0], [2], [20], [30]]", "input_output_examples": "[[[10], [1], [8]], [[55], [1], [21]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.85, "original_avg_pass_rate": 0.9940000000000001, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.7219280948873623, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/56", "original_requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "entry_point": "correct_bracketing", "cluster_list": [{"programs_str": ["def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        elif char == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '<':\n            count += 1\n        elif ch == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '<':\n            count += 1\n        elif ch == '>':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '<':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '<':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0"], "outputs": "[[False], [True], [True], [False], [True], [False], [False], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['<'], ['<>'], ['<<><>>'], ['><<>'], [''], ['>'], ['<<<<'], ['>>>>'], ['<><><>'], ['<<>>><<>']]", "input_output_examples": "[[['<'], ['<>'], ['<<><>>'], ['><<>']], [[False], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/57", "original_requirement": "from typing import List\n\n\ndef monotonic(l: List[int]) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef monotonic(l: List[int]) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "entry_point": "monotonic", "cluster_list": [{"programs_str": ["from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    return all((x <= y for x, y in zip(l, l[1:]))) or all((x >= y for x, y in zip(l, l[1:])))", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = all((x <= y for x, y in zip(l, l[1:])))\n    decreasing = all((x >= y for x, y in zip(l, l[1:])))\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    return all((x <= y for x, y in zip(l, l[1:]))) or all((x >= y for x, y in zip(l, l[1:])))", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"], "outputs": "[[True], [False], [True], [True], [True], [True], [True], [True], [False], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 4, 20]], [[1, 20, 4, 10]], [[4, 1, 0, -10]], [[]], [[5]], [[3, 3, 3, 3]], [[1, 2, 2, 3, 4]], [[10, 9, 9, 4, 1]], [[1, 3, 2]], [[2, 2, 2, 3, 2]], [[10, 5, 5, 5, 0]]]", "input_output_examples": "[[[[1, 2, 4, 20]], [[1, 20, 4, 10]], [[4, 1, 0, -10]]], [[True], [False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/58", "original_requirement": "from typing import List\n\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"", "entry_point": "common", "cluster_list": [{"programs_str": ["from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))"], "outputs": "[[[1, 5, 653]], [[2, 3]], [[]], [[]], [[]], [[1]], [[0, 2]], [[200000, 1000000]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]], [[], []], [[], [1, 2, 3]], [[1, 2, 3], []], [[1, 1, 1, 1], [1, 1, 1]], [[-5, -3, 0, 2, 4], [0, 2, 3, 5]], [[1000000, 500000, 200000], [200000, 700000, 1000000]], [[1, 2, 3], [4, 5, 6]]]", "input_output_examples": "[[[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]]], [[[1, 5, 653]], [[2, 3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/59", "original_requirement": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "entry_point": "largest_prime_factor", "cluster_list": [{"programs_str": ["def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    return n if n > last_factor else last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    return n if n > 1 else last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest = 1\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest = factor\n            n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        largest = n\n    return largest", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest_factor = None\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 1 if factor == 2 else 2\n    return n if n > 1 else largest_factor", "def largest_prime_factor(n: int) -> int:\n    i = 2\n    largest_prime = 1\n    while i * i <= n:\n        while n % i == 0:\n            largest_prime = i\n            n //= i\n        i += 1\n    if n > 1:\n        largest_prime = n\n    return largest_prime", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        last_factor = n\n    return last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        last_factor = n\n    return last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest_factor = 1\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        largest_factor = n\n    return largest_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    return n if n > 1 else last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest = 0\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest = factor\n            n //= factor\n        factor += 1 if factor == 2 else 2\n    return n if n > largest else largest", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    return max(last_factor, n)", "from typing import List\n\ndef largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        return n\n    return last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    return max(last_factor, n)", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            last_factor = factor\n        else:\n            factor += 1 if factor == 2 else 2\n    return max(last_factor, n)", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest_factor = 1\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        largest_factor = n\n    return largest_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        return n\n    return last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest_factor = None\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        largest_factor = n\n    return largest_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            last_factor = factor\n        else:\n            factor += 1 if factor == 2 else 2\n    return n if n > last_factor else last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        last_factor = n\n    return last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            last_factor = factor\n        else:\n            factor += 1 if factor == 2 else 2\n    return max(last_factor, n)"], "outputs": "[[29], [2], [5], [5], [5], [3], [7], [37]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[13195], [2048], [10], [15], [100], [27], [56], [999]]", "input_output_examples": "[[[13195], [2048]], [[29], [2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/60", "original_requirement": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "entry_point": "sum_to_n", "cluster_list": [{"programs_str": ["def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"], "outputs": "[[465], [5050], [15], [55], [1], [0], [45]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[30], [100], [5], [10], [1], [0], [-10]]", "input_output_examples": "[[[30], [100], [5], [10], [1]], [[465], [5050], [15], [55], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/61", "original_requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"", "entry_point": "correct_bracketing", "cluster_list": [{"programs_str": ["def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for ch in brackets:\n        if ch == '(':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['()'], ['(()())'], ['('], [')('], ['())('], ['(((((())))))'], ['(()(()))()'], ['(()))(()'], ['()()()()()()()()()']]", "input_output_examples": "[[['('], ['()'], ['(()())'], [')(()']], [[False], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/62", "original_requirement": "from typing import List\n\n\ndef derivative(xs: List[int]) -> List[int]:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef derivative(xs: List[int]) -> List[int]:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"", "entry_point": "derivative", "cluster_list": [{"programs_str": ["from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]"], "outputs": "[[[1, 4, 12, 20]], [[2, 6]], [[]], [[]], [[0, 0]], [[1]], [[0, 0, 0]], [[-3, 4, -3]], [[1, 2, 3, 4, 5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 1, 2, 4, 5]], [[1, 2, 3]], [[0]], [[5]], [[0, 0, 0]], [[0, 1]], [[1, 0, 0, 0]], [[4, -3, 2, -1]], [[1, 1, 1, 1, 1, 1]]]", "input_output_examples": "[[[[3, 1, 2, 4, 5]], [[1, 2, 3]]], [[[1, 4, 12, 20]], [[2, 6]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/63", "original_requirement": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"", "entry_point": "fibfib", "cluster_list": [{"programs_str": ["def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c"], "outputs": "[[0], [0], [1], [1], [4], [24], [81], [35890]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [5], [8], [10], [20]]", "input_output_examples": "[[[1], [5], [8]], [[0], [4], [24]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/64", "original_requirement": "def vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"", "entry_point": "vowels_count", "cluster_list": [{"programs_str": ["def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for char in s_lower if char in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((ch in vowels for ch in s_lower))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((ch in vowels for ch in s_lower))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for char in s_lower if char in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for char in s_lower if char in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for char in s_lower if char in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    s_lower = s.lower()\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = sum((1 for char in s_lower if char in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = 0\n    for i, ch in enumerate(s_lower):\n        if ch in vowels:\n            count += 1\n        elif ch == 'y' and i == len(s_lower) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((ch in vowels for ch in s_lower))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    s_lower = s.lower()\n    for i, ch in enumerate(s_lower):\n        if ch in vowels:\n            count += 1\n        elif ch == 'y' and i == len(s_lower) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for ch in s_lower if ch in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for ch in s_lower if ch in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    s = s.lower()\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = sum((1 for char in s if char in vowels))\n    if s.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for ch in s_lower if ch in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    s_lower = s.lower()\n    for i, char in enumerate(s_lower):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s_lower) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = set('aeiouAEIOU')\n    count = sum((1 for char in s if char in vowels))\n    if s.endswith(('y', 'Y')):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for ch in s_lower if ch in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((ch in vowels for ch in s_lower))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for ch in s_lower if ch in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for char in s_lower if char in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count"], "outputs": "[[2], [3], [0], [0], [1], [1], [1], [0], [5], [6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcde'], ['ACEDY'], [''], ['bbbb'], ['yyyyy'], ['syzygy'], ['fly'], ['rhythm'], ['aeiou'], ['AEIOUY']]", "input_output_examples": "[[['abcde'], ['ACEDY']], [[2], [3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/65", "original_requirement": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"", "entry_point": "circular_shift", "cluster_list": [{"programs_str": ["def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift %= n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    length = len(s)\n    if shift > length:\n        return s[::-1]\n    shift = shift % length\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift] if shift != 0 else s", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift] if shift != 0 else digits", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift %= n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]"], "outputs": "[['21'], ['12'], ['34512'], ['12345'], ['54321'], ['0'], ['9'], ['0010']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[12, 1], [12, 2], [12345, 3], [12345, 5], [12345, 6], [0, 1], [9, 0], [1000, 2]]", "input_output_examples": "[[[12, 1], [12, 2]], [['21'], ['12']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/66", "original_requirement": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"", "entry_point": "digitSum", "cluster_list": [{"programs_str": ["def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(ch) for ch in s if ch.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(ch) for ch in s if ch.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(ch) for ch in s if ch.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if 'A' <= c <= 'Z'))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(ch) for ch in s if ch.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if 'A' <= c <= 'Z'))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(ch) for ch in s if ch.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))"], "outputs": "[[0], [131], [67], [69], [131], [153], [0], [0], [757], [897], [0], [439], [0], [476], [2015]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa'], ['1234567890'], ['!@#$%^&*()'], ['UPPERlowerMixedCASE'], ['ALLUPPERCASE'], ['alllowercase'], ['MixedCASEwith123Numbers456'], ['   '], ['A B C D E F G'], ['ZzYyXxWwVvUuTtSsRrQqPpOoNnMmLlKkJjIiHhGgFfEeDdCcBbAa']]", "input_output_examples": "[[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa']], [[0], [131], [67], [69], [131], [153]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/67", "original_requirement": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"", "entry_point": "fruit_distribution", "cluster_list": [{"programs_str": ["def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    apples = numbers[0]\n    oranges = numbers[1]\n    return n - apples - oranges", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    apples = numbers[0]\n    oranges = numbers[1]\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)"], "outputs": "[[8], [2], [95], [19], [0], [10], [0], [0], [0], [1000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120], ['0 apples and 0 oranges', 0], ['0 apples and 0 oranges', 10], ['10 apples and 0 oranges', 10], ['0 apples and 10 oranges', 10], ['50 apples and 50 oranges', 100], ['0 apples and 0 oranges', 1000]]", "input_output_examples": "[[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120]], [[8], [2], [95], [19]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/68", "original_requirement": "from typing import List\n\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "entry_point": "pluck", "cluster_list": [{"programs_str": ["from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    else:\n        return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even_value = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even_value is None or val < min_even_value:\n                min_even_value = val\n                min_index = i\n    if min_even_value is None:\n        return []\n    return [min_even_value, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    if min_even is None:\n        return []\n    return [min_even, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    if min_even is not None:\n        return [min_even, min_index]\n    return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    if min_even is None:\n        return []\n    return [min_even, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    return [min_even, min_index] if min_even is not None else []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_value = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_value is None or val < min_value:\n                min_value = val\n                min_index = i\n    if min_value is None:\n        return []\n    return [min_value, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_value = None\n    min_index = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_value is None or val < min_value or (val == min_value and i < min_index):\n                min_value = val\n                min_index = i\n    if min_value is not None:\n        return [min_value, min_index]\n    else:\n        return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    if min_even is None:\n        return []\n    return [min_even, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    if min_even is not None:\n        return [min_even, min_index]\n    return []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = -1\n    for idx, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = idx\n    if min_even is None:\n        return []\n    return [min_even, min_index]"], "outputs": "[[[2, 1]], [[2, 1]], [[]], [[0, 1]], [[]], [[0, 4]], [[2, 0]], [[10000, 0]], [[10, 3]], [[0, 0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[7, 9, 11, 13]], [[8, 6, 4, 2, 0]], [[2, 2, 2, 2]], [[10000]], [[3, 5, 7, 10, 10]], [[0]]]", "input_output_examples": "[[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]]], [[[2, 1]], [[2, 1]], [[]], [[0, 1]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/69", "original_requirement": "from typing import List\n\n\ndef search(lst: List[int]) -> int:\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef search(lst: List[int]) -> int:\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "entry_point": "search", "cluster_list": [{"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num in freq if freq[num] >= num and num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counts = Counter(lst)\n    candidates = [num for num, freq in counts.items() if freq >= num and num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidate = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            if num > candidate:\n                candidate = num\n    return candidate", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    count = Counter(lst)\n    candidates = [num for num, freq in count.items() if num > 0 and freq >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [x for x in freq if freq[x] >= x and x > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    count = Counter(lst)\n    candidates = [num for num, freq in count.items() if freq >= num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    result = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num and (num > result):\n            result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1"], "outputs": "[[2], [3], [-1], [1], [10], [4], [3], [7], [3], [8], [9], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4, 1, 2, 2, 3, 1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4]], [[5, 5, 4, 4, 4]], [[1]], [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[2, 2, 3, 3, 3, 4, 4, 4, 4]], [[1, 1, 2, 2, 2, 3, 3, 3, 3]], [[7, 7, 7, 7, 7, 7, 7]], [[3, 3, 3, 3, 3, 1, 2, 2]], [[8, 8, 8, 8, 8, 8, 8, 8]], [[9, 9, 9, 9, 9, 9, 9, 9, 9]], [[1, 2, 3, 4, 5]]]", "input_output_examples": "[[[[4, 1, 2, 2, 3, 1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4]], [[5, 5, 4, 4, 4]]], [[2], [3], [-1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/70", "original_requirement": "from typing import List\n\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "entry_point": "strange_sort_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    turn = True\n    while left <= right:\n        if turn:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        turn = not turn\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    lst_sorted = sorted(lst)\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(lst) - 1)\n    turn = True\n    while left <= right:\n        if turn:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        turn = not turn\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    sorted_lst = sorted(lst)\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    turn_min = True\n    while left <= right:\n        if turn_min:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        turn_min = not turn_min\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    turn = True\n    while left <= right:\n        if turn:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        turn = not turn\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    flag = True\n    while left <= right:\n        if flag:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        flag = not flag\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    sorted_lst = sorted(lst)\n    left, right = (0, len(sorted_lst) - 1)\n    turn_min = True\n    while left <= right:\n        if turn_min:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        turn_min = not turn_min\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    flag = True\n    while left <= right:\n        if flag:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        flag = not flag\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result"], "outputs": "[[[1, 4, 2, 3]], [[5, 5, 5, 5]], [[]], [[10]], [[1, 5, 2, 4, 3]], [[25, 100, 50, 100, 50]], [[-5, 3, -1, 2]], [[5, 7, 5, 7, 6, 6]], [[1, 2]], [[1, 2]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4]], [[5, 5, 5, 5]], [[]], [[10]], [[4, 1, 2, 5, 3]], [[100, 50, 50, 100, 25]], [[-1, -5, 3, 2]], [[7, 7, 6, 6, 5, 5]], [[1, 2]], [[2, 1]]]", "input_output_examples": "[[[[1, 2, 3, 4]], [[5, 5, 5, 5]], [[]]], [[[1, 4, 2, 3]], [[5, 5, 5, 5]], [[]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/71", "original_requirement": "def triangle_area(a: float, b: float, c: float) -> float:\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "def triangle_area(a: float, b: float, c: float) -> float:\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "entry_point": "triangle_area", "cluster_list": [{"programs_str": ["from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or b + c <= a or c + a <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or b + c <= a or c + a <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or b + c <= a or a + c <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or b + c <= a or a + c <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or b + c <= a or c + a <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)"], "outputs": "[[6.0], [-1], [10.83], [-1], [16.25], [-1], [3.0], [-1], [3.54]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 4, 5], [1, 2, 10], [5, 5, 5], [0, 4, 5], [7, 10, 5], [1, 1, 2], [2.5, 2.5, 4], [10, 5, 4.9], [10, 5, 5.1]]", "input_output_examples": "[[[3, 4, 5], [1, 2, 10]], [[6.0], [-1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/72", "original_requirement": "from typing import List\n\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "entry_point": "will_it_fly", "cluster_list": [{"programs_str": ["from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w"], "outputs": "[[False], [False], [True], [True], [True], [True], [True], [False], [True], [True], [True], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2], 5], [[3, 2, 3], 1], [[3, 2, 3], 9], [[3], 5], [[], 0], [[], 10], [[1, 2, 1], 4], [[1, 2, 1], 3], [[0], 0], [[0, 0, 0], 0], [[10, 5, 10], 25], [[10, 5, 10], 20], [[1, 2, 2, 1], 6], [[1, 2, 3, 1], 7]]", "input_output_examples": "[[[[1, 2], 5], [[3, 2, 3], 1], [[3, 2, 3], 9], [[3], 5]], [[False], [False], [True], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/73", "original_requirement": "from typing import List\n\n\ndef smallest_change(arr: List[int]) -> int:\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef smallest_change(arr: List[int]) -> int:\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"", "entry_point": "smallest_change", "cluster_list": [{"programs_str": ["from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    count = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    left, right = (0, len(arr) - 1)\n    changes = 0\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes"], "outputs": "[[4], [1], [0], [0], [0], [0], [1], [0], [2], [0], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 2, 3, 2, 1]], [[]], [[1]], [[1, 1]], [[1, 2]], [[1, 2, 2, 1]], [[1, 2, 3, 4, 5]], [[7, 7, 7, 7]], [[1, 2, 3, 4, 3, 2, 1, 0]]]", "input_output_examples": "[[[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 2, 3, 2, 1]]], [[4], [1], [0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/74", "original_requirement": "from typing import List\n\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''", "entry_point": "total_match", "cluster_list": [{"programs_str": ["from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum_lst1 = sum((len(s) for s in lst1))\n    sum_lst2 = sum((len(s) for s in lst2))\n    if sum_lst1 <= sum_lst2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total_len_1 = sum((len(s) for s in lst1))\n    total_len_2 = sum((len(s) for s in lst2))\n    if total_len_1 <= total_len_2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    length1 = sum((len(s) for s in lst1))\n    length2 = sum((len(s) for s in lst2))\n    if length1 <= length2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2"], "outputs": "[[[]], [['hI', 'Hi']], [['hi', 'admin']], [['hI', 'hi', 'hi']], [['4']], [['a']], [['x', 'y']], [['foo', 'bar', 'baz']], [[]], [[]], [['', '']], [['short', 'str']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[], []], [['hi', 'admin'], ['hI', 'Hi']], [['hi', 'admin'], ['hi', 'hi', 'admin', 'project']], [['hi', 'admin'], ['hI', 'hi', 'hi']], [['4'], ['1', '2', '3', '4', '5']], [['a'], ['b']], [['a', 'b', 'c'], ['x', 'y']], [['hello', 'world'], ['foo', 'bar', 'baz']], [['a'], []], [[], ['a']], [['', ''], ['', '']], [['longstring'], ['short', 'str']]]", "input_output_examples": "[[[[], []], [['hi', 'admin'], ['hI', 'Hi']], [['hi', 'admin'], ['hi', 'hi', 'admin', 'project']], [['hi', 'admin'], ['hI', 'hi', 'hi']], [['4'], ['1', '2', '3', '4', '5']]], [[[]], [['hI', 'Hi']], [['hi', 'admin']], [['hI', 'hi', 'hi']], [['4']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/75", "original_requirement": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "repaired_requirement": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"\n    Returns True if the given integer 'a' (where 0 < a < 100) can be expressed as the product of exactly three \n    prime numbers, each greater than or equal to 2, such that their multiplication equals 'a'. \n    The three prime factors may be the same or different primes, but the product must be exactly 'a'.\n    \n    Note:\n    - The order of the prime factors does not matter.\n    - 'a' must be strictly positive and less than 100.\n    - If 'a' cannot be factored into exactly three prime numbers, return False.\n    \n    Examples:\n    is_multiply_prime(30) == True  # 30 = 2 * 3 * 5\n    is_multiply_prime(8) == True   # 8 = 2 * 2 * 2\n    is_multiply_prime(12) == True  # 12 = 2 * 2 * 3\n    is_multiply_prime(7) == False  # 7 is prime but not product of three primes\n    is_multiply_prime(0) == False  # 0 is not positive\n    \"\"\"", "original_clusters": {"requirement": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "entry_point": "is_multiply_prime", "cluster_list": [{"programs_str": ["from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(2, a // i + 1):\n                if is_prime(j) and a // i % j == 0:\n                    k = a // i // j\n                    if k >= 2 and is_prime(k):\n                        if i * j * k == a:\n                            return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    primes = [x for x in range(2, a) if is_prime(x)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(i, a):\n                if is_prime(j) and a // i % j == 0:\n                    k = a // (i * j)\n                    if is_prime(k) and k >= j:\n                        if i * j * k == a:\n                            return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    for i in range(2, a):\n        if is_prime(i):\n            for j in range(2, a):\n                if is_prime(j):\n                    k = a // (i * j) if i * j != 0 and a % (i * j) == 0 else 0\n                    if k > 1 and is_prime(k) and (i * j * k == a):\n                        return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes: List[int] = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(i, a):\n                if is_prime(j) and a // i % j == 0:\n                    k = a // (i * j)\n                    if k >= j and is_prime(k):\n                        return True\n    return False", "def is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(2, a // i + 1):\n                if is_prime(j) and a // i % j == 0:\n                    k = a // (i * j)\n                    if k >= 2 and is_prime(k):\n                        return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    length = len(primes)\n    for i in range(length):\n        for j in range(i, length):\n            for k in range(j, length):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    length = len(primes)\n    for i in range(length):\n        for j in range(i, length):\n            for k in range(j, length):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [i for i in range(2, a + 1) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    length = len(primes)\n    for i in range(length):\n        for j in range(i, length):\n            for k in range(j, length):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [x for x in range(2, 100) if is_prime(x)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    for i in range(2, a):\n        if not is_prime(i):\n            continue\n        for j in range(i, a):\n            if not is_prime(j):\n                continue\n            for k in range(j, a):\n                if not is_prime(k):\n                    continue\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def primes_upto(n: int) -> List[int]:\n        sieve = [True] * (n + 1)\n        sieve[0], sieve[1] = (False, False)\n        for i in range(2, int(n ** 0.5) + 1):\n            if sieve[i]:\n                for j in range(i * i, n + 1, i):\n                    sieve[j] = False\n        return [x for x in range(2, n + 1) if sieve[x]]\n    primes = primes_upto(100)\n    length = len(primes)\n    for i in range(length):\n        for j in range(i, length):\n            for k in range(j, length):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [i for i in range(2, a) if is_prime(i)]\n    n = len(primes)\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(2, a // i + 1):\n                if is_prime(j) and a % (i * j) == 0:\n                    k = a // (i * j)\n                    if k >= 2 and is_prime(k):\n                        return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"], "outputs": "[[True], [False], [True], [True], [False], [False], [False], [True], [True], [False]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def primes_less_than(n: int) -> List[int]:\n        sieve = [True] * (n + 1)\n        sieve[0], sieve[1] = (False, False)\n        for i in range(2, int(n ** 0.5) + 1):\n            if sieve[i]:\n                for j in range(i * i, n + 1, i):\n                    sieve[j] = False\n        return [x for x in range(2, n + 1) if sieve[x]]\n    primes = primes_less_than(a)\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False"], "outputs": "[[True], [False], [True], [True], [False], [False], ['IndexError'], [True], [True], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[30], [60], [8], [27], [1], [97], [0], [70], [50], [49]]", "input_output_examples": "[[[30]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"\n    Returns True if the given integer 'a' (where 0 < a < 100) can be expressed as the product of exactly three \n    prime numbers, each greater than or equal to 2, such that their multiplication equals 'a'. \n    The three prime factors may be the same or different primes, but the product must be exactly 'a'.\n    \n    Note:\n    - The order of the prime factors does not matter.\n    - 'a' must be strictly positive and less than 100.\n    - If 'a' cannot be factored into exactly three prime numbers, return False.\n    \n    Examples:\n    is_multiply_prime(30) == True  # 30 = 2 * 3 * 5\n    is_multiply_prime(8) == True   # 8 = 2 * 2 * 2\n    is_multiply_prime(12) == True  # 12 = 2 * 2 * 3\n    is_multiply_prime(7) == False  # 7 is prime but not product of three primes\n    is_multiply_prime(0) == False  # 0 is not positive\n    \"\"\"", "entry_point": "is_multiply_prime", "cluster_list": [{"programs_str": ["def is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 0 < a < 100:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if i > a:\n            break\n        if a % i == 0:\n            a_div_i = a // i\n            for j in primes:\n                if j > a_div_i:\n                    break\n                if a_div_i % j == 0:\n                    k = a_div_i // j\n                    if k in primes:\n                        return True\n    return False", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 0 < a < 100:\n        return False\n    for i in range(2, a + 1):\n        if is_prime(i) and a % i == 0:\n            for j in range(2, a + 1):\n                if is_prime(j) and a // i % j == 0:\n                    k = a // (i * j)\n                    if k >= 2 and is_prime(k) and (i * j * k == a):\n                        return True\n    return False", "from math import isqrt\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "def is_multiply_prime(a: int) -> bool:\n    if not 0 < a < 100:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if i > a:\n            break\n        for j in primes:\n            if i * j > a:\n                break\n            for k in primes:\n                product = i * j * k\n                if product == a:\n                    return True\n                if product > a:\n                    break\n    return False", "def is_multiply_prime(a: int) -> bool:\n    if not 0 < a < 100:\n        return False\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in range(len(primes)):\n        for j in range(len(primes)):\n            for k in range(len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n    primes = []\n    for num in range(2, 100):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if i > a:\n            break\n        for j in primes:\n            if i * j > a:\n                break\n            for k in primes:\n                product = i * j * k\n                if product == a:\n                    return True\n                if product > a:\n                    break\n    return False", "def is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if i > a:\n            break\n        if a % i == 0:\n            a2 = a // i\n            for j in primes:\n                if j > a2:\n                    break\n                if a2 % j == 0:\n                    k = a2 // j\n                    if k in primes:\n                        return True\n    return False", "from math import isqrt\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    primes = [p for p in primes if p <= a]\n    for i in primes:\n        if i > a:\n            break\n        for j in primes:\n            if i * j > a:\n                break\n            for k in primes:\n                product = i * j * k\n                if product == a:\n                    return True\n                elif product > a:\n                    break\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if n in (2, 3):\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if i > a:\n            break\n        if a % i == 0:\n            for j in primes:\n                if i * j > a:\n                    break\n                if a % (i * j) == 0:\n                    k = a // (i * j)\n                    if k in primes:\n                        return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        if i > a:\n            break\n        for j in primes:\n            if i * j > a:\n                break\n            for k in primes:\n                product = i * j * k\n                if product == a:\n                    return True\n                if product > a:\n                    break\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 0 < a < 100:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if i > a:\n            break\n        for j in primes:\n            if i * j > a:\n                break\n            for k in primes:\n                product = i * j * k\n                if product == a:\n                    return True\n                if product > a:\n                    break\n    return False", "from math import isqrt\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n    primes = []\n    for num in range(2, a + 1):\n        for i in range(2, isqrt(num) + 1):\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n    n = len(primes)\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n\n    def primes_upto(n: int) -> List[int]:\n        sieve = [True] * (n + 1)\n        sieve[0], sieve[1] = (False, False)\n        for i in range(2, int(n ** 0.5) + 1):\n            if sieve[i]:\n                for j in range(i * i, n + 1, i):\n                    sieve[j] = False\n        return [x for x in range(2, n + 1) if sieve[x]]\n    primes = primes_upto(100)\n    for i in primes:\n        if i > a:\n            break\n        for j in primes:\n            if i * j > a:\n                break\n            for k in primes:\n                product = i * j * k\n                if product == a:\n                    return True\n                if product > a:\n                    break\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n\n    def primes_up_to(n: int) -> List[int]:\n        sieve = [True] * (n + 1)\n        sieve[0] = sieve[1] = False\n        for i in range(2, int(n ** 0.5) + 1):\n            if sieve[i]:\n                for j in range(i * i, n + 1, i):\n                    sieve[j] = False\n        return [x for x in range(2, n + 1) if sieve[x]]\n    primes = primes_up_to(a)\n    for i in primes:\n        if i > a:\n            break\n        for j in primes:\n            if i * j > a:\n                break\n            if a % (i * j) == 0:\n                k = a // (i * j)\n                if k in primes:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if i > a:\n            break\n        if a % i != 0:\n            continue\n        a2 = a // i\n        for j in primes:\n            if j > a2:\n                break\n            if a2 % j != 0:\n                continue\n            k = a2 // j\n            if k in primes:\n                return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n\n    def sieve(n: int) -> List[int]:\n        primes = []\n        sieve = [True] * (n + 1)\n        sieve[0] = sieve[1] = False\n        for i in range(2, n + 1):\n            if sieve[i]:\n                primes.append(i)\n                for j in range(i * i, n + 1, i):\n                    sieve[j] = False\n        return primes\n    primes = sieve(100)\n    for i in primes:\n        if i > a:\n            break\n        for j in primes:\n            if i * j > a:\n                break\n            for k in primes:\n                product = i * j * k\n                if product == a:\n                    return True\n                if product > a:\n                    break\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 0 or a >= 100:\n        return False\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"], "outputs": "[[True], [False], [True], [True], [False], [False], [False], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[30], [60], [8], [27], [1], [97], [0], [70], [50], [49]]", "input_output_examples": "[[[30]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.2863969571159562, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/76", "original_requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"", "repaired_requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"\n    Returns True if x is an exact power of n, and False otherwise.\n\n    A number x is considered a simple power of n if there exists an integer k >= 0 such that n**k == x.\n    Special cases:\n    - If x == 1, return True (since n**0 == 1 for any n > 0).\n    - If n <= 1 and x != 1, return False (only 1**0 == 1 is valid; no other powers are considered).\n    \n    Examples:\n    is_simple_power(1, 4) => True  # 4**0 == 1\n    is_simple_power(2, 2) => True  # 2**1 == 2\n    is_simple_power(8, 2) => True  # 2**3 == 8\n    is_simple_power(3, 2) => False # 3 is not a power of 2\n    is_simple_power(3, 1) => False # 1**k == 1 only, so 3 is not a power of 1\n    is_simple_power(5, 3) => False # 5 is not a power of 3\n    is_simple_power(1, 1) => True  # 1**0 == 1\n    \"\"\"", "original_clusters": {"requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"", "entry_point": "is_simple_power", "cluster_list": [{"programs_str": ["def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return x == n\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n    power = n\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [True], [True], [True], [True], [True], [True], [True], [False], [False], [True]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_simple_power(x: int, n: int) -> bool:\n    if n <= 1:\n        return False\n    if x == 1:\n        return True\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [False], [True], [True], [True], [True], [True], [True], [False], [False], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3], [0, 2], [1, 1], [16, 4], [27, 3], [81, 3], [10, 10], [1024, 2], [729, 9], [-8, 2], [-27, 3], [1, 0]]", "input_output_examples": "[[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3]], [[True], [True], [True], [False], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"\n    Returns True if x is an exact power of n, and False otherwise.\n\n    A number x is considered a simple power of n if there exists an integer k >= 0 such that n**k == x.\n    Special cases:\n    - If x == 1, return True (since n**0 == 1 for any n > 0).\n    - If n <= 1 and x != 1, return False (only 1**0 == 1 is valid; no other powers are considered).\n    \n    Examples:\n    is_simple_power(1, 4) => True  # 4**0 == 1\n    is_simple_power(2, 2) => True  # 2**1 == 2\n    is_simple_power(8, 2) => True  # 2**3 == 8\n    is_simple_power(3, 2) => False # 3 is not a power of 2\n    is_simple_power(3, 1) => False # 1**k == 1 only, so 3 is not a power of 1\n    is_simple_power(5, 3) => False # 5 is not a power of 3\n    is_simple_power(1, 1) => True  # 1**0 == 1\n    \"\"\"", "entry_point": "is_simple_power", "cluster_list": [{"programs_str": ["def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    while x > 1:\n        if x % n != 0:\n            return False\n        x //= n\n    return x == 1", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [True], [True], [True], [True], [True], [True], [True], [False], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3], [0, 2], [1, 1], [16, 4], [27, 3], [81, 3], [10, 10], [1024, 2], [729, 9], [-8, 2], [-27, 3], [1, 0]]", "input_output_examples": "[[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3]], [[True], [True], [True], [False], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9961411245865491, "original_nzpassk": false, "original_majority_passk": false, "original_entropy": 0.2863969571159562, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9955898566703418, "repaired_nzpassk": false, "repaired_majority_passk": false, "repaired_entropy": 0}}
{"task_id": "HumanEval/77", "original_requirement": "def iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "def iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "entry_point": "iscube", "cluster_list": [{"programs_str": ["def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    return root ** 3 == abs(a) if a > 0 else (-root) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    return root ** 3 == abs(a) if a > 0 else -root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    x = round(abs(a) ** (1 / 3))\n    return x ** 3 == abs(a) or (x + 1) ** 3 == abs(a) or (x - 1) ** 3 == abs(a) if a > 0 else -x ** 3 == a or -(x + 1) ** 3 == a or -(x - 1) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1 / 3))\n    return root ** 3 == abs_a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    r = round(abs(a) ** (1 / 3))\n    return r ** 3 == abs(a)", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    if cube_root ** 3 == abs(a):\n        return True\n    if (cube_root + 1) ** 3 == abs(a):\n        cube_root += 1\n        return True\n    return False if a > 0 else (-cube_root) ** 3 != a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    if a > 0:\n        root = round(a ** (1 / 3))\n    else:\n        root = round(-(-a) ** (1 / 3))\n    return root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    if root ** 3 == abs(a):\n        return True if a > 0 else True if (-root) ** 3 == a else False\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    return cube_root ** 3 == abs(a) if a > 0 else -cube_root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    return root ** 3 == abs(a) if a > 0 else -root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    if cube_root ** 3 == abs(a):\n        return True\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    c = round(abs(a) ** (1 / 3))\n    return c ** 3 == abs(a) if a > 0 else -c ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1 / 3))\n    return root ** 3 == abs_a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    return root ** 3 == abs(a) if a >= 0 else -root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1 / 3))\n    return root ** 3 == abs_a if a > 0 else -root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    if root ** 3 == abs(a):\n        return True\n    if (root + 1) ** 3 == abs(a):\n        return True\n    if (root - 1) ** 3 == abs(a):\n        return True\n    return False if a > 0 else -root ** 3 == a or -(root + 1) ** 3 == a or -(root - 1) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    return cube_root ** 3 == abs(a) if a > 0 else -cube_root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    return root ** 3 == abs(a) if a >= 0 else -root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    return cube_root ** 3 == abs(a) if a > 0 else -cube_root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1 / 3))\n    return root ** 3 == abs_a if a > 0 else -root ** 3 == a"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [True], [True], [True], [True], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [-1], [64], [0], [180], [27], [-27], [125], [-125], [1000], [-1000], [9], [-8]]", "input_output_examples": "[[[1], [2], [-1], [64], [0], [180]], [[True], [False], [True], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.95, "original_avg_pass_rate": 0.9789017341040462, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/78", "original_requirement": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"", "entry_point": "hex_key", "cluster_list": [{"programs_str": ["def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for ch in num if ch in prime_hex_digits))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for ch in num if ch in prime_hex_digits))", "def hex_key(num: str) -> int:\n    prime_hex_values = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_values for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for ch in num if ch in prime_hex_digits))", "def hex_key(num: str) -> int:\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for ch in num:\n        if ch in prime_digits:\n            count += 1\n    return count", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for ch in num if ch in prime_hex_digits))", "def hex_key(num: str) -> int:\n    prime_hex_values = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for ch in num if ch in prime_hex_values))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for ch in num:\n        if ch in prime_hex_digits:\n            count += 1\n    return count", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_values = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((char in prime_hex_values for char in num))", "def hex_key(num: str) -> int:\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for ch in num if ch in prime_digits))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for ch in num if ch in prime_hex_digits))", "def hex_key(num: str) -> int:\n    prime_hex_values = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_values for ch in num))", "def hex_key(num: str) -> int:\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for ch in num if ch in prime_digits))", "def hex_key(num: str) -> int:\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))"], "outputs": "[[1], [2], [4], [6], [2], [0], [0], [0], [5], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020'], [''], ['0000'], ['FFFF'], ['13579BDF'], ['2468ACE']]", "input_output_examples": "[[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020']], [[1], [2], [4], [6], [2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/79", "original_requirement": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"", "entry_point": "decimal_to_binary", "cluster_list": [{"programs_str": ["def decimal_to_binary(decimal: int) -> str:\n    binary_str = bin(decimal)[2:]\n    return f'db{binary_str}db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    binary_str = bin(decimal)[2:]\n    return f'db{binary_str}db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    binary_str = bin(decimal)[2:]\n    return f'db{binary_str}db'", "def decimal_to_binary(decimal: int) -> str:\n    binary_str = bin(decimal)[2:]\n    return f'db{binary_str}db'", "def decimal_to_binary(decimal: int) -> str:\n    return f'db{bin(decimal)[2:]}db'"], "outputs": "[['db1111db'], ['db100000db'], ['db0db'], ['db1db'], ['db10db'], ['db11111111db'], ['db10000000000db'], ['db11110100001001000000db'], ['db11111111111111111111111111111111db'], ['db111111111111111111111111111111111111111111111111111111111111111db']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[15], [32], [0], [1], [2], [255], [1024], [1000000], [4294967295], [9223372036854775807]]", "input_output_examples": "[[[15], [32]], [['db1111db'], ['db100000db']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/80", "original_requirement": "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"", "entry_point": "is_happy", "cluster_list": [{"programs_str": ["def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) < 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) < 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) < 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) < 3:\n            return False\n    return True"], "outputs": "[[False], [False], [True], [False], [True], [False], [False], [True], [True], [False], [False], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['a'], ['aa'], ['abcd'], ['aabb'], ['adb'], ['xyy'], [''], ['abc'], ['xyz'], ['aab'], ['aba'], ['bbb'], ['abcdefghijklmnopqrstuvwxyz']]", "input_output_examples": "[[['a'], ['aa'], ['abcd'], ['aabb'], ['adb'], ['xyy']], [[False], [False], [True], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/81", "original_requirement": "from typing import List\n\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"", "entry_point": "numerical_letter_grade", "cluster_list": [{"programs_str": ["from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append('A+')\n        elif g > 3.7:\n            result.append('A')\n        elif g > 3.3:\n            result.append('A-')\n        elif g > 3.0:\n            result.append('B+')\n        elif g > 2.7:\n            result.append('B')\n        elif g > 2.3:\n            result.append('B-')\n        elif g > 2.0:\n            result.append('C+')\n        elif g > 1.7:\n            result.append('C')\n        elif g > 1.3:\n            result.append('C-')\n        elif g > 1.0:\n            result.append('D+')\n        elif g > 0.7:\n            result.append('D')\n        elif g > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            grade = 'A+'\n        elif gpa > 3.7:\n            grade = 'A'\n        elif gpa > 3.3:\n            grade = 'A-'\n        elif gpa > 3.0:\n            grade = 'B+'\n        elif gpa > 2.7:\n            grade = 'B'\n        elif gpa > 2.3:\n            grade = 'B-'\n        elif gpa > 2.0:\n            grade = 'C+'\n        elif gpa > 1.7:\n            grade = 'C'\n        elif gpa > 1.3:\n            grade = 'C-'\n        elif gpa > 1.0:\n            grade = 'D+'\n        elif gpa > 0.7:\n            grade = 'D'\n        elif gpa > 0.0:\n            grade = 'D-'\n        else:\n            grade = 'E'\n        result.append(grade)\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        elif gpa == 0.0:\n            result.append('E')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    res = []\n    for g in grades:\n        if g == 4.0:\n            res.append('A+')\n        elif g > 3.7:\n            res.append('A')\n        elif g > 3.3:\n            res.append('A-')\n        elif g > 3.0:\n            res.append('B+')\n        elif g > 2.7:\n            res.append('B')\n        elif g > 2.3:\n            res.append('B-')\n        elif g > 2.0:\n            res.append('C+')\n        elif g > 1.7:\n            res.append('C')\n        elif g > 1.3:\n            res.append('C-')\n        elif g > 1.0:\n            res.append('D+')\n        elif g > 0.7:\n            res.append('D')\n        elif g > 0.0:\n            res.append('D-')\n        else:\n            res.append('E')\n    return res", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            grade = 'A+'\n        elif gpa > 3.7:\n            grade = 'A'\n        elif gpa > 3.3:\n            grade = 'A-'\n        elif gpa > 3.0:\n            grade = 'B+'\n        elif gpa > 2.7:\n            grade = 'B'\n        elif gpa > 2.3:\n            grade = 'B-'\n        elif gpa > 2.0:\n            grade = 'C+'\n        elif gpa > 1.7:\n            grade = 'C'\n        elif gpa > 1.3:\n            grade = 'C-'\n        elif gpa > 1.0:\n            grade = 'D+'\n        elif gpa > 0.7:\n            grade = 'D'\n        elif gpa > 0.0:\n            grade = 'D-'\n        else:\n            grade = 'E'\n        result.append(grade)\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append('A+')\n        elif g > 3.7:\n            result.append('A')\n        elif g > 3.3:\n            result.append('A-')\n        elif g > 3.0:\n            result.append('B+')\n        elif g > 2.7:\n            result.append('B')\n        elif g > 2.3:\n            result.append('B-')\n        elif g > 2.0:\n            result.append('C+')\n        elif g > 1.7:\n            result.append('C')\n        elif g > 1.3:\n            result.append('C-')\n        elif g > 1.0:\n            result.append('D+')\n        elif g > 0.7:\n            result.append('D')\n        elif g > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        elif gpa == 0.0:\n            result.append('E')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"], "outputs": "[[['A+']], [['A']], [['A-']], [['B+']], [['B']], [['B-']], [['C+']], [['C']], [['C-']], [['D+']], [['D']], [['D-']], [['E']], [['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']], [['A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']], [['A+', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4.0]], [[3.8]], [[3.5]], [[3.1]], [[2.8]], [[2.5]], [[2.1]], [[1.8]], [[1.5]], [[1.1]], [[0.9]], [[0.5]], [[0.0]], [[4.0, 3.8, 3.5, 3.1, 2.8, 2.5, 2.1, 1.8, 1.5, 1.1, 0.9, 0.5, 0.0]], [[3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]], [[4.0, 3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]]]", "input_output_examples": "[[[[4.0, 3, 1.7, 2, 3.5]]], [[['A+', 'B', 'C-', 'C', 'A-']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/82", "original_requirement": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"", "entry_point": "prime_length", "cluster_list": [{"programs_str": ["def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "from math import isqrt\n\ndef prime_length(string: str) -> bool:\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "from math import isqrt\n\ndef prime_length(string: str) -> bool:\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, isqrt(length) + 1):\n        if length % i == 0:\n            return False\n    return True", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hello'], ['abcdcba'], ['kittens'], ['orange'], [''], ['a'], ['ab'], ['abc'], ['testinputwithlengtheleven'], ['testinputwithlengthfourteen']]", "input_output_examples": "[[['Hello'], ['abcdcba'], ['kittens'], ['orange']], [[True], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/83", "original_requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "repaired_requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of all n-digit positive integers\n    that satisfy at least one of the following conditions:\n    - The integer starts with the digit 1.\n    - The integer ends with the digit 1.\n    \n    Important details:\n    - An n-digit positive integer has exactly n digits.\n    - The leading digit of the integer cannot be zero.\n    - Count each integer only once, even if it both starts and ends with the digit 1.\n    - For n = 1, the only valid integer that starts and ends with 1 is the number 1 itself.\n    \"\"\"", "original_clusters": {"requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "entry_point": "starts_one_ends", "cluster_list": [{"programs_str": ["def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    both_start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_one = 10 ** (n - 1)\n    end_with_one = 10 ** (n - 1)\n    both = 10 ** (n - 2)\n    return start_with_one + end_with_one - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    both_start_and_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_and_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_one = 10 ** (n - 1)\n    end_one = 10 ** (n - 1)\n    both_start_end_one = 10 ** (n - 2)\n    return start_one + end_one - both_start_end_one", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    both_start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_and_end_with_1"], "outputs": "[[1], [19], [190], [19000], [1900000000], [0.19]]", "probability": 0.6, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}, {"programs_str": ["def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_one = 10 ** (n - 1)\n    end_one = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_one + end_one - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_one = 10 ** (n - 1)\n    end_one = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_one + end_one - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1"], "outputs": "[[1], [18], [180], [18000], [1800000000], [0.18]]", "probability": 0.3, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}, {"programs_str": ["def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    start_and_end_with_1 = 10 ** (n - 2) if n > 1 else 0\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    starts_with_1 = 10 ** (n - 1)\n    ends_with_1 = 10 ** (n - 1)\n    starts_and_ends_with_1 = 10 ** (n - 2) if n > 1 else 0\n    return starts_with_1 + ends_with_1 - starts_and_ends_with_1"], "outputs": "[[1], [19], [190], [19000], [1900000000], [0.2]]", "probability": 0.1, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}], "entropy": 0.8173454221465101, "llm_generated_inputs": "[[1], [2], [3], [5], [10], [0]]", "input_output_examples": "[[], []]", "weighted_test_consistency": -1.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of all n-digit positive integers\n    that satisfy at least one of the following conditions:\n    - The integer starts with the digit 1.\n    - The integer ends with the digit 1.\n    \n    Important details:\n    - An n-digit positive integer has exactly n digits.\n    - The leading digit of the integer cannot be zero.\n    - Count each integer only once, even if it both starts and ends with the digit 1.\n    - For n = 1, the only valid integer that starts and ends with 1 is the number 1 itself.\n    \"\"\"", "entry_point": "starts_one_ends", "cluster_list": [{"programs_str": ["def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_numbers = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 8 * 10 ** (n - 2)\n    return start_with_1 + end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_and_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_and_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_n_digit = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_n_digit = 9 * 10 ** (n - 1)\n    starts_with_1 = 10 ** (n - 1)\n    ends_with_1 = 9 * 10 ** (n - 2)\n    starts_and_ends_with_1 = 10 ** (n - 2)\n    return starts_with_1 + ends_with_1 - starts_and_ends_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_n_digit = 9 * 10 ** (n - 1)\n    starts_with_1 = 10 ** (n - 1)\n    ends_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return starts_with_1 + ends_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_n_digit = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_n_digit = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_n_digit = 9 * 10 ** (n - 1)\n    starts_with_1 = 10 ** (n - 1)\n    ends_with_1 = 9 * 10 ** (n - 2)\n    starts_and_ends_with_1 = 10 ** (n - 2)\n    return starts_with_1 + ends_with_1 - starts_and_ends_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_one = 10 ** (n - 1)\n    end_with_one = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_one + end_with_one - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_n_digit_numbers = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_n_digit = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    starts_with_1 = 10 ** (n - 1)\n    ends_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return starts_with_1 + ends_with_1 - both_start_end_1"], "outputs": "[[1], [18], [180], [18000], [1800000000], [0.18]]", "probability": 1.0, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [5], [10], [0]]", "input_output_examples": "[[], []]", "weighted_test_consistency": -1.0, "at_least_one_align": false}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.20504587155963297, "original_nzpassk": false, "original_majority_passk": false, "original_entropy": 0.8173454221465101, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.5408256880733944, "repaired_nzpassk": false, "repaired_majority_passk": false, "repaired_entropy": 0}}
{"task_id": "HumanEval/84", "original_requirement": "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"", "entry_point": "solve", "cluster_list": [{"programs_str": ["def solve(N: int) -> str:\n    total = sum((int(d) for d in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    return bin(sum((int(d) for d in str(N))))[2:]", "def solve(N: int) -> str:\n    total = sum((int(d) for d in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    total = sum((int(d) for d in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum(map(int, str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(d) for d in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(d) for d in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(d) for d in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    total = sum((int(d) for d in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    total = sum((int(digit) for digit in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    total = sum((int(d) for d in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    return bin(sum((int(d) for d in str(N))))[2:]", "def solve(N: int) -> str:\n    return bin(sum((int(d) for d in str(N))))[2:]"], "outputs": "[['1'], ['110'], ['1100'], ['0'], ['1001'], ['100100'], ['1']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1000], [150], [147], [0], [9], [9999], [10000]]", "input_output_examples": "[[[1000], [150], [147]], [['1'], ['110'], ['1100']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/85", "original_requirement": "from typing import List\n\n\ndef add(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef add(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"", "entry_point": "add", "cluster_list": [{"programs_str": ["from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((value for index, value in enumerate(lst) if index % 2 == 1 and value % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))"], "outputs": "[[2], [12], [18], [12], [0], [0], [24], [6], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4, 2, 6, 7]], [[1, 2, 3, 4, 5, 6]], [[0, 8, 0, 6, 0, 4]], [[-1, 2, -3, 4, -5, 6]], [[10]], [[1, 3, 5, 7, 9]], [[2, 4, 6, 8, 10, 12]], [[1, 2, 3, 4]], [[2, 1, 4, 3, 6, 5]]]", "input_output_examples": "[[[[4, 2, 6, 7]]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/86", "original_requirement": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"", "repaired_requirement": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Given a string `s`, return a new string where each contiguous sequence of non-space characters \n    (i.e., each \"word\") is replaced by a rearranged version of that sequence with all characters \n    sorted in ascending order by their ASCII values.\n\n    The order of words and spaces in the original string must be preserved exactly, including \n    multiple consecutive spaces.\n\n    Notes:\n    - A \"word\" is defined as any sequence of characters separated by spaces, regardless of \n      character type (letters, digits, punctuation, symbols, etc.).\n    - All characters within each word are sorted together, without separating letters from \n      non-letters.\n    - Spaces are preserved in their original positions and quantities.\n    \n    Examples:\n    - anti_shuffle('Hi') returns 'Hi'  # 'Hi' sorted is 'Hi' (H=72, i=105)\n    - anti_shuffle('hello') returns 'ehllo'\n    - anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n      Explanation: \n        'Hello' sorted is 'Hello' (H=72, e=101, l=108, l=108, o=111)\n        'World!!!' sorted is '!!!Wdlor' (ASCII order: '!'=33, 'W'=87, 'd'=100, 'l'=108, 'o'=111, 'r'=114)\n    - anti_shuffle('a1b2 c3d4!') returns '12ab !34cd'\n      Explanation:\n        'a1b2' sorted is '12ab' (digits and letters sorted together)\n        'c3d4!' sorted is '!34cd'\n    - anti_shuffle('!@#$%^&*()') returns '!#$%&()*@^'\n      Explanation:\n        The entire string is one word, sorted by ASCII values.\n\n    \"\"\"", "original_clusters": {"requirement": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"", "entry_point": "anti_shuffle", "cluster_list": [{"programs_str": ["import re\n\ndef anti_shuffle(s: str) -> str:\n    parts = re.split('(\\\\s+)', s)\n    result = []\n    for part in parts:\n        if part.isspace() or part == '':\n            result.append(part)\n        else:\n            match = re.match('([a-zA-Z]+)([^a-zA-Z]*)', part)\n            if match:\n                word, trail = match.groups()\n                sorted_word = ''.join(sorted(word))\n                result.append(sorted_word + trail)\n            else:\n                result.append(part)\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello Wdlor!!!'], [''], ['   '], ['a1 c3'], ['Aa Bb Cc'], ['   Ladegin adn agiilnrt acepss   '], ['Meillptu   acepss'], ['!@#$%^&*()']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[['Hello World!!!'], ['Hello Wdlor!!!'], ['Hello !!!Wdlor']]]"}, {"programs_str": ["def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for ch in s:\n        if ch == ' ':\n            if word:\n                sorted_word = ''.join(sorted(word))\n                result.append(sorted_word)\n                word = []\n            result.append(' ')\n        else:\n            word.append(ch)\n    if word:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for ch in s:\n        if ch == ' ':\n            if word:\n                sorted_word = ''.join(sorted(word))\n                result.append(sorted_word)\n                word = []\n            result.append(' ')\n        else:\n            word.append(ch)\n    if word:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    temp_word = []\n    for char in s:\n        if char == ' ':\n            if temp_word:\n                result.append(''.join(sorted(temp_word)))\n                temp_word = []\n            result.append(' ')\n        else:\n            temp_word.append(char)\n    if temp_word:\n        result.append(''.join(sorted(temp_word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    current_word = []\n    for c in s:\n        if c != ' ':\n            current_word.append(c)\n        else:\n            if current_word:\n                sorted_word = ''.join(sorted(current_word))\n                result.append(sorted_word)\n                current_word = []\n            result.append(' ')\n    if current_word:\n        sorted_word = ''.join(sorted(current_word))\n        result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for char in s:\n        if char == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(char)\n        else:\n            word.append(char)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for c in s:\n        if c == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(' ')\n        else:\n            word.append(c)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello !!!Wdlor'], [''], ['   '], ['12ab !34cd'], ['Aa Bb Cc'], ['   Ladegin adn agiilnrt acepss   '], ['Meillptu   acepss'], ['!#$%&()*@^']]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef anti_shuffle(s: str) -> str:\n\n    def sort_word(word):\n        if re.fullmatch('[A-Za-z]+', word):\n            return ''.join(sorted(word))\n        elif re.fullmatch('\\\\W+', word):\n            return word\n        else:\n            letters = [c for c in word if c.isalpha()]\n            non_letters = [c for c in word if not c.isalpha()]\n            sorted_letters = sorted(letters)\n            result = []\n            letter_idx = 0\n            non_letter_idx = 0\n            for c in word:\n                if c.isalpha():\n                    result.append(sorted_letters[letter_idx])\n                    letter_idx += 1\n                else:\n                    pass\n            return ''.join(result)\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    res = []\n    for token in tokens:\n        if token.isspace():\n            res.append(token)\n        elif token.isalpha():\n            res.append(''.join(sorted(token)))\n        elif re.fullmatch('\\\\W+', token):\n            res.append(token)\n        else:\n            letters = [c for c in token if c.isalpha()]\n            non_letters = [c for c in token if not c.isalpha()]\n            sorted_letters = sorted(letters)\n            sorted_word = ''\n            letter_idx = 0\n            for c in token:\n                if c.isalpha():\n                    sorted_word += sorted_letters[letter_idx]\n                    letter_idx += 1\n                else:\n                    sorted_word += c\n            res.append(sorted_word)\n    return ''.join(res)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            j = i\n            word_chars = []\n            while j < len(s) and s[j] != ' ':\n                word_chars.append(s[j])\n                j += 1\n            if all((c.isalpha() for c in word_chars)):\n                sorted_word = ''.join(sorted(word_chars))\n                result.append(sorted_word)\n            else:\n                letters = [c for c in word_chars if c.isalpha()]\n                non_letters = [(idx, c) for idx, c in enumerate(word_chars) if not c.isalpha()]\n                letters_sorted = sorted(letters)\n                for idx, ch in non_letters:\n                    letters_sorted.insert(idx, ch)\n                result.append(''.join(letters_sorted))\n            i = j\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    import re\n\n    def sort_word(word: str) -> str:\n        if not word.isalpha():\n            letters = sorted([c for c in word if c.isalpha()])\n            non_letters = [(i, c) for i, c in enumerate(word) if not c.isalpha()]\n            result = list(word)\n            letter_index = 0\n            for i in range(len(result)):\n                if result[i].isalpha():\n                    result[i] = letters[letter_index]\n                    letter_index += 1\n            return ''.join(result)\n        else:\n            return ''.join(sorted(word))\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    res = []\n    for token in tokens:\n        if token.isspace():\n            res.append(token)\n        else:\n            res.append(sort_word(token))\n    return ''.join(res)", "def anti_shuffle(s: str) -> str:\n    import re\n\n    def sort_word(word):\n        if any((not c.isalpha() for c in word)):\n            letters = sorted([c for c in word if c.isalpha()])\n            non_letters = [(i, c) for i, c in enumerate(word) if not c.isalpha()]\n            for i, c in non_letters:\n                letters.insert(i, c)\n            return ''.join(letters)\n        else:\n            return ''.join(sorted(word))\n    tokens = re.findall('\\\\s+|\\\\S+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        else:\n            result.append(sort_word(token))\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n\n    def sort_word(word):\n        letters = []\n        others = []\n        for ch in word:\n            if ch.isalpha():\n                letters.append(ch)\n            else:\n                others.append(ch)\n        letters.sort()\n        result = []\n        l_idx = 0\n        o_idx = 0\n        for ch in word:\n            if ch.isalpha():\n                result.append(letters[l_idx])\n                l_idx += 1\n            else:\n                result.append(ch)\n        return ''.join(result)\n    tokens = re.split('(\\\\s+)', s)\n    result_tokens = []\n    for token in tokens:\n        if token.isspace() or token == '':\n            result_tokens.append(token)\n        else:\n            result_tokens.append(sort_word(token))\n    return ''.join(result_tokens)", "import re\n\ndef anti_shuffle(s: str) -> str:\n\n    def sort_word(word):\n        letters = sorted(filter(str.isalpha, word))\n        result = []\n        letter_index = 0\n        for ch in word:\n            if ch.isalpha():\n                result.append(letters[letter_index])\n                letter_index += 1\n            else:\n                result.append(ch)\n        return ''.join(result)\n    parts = re.split('(\\\\s+)', s)\n    for i in range(0, len(parts), 2):\n        parts[i] = sort_word(parts[i])\n    return ''.join(parts)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            start = i\n            while i < len(s) and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            letters = sorted([c for c in word if c.isalpha()])\n            non_letters_positions = [(idx, c) for idx, c in enumerate(word) if not c.isalpha()]\n            letters_pos = 0\n            new_word_chars = []\n            for idx in range(len(word)):\n                if any((p[0] == idx for p in non_letters_positions)):\n                    new_word_chars.append(next((p[1] for p in non_letters_positions if p[0] == idx)))\n                else:\n                    new_word_chars.append(letters[letters_pos])\n                    letters_pos += 1\n            result.append(''.join(new_word_chars))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            j = i\n            while j < len(s) and s[j] != ' ':\n                j += 1\n            word = s[i:j]\n            if word.isalpha():\n                sorted_word = ''.join(sorted(word))\n                result.append(sorted_word)\n            else:\n                alphabets = sorted([c for c in word if c.isalpha()])\n                non_alphabets = [c for c in word if not c.isalpha()]\n                new_word = []\n                alpha_index = 0\n                for c in word:\n                    if c.isalpha():\n                        new_word.append(alphabets[alpha_index])\n                        alpha_index += 1\n                    else:\n                        new_word.append(c)\n                result.append(''.join(new_word))\n            i = j\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n\n    def sort_word(word: str) -> str:\n        if word.isalpha():\n            return ''.join(sorted(word))\n        else:\n            letters = [c for c in word if c.isalpha()]\n            others = [c for c in word if not c.isalpha()]\n            letters.sort()\n            result = []\n            letter_index = 0\n            for c in word:\n                if c.isalpha():\n                    result.append(letters[letter_index])\n                    letter_index += 1\n                else:\n                    result.append(c)\n            return ''.join(result)\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    result_tokens = []\n    for token in tokens:\n        if token.isspace():\n            result_tokens.append(token)\n        else:\n            result_tokens.append(sort_word(token))\n    return ''.join(result_tokens)"], "outputs": "[['Hi'], ['ehllo'], ['Hello Wdlor!!!'], [''], ['   '], ['a1b2 c3d4!'], ['Aa Bb Cc'], ['   Ladegin adn agiilnrt acepss   '], ['Meillptu   acepss'], ['!@#$%^&*()']]", "probability": 0.45, "is_align_req": 0, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[['Hello World!!!'], ['Hello Wdlor!!!'], ['Hello !!!Wdlor']]]"}, {"programs_str": ["def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            start = i\n            while i < n and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            if word.isalpha():\n                result.append(''.join(sorted(word)))\n            else:\n                letters = [c for c in word if c.isalpha()]\n                non_letters = [c for c in word if not c.isalpha()]\n                letters.sort()\n                result.append(''.join(non_letters + letters))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            start = i\n            while i < len(s) and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            if word.isalpha():\n                sorted_word = ''.join(sorted(word))\n            else:\n                letters = sorted([ch for ch in word if ch.isalpha()])\n                non_letters = [ch for ch in word if not ch.isalpha()]\n                sorted_word = ''.join(non_letters) + ''.join(letters)\n            result.append(sorted_word)\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello !!!Wdlor'], [''], ['   '], ['12ab 34!cd'], ['Aa Bb Cc'], ['   Ladegin adn agiilnrt acepss   '], ['Meillptu   acepss'], ['!@#$%^&*()']]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            start = i\n            while i < len(s) and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            if word.isalpha():\n                sorted_word = ''.join(sorted(word))\n                result.append(sorted_word)\n            else:\n                first_alpha = 0\n                while first_alpha < len(word) and (not word[first_alpha].isalpha()):\n                    first_alpha += 1\n                non_letters = word[:first_alpha]\n                letters = word[first_alpha:]\n                sorted_letters = ''.join(sorted(letters))\n                result.append(non_letters + sorted_letters)\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello !!!Wdlor'], [''], ['   '], ['12ab !34cd'], ['Aa Bb Cc'], ['   Ladegin adn agiilnrt acepss   '], ['Meillptu   acepss'], ['!@#$%^&*()']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef anti_shuffle(s: str) -> str:\n\n    def sort_word(word: str) -> str:\n        if len(word) <= 1:\n            return word\n        i = len(word)\n        while i > 0 and (not word[i - 1].isalpha()):\n            i -= 1\n        alpha_part = ''.join(sorted(word[:i]))\n        non_alpha_part = word[i:]\n        return alpha_part + non_alpha_part\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for t in tokens:\n        if t.isspace():\n            result.append(t)\n        else:\n            result.append(sort_word(t))\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello Wdlor!!!'], [''], ['   '], ['1ab2 3cd4!'], ['Aa Bb Cc'], ['   Ladegin adn agiilnrt acepss   '], ['Meillptu   acepss'], ['!@#$%^&*()']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[['Hello World!!!'], ['Hello Wdlor!!!'], ['Hello !!!Wdlor']]]"}], "entropy": 0.7814322619606436, "llm_generated_inputs": "[['Hi'], ['hello'], ['Hello World!!!'], [''], ['   '], ['a1b2 c3d4!'], ['Aa Bb Cc'], ['   Leading and trailing spaces   '], ['Multiple   spaces'], ['!@#$%^&*()']]", "input_output_examples": "[[['Hi'], ['hello'], ['Hello World!!!']], [['Hi'], ['ehllo'], ['Hello !!!Wdlor']]]", "weighted_test_consistency": 0.8166666666666668, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Given a string `s`, return a new string where each contiguous sequence of non-space characters \n    (i.e., each \"word\") is replaced by a rearranged version of that sequence with all characters \n    sorted in ascending order by their ASCII values.\n\n    The order of words and spaces in the original string must be preserved exactly, including \n    multiple consecutive spaces.\n\n    Notes:\n    - A \"word\" is defined as any sequence of characters separated by spaces, regardless of \n      character type (letters, digits, punctuation, symbols, etc.).\n    - All characters within each word are sorted together, without separating letters from \n      non-letters.\n    - Spaces are preserved in their original positions and quantities.\n    \n    Examples:\n    - anti_shuffle('Hi') returns 'Hi'  # 'Hi' sorted is 'Hi' (H=72, i=105)\n    - anti_shuffle('hello') returns 'ehllo'\n    - anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n      Explanation: \n        'Hello' sorted is 'Hello' (H=72, e=101, l=108, l=108, o=111)\n        'World!!!' sorted is '!!!Wdlor' (ASCII order: '!'=33, 'W'=87, 'd'=100, 'l'=108, 'o'=111, 'r'=114)\n    - anti_shuffle('a1b2 c3d4!') returns '12ab !34cd'\n      Explanation:\n        'a1b2' sorted is '12ab' (digits and letters sorted together)\n        'c3d4!' sorted is '!34cd'\n    - anti_shuffle('!@#$%^&*()') returns '!#$%&()*@^'\n      Explanation:\n        The entire string is one word, sorted by ASCII values.\n\n    \"\"\"", "entry_point": "anti_shuffle", "cluster_list": [{"programs_str": ["def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for c in s:\n        if c == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(' ')\n        else:\n            word.append(c)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            start = i\n            while i < n and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for char in s:\n        if char == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(' ')\n        else:\n            word.append(char)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word_chars = []\n    for ch in s:\n        if ch == ' ':\n            if word_chars:\n                result.append(''.join(sorted(word_chars)))\n                word_chars = []\n            result.append(ch)\n        else:\n            word_chars.append(ch)\n    if word_chars:\n        result.append(''.join(sorted(word_chars)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for char in s:\n        if char == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(char)\n        else:\n            word.append(char)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word_chars = []\n    for char in s:\n        if char == ' ':\n            if word_chars:\n                result.append(''.join(sorted(word_chars)))\n                word_chars = []\n            result.append(char)\n        else:\n            word_chars.append(char)\n    if word_chars:\n        result.append(''.join(sorted(word_chars)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for c in s:\n        if c == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(' ')\n        else:\n            word.append(c)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for ch in s:\n        if ch == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(ch)\n        else:\n            word.append(ch)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word_chars = []\n    for char in s:\n        if char != ' ':\n            word_chars.append(char)\n        else:\n            if word_chars:\n                result.append(''.join(sorted(word_chars)))\n                word_chars = []\n            result.append(char)\n    if word_chars:\n        result.append(''.join(sorted(word_chars)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word_chars = []\n    for ch in s:\n        if ch != ' ':\n            word_chars.append(ch)\n        else:\n            if word_chars:\n                result.append(''.join(sorted(word_chars)))\n                word_chars = []\n            result.append(ch)\n    if word_chars:\n        result.append(''.join(sorted(word_chars)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            start = i\n            while i < n and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word_chars = []\n    for char in s:\n        if char == ' ':\n            if word_chars:\n                sorted_word = ''.join(sorted(word_chars))\n                result.append(sorted_word)\n                word_chars = []\n            result.append(char)\n        else:\n            word_chars.append(char)\n    if word_chars:\n        sorted_word = ''.join(sorted(word_chars))\n        result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for ch in s:\n        if ch != ' ':\n            word.append(ch)\n        else:\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(ch)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            start = i\n            while i < n and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            start = i\n            while i < n and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for char in s:\n        if char == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(char)\n        else:\n            word.append(char)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for char in s:\n        if char == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(char)\n        else:\n            word.append(char)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for ch in s:\n        if ch != ' ':\n            word.append(ch)\n        else:\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(ch)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for char in s:\n        if char == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(char)\n        else:\n            word.append(char)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for char in s:\n        if char == ' ':\n            if word:\n                result.append(''.join(sorted(word)))\n                word = []\n            result.append(char)\n        else:\n            word.append(char)\n    if word:\n        result.append(''.join(sorted(word)))\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello !!!Wdlor'], [''], ['   '], ['12ab !34cd'], ['Aa Bb Cc'], ['   Ladegin adn agiilnrt acepss   '], ['Meillptu   acepss'], ['!#$%&()*@^']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hi'], ['hello'], ['Hello World!!!'], [''], ['   '], ['a1b2 c3d4!'], ['Aa Bb Cc'], ['   Leading and trailing spaces   '], ['Multiple   spaces'], ['!@#$%^&*()']]", "input_output_examples": "[[['Hi'], ['hello'], ['Hello World!!!']], [['Hi'], ['ehllo'], ['Hello !!!Wdlor']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.19999999999999996, "original_avg_pass_rate": 0.6934955312810328, "original_nzpassk": true, "original_majority_passk": false, "original_entropy": 0.7814322619606436, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/87", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"", "entry_point": "get_row", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        indices = [j for j, val in enumerate(row) if val == x]\n        for j in sorted(indices, reverse=True):\n            result.append((i, j))\n    result.sort(key=lambda t: t[0])\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        cols = [j for j, val in enumerate(row) if val == x]\n        cols.sort(reverse=True)\n        for c in cols:\n            result.append((i, c))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        positions = [j for j, val in enumerate(row) if val == x]\n        positions.sort(reverse=True)\n        for pos in positions:\n            result.append((i, pos))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for r, row in enumerate(lst):\n        cols = [c for c, val in enumerate(row) if val == x]\n        cols.sort(reverse=True)\n        for c in cols:\n            result.append((r, c))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        indices = [j for j, val in enumerate(row) if val == x]\n        for j in sorted(indices, reverse=True):\n            result.append((i, j))\n    result.sort(key=lambda t: t[0])\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    res = []\n    for i, row in enumerate(lst):\n        coords = [(i, j) for j, val in enumerate(row) if val == x]\n        coords.sort(key=lambda c: c[1], reverse=True)\n        res.extend(coords)\n    return res", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        positions = [j for j, val in enumerate(row) if val == x]\n        positions.sort(reverse=True)\n        for pos in positions:\n            result.append((i, pos))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        positions = [j for j, val in enumerate(row) if val == x]\n        positions.sort(reverse=True)\n        for pos in positions:\n            result.append((i, pos))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for r, row in enumerate(lst):\n        coords = [(r, c) for c, val in enumerate(row) if val == x]\n        coords.sort(key=lambda tup: tup[1], reverse=True)\n        result.extend(coords)\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        coords = [(i, j) for j, val in enumerate(row) if val == x]\n        coords.sort(key=lambda tup: tup[1], reverse=True)\n        result.extend(coords)\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        positions = [col_idx for col_idx, val in enumerate(row) if val == x]\n        positions.sort(reverse=True)\n        for col_idx in positions:\n            result.append((row_idx, col_idx))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for r, row in enumerate(lst):\n        cols = [c for c, val in enumerate(row) if val == x]\n        cols.sort(reverse=True)\n        for c in cols:\n            result.append((r, c))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        positions = [j for j, val in enumerate(row) if val == x]\n        positions.sort(reverse=True)\n        result.extend(((i, pos) for pos in positions))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        coords = [(i, j) for j, val in enumerate(row) if val == x]\n        coords.sort(key=lambda t: t[1], reverse=True)\n        result.extend(coords)\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for r_index, row in enumerate(lst):\n        cols = [c_index for c_index, val in enumerate(row) if val == x]\n        cols.sort(reverse=True)\n        for c in cols:\n            result.append((r_index, c))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        cols = [j for j, val in enumerate(row) if val == x]\n        cols_sorted_desc = sorted(cols, reverse=True)\n        for c in cols_sorted_desc:\n            result.append((i, c))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    res = []\n    for row_idx, row in enumerate(lst):\n        cols = [col_idx for col_idx, val in enumerate(row) if val == x]\n        for col_idx in sorted(cols, reverse=True):\n            res.append((row_idx, col_idx))\n    return res", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    coordinates = []\n    for i, row in enumerate(lst):\n        cols = [j for j, val in enumerate(row) if val == x]\n        cols.sort(reverse=True)\n        for col in cols:\n            coordinates.append((i, col))\n    return coordinates", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    res = []\n    for i, row in enumerate(lst):\n        coords = [(i, j) for j, val in enumerate(row) if val == x]\n        coords.sort(key=lambda c: c[1], reverse=True)\n        res.extend(coords)\n    res.sort(key=lambda c: c[0])\n    return res", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        coords = [(i, j) for j, val in enumerate(row) if val == x]\n        coords_sorted = sorted(coords, key=lambda c: c[1], reverse=True)\n        result.extend(coords_sorted)\n    return result"], "outputs": "[[[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]], [[]], [[(2, 2)]], [[(0, 2), (0, 1), (0, 0), (1, 1), (1, 0), (2, 0)]], [[(0, 0), (1, 2), (1, 1), (1, 0), (3, 1), (3, 0)]], [[]], [[(0, 2), (0, 1), (0, 0), (1, 0), (2, 3), (2, 2), (2, 1), (2, 0)]], [[(0, 0)]], [[]], [[(0, 2), (2, 0)]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[], [1], [1, 2, 3]], 3], [[[7, 7, 7], [7, 7], [7]], 7], [[[5], [5, 5, 5], [1, 2, 3], [5, 5]], 5], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10], [[[0, 0, 0], [0], [0, 0, 0, 0]], 0], [[[100]], 100], [[[], [], []], 0], [[[1, 2, 3], [], [3, 2, 1]], 3]]", "input_output_examples": "[[[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[], [1], [1, 2, 3]], 3]], [[[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]], [[]], [[(2, 2)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/88", "original_requirement": "from typing import List\n\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"", "entry_point": "sort_array", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    arr_copy = array[:]\n    total = arr_copy[0] + arr_copy[-1]\n    if total % 2 == 1:\n        return sorted(arr_copy)\n    else:\n        return sorted(arr_copy, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    sum_ends = array[0] + array[-1]\n    if sum_ends % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    s = array[0] + array[-1]\n    if s % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    sum_ends = array[0] + array[-1]\n    if sum_ends % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"], "outputs": "[[[]], [[5]], [[0, 1, 2, 3, 4, 5]], [[6, 5, 4, 3, 2, 1, 0]], [[0, 0, 0, 0]], [[7, 5, 3, 1]], [[5, 6, 7, 8, 9, 10]], [[1, 2]], [[1, 1]], [[1000000, 0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]], [[0, 0, 0, 0]], [[1, 3, 5, 7]], [[10, 9, 8, 7, 6, 5]], [[1, 2]], [[1, 1]], [[1000000, 0]]]", "input_output_examples": "[[[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]]], [[[]], [[5]], [[0, 1, 2, 3, 4, 5]], [[6, 5, 4, 3, 2, 1, 0]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/89", "original_requirement": "def encrypt(s: str) -> str:\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def encrypt(s: str) -> str:\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"", "entry_point": "encrypt", "cluster_list": [{"programs_str": ["def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n            result.append(chr(shifted))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n        result.append(chr(shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n        result.append(chr(shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n        result.append(chr(shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        result.append(shifted)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if char.isalpha():\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = (ord(char) - ord('a') + 4) % 26\n            result.append(chr(ord('a') + shifted))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n        result.append(chr(shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = (ord(char) - ord('a') + 4) % 26\n            result.append(chr(ord('a') + shifted))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        offset = (ord(char) - ord('a') + 4) % 26\n        result.append(chr(ord('a') + offset))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n        result.append(chr(shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if char.isalpha():\n            shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n            result.append(chr(shifted))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if char.isalpha():\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n            result.append(chr(shifted))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26\n        result.append(chr(ord('a') + shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26\n        result.append(chr(ord('a') + shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n        result.append(chr(shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n            result.append(chr(shifted))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        result.append(shifted)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if char.isalpha():\n            offset = 2 * 2\n            if char.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            shifted = (ord(char) - base + offset) % 26 + base\n            result.append(chr(shifted))\n        else:\n            result.append(char)\n    return ''.join(result)"], "outputs": "[['lm'], ['ewhjklnop'], ['kj'], ['ix'], ['d'], ['c'], [''], ['efghijklmnopqrstuvwxyzabcd'], ['dddd'], ['e']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['hi'], ['asdfghjkl'], ['gf'], ['et'], ['z'], ['y'], [''], ['abcdefghijklmnopqrstuvwxyz'], ['zzzz'], ['a']]", "input_output_examples": "[[['hi'], ['asdfghjkl'], ['gf'], ['et']], [['lm'], ['ewhjklnop'], ['kj'], ['ix']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.75, "original_avg_pass_rate": 0.8829365079365079, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/90", "original_requirement": "from typing import List\n\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"", "entry_point": "next_smallest", "cluster_list": [{"programs_str": ["from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    if not lst:\n        return None\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_vals = sorted(set(lst))\n    if len(unique_vals) < 2:\n        return None\n    return unique_vals[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_vals = sorted(set(lst))\n    if len(unique_vals) < 2:\n        return None\n    return unique_vals[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_vals = sorted(set(lst))\n    if len(unique_vals) < 2:\n        return None\n    return unique_vals[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]"], "outputs": "[[2], [2], [None], [None], [None], [None], [-4], [2], [2], [2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]], [[2]], [[5, 5, 5, 5]], [[-1, -2, -3, -4, -5]], [[1, 2, 2, 3, 3]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 1, 2, 2, 3, 3]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]]], [[2], [2], [None], [None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/91", "original_requirement": "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", "entry_point": "is_bored", "cluster_list": [{"programs_str": ["import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I'):\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I '):\n            count += 1\n        elif sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    delimiters = {'.', '?', '!'}\n    count = 0\n    sentence_start = True\n    i = 0\n    length = len(S)\n    while i < length:\n        while i < length and S[i] == ' ':\n            i += 1\n        if i >= length:\n            break\n        if sentence_start:\n            if S[i] == 'I':\n                next_char = S[i + 1] if i + 1 < length else ''\n                if next_char == ' ' or next_char in delimiters or next_char == '':\n                    count += 1\n                sentence_start = False\n            else:\n                sentence_start = False\n        while i < length and S[i] not in delimiters:\n            i += 1\n        if i < length and S[i] in delimiters:\n            sentence_start = True\n            i += 1\n    return count", "def is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "def is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I'):\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    delimiters = {'.', '?', '!'}\n    count = 0\n    start = 0\n    length = len(S)\n    for i in range(length):\n        if S[i] in delimiters:\n            sentence = S[start:i].strip()\n            if sentence.startswith('I ') or sentence == 'I':\n                count += 1\n            start = i + 1\n    sentence = S[start:].strip()\n    if sentence.startswith('I ') or sentence == 'I':\n        count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count"], "outputs": "[[0], [1], [0], [1], [3], [1], [0], [3], [0], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hello world'], ['The sky is blue. The sun is shining. I love this weather'], [''], ['I.'], ['I! I? I.'], ['You should try. I think it works! But maybe?'], ['is this sentence starting with I? no it is not.'], ['I am happy. I! am! I? am?!'], ['Words without sentence delimiters I am bored'], ['I am. Really? I am! So. I am.']]", "input_output_examples": "[[['Hello world'], ['The sky is blue. The sun is shining. I love this weather']], [[0], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9990059642147118, "repaired_pass_rate": null, "original_nzpassk": false, "original_majority_passk": false, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/92", "original_requirement": "def any_int(x: int, y: int, z: int) -> bool:\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "def any_int(x: int, y: int, z: int) -> bool:\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''", "entry_point": "any_int", "cluster_list": [{"programs_str": ["def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not all((isinstance(i, int) for i in (x, y, z))):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "from typing import Union\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not all((isinstance(i, int) for i in (x, y, z))):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not all((isinstance(i, int) for i in (x, y, z))):\n        return False\n    return x == y + z or y == x + z or z == x + y"], "outputs": "[[True], [False], [True], [False], [True], [True], [True], [True], [True], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5, 2, 7], [3, 2, 2], [3, -2, 1], [3.6, -2.2, 2], [0, 0, 0], [-1, -1, -2], [10, 5, 5], [1, 2, 3], [1, 3, 2], [2, 1, 3], [1000000, 500000, 500000], [1, 1, 2.0], [2, 2, 4.0]]", "input_output_examples": "[[[5, 2, 7], [3, 2, 2], [3, -2, 1], [3.6, -2.2, 2]], [[True], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/93", "original_requirement": "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"", "repaired_requirement": "def encode(message: str) -> str:\n    \"\"\"\n    Encode the input message by performing the following transformations on each character:\n    1. Swap the case of all alphabetic letters (uppercase to lowercase, lowercase to uppercase).\n    2. After swapping case, if the resulting character is a vowel (a, e, i, o, u in lowercase or uppercase),\n       replace it with the letter that appears 2 positions ahead of it in the English alphabet, \n       preserving the case of the swapped character.\n       - The alphabet is considered circular, so after 'z' comes 'a', and after 'Z' comes 'A'.\n    3. Non-alphabetic characters remain unchanged.\n\n    Assumptions:\n    - The input message contains only letters and possibly other characters.\n    - The vowel replacement is applied after case swapping.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    >>> encode('AEIOUaeiou')\n    'cgkqwCGKQW'\n    \"\"\"", "original_clusters": {"requirement": "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"", "entry_point": "encode", "cluster_list": [{"programs_str": ["from typing import List\n\ndef encode(message: str) -> str:\n    vowels_lower = 'aeiou'\n    vowels_upper = 'AEIOU'\n    result: List[str] = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels_lower:\n                new_char = chr((ord(swapped) - ord('a') + 2) % 26 + ord('a'))\n                result.append(new_char)\n            elif swapped in vowels_upper:\n                new_char = chr((ord(swapped) - ord('A') + 2) % 26 + ord('A'))\n                result.append(new_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    res = []\n    for ch in message:\n        if ch.islower():\n            ch_swapped = ch.upper()\n        else:\n            ch_swapped = ch.lower()\n        if ch in vowels:\n            if ch.islower():\n                new_ch = chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n            else:\n                new_ch = chr((ord(ch) - ord('A') + 2) % 26 + ord('A'))\n            new_ch = new_ch.swapcase()\n            res.append(new_ch)\n        else:\n            res.append(ch_swapped)\n    return ''.join(res)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    shift_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in shift_map:\n                swapped = shift_map[swapped]\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if ch in vowels:\n                base = ord('a') if ch.islower() else ord('A')\n                offset = ord(ch.lower()) - ord('a')\n                new_offset = (offset + 2) % 26\n                new_char = chr(base + new_offset)\n                if swapped.islower():\n                    new_char = new_char.lower()\n                else:\n                    new_char = new_char.upper()\n                result.append(new_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    replace_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels:\n                result.append(replace_map[swapped])\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    result = []\n    for ch in message:\n        swapped = ch.swapcase()\n        if swapped in vowels:\n            if swapped.islower():\n                base = ord('a')\n            else:\n                base = ord('A')\n            pos = ord(swapped) - base\n            new_pos = (pos + 2) % 26\n            swapped = chr(base + new_pos)\n        result.append(swapped)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    def replace_vowel(ch: str) -> str:\n        offset = (ord(ch) - ord('a') + 2) % 26\n        return chr(ord('a') + offset)\n    res = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            lower_ch = ch.lower()\n            if lower_ch in vowels:\n                new_char = replace_vowel(lower_ch)\n                if swapped.isupper():\n                    new_char = new_char.upper()\n                else:\n                    new_char = new_char.lower()\n                res.append(new_char)\n            else:\n                res.append(swapped)\n        else:\n            res.append(ch)\n    return ''.join(res)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            new_ch = ch.swapcase()\n            lower_ch = ch.lower()\n            if lower_ch in vowels:\n                offset = (ord(lower_ch) - ord('a') + 2) % 26\n                shifted = chr(ord('a') + offset)\n                new_ch = shifted.upper() if ch.islower() else shifted.lower()\n            result.append(new_ch)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n\n    def shift_vowel(ch):\n        if ch in vowels:\n            base = ord('a') if ch.islower() else ord('A')\n            offset = ord(ch.lower()) - ord('a')\n            new_char = chr((offset + 2) % 26 + base)\n            return new_char.upper() if ch.isupper() else new_char\n        else:\n            return ch\n    result_chars = []\n    for ch in message:\n        swapped = ch.swapcase()\n        if ch.lower() in 'aeiou':\n            shifted = shift_vowel(ch)\n            pass\n    result_chars = []\n    for ch in message:\n        if ch.lower() in 'aeiou':\n            base = ord('a') if ch.islower() else ord('A')\n            offset = ord(ch) - base\n            shifted = chr((offset + 2) % 26 + base)\n            swapped = shifted.swapcase()\n            result_chars.append(swapped)\n        else:\n            result_chars.append(ch.swapcase())\n    return ''.join(result_chars)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_map = {}\n    for v in vowels:\n        if v.islower():\n            shifted = chr((ord(v) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            shifted = chr((ord(v) - ord('A') + 2) % 26 + ord('A'))\n        vowel_map[v] = shifted\n    result = []\n    for ch in message:\n        if ch in vowel_map:\n            result.append(vowel_map[ch].swapcase())\n        elif ch.isalpha():\n            result.append(ch.swapcase())\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            lower = swapped.lower()\n            if lower in vowels:\n                new_char = chr((ord(lower) - ord('a') + 2) % 26 + ord('a'))\n                if swapped.isupper():\n                    new_char = new_char.upper()\n                result.append(new_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowel_map:\n                result.append(vowel_map[swapped])\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    shift_mapping = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels:\n                result.append(shift_mapping[swapped])\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)"], "outputs": "[['TGST'], ['tHKS KS C MGSSCGG'], ['cgkqwCGKQW'], ['BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'], [''], ['C'], ['g'], ['XYZxyz']]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if ch in vowels:\n                base = ord('a') if ch.islower() else ord('A')\n                shifted_ord = ord(ch.lower()) + 2\n                if shifted_ord > ord('z'):\n                    shifted_ord -= 26\n                shifted_char = chr(shifted_ord)\n                shifted_char = shifted_char.upper() if ch.islower() else shifted_char.lower()\n                result.append(shifted_char.swapcase())\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    shift_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if ch in vowels:\n                swapped = shift_map[ch]\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    shift_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch_swapped = ch.swapcase()\n            if ch in vowels:\n                ch_swapped = shift_map[ch]\n            result.append(ch_swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n\n    def replace_vowel(ch):\n        if ch in vowels:\n            base = ord('A') if ch.isupper() else ord('a')\n            pos = ord(ch.lower()) - ord('a')\n            new_pos = (pos + 2) % 26\n            new_char = chr(base + new_pos)\n            return new_char.upper() if ch.isupper() else new_char\n        else:\n            return ch.swapcase()\n    return ''.join((replace_vowel(c) for c in message))", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    shift_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            if ch in vowels:\n                new_ch = shift_map[ch]\n            else:\n                new_ch = ch.swapcase()\n            result.append(new_ch)\n        else:\n            result.append(ch)\n    return ''.join(result)"], "outputs": "[['TgST'], ['tHkS kS c MgSScGg'], ['CGKQWcgkqw'], ['BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'], [''], ['c'], ['G'], ['XYZxyz']]", "probability": 0.25, "is_align_req": 0, "test_consistency": 0.0, "failed_input_output_examples": "[[['test'], ['TgST'], ['TGST']], [['This is a message'], ['tHkS kS c MgSScGg'], ['tHKS KS C MGSSCGG']]]"}, {"programs_str": ["def encode(message: str) -> str:\n    vowels = 'aeiou'\n    vowels_set = set(vowels)\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels_set:\n                base = ord('a') if ch.islower() else ord('A')\n                pos = ord(ch.lower()) - ord('a')\n                new_pos = (pos + 2) % 26\n                new_char = chr(ord('a') + new_pos)\n                ch = new_char.swapcase()\n            else:\n                ch = ch.swapcase()\n        else:\n            ch = ch\n        result.append(ch)\n    return ''.join(result)"], "outputs": "[['TGST'], ['tHKS KS C MGSSCGG'], ['CGKQWCGKQW'], ['BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'], [''], ['C'], ['G'], ['XYZxyz']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\n    def replace_vowel(c: str) -> str:\n        if c in vowels:\n            base = ord('a') if c.islower() else ord('A')\n            pos = ord(c.lower()) - base\n            new_pos = (pos + 2) % 26\n            new_c = chr(base + new_pos)\n            return new_c.upper() if c.islower() else new_c.upper()\n        else:\n            return c.swapcase()\n    result = ''.join((replace_vowel(c) for c in message))\n    return result"], "outputs": "[['TGST'], ['tHKS KS C MGSSCGG'], ['IMQWCCGKQW'], ['BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'], [''], ['C'], ['M'], ['XYZxyz']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6680801271869059, "llm_generated_inputs": "[['test'], ['This is a message'], ['AEIOUaeiou'], ['bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'], [''], ['a'], ['E'], ['xyzXYZ']]", "input_output_examples": "[[['test'], ['This is a message']], [['TGST'], ['tHKS KS C MGSSCGG']]]", "weighted_test_consistency": 0.75, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def encode(message: str) -> str:\n    \"\"\"\n    Encode the input message by performing the following transformations on each character:\n    1. Swap the case of all alphabetic letters (uppercase to lowercase, lowercase to uppercase).\n    2. After swapping case, if the resulting character is a vowel (a, e, i, o, u in lowercase or uppercase),\n       replace it with the letter that appears 2 positions ahead of it in the English alphabet, \n       preserving the case of the swapped character.\n       - The alphabet is considered circular, so after 'z' comes 'a', and after 'Z' comes 'A'.\n    3. Non-alphabetic characters remain unchanged.\n\n    Assumptions:\n    - The input message contains only letters and possibly other characters.\n    - The vowel replacement is applied after case swapping.\n\n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    >>> encode('AEIOUaeiou')\n    'cgkqwCGKQW'\n    \"\"\"", "entry_point": "encode", "cluster_list": [{"programs_str": ["def encode(message: str) -> str:\n\n    def shift_char(c: str, shift: int) -> str:\n        if c.isupper():\n            base = ord('A')\n            return chr((ord(c) - base + shift) % 26 + base)\n        else:\n            base = ord('a')\n            return chr((ord(c) - base + shift) % 26 + base)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                swapped = shift_char(swapped, 2)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels_lower = {'a', 'e', 'i', 'o', 'u'}\n    vowels_upper = {'A', 'E', 'I', 'O', 'U'}\n\n    def shift_char(c):\n        if c.islower():\n            base = ord('a')\n            return chr((ord(c) - base + 2) % 26 + base)\n        else:\n            base = ord('A')\n            return chr((ord(c) - base + 2) % 26 + base)\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels_lower or swapped in vowels_upper:\n                swapped = shift_char(swapped)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels_lower = {'a', 'e', 'i', 'o', 'u'}\n    vowels_upper = {'A', 'E', 'I', 'O', 'U'}\n\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels_lower or swapped in vowels_upper:\n                swapped = shift_char(swapped)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c: str, n: int) -> str:\n        if c.islower():\n            base = ord('a')\n            return chr((ord(c) - base + n) % 26 + base)\n        else:\n            base = ord('A')\n            return chr((ord(c) - base + n) % 26 + base)\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels:\n                replaced = shift_char(swapped, 2)\n                result.append(replaced)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels_lower = {'a', 'e', 'i', 'o', 'u'}\n    vowels_upper = {'A', 'E', 'I', 'O', 'U'}\n\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels_lower or swapped in vowels_upper:\n                swapped = shift_char(swapped)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c: str) -> str:\n        if c.islower():\n            base = ord('a')\n            return chr(base + (ord(c) - base + 2) % 26)\n        else:\n            base = ord('A')\n            return chr(base + (ord(c) - base + 2) % 26)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                swapped = shift_char(swapped)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_letter(ch: str, steps: int) -> str:\n        if ch.islower():\n            base = ord('a')\n            return chr((ord(ch) - base + steps) % 26 + base)\n        else:\n            base = ord('A')\n            return chr((ord(ch) - base + steps) % 26 + base)\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels:\n                swapped = shift_letter(swapped, 2)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels_lower = {'a', 'e', 'i', 'o', 'u'}\n    vowels_upper = {'A', 'E', 'I', 'O', 'U'}\n\n    def shift_char(c: str) -> str:\n        if not c.isalpha():\n            return c\n        if c.islower():\n            base = ord('a')\n            offset = (ord(c) - base + 2) % 26\n            return chr(base + offset)\n        else:\n            base = ord('A')\n            offset = (ord(c) - base + 2) % 26\n            return chr(base + offset)\n    result_chars = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.lower() if ch.isupper() else ch.upper()\n            if swapped in vowels_lower or swapped in vowels_upper:\n                swapped = shift_char(swapped)\n            result_chars.append(swapped)\n        else:\n            result_chars.append(ch)\n    return ''.join(result_chars)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    def shift_char(c):\n        if c.isalpha():\n            offset = 65 if c.isupper() else 97\n            return chr((ord(c) - offset + 2) % 26 + offset)\n        return c\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.lower() if ch.isupper() else ch.upper()\n            if swapped.lower() in vowels:\n                swapped = shift_char(swapped)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.lower() if ch.isupper() else ch.upper()\n            if swapped in vowels:\n                if swapped.islower():\n                    base = ord('a')\n                    offset = (ord(swapped) - base + 2) % 26\n                    new_char = chr(base + offset)\n                else:\n                    base = ord('A')\n                    offset = (ord(swapped) - base + 2) % 26\n                    new_char = chr(base + offset)\n                result.append(new_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels_lower = {'a', 'e', 'i', 'o', 'u'}\n    vowels_upper = {'A', 'E', 'I', 'O', 'U'}\n\n    def shift_char(c):\n        if c.isalpha():\n            if c.islower():\n                base = ord('a')\n                offset = ord(c) - base\n                offset = (offset + 2) % 26\n                return chr(base + offset)\n            else:\n                base = ord('A')\n                offset = ord(c) - base\n                offset = (offset + 2) % 26\n                return chr(base + offset)\n        else:\n            return c\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels_lower or swapped in vowels_upper:\n                replaced = shift_char(swapped)\n                result.append(replaced)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    def shift_char(c: str) -> str:\n        if c.isalpha():\n            c_swapped = c.swapcase()\n            if c_swapped.lower() in vowels:\n                if c_swapped.islower():\n                    start = ord('a')\n                else:\n                    start = ord('A')\n                offset = (ord(c_swapped) - start + 2) % 26\n                return chr(start + offset)\n            else:\n                return c_swapped\n        else:\n            return c\n    return ''.join((shift_char(ch) for ch in message))", "def encode(message: str) -> str:\n    vowels_lower = {'a', 'e', 'i', 'o', 'u'}\n    vowels_upper = {'A', 'E', 'I', 'O', 'U'}\n\n    def shift_char(c: str) -> str:\n        if not c.isalpha():\n            return c\n        c_swapped = c.swapcase()\n        if c_swapped in vowels_lower or c_swapped in vowels_upper:\n            is_upper = c_swapped.isupper()\n            base = ord('A') if is_upper else ord('a')\n            pos = ord(c_swapped) - base\n            pos = (pos + 2) % 26\n            c_swapped = chr(base + pos)\n        return c_swapped\n    return ''.join((shift_char(c) for c in message))", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\n    def shift_char(c):\n        if c.isalpha():\n            swapped = c.swapcase()\n            if swapped in vowels:\n                if swapped.islower():\n                    base = ord('a')\n                else:\n                    base = ord('A')\n                pos = ord(swapped) - base\n                pos = (pos + 2) % 26\n                return chr(base + pos)\n            else:\n                return swapped\n        else:\n            return c\n    return ''.join((shift_char(c) for c in message))", "def encode(message: str) -> str:\n\n    def shift_char(c: str) -> str:\n        if c.islower():\n            base = ord('a')\n            return chr((ord(c) - base + 2) % 26 + base)\n        else:\n            base = ord('A')\n            return chr((ord(c) - base + 2) % 26 + base)\n    vowels_lower = {'a', 'e', 'i', 'o', 'u'}\n    vowels_upper = {'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels_lower or swapped in vowels_upper:\n                swapped = shift_char(swapped)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels_lower = {'a', 'e', 'i', 'o', 'u'}\n    vowels_upper = {'A', 'E', 'I', 'O', 'U'}\n\n    def shift_char(c: str) -> str:\n        if c.islower():\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        else:\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.lower() if ch.isupper() else ch.upper()\n            if swapped in vowels_lower or swapped in vowels_upper:\n                swapped = shift_char(swapped)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_letter(ch: str, n: int) -> str:\n        if ch.islower():\n            base = ord('a')\n            return chr((ord(ch) - base + n) % 26 + base)\n        else:\n            base = ord('A')\n            return chr((ord(ch) - base + n) % 26 + base)\n    vowels = set('aeiouAEIOU')\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels:\n                swapped = shift_letter(swapped, 2)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    def shift_char(c):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + 2) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + 2) % 26 + ord('A'))\n        else:\n            return c\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.lower() if ch.isupper() else ch.upper()\n            if swapped.lower() in vowels:\n                swapped = shift_char(swapped)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                is_upper = swapped.isupper()\n                base = ord('A') if is_upper else ord('a')\n                offset = (ord(swapped) - base + 2) % 26\n                new_char = chr(base + offset)\n                result.append(new_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c, n):\n        if c.islower():\n            base = ord('a')\n            return chr((ord(c) - base + n) % 26 + base)\n        else:\n            base = ord('A')\n            return chr((ord(c) - base + n) % 26 + base)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.lower() if ch.isupper() else ch.upper()\n            if swapped.lower() in vowels:\n                swapped = shift_char(swapped, 2)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)"], "outputs": "[['TGST'], ['tHKS KS C MGSSCGG'], ['cgkqwCGKQW'], ['BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'], [''], ['C'], ['g'], ['XYZxyz']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['test'], ['This is a message'], ['AEIOUaeiou'], ['bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'], [''], ['a'], ['E'], ['xyzXYZ']]", "input_output_examples": "[[['test'], ['This is a message']], [['TGST'], ['tHKS KS C MGSSCGG']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.8144776119402983, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.6680801271869059, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/94", "original_requirement": "from typing import List\n\n\ndef skjkasdkd(lst: List[int]) -> int:\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef skjkasdkd(lst: List[int]) -> int:\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"", "entry_point": "skjkasdkd", "cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.isqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [num for num in lst if is_prime(num)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.isqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    largest_prime = None\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n    if largest_prime is None:\n        return 0\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))"], "outputs": "[[10], [25], [13], [11], [3], [7], [0], [0], [2], [0], [47], [0], [7]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]], [[]], [[4, 6, 8, 10, 12, 14]], [[2]], [[1]], [[999983, 3, 5, 11, 7]], [[0, 1, 4, 6, 8, 9, 10, 12, 15]], [[13, 17, 19, 23, 29, 31, 37, 41, 43]]]", "input_output_examples": "[[[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]]], [[10], [25], [13], [11], [3], [7]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/95", "original_requirement": "from typing import Dict\n\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Dict\n\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"", "entry_point": "check_dict_case", "cluster_list": [{"programs_str": ["from typing import Any, Dict\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Any, Dict\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Any, Dict\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(d: Dict[Any, Any]) -> bool:\n    if not d:\n        return False\n    keys = d.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    keys_are_lower = all((k.islower() for k in keys))\n    keys_are_upper = all((k.isupper() for k in keys))\n    return keys_are_lower or keys_are_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper"], "outputs": "[[True], [False], [False], [False], [True], [False], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{'a': 'apple', 'b': 'banana'}], [{'a': 'apple', 'A': 'banana', 'B': 'banana'}], [{'a': 'apple', 8: 'banana'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'STATE': 'NC', 'ZIP': '12345'}], [{}], [{'apple': 'fruit', 'banana': 'fruit', 'cherry': 'fruit'}], [{'APPLE': 'fruit', 'BANANA': 'fruit', 'CHERRY': 'fruit'}], [{'Apple': 'fruit', 'Banana': 'fruit', 'Cherry': 'fruit'}], [{1: 'one', 2: 'two', 3: 'three'}]]", "input_output_examples": "[[[{'a': 'apple', 'b': 'banana'}], [{'a': 'apple', 'A': 'banana', 'B': 'banana'}], [{'a': 'apple', 8: 'banana'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'STATE': 'NC', 'ZIP': '12345'}]], [[True], [False], [False], [False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/96", "original_requirement": "from typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"", "entry_point": "count_up_to", "cluster_list": [{"programs_str": ["from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n    if n <= 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x <= 1:\n            return False\n        if x <= 3:\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        for i in range(3, int(x ** 0.5) + 1, 2):\n            if x % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(math.isqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.isqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    result = []\n    for val in range(2, n):\n        if is_prime(val):\n            result.append(val)\n    return result", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.isqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        limit = int(math.sqrt(num)) + 1\n        for i in range(3, limit, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num <= 1:\n            return False\n        if num <= 3:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(math.isqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]"], "outputs": "[[[2, 3]], [[2, 3, 5, 7]], [[]], [[2, 3, 5, 7, 11, 13, 17, 19]], [[]], [[2, 3, 5, 7, 11, 13, 17]], [[]], [[2]], [[2, 3]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], [[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5], [11], [0], [20], [1], [18], [2], [3], [4], [30], [50]]", "input_output_examples": "[[[5], [11], [0], [20], [1], [18]], [[[2, 3]], [[2, 3, 5, 7]], [[]], [[2, 3, 5, 7, 11, 13, 17, 19]], [[]], [[2, 3, 5, 7, 11, 13, 17]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/97", "original_requirement": "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "entry_point": "multiply", "cluster_list": [{"programs_str": ["def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)"], "outputs": "[[16], [72], [0], [20], [0], [21], [0], [81], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[148, 412], [19, 28], [2020, 1851], [14, -15], [0, 123], [-7, -3], [100000, 200000], [9, 9], [1, 0]]", "input_output_examples": "[[[148, 412], [19, 28], [2020, 1851], [14, -15]], [[16], [72], [0], [20]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/98", "original_requirement": "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"", "entry_point": "count_upper", "cluster_list": [{"programs_str": ["def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"], "outputs": "[[1], [0], [0], [0], [3], [0], [2], [5], [0], [5]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['aBCdEf'], ['abcdefg'], ['dBBE'], [''], ['AEIOU'], ['aEiOu'], ['AeiOU'], ['AaEeIiOoUu'], ['XYZ'], ['A1E2I3O4U5']]", "input_output_examples": "[[['aBCdEf'], ['abcdefg'], ['dBBE']], [[1], [0], [0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/99", "original_requirement": "def closest_integer(value: str) -> int:\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''", "repaired_requirement": "def closest_integer(value: str) -> int:\n    \"\"\"\n    Convert the input string representing a decimal number to the closest integer,\n    rounding according to the following rules:\n\n    1. Parse the input string as a floating-point number.\n\n    2. Determine the fractional part as the absolute difference between the number and its integer part\n       obtained by truncation toward zero (i.e., simply casting to int).\n\n    3. Rounding rules:\n       - If the fractional part is less than 0.5, round toward zero by returning the truncated integer part.\n         For example:\n           \"15.3\" -> 15\n           \"-3.4999999999999\" -> -3\n       - If the fractional part is exactly 0.5 or greater than 0.5, round away from zero:\n         * For positive numbers, round up to the next integer greater than the truncated integer part.\n           For example:\n             \"14.5\" -> 15\n             \"15.7\" -> 16\n         * For negative numbers, round down to the next integer less than the truncated integer part.\n           For example:\n             \"-14.5\" -> -15\n             \"-15.7\" -> -16\n\n    Notes:\n    - The integer part is always obtained by truncation toward zero (casting float to int).\n    - The fractional part is always computed as the absolute difference between the number and its truncated integer part.\n    - This rounding differs from floor or ceiling rounding; it is symmetric around zero.\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    >>> closest_integer(\"-3.4999999999999\")\n    -3\n    \"\"\"", "original_clusters": {"requirement": "def closest_integer(value: str) -> int:\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''", "entry_point": "closest_integer", "cluster_list": [{"programs_str": ["def closest_integer(value: str) -> int:\n    num = float(value)\n    if num > 0:\n        if num - int(num) == 0.5:\n            return int(num) + 1\n        else:\n            return round(num)\n    elif num < 0:\n        if abs(num - int(num)) == 0.5:\n            return int(num) - 1\n        else:\n            return round(num)\n    else:\n        return 0", "from math import modf\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    frac, whole = modf(num)\n    if abs(frac) != 0.5:\n        return round(num)\n    elif num > 0:\n        return int(whole) + 1\n    else:\n        return int(whole) - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    import math\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(ceil_val - num)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    lower = floor(num)\n    upper = ceil(num)\n    if abs(num - lower) < abs(upper - num):\n        return lower\n    elif abs(num - lower) > abs(upper - num):\n        return upper\n    elif num > 0:\n        return upper\n    else:\n        return lower", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    dist_floor = abs(num - floor_val)\n    dist_ceil = abs(ceil_val - num)\n    if dist_floor < dist_ceil:\n        return floor_val\n    elif dist_ceil < dist_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(num - ceil_val)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "def closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = int(num // 1)\n    ceil_val = floor_val + 1\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(ceil_val - num)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    fl = floor(num)\n    ce = ceil(num)\n    dist_to_floor = abs(num - fl)\n    dist_to_ceil = abs(ce - num)\n    if dist_to_floor < dist_to_ceil:\n        return fl\n    elif dist_to_floor > dist_to_ceil:\n        return ce\n    else:\n        return ce if num > 0 else fl", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    dist_floor = abs(num - floor_val)\n    dist_ceil = abs(ceil_val - num)\n    if dist_floor < dist_ceil:\n        return floor_val\n    if dist_ceil < dist_floor:\n        return ceil_val\n    if num > 0:\n        return ceil_val\n    else:\n        return floor_val", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_num = math.floor(num)\n    ceil_num = math.ceil(num)\n    dist_floor = abs(num - floor_num)\n    dist_ceil = abs(ceil_num - num)\n    if dist_floor == dist_ceil:\n        return ceil_num if num > 0 else floor_num\n    return round(num)", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_num = math.floor(num)\n    ceil_num = math.ceil(num)\n    dist_floor = abs(num - floor_num)\n    dist_ceil = abs(ceil_num - num)\n    if dist_floor < dist_ceil:\n        return floor_num\n    elif dist_ceil < dist_floor:\n        return ceil_num\n    elif num > 0:\n        return ceil_num\n    else:\n        return floor_num", "def closest_integer(value: str) -> int:\n    num = float(value)\n    lower = int(num // 1)\n    upper = lower + 1\n    dist_lower = abs(num - lower)\n    dist_upper = abs(upper - num)\n    if dist_lower < dist_upper:\n        return lower\n    elif dist_upper < dist_lower:\n        return upper\n    else:\n        return upper if num > 0 else lower", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(ceil_val - num)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "def closest_integer(value: str) -> int:\n    num = float(value)\n    if num > 0:\n        return int(num + 0.5)\n    elif num < 0:\n        return int(num - 0.5)\n    else:\n        return 0", "def closest_integer(value: str) -> int:\n    num = float(value)\n    floor_num = int(num // 1)\n    ceil_num = floor_num + 1\n    dist_floor = abs(num - floor_num)\n    dist_ceil = abs(ceil_num - num)\n    if dist_floor < dist_ceil:\n        return floor_num\n    elif dist_floor > dist_ceil:\n        return ceil_num\n    elif num > 0:\n        return ceil_num\n    else:\n        return floor_num", "def closest_integer(value: str) -> int:\n    number = float(value)\n    import math\n    floor_val = math.floor(number)\n    ceil_val = math.ceil(number)\n    dist_floor = abs(number - floor_val)\n    dist_ceil = abs(ceil_val - number)\n    if dist_floor < dist_ceil:\n        return floor_val\n    elif dist_ceil < dist_floor:\n        return ceil_val\n    elif number > 0:\n        return ceil_val\n    else:\n        return floor_val", "def closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = int(num // 1)\n    diff = num - floor_val\n    if diff < 0.5:\n        return floor_val\n    if diff > 0.5:\n        return floor_val + 1\n    if num > 0:\n        return floor_val + 1\n    else:\n        return floor_val", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(num - ceil_val)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val"], "outputs": "[[10], [15], [15], [-15], [1], [-1], [0], [0], [123456790], [-123456790], [1000000000000000], [-1000000000000000], [3], [-3]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = int(num // 1)\n    diff = num - floor_val\n    if diff < 0.5:\n        return floor_val\n    elif diff > 0.5:\n        return floor_val + 1\n    elif num > 0:\n        return floor_val + 1\n    else:\n        return floor_val - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = int(num // 1)\n    ceil_val = floor_val + 1\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(ceil_val - num)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val - 1"], "outputs": "[[10], [15], [15], [-16], [1], [-2], [0], [0], [123456790], [-123456791], [1000000000000000], [-1000000000000001], [3], [-3]]", "probability": 0.1, "is_align_req": 0, "test_consistency": 0.75, "failed_input_output_examples": "[[['-14.5'], [-16], [-15]]]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[['10'], ['15.3'], ['14.5'], ['-14.5'], ['0.5'], ['-0.5'], ['0'], ['-0'], ['123456789.5'], ['-123456789.5'], ['999999999999999.5'], ['-999999999999999.5'], ['3.4999999999999'], ['-3.4999999999999']]", "input_output_examples": "[[['10'], ['15.3'], ['14.5'], ['-14.5']], [[10], [15], [15], [-15]]]", "weighted_test_consistency": 0.9750000000000001, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def closest_integer(value: str) -> int:\n    \"\"\"\n    Convert the input string representing a decimal number to the closest integer,\n    rounding according to the following rules:\n\n    1. Parse the input string as a floating-point number.\n\n    2. Determine the fractional part as the absolute difference between the number and its integer part\n       obtained by truncation toward zero (i.e., simply casting to int).\n\n    3. Rounding rules:\n       - If the fractional part is less than 0.5, round toward zero by returning the truncated integer part.\n         For example:\n           \"15.3\" -> 15\n           \"-3.4999999999999\" -> -3\n       - If the fractional part is exactly 0.5 or greater than 0.5, round away from zero:\n         * For positive numbers, round up to the next integer greater than the truncated integer part.\n           For example:\n             \"14.5\" -> 15\n             \"15.7\" -> 16\n         * For negative numbers, round down to the next integer less than the truncated integer part.\n           For example:\n             \"-14.5\" -> -15\n             \"-15.7\" -> -16\n\n    Notes:\n    - The integer part is always obtained by truncation toward zero (casting float to int).\n    - The fractional part is always computed as the absolute difference between the number and its truncated integer part.\n    - This rounding differs from floor or ceiling rounding; it is symmetric around zero.\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    >>> closest_integer(\"-3.4999999999999\")\n    -3\n    \"\"\"", "entry_point": "closest_integer", "cluster_list": [{"programs_str": ["def closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fractional_part = abs(num - integer_part)\n    if fractional_part < 0.5:\n        return integer_part\n    elif num >= 0:\n        return integer_part + 1\n    else:\n        return integer_part - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    frac = abs(num - truncated)\n    if frac < 0.5:\n        return truncated\n    elif num > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    fractional_part = abs(num - truncated)\n    if fractional_part < 0.5:\n        return truncated\n    elif num > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    number = float(value)\n    truncated = int(number)\n    fractional_part = abs(number - truncated)\n    if fractional_part < 0.5:\n        return truncated\n    elif number > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    x = float(value)\n    truncated = int(x)\n    frac = abs(x - truncated)\n    if frac < 0.5:\n        return truncated\n    elif x > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    fractional = abs(num - truncated)\n    if fractional < 0.5:\n        return truncated\n    elif num >= 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    int_part = int(num)\n    frac_part = abs(num - int_part)\n    if frac_part < 0.5:\n        return int_part\n    elif num >= 0:\n        return int_part + 1\n    else:\n        return int_part - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    fractional = abs(num - truncated)\n    if fractional < 0.5:\n        return truncated\n    elif num > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    int_part = int(num)\n    frac_part = abs(num - int_part)\n    if frac_part < 0.5:\n        return int_part\n    elif num >= 0:\n        return int_part + 1\n    else:\n        return int_part - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    fractional_part = abs(num - truncated)\n    if fractional_part < 0.5:\n        return truncated\n    elif num > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    frac = abs(num - truncated)\n    if frac < 0.5:\n        return truncated\n    elif num > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    fractional = abs(num - truncated)\n    if fractional < 0.5:\n        return truncated\n    elif num > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    frac_part = abs(num - truncated)\n    if frac_part < 0.5:\n        return truncated\n    elif num > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    fractional = abs(num - truncated)\n    if fractional < 0.5:\n        return truncated\n    elif num > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    number = float(value)\n    truncated = int(number)\n    fractional = abs(number - truncated)\n    if fractional < 0.5:\n        return truncated\n    elif number >= 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    x = float(value)\n    truncated = int(x)\n    fractional = abs(x - truncated)\n    if fractional < 0.5:\n        return truncated\n    elif x > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    frac = abs(num - truncated)\n    if frac < 0.5:\n        return truncated\n    elif num > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    number = float(value)\n    truncated = int(number)\n    fractional = abs(number - truncated)\n    if fractional < 0.5:\n        return truncated\n    elif number >= 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    truncated = int(num)\n    frac_part = abs(num - truncated)\n    if frac_part < 0.5:\n        return truncated\n    elif num > 0:\n        return truncated + 1\n    else:\n        return truncated - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    int_part = int(num)\n    frac_part = abs(num - int_part)\n    if frac_part < 0.5:\n        return int_part\n    elif num > 0:\n        return int_part + 1\n    else:\n        return int_part - 1"], "outputs": "[[10], [15], [15], [-15], [1], [-1], [0], [0], [123456790], [-123456790], [1000000000000000], [-1000000000000000], [3], [-3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['10'], ['15.3'], ['14.5'], ['-14.5'], ['0.5'], ['-0.5'], ['0'], ['-0'], ['123456789.5'], ['-123456789.5'], ['999999999999999.5'], ['-999999999999999.5'], ['3.4999999999999'], ['-3.4999999999999']]", "input_output_examples": "[[['10'], ['15.3'], ['14.5'], ['-14.5']], [[10], [15], [15], [-15]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.9727272727272727, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.46899559358928117, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
