{"task_id": "HumanEval/0", "original_requirement": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"", "entry_point": "has_close_elements", "cluster_list": [{"programs_str": ["from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i + 1] - sorted_numbers[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers = sorted(numbers)\n    for i in range(1, len(numbers)):\n        if abs(numbers[i] - numbers[i - 1]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(1, len(numbers_sorted)):\n        if numbers_sorted[i] - numbers_sorted[i - 1] < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i + 1] - sorted_numbers[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    if len(numbers) < 2:\n        return False\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i] - numbers_sorted[i + 1]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(1, len(numbers_sorted)):\n        if numbers_sorted[i] - numbers_sorted[i - 1] < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    sorted_numbers = sorted(numbers)\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i + 1] - sorted_numbers[i]) < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if numbers_sorted[i + 1] - numbers_sorted[i] < threshold:\n            return True\n    return False", "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    numbers_sorted = sorted(numbers)\n    for i in range(len(numbers_sorted) - 1):\n        if abs(numbers_sorted[i + 1] - numbers_sorted[i]) < threshold:\n            return True\n    return False"], "outputs": "[[False], [True], [False], [False], [True], [True], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1.0, 2.0, 3.0], 0.5], [[1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3], [[], 1.0], [[1.0], 0.5], [[1.0, 1.0], 0.1], [[1.0, 1.05, 2.0, 3.0], 0.1], [[1.0, 1.15, 2.0, 3.0], 0.1], [[-1.0, 0.0, 1.0, 1.1], 0.15], [[0.0, 0.0001, 0.0002], 5e-05]]", "input_output_examples": "[[[[1.0, 2.0, 3.0], 0.5], [[1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3]], [[False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/1", "original_requirement": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"", "entry_point": "separate_paren_groups", "cluster_list": [{"programs_str": ["from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    s = paren_string.replace(' ', '')\n    result = []\n    balance = 0\n    start = 0\n    for i, ch in enumerate(s):\n        if ch == '(':\n            if balance == 0:\n                start = i\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n            if balance == 0:\n                result.append(s[start:i + 1])\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    current = []\n    balance = 0\n    for char in paren_string:\n        current.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n            if balance == 0:\n                result.append(''.join(current))\n                current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    s = paren_string.replace(' ', '')\n    result = []\n    current = []\n    balance = 0\n    for ch in s:\n        current.append(ch)\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n            if balance == 0:\n                result.append(''.join(current))\n                current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current = []\n    balance = 0\n    for char in paren_string:\n        current.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current:\n            groups.append(''.join(current))\n            current = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = []\n    balance = 0\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n        if balance == 0 and current_group:\n            groups.append(''.join(current_group))\n            current_group = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    balance = 0\n    current_group = []\n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    cleaned = paren_string.replace(' ', '')\n    result = []\n    current = []\n    balance = 0\n    for ch in cleaned:\n        current.append(ch)\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n            if balance == 0:\n                result.append(''.join(current))\n                current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    cleaned = paren_string.replace(' ', '')\n    result = []\n    current = []\n    balance = 0\n    for ch in cleaned:\n        current.append(ch)\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n            if balance == 0:\n                result.append(''.join(current))\n                current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    s = paren_string.replace(' ', '')\n    result = []\n    current = []\n    balance = 0\n    for ch in s:\n        current.append(ch)\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n            if balance == 0:\n                result.append(''.join(current))\n                current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    balance = 0\n    current_group = []\n    for char in paren_string:\n        current_group.append(char)\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        if balance == 0 and current_group:\n            result.append(''.join(current_group))\n            current_group = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    s = paren_string.replace(' ', '')\n    result = []\n    balance = 0\n    current = []\n    for ch in s:\n        current.append(ch)\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n            if balance == 0:\n                result.append(''.join(current))\n                current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    s = paren_string.replace(' ', '')\n    groups = []\n    current = []\n    balance = 0\n    for char in s:\n        current.append(char)\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n            if balance == 0:\n                groups.append(''.join(current))\n                current = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    current = []\n    balance = 0\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current.append(char)\n        elif char == ')':\n            current.append(char)\n            balance -= 1\n            if balance == 0:\n                result.append(''.join(current))\n                current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    current = ''\n    balance = 0\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        current += char\n        if balance == 0 and current:\n            result.append(current)\n            current = ''\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    filtered = paren_string.replace(' ', '')\n    result = []\n    current = []\n    depth = 0\n    for ch in filtered:\n        current.append(ch)\n        if ch == '(':\n            depth += 1\n        elif ch == ')':\n            depth -= 1\n            if depth == 0:\n                result.append(''.join(current))\n                current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current = []\n    balance = 0\n    for ch in paren_string:\n        current.append(ch)\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n        if balance == 0 and current:\n            groups.append(''.join(current))\n            current = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    current = []\n    balance = 0\n    for ch in paren_string:\n        if ch == '(':\n            balance += 1\n        elif ch == ')':\n            balance -= 1\n        current.append(ch)\n        if balance == 0 and current:\n            result.append(''.join(current))\n            current = []\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    group = ''\n    balance = 0\n    for char in paren_string:\n        group += char\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n            if balance == 0:\n                result.append(group)\n                group = ''\n    return result", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    groups = []\n    current_group = []\n    balance = 0\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n            current_group.append(char)\n        elif char == ')':\n            balance -= 1\n            current_group.append(char)\n        if balance == 0 and current_group:\n            groups.append(''.join(current_group))\n            current_group = []\n    return groups", "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(' ', '')\n    result = []\n    current = ''\n    balance = 0\n    for char in paren_string:\n        if char == '(':\n            balance += 1\n        elif char == ')':\n            balance -= 1\n        current += char\n        if balance == 0 and current:\n            result.append(current)\n            current = ''\n    return result"], "outputs": "[[['()', '(())', '(()())']], [['()']], [['(())']], [['()', '(())', '()', '((()))']], [['()', '(())', '(()())']], [[]], [[]], [['()', '()', '()']], [['((()))', '(()())', '(())']], [['(())', '(()(()))']], [['(()(()()))']], [['((((()))))']], [['()', '()', '(()()())', '((()))']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['( ) (( )) (( )( ))'], ['()'], ['(())'], ['() (()) ()((()))'], ['    ( )    ((  ))   ((  )(  ))   '], [''], ['   '], ['()()()'], ['((()))(()())(())'], ['(( )) (( )( ()))'], ['(( ) (()()))'], ['( ( ( ( () ) ) ) )'], ['() ()(() ()())((()))']]", "input_output_examples": "[[['( ) (( )) (( )( ))']], [[['()', '(())', '(()())']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/2", "original_requirement": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"", "entry_point": "truncate_number", "cluster_list": [{"programs_str": ["def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    decimal_part = number - integer_part\n    return decimal_part", "def truncate_number(number: float) -> float:\n    return number - int(number)", "def truncate_number(number: float) -> float:\n    integer_part = int(number)\n    return number - integer_part"], "outputs": "[[0.5], [0.0], [0.99], [1.0000000000065512e-05], [0.7890119999938179], [0.999999], [0.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3.5], [0.0], [1.99], [2.00001], [123456.789012], [0.999999], [10.0]]", "input_output_examples": "[[[3.5]], [[0.5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/3", "original_requirement": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"", "entry_point": "below_zero", "cluster_list": [{"programs_str": ["from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False", "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n    return False"], "outputs": "[[False], [True], [True], [False], [False], [True], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[1, 2, -4, 5]], [[-1]], [[0]], [[]], [[10, -5, -6]], [[5, -3, -2, 1]], [[1, -1, 1, -1]], [[100, -50, -40, -10]], [[1, 1, 1, -3]]]", "input_output_examples": "[[[[1, 2, 3]], [[1, 2, -4, 5]]], [[False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/4", "original_requirement": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the Mean Absolute Deviation (MAD) of a list of numbers around their mean.\n\n    The Mean Absolute Deviation is defined as the average of the absolute differences \n    between each element in the list and the mean of the list.\n\n    Parameters:\n    numbers (List[float]): A non-empty list of floating-point numbers.\n\n    Returns:\n    float: The mean absolute deviation of the input numbers.\n\n    Raises:\n    ZeroDivisionError: If the input list is empty.\n\n    Example:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"", "entry_point": "mean_absolute_deviation", "cluster_list": [{"programs_str": ["from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean_val = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean_val) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    absolute_differences = [abs(x - mean) for x in numbers]\n    return sum(absolute_differences) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)"], "outputs": "[[1.0], [0.0], [0.0], [1.0], [1.0], [0.0], ['ZeroDivisionError'], [0.6666666666666666], [666.6666666666666], [2.25]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers) if numbers else 0.0\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers) if numbers else 0.0\n    return mad"], "outputs": "[[1.0], [0.0], [0.0], [1.0], [1.0], [0.0], [0.0], [0.6666666666666666], [666.6666666666666], [2.25]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[[1.0, 2.0, 3.0, 4.0]], [[5.0, 5.0, 5.0, 5.0]], [[0.0, 0.0, 0.0]], [[1.5, 2.5, 3.5, 4.5]], [[-1.0, -2.0, -3.0, -4.0]], [[1.0]], [[]], [[1000000.0, 1000001.0, 999999.0]], [[-1000.0, 0.0, 1000.0]], [[2.0, 2.0, 2.0, 8.0]]]", "input_output_examples": "[[[[1.0, 2.0, 3.0, 4.0]]], [[1.0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculate the Mean Absolute Deviation (MAD) of a list of numbers around their mean.\n\n    The Mean Absolute Deviation is defined as the average of the absolute differences \n    between each element in the list and the mean of the list.\n\n    Parameters:\n    numbers (List[float]): A non-empty list of floating-point numbers.\n\n    Returns:\n    float: The mean absolute deviation of the input numbers.\n\n    Raises:\n    ZeroDivisionError: If the input list is empty.\n\n    Example:\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"", "entry_point": "mean_absolute_deviation", "cluster_list": [{"programs_str": ["from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty')\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list must not be empty.')\n    mean_value = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(x - mean_value) for x in numbers]\n    mad = sum(absolute_deviations) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty.')\n    mean_value = sum(numbers) / len(numbers)\n    return sum((abs(x - mean_value) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty.')\n    mean_value = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean_value) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty')\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty')\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty')\n    mean_value = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean_value) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('The input list is empty.')\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty')\n    mean_value = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean_value) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty')\n    mean_value = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean_value) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty')\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty, cannot compute mean absolute deviation.')\n    mean_value = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean_value) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty.')\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('The input list is empty.')\n    mean_value = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean_value) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty.')\n    mean_value = sum(numbers) / len(numbers)\n    return sum((abs(x - mean_value) for x in numbers)) / len(numbers)", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty.')\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list cannot be empty.')\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('The input list is empty.')\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('Input list is empty.')\n    mean = sum(numbers) / len(numbers)\n    mad = sum((abs(x - mean) for x in numbers)) / len(numbers)\n    return mad", "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ZeroDivisionError('The input list is empty.')\n    mean = sum(numbers) / len(numbers)\n    return sum((abs(x - mean) for x in numbers)) / len(numbers)"], "outputs": "[[1.0], [0.0], [0.0], [1.0], [1.0], [0.0], ['ZeroDivisionError'], [0.6666666666666666], [666.6666666666666], [2.25]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1.0, 2.0, 3.0, 4.0]], [[5.0, 5.0, 5.0, 5.0]], [[0.0, 0.0, 0.0]], [[1.5, 2.5, 3.5, 4.5]], [[-1.0, -2.0, -3.0, -4.0]], [[1.0]], [[]], [[1000000.0, 1000001.0, 999999.0]], [[-1000.0, 0.0, 1000.0]], [[2.0, 2.0, 2.0, 8.0]]]", "input_output_examples": "[[[[1.0, 2.0, 3.0, 4.0]]], [[1.0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.2863969571159562, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/5", "original_requirement": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"", "entry_point": "intersperse", "cluster_list": [{"programs_str": ["from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = [numbers[0]]\n    for num in numbers[1:]:\n        result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i != 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        result.append(num)\n        if i != len(numbers) - 1:\n            result.append(delimeter)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result", "from typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    result = []\n    for i, num in enumerate(numbers):\n        if i > 0:\n            result.append(delimeter)\n        result.append(num)\n    return result"], "outputs": "[[[]], [[1, 4, 2, 4, 3]], [[7]], [[0, 1, 0, 1, 0]], [[-1, -9, -2, -9, -3]], [[10, 5, 20, 5, 30, 5, 40]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[], 4], [[1, 2, 3], 4], [[7], 0], [[0, 0, 0], 1], [[-1, -2, -3], -9], [[10, 20, 30, 40], 5], [[], 0]]", "input_output_examples": "[[[[], 4], [[1, 2, 3], 4]], [[[]], [[1, 4, 2, 4, 3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/6", "original_requirement": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"", "entry_point": "parse_nested_parens", "cluster_list": [{"programs_str": ["from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif ch == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    groups = paren_string.split()\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for ch in group:\n            if ch == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif ch == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    results = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        results.append(max_depth)\n    return results", "from typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = paren_string.split()\n    result = []\n    for group in groups:\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                if current_depth > max_depth:\n                    max_depth = current_depth\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result"], "outputs": "[[[2, 3, 1, 3]], [[1]], [[3]], [[3]], [[2, 2, 2]], [[]], [[1, 1, 1, 1, 1]], [[7]], [[1, 4, 3, 3]], [[1, 2, 3, 0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['(()()) ((())) () ((())()())'], ['()'], ['((()))'], ['(()(()))'], ['(()) (()) (())'], [''], ['() () () () ()'], ['((((((()))))))'], ['() (((()))) ((()())) ((()()()))'], ['() (()) ((( )))']]", "input_output_examples": "[[['(()()) ((())) () ((())()())']], [[[2, 3, 1, 3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/7", "original_requirement": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"", "entry_point": "filter_by_substring", "cluster_list": [{"programs_str": ["from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]", "from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [s for s in strings if substring in s]"], "outputs": "[[['hello', 'help']], [['examples']], [[]], [['apple', 'banana', 'cherry']], [['empty']], [['case']], [[]], [['repeat', 'repeated', 'repeats']], [['123', '234']], [['characters$']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['hello', 'world', 'help'], 'hel'], [['test', 'string', 'examples'], 'ex'], [[], 'a'], [['apple', 'banana', 'cherry'], ''], [['', 'empty', 'null'], 'e'], [['case', 'Case', 'CASE'], 'case'], [['a', 'b', 'c'], 'd'], [['repeat', 'repeated', 'repeats'], 'peat'], [['123', '234', '345'], '23'], [['special!@#', 'characters$', 'test'], '$']]", "input_output_examples": "[[[[], 'a'], [['abc', 'bacd', 'cde', 'array'], 'a']], [[[]], [['abc', 'bacd', 'array']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/8", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"", "entry_point": "sum_product", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    product = 1\n    for num in numbers:\n        product *= num\n    return (total_sum, product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    if not numbers:\n        total_product = 1\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s = sum(numbers)\n    p = 1\n    for num in numbers:\n        p *= num\n    return (s, p)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = sum(numbers)\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    s = 0\n    p = 1\n    for num in numbers:\n        s += num\n        p *= num\n    return (s, p)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)", "from typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    total_sum = 0\n    total_product = 1\n    for num in numbers:\n        total_sum += num\n        total_product *= num\n    return (total_sum, total_product)"], "outputs": "[[(0, 1)], [(10, 24)], [(-6, -6)], [(3, 0)], [(5, 5)], [(4, 0)], [(600, 6000000)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[]], [[1, 2, 3, 4]], [[-1, -2, -3]], [[0, 1, 2]], [[5]], [[1, 0, 3, 0]], [[100, 200, 300]]]", "input_output_examples": "[[[[]], [[1, 2, 3, 4]]], [[(0, 1)], [(10, 24)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/9", "original_requirement": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"", "entry_point": "rolling_max", "cluster_list": [{"programs_str": ["from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    result = []\n    for num in numbers:\n        if num > max_so_far:\n            max_so_far = num\n        result.append(max_so_far)\n    return result", "from typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    result = []\n    current_max = float('-inf')\n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    return result"], "outputs": "[[[1, 2, 3, 3, 3, 4, 4]], [[]], [[5]], [[3, 3, 3, 3]], [[-1, -1, -1, -1, -1]], [[10, 10, 10, 20, 20]], [[7, 7, 8, 8, 9, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 2, 3, 4, 2]], [[]], [[5]], [[3, 3, 3, 3]], [[-1, -2, -3, -2, -1]], [[10, 5, 10, 20, 10]], [[7, 7, 8, 6, 9, 9]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]]", "input_output_examples": "[[[[1, 2, 3, 2, 3, 4, 2]]], [[[1, 2, 3, 3, 3, 4, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/10", "original_requirement": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "repaired_requirement": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Given a string, return the shortest palindrome string that starts with the given string as its prefix.\n    \n    The palindrome is constructed by:\n    - Identifying the longest palindromic suffix of the input string.\n    - Appending to the end of the input string the reverse of the prefix substring that precedes this palindromic suffix.\n    \n    This ensures the resulting string begins exactly with the original input string and is the shortest possible palindrome with this property.\n    \n    Examples:\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "original_clusters": {"requirement": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "entry_point": "make_palindrome", "cluster_list": [{"programs_str": ["def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string", "def make_palindrome(string: str) -> str:\n    if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    length = len(string)\n    for i in range(length):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return string\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string[::-1] + string", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if is_palindrome(suffix):\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]"], "outputs": "[[''], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError'], ['NameError']]", "probability": 0.95, "is_align_req": 0, "test_consistency": 0.33333333333333337, "failed_input_output_examples": "[[['cat'], ['NameError'], ['catac']], [['cata'], ['NameError'], ['catac']]]"}, {"programs_str": ["def make_palindrome(string: str) -> str:\n    if not string:\n        return string\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            return string + string[:i][::-1]"], "outputs": "[[''], ['a'], ['aa'], ['aba'], ['catac'], ['catac'], ['abacaba'], ['racecar'], ['level'], ['deified'], ['palindromemordnilap'], ['noon'], ['abcba']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[''], ['a'], ['aa'], ['aba'], ['cat'], ['cata'], ['abac'], ['race'], ['level'], ['deified'], ['palindrome'], ['noon'], ['abcba']]", "input_output_examples": "[[[''], ['cat'], ['cata']], [[''], ['catac'], ['catac']]]", "weighted_test_consistency": 0.3666666666666667, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def make_palindrome(string: str) -> str:\n    \"\"\"\n    Given a string, return the shortest palindrome string that starts with the given string as its prefix.\n    \n    The palindrome is constructed by:\n    - Identifying the longest palindromic suffix of the input string.\n    - Appending to the end of the input string the reverse of the prefix substring that precedes this palindromic suffix.\n    \n    This ensures the resulting string begins exactly with the original input string and is the shortest possible palindrome with this property.\n    \n    Examples:\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"", "entry_point": "make_palindrome", "cluster_list": [{"programs_str": ["def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string[::-1] + string", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n\n    def is_palindrome(s):\n        return s == s[::-1]\n    n = len(string)\n    for i in range(n):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    def is_palindrome(s):\n        return s == s[::-1]\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            return string + string[:i][::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return ''", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            return string + string[:i][::-1]\n    return ''", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            return string + string[:i][::-1]\n    return ''", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n    if not string:\n        return ''\n    for i in range(len(string)):\n        if is_palindrome(string[i:]):\n            prefix_to_add = string[:i][::-1]\n            return string + prefix_to_add\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    n = len(string)\n    for i in range(n):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return string + string[:-1][::-1]", "def make_palindrome(string: str) -> str:\n    if string == '':\n        return ''\n    for i in range(len(string)):\n        suffix = string[i:]\n        if suffix == suffix[::-1]:\n            prefix = string[:i]\n            return string + prefix[::-1]\n    return ''"], "outputs": "[[''], ['a'], ['aa'], ['aba'], ['catac'], ['catac'], ['abacaba'], ['racecar'], ['level'], ['deified'], ['palindromemordnilap'], ['noon'], ['abcba']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['a'], ['aa'], ['aba'], ['cat'], ['cata'], ['abac'], ['race'], ['level'], ['deified'], ['palindrome'], ['noon'], ['abcba']]", "input_output_examples": "[[[''], ['cat'], ['cata']], [[''], ['catac'], ['catac']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.09999999999999998, "original_avg_pass_rate": 0.10229299363057325, "original_nzpassk": true, "original_majority_passk": false, "original_entropy": 0.2863969571159562, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/11", "original_requirement": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"", "entry_point": "string_xor", "cluster_list": [{"programs_str": ["from typing import AnyStr\n\ndef string_xor(a: AnyStr, b: AnyStr) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join(('1' if x != y else '0' for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))", "def string_xor(a: str, b: str) -> str:\n    return ''.join((str(int(x) ^ int(y)) for x, y in zip(a, b)))"], "outputs": "[['100'], ['0'], ['0'], ['1111'], ['111111'], [''], [''], [''], ['11111111'], ['111111111111']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['010', '110'], ['0', '0'], ['1', '1'], ['1111', '0000'], ['101010', '010101'], ['', ''], ['1', ''], ['', '0'], ['00000000', '11111111'], ['111000111000', '000111000111']]", "input_output_examples": "[[['010', '110']], [['100']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/12", "original_requirement": "from typing import List\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"", "entry_point": "longest", "cluster_list": [{"programs_str": ["from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_length:\n            longest_str = s\n            max_length = len(s)\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    max_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            max_str = s\n    return max_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_length:\n            longest_str = s\n            max_length = len(s)\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = strings[0]\n    for s in strings[1:]:\n        if len(s) > len(longest_str):\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_length = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_length:\n            max_length = len(s)\n            longest_str = s\n    return longest_str", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    return max(strings, key=len)", "from typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    max_len = -1\n    longest_str = None\n    for s in strings:\n        if len(s) > max_len:\n            max_len = len(s)\n            longest_str = s\n    return longest_str"], "outputs": "[[None], ['a'], ['ccc'], ['abc'], ['longest'], ['same'], ['equal'], ['single']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[]], [['a', 'b', 'c']], [['a', 'bb', 'ccc']], [['abc', 'def', 'ghi']], [['longest', 'short', 'longest', 'tiny']], [['same', 'size', 'test']], [['equal', 'equal']], [['single']]]", "input_output_examples": "[[[[]], [['a', 'b', 'c']], [['a', 'bb', 'ccc']]], [[None], ['a'], ['ccc']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/13", "original_requirement": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"", "entry_point": "greatest_common_divisor", "cluster_list": [{"programs_str": ["def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)", "def greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = (b, a % b)\n    return abs(a)"], "outputs": "[[1], [5], [5], [5], [0], [13], [6], [6], [6], [6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 5], [25, 15], [0, 5], [5, 0], [0, 0], [13, 13], [270, 192], [-24, 18], [24, -18], [-24, -18]]", "input_output_examples": "[[[3, 5], [25, 15]], [[1], [5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/14", "original_requirement": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"", "entry_point": "all_prefixes", "cluster_list": [{"programs_str": ["from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]", "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    return [string[:i] for i in range(1, len(string) + 1)]"], "outputs": "[[['a', 'ab', 'abc']], [[]], [['a']], [['a', 'ab']], [['h', 'he', 'hel', 'hell', 'hello', 'hello ', 'hello w', 'hello wo', 'hello wor', 'hello worl', 'hello world']], [['1', '12', '123']], [['!', '!@', '!@#']], [['😊', '😊👍']], [['l', 'lo', 'lon', 'long', 'longs', 'longst', 'longstr', 'longstri', 'longstrin', 'longstring', 'longstringw', 'longstringwi', 'longstringwit', 'longstringwith', 'longstringwithm', 'longstringwithmu', 'longstringwithmul', 'longstringwithmult', 'longstringwithmulti', 'longstringwithmultip', 'longstringwithmultipl', 'longstringwithmultiple', 'longstringwithmultiplec', 'longstringwithmultiplech', 'longstringwithmultiplecha', 'longstringwithmultiplechar', 'longstringwithmultiplechara', 'longstringwithmultiplecharac', 'longstringwithmultiplecharact', 'longstringwithmultiplecharacte', 'longstringwithmultiplecharacter', 'longstringwithmultiplecharacters']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abc'], [''], ['a'], ['ab'], ['hello world'], ['123'], ['!@#'], ['😊👍'], ['longstringwithmultiplecharacters']]", "input_output_examples": "[[['abc']], [[['a', 'ab', 'abc']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/15", "original_requirement": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"", "entry_point": "string_sequence", "cluster_list": [{"programs_str": ["def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))", "def string_sequence(n: int) -> str:\n    return ' '.join((str(i) for i in range(n + 1)))"], "outputs": "[['0'], ['0 1'], ['0 1 2 3 4 5'], ['0 1 2 3 4 5 6 7 8 9 10'], ['0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [5], [10], [100]]", "input_output_examples": "[[[0], [5]], [['0'], ['0 1 2 3 4 5']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/16", "original_requirement": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"", "entry_point": "count_distinct_characters", "cluster_list": [{"programs_str": ["def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))", "def count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))"], "outputs": "[[3], [4], [15], [0], [1], [1], [27]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcABC'], ['aAbBcCdD'], ['abcdefg12345!@#'], [''], ['ZZZzzz'], ['AaAaAa'], ['The quick brown fox jumps over the lazy dog']]", "input_output_examples": "[[['xyzXYZ'], ['Jerry']], [[3], [4]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/17", "original_requirement": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a string representing musical notes in a special ASCII format and returns a list of integers,\n    each integer representing the duration in beats of the corresponding note.\n\n    The input string consists of tokens separated by spaces. Each token must be one of the following:\n        'o'  - whole note, lasts four beats\n        'o|' - half note, lasts two beats\n        '.|' - quarter note, lasts one beat\n\n    If the input string contains any token not in the above set, the function must raise a KeyError.\n\n    Args:\n        music_string (str): A space-separated string of note tokens.\n\n    Returns:\n        List[int]: A list of integers representing the duration in beats of each note in order.\n\n    Raises:\n        KeyError: If any token in the input string is not one of the specified note formats.\n\n    Example:\n        >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n        [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"", "entry_point": "parse_music", "cluster_list": [{"programs_str": ["from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    mapping = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    return [mapping[token] for token in tokens]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    legend = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [legend[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [beats_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_duration = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_duration[n] for n in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes = music_string.split()\n    beats_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [beats_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_values = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_values[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    mapping = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [mapping[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    mapping = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [mapping[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    return [note_map[token] for token in tokens]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    return [note_map[token] for token in tokens]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    return [note_map[token] for token in tokens]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    return [note_map[token] for token in tokens]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    mapping = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    return [mapping[token] for token in tokens]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [beats_map[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_to_beats = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    return [note_to_beats[note] for note in notes]", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_map = {'o': 4, 'o|': 2, '.|': 1}\n    parts = music_string.split()\n    return [notes_map[p] for p in parts]"], "outputs": "[[[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]], [[]], [[4]], [[2]], [[1]], [[4, 4, 4, 4]], [[2, 2, 2, 2]], [[1, 1, 1, 1]], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 2, 1]], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 2, 1, 4]], ['KeyError'], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token == 'o':\n            result.append(4)\n        elif token == 'o|':\n            result.append(2)\n        elif token == '.|':\n            result.append(1)\n    return result"], "outputs": "[[[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]], [[]], [[4]], [[2]], [[1]], [[4, 4, 4, 4]], [[2, 2, 2, 2]], [[1, 1, 1, 1]], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 2, 1]], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 2, 1, 4]], [[4, 2, 1, 2]], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    result = []\n    for note in notes:\n        if note in note_map:\n            result.append(note_map[note])\n        else:\n            raise ValueError(f'Unknown note format: {note}')\n    return result"], "outputs": "[[[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]], [[]], [[4]], [[2]], [[1]], [[4, 4, 4, 4]], [[2, 2, 2, 2]], [[1, 1, 1, 1]], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 2, 1]], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 2, 1, 4]], ['ValueError'], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.3589962496465303, "llm_generated_inputs": "[['o o| .| o| o| .| .| .| .| o o'], [''], ['o'], ['o|'], ['.|'], ['o o o o'], ['o| o| o| o|'], ['.| .| .| .|'], ['o o| .| o| o| .| .| .| .| o o o| .|'], ['o o| .| o| o| .| .| .| .| o o o| .| o'], ['o o| .| invalid o|'], ['      o     o|    .|    o|    o|     .|     .|     .|     .|    o      o   ']]", "input_output_examples": "[[['o o| .| o| o| .| .| .| .| o o']], [[[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Parses a string representing musical notes in a special ASCII format and returns a list of integers,\n    each integer representing the duration in beats of the corresponding note.\n\n    The input string consists of tokens separated by spaces. Each token must be one of the following:\n        'o'  - whole note, lasts four beats\n        'o|' - half note, lasts two beats\n        '.|' - quarter note, lasts one beat\n\n    If the input string contains any token not in the above set, the function must raise a KeyError.\n\n    Args:\n        music_string (str): A space-separated string of note tokens.\n\n    Returns:\n        List[int]: A list of integers representing the duration in beats of each note in order.\n\n    Raises:\n        KeyError: If any token in the input string is not one of the specified note formats.\n\n    Example:\n        >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n        [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"", "entry_point": "parse_music", "cluster_list": [{"programs_str": ["from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    durations = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid note token: {token}')\n        durations.append(note_durations[token])\n    return durations", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    durations = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid token: {token}')\n        durations.append(note_durations[token])\n    return durations", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    durations = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid token: {token}')\n        durations.append(note_durations[token])\n    return durations", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid note token: {token}')\n        result.append(note_durations[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in note_map:\n            raise KeyError(f'Invalid token: {token}')\n        result.append(note_map[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    token_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in token_map:\n            raise KeyError(f'Invalid token: {token}')\n        result.append(token_map[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for t in tokens:\n        if t not in note_map:\n            raise KeyError(f'Invalid note token: {t}')\n        result.append(note_map[t])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in note_map:\n            raise KeyError(f'Invalid token: {token}')\n        result.append(note_map[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    token_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in token_map:\n            raise KeyError(f'Invalid token: {token}')\n        result.append(token_map[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    durations = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid note token: {token}')\n        durations.append(note_durations[token])\n    return durations", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    mapping = {'o': 4, 'o|': 2, '.|': 1}\n    notes = music_string.split()\n    result = []\n    for token in notes:\n        if token not in mapping:\n            raise KeyError(f'Invalid token: {token}')\n        result.append(mapping[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    notes_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in notes_map:\n            raise KeyError(f'Invalid token: {token}')\n        result.append(notes_map[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid token: {token}')\n        result.append(note_durations[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid token: {token}')\n        result.append(note_durations[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    durations = []\n    for token in tokens:\n        if token not in note_map:\n            raise KeyError(f'Invalid note token: {token}')\n        durations.append(note_map[token])\n    return durations", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    durations = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid token: {token}')\n        durations.append(note_durations[token])\n    return durations", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid note token: {token}')\n        result.append(note_durations[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    durations = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid token: {token}')\n        durations.append(note_durations[token])\n    return durations", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_values = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in note_values:\n            raise KeyError(f'Invalid token: {token}')\n        result.append(note_values[token])\n    return result", "from typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    note_durations = {'o': 4, 'o|': 2, '.|': 1}\n    tokens = music_string.split()\n    result = []\n    for token in tokens:\n        if token not in note_durations:\n            raise KeyError(f'Invalid token: {token}')\n        result.append(note_durations[token])\n    return result"], "outputs": "[[[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]], [[]], [[4]], [[2]], [[1]], [[4, 4, 4, 4]], [[2, 2, 2, 2]], [[1, 1, 1, 1]], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 2, 1]], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4, 2, 1, 4]], ['KeyError'], [[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['o o| .| o| o| .| .| .| .| o o'], [''], ['o'], ['o|'], ['.|'], ['o o o o'], ['o| o| o| o|'], ['.| .| .| .|'], ['o o| .| o| o| .| .| .| .| o o o| .|'], ['o o| .| o| o| .| .| .| .| o o o| .| o'], ['o o| .| invalid o|'], ['      o     o|    .|    o|    o|     .|     .|     .|     .|    o      o   ']]", "input_output_examples": "[[['o o| .| o| o| .| .| .| .| o o']], [[[4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.3589962496465303, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/18", "original_requirement": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"", "entry_point": "how_many_times", "cluster_list": [{"programs_str": ["def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    sub_len = len(substring)\n    for i in range(len(string) - sub_len + 1):\n        if string[i:i + sub_len] == substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    sub_len = len(substring)\n    for i in range(len(string) - sub_len + 1):\n        if string[i:i + sub_len] == substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    sub_len = len(substring)\n    for i in range(len(string) - sub_len + 1):\n        if string[i:i + sub_len] == substring:\n            count += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            return count\n        count += 1\n        start += 1", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count", "def how_many_times(string: str, substring: str) -> int:\n    count = 0\n    start = 0\n    while True:\n        start = string.find(substring, start)\n        if start == -1:\n            break\n        count += 1\n        start += 1\n    return count"], "outputs": "[[0], [3], [3], [3], [3], [3], [0], [1], [2], [5], [0], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['', 'a'], ['aaa', 'a'], ['aaaa', 'aa'], ['abcabcabc', 'abc'], ['aaaaa', 'aaa'], ['abababa', 'aba'], ['abcdef', 'z'], ['', ''], ['a', ''], ['aaaa', ''], ['aaaa', 'aaaaa'], ['a', 'a']]", "input_output_examples": "[[['', 'a'], ['aaa', 'a'], ['aaaa', 'aa']], [[0], [3], [3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/19", "original_requirement": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"", "entry_point": "sort_numbers", "cluster_list": [{"programs_str": ["def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_list = numbers.split()\n    num_list.sort(key=lambda x: number_map[x])\n    return ' '.join(num_list)", "def sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    nums = numbers.split()\n    nums.sort(key=lambda x: words.index(x))\n    return ' '.join(nums)", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: num_map[x])\n    return ' '.join(sorted_words)", "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    words.sort(key=lambda x: number_map[x])\n    return ' '.join(words)", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    nums = numbers.split()\n    nums.sort(key=lambda x: words.index(x))\n    return ' '.join(nums)", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    num_list = [word_to_num[word] for word in numbers.split()]\n    num_list.sort()\n    return ' '.join((num_to_word[num] for num in num_list))", "def sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    split_numbers = numbers.split()\n    sorted_nums = sorted(split_numbers, key=lambda x: word_to_num[x])\n    return ' '.join(sorted_nums)", "def sort_numbers(numbers: str) -> str:\n    num_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    inv_map = {v: k for k, v in num_map.items()}\n    nums = numbers.split()\n    sorted_nums = sorted(nums, key=lambda x: num_map[x])\n    return ' '.join(sorted_nums)", "def sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    nums = [word_to_num[word] for word in numbers.split()]\n    nums.sort()\n    return ' '.join((num_to_word[num] for num in nums))", "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    reverse_map = {v: k for k, v in number_map.items()}\n    nums_list = numbers.split()\n    sorted_nums = sorted(nums_list, key=lambda x: number_map[x])\n    return ' '.join(sorted_nums)", "def sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    nums = [word_to_num[word] for word in numbers.split()]\n    nums.sort()\n    return ' '.join((num_to_word[num] for num in nums))", "def sort_numbers(numbers: str) -> str:\n    words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    nums = numbers.split()\n    nums.sort(key=lambda x: words.index(x))\n    return ' '.join(nums)", "def sort_numbers(numbers: str) -> str:\n    mapping = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    reverse_mapping = {v: k for k, v in mapping.items()}\n    nums_list = numbers.split()\n    nums_list.sort(key=lambda x: mapping[x])\n    return ' '.join(nums_list)", "def sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    nums = [word_to_num[word] for word in numbers.split()]\n    nums.sort()\n    return ' '.join((num_to_word[num] for num in nums))", "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    nums = numbers.split()\n    nums.sort(key=lambda x: number_map[x])\n    return ' '.join(nums)", "def sort_numbers(numbers: str) -> str:\n    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    words.sort(key=lambda x: number_map[x])\n    return ' '.join(words)", "def sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    num_list = [word_to_num[word] for word in numbers.split()]\n    num_list.sort()\n    return ' '.join((num_to_word[num] for num in num_list))", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    word_to_num = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    num_to_word = {v: k for k, v in word_to_num.items()}\n    parts = numbers.split()\n    nums = [word_to_num[word] for word in parts]\n    nums.sort()\n    sorted_words = [num_to_word[num] for num in nums]\n    return ' '.join(sorted_words)", "from typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    name_to_val = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    val_to_name = {v: k for k, v in name_to_val.items()}\n    nums = numbers.split()\n    nums_sorted = sorted(nums, key=lambda x: name_to_val[x])\n    return ' '.join(nums_sorted)", "def sort_numbers(numbers: str) -> str:\n    numbers_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\n    words = numbers.split()\n    sorted_words = sorted(words, key=lambda x: numbers_map[x])\n    return ' '.join(sorted_words)"], "outputs": "[['one three five'], [''], ['zero'], ['zero one two three four five six seven eight nine'], ['five five five five'], ['two four seven nine'], ['zero one two three four five six seven eight nine']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['three one five'], [''], ['zero'], ['nine eight seven six five four three two one zero'], ['five five five five'], ['seven two four nine'], ['one two three four five six seven eight nine zero']]", "input_output_examples": "[[['three one five']], [['one three five']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/20", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"", "entry_point": "find_closest_elements", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_nums = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_nums[0], sorted_nums[1])\n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_nums[i], sorted_nums[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    min_diff = abs(numbers_sorted[1] - numbers_sorted[0])\n    for i in range(1, len(numbers_sorted) - 1):\n        diff = abs(numbers_sorted[i + 1] - numbers_sorted[i])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_nums = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_nums[0], sorted_nums[1])\n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_nums[i], sorted_nums[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    result = (numbers[0], numbers[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers_sorted[i], numbers_sorted[i + 1])\n    return result", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_nums = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_nums[0], sorted_nums[1])\n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_nums[i], sorted_nums[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_nums = sorted(numbers)\n    min_diff = float('inf')\n    result = (sorted_nums[0], sorted_nums[1])\n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (sorted_nums[i], sorted_nums[i + 1])\n    return result", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_nums = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_nums[0], sorted_nums[1])\n    for i in range(len(sorted_nums) - 1):\n        diff = sorted_nums[i + 1] - sorted_nums[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_nums[i], sorted_nums[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n    for i in range(len(sorted_numbers) - 1):\n        diff = sorted_numbers[i + 1] - sorted_numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i], sorted_numbers[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers_sorted = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (numbers_sorted[0], numbers_sorted[1])\n    for i in range(len(numbers_sorted) - 1):\n        diff = numbers_sorted[i + 1] - numbers_sorted[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers_sorted[i], numbers_sorted[i + 1])\n    return closest_pair", "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    sorted_numbers = sorted(numbers)\n    min_diff = float('inf')\n    closest_pair = (sorted_numbers[0], sorted_numbers[1])\n    for i in range(1, len(sorted_numbers)):\n        diff = sorted_numbers[i] - sorted_numbers[i - 1]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (sorted_numbers[i - 1], sorted_numbers[i])\n    return closest_pair"], "outputs": "[[(2.0, 2.2)], [(2.0, 2.0)], [(5.0, 5.0)], [(1.0, 1000.0)], [(-1.0, 0.0)], [(0.1, 0.1001)], [(-1000.0, -999.9)], [(1.0, 1.0)], [(1.0000001, 1.0000002)], [(5, 6)]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]], [[5.0, 5.0, 5.0]], [[1.0, 1000.0]], [[-1.0, 0.0, 1.0, 2.0]], [[0.1, 0.1001, 0.1002, 0.1003]], [[-1000.0, -999.9, -999.8]], [[1.0, 1.0, 2.0, 2.0, 3.0, 3.0]], [[1.0000001, 1.0000002]], [[10, 5, 3, 1, 6, 7]]]", "input_output_examples": "[[[[1.0, 2.0, 3.0, 4.0, 5.0, 2.2]], [[1.0, 2.0, 3.0, 4.0, 5.0, 2.0]]], [[(2.0, 2.2)], [(2.0, 2.0)]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/21", "original_requirement": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"", "entry_point": "rescale_to_unit", "cluster_list": [{"programs_str": ["from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    minimum = min(numbers)\n    maximum = max(numbers)\n    range_val = maximum - minimum\n    return [(num - minimum) / range_val for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(num - min_val) / range_val for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    minimum = min(numbers)\n    maximum = max(numbers)\n    range_ = maximum - minimum\n    return [(n - minimum) / range_ for n in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n    return [(num - min_num) / range_num for num in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]", "from typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_val = min(numbers)\n    max_val = max(numbers)\n    range_val = max_val - min_val\n    return [(x - min_val) / range_val for x in numbers]"], "outputs": "[[[0.0, 0.25, 0.5, 0.75, 1.0]], [[0.0, 0.3333333333333333, 0.6666666666666666, 1.0]], ['ZeroDivisionError'], [[0.0, 1.0]], [[0.0, 0.25, 0.5, 0.75, 1.0]], [[0.0, 0.5, 1.0]], [[0.3276231263383298, 0.2355460385438972, 1.0, 0.0]], [[0.0, 0.5, 1.0, 0.75, 0.25]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1.0, 2.0, 3.0, 4.0, 5.0]], [[-10.0, 0.0, 10.0, 20.0]], [[5.5, 5.5, 5.5, 5.5]], [[0.0, 1.0]], [[-1.0, -0.5, 0.0, 0.5, 1.0]], [[1000000.0, 2000000.0, 3000000.0]], [[3.14, 2.71, 6.28, 1.61]], [[-1000.0, 0.0, 1000.0, 500.0, -500.0]]]", "input_output_examples": "[[[[1.0, 2.0, 3.0, 4.0, 5.0]]], [[[0.0, 0.25, 0.5, 0.75, 1.0]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/22", "original_requirement": "from typing import List\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"", "repaired_requirement": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter the given list of values, returning only those elements that are instances of int,\n    including boolean values True and False, since in Python bool is a subclass of int.\n    This means that values of type bool are included, as well as values of type int,\n    but values of other types, even if they are subclasses of int, are excluded.\n    \n    Note:\n    - Use isinstance(v, int) to check for integer types, which includes bool.\n    - Do not use type(v) == int, as this excludes bool values.\n    \n    Examples:\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    >>> filter_integers(['hello', None, True, False, 0, -1, 10.5])\n    [True, False, 0, -1]\n    \"\"\"\n    pass", "original_clusters": {"requirement": "from typing import List\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"", "entry_point": "filter_integers", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if type(v) is int]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int) and (not isinstance(v, bool))]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int) and (not isinstance(v, bool))]"], "outputs": "[[[5]], [[1, 2, 3]], [[0, -1]], [[]], [[0, 1, -1, 1000000]], [[42]], [[1, 0, -5]]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import Any, List\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]"], "outputs": "[[[5]], [[1, 2, 3]], [[True, False, 0, -1]], [[]], [[0, 1, -1, 1000000]], [[42]], [[True, False, 1, 0, -5]]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6098403047164005, "llm_generated_inputs": "[[['a', 3.14, 5]], [[1, 2, 3, 'abc', {}, []]], [['hello', None, True, False, 0, -1, 10.5]], [[]], [[0, 1, -1, 1000000]], [['string', 3.0, [1, 2, 3], {'key': 'value'}, 42]], [[True, False, 1, 0, -5]]]", "input_output_examples": "[[[['a', 3.14, 5]], [[1, 2, 3, 'abc', {}, []]]], [[[5]], [[1, 2, 3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\"\n    Filter the given list of values, returning only those elements that are instances of int,\n    including boolean values True and False, since in Python bool is a subclass of int.\n    This means that values of type bool are included, as well as values of type int,\n    but values of other types, even if they are subclasses of int, are excluded.\n    \n    Note:\n    - Use isinstance(v, int) to check for integer types, which includes bool.\n    - Do not use type(v) == int, as this excludes bool values.\n    \n    Examples:\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    >>> filter_integers(['hello', None, True, False, 0, -1, 10.5])\n    [True, False, 0, -1]\n    \"\"\"\n    pass", "entry_point": "filter_integers", "cluster_list": [{"programs_str": ["from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]", "from typing import List, Any\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [v for v in values if isinstance(v, int)]"], "outputs": "[[[5]], [[1, 2, 3]], [[True, False, 0, -1]], [[]], [[0, 1, -1, 1000000]], [[42]], [[True, False, 1, 0, -5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['a', 3.14, 5]], [[1, 2, 3, 'abc', {}, []]], [['hello', None, True, False, 0, -1, 10.5]], [[]], [[0, 1, -1, 1000000]], [['string', 3.0, [1, 2, 3], {'key': 'value'}, 42]], [[True, False, 1, 0, -5]]]", "input_output_examples": "[[[['a', 3.14, 5]], [[1, 2, 3, 'abc', {}, []]]], [[[5]], [[1, 2, 3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.15000000000000002, "original_avg_pass_rate": 0.8524058577405856, "original_nzpassk": true, "original_majority_passk": false, "original_entropy": 0.6098403047164005, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.8263598326359831, "repaired_nzpassk": false, "repaired_majority_passk": false, "repaired_entropy": 0}}
{"task_id": "HumanEval/23", "original_requirement": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"", "entry_point": "strlen", "cluster_list": [{"programs_str": ["def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)", "def strlen(string: str) -> int:\n    return len(string)"], "outputs": "[[0], [3], [1], [1], [21], [10], [10], [1], [13], [17]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['abc'], [' '], ['a'], ['longer string example'], ['1234567890'], ['!@#$%^&*()'], ['😊'], ['Hello, world!'], ['multi\\nline\\nstring']]", "input_output_examples": "[[[''], ['abc']], [[0], [3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/24", "original_requirement": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"", "repaired_requirement": "def largest_divisor(n: int) -> int | None:\n    \"\"\"\n    For a given integer n greater than 1, find the largest integer divisor of n that is strictly less than n.\n    Return None if no such divisor exists (e.g., when n is 1).\n    \n    The divisor must evenly divide n (i.e., n % divisor == 0).\n    \n    Examples:\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(1)\n    None\n    \"\"\"", "original_clusters": {"requirement": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"", "entry_point": "largest_divisor", "cluster_list": [{"programs_str": ["def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i", "def largest_divisor(n: int) -> int:\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i"], "outputs": "[[5], [None], [1], [5], [1], [50], [1], [None], [None]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def largest_divisor(n: int) -> int:\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return 1"], "outputs": "[[5], [1], [1], [5], [1], [50], [1], [1], [1]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[15], [1], [2], [10], [17], [100], [37], [0], [-10]]", "input_output_examples": "[[[15]], [[5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def largest_divisor(n: int) -> int | None:\n    \"\"\"\n    For a given integer n greater than 1, find the largest integer divisor of n that is strictly less than n.\n    Return None if no such divisor exists (e.g., when n is 1).\n    \n    The divisor must evenly divide n (i.e., n % divisor == 0).\n    \n    Examples:\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(1)\n    None\n    \"\"\"", "entry_point": "largest_divisor", "cluster_list": [{"programs_str": ["def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "from typing import Optional\n\ndef largest_divisor(n: int) -> Optional[int]:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "from typing import Optional\n\ndef largest_divisor(n: int) -> Optional[int]:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "from typing import Optional\n\ndef largest_divisor(n: int) -> Optional[int]:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "from typing import Optional\n\ndef largest_divisor(n: int) -> Optional[int]:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None", "from typing import Optional\n\ndef largest_divisor(n: int) -> Optional[int]:\n    if n <= 1:\n        return None\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return None", "def largest_divisor(n: int) -> int | None:\n    if n <= 1:\n        return None\n    for divisor in range(n // 2, 0, -1):\n        if n % divisor == 0:\n            return divisor\n    return None"], "outputs": "[[5], [None], [1], [5], [1], [50], [1], [None], [None]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[15], [1], [2], [10], [17], [100], [37], [0], [-10]]", "input_output_examples": "[[[15]], [[5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.2863969571159562, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/25", "original_requirement": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"", "entry_point": "factorize", "cluster_list": [{"programs_str": ["from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= divisor * divisor:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1 if divisor == 2 else 2\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n >= divisor:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n        if divisor * divisor > n:\n            if n > 1:\n                factors.append(n)\n            break\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while divisor * divisor <= n:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    if n > 1:\n        factors.append(n)\n    return factors"], "outputs": "[[[2, 2, 2]], [[5, 5]], [[2, 5, 7]], [[]], [[2]], [[13]], [[2, 2, 5, 5]], [[2, 2, 2, 3, 3, 5]], [[9973]], [[]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[8], [25], [70], [1], [2], [13], [100], [360], [9973], [0], [-10]]", "input_output_examples": "[[[8], [25], [70]], [[[2, 2, 2]], [[5, 5]], [[2, 5, 7]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/26", "original_requirement": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"", "entry_point": "remove_duplicates", "cluster_list": [{"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = Counter(numbers)\n    return [num for num in numbers if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [x for x in numbers if counts[x] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    count = Counter(numbers)\n    return [num for num in numbers if count[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]", "from typing import List\nfrom collections import Counter\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    counts = Counter(numbers)\n    return [num for num in numbers if counts[num] == 1]"], "outputs": "[[[1, 3, 4]], [[]], [[-2, -3]], [[10]], [[]], [[1, 2, 3, 4, 5]], [[1, 2]], [[]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 2, 4]], [[5, 5, 5, 5]], [[-1, -2, -3, -1]], [[10]], [[]], [[1, 2, 3, 4, 5]], [[0, 0, 1, 2, 3, 3]], [[1, 1, 2, 2, 3, 3]]]", "input_output_examples": "[[[[1, 2, 3, 2, 4]]], [[[1, 3, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/27", "original_requirement": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"", "entry_point": "flip_case", "cluster_list": [{"programs_str": ["def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return string.swapcase()", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return string.swapcase()", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return string.swapcase()", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.lower() if char.isupper() else char.upper() for char in string))", "def flip_case(string: str) -> str:\n    return ''.join((char.upper() if char.islower() else char.lower() for char in string))", "def flip_case(string: str) -> str:\n    return string.swapcase()"], "outputs": "[['hELLO'], ['Hello'], ['1234!@#$'], [''], ['allupper'], ['ALLLOWER'], ['mIxEd123cASE!'], ['   '], ['SS∂Ƒ©˙∆˚¬…Æ']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hello'], ['hELLO'], ['1234!@#$'], [''], ['ALLUPPER'], ['alllower'], ['MiXeD123Case!'], ['   '], ['ß∂ƒ©˙∆˚¬…æ']]", "input_output_examples": "[[['Hello']], [['hELLO']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/28", "original_requirement": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"", "entry_point": "concatenate", "cluster_list": [{"programs_str": ["from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)", "from typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)"], "outputs": "[[''], ['abc'], ['hello world'], [''], ['single'], ['123456789'], ['   '], ['\\n\\t']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[]], [['a', 'b', 'c']], [['hello', ' ', 'world']], [['', '', '']], [['single']], [['123', '456', '789']], [[' ', ' ', ' ']], [['\\n', '\\t', '']]]", "input_output_examples": "[[[[]], [['a', 'b', 'c']]], [[''], ['abc']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/29", "original_requirement": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"", "entry_point": "filter_by_prefix", "cluster_list": [{"programs_str": ["from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]", "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [s for s in strings if s.startswith(prefix)]"], "outputs": "[[['apple', 'apricot']], [['dog', 'deer', 'duck']], [['trial', 'trace']], [['hello', 'hey']], [['four']], [[]], [['abc', 'bcd', 'cde', 'array']], [['a', 'b', 'c', '']], [['aaaa', 'aaab']], [['same', 'same', 'same']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[['apple', 'banana', 'apricot', 'cherry'], 'ap'], [['dog', 'deer', 'cat', 'duck'], 'd'], [['test', 'trial', 'check', 'trace'], 'tr'], [['hello', 'world', 'hey', 'hi'], 'he'], [['one', 'two', 'three', 'four'], 'f'], [[], 'a'], [['abc', 'bcd', 'cde', 'array'], ''], [['a', 'b', 'c', ''], ''], [['aaaa', 'aaab', 'baaa', 'bbaa'], 'aaa'], [['same', 'same', 'same'], 'sa']]", "input_output_examples": "[[[[], 'a'], [['abc', 'bcd', 'cde', 'array'], 'a']], [[[]], [['abc', 'array']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/30", "original_requirement": "from typing import List\n\n\ndef get_positive(l: List[int]) -> List[int]:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef get_positive(l: List[int]) -> List[int]:\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"", "entry_point": "get_positive", "cluster_list": [{"programs_str": ["from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]", "from typing import List\n\ndef get_positive(l: List[int]) -> List[int]:\n    return [x for x in l if x > 0]"], "outputs": "[[[1, 2, 3, 4, 5]], [[]], [[]], [[1]], [[]], [[10, 20]], [[100, 200, 300]], [[]], [[]], [[1]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[-1, -2, -3, -4]], [[0, 0, 0]], [[-1, 0, 1]], [[]], [[-5, 10, -15, 20, 0]], [[100, 200, 300]], [[-100, -200, -300]], [[0]], [[1]]]", "input_output_examples": "[[[[-1, 2, -4, 5, 6]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], [[[2, 5, 6]], [[5, 3, 2, 3, 9, 123, 1]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/31", "original_requirement": "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "entry_point": "is_prime", "cluster_list": [{"programs_str": ["def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, isqrt(n) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, isqrt(n) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True"], "outputs": "[[False], [True], [True], [True], [True], [False], [False], [True], [True], [False], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[6], [101], [11], [13441], [61], [4], [1], [2], [3], [0], [-1], [17], [25], [7919]]", "input_output_examples": "[[[6], [101], [11], [13441], [61], [4], [1]], [[False], [True], [True], [True], [True], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/32", "original_requirement": "from typing import List\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: List[float]) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"", "repaired_requirement": "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    \"\"\"\n    Given a list of coefficients xs representing a polynomial \n    p(x) = xs[0] + xs[1]*x + xs[2]*x^2 + ... + xs[n]*x^n,\n    where n = len(xs) - 1, find and return exactly one real root x0 such that p(x0) = 0.\n\n    Requirements and clarifications:\n    - The input list xs must have an even number of coefficients, i.e., len(xs) % 2 == 0.\n      This implies the polynomial degree n = len(xs) - 1 is odd, guaranteeing at least one real root.\n    - The leading coefficient xs[-1] (coefficient of the highest degree term) must be non-zero.\n    - The polynomial degree n is defined as the index of the highest-degree term with a non-zero coefficient.\n      Leading zero coefficients before the highest-degree term are allowed and should be ignored in degree determination.\n    - The function returns exactly one real root (any one root if multiple exist).\n    - The root must be computed using a numerical method that:\n        * First attempts Newton-Raphson starting from x=0 (or nearby if derivative is zero),\n        * If Newton-Raphson fails to converge within a reasonable number of iterations or derivative is zero,\n          then fallback to bisection method over an interval guaranteed to contain a root.\n    - The interval for bisection is determined using Cauchy bound:\n        R = 1 + max(abs(xs[i]/xs[-1]) for i in range(n)) (where n is the polynomial degree)\n      and searching for a sign change in p(x) over [-R, R] or expanding intervals if needed.\n    - The polynomial is evaluated as p(x) = sum(xs[i] * x^i for i in range(len(xs))).\n    - The function must raise a ValueError if:\n        * The input list length is not even,\n        * The leading coefficient xs[-1] is zero,\n        * Or if no root can be found within the search bounds.\n    - The function must achieve a precision tolerance of at least 1e-12 in the root value.\n    - The function does not require or guarantee finding all roots, only one real root.\n    - The function must handle polynomials with leading zero coefficients before the highest-degree term,\n      as long as the highest-degree coefficient is non-zero.\n\n    Examples:\n    >>> round(find_zero([1, 2]), 2)  # p(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)  # p(x) = -6 + 11x - 6x^2 + x^3 = (x-1)(x-2)(x-3)\n    1.0\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: List[float]) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"", "entry_point": "find_zero", "cluster_list": [{"programs_str": ["from typing import List\nimport numpy as np\n\ndef find_zero(xs: List[float]) -> float:\n    roots = np.roots(xs[::-1])\n    real_roots = [r.real for r in roots if abs(r.imag) < 1e-10]\n    return real_roots[0]", "from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    import numpy as np\n    if len(xs) % 2 != 0:\n        raise ValueError('Length of xs must be even')\n    coeffs = xs[::-1]\n    roots = np.roots(coeffs)\n    for root in roots:\n        if abs(root.imag) < 1e-09:\n            return float(root.real)\n    return float('nan')", "from typing import List\nimport numpy as np\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    n = len(xs) - 1\n    coeffs = xs[::-1]\n    roots = np.roots(coeffs)\n    for r in roots:\n        if np.isreal(r):\n            return r.real\n    return None", "from typing import List\nimport numpy as np\n\ndef find_zero(xs: List[float]) -> float:\n    roots = np.roots(xs[::-1])\n    real_roots = [r.real for r in roots if abs(r.imag) < 1e-10]\n    return real_roots[0]", "from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    import numpy as np\n    coeffs = xs[::-1]\n    poly_np = np.poly1d(coeffs)\n    roots = poly_np.r\n    real_roots = [r.real for r in roots if abs(r.imag) < 1e-10]\n    if not real_roots:\n        raise ValueError('No real roots found')\n    return real_roots[0]", "from typing import List\nimport numpy as np\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    coeffs = xs[::-1]\n    roots = np.roots(coeffs)\n    real_roots = [r.real for r in roots if abs(r.imag) < 1e-09]\n    return real_roots[0]"], "outputs": "[[np.float64(-0.5)], [np.float64(3.0000000000000018)], [np.float64(1.0)], [np.float64(0.0)], [np.float64(-2.0000000000000013)]]", "probability": 0.3, "is_align_req": 0, "test_consistency": 0.5, "failed_input_output_examples": "[[[[-6, 11, -6, 1]], [np.float64(3.0000000000000018)], [1.0]]]"}, {"programs_str": ["from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    n = len(xs) - 1\n    d_xs = [i * xs[i] for i in range(1, n + 1)]\n\n    def poly_val(coeffs, val):\n        return sum((c * val ** i for i, c in enumerate(coeffs)))\n    x = 0.0\n    for _ in range(100):\n        y = poly_val(xs, x)\n        dy = poly_val(d_xs, x)\n        if dy == 0:\n            break\n        x_new = x - y / dy\n        if abs(x_new - x) < 1e-12:\n            return x_new\n        x = x_new\n    return x", "import math\nfrom typing import List\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    x = 0.0\n\n    def derivative(xs, x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n    for _ in range(1000):\n        fx = poly(xs, x)\n        if abs(fx) < 1e-14:\n            return x\n        dfx = derivative(xs, x)\n        if dfx == 0:\n            break\n        x = x - fx / dfx\n    return x", "from typing import List\nimport math\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    n = len(xs) - 1\n\n    def f(x):\n        return poly(xs, x)\n\n    def df(x):\n        return sum((i * xs[i] * x ** (i - 1) for i in range(1, len(xs))))\n    x = 0.0\n    for _ in range(1000):\n        y = f(x)\n        dy = df(x)\n        if dy == 0:\n            break\n        x_new = x - y / dy\n        if abs(x_new - x) < 1e-12:\n            return x_new\n        x = x_new\n    return x", "import math\nfrom typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly(xs, x):\n        return sum((coeff * math.pow(x, i) for i, coeff in enumerate(xs)))\n\n    def dpoly(xs, x):\n        return sum((i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0))\n    x = 0.0\n    for _ in range(1000):\n        p = poly(xs, x)\n        dp = dpoly(xs, x)\n        if dp == 0:\n            break\n        x_new = x - p / dp\n        if abs(x_new - x) < 1e-12:\n            return x_new\n        x = x_new\n    return x", "import math\nfrom typing import List\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def f(x):\n        return poly(xs, x)\n\n    def f_prime(x):\n        return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i > 0])\n    x0 = 0.0\n    for _ in range(1000):\n        y = f(x0)\n        y_prime = f_prime(x0)\n        if abs(y_prime) < 1e-12:\n            break\n        x1 = x0 - y / y_prime\n        if abs(x1 - x0) < 1e-12:\n            return x1\n        x0 = x1\n    return x0", "import math\nfrom typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly(xs: list, x: float):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    a = xs[-1]\n    b = xs[-2]\n    n = len(xs) - 1\n    if n == 1:\n        return -xs[0] / xs[1]\n\n    def derivative(xs, x):\n        return sum((i * coeff * x ** (i - 1) for i, coeff in enumerate(xs) if i > 0))\n    x0 = 0.0\n    for _ in range(1000):\n        y = poly(xs, x0)\n        if abs(y) < 1e-12:\n            return x0\n        y_prime = derivative(xs, x0)\n        if y_prime == 0:\n            x0 += 1\n        else:\n            x0 -= y / y_prime\n    return x0", "import math\nfrom typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly(xs, x):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    left, right = (-1.0, 1.0)\n    while poly(xs, left) * poly(xs, right) > 0:\n        left *= 2\n        right *= 2\n    for _ in range(100):\n        mid = (left + right) / 2\n        val = poly(xs, mid)\n        if abs(val) < 1e-12:\n            return mid\n        if poly(xs, left) * val < 0:\n            right = mid\n        else:\n            left = mid\n    return (left + right) / 2"], "outputs": "[[-0.5], [1.0], [1.0], [0.0], [1.0000000005359917]]", "probability": 0.35, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\nfrom typing import List\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def f(x):\n        return poly(xs, x)\n    a, b = (-1000, 1000)\n    fa, fb = (f(a), f(b))\n    for i in range(10):\n        if fa * fb < 0:\n            break\n        else:\n            a *= 2\n            b *= 2\n            fa = f(a)\n            fb = f(b)\n    if fa * fb > 0:\n        left, right = (-1000, 1000)\n        step = 0.1\n        prev_val = f(left)\n        x_root = None\n        x = left + step\n        while x <= right:\n            cur_val = f(x)\n            if prev_val * cur_val <= 0:\n                a, b = (x - step, x)\n                fa, fb = (prev_val, cur_val)\n                break\n            prev_val = cur_val\n            x += step\n        else:\n            return 0.0\n    for _ in range(100):\n        mid = (a + b) / 2\n        fm = f(mid)\n        if abs(fm) < 1e-12:\n            return mid\n        if fa * fm < 0:\n            b = mid\n            fb = fm\n        else:\n            a = mid\n            fa = fm\n    return (a + b) / 2", "import math\nfrom typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly(x):\n        return sum((coeff * math.pow(x, i) for i, coeff in enumerate(xs)))\n    low, high = (-1000000.0, 1000000.0)\n    for _ in range(100):\n        mid = (low + high) / 2\n        val = poly(mid)\n        if abs(val) < 1e-12:\n            return mid\n        elif val > 0:\n            high = mid\n        else:\n            low = mid\n    return (low + high) / 2", "import math\nfrom typing import List\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n\n    def f(x):\n        return poly(xs, x)\n    left, right = (-1000.0, 1000.0)\n    f_left = f(left)\n    f_right = f(right)\n    for i in range(100):\n        if f_left * f_right < 0:\n            break\n        left -= 1000\n        right += 1000\n        f_left = f(left)\n        f_right = f(right)\n    else:\n        for x_try in [i * 0.1 for i in range(-50, 51)]:\n            if abs(f(x_try)) < 1e-12:\n                return x_try\n        raise ValueError('No root found in searched intervals')\n    for _ in range(1000):\n        mid = (left + right) / 2\n        f_mid = f(mid)\n        if abs(f_mid) < 1e-14:\n            return mid\n        if f_left * f_mid < 0:\n            right = mid\n            f_right = f_mid\n        else:\n            left = mid\n            f_left = f_mid\n    return (left + right) / 2", "import math\nfrom typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly(xs: list, x: float):\n        return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n    a, b = (-1000.0, 1000.0)\n    fa, fb = (poly(xs, a), poly(xs, b))\n    while fa * fb > 0:\n        a *= 2\n        b *= 2\n        fa, fb = (poly(xs, a), poly(xs, b))\n    for _ in range(100):\n        c = (a + b) / 2\n        fc = poly(xs, c)\n        if abs(fc) < 1e-12:\n            return c\n        if fa * fc < 0:\n            b, fb = (c, fc)\n        else:\n            a, fa = (c, fc)\n    return (a + b) / 2", "import math\nfrom typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly(x):\n        return sum((coeff * x ** i for i, coeff in enumerate(xs)))\n    a, b = (-100000.0, 100000.0)\n    fa, fb = (poly(a), poly(b))\n    if fa == 0:\n        return a\n    if fb == 0:\n        return b\n    while fa * fb > 0:\n        a *= 2\n        b *= 2\n        fa, fb = (poly(a), poly(b))\n    for _ in range(100):\n        c = (a + b) / 2\n        fc = poly(c)\n        if fc == 0 or (b - a) / 2 < 1e-12:\n            return c\n        if fa * fc < 0:\n            b, fb = (c, fc)\n        else:\n            a, fa = (c, fc)\n    return (a + b) / 2"], "outputs": "[[-0.4999999999997229], [1.000000000000334], [0.9999999999994458], [0.0], [-2.0000000000000018]]", "probability": 0.25, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\nfrom typing import List\n\ndef poly(xs: list, x: float):\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    degree = len(xs) - 1\n    if degree % 2 == 0:\n        raise ValueError('The polynomial must have an odd degree (even number of coefficients)')\n    if xs[-1] == 0:\n        raise ValueError('The leading coefficient must be non-zero')\n\n    def poly_val(x):\n        return poly(xs, x)\n    left = -1000.0\n    right = 1000.0\n    f_left = poly_val(left)\n    f_right = poly_val(right)\n    if f_left == 0:\n        return left\n    if f_right == 0:\n        return right\n    if f_left * f_right > 0:\n        for i in range(-1000, 1000):\n            f1 = poly_val(i)\n            f2 = poly_val(i + 1)\n            if f1 == 0:\n                return i\n            if f1 * f2 < 0:\n                left = i\n                right = i + 1\n                break\n        else:\n            raise ValueError('No root found in search interval')\n    for _ in range(100):\n        mid = (left + right) / 2\n        f_mid = poly_val(mid)\n        if abs(f_mid) < 1e-12:\n            return mid\n        if f_left * f_mid < 0:\n            right = mid\n            f_right = f_mid\n        else:\n            left = mid\n            f_left = f_mid\n    return (left + right) / 2"], "outputs": "[[-0.4999999999997229], [1.000000000000334], [0.9999999999994458], ['ValueError'], [-2.0000000000000018]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\nfrom typing import List\n\ndef find_zero(xs: List[float]) -> float:\n\n    def poly(x):\n        return sum((coeff * x ** i for i, coeff in enumerate(xs)))\n    n = len(xs) - 1\n    low, high = (-1000.0, 1000.0)\n    f_low, f_high = (poly(low), poly(high))\n    if f_low == 0:\n        return low\n    if f_high == 0:\n        return high\n    step = 0.1\n    x = low\n    while x < high:\n        if poly(x) == 0:\n            return x\n        if poly(x) * poly(x + step) < 0:\n            low, high = (x, x + step)\n            break\n        x += step\n    else:\n        return 0\n    for _ in range(100):\n        mid = (low + high) / 2\n        f_mid = poly(mid)\n        if abs(f_mid) < 1e-12:\n            return mid\n        if f_low * f_mid < 0:\n            high = mid\n            f_high = f_mid\n        else:\n            low = mid\n            f_low = f_mid\n    return (low + high) / 2"], "outputs": "[[-0.49999999999974454], [1.0000000000002554], [1.0000000000002554], [-9.765609112866725e-05], [-2.0000000000001092]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.8541966060862141, "llm_generated_inputs": "[[[1, 2]], [[-6, 11, -6, 1]], [[-1, 1]], [[0, 0, 0, 1, 0, 0]], [[2, -3, 0, 1]]]", "input_output_examples": "[[[[1, 2]], [[-6, 11, -6, 1]]], [[-0.5], [1.0]]]", "weighted_test_consistency": 0.85, "at_least_one_align": true}, "repaired_clusters": {"requirement": "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    \"\"\"\n    Given a list of coefficients xs representing a polynomial \n    p(x) = xs[0] + xs[1]*x + xs[2]*x^2 + ... + xs[n]*x^n,\n    where n = len(xs) - 1, find and return exactly one real root x0 such that p(x0) = 0.\n\n    Requirements and clarifications:\n    - The input list xs must have an even number of coefficients, i.e., len(xs) % 2 == 0.\n      This implies the polynomial degree n = len(xs) - 1 is odd, guaranteeing at least one real root.\n    - The leading coefficient xs[-1] (coefficient of the highest degree term) must be non-zero.\n    - The polynomial degree n is defined as the index of the highest-degree term with a non-zero coefficient.\n      Leading zero coefficients before the highest-degree term are allowed and should be ignored in degree determination.\n    - The function returns exactly one real root (any one root if multiple exist).\n    - The root must be computed using a numerical method that:\n        * First attempts Newton-Raphson starting from x=0 (or nearby if derivative is zero),\n        * If Newton-Raphson fails to converge within a reasonable number of iterations or derivative is zero,\n          then fallback to bisection method over an interval guaranteed to contain a root.\n    - The interval for bisection is determined using Cauchy bound:\n        R = 1 + max(abs(xs[i]/xs[-1]) for i in range(n)) (where n is the polynomial degree)\n      and searching for a sign change in p(x) over [-R, R] or expanding intervals if needed.\n    - The polynomial is evaluated as p(x) = sum(xs[i] * x^i for i in range(len(xs))).\n    - The function must raise a ValueError if:\n        * The input list length is not even,\n        * The leading coefficient xs[-1] is zero,\n        * Or if no root can be found within the search bounds.\n    - The function must achieve a precision tolerance of at least 1e-12 in the root value.\n    - The function does not require or guarantee finding all roots, only one real root.\n    - The function must handle polynomials with leading zero coefficients before the highest-degree term,\n      as long as the highest-degree coefficient is non-zero.\n\n    Examples:\n    >>> round(find_zero([1, 2]), 2)  # p(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2)  # p(x) = -6 + 11x - 6x^2 + x^3 = (x-1)(x-2)(x-3)\n    1.0\n    \"\"\"", "entry_point": "find_zero", "cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    deg = n\n    while deg > 0 and xs[deg] == 0:\n        deg -= 1\n    if deg != n:\n        n = deg\n        xs = xs[:n + 1]\n    if xs[-1] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n    if n % 2 == 0:\n        raise ValueError('Polynomial degree must be odd, given by len(xs)-1 with len(xs) even.')\n\n    def p(x: float) -> float:\n        val = 0.0\n        for i in range(len(xs)):\n            val += xs[i] * x ** i\n        return val\n\n    def dp(x: float) -> float:\n        val = 0.0\n        for i in range(1, len(xs)):\n            val += i * xs[i] * x ** (i - 1)\n        return val\n    TOL = 1e-12\n    MAX_ITER = 1000\n\n    def newton_raphson(x0: float) -> float:\n        x = x0\n        for _ in range(MAX_ITER):\n            fx = p(x)\n            if abs(fx) < TOL:\n                return x\n            dfx = dp(x)\n            if dfx == 0:\n                return None\n            dx = fx / dfx\n            x -= dx\n            if abs(dx) < TOL:\n                return x\n        return None\n    root = None\n    test_points = [0.0, 1e-06, -1e-06, 0.001, -0.001]\n    for start in test_points:\n        x0 = start\n        dfx0 = dp(x0)\n        if dfx0 == 0:\n            continue\n        root = newton_raphson(x0)\n        if root is not None:\n            fxr = p(root)\n            if abs(fxr) < TOL:\n                return root\n    leading_coef = xs[n]\n    if leading_coef == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n    R = 1 + max((abs(xs[i] / leading_coef) for i in range(n)))\n\n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    def find_sign_change_interval(left: float, right: float, max_expand=10) -> (float, float):\n        interval_left = left\n        interval_right = right\n        steps = 100\n        xsamples = [interval_left + i * (interval_right - interval_left) / steps for i in range(steps + 1)]\n        pvalues = [p(x) for x in xsamples]\n        for i in range(steps):\n            if sign(pvalues[i]) * sign(pvalues[i + 1]) < 0:\n                return (xsamples[i], xsamples[i + 1])\n        expand_factor = 2\n        attempts = 0\n        while attempts < max_expand:\n            interval_left *= -expand_factor\n            interval_right *= expand_factor\n            xsamples = [interval_left + i * (interval_right - interval_left) / steps for i in range(steps + 1)]\n            pvalues = [p(x) for x in xsamples]\n            for i in range(steps):\n                if sign(pvalues[i]) * sign(pvalues[i + 1]) < 0:\n                    return (xsamples[i], xsamples[i + 1])\n            attempts += 1\n            expand_factor *= 2\n        return None\n    interval = find_sign_change_interval(-R, R)\n    if interval is None:\n        raise ValueError('No root found within search bounds.')\n    a, b = interval\n    fa = p(a)\n    fb = p(b)\n    if sign(fa) == 0:\n        return a\n    if sign(fb) == 0:\n        return b\n    if sign(fa) * sign(fb) > 0:\n        raise ValueError('No sign change found in interval for bisection.')\n    for _ in range(MAX_ITER):\n        c = 0.5 * (a + b)\n        fc = p(c)\n        if abs(fc) < TOL or (b - a) / 2 < TOL:\n            return c\n        if sign(fc) * sign(fa) < 0:\n            b = c\n            fb = fc\n        else:\n            a = c\n            fa = fc\n    raise ValueError('Failed to find root with required precision.')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n > 0 and abs(xs[n]) < 1e-15:\n        n -= 1\n    if n < 0:\n        raise ValueError('Polynomial degree is negative.')\n    if abs(xs[n]) < 1e-15:\n        raise ValueError('Leading coefficient must be non-zero.')\n    xs_trimmed = xs[:n + 1]\n\n    def p(x: float) -> float:\n        val = 0.0\n        xi = 1.0\n        for c in xs_trimmed:\n            val += c * xi\n            xi *= x\n        return val\n\n    def dp(x: float) -> float:\n        val = 0.0\n        xi = 1.0\n        for i in range(1, n + 1):\n            val += i * xs_trimmed[i] * xi\n            xi *= x\n        return val\n    tol = 1e-12\n    max_iter = 1000\n    x = 0.0\n    fval = p(x)\n    dval = dp(x)\n    if abs(dval) < 1e-15:\n        found_dx = False\n        for shift in [1e-06, -1e-06, 0.0001, -0.0001, 0.01, -0.01, 1, -1]:\n            dval_try = dp(shift)\n            if abs(dval_try) > 1e-15:\n                x = shift\n                fval = p(x)\n                dval = dval_try\n                found_dx = True\n                break\n        if not found_dx:\n            dval = 0.0\n    success = False\n    for _ in range(max_iter):\n        if abs(fval) < tol:\n            success = True\n            break\n        if abs(dval) < 1e-15:\n            break\n        xn = x - fval / dval\n        if abs(xn - x) < tol:\n            x = xn\n            success = True\n            break\n        x = xn\n        fval = p(x)\n        dval = dp(x)\n    if success:\n        return x\n    R = 1.0 + max((abs(xs_trimmed[i] / xs_trimmed[n]) for i in range(n)))\n\n    def sign(num):\n        return 1 if num > 0 else -1 if num < 0 else 0\n    left, right = (-R, R)\n    pl, pr = (p(left), p(right))\n    max_expand = 1000000.0\n    expand_factor = 2.0\n    while sign(pl) == sign(pr) and abs(left) < max_expand and (abs(right) < max_expand):\n        left *= expand_factor\n        right *= expand_factor\n        pl = p(left)\n        pr = p(right)\n    if sign(pl) == sign(pr):\n        raise ValueError('No root found within the search bounds.')\n    for _ in range(max_iter):\n        mid = (left + right) / 2\n        pm = p(mid)\n        if abs(pm) < tol or (right - left) / 2 < tol:\n            return mid\n        if sign(pm) == sign(pl):\n            left = mid\n            pl = pm\n        else:\n            right = mid\n            pr = pm\n    raise ValueError('Failed to converge to root.')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n > 0 and xs[n] == 0:\n        n -= 1\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n    degree = n\n    leading_coeff = xs[degree]\n    if leading_coeff == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n    tol = 1e-12\n    max_iter = 1000\n\n    def p(x: float) -> float:\n        res = 0.0\n        for i in range(degree + 1):\n            res += xs[i] * x ** i\n        return res\n\n    def p_prime(x: float) -> float:\n        res = 0.0\n        for i in range(1, degree + 1):\n            res += i * xs[i] * x ** (i - 1)\n        return res\n\n    def newton_raphson(start: float) -> float:\n        x = start\n        for _ in range(max_iter):\n            f = p(x)\n            if abs(f) < tol:\n                return x\n            df = p_prime(x)\n            if df == 0:\n                return None\n            x_new = x - f / df\n            if abs(x_new - x) < tol:\n                return x_new\n            x = x_new\n        return None\n    root = None\n    df0 = p_prime(0)\n    if df0 == 0:\n        shifted_start_points = [1e-06, -1e-06, 0.001, -0.001, 0.1, -0.1]\n        for s in shifted_start_points:\n            root = newton_raphson(s)\n            if root is not None:\n                break\n    else:\n        root = newton_raphson(0)\n    if root is not None:\n        return root\n    R = 1 + max((abs(xs[i] / leading_coeff) for i in range(degree)))\n\n    def sign(x: float) -> int:\n        val = p(x)\n        if val > 0:\n            return 1\n        elif val < 0:\n            return -1\n        else:\n            return 0\n    left = -R\n    right = R\n    max_expand = 50\n    found_interval = False\n    for _ in range(max_expand):\n        fl = sign(left)\n        fr = sign(right)\n        if fl == 0:\n            return left\n        if fr == 0:\n            return right\n        if fl * fr < 0:\n            found_interval = True\n            break\n        left *= 2\n        right *= 2\n    if not found_interval:\n        raise ValueError('Cannot find root within search bounds.')\n    for _ in range(max_iter):\n        mid = (left + right) / 2\n        fmid = p(mid)\n        if abs(fmid) < tol or (right - left) / 2 < tol:\n            return mid\n        fl = p(left)\n        if fl * fmid < 0:\n            right = mid\n        else:\n            left = mid\n    raise ValueError('Root not found within maximum iterations.')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    import math\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n > 0 and xs[n] == 0:\n        n -= 1\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient cannot be zero.')\n    xs = xs[:n + 1]\n\n    def p(x):\n        res = 0.0\n        power = 1.0\n        for coef in xs:\n            res += coef * power\n            power *= x\n        return res\n\n    def dp(x):\n        res = 0.0\n        power = 1.0\n        for i in range(1, len(xs)):\n            power *= x\n            res += i * xs[i] * power / x if x != 0 else i * xs[i] * (0 if i == 0 else x ** (i - 1))\n        return res\n\n    def dp2(x):\n        res = 0.0\n        for i in range(2, len(xs)):\n            res += i * (i - 1) * xs[i] * x ** (i - 2)\n        return res\n\n    def dp(x):\n        res = 0.0\n        power = 1.0\n        for i in range(1, len(xs)):\n            res += i * xs[i] * x ** (i - 1)\n        return res\n\n    def newton_raphson(x0, max_iter=1000, tol=1e-14):\n        x = x0\n        for _ in range(max_iter):\n            fx = p(x)\n            if abs(fx) < tol:\n                return x\n            dfx = dp(x)\n            if abs(dfx) < 1e-16:\n                return None\n            x_new = x - fx / dfx\n            if abs(x_new - x) < tol:\n                return x_new\n            x = x_new\n        return None\n    starts = [0]\n    if abs(dp(0)) < 1e-16:\n        starts = [1e-06, -1e-06, 0.001, -0.001, 1.0, -1.0]\n    root = None\n    for start in starts:\n        root = newton_raphson(start)\n        if root is not None:\n            if abs(p(root)) < 1e-12:\n                return root\n    R = 1 + max((abs(xs[i] / xs[n]) for i in range(n)))\n    left, right = (-R, R)\n\n    def bisection(a, b, max_iter=1000, tol=1e-14):\n        fa = p(a)\n        fb = p(b)\n        if fa * fb > 0:\n            return None\n        for _ in range(max_iter):\n            c = (a + b) / 2\n            fc = p(c)\n            if abs(fc) < tol or (b - a) / 2 < tol:\n                return c\n            if fa * fc <= 0:\n                b = c\n                fb = fc\n            else:\n                a = c\n                fa = fc\n        return None\n    fa = p(left)\n    fb = p(right)\n    if fa * fb < 0:\n        root = bisection(left, right)\n        if root is not None:\n            return root\n    factor = 2\n    max_expand = 20\n    for _ in range(max_expand):\n        left *= factor\n        right *= factor\n        fa = p(left)\n        fb = p(right)\n        if fa * fb < 0:\n            root = bisection(left, right)\n            if root is not None:\n                return root\n    raise ValueError('No root found within search bounds.')"], "outputs": "[[-0.5], [1.0000000000000007], [1.0], [1e-06], [0.9999994379356809]]", "probability": 0.2, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even')\n    n = len(xs) - 1\n    while n > 0 and xs[n] == 0:\n        n -= 1\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient must be non-zero')\n    xs = xs[:n + 1]\n    degree = n\n    leading_coeff = xs[-1]\n    if leading_coeff == 0:\n        raise ValueError('Leading coefficient must be non-zero')\n\n    def p(x: float) -> float:\n        result = 0.0\n        for i, coeff in enumerate(xs):\n            result += coeff * x ** i\n        return result\n\n    def dp(x: float) -> float:\n        result = 0.0\n        for i in range(1, len(xs)):\n            result += i * xs[i] * x ** (i - 1)\n        return result\n    MAX_ITER = 1000\n    TOL = 1e-12\n    x0 = 0.0\n    initial_offsets = [0.0, 1e-05, -1e-05, 0.0001, -0.0001, 0.1, -0.1]\n    root = None\n    for offset in initial_offsets:\n        x = offset\n        for _ in range(MAX_ITER):\n            y = p(x)\n            if abs(y) < TOL:\n                root = x\n                break\n            yprime = dp(x)\n            if abs(yprime) < 1e-15:\n                break\n            x_new = x - y / yprime\n            if abs(x_new - x) < TOL:\n                root = x_new\n                break\n            x = x_new\n        if root is not None:\n            break\n    if root is not None:\n        return root\n    R = 1 + max((abs(xs[i] / leading_coeff) for i in range(degree)))\n\n    def sign(x: float) -> int:\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n    left = -R\n    right = R\n    max_expand = 100\n    expand_factor = 2\n    pl = p(left)\n    pr = p(right)\n    for _ in range(max_expand):\n        if sign(pl) == 0:\n            return left\n        if sign(pr) == 0:\n            return right\n        if sign(pl) * sign(pr) < 0:\n            break\n        left *= expand_factor\n        right *= expand_factor\n        pl = p(left)\n        pr = p(right)\n    else:\n        raise ValueError('No root found within search bounds')\n    a, b = (left, right)\n    fa, fb = (pl, pr)\n    steps = 50\n    xs_bisect = [a + i * (b - a) / steps for i in range(steps + 1)]\n    for i in range(steps):\n        fa_i = p(xs_bisect[i])\n        fb_i = p(xs_bisect[i + 1])\n        if sign(fa_i) == 0:\n            return xs_bisect[i]\n        if sign(fb_i) == 0:\n            return xs_bisect[i + 1]\n        if sign(fa_i) * sign(fb_i) < 0:\n            a = xs_bisect[i]\n            b = xs_bisect[i + 1]\n            fa = fa_i\n            fb = fb_i\n            break\n    else:\n        raise ValueError('No root found within search bounds')\n    for _ in range(MAX_ITER):\n        c = (a + b) / 2\n        fc = p(c)\n        if abs(fc) < TOL or (b - a) / 2 < TOL:\n            return c\n        if sign(fc) == 0:\n            return c\n        if sign(fa) * sign(fc) < 0:\n            b = c\n            fb = fc\n        else:\n            a = c\n            fa = fc\n    raise ValueError('Root not found within the maximum iterations')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    import math\n    if len(xs) % 2 != 0:\n        raise ValueError('Length of coefficients list must be even.')\n    n = len(xs) - 1\n    while n > 0 and xs[n] == 0:\n        n -= 1\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n\n    def p(x: float) -> float:\n        val = 0.0\n        for i in range(n + 1):\n            val += xs[i] * x ** i\n        return val\n    dxs = [i * xs[i] for i in range(1, n + 1)]\n\n    def dp(x: float) -> float:\n        val = 0.0\n        for i in range(n):\n            val += dxs[i] * x ** i\n        return val\n\n    def newton_raphson(x0: float, max_iter=1000, tol=1e-14) -> float:\n        x = x0\n        for _ in range(max_iter):\n            px = p(x)\n            if abs(px) < tol:\n                return x\n            dpx = dp(x)\n            if abs(dpx) < 1e-16:\n                break\n            x_new = x - px / dpx\n            if abs(x_new - x) < tol:\n                return x_new\n            x = x_new\n        raise RuntimeError('Newton-Raphson did not converge')\n    try:\n        x_candidate = newton_raphson(0.0)\n        return x_candidate\n    except RuntimeError:\n        pass\n    except ZeroDivisionError:\n        pass\n    for shift in [0.001, -0.001, 0.01, -0.01]:\n        try:\n            x_candidate = newton_raphson(shift)\n            return x_candidate\n        except RuntimeError:\n            continue\n        except ZeroDivisionError:\n            continue\n    cauchy_bounds = [abs(xs[i] / xs[n]) for i in range(n)]\n    R = 1.0 + (max(cauchy_bounds) if cauchy_bounds else 0.0)\n    left, right = (-R, R)\n    pl, pr = (p(left), p(right))\n    max_expand = 50\n    expand_factor = 2.0\n\n    def sign(x: float) -> int:\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n\n    def find_sign_change_interval():\n        nonlocal left, right, pl, pr\n        for _ in range(max_expand):\n            if sign(pl) == 0:\n                return (left, left)\n            if sign(pr) == 0:\n                return (right, right)\n            if sign(pl) != sign(pr):\n                return (left, right)\n            if abs(pl) > abs(pr):\n                right *= expand_factor\n                pr = p(right)\n            else:\n                left *= expand_factor\n                pl = p(left)\n        return None\n    interval = find_sign_change_interval()\n    if interval is None:\n        raise ValueError('No root found within search bounds.')\n    if interval[0] == interval[1]:\n        return interval[0]\n    a, b = interval\n    fa, fb = (p(a), p(b))\n    if sign(fa) == 0:\n        return a\n    if sign(fb) == 0:\n        return b\n    if sign(fa) == sign(fb):\n        raise ValueError('No root in interval for bisection.')\n    tol = 1e-13\n    max_iter = 1000\n    for _ in range(max_iter):\n        c = (a + b) / 2\n        fc = p(c)\n        if abs(fc) < tol or (b - a) / 2 < tol:\n            return c\n        if sign(fc) == sign(fa):\n            a, fa = (c, fc)\n        else:\n            b, fb = (c, fc)\n    raise ValueError('Bisection method did not converge.')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n >= 0 and xs[n] == 0:\n        n -= 1\n    if n == -1:\n        raise ValueError('Polynomial is zero.')\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n    xs_trimmed = xs[:n + 1]\n\n    def p(x):\n        val = 0.0\n        power = 1.0\n        for coeff in xs_trimmed:\n            val += coeff * power\n            power *= x\n        return val\n\n    def dp(x):\n        val = 0.0\n        power = 1.0\n        for i in range(1, n + 1):\n            val += i * xs_trimmed[i] * power\n            power *= x\n        return val\n    tol = 1e-12\n    max_iter = 100\n\n    def newton_raphson(x0):\n        x = x0\n        for _ in range(max_iter):\n            fx = p(x)\n            dfx = dp(x)\n            if abs(dfx) < 1e-14:\n                return None\n            x_new = x - fx / dfx\n            if abs(x_new - x) < tol:\n                if abs(p(x_new)) < tol:\n                    return x_new\n                else:\n                    return None\n            x = x_new\n        return None\n    root = newton_raphson(0.0)\n    if root is not None:\n        return root\n    tries = [1e-06, -1e-06, 0.001, -0.001, 1.0, -1.0]\n    for t in tries:\n        root = newton_raphson(t)\n        if root is not None:\n            return root\n    leading_coeff = xs_trimmed[n]\n    R = 1.0 + max((abs(xs_trimmed[i] / leading_coeff) for i in range(n)))\n\n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n    a, b = (-R, R)\n    fa, fb = (p(a), p(b))\n    expand_factor = 2.0\n    max_expansion = 50\n    expansions = 0\n    while sign(fa) == sign(fb) and expansions < max_expansion:\n        a *= expand_factor\n        b *= expand_factor\n        fa, fb = (p(a), p(b))\n        expansions += 1\n    if sign(fa) == sign(fb):\n        raise ValueError('Cannot find sign change interval containing a root.')\n    low, high = (a, b)\n    for _ in range(max_iter * 10):\n        mid = 0.5 * (low + high)\n        fmid = p(mid)\n        if abs(fmid) < tol:\n            return mid\n        if sign(fmid) == sign(fa):\n            low = mid\n            fa = fmid\n        else:\n            high = mid\n            fb = fmid\n        if abs(high - low) < tol:\n            return 0.5 * (low + high)\n    raise ValueError('Failed to find root with bisection method within tolerance.')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('The length of xs must be even.')\n    n = len(xs) - 1\n    while n >= 0 and xs[n] == 0:\n        n -= 1\n    if n == -1:\n        raise ValueError('Polynomial is zero everywhere (all coefficients zero).')\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient must be nonzero.')\n    leading_coefficient = xs[n]\n\n    def p(x):\n        result = 0.0\n        x_power = 1.0\n        for i in range(n + 1):\n            result += xs[i] * x_power\n            x_power *= x\n        return result\n\n    def dp(x):\n        result = 0.0\n        x_power = 1.0\n        for i in range(1, n + 1):\n            result += i * xs[i] * x_power\n            x_power *= x\n        return result\n    TOL = 1e-12\n    MAX_NEWTON_ITER = 100\n    MAX_BISECT_ITER = 200\n\n    def newton_raphson(initial):\n        x = initial\n        for _ in range(MAX_NEWTON_ITER):\n            px = p(x)\n            dpx = dp(x)\n            if abs(px) < TOL:\n                return x\n            if abs(dpx) < 1e-16:\n                break\n            x_next = x - px / dpx\n            if abs(x_next - x) < TOL:\n                return x_next\n            x = x_next\n        return None\n    root = newton_raphson(0.0)\n    if root is not None:\n        return root\n    d0 = dp(0.0)\n    if abs(d0) < 1e-16:\n        step = 0.01\n        tried_points = [step, -step, 2 * step, -2 * step, 3 * step, -3 * step]\n        for start in tried_points:\n            root = newton_raphson(start)\n            if root is not None:\n                return root\n    max_ratio = 0.0\n    for i in range(n):\n        ratio = abs(xs[i] / leading_coefficient)\n        if ratio > max_ratio:\n            max_ratio = ratio\n    R = 1 + max_ratio\n    left, right = (-R, R)\n\n    def sign(x):\n        val = p(x)\n        if abs(val) < TOL:\n            return 0\n        return 1 if val > 0 else -1\n    left_sign = sign(left)\n    right_sign = sign(right)\n    EXPAND_LIMIT = 100\n    expand_factor = 2\n    expand_count = 0\n    while left_sign == right_sign and expand_count < EXPAND_LIMIT:\n        left *= expand_factor\n        right *= expand_factor\n        left_sign = sign(left)\n        right_sign = sign(right)\n        expand_count += 1\n    if left_sign == right_sign:\n        raise ValueError('No root found within search bounds.')\n    for _ in range(MAX_BISECT_ITER):\n        mid = (left + right) / 2\n        pmid = p(mid)\n        if abs(pmid) < TOL:\n            return mid\n        mid_sign = 1 if pmid > 0 else -1\n        if mid_sign == left_sign:\n            left = mid\n            left_sign = mid_sign\n        else:\n            right = mid\n            right_sign = mid_sign\n        if right - left < TOL:\n            return (left + right) / 2\n    raise ValueError('Failed to converge to a root within tolerance.')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    import math\n    TOL = 1e-12\n    MAX_ITER = 1000\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length is not even.')\n    if len(xs) == 0:\n        raise ValueError('Input list is empty.')\n    n = len(xs) - 1\n    while n >= 0 and abs(xs[n]) < 1e-16:\n        n -= 1\n    if n < 0:\n        raise ValueError('No non-zero coefficients found.')\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient is zero.')\n    coeffs = xs[:n + 1]\n\n    def p(x):\n        res = 0.0\n        for coef in reversed(coeffs):\n            res = res * x + coef\n        return res\n\n    def dp(x):\n        res = 0.0\n        for i in range(n, 0, -1):\n            res = res * x + i * coeffs[i]\n        return res\n\n    def newton_raphson(start):\n        x = start\n        for _ in range(MAX_ITER):\n            px = p(x)\n            if abs(px) < TOL:\n                return x\n            dpx = dp(x)\n            if abs(dpx) < 1e-16:\n                return None\n            x_new = x - px / dpx\n            if abs(x_new - x) < TOL:\n                return x_new\n            x = x_new\n        return None\n    root = newton_raphson(0.0)\n    if root is None:\n        for start in [1e-06, -1e-06, 0.001, -0.001]:\n            root = newton_raphson(start)\n            if root is not None:\n                break\n    if root is not None:\n        return root\n    R = 1 + max((abs(coeffs[i] / coeffs[n]) for i in range(n)))\n\n    def sign(val):\n        if val > 0:\n            return 1\n        elif val < 0:\n            return -1\n        else:\n            return 0\n    left, right = (-R, R)\n    step = R / 2\n    max_expand_iter = 20\n    for expand_iter in range(max_expand_iter + 1):\n        xs_bisect = []\n        interval_min = left\n        interval_max = right\n        num_steps = int(math.ceil((interval_max - interval_min) / step))\n        points = [interval_min + i * step for i in range(num_steps + 1)]\n        values = [p(xi) for xi in points]\n        found_interval = False\n        for i in range(len(points) - 1):\n            s1 = sign(values[i])\n            s2 = sign(values[i + 1])\n            if s1 == 0:\n                return points[i]\n            if s2 == 0:\n                return points[i + 1]\n            if s1 != s2:\n                left = points[i]\n                right = points[i + 1]\n                found_interval = True\n                break\n        if found_interval:\n            break\n        else:\n            step *= 2\n            left -= step\n            right += step\n    else:\n        raise ValueError('No root found within search bounds.')\n    a, b = (left, right)\n    fa = p(a)\n    fb = p(b)\n    if sign(fa) == 0:\n        return a\n    if sign(fb) == 0:\n        return b\n    if sign(fa) * sign(fb) > 0:\n        raise ValueError('No root found in final interval.')\n    for _ in range(MAX_ITER):\n        c = (a + b) / 2\n        fc = p(c)\n        if abs(fc) < TOL or (b - a) / 2 < TOL:\n            return c\n        if sign(fc) * sign(fa) < 0:\n            b = c\n            fb = fc\n        else:\n            a = c\n            fa = fc\n    raise ValueError('No root found within max iterations.')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n >= 0 and abs(xs[n]) < 1e-16:\n        n -= 1\n    if n < 0:\n        raise ValueError('Polynomial is zero.')\n    if abs(xs[n]) < 1e-16:\n        raise ValueError('Leading coefficient is zero.')\n    leading_coeff = xs[n]\n    if abs(leading_coeff) < 1e-16:\n        raise ValueError('Leading coefficient is zero.')\n    if n < 0:\n        raise ValueError('No valid polynomial found.')\n\n    def p(x: float) -> float:\n        result = 0.0\n        for i in range(n + 1):\n            result += xs[i] * x ** i\n        return result\n\n    def dp(x: float) -> float:\n        result = 0.0\n        for i in range(1, n + 1):\n            result += i * xs[i] * x ** (i - 1)\n        return result\n    if abs(xs[n]) < 1e-16:\n        raise ValueError('Leading coefficient must be non-zero.')\n    MAX_ITER = 100\n    TOL = 1e-12\n    x = 0.0\n    if abs(dp(x)) < 1e-16:\n        x = 0.0001\n    for _ in range(MAX_ITER):\n        px = p(x)\n        dpx = dp(x)\n        if abs(dpx) < 1e-16:\n            break\n        x_new = x - px / dpx\n        if abs(x_new - x) < TOL and abs(p(x_new)) < TOL:\n            return x_new\n        x = x_new\n    max_ratio = 0.0\n    for i in range(n):\n        if abs(xs[i]) > 1e-16:\n            ratio = abs(xs[i] / xs[n])\n            if ratio > max_ratio:\n                max_ratio = ratio\n    R = 1 + max_ratio\n\n    def find_sign_change_interval():\n        left = -R\n        right = R\n        pl = p(left)\n        pr = p(right)\n        if abs(pl) < TOL:\n            return (left, left)\n        if abs(pr) < TOL:\n            return (right, right)\n        if pl * pr < 0:\n            return (left, right)\n        factor = 2.0\n        limit = 1000000.0\n        curr_left = left\n        curr_right = right\n        for _ in range(50):\n            curr_left *= factor\n            curr_right *= factor\n            pl = p(curr_left)\n            pr = p(curr_right)\n            if abs(pl) < TOL:\n                return (curr_left, curr_left)\n            if abs(pr) < TOL:\n                return (curr_right, curr_right)\n            if pl * pr < 0:\n                return (curr_left, curr_right)\n            if abs(curr_left) > limit or abs(curr_right) > limit:\n                break\n        return None\n    interval = find_sign_change_interval()\n    if interval is None:\n        raise ValueError('No root found within search bounds.')\n    a, b = interval\n    pa = p(a)\n    pb = p(b)\n    if a == b:\n        return a\n    for _ in range(200):\n        c = (a + b) / 2\n        pc = p(c)\n        if abs(pc) < TOL or (b - a) / 2 < TOL:\n            return c\n        if pa * pc < 0:\n            b = c\n            pb = pc\n        else:\n            a = c\n            pa = pc\n    c = (a + b) / 2\n    if abs(p(c)) < TOL:\n        return c\n    raise ValueError('No root found within search bounds.')", "from typing import List\nimport math\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    if len(xs) == 0:\n        raise ValueError('Input list cannot be empty.')\n    n = len(xs) - 1\n    while n > 0 and xs[n] == 0:\n        n -= 1\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n    leading_coeff = xs[n]\n\n    def poly_val(x: float) -> float:\n        result = 0.0\n        xn = 1.0\n        for i in range(len(xs)):\n            result += xs[i] * xn\n            xn *= x\n        return result\n\n    def poly_deriv_val(x: float) -> float:\n        result = 0.0\n        xn = 1.0\n        for i in range(1, len(xs)):\n            result += i * xs[i] * xn\n            xn *= x\n        return result\n    MAX_ITER = 1000\n    TOL = 1e-12\n\n    def newton_raphson(x0: float) -> float:\n        x = x0\n        for _ in range(MAX_ITER):\n            fx = poly_val(x)\n            if abs(fx) < TOL:\n                return x\n            dfx = poly_deriv_val(x)\n            if dfx == 0:\n                return None\n            x_new = x - fx / dfx\n            if abs(x_new - x) < TOL:\n                return x_new\n            x = x_new\n        return None\n    root = newton_raphson(0.0)\n    if root is None:\n        offsets = [1e-06, -1e-06, 0.001, -0.001, 1, -1, 10, -10]\n        for off in offsets:\n            root = newton_raphson(off)\n            if root is not None:\n                break\n    if root is None:\n        R = 1.0\n        for i in range(n):\n            if xs[i] != 0:\n                val = abs(xs[i] / leading_coeff)\n                if val > R - 1:\n                    R = 1 + val\n\n        def find_sign_change_interval():\n            steps = 1000\n            x_low = -R\n            f_low = poly_val(x_low)\n            for i in range(1, steps + 1):\n                x_high = -R + i * (2 * R / steps)\n                f_high = poly_val(x_high)\n                if f_low * f_high <= 0:\n                    return (x_low, x_high)\n                x_low, f_low = (x_high, f_high)\n            return None\n        interval = find_sign_change_interval()\n        expands = 0\n        while interval is None and expands < 10:\n            R *= 2\n            interval = find_sign_change_interval()\n            expands += 1\n        if interval is None:\n            raise ValueError('No root found within search bounds.')\n        a, b = interval\n        fa = poly_val(a)\n        fb = poly_val(b)\n        if fa == 0:\n            root = a\n        elif fb == 0:\n            root = b\n        else:\n            for _ in range(MAX_ITER):\n                c = (a + b) / 2\n                fc = poly_val(c)\n                if abs(fc) < TOL or (b - a) / 2 < TOL:\n                    root = c\n                    break\n                if fa * fc < 0:\n                    b, fb = (c, fc)\n                else:\n                    a, fa = (c, fc)\n            else:\n                raise ValueError('Bisection method did not converge.')\n    return root", "from typing import List\nimport math\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Length of coefficient list must be even.')\n    n = len(xs) - 1\n    while n > 0 and xs[n] == 0:\n        n -= 1\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n    leading_coeff = xs[n]\n\n    def p(x: float) -> float:\n        val = 0.0\n        for i in range(n + 1):\n            val += xs[i] * x ** i\n        return val\n\n    def dp(x: float) -> float:\n        val = 0.0\n        for i in range(1, n + 1):\n            val += i * xs[i] * x ** (i - 1)\n        return val\n\n    def newton_raphson(x0: float, tol=1e-12, max_iter=1000) -> float:\n        x = x0\n        for _ in range(max_iter):\n            fx = p(x)\n            if abs(fx) < tol:\n                return x\n            dfx = dp(x)\n            if dfx == 0:\n                return None\n            x_new = x - fx / dfx\n            if abs(x_new - x) < tol:\n                return x_new\n            x = x_new\n        return None\n\n    def try_newton():\n        start_points = [0.0, 1e-06, -1e-06, 0.001, -0.001]\n        for sp in start_points:\n            root = newton_raphson(sp)\n            if root is not None:\n                return root\n        return None\n    root = try_newton()\n    if root is not None:\n        return root\n    max_ratio = 0.0\n    for i in range(n):\n        ratio = abs(xs[i] / leading_coeff)\n        if ratio > max_ratio:\n            max_ratio = ratio\n    R = 1 + max_ratio\n\n    def bisection(a: float, b: float, tol=1e-12, max_iter=1000) -> float:\n        fa = p(a)\n        fb = p(b)\n        if fa == 0:\n            return a\n        if fb == 0:\n            return b\n        if fa * fb > 0:\n            return None\n        for _ in range(max_iter):\n            c = (a + b) / 2\n            fc = p(c)\n            if abs(fc) < tol or (b - a) / 2 < tol:\n                return c\n            if fa * fc < 0:\n                b = c\n                fb = fc\n            else:\n                a = c\n                fa = fc\n        return None\n\n    def find_interval_with_root(R_init):\n        R_cur = R_init\n        max_expand = 50\n        for _ in range(max_expand):\n            left = -R_cur\n            right = R_cur\n            step = R_cur / 10\n            x1 = left\n            f1 = p(x1)\n            found = False\n            for i in range(1, 11):\n                x2 = left + i * step\n                f2 = p(x2)\n                if f1 * f2 <= 0:\n                    return (x1, x2)\n                x1, f1 = (x2, f2)\n            R_cur *= 2\n        return None\n    interval = find_interval_with_root(R)\n    if interval is None:\n        raise ValueError('No root found within search bounds.')\n    root = bisection(interval[0], interval[1])\n    if root is None:\n        raise ValueError('No root found within search bounds.')\n    return root", "from typing import List\nimport math\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n >= 0 and xs[n] == 0:\n        n -= 1\n    if n < 0:\n        raise ValueError('Leading coefficient cannot be zero (polynomial is zero).')\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient cannot be zero.')\n    degree = n\n    if xs[degree] == 0:\n        raise ValueError('Leading coefficient cannot be zero.')\n\n    def p(x: float) -> float:\n        val = 0.0\n        power = 1.0\n        for i in range(len(xs)):\n            val += xs[i] * power\n            power *= x\n        return val\n\n    def dp(x: float) -> float:\n        val = 0.0\n        power = 1.0\n        for i in range(1, len(xs)):\n            val += i * xs[i] * power\n            power *= x\n        return val\n    TOL = 1e-12\n    MAX_ITER = 1000\n\n    def newton_raphson(x0: float) -> float:\n        x = x0\n        for _ in range(MAX_ITER):\n            fx = p(x)\n            if abs(fx) < TOL:\n                return x\n            dfx = dp(x)\n            if dfx == 0:\n                return None\n            x_new = x - fx / dfx\n            if abs(x_new - x) < TOL:\n                return x_new\n            x = x_new\n        return None\n    root = newton_raphson(0.0)\n    if root is not None:\n        return root\n    for start in [0.0001, -0.0001, 0.001, -0.001, 0.01, -0.01]:\n        root = newton_raphson(start)\n        if root is not None:\n            return root\n    R = 1 + max((abs(xs[i] / xs[degree]) for i in range(degree)))\n\n    def sign(x: float) -> int:\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n    a, b = (-R, R)\n    fa, fb = (p(a), p(b))\n    if abs(fa) < TOL:\n        return a\n    if abs(fb) < TOL:\n        return b\n    if sign(fa) * sign(fb) > 0:\n        limit = 1000000.0\n        for factor in [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048]:\n            a_exp, b_exp = (-R * factor, R * factor)\n            fa, fb = (p(a_exp), p(b_exp))\n            if abs(fa) < TOL:\n                return a_exp\n            if abs(fb) < TOL:\n                return b_exp\n            if sign(fa) * sign(fb) <= 0:\n                a, b = (a_exp, b_exp)\n                break\n            if R * factor > limit:\n                break\n        else:\n            raise ValueError('No root found within search bounds.')\n    fa, fb = (p(a), p(b))\n    for _ in range(MAX_ITER):\n        c = (a + b) / 2\n        fc = p(c)\n        if abs(fc) < TOL:\n            return c\n        if sign(fc) == sign(fa):\n            a, fa = (c, fc)\n        else:\n            b, fb = (c, fc)\n        if abs(b - a) < TOL:\n            return (a + b) / 2\n    raise ValueError('No root found within search bounds.')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    import math\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n >= 0 and xs[n] == 0:\n        n -= 1\n    if n == -1:\n        raise ValueError('Polynomial is zero, no nonzero leading coefficient.')\n    leading_coef = xs[n]\n    if leading_coef == 0:\n        raise ValueError('Leading coefficient must be nonzero.')\n    coeffs = xs[:n + 1]\n\n    def p(x: float) -> float:\n        val = 0.0\n        for i, c in enumerate(coeffs):\n            val += c * x ** i\n        return val\n\n    def dp(x: float) -> float:\n        val = 0.0\n        for i in range(1, len(coeffs)):\n            val += i * coeffs[i] * x ** (i - 1)\n        return val\n\n    def newton_raphson(x0: float, max_iter=1000, tol=1e-13):\n        x = x0\n        for _ in range(max_iter):\n            fx = p(x)\n            dfx = dp(x)\n            if abs(dfx) < 1e-15:\n                return None\n            x_new = x - fx / dfx\n            if abs(x_new - x) < tol and abs(p(x_new)) < tol:\n                return x_new\n            x = x_new\n        return None\n\n    def find_nonzero_derivative_start():\n        for delta in (0.1, -0.1, 0.01, -0.01, 0.001, -0.001, 0.0001, -0.0001):\n            dfx = dp(delta)\n            if abs(dfx) > 1e-15:\n                return delta\n        return None\n    dfx0 = dp(0)\n    if abs(dfx0) < 1e-15:\n        alt_start = find_nonzero_derivative_start()\n        if alt_start is None:\n            newton_root = None\n        else:\n            newton_root = newton_raphson(alt_start)\n    else:\n        newton_root = newton_raphson(0)\n    if newton_root is not None and abs(p(newton_root)) < 1e-12:\n        return newton_root\n    abs_ratios = [abs(coeffs[i] / leading_coef) for i in range(n)]\n    R = 1 + max(abs_ratios) if abs_ratios else 1\n\n    def find_sign_change_interval(R):\n        max_expansions = 50\n        step = R\n        left = -R\n        right = R\n        PL = p(left)\n        PR = p(right)\n        if PL == 0:\n            return (left, left)\n        if PR == 0:\n            return (right, right)\n        if PL * PR < 0:\n            return (left, right)\n        for i in range(max_expansions):\n            left_new = left - step\n            right_new = right + step\n            PL_new = p(left_new)\n            PR_new = p(right_new)\n            if PL_new == 0:\n                return (left_new, left_new)\n            if PR_new == 0:\n                return (right_new, right_new)\n            if PL_new * PL < 0:\n                return (left_new, left)\n            if PR_new * PR < 0:\n                return (right, right_new)\n            left, PL = (left_new, PL_new)\n            right, PR = (right_new, PR_new)\n        return None\n    interval = find_sign_change_interval(R)\n    if interval is None:\n        raise ValueError('No root found within searched bounds.')\n    a, b = interval\n    if abs(a - b) < 1e-15:\n        possible_root = a\n        if abs(p(possible_root)) < 1e-12:\n            return possible_root\n        else:\n            raise ValueError('No root found within searched bounds.')\n\n    def bisection(a, b, tol=1e-13, max_iter=1000):\n        fa = p(a)\n        fb = p(b)\n        if fa == 0:\n            return a\n        if fb == 0:\n            return b\n        if fa * fb > 0:\n            return None\n        for _ in range(max_iter):\n            c = (a + b) / 2\n            fc = p(c)\n            if abs(fc) < tol or (b - a) / 2 < tol:\n                return c\n            if fa * fc < 0:\n                b = c\n                fb = fc\n            else:\n                a = c\n                fa = fc\n        return (a + b) / 2\n    root = bisection(a, b)\n    if root is None or abs(p(root)) > 1e-12:\n        raise ValueError('No root found within searched bounds.')\n    return root", "from typing import List\nimport math\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n > 0 and abs(xs[n]) < 1e-15:\n        n -= 1\n    if n == 0 and abs(xs[0]) < 1e-15:\n        raise ValueError('Polynomial is zero.')\n    if abs(xs[n]) < 1e-15:\n        raise ValueError('Leading coefficient must be non-zero.')\n    xs = xs[:n + 1]\n    leading_coefficient = xs[-1]\n    if abs(leading_coefficient) < 1e-15:\n        raise ValueError('Leading coefficient must be non-zero.')\n\n    def p(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for coeff in xs:\n            result += coeff * power\n            power *= x\n        return result\n\n    def p_derivative(x: float) -> float:\n        result = 0.0\n        power = 1.0\n        for i in range(1, len(xs)):\n            result += i * xs[i] * power\n            power *= x\n        return result\n\n    def newton_raphson(max_iter=100, tol=1e-13):\n        x_candidates = [0.0, 0.001, -0.001]\n        for x0 in x_candidates:\n            x = x0\n            for _ in range(max_iter):\n                fx = p(x)\n                if abs(fx) <= tol:\n                    return x\n                dfx = p_derivative(x)\n                if abs(dfx) < 1e-15:\n                    break\n                x_next = x - fx / dfx\n                if abs(x_next - x) < tol:\n                    return x_next\n                x = x_next\n        return None\n    root = newton_raphson()\n    if root is not None and abs(p(root)) <= 1e-12:\n        return root\n    max_ratio = 0.0\n    an = xs[-1]\n    for i in range(n):\n        ratio = abs(xs[i] / an)\n        if ratio > max_ratio:\n            max_ratio = ratio\n    R = 1.0 + max_ratio\n    max_expand = 20\n    a, b = (-R, R)\n    fa = p(a)\n    fb = p(b)\n\n    def sign(x):\n        if x > 0:\n            return 1\n        elif x < 0:\n            return -1\n        else:\n            return 0\n    found_interval = False\n    for _ in range(max_expand):\n        if sign(fa) == 0:\n            return a\n        if sign(fb) == 0:\n            return b\n        if sign(fa) != sign(fb):\n            found_interval = True\n            break\n        a *= 2\n        b *= 2\n        fa = p(a)\n        fb = p(b)\n    if not found_interval:\n        raise ValueError('No root found within search bounds.')\n    tol_x = 1e-13\n    tol_f = 1e-13\n    left, right = (a, b)\n    fl, fr = (fa, fb)\n    for _ in range(2000):\n        mid = (left + right) / 2\n        fm = p(mid)\n        if abs(fm) <= tol_f or (right - left) / 2 < tol_x:\n            return mid\n        if sign(fm) == 0:\n            return mid\n        if sign(fm) == sign(fl):\n            left, fl = (mid, fm)\n        else:\n            right, fr = (mid, fm)\n    raise ValueError('No root found within search bounds by bisection.')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    tol = 1e-12\n    max_iter = 1000\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n > 0 and abs(xs[n]) < 1e-15:\n        n -= 1\n    if abs(xs[n]) < 1e-15:\n        raise ValueError('Leading coefficient must be non-zero.')\n    leading_coeff = xs[n]\n\n    def p(x: float) -> float:\n        res = 0.0\n        for i in range(n + 1):\n            res += xs[i] * x ** i\n        return res\n\n    def dp(x: float) -> float:\n        res = 0.0\n        for i in range(1, n + 1):\n            res += i * xs[i] * x ** (i - 1)\n        return res\n\n    def newton_raphson(x0: float) -> float:\n        x = x0\n        for _ in range(max_iter):\n            fx = p(x)\n            dfx = dp(x)\n            if abs(dfx) < 1e-14:\n                return None\n            x_new = x - fx / dfx\n            if abs(x_new - x) < tol and abs(p(x_new)) < tol:\n                return x_new\n            x = x_new\n        return None\n    root = newton_raphson(0.0)\n    if root is not None:\n        return root\n    for start in [0.001, -0.001, 0.01, -0.01]:\n        root = newton_raphson(start)\n        if root is not None:\n            return root\n    abs_ratios = [abs(xs[i] / leading_coeff) for i in range(n)]\n    R = 1 + max(abs_ratios) if abs_ratios else 1\n\n    def sign(x):\n        val = p(x)\n        if val > 0:\n            return 1\n        elif val < 0:\n            return -1\n        else:\n            return 0\n    left, right = (-R, R)\n    max_expand = 50\n    found_interval = False\n    s_left = sign(left)\n    s_right = sign(right)\n    if s_left == 0:\n        return left\n    if s_right == 0:\n        return right\n    expand_factor = 2\n    expand_count = 0\n    while s_left * s_right > 0 and expand_count < max_expand:\n        left *= expand_factor\n        right *= expand_factor\n        s_left = sign(left)\n        s_right = sign(right)\n        if s_left == 0:\n            return left\n        if s_right == 0:\n            return right\n        expand_count += 1\n    if s_left * s_right > 0:\n        raise ValueError('No root found within expanded search bounds.')\n    a, b = (left, right)\n    for _ in range(max_iter):\n        c = 0.5 * (a + b)\n        fc = p(c)\n        if abs(fc) < tol:\n            return c\n        sa = sign(a)\n        sc = sign(c)\n        if sc == 0:\n            return c\n        if sa * sc < 0:\n            b = c\n        else:\n            a = c\n        if abs(b - a) < tol:\n            return 0.5 * (a + b)\n    raise ValueError('Failed to converge to root with bisection.')", "from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    import math\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n > 0 and xs[n] == 0:\n        n -= 1\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient (highest degree term) must be non-zero.')\n    xs = xs[:n + 1]\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even and leading coefficient non-zero.')\n    degree = n\n    if xs[-1] == 0:\n        raise ValueError('Leading coefficient (highest degree) must be non-zero.')\n\n    def p(x: float) -> float:\n        result = 0.0\n        for coef in reversed(xs):\n            result = result * x + coef\n        return result\n\n    def dp(x: float) -> float:\n        result = 0.0\n        for i in range(len(xs) - 1, 0, -1):\n            result = result * x + xs[i] * i\n        return result\n\n    def newton_raphson(x0: float, max_iter=1000, tol=1e-12):\n        x = x0\n        for _ in range(max_iter):\n            px = p(x)\n            dpx = dp(x)\n            if abs(dpx) < 1e-15:\n                return None\n            x_new = x - px / dpx\n            if abs(x_new - x) < tol:\n                return x_new\n            x = x_new\n        return None\n\n    def bisection(a: float, b: float, max_iter=1000, tol=1e-12):\n        fa = p(a)\n        fb = p(b)\n        if fa == 0.0:\n            return a\n        if fb == 0.0:\n            return b\n        if fa * fb > 0:\n            return None\n        for _ in range(max_iter):\n            c = (a + b) / 2\n            fc = p(c)\n            if abs(fc) < tol or (b - a) / 2 < tol:\n                return c\n            if fa * fc < 0:\n                b = c\n                fb = fc\n            else:\n                a = c\n                fa = fc\n        return None\n    root = newton_raphson(0)\n    if root is not None and abs(p(root)) < 1e-12:\n        return root\n    for start in [1e-06, -1e-06, 0.001, -0.001, 1, -1]:\n        root = newton_raphson(start)\n        if root is not None and abs(p(root)) < 1e-12:\n            return root\n    R = 1 + max((abs(xs[i] / xs[-1]) for i in range(degree)))\n    max_expand = 20\n    steps = 1000\n\n    def find_bracket():\n        for k in range(steps):\n            a = -R + 2 * R * k / steps\n            b = -R + 2 * R * (k + 1) / steps\n            fa = p(a)\n            fb = p(b)\n            if fa == 0.0:\n                return (a, a)\n            if fb == 0.0:\n                return (b, b)\n            if fa * fb < 0:\n                return (a, b)\n        return None\n    for expand_count in range(max_expand):\n        bracket = find_bracket()\n        if bracket is not None:\n            a, b = bracket\n            root = bisection(a, b)\n            if root is not None and abs(p(root)) < 1e-12:\n                return root\n        R *= 2\n    raise ValueError('No root found within search bounds.')"], "outputs": "[[-0.5], [1.0000000000000007], [1.0], [0.0], [0.9999994379356809]]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    if not xs:\n        raise ValueError('Input list must not be empty.')\n    n = len(xs) - 1\n    while n > 0 and xs[n] == 0:\n        n -= 1\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n    xs = xs[:n + 1]\n    degree = n\n    if xs[-1] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n\n    def p(x: float) -> float:\n        res = 0.0\n        xp = 1.0\n        for c in xs:\n            res += c * xp\n            xp *= x\n        return res\n\n    def dp(x: float) -> float:\n        res = 0.0\n        xp = 1.0\n        for i in range(1, len(xs)):\n            res += i * xs[i] * xp\n            xp *= x\n        return res\n    tol = 1e-12\n    max_iter = 1000\n    x0 = 0.0\n    if dp(x0) == 0:\n        found_start = False\n        for delta in [0.0001, -0.0001, 0.1, -0.1, 1.0, -1.0]:\n            if dp(x0 + delta) != 0:\n                x0 = x0 + delta\n                found_start = True\n                break\n        if not found_start:\n            pass\n    else:\n        found_start = True\n    if found_start:\n        x = x0\n        for _ in range(max_iter):\n            px = p(x)\n            if abs(px) < tol:\n                return x\n            dpx = dp(x)\n            if dpx == 0:\n                break\n            x_new = x - px / dpx\n            if abs(x_new - x) < tol:\n                return x_new\n            x = x_new\n    lead = xs[-1]\n    R = 1 + max((abs(xs[i] / lead) for i in range(degree)))\n    left, right = (-R, R)\n\n    def sign(val: float) -> int:\n        if val > 0:\n            return 1\n        elif val < 0:\n            return -1\n        else:\n            return 0\n    max_expansion = 50\n    expansion_factor = 2.0\n    pl = p(left)\n    pr = p(right)\n    for _ in range(max_expansion):\n        if sign(pl) * sign(pr) < 0:\n            break\n        left *= expansion_factor\n        right *= expansion_factor\n        pl = p(left)\n        pr = p(right)\n    else:\n        raise ValueError('No sign change found in interval for bisection.')\n    for _ in range(max_iter):\n        mid = (left + right) / 2\n        pm = p(mid)\n        if abs(pm) < tol or (right - left) / 2 < tol:\n            return mid\n        if sign(pl) * sign(pm) < 0:\n            right = mid\n            pr = pm\n        else:\n            left = mid\n            pl = pm\n    raise ValueError('Root not found within tolerance and iteration limits.')", "from typing import List\nimport math\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    n = len(xs) - 1\n    while n > 0 and xs[n] == 0:\n        n -= 1\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient (highest degree term) must be non-zero.')\n    leading_coef = xs[n]\n\n    def p(x):\n        val = 0.0\n        xi = 1.0\n        for i in range(len(xs)):\n            val += xs[i] * xi\n            xi *= x\n        return val\n\n    def dp(x):\n        val = 0.0\n        xi = 1.0\n        for i in range(1, len(xs)):\n            val += i * xs[i] * xi\n            xi *= x\n        return val\n\n    def newton_raphson(x0, max_iter=1000, tol=1e-12):\n        x = x0\n        for _ in range(max_iter):\n            px = p(x)\n            dpx = dp(x)\n            if abs(px) < tol:\n                return x\n            if dpx == 0:\n                return None\n            x_new = x - px / dpx\n            if abs(x_new - x) < tol:\n                return x_new\n            x = x_new\n        return None\n\n    def try_newton():\n        candidates = [0.0, 0.0001, -0.0001, 0.001, -0.001, 0.1, -0.1]\n        for c in candidates:\n            if abs(dp(c)) > 0:\n                root = newton_raphson(c)\n                if root is not None:\n                    if abs(p(root)) < 1e-12:\n                        return root\n        return None\n    root_nr = try_newton()\n    if root_nr is not None:\n        return root_nr\n    max_ratio = 0.0\n    for i in range(n):\n        val = abs(xs[i] / leading_coef)\n        if val > max_ratio:\n            max_ratio = val\n    R = 1 + max_ratio\n\n    def sign(x):\n        val = p(x)\n        if val > 0:\n            return 1\n        elif val < 0:\n            return -1\n        else:\n            return 0\n    a = -R\n    b = R\n    max_expand = 50\n    found_interval = False\n    for _ in range(max_expand):\n        fa = sign(a)\n        fb = sign(b)\n        if fa == 0:\n            return a\n        if fb == 0:\n            return b\n        if fa * fb < 0:\n            found_interval = True\n            break\n        a *= 2\n        b *= 2\n    if not found_interval:\n        raise ValueError('No root found within search bounds.')\n    tol = 1e-12\n    for _ in range(1000):\n        c = (a + b) / 2\n        fc = sign(c)\n        if fc == 0 or (b - a) / 2 < tol:\n            return c\n        if sign(a) * fc < 0:\n            b = c\n        else:\n            a = c\n    raise ValueError('Root finding did not converge.')"], "outputs": "[[-0.5], [1.0000000000000004], [1.0], [6.666666666666667e-05], [0.9999994379551089]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef find_zero(xs: List[float]) -> float:\n    if len(xs) % 2 != 0:\n        raise ValueError('Input list length must be even.')\n    if xs[-1] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n    n = len(xs) - 1\n    while n > 0 and xs[n] == 0:\n        n -= 1\n    if xs[n] == 0:\n        raise ValueError('Leading coefficient must be non-zero.')\n\n    def p(x):\n        res = 0.0\n        for i in range(len(xs)):\n            res += xs[i] * x ** i\n        return res\n\n    def dp(x):\n        res = 0.0\n        for i in range(1, len(xs)):\n            res += i * xs[i] * x ** (i - 1)\n        return res\n\n    def newton_raphson(x0=0.0, tol=1e-13, max_iter=1000):\n        x = x0\n        for _ in range(max_iter):\n            px = p(x)\n            dpx = dp(x)\n            if abs(px) < tol:\n                return x\n            if dpx == 0:\n                return None\n            x_new = x - px / dpx\n            if abs(x_new - x) < tol:\n                return x_new\n            x = x_new\n        return None\n    root = newton_raphson()\n    if root is not None:\n        return root\n    R = 1 + max((abs(xs[i] / xs[n]) for i in range(n)))\n\n    def find_bracket(low, high, max_expand=50):\n        step = (high - low) / 100\n        for _ in range(max_expand):\n            prev_x = low\n            prev_p = p(low)\n            x = low + step\n            while x <= high:\n                px = p(x)\n                if prev_p * px <= 0:\n                    return (prev_x, x)\n                prev_x = x\n                prev_p = px\n                x += step\n            low = low - (high - low)\n            high = high + (high - low)\n            step = (high - low) / 100\n        return None\n    bracket = find_bracket(-R, R)\n    if bracket is None:\n        step_expand = R\n        low = -R\n        high = R\n        for _ in range(100):\n            low -= step_expand\n            high += step_expand\n            bracket = find_bracket(low, high, max_expand=1)\n            if bracket is not None:\n                break\n        if bracket is None:\n            raise ValueError('No root found within search bounds.')\n    a, b = bracket\n    fa = p(a)\n    fb = p(b)\n    if fa == 0.0:\n        return a\n    if fb == 0.0:\n        return b\n    if fa * fb > 0:\n        raise ValueError('No root found within search bounds.')\n    tol = 1e-13\n    max_iter = 1000\n    for _ in range(max_iter):\n        c = (a + b) / 2\n        fc = p(c)\n        if abs(fc) < tol or (b - a) / 2 < tol:\n            return c\n        if fa * fc < 0:\n            b = c\n            fb = fc\n        else:\n            a = c\n            fa = fc\n    raise ValueError('No root found within search bounds.')"], "outputs": "[[-0.5], [1.0000000000000007], [1.0], ['ValueError'], [0.9999998596280515]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7083211390478262, "llm_generated_inputs": "[[[1, 2]], [[-6, 11, -6, 1]], [[-1, 1]], [[0, 0, 0, 1, 0, 0]], [[2, -3, 0, 1]]]", "input_output_examples": "[[[[1, 2]], [[-6, 11, -6, 1]]], [[-0.5], [1.0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.30000000000000004, "original_avg_pass_rate": 0.7660472972972973, "original_nzpassk": true, "original_majority_passk": false, "original_entropy": 0.8541966060862141, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9488175675675675, "repaired_nzpassk": false, "repaired_majority_passk": false, "repaired_entropy": 0.7083211390478262}}
{"task_id": "HumanEval/33", "original_requirement": "from typing import List\n\n\ndef sort_third(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sort_third(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"", "entry_point": "sort_third", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    res = l[:]\n    for idx, val in zip(indices, values):\n        res[idx] = val\n    return res", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    divisible_by_three_indices = [i for i in range(len(l)) if i % 3 == 0]\n    values_to_sort = [l[i] for i in divisible_by_three_indices]\n    values_to_sort.sort()\n    result = l[:]\n    for idx, val in zip(divisible_by_three_indices, values_to_sort):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    result = l[:]\n    for i, val in zip(indices, values):\n        result[i] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = [l[i] for i in indices]\n    values.sort()\n    result = l[:]\n    for i, val in zip(indices, values):\n        result[i] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    third_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in third_indices))\n    result = l[:]\n    for idx, val in zip(third_indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    divisible_by_three_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in divisible_by_three_indices))\n    result = l[:]\n    for idx, val in zip(divisible_by_three_indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    idx_div3 = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in idx_div3))\n    result = l[:]\n    for i, val in zip(idx_div3, values):\n        result[i] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    result = l[:]\n    for i, val in zip(indices, values):\n        result[i] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for i, val in zip(indices, sorted_values):\n        result[i] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted((l[i] for i in indices))\n    result = l[:]\n    for idx, val in zip(indices, sorted_values):\n        result[idx] = val\n    return result"], "outputs": "[[[1, 2, 3]], [[2, 6, 3, 4, 8, 9, 5]], [[]], [[10]], [[1, 1, 4, 2, 5, 9, 3, 6, 5, 3, 5]], [[7, 7, 7, 7, 7, 7]], [[3, 8, 7, 6, 5, 4, 9, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[5, 6, 3, 4, 8, 9, 2]], [[]], [[10]], [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]], [[7, 7, 7, 7, 7, 7]], [[9, 8, 7, 6, 5, 4, 3, 2, 1]], [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]]", "input_output_examples": "[[[[1, 2, 3]], [[5, 6, 3, 4, 8, 9, 2]]], [[[1, 2, 3]], [[2, 6, 3, 4, 8, 9, 5]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/34", "original_requirement": "from typing import List\n\n\ndef unique(l: List[int]) -> List[int]:\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef unique(l: List[int]) -> List[int]:\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"", "entry_point": "unique", "cluster_list": [{"programs_str": ["from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))", "from typing import List\n\ndef unique(l: List[int]) -> List[int]:\n    return sorted(set(l))"], "outputs": "[[[0, 2, 3, 5, 9, 123]], [[]], [[1]], [[7]], [[-7, -3, -1, 0, 2]], [[0, 1, 2, 50, 100]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[5, 3, 5, 2, 3, 3, 9, 0, 123]], [[]], [[1, 1, 1, 1, 1]], [[7]], [[-3, -1, -7, -3, 0, 2]], [[100, 50, 50, 100, 100, 0, 1, 2]]]", "input_output_examples": "[[[[5, 3, 5, 2, 3, 3, 9, 0, 123]]], [[[0, 2, 3, 5, 9, 123]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/35", "original_requirement": "from typing import List\n\n\ndef max_element(l: List[int]) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef max_element(l: List[int]) -> int:\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"", "entry_point": "max_element", "cluster_list": [{"programs_str": ["from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)", "from typing import List\n\ndef max_element(l: List[int]) -> int:\n    return max(l)"], "outputs": "[[3], [123], [-1], [7], [0], [10]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]], [[-1, -2, -3, -4]], [[7]], [[0, 0, 0, 0]], [[10, 10, 10, 9]]]", "input_output_examples": "[[[[1, 2, 3]], [[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], [[3], [123]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/36", "original_requirement": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def fizz_buzz(n: int) -> int:\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"", "entry_point": "fizz_buzz", "cluster_list": [{"programs_str": ["def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for num in range(n):\n        if num % 11 == 0 or num % 13 == 0:\n            count += str(num).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count", "def fizz_buzz(n: int) -> int:\n    count = 0\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"], "outputs": "[[0], [0], [0], [0], [0], [0], [2], [3], [4], [6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [10], [11], [13], [50], [78], [79], [150], [200]]", "input_output_examples": "[[[50], [78], [79]], [[0], [2], [3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/37", "original_requirement": "from typing import List\n\n\ndef sort_even(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sort_even(l: List[int]) -> List[int]:\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"", "entry_point": "sort_even", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices_values = sorted((l[i] for i in range(0, len(l), 2)))\n    result = l[:]\n    for idx, val in zip(range(0, len(l), 2), even_indices_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for i, val in zip(even_indices, even_values):\n        result[i] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_values = sorted((l[i] for i in range(0, len(l), 2)))\n    result = l[:]\n    even_index = 0\n    for i in range(0, len(l), 2):\n        result[i] = even_values[even_index]\n        even_index += 1\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values_sorted = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values_sorted):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for i, val in zip(even_indices, even_values):\n        result[i] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    sorted_evens = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, sorted_evens):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values_sorted = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values_sorted):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = range(0, len(l), 2)\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_values = sorted((l[i] for i in range(0, len(l), 2)))\n    result = l[:]\n    for i, val in zip(range(0, len(l), 2), even_values):\n        result[i] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = range(0, len(l), 2)\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = sorted([l[i] for i in even_indices])\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_values = sorted((l[i] for i in range(0, len(l), 2)))\n    result = l[:]\n    for idx, val in zip(range(0, len(l), 2), even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n    even_values = [l[i] for i in even_indices]\n    even_values.sort()\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = [i for i in range(0, len(l), 2)]\n    even_values = sorted((l[i] for i in even_indices))\n    res = l[:]\n    for idx, val in zip(even_indices, even_values):\n        res[idx] = val\n    return res", "from typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = list(range(0, len(l), 2))\n    even_values = sorted((l[i] for i in even_indices))\n    result = l[:]\n    for idx, val in zip(even_indices, even_values):\n        result[idx] = val\n    return result"], "outputs": "[[[1, 2, 3]], [[3, 6, 5, 4]], [[]], [[10]], [[1, 1, 2, 3, 4, 0]], [[2, 3, 2, 1, 2, 0]], [[5, 8, 7, 6, 9, 4]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[5, 6, 3, 4]], [[]], [[10]], [[4, 1, 2, 3, 1, 0]], [[2, 3, 2, 1, 2, 0]], [[9, 8, 7, 6, 5, 4]]]", "input_output_examples": "[[[[1, 2, 3]], [[5, 6, 3, 4]]], [[[1, 2, 3]], [[3, 6, 5, 4]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/38", "original_requirement": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"", "entry_point": "decode_cyclic", "cluster_list": [{"programs_str": ["def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "from typing import List\n\ndef decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "from typing import List\n\ndef decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)", "def decode_cyclic(s: str) -> str:\n    groups = [s[3 * i:min(3 * i + 3, len(s))] for i in range((len(s) + 2) // 3)]\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in groups]\n    return ''.join(groups)"], "outputs": "[['abcdefigh'], ['abcdefgh'], ['abcdefighj'], [''], ['cab'], ['ab'], ['a']]", "probability": 1.0, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['bcaefdghi'], ['bcaefdgh'], ['bcaefdghij'], [''], ['abc'], ['ab'], ['a']]", "input_output_examples": "[[], []]", "weighted_test_consistency": -1.0, "at_least_one_align": false}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/39", "original_requirement": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def prime_fib(n: int) -> int:\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"", "entry_point": "prime_fib", "cluster_list": [{"programs_str": ["from typing import Iterator\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num in (2, 3):\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fib_gen() -> Iterator[int]:\n        a, b = (0, 1)\n        while True:\n            a, b = (b, a + b)\n            yield a\n    count = 0\n    for f in fib_gen():\n        if is_prime(f):\n            count += 1\n            if count == n:\n                return f", "from typing import Iterator\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    def fib_generator() -> Iterator[int]:\n        a, b = (0, 1)\n        while True:\n            a, b = (b, a + b)\n            yield a\n    count = 0\n    for fib_num in fib_generator():\n        if is_prime(fib_num):\n            count += 1\n            if count == n:\n                return fib_num", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from math import isqrt\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, isqrt(num) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num in (2, 3):\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import Iterator\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fib_gen() -> Iterator[int]:\n        a, b = (0, 1)\n        while True:\n            yield a\n            a, b = (b, a + b)\n    count = 0\n    for f in fib_gen():\n        if f > 1 and is_prime(f):\n            count += 1\n            if count == n:\n                return f", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    fib = [0, 1]\n    prime_fibs = []\n    while len(prime_fibs) < n:\n        next_fib = fib[-1] + fib[-2]\n        fib.append(next_fib)\n        if is_prime(next_fib):\n            prime_fibs.append(next_fib)\n    return prime_fibs[-1]", "from typing import List\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    if num % 2 == 0 and num != 2:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    a, b = (1, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num in (2, 3):\n            return True\n        if num % 2 == 0:\n            return False\n        i = 3\n        while i * i <= num:\n            if num % i == 0:\n                return False\n            i += 2\n        return True\n    a, b = (1, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from math import isqrt\n\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int) -> int:\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num in (2, 3):\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    fibs: List[int] = [0, 1]\n    prime_fibs: List[int] = []\n    idx = 2\n    while len(prime_fibs) < n:\n        fib_num = fibs[-1] + fibs[-2]\n        fibs.append(fib_num)\n        if is_prime(fib_num):\n            prime_fibs.append(fib_num)\n        idx += 1\n    return prime_fibs[n - 1]", "from typing import Iterator\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    def fib_gen() -> Iterator[int]:\n        a, b = (0, 1)\n        while True:\n            yield b\n            a, b = (b, a + b)\n    count = 0\n    for f in fib_gen():\n        if is_prime(f):\n            count += 1\n            if count == n:\n                return f", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x == 2 or x == 3:\n            return True\n        if x % 2 == 0:\n            return False\n        r = int(x ** 0.5)\n        for i in range(3, r + 1, 2):\n            if x % i == 0:\n                return False\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from math import isqrt\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, isqrt(x) + 1):\n            if x % i == 0:\n                return False\n        return True\n    a, b = (1, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x in (2, 3):\n            return True\n        if x % 2 == 0:\n            return False\n        i = 3\n        while i * i <= x:\n            if x % i == 0:\n                return False\n            i += 2\n        return True\n    fibs: List[int] = [0, 1]\n    prime_fibs: List[int] = []\n    while len(prime_fibs) < n:\n        next_fib = fibs[-1] + fibs[-2]\n        fibs.append(next_fib)\n        if is_prime(next_fib):\n            prime_fibs.append(next_fib)\n    return prime_fibs[n - 1]", "from typing import Iterator\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    if num in (2, 3):\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef fibonacci() -> Iterator[int]:\n    a, b = (0, 1)\n    while True:\n        yield b\n        a, b = (b, a + b)\n\ndef prime_fib(n: int) -> int:\n    fib_gen = fibonacci()\n    count = 0\n    while True:\n        f = next(fib_gen)\n        if is_prime(f):\n            count += 1\n            if count == n:\n                return f", "from typing import Optional\n\ndef is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    a, b = (1, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a", "from typing import List\n\ndef prime_fib(n: int) -> int:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num in (2, 3):\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    a, b = (0, 1)\n    count = 0\n    while True:\n        a, b = (b, a + b)\n        if is_prime(a):\n            count += 1\n            if count == n:\n                return a"], "outputs": "[[2], [3], [5], [13], [89], ['Timeout'], ['Timeout'], [433494437], ['Timeout']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [4], [5], [0], [-1], [10], [20]]", "input_output_examples": "[[[1], [2], [3], [4], [5]], [[2], [3], [5], [13], [89]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/40", "original_requirement": "from typing import List\n\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"", "entry_point": "triples_sum_to_zero", "cluster_list": [{"programs_str": ["from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    l.sort()\n    n = len(l)\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            current_sum = l[i] + l[left] + l[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = (i + 1, n - 1)\n        while left < right:\n            s = l[i] + l[left] + l[right]\n            if s == 0:\n                return True\n            elif s < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    for i in range(n):\n        seen = set()\n        current_sum = -l[i]\n        for j in range(i + 1, n):\n            if current_sum - l[j] in seen:\n                return True\n            seen.add(l[j])\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    if n < 3:\n        return False\n    l.sort()\n    for i in range(n - 2):\n        if i > 0 and l[i] == l[i - 1]:\n            continue\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "from typing import List\n\ndef triples_sum_to_zero(l: List[int]) -> bool:\n    n = len(l)\n    l.sort()\n    for i in range(n - 2):\n        left, right = (i + 1, n - 1)\n        while left < right:\n            total = l[i] + l[left] + l[right]\n            if total == 0:\n                return True\n            elif total < 0:\n                left += 1\n            else:\n                right -= 1\n    return False"], "outputs": "[[False], [True], [False], [True], [False], [True], [True], [True], [False], [True], [False], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 9, 7]], [[1]], [[-1, 0, 1]], [[-5, 2, 3, 1]], [[-1, -1, 2]], [[-1, 2, 2]], [[-2, -1, 3, 4]], [[]], [[0, 0, 0]], [[0, 0, 1, -1]], [[10, -10, 0, 5, -5]]]", "input_output_examples": "[[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 9, 7]], [[1]]], [[False], [True], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/41", "original_requirement": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"", "entry_point": "car_race_collision", "cluster_list": [{"programs_str": ["def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n", "def car_race_collision(n: int) -> int:\n    return n * n"], "outputs": "[[1], [4], [100], [0], [1000000]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [10], [0], [1000]]", "input_output_examples": "[[[1], [2], [3]], [[1], [4], [9]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/42", "original_requirement": "from typing import List\n\n\ndef incr_list(l: List[int]) -> List[int]:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef incr_list(l: List[int]) -> List[int]:\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"", "entry_point": "incr_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]", "from typing import List\n\ndef incr_list(l: List[int]) -> List[int]:\n    return [x + 1 for x in l]"], "outputs": "[[[2, 3, 4]], [[6, 4, 6, 3, 4, 4, 10, 1, 124]], [[]], [[0, -1, -2]], [[1]], [[1000000000]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3]], [[5, 3, 5, 2, 3, 3, 9, 0, 123]], [[]], [[-1, -2, -3]], [[0]], [[999999999]]]", "input_output_examples": "[[[[1, 2, 3]], [[5, 3, 5, 2, 3, 3, 9, 0, 123]]], [[[2, 3, 4]], [[6, 4, 6, 3, 4, 4, 10, 1, 124]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/43", "original_requirement": "from typing import List\n\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"", "entry_point": "pairs_sum_to_zero", "cluster_list": [{"programs_str": ["from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            if num != 0 or l.count(0) > 1:\n                return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            if num != 0 or l.count(0) > 1:\n                return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            if num != 0 or l.count(0) > 1:\n                return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            if num != 0 or l.count(0) > 1:\n                return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            if num != 0:\n                return True\n            elif l.count(0) > 1:\n                return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False", "from typing import List\n\ndef pairs_sum_to_zero(l: List[int]) -> bool:\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False"], "outputs": "[[False], [False], [False], [True], [False], [False], [True], [True], [True], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]], [[]], [[0, 0]], [[5, -5]], [[10, 20, -10, 30]], [[-1, -2, -3, -4]], [[1, 2, 3, 4, -4]], [[0]]]", "input_output_examples": "[[[[1, 3, 5, 0]], [[1, 3, -2, 1]], [[1, 2, 3, 7]], [[2, 4, -5, 3, 5, 7]], [[1]]], [[False], [False], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.9816378433367243, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/44", "original_requirement": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"", "entry_point": "change_base", "cluster_list": [{"programs_str": ["def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    digits.reverse()\n    return ''.join(digits)", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(reversed(digits))", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])", "def change_base(x: int, base: int) -> str:\n    if x == 0:\n        return '0'\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n    return ''.join(digits[::-1])"], "outputs": "[['22'], ['1000'], ['111'], ['0'], ['1'], ['33'], ['10'], ['20'], ['5']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[8, 3], [8, 2], [7, 2], [0, 2], [1, 2], [15, 4], [9, 9], [10, 5], [5, 8]]", "input_output_examples": "[[[8, 3], [8, 2], [7, 2]], [['22'], ['1000'], ['111']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/45", "original_requirement": "def triangle_area(a: float, h: float) -> float:\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def triangle_area(a: float, h: float) -> float:\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"", "entry_point": "triangle_area", "cluster_list": [{"programs_str": ["def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h", "def triangle_area(a: float, h: float) -> float:\n    return 0.5 * a * h"], "outputs": "[[7.5], [22.05], [0.0], [0.0], [0.0], [-7.5], [-7.5], [7.5], [1.0000000000000001e-20], [1000000000000.0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5, 3], [10.5, 4.2], [0, 5], [7, 0], [0, 0], [-5, 3], [5, -3], [-5, -3], [1e-10, 2e-10], [1000000, 2000000]]", "input_output_examples": "[[[5, 3]], [[7.5]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/46", "original_requirement": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def fib4(n: int) -> int:\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"", "entry_point": "fib4", "cluster_list": [{"programs_str": ["def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    f = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        f.append(f[i - 1] + f[i - 2] + f[i - 3] + f[i - 4])\n    return f[n]", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    f0, f1, f2, f3 = (0, 0, 2, 0)\n    for i in range(4, n + 1):\n        curr = f0 + f1 + f2 + f3\n        f0, f1, f2, f3 = (f1, f2, f3, curr)\n    return f3", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    dp = [0, 0, 2, 0]\n    for i in range(4, n + 1):\n        dp.append(dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4])\n    return dp[n]", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    elif n == 2:\n        return 2\n    f0, f1, f2, f3 = (0, 0, 2, 0)\n    for i in range(4, n + 1):\n        fn = f3 + f2 + f1 + f0\n        f0, f1, f2, f3 = (f1, f2, f3, fn)\n    return f3", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        e = a + b + c + d\n        a, b, c, d = (b, c, d, e)\n    return d", "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        next_val = a + b + c + d\n        a, b, c, d = (b, c, d, next_val)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d", "def fib4(n: int) -> int:\n    if n == 0 or n == 1 or n == 3:\n        return 0\n    if n == 2:\n        return 2\n    a, b, c, d = (0, 0, 2, 0)\n    for _ in range(4, n + 1):\n        a, b, c, d = (b, c, d, a + b + c + d)\n    return d"], "outputs": "[[0], [0], [2], [0], [2], [4], [8], [14], [104], [73552]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [4], [5], [6], [7], [10], [20]]", "input_output_examples": "[[[5], [6], [7]], [[4], [8], [14]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/47", "original_requirement": "from typing import List\n\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "repaired_requirement": "from typing import List\n\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "original_clusters": {"requirement": "from typing import List\n\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "entry_point": "median", "cluster_list": [{"programs_str": ["from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid])\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    sorted_l = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_list[mid])\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    s = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid]) if isinstance(sorted_l[mid], float) else sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    sorted_l = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid]) if isinstance(sorted_l[mid], float) else sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    s = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n    if n % 2 == 1:\n        return l_sorted[mid]\n    else:\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2.0"], "outputs": "[[3.0], [8.0], [1.0], [5.0], [2.5], [-3.0], ['IndexError']]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.5, "failed_input_output_examples": "[[[[-10, 4, 6, 1000, 10, 20]], [8.0], [15.0]]]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]], [[1]], [[5, 5, 5, 5]], [[2, 3]], [[-5, -1, -3, -4, -2]], [[]]]", "input_output_examples": "[[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]]], [[3], [15.0]]]", "weighted_test_consistency": 0.5, "at_least_one_align": false}, "repaired_clusters": {"requirement": "from typing import List\n\n\ndef median(l: List[int]) -> float:\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"", "entry_point": "median", "cluster_list": [{"programs_str": ["from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid])\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    sorted_l = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_list = sorted(l)\n    n = len(sorted_list)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_list[mid])\n    else:\n        return (sorted_list[mid - 1] + sorted_list[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    s = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    s = sorted(l)\n    n = len(s)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid]) if isinstance(sorted_l[mid], float) else sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    sorted_l = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return float(sorted_l[mid]) if isinstance(sorted_l[mid], float) else sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    n = len(l)\n    s = sorted(l)\n    mid = n // 2\n    if n % 2 == 1:\n        return s[mid]\n    else:\n        return (s[mid - 1] + s[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n    mid = n // 2\n    if n % 2 == 1:\n        return sorted_l[mid]\n    else:\n        return (sorted_l[mid - 1] + sorted_l[mid]) / 2", "from typing import List\n\ndef median(l: List[int]) -> float:\n    l_sorted = sorted(l)\n    n = len(l_sorted)\n    mid = n // 2\n    if n % 2 == 1:\n        return l_sorted[mid]\n    else:\n        return (l_sorted[mid - 1] + l_sorted[mid]) / 2.0"], "outputs": "[[3.0], [8.0], [1.0], [5.0], [2.5], [-3.0], ['IndexError']]", "probability": 1.0, "is_align_req": 0, "test_consistency": 0.5, "failed_input_output_examples": "[[[[-10, 4, 6, 1000, 10, 20]], [8.0], [15.0]]]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]], [[1]], [[5, 5, 5, 5]], [[2, 3]], [[-5, -1, -3, -4, -2]], [[]]]", "input_output_examples": "[[[[3, 1, 2, 4, 5]], [[-10, 4, 6, 1000, 10, 20]]], [[3], [15.0]]]", "weighted_test_consistency": 0.5, "at_least_one_align": false}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/48", "original_requirement": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"", "entry_point": "is_palindrome", "cluster_list": [{"programs_str": ["def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]", "def is_palindrome(text: str) -> bool:\n    return text == text[::-1]"], "outputs": "[[True], [True], [False], [True], [False], [False], [False], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['aba'], ['aaaaa'], ['zbcd'], ['a'], ['ab'], ['Aa'], ['A man, a plan, a canal, Panama'], ['12321'], ['123456']]", "input_output_examples": "[[[''], ['aba'], ['aaaaa'], ['zbcd']], [[True], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/49", "original_requirement": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"", "entry_point": "modp", "cluster_list": [{"programs_str": ["def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)", "def modp(n: int, p: int) -> int:\n    return pow(2, n, p)"], "outputs": "[[3], [2], [1], [8], [1], [0], [0], [4], [942], [6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 5], [1101, 101], [0, 101], [3, 11], [100, 101], [1, 2], [10, 1], [50, 97], [1000, 1009], [20, 10]]", "input_output_examples": "[[[3, 5], [1101, 101], [0, 101], [3, 11], [100, 101]], [[3], [2], [1], [8], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/50", "original_requirement": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str) -> str:\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"", "entry_point": "decode_shift", "cluster_list": [{"programs_str": ["def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "from typing import *\n\ndef decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "from typing import Optional\n\ndef decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])", "def decode_shift(s: str) -> str:\n    return ''.join([chr((ord(ch) - 5 - ord('a')) % 26 + ord('a')) for ch in s])"], "outputs": "[['abcde'], ['uvwxy'], ['pqrst'], [''], ['vvvvv']]", "probability": 1.0, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['fghij'], ['zabcd'], ['uvwxy'], [''], ['aaaaa']]", "input_output_examples": "[[], []]", "weighted_test_consistency": -1.0, "at_least_one_align": false}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/51", "original_requirement": "def remove_vowels(text: str) -> str:\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def remove_vowels(text: str) -> str:\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"", "entry_point": "remove_vowels", "cluster_list": [{"programs_str": ["def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((ch for ch in text if ch not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((ch for ch in text if ch not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((ch for ch in text if ch not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((ch for ch in text if ch not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = set('aeiouAEIOU')\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))", "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join((char for char in text if char not in vowels))"], "outputs": "[[''], ['bcdf\\nghjklm'], ['bcdf'], [''], ['B'], ['zbcd'], [''], ['BCDFG bcdfg'], ['12345!@#$%'], ['Th qck brwn fx jmps vr th lzy dg.']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['abcdef\\nghijklm'], ['abcdef'], ['aaaaa'], ['aaBAA'], ['zbcd'], ['AEIOUaeiou'], ['BCDFG bcdfg'], ['12345!@#$%'], ['The quick brown fox jumps over the lazy dog.']]", "input_output_examples": "[[[''], ['abcdef\\nghijklm'], ['abcdef'], ['aaaaa'], ['aaBAA'], ['zbcd']], [[''], ['bcdf\\nghjklm'], ['bcdf'], [''], ['B'], ['zbcd']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/52", "original_requirement": "from typing import List\n\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"", "entry_point": "below_threshold", "cluster_list": [{"programs_str": ["from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))", "from typing import List\n\ndef below_threshold(l: List[int], t: int) -> bool:\n    return all((x < t for x in l))"], "outputs": "[[True], [False], [True], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5], [[], 10], [[0, 1, 2, 3], 3], [[-1, -2, -3], 0], [[10, 10, 10], 10], [[11, 9, 10], 10]]", "input_output_examples": "[[[[1, 2, 4, 10], 100], [[1, 20, 4, 10], 5]], [[True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/53", "original_requirement": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"", "entry_point": "add", "cluster_list": [{"programs_str": ["def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y", "def add(x: int, y: int) -> int:\n    return x + y"], "outputs": "[[0], [2], [-2], [-5], [5], [12], [2147483648], [-2147483649]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0, 0], [1, 1], [-1, -1], [-10, 5], [2, 3], [5, 7], [2147483647, 1], [-2147483648, -1]]", "input_output_examples": "[[[2, 3], [5, 7]], [[5], [12]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/54", "original_requirement": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"", "entry_point": "same_chars", "cluster_list": [{"programs_str": ["def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    set0 = set(s0)\n    set1 = set(s1)\n    return set0 == set1", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)", "def same_chars(s0: str, s1: str) -> bool:\n    return set(s0) == set(s1)"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc'], ['', ''], ['a', 'a'], ['a', 'b'], ['abc', 'cba'], ['abc', 'abcd'], ['abd', 'abc']]", "input_output_examples": "[[['eabcdzzzz', 'dddzzzzzzzddeddabc'], ['abcd', 'dddddddabc'], ['dddddddabc', 'abcd'], ['eabcd', 'dddddddabc'], ['abcd', 'dddddddabce'], ['eabcdzzzz', 'dddzzzzzzzddddabc']], [[True], [True], [True], [False], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/55", "original_requirement": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"", "repaired_requirement": "def fib(n: int) -> int:\n    \"\"\"\n    Return the n-th Fibonacci number using zero-based indexing, where:\n    fib(0) = 0,\n    fib(1) = 1,\n    fib(2) = 1,\n    fib(3) = 2, and so on.\n\n    For any n <= 0, return 0.\n\n    Examples:\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    >>> fib(10)\n    55\n    \"\"\"", "original_clusters": {"requirement": "def fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"", "entry_point": "fib", "cluster_list": [{"programs_str": ["def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    a, b = (0, 1)\n    for _ in range(n):\n        a, b = (b, a + b)\n    return a", "def fib(n: int) -> int:\n    a, b = (0, 1)\n    for _ in range(n):\n        a, b = (b, a + b)\n    return a", "def fib(n: int) -> int:\n    a, b = (0, 1)\n    for _ in range(n):\n        a, b = (b, a + b)\n    return a", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "from typing import Optional\n\ndef fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = (0, 1)\n        for _ in range(2, n + 1):\n            a, b = (b, a + b)\n        return b"], "outputs": "[[0], [1], [1], [5], [21], [55], [6765]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def fib(n: int) -> int:\n    if n <= 2:\n        return 1\n    a, b = (1, 1)\n    for _ in range(3, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n == 1 or n == 2:\n        return 1\n    a, b = (1, 1)\n    for _ in range(3, n + 1):\n        a, b = (b, a + b)\n    return b"], "outputs": "[[1], [1], [1], [5], [21], [55], [6765]]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[[0], [1], [2], [5], [8], [10], [20]]", "input_output_examples": "[[[10], [1], [8]], [[55], [1], [21]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def fib(n: int) -> int:\n    \"\"\"\n    Return the n-th Fibonacci number using zero-based indexing, where:\n    fib(0) = 0,\n    fib(1) = 1,\n    fib(2) = 1,\n    fib(3) = 2, and so on.\n\n    For any n <= 0, return 0.\n\n    Examples:\n    >>> fib(0)\n    0\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    >>> fib(10)\n    55\n    \"\"\"", "entry_point": "fib", "cluster_list": [{"programs_str": ["def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    a, b = (0, 1)\n    for _ in range(1, n):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    a, b = (0, 1)\n    for _ in range(1, n):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    a, b = (0, 1)\n    for _ in range(1, n):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    a, b = (0, 1)\n    for _ in range(1, n):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b", "def fib(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = (0, 1)\n    for _ in range(2, n + 1):\n        a, b = (b, a + b)\n    return b"], "outputs": "[[0], [1], [1], [5], [21], [55], [6765]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [5], [8], [10], [20]]", "input_output_examples": "[[[10], [1], [8]], [[55], [1], [21]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.85, "original_avg_pass_rate": 0.994, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.46899559358928117, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/56", "original_requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"", "entry_point": "correct_bracketing", "cluster_list": [{"programs_str": ["def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '<':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for ch in brackets:\n        if ch == '<':\n            balance += 1\n        elif ch == '>':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '<':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        elif char == '>':\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for ch in brackets:\n        if ch == '<':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '<':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '<':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0"], "outputs": "[[False], [True], [True], [False], [True], [False], [False], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['<'], ['<>'], ['<<><>>'], ['><<>'], [''], ['>'], ['<<>>><<>'], ['<><><>'], ['<<>'], ['><><>']]", "input_output_examples": "[[['<'], ['<>'], ['<<><>>'], ['><<>']], [[False], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/57", "original_requirement": "from typing import List\n\n\ndef monotonic(l: List[int]) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef monotonic(l: List[int]) -> bool:\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"", "entry_point": "monotonic", "cluster_list": [{"programs_str": ["from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] < l[i - 1]:\n            increasing = False\n        if l[i] > l[i - 1]:\n            decreasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    return all((x <= y for x, y in zip(l, l[1:]))) or all((x >= y for x, y in zip(l, l[1:])))", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if len(l) <= 1:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    return all((l[i] <= l[i + 1] for i in range(len(l) - 1))) or all((l[i] >= l[i + 1] for i in range(len(l) - 1)))", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = all((x <= y for x, y in zip(l, l[1:])))\n    decreasing = all((x >= y for x, y in zip(l, l[1:])))\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    return all((x <= y for x, y in zip(l, l[1:]))) or all((x >= y for x, y in zip(l, l[1:])))", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n        if not increasing and (not decreasing):\n            return False\n    return True", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        elif l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing", "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    if not l:\n        return True\n    increasing = decreasing = True\n    for i in range(1, len(l)):\n        if l[i] > l[i - 1]:\n            decreasing = False\n        if l[i] < l[i - 1]:\n            increasing = False\n    return increasing or decreasing"], "outputs": "[[True], [False], [True], [True], [True], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 4, 20]], [[1, 20, 4, 10]], [[4, 1, 0, -10]], [[1, 1, 1, 1]], [[10]], [[]], [[5, 5, 5, 6, 7]], [[7, 7, 7, 6, 5]], [[-1, -2, -3, -4]], [[-4, -3, -2, -1]]]", "input_output_examples": "[[[[1, 2, 4, 20]], [[1, 20, 4, 10]], [[4, 1, 0, -10]]], [[True], [False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/58", "original_requirement": "from typing import List\n\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"", "entry_point": "common", "cluster_list": [{"programs_str": ["from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1).intersection(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))", "from typing import List\n\ndef common(l1: List[int], l2: List[int]) -> List[int]:\n    return sorted(set(l1) & set(l2))"], "outputs": "[[[1, 5, 653]], [[2, 3]], [[]], [[]], [[]], [[1]], [[]], [[-2, -1, 0]], [[1000000]], [[1, 2, 3, 4, 5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]], [[], [1, 2, 3]], [[1, 2, 3], []], [[], []], [[1, 1, 1, 1], [1, 1, 1]], [[10, 20, 30], [40, 50, 60]], [[0, -1, -2, 5], [-2, -1, 0, 7]], [[1000000, 2000000], [1000000]], [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]]", "input_output_examples": "[[[[1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]], [[5, 3, 2, 8], [3, 2]]], [[[1, 5, 653]], [[2, 3]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/59", "original_requirement": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"", "entry_point": "largest_prime_factor", "cluster_list": [{"programs_str": ["def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            last_factor = factor\n        else:\n            factor += 1 if factor == 2 else 2\n    return n if n > last_factor else last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while n > 1:\n        if n % factor == 0:\n            last_factor = factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1\n        if factor * factor > n:\n            if n > 1:\n                last_factor = n\n            break\n    return last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        last_factor = n\n    return last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest_factor = 1\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        largest_factor = n\n    return largest_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    return max(last_factor, n)", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            last_factor = factor\n        else:\n            factor += 1 if factor == 2 else 2\n    return n if n > last_factor else last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest = 0\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest = factor\n            n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        largest = n\n    return largest", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            last_factor = factor\n        else:\n            factor += 1 if factor == 2 else 2\n    return max(last_factor, n)", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        last_factor = n\n    return last_factor", "def largest_prime_factor(n: int) -> int:\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n    return n", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n        else:\n            factor += 1\n    return n", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    return n if n > last_factor else last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    max_prime = -1\n    while factor * factor <= n:\n        while n % factor == 0:\n            max_prime = factor\n            n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        max_prime = n\n    return max_prime", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest = 1\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest = factor\n            n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        largest = n\n    return largest", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            last_factor = factor\n        else:\n            factor += 1 if factor == 2 else 2\n    if n > last_factor:\n        return n\n    return last_factor", "from math import sqrt\n\ndef largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            last_factor = factor\n            n //= factor\n            while n % factor == 0:\n                n //= factor\n        factor += 1 if factor == 2 else 2\n    if n > 1:\n        return n\n    return last_factor", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    last_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            n //= factor\n            last_factor = factor\n        else:\n            factor += 1 if factor == 2 else 2\n    return max(last_factor, n)", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest = 0\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest = factor\n            n //= factor\n        factor += 1\n    if n > 1:\n        largest = n\n    return largest", "def largest_prime_factor(n: int) -> int:\n    factor = 2\n    largest_factor = 1\n    while factor * factor <= n:\n        if n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        else:\n            factor += 1 if factor == 2 else 2\n    if n > largest_factor:\n        largest_factor = n\n    return largest_factor"], "outputs": "[[29], [2], [5], [13], [5], [37]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[13195], [2048], [100], [91], [270], [9999990]]", "input_output_examples": "[[[13195], [2048]], [[29], [2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/60", "original_requirement": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def sum_to_n(n: int) -> int:\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"", "entry_point": "sum_to_n", "cluster_list": [{"programs_str": ["def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2", "def sum_to_n(n: int) -> int:\n    return n * (n + 1) // 2"], "outputs": "[[465], [5050], [15], [55], [1], [0], [3], [1275]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[30], [100], [5], [10], [1], [0], [2], [50]]", "input_output_examples": "[[[30], [100], [5], [10], [1]], [[465], [5050], [15], [55], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/61", "original_requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"", "entry_point": "correct_bracketing", "cluster_list": [{"programs_str": ["def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n            if balance < 0:\n                return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for b in brackets:\n        if b == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for ch in brackets:\n        if ch == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    balance = 0\n    for char in brackets:\n        if char == '(':\n            balance += 1\n        else:\n            balance -= 1\n        if balance < 0:\n            return False\n    return balance == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for char in brackets:\n        if char == '(':\n            count += 1\n        else:\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0", "def correct_bracketing(brackets: str) -> bool:\n    count = 0\n    for bracket in brackets:\n        if bracket == '(':\n            count += 1\n        else:\n            count -= 1\n            if count < 0:\n                return False\n    return count == 0"], "outputs": "[[True], [False], [False], [True], [True], [True], [True], [False], [False], [False], [False], [True], [True], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['('], [')'], ['()'], ['()()'], ['(()())'], ['(((())))'], ['((())'], ['())('], [')((('], ['(()))(()'], ['(((((((((())))))))))'], ['()(()()())()'], ['(()))(()())']]", "input_output_examples": "[[['('], ['()'], ['(()())'], [')(()']], [[False], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/62", "original_requirement": "from typing import List\n\n\ndef derivative(xs: List[int]) -> List[int]:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef derivative(xs: List[int]) -> List[int]:\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"", "entry_point": "derivative", "cluster_list": [{"programs_str": ["from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]", "from typing import List\n\ndef derivative(xs: List[int]) -> List[int]:\n    return [i * xs[i] for i in range(1, len(xs))]"], "outputs": "[[[1, 4, 12, 20]], [[2, 6]], [[]], [[]], [[0, 0]], [[0, 0, 0]], [[1, 0, 0]], [[-5, 0, 9]], [[-1, -8]], [[1, 2, 3, 4]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[3, 1, 2, 4, 5]], [[1, 2, 3]], [[0]], [[5]], [[0, 0, 0]], [[1, 0, 0, 0]], [[0, 1, 0, 0]], [[10, -5, 0, 3]], [[-3, -1, -4]], [[1, 1, 1, 1, 1]]]", "input_output_examples": "[[[[3, 1, 2, 4, 5]], [[1, 2, 3]]], [[[1, 4, 12, 20]], [[2, 6]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/63", "original_requirement": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def fibfib(n: int) -> int:\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"", "entry_point": "fibfib", "cluster_list": [{"programs_str": ["def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c", "def fibfib(n: int) -> int:\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    a, b, c = (0, 0, 1)\n    for _ in range(3, n + 1):\n        a, b, c = (b, c, a + b + c)\n    return c"], "outputs": "[[0], [0], [1], [1], [4], [24], [81]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[0], [1], [2], [3], [5], [8], [10]]", "input_output_examples": "[[[1], [5], [8]], [[0], [4], [24]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/64", "original_requirement": "def vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def vowels_count(s: str) -> int:\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"", "entry_point": "vowels_count", "cluster_list": [{"programs_str": ["def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((ch in vowels for ch in s_lower))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for char in s_lower if char in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((ch in vowels for ch in s_lower))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for ch in s_lower if ch in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((char in vowels for char in s_lower))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for ch in s_lower if ch in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for ch in s_lower if ch in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((ch in vowels for ch in s_lower))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((ch in vowels for ch in s_lower))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for ch in s_lower if ch in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    s_lower = s.lower()\n    for i, char in enumerate(s_lower):\n        if char in vowels:\n            count += 1\n        elif char == 'y' and i == len(s_lower) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((ch in vowels for ch in s_lower))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s = s.lower()\n    count = sum((ch in vowels for ch in s))\n    if s.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    s_lower = s.lower()\n    for i, ch in enumerate(s_lower):\n        if ch in vowels:\n            count += 1\n        elif ch == 'y' and i == len(s_lower) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = 0\n    for i, char in enumerate(s_lower):\n        if char in vowels:\n            count += 1\n        if char == 'y' and i == len(s_lower) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    s_lower = s.lower()\n    for i, ch in enumerate(s_lower):\n        if ch in vowels:\n            count += 1\n        elif ch == 'y' and i == len(s_lower) - 1:\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for char in s_lower if char in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = 0\n    s_lower = s.lower()\n    for i, ch in enumerate(s_lower):\n        if ch in vowels or (ch == 'y' and i == len(s_lower) - 1):\n            count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for ch in s_lower if ch in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count", "def vowels_count(s: str) -> int:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    s_lower = s.lower()\n    count = sum((1 for char in s_lower if char in vowels))\n    if s_lower.endswith('y'):\n        count += 1\n    return count"], "outputs": "[[2], [3], [0], [1], [0], [5], [6], [1], [2], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['abcde'], ['ACEDY'], ['rhythm'], ['sky'], [''], ['AEIOU'], ['aeiouy'], ['Y'], ['pythonic'], ['syzygy']]", "input_output_examples": "[[['abcde'], ['ACEDY']], [[2], [3]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/65", "original_requirement": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"", "entry_point": "circular_shift", "cluster_list": [{"programs_str": ["def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift %= n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift %= n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift %= n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    length = len(digits)\n    if shift > length:\n        return digits[::-1]\n    shift = shift % length\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift %= n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift %= n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift %= n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift] if shift != 0 else s", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    digits = str(x)\n    n = len(digits)\n    if shift > n:\n        return digits[::-1]\n    shift = shift % n\n    return digits[-shift:] + digits[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift %= n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift %= n\n    return s[-shift:] + s[:-shift]", "def circular_shift(x: int, shift: int) -> str:\n    s = str(x)\n    n = len(s)\n    if shift > n:\n        return s[::-1]\n    shift = shift % n\n    return s[-shift:] + s[:-shift]"], "outputs": "[['4123'], ['1234'], ['4321'], ['0'], ['5'], ['321987654'], ['123456789']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1234, 1], [1234, 4], [1234, 5], [0, 1], [5, 0], [987654321, 3], [987654321, 10]]", "input_output_examples": "[[[12, 1], [12, 2]], [['21'], ['12']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/66", "original_requirement": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"", "entry_point": "digitSum", "cluster_list": [{"programs_str": ["def digitSum(s: str) -> int:\n    return sum((ord(ch) for ch in s if ch.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(ch) for ch in s if ch.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(ch) for ch in s if ch.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(ch) for ch in s if ch.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(ch) for ch in s if ch.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))", "def digitSum(s: str) -> int:\n    return sum((ord(c) for c in s if c.isupper()))"], "outputs": "[[0], [266], [0], [204], [266], [153], [90], [0], [0], [430]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[''], ['ABCD'], ['abcd'], ['aBcDeF'], ['1234ABCD!'], ['aAaaaXa'], ['Z'], ['z'], ['!@#$%^&*()'], ['MixEdCASE123']]", "input_output_examples": "[[[''], ['abAB'], ['abcCd'], ['helloE'], ['woArBld'], ['aAaaaXa']], [[0], [131], [67], [69], [131], [153]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/67", "original_requirement": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def fruit_distribution(s: str, n: int) -> int:\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"", "entry_point": "fruit_distribution", "cluster_list": [{"programs_str": ["import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    nums = list(map(int, re.findall('\\\\d+', s)))\n    return n - nums[0] - nums[1]", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    if len(numbers) >= 2:\n        return n - numbers[0] - numbers[1]\n    return n", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    apples = numbers[0] if len(numbers) > 0 else 0\n    oranges = numbers[1] if len(numbers) > 1 else 0\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    nums = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(nums)", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "def fruit_distribution(s: str, n: int) -> int:\n    parts = s.split()\n    apples = int(parts[0])\n    oranges = int(parts[3])\n    return n - apples - oranges", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    return n - sum(numbers)", "import re\n\ndef fruit_distribution(s: str, n: int) -> int:\n    numbers = list(map(int, re.findall('\\\\d+', s)))\n    apples, oranges = (numbers[0], numbers[1])\n    return n - apples - oranges"], "outputs": "[[8], [2], [95], [19], [10], [5], [5], [0], [100], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120], ['0 apples and 0 oranges', 10], ['10 apples and 0 oranges', 15], ['0 apples and 10 oranges', 15], ['0 apples and 0 oranges', 0], ['50 apples and 50 oranges', 200], ['1 apples and 1 oranges', 3]]", "input_output_examples": "[[['5 apples and 6 oranges', 19], ['0 apples and 1 oranges', 3], ['2 apples and 3 oranges', 100], ['100 apples and 1 oranges', 120]], [[8], [2], [95], [19]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/68", "original_requirement": "from typing import List\n\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"", "entry_point": "pluck", "cluster_list": [{"programs_str": ["from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            smallest_even = val\n            smallest_idx = i\n            break\n    else:\n        return []\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if val < smallest_even or (val == smallest_even and i < smallest_idx):\n                smallest_even = val\n                smallest_idx = i\n    return [smallest_even, smallest_idx]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    else:\n        return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    if min_even is None:\n        return []\n    return [min_even, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    else:\n        return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even or (val == smallest_even and i < smallest_index):\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    if min_even is None:\n        return []\n    return [min_even, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    if min_even is None:\n        return []\n    return [min_even, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = None\n    for idx, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = idx\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    if min_even is None:\n        return []\n    return [min_even, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                index = i\n    if min_even is None:\n        return []\n    return [min_even, index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_even_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_even_index = i\n    if smallest_even is None:\n        return []\n    else:\n        return [smallest_even, smallest_even_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_even = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_even is None or val < min_even:\n                min_even = val\n                min_index = i\n    if min_even is None:\n        return []\n    return [min_even, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_value = None\n    min_index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_value is None or val < min_value:\n                min_value = val\n                min_index = i\n    if min_value is None:\n        return []\n    else:\n        return [min_value, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = -1\n    for idx, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = idx\n    return [smallest_even, smallest_index] if smallest_even is not None else []", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    smallest_index = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                smallest_index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    index = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                index = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    min_value = None\n    min_index = None\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if min_value is None or val < min_value or (val == min_value and i < min_index):\n                min_value = val\n                min_index = i\n    if min_value is None:\n        return []\n    return [min_value, min_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even_value = None\n    smallest_index = -1\n    for idx, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even_value is None or val < smallest_even_value:\n                smallest_even_value = val\n                smallest_index = idx\n    if smallest_even_value is None:\n        return []\n    else:\n        return [smallest_even_value, smallest_index]", "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    smallest_even = None\n    index_of_smallest = -1\n    for i, val in enumerate(arr):\n        if val % 2 == 0:\n            if smallest_even is None or val < smallest_even:\n                smallest_even = val\n                index_of_smallest = i\n    if smallest_even is None:\n        return []\n    return [smallest_even, index_of_smallest]"], "outputs": "[[[2, 1]], [[2, 1]], [[]], [[0, 1]], [[]], [[2, 0]], [[0, 0]], [[]], [[0, 4]], [[0, 7]], [[0, 5]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]], [[1, 3, 5, 7, 9]], [[2, 2, 2, 2, 2]], [[0]], [[1]], [[10000, 9998, 10000, 9998, 0]], [[7, 6, 5, 4, 3, 2, 1, 0]], [[2, 4, 6, 8, 10, 0]]]", "input_output_examples": "[[[[4, 2, 3]], [[1, 2, 3]], [[]], [[5, 0, 3, 0, 4, 2]]], [[[2, 1]], [[2, 1]], [[]], [[0, 1]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/69", "original_requirement": "from typing import List\n\n\ndef search(lst: List[int]) -> int:\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef search(lst: List[int]) -> int:\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''", "entry_point": "search", "cluster_list": [{"programs_str": ["from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    res = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num and (num > res):\n            res = num\n    return res", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    res = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num:\n            res = max(res, num)\n    return res", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    valid_nums = [num for num, count in freq.items() if count >= num > 0]\n    if not valid_nums:\n        return -1\n    return max(valid_nums)", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num and num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    result = -1\n    for num, count in freq.items():\n        if num > 0 and count >= num and (num > result):\n            result = num\n    return result", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if count >= num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    counts = Counter(lst)\n    candidates = [num for num, freq in counts.items() if freq >= num and num > 0]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1", "from typing import List\nfrom collections import Counter\n\ndef search(lst: List[int]) -> int:\n    freq = Counter(lst)\n    candidates = [num for num, count in freq.items() if num > 0 and count >= num]\n    return max(candidates) if candidates else -1"], "outputs": "[[2], [3], [-1], [1], [10], [3], [1], [2], [5], [6]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4, 1, 2, 2, 3, 1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4]], [[5, 5, 4, 4, 4]], [[1]], [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10]], [[3, 3, 3]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[2, 2, 2, 2]], [[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 5, 5]], [[6, 6, 6, 6, 6, 6, 1]]]", "input_output_examples": "[[[[4, 1, 2, 2, 3, 1]], [[1, 2, 2, 3, 3, 3, 4, 4, 4]], [[5, 5, 4, 4, 4]]], [[2], [3], [-1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/70", "original_requirement": "from typing import List\n\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''", "entry_point": "strange_sort_list", "cluster_list": [{"programs_str": ["from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    turn = True\n    while left <= right:\n        if turn:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        turn = not turn\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    take_min = True\n    while left <= right:\n        if take_min:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        take_min = not take_min\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    left, right = (0, len(sorted_lst) - 1)\n    result = []\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    result = []\n    sorted_lst = sorted(lst)\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    turn_min = True\n    while left <= right:\n        if turn_min:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        turn_min = not turn_min\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    turn = 0\n    while left <= right:\n        if turn == 0:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        turn = 1 - turn\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    turn = True\n    while left <= right:\n        if turn:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        turn = not turn\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    lst_sorted = sorted(lst)\n    result = []\n    left, right = (0, len(lst_sorted) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(lst_sorted[left])\n            left += 1\n        else:\n            result.append(lst_sorted[right])\n            right -= 1\n        toggle = not toggle\n    return result", "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n    if not lst:\n        return []\n    sorted_lst = sorted(lst)\n    result = []\n    left, right = (0, len(sorted_lst) - 1)\n    toggle = True\n    while left <= right:\n        if toggle:\n            result.append(sorted_lst[left])\n            left += 1\n        else:\n            result.append(sorted_lst[right])\n            right -= 1\n        toggle = not toggle\n    return result"], "outputs": "[[[1, 4, 2, 3]], [[5, 5, 5, 5]], [[]], [[10]], [[1, 9, 3, 7, 5]], [[1, 9, 1, 6, 2, 5, 3, 5, 4]], [[60, 100, 70, 90, 80]], [[-4, -1, -3, -2]], [[-10, 10, 0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4]], [[5, 5, 5, 5]], [[]], [[10]], [[7, 3, 9, 1, 5]], [[3, 1, 4, 1, 5, 9, 2, 6, 5]], [[100, 90, 80, 70, 60]], [[-1, -2, -3, -4]], [[-10, 0, 10]]]", "input_output_examples": "[[[[1, 2, 3, 4]], [[5, 5, 5, 5]], [[]]], [[[1, 4, 2, 3]], [[5, 5, 5, 5]], [[]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/71", "original_requirement": "def triangle_area(a: float, b: float, c: float) -> float:\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "def triangle_area(a: float, b: float, c: float) -> float:\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''", "entry_point": "triangle_area", "cluster_list": [{"programs_str": ["from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or b + c <= a or c + a <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or b + c <= a or a + c <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and b + c > a and (c + a > b):\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or b + c <= a or a + c <= b:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b > c and a + c > b and (b + c > a):\n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "import math\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)", "from math import sqrt\n\ndef triangle_area(a: float, b: float, c: float) -> float:\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    s = (a + b + c) / 2\n    area = sqrt(s * (s - a) * (s - b) * (s - c))\n    return round(area, 2)"], "outputs": "[[6.0], [-1], [10.83], [0.0], [24.0], [-1], [-1], [30.0], [-1], [-1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[3, 4, 5], [1, 2, 10], [5, 5, 5], [0.1, 0.1, 0.1], [10, 6, 8], [1, 1, 2], [7, 10, 3], [5, 12, 13], [0, 4, 5], [3, 4, -5]]", "input_output_examples": "[[[3, 4, 5], [1, 2, 10]], [[6.0], [-1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/72", "original_requirement": "from typing import List\n\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''", "entry_point": "will_it_fly", "cluster_list": [{"programs_str": ["from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w", "from typing import List\n\ndef will_it_fly(q: List[int], w: int) -> bool:\n    return q == q[::-1] and sum(q) <= w"], "outputs": "[[False], [False], [True], [True], [True], [True], [True], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2], 5], [[3, 2, 3], 1], [[3, 2, 3], 9], [[3], 5], [[], 0], [[0, 0, 0], 0], [[1, 2, 1], 4], [[1, 2, 3], 6], [[1, 2, 1], 3], [[5, 4, 5], 10]]", "input_output_examples": "[[[[1, 2], 5], [[3, 2, 3], 1], [[3, 2, 3], 9], [[3], 5]], [[False], [False], [True], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/73", "original_requirement": "from typing import List\n\n\ndef smallest_change(arr: List[int]) -> int:\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef smallest_change(arr: List[int]) -> int:\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"", "entry_point": "smallest_change", "cluster_list": [{"programs_str": ["from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    count = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            count += 1\n        left += 1\n        right -= 1\n    return count", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    left, right = (0, len(arr) - 1)\n    while left < right:\n        if arr[left] != arr[right]:\n            changes += 1\n        left += 1\n        right -= 1\n    return changes", "from typing import List\n\ndef smallest_change(arr: List[int]) -> int:\n    changes = 0\n    n = len(arr)\n    for i in range(n // 2):\n        if arr[i] != arr[n - 1 - i]:\n            changes += 1\n    return changes"], "outputs": "[[4], [1], [0], [0], [0], [0], [1], [0], [3], [0], [3]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 2, 3, 2, 1]], [[]], [[1]], [[1, 1]], [[1, 2]], [[1, 2, 1]], [[1, 2, 3, 4, 5, 6]], [[7, 7, 7, 7, 7, 7, 7]], [[1, 3, 5, 3, 1, 2, 2]]]", "input_output_examples": "[[[[1, 2, 3, 5, 4, 7, 9, 6]], [[1, 2, 3, 4, 3, 2, 2]], [[1, 2, 3, 2, 1]]], [[4], [1], [0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/74", "original_requirement": "from typing import List\n\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''", "entry_point": "total_match", "cluster_list": [{"programs_str": ["from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total_chars_lst1 = sum((len(s) for s in lst1))\n    total_chars_lst2 = sum((len(s) for s in lst2))\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    total_chars_lst1 = sum((len(s) for s in lst1))\n    total_chars_lst2 = sum((len(s) for s in lst2))\n    if total_chars_lst1 <= total_chars_lst2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    len1 = sum((len(s) for s in lst1))\n    len2 = sum((len(s) for s in lst2))\n    if len1 <= len2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2", "from typing import List\n\ndef total_match(lst1: List[str], lst2: List[str]) -> List[str]:\n    sum1 = sum((len(s) for s in lst1))\n    sum2 = sum((len(s) for s in lst2))\n    if sum1 <= sum2:\n        return lst1\n    else:\n        return lst2"], "outputs": "[[[]], [['hI', 'Hi']], [['hi', 'admin']], [['hI', 'hi', 'hi']], [['4']], [['']], [['']], [['abc']], [['longstring']], [['size', 'match']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[], []], [['hi', 'admin'], ['hI', 'Hi']], [['hi', 'admin'], ['hi', 'hi', 'admin', 'project']], [['hi', 'admin'], ['hI', 'hi', 'hi']], [['4'], ['1', '2', '3', '4', '5']], [['a'], ['']], [[''], ['']], [['abc'], ['a', 'bc']], [['longstring'], ['short', 'string']], [['same', 'length'], ['size', 'match']]]", "input_output_examples": "[[[[], []], [['hi', 'admin'], ['hI', 'Hi']], [['hi', 'admin'], ['hi', 'hi', 'admin', 'project']], [['hi', 'admin'], ['hI', 'hi', 'hi']], [['4'], ['1', '2', '3', '4', '5']]], [[[]], [['hI', 'Hi']], [['hi', 'admin']], [['hI', 'hi', 'hi']], [['4']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/75", "original_requirement": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "repaired_requirement": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"\n    Returns True if the given integer 'a' (where 1 < a < 100) can be expressed as the product of exactly three prime numbers,\n    not necessarily distinct, and False otherwise.\n\n    Notes:\n    - The three prime factors can be the same prime repeated (e.g., 8 = 2 * 2 * 2).\n    - The order of multiplication does not matter.\n    - 'a' must be strictly less than 100.\n    \n    Example:\n    is_multiply_prime(30) == True  # 30 = 2 * 3 * 5\n    is_multiply_prime(105) == True # 105 = 3 * 5 * 7\n    is_multiply_prime(60) == True  # 60 = 2 * 2 * 15 is invalid since 15 is not prime, but 60 = 2 * 3 * 10 invalid, so False\n    \"\"\"", "original_clusters": {"requirement": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"", "entry_point": "is_multiply_prime", "cluster_list": [{"programs_str": ["from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [i for i in range(2, a) if is_prime(i)]\n    length = len(primes)\n    for i in range(length):\n        for j in range(i, length):\n            for k in range(j, length):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(2, a // i + 1):\n                if is_prime(j) and a // i % j == 0:\n                    k = a // i // j\n                    if is_prime(k) and i * j * k == a:\n                        return True\n    return False", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, isqrt(n) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(2, a // i + 1):\n                if is_prime(j) and a // i % j == 0:\n                    k = a // i // j\n                    if k >= 2 and is_prime(k):\n                        if i * j * k == a:\n                            return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    for i in range(2, a):\n        if is_prime(i):\n            for j in range(2, a):\n                if is_prime(j):\n                    k = a // (i * j) if i * j != 0 else 0\n                    if i * j * k == a and is_prime(k):\n                        return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    primes: List[int] = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    n = len(primes)\n    for i in range(n):\n        for j in range(i, n):\n            for k in range(j, n):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [p for p in range(2, a) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef primes_less_than_100() -> List[int]:\n    return [x for x in range(2, 100) if is_prime(x)]\n\ndef is_multiply_prime(a: int) -> bool:\n    primes = primes_less_than_100()\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(i, a):\n                if is_prime(j) and a % (i * j) == 0:\n                    k = a // (i * j)\n                    if is_prime(k):\n                        return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(i, a):\n                if is_prime(j) and a % (i * j) == 0:\n                    k = a // (i * j)\n                    if k >= j and is_prime(k):\n                        return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(2, a // i + 1):\n                if is_prime(j) and a // i % j == 0:\n                    k = a // (i * j)\n                    if k >= 2 and is_prime(k):\n                        if i * j * k == a:\n                            return True\n    return False"], "outputs": "[[True], [False], [True], [True], [True], [False], [False], [False], [False], [False]]", "probability": 0.95, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if a >= 100 or a <= 1:\n        return False\n    primes = [p for p in range(2, a) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"], "outputs": "[[True], [False], [False], [True], [True], [False], [False], [False], [False], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.2863969571159562, "llm_generated_inputs": "[[30], [60], [105], [8], [27], [1], [0], [2], [90], [97]]", "input_output_examples": "[[[30]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def is_multiply_prime(a: int) -> bool:\n    \"\"\"\n    Returns True if the given integer 'a' (where 1 < a < 100) can be expressed as the product of exactly three prime numbers,\n    not necessarily distinct, and False otherwise.\n\n    Notes:\n    - The three prime factors can be the same prime repeated (e.g., 8 = 2 * 2 * 2).\n    - The order of multiplication does not matter.\n    - 'a' must be strictly less than 100.\n    \n    Example:\n    is_multiply_prime(30) == True  # 30 = 2 * 3 * 5\n    is_multiply_prime(105) == True # 105 = 3 * 5 * 7\n    is_multiply_prime(60) == True  # 60 = 2 * 2 * 15 is invalid since 15 is not prime, but 60 = 2 * 3 * 10 invalid, so False\n    \"\"\"", "entry_point": "is_multiply_prime", "cluster_list": [{"programs_str": ["from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 1 or a >= 100:\n        return False\n    primes = [i for i in range(2, a + 1) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 1 or a >= 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from math import isqrt\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from math import isqrt\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in range(len(primes)):\n        p1 = primes[i]\n        if p1 > a:\n            break\n        for j in range(i, len(primes)):\n            p2 = primes[j]\n            if p1 * p2 > a:\n                break\n            if a % (p1 * p2) == 0:\n                p3 = a // (p1 * p2)\n                if p3 >= p2 and is_prime(p3):\n                    return True\n    return False", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 1 or a >= 100:\n        return False\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            for j in range(2, a // i + 1):\n                if is_prime(j) and a // i % j == 0:\n                    k = a // (i * j)\n                    if k >= 2 and is_prime(k):\n                        return True\n    return False", "from math import isqrt\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            ab = a // i\n            for j in range(2, ab + 1):\n                if is_prime(j) and ab % j == 0:\n                    k = ab // j\n                    if is_prime(k):\n                        return True\n    return False", "from math import isqrt\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            b = a // i\n            for j in range(2, b):\n                if is_prime(j) and b % j == 0:\n                    k = b // j\n                    if is_prime(k):\n                        return True\n    return False", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, isqrt(n) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 1 or a >= 100:\n        return False\n    for i in range(2, a + 1):\n        if is_prime(i) and a % i == 0:\n            for j in range(2, a + 1):\n                if is_prime(j) and a // i % j == 0:\n                    k = a // i // j\n                    if is_prime(k):\n                        if i * j * k == a:\n                            return True\n    return False", "from typing import List\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    primes: List[int] = [i for i in range(2, a) if is_prime(i)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 1 or a >= 100:\n        return False\n    primes = [i for i in range(2, 100) if is_prime(i)]\n    for i in primes:\n        if i > a:\n            break\n        for j in primes:\n            if i * j > a:\n                break\n            for k in primes:\n                if i * j * k == a:\n                    return True\n                if i * j * k > a:\n                    break\n    return False", "from math import isqrt\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    for i in primes:\n        if i > a:\n            break\n        if a % i == 0:\n            for j in primes:\n                if j > a or i * j > a:\n                    break\n                if a // (i * j) in primes and a % (i * j) == 0:\n                    return True\n    return False", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 1 or a >= 100:\n        return False\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            a_div_i = a // i\n            for j in range(2, a_div_i + 1):\n                if is_prime(j) and a_div_i % j == 0:\n                    k = a_div_i // j\n                    if is_prime(k):\n                        return True\n    return False", "from math import isqrt\n\ndef is_prime(n: int) -> bool:\n    if n < 2:\n        return False\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if not 1 < a < 100:\n        return False\n    for i in range(2, a + 1):\n        if is_prime(i) and a % i == 0:\n            a2 = a // i\n            for j in range(2, a2 + 1):\n                if is_prime(j) and a2 % j == 0:\n                    k = a2 // j\n                    if is_prime(k):\n                        return True\n    return False", "from typing import List\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef is_multiply_prime(a: int) -> bool:\n    if a <= 1 or a >= 100:\n        return False\n    primes = [p for p in range(2, 100) if is_prime(p)]\n    for i in primes:\n        for j in primes:\n            for k in primes:\n                if i * j * k == a:\n                    return True\n    return False"], "outputs": "[[True], [False], [False], [True], [True], [False], [False], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[30], [60], [105], [8], [27], [1], [0], [2], [90], [97]]", "input_output_examples": "[[[30]], [[True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.2863969571159562, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/76", "original_requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"", "repaired_requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"\n    Returns True if x is a power of n, i.e., there exists an integer k >= 0 such that n**k == x.\n    Special cases:\n    - x == 1 is always considered a power of n (since n**0 == 1 for any n != 0).\n    - If n <= 1, the function returns False for all x except when x == 1 and n == 1, which returns True.\n    \n    Examples:\n    is_simple_power(1, 4) => True  # 4**0 == 1\n    is_simple_power(2, 2) => True  # 2**1 == 2\n    is_simple_power(8, 2) => True  # 2**3 == 8\n    is_simple_power(3, 2) => False # 3 is not a power of 2\n    is_simple_power(3, 1) => False # 1**k == 1 only, so 3 is not a power of 1\n    is_simple_power(5, 3) => False # 5 is not a power of 3\n    is_simple_power(1, 1) => True  # 1**0 == 1\n    is_simple_power(1, 0) => True  # 0**0 is considered 1 here by definition for this function\n    \"\"\"", "original_clusters": {"requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"", "entry_point": "is_simple_power", "cluster_list": [{"programs_str": ["def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return x == n\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return x == n\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = n\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if n == 1:\n        return x == 1\n    if x == 1:\n        return True\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    current = n\n    while current < x:\n        current *= n\n    return current == x"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [True], [False], [True], [True], [False], [True], [True]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_simple_power(x: int, n: int) -> bool:\n    if n <= 1:\n        return False\n    if x == 1:\n        return True\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [False], [False], [True], [True], [False], [True], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def is_simple_power(x: int, n: int) -> bool:\n    if n <= 1:\n        return x == 1 if n == 1 else False\n    if x == 1:\n        return True\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [True], [False], [True], [True], [False], [True], [False]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.3589962496465303, "llm_generated_inputs": "[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3], [0, 2], [1, 1], [-8, 2], [27, 3], [16, 4], [10, 3], [81, 3], [1, 0]]", "input_output_examples": "[[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3]], [[True], [True], [True], [False], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"\n    Returns True if x is a power of n, i.e., there exists an integer k >= 0 such that n**k == x.\n    Special cases:\n    - x == 1 is always considered a power of n (since n**0 == 1 for any n != 0).\n    - If n <= 1, the function returns False for all x except when x == 1 and n == 1, which returns True.\n    \n    Examples:\n    is_simple_power(1, 4) => True  # 4**0 == 1\n    is_simple_power(2, 2) => True  # 2**1 == 2\n    is_simple_power(8, 2) => True  # 2**3 == 8\n    is_simple_power(3, 2) => False # 3 is not a power of 2\n    is_simple_power(3, 1) => False # 1**k == 1 only, so 3 is not a power of 1\n    is_simple_power(5, 3) => False # 5 is not a power of 3\n    is_simple_power(1, 1) => True  # 1**0 == 1\n    is_simple_power(1, 0) => True  # 0**0 is considered 1 here by definition for this function\n    \"\"\"", "entry_point": "is_simple_power", "cluster_list": [{"programs_str": ["from typing import Union\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return x == 1 and n == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return x == 1 and n == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return n == 1 and x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    val = n\n    while val < x:\n        val *= n\n    return val == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return n == 1 or n == 0 or n > 1\n    if n <= 1:\n        return x == 1 and n == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        if n == 0 or n == 1:\n            return True\n        if n > 1 or n < 0:\n            return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "from typing import Optional\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        if n == 1 and x == 1:\n            return True\n        return False\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        if n == 0 or n == 1:\n            return True\n        elif n > 1:\n            return True\n        else:\n            return False\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return x == 1 and n == 1\n    val = 1\n    while val < x:\n        val *= n\n    return val == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        if n == 0 or n == 1:\n            return True\n        elif n > 1 or n < 0:\n            return True\n        else:\n            return False\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "from typing import Optional\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        if n == 1:\n            return x == 1\n        elif n == 0:\n            return False\n        else:\n            return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        if n == 0:\n            return True\n        if n == 1:\n            return True\n        if n > 1:\n            return True\n        return False\n    if n <= 1:\n        return False\n    val = 1\n    while val < x:\n        val *= n\n    return val == x", "from typing import List\n\ndef is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return n == 1 and x == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return x == 1 and n == 1\n    power = 1\n    while power < x:\n        power *= n\n    return power == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        return True\n    if n <= 1:\n        return n == 1 and x == 1\n    current = 1\n    while current < x:\n        current *= n\n    return current == x", "def is_simple_power(x: int, n: int) -> bool:\n    if x == 1:\n        if n == 0:\n            return True\n        if n == 1:\n            return True\n        if n > 1:\n            return True\n        return False\n    if n <= 1:\n        return False\n    power = 1\n    while power < x:\n        power *= n\n    return power == x"], "outputs": "[[True], [True], [True], [False], [False], [False], [False], [True], [False], [True], [True], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3], [0, 2], [1, 1], [-8, 2], [27, 3], [16, 4], [10, 3], [81, 3], [1, 0]]", "input_output_examples": "[[[1, 4], [2, 2], [8, 2], [3, 2], [3, 1], [5, 3]], [[True], [True], [True], [False], [False], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9952039691289967, "original_nzpassk": false, "original_majority_passk": false, "original_entropy": 0.3589962496465303, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9945975744211687, "repaired_nzpassk": false, "repaired_majority_passk": false, "repaired_entropy": 0}}
{"task_id": "HumanEval/77", "original_requirement": "def iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "repaired_requirement": "def iscube(a: int) -> bool:\n    '''\n    Determine whether the given integer `a` is a perfect cube of some integer.\n    \n    The function returns True if there exists an integer `n` such that n³ == a.\n    This includes zero and negative cubes (e.g., -1 is a cube of -1).\n    \n    Note:\n    - The input `a` is always a valid integer.\n    - The function must return True only if `a` exactly equals the cube of an integer.\n    - Approximations or near matches (e.g., off by ±1 in cube root rounding) should not be considered cubes.\n    \n    Examples:\n    iscube(1) ==> True      # 1 = 1³\n    iscube(2) ==> False     # 2 is not a perfect cube\n    iscube(-1) ==> True     # -1 = (-1)³\n    iscube(64) ==> True     # 64 = 4³\n    iscube(0) ==> True      # 0 = 0³\n    iscube(180) ==> False   # 180 is not a perfect cube\n    iscube(-28) ==> False   # -28 is not a perfect cube\n    '''", "original_clusters": {"requirement": "def iscube(a: int) -> bool:\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''", "entry_point": "iscube", "cluster_list": [{"programs_str": ["def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    return root ** 3 == abs(a) if a > 0 else -root ** 3 == a", "def iscube(a: int) -> bool:\n    if a < 0:\n        root = round(abs(a) ** (1 / 3))\n        return -root ** 3 == a\n    else:\n        root = round(a ** (1 / 3))\n        return root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    x = round(abs(a) ** (1 / 3))\n    return x ** 3 == abs(a) or (x + 1) ** 3 == abs(a) or (x - 1) ** 3 == abs(a) if a >= 0 else (-x) ** 3 == a or (-(x + 1)) ** 3 == a or (-(x - 1)) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    if cube_root ** 3 == abs(a):\n        return True\n    if (cube_root + 1) ** 3 == abs(a):\n        cube_root += 1\n        return True\n    if (cube_root - 1) ** 3 == abs(a):\n        cube_root -= 1\n        return True\n    return False if a > 0 else any((x ** 3 == a for x in (-cube_root, cube_root)))", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    root = round(abs_a ** (1 / 3))\n    return root ** 3 == abs_a if a > 0 else -root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    return cube_root ** 3 == abs(a) if a > 0 else -cube_root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    if cube_root ** 3 == abs(a):\n        return True\n    if (cube_root + 1) ** 3 == abs(a):\n        return True\n    if (cube_root - 1) ** 3 == abs(a):\n        return True\n    return False if a > 0 else -cube_root ** 3 == a or -(cube_root + 1) ** 3 == a or -(cube_root - 1) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    return root ** 3 == abs(a) or -root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    return cube_root ** 3 == abs(a) if a > 0 else -cube_root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    if root ** 3 == abs(a):\n        return True\n    if (root + 1) ** 3 == abs(a):\n        return True\n    if (root - 1) ** 3 == abs(a):\n        return True\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    return root ** 3 == abs(a) if a > 0 else -root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    if root ** 3 == abs(a):\n        return True if a > 0 else (-root) ** 3 == a\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    cube_root = round(abs_a ** (1 / 3))\n    return cube_root ** 3 == abs_a if a > 0 else -cube_root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    if root ** 3 == abs(a):\n        return True if a > 0 else -root ** 3 == a\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    if cube_root ** 3 == abs(a):\n        return True if a > 0 else True\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    if cube_root ** 3 == abs(a):\n        return True\n    if (cube_root + 1) ** 3 == abs(a):\n        return True\n    if (cube_root - 1) ** 3 == abs(a):\n        return True\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    return root ** 3 == abs(a) if a > 0 else -root ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    return cube_root ** 3 == abs(a) if a > 0 else -cube_root ** 3 == a"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [True], [True], [True], [False], [False]]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    if a > 0:\n        root = round(a ** (1 / 3))\n    else:\n        root = round(-(-a) ** (1 / 3))\n        root = -root\n    return root ** 3 == a"], "outputs": "[[True], [False], [False], [True], [True], [False], [False], [True], [True], [False], [False], [False]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.8333333333333334, "failed_input_output_examples": "[[[-1], [False], [True]]]"}, {"programs_str": ["def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    cube_root = round(abs(a) ** (1 / 3))\n    if cube_root ** 3 == abs(a):\n        return True\n    if (cube_root + 1) ** 3 == abs(a) or (cube_root - 1) ** 3 == abs(a):\n        return True\n    return False if a > 0 else round(-(-a) ** (1 / 3)) ** 3 != a"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [True], [True], [True], [False], [True]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.3589962496465303, "llm_generated_inputs": "[[1], [2], [-1], [64], [0], [180], [-27], [27], [125], [-125], [28], [-28]]", "input_output_examples": "[[[1], [2], [-1], [64], [0], [180]], [[True], [False], [True], [True], [True], [False]]]", "weighted_test_consistency": 0.9916666666666667, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def iscube(a: int) -> bool:\n    '''\n    Determine whether the given integer `a` is a perfect cube of some integer.\n    \n    The function returns True if there exists an integer `n` such that n³ == a.\n    This includes zero and negative cubes (e.g., -1 is a cube of -1).\n    \n    Note:\n    - The input `a` is always a valid integer.\n    - The function must return True only if `a` exactly equals the cube of an integer.\n    - Approximations or near matches (e.g., off by ±1 in cube root rounding) should not be considered cubes.\n    \n    Examples:\n    iscube(1) ==> True      # 1 = 1³\n    iscube(2) ==> False     # 2 is not a perfect cube\n    iscube(-1) ==> True     # -1 = (-1)³\n    iscube(64) ==> True     # 64 = 4³\n    iscube(0) ==> True      # 0 = 0³\n    iscube(180) ==> False   # 180 is not a perfect cube\n    iscube(-28) ==> False   # -28 is not a perfect cube\n    '''", "entry_point": "iscube", "cluster_list": [{"programs_str": ["def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    return n ** 3 == abs(a) if a > 0 else (-n) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    if n ** 3 == abs(a):\n        return True if a > 0 else (-n) ** 3 == a\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    if a > 0:\n        n = round(a ** (1 / 3))\n    else:\n        n = round(-(-a) ** (1 / 3))\n    return n ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    root = round(abs(a) ** (1 / 3))\n    if root ** 3 == abs(a):\n        return a > 0 or (a < 0 and (-root) ** 3 == a)\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    if n ** 3 == abs(a):\n        return a > 0 or (a < 0 and (-n) ** 3 == a)\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    if n ** 3 == abs(a):\n        return True if a > 0 else (-n) ** 3 == a\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    return n ** 3 == abs(a) if a > 0 else -n ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    return n ** 3 == abs(a) if a > 0 else (-n) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    if a > 0:\n        n = round(a ** (1 / 3))\n    else:\n        n = -round(abs(a) ** (1 / 3))\n    return n ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    if a > 0:\n        n = round(a ** (1 / 3))\n        return n ** 3 == a\n    else:\n        n = round((-a) ** (1 / 3))\n        return (-n) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    return n ** 3 == abs(a) if a > 0 else (-n) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1.0 / 3))\n    if n ** 3 == abs(a):\n        return True if a > 0 else (-n) ** 3 == a\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    sign = 1 if a > 0 else -1\n    root = round(abs(a) ** (1 / 3))\n    return (sign * root) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    if n ** 3 == abs(a) and (a > 0 and n > 0 or (a < 0 and n > 0 and ((-n) ** 3 == a))):\n        return True\n    if a < 0 and (-n) ** 3 == a:\n        return True\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    abs_a = abs(a)\n    n = round(abs_a ** (1 / 3))\n    return n ** 3 == abs_a if a > 0 else (-n) ** 3 == a", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    if n ** 3 == abs(a):\n        return True if a > 0 else (-n) ** 3 == a\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    if n ** 3 == abs(a):\n        return a > 0 or -n ** 3 == a\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    if n ** 3 == abs(a):\n        return a > 0 or (a < 0 and (-n) ** 3 == a)\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    n = round(abs(a) ** (1 / 3))\n    if n ** 3 == abs(a):\n        return a > 0 or n == 0 or (-n) ** 3 == a\n    return False", "def iscube(a: int) -> bool:\n    if a == 0:\n        return True\n    if a > 0:\n        n = round(a ** (1 / 3))\n    else:\n        n = -round(abs(a) ** (1 / 3))\n    return n ** 3 == a"], "outputs": "[[True], [False], [True], [True], [True], [False], [True], [True], [True], [True], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [-1], [64], [0], [180], [-27], [27], [125], [-125], [28], [-28]]", "input_output_examples": "[[[1], [2], [-1], [64], [0], [180]], [[True], [False], [True], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.9, "original_avg_pass_rate": 0.9930635838150289, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.3589962496465303, "repaired_passk": 0.95, "repaired_avg_pass_rate": 0.9965317919075144, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/78", "original_requirement": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"", "entry_point": "hex_key", "cluster_list": [{"programs_str": ["def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_values = {2, 3, 5, 7, 11, 13}\n    count = 0\n    for ch in num:\n        val = int(ch, 16)\n        if val in prime_hex_values:\n            count += 1\n    return count", "def hex_key(num: str) -> int:\n    prime_values = {2, 3, 5, 7, 11, 13}\n    count = 0\n    for ch in num:\n        if ch.isdigit():\n            val = int(ch)\n        else:\n            val = 10 + ord(ch) - ord('A')\n        if val in prime_values:\n            count += 1\n    return count", "def hex_key(num: str) -> int:\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((char in prime_hex_digits for char in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "from typing import List\n\ndef hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for ch in num if ch in prime_hex_digits))", "def hex_key(num: str) -> int:\n    prime_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_digits for ch in num))", "from typing import List\n\ndef hex_key(num: str) -> int:\n    prime_hex_values = {2, 3, 5, 7, 11, 13}\n    count = 0\n    for ch in num:\n        val = int(ch, 16)\n        if val in prime_hex_values:\n            count += 1\n    return count", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_values = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_values for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((1 for ch in num if ch in prime_hex_digits))", "def hex_key(num: str) -> int:\n    prime_hex_values = {2, 3, 5, 7, 11, 13}\n    count = 0\n    for ch in num:\n        val = int(ch, 16)\n        if val in prime_hex_values:\n            count += 1\n    return count", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))", "def hex_key(num: str) -> int:\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    return sum((ch in prime_hex_digits for ch in num))"], "outputs": "[[1], [2], [4], [6], [2], [0], [0], [4], [4], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020'], [''], ['0000'], ['FBBBB'], ['1234567890'], ['FFFFFFFF']]", "input_output_examples": "[[['AB'], ['1077E'], ['ABED1A33'], ['123456789ABCDEF0'], ['2020']], [[1], [2], [4], [6], [2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/79", "original_requirement": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def decimal_to_binary(decimal: int) -> str:\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"", "entry_point": "decimal_to_binary", "cluster_list": [{"programs_str": ["def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'", "def decimal_to_binary(decimal: int) -> str:\n    binary_str = bin(decimal)[2:]\n    return f'db{binary_str}db'", "def decimal_to_binary(decimal: int) -> str:\n    return 'db' + bin(decimal)[2:] + 'db'"], "outputs": "[['db1111db'], ['db100000db'], ['db0db'], ['db1db'], ['db11111111db'], ['db1111111111db'], ['db10db'], ['db11110001001000000db']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[15], [32], [0], [1], [255], [1023], [2], [123456]]", "input_output_examples": "[[[15], [32]], [['db1111db'], ['db100000db']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/80", "original_requirement": "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"", "entry_point": "is_happy", "cluster_list": [{"programs_str": ["def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) < 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) < 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) < 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) < 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) < 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) < 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        triplet = s[i:i + 3]\n        if len(set(triplet)) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        triplet = s[i:i + 3]\n        if len(set(triplet)) != 3:\n            return False\n    return True", "def is_happy(s: str) -> bool:\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len({s[i], s[i + 1], s[i + 2]}) != 3:\n            return False\n    return True"], "outputs": "[[False], [False], [True], [False], [True], [False], [False], [True], [False], [True], [False], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['a'], ['aa'], ['abcd'], ['aabb'], ['adb'], ['xyy'], [''], ['abc'], ['aba'], ['abca'], ['aabbcc'], ['xyz']]", "input_output_examples": "[[['a'], ['aa'], ['abcd'], ['aabb'], ['adb'], ['xyy']], [[False], [False], [True], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/81", "original_requirement": "from typing import List\n\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"", "entry_point": "numerical_letter_grade", "cluster_list": [{"programs_str": ["from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        elif gpa == 0.0:\n            result.append('E')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append('A+')\n        elif g > 3.7:\n            result.append('A')\n        elif g > 3.3:\n            result.append('A-')\n        elif g > 3.0:\n            result.append('B+')\n        elif g > 2.7:\n            result.append('B')\n        elif g > 2.3:\n            result.append('B-')\n        elif g > 2.0:\n            result.append('C+')\n        elif g > 1.7:\n            result.append('C')\n        elif g > 1.3:\n            result.append('C-')\n        elif g > 1.0:\n            result.append('D+')\n        elif g > 0.7:\n            result.append('D')\n        elif g > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa > 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append('A+')\n        elif g > 3.7:\n            result.append('A')\n        elif g > 3.3:\n            result.append('A-')\n        elif g > 3.0:\n            result.append('B+')\n        elif g > 2.7:\n            result.append('B')\n        elif g > 2.3:\n            result.append('B-')\n        elif g > 2.0:\n            result.append('C+')\n        elif g > 1.7:\n            result.append('C')\n        elif g > 1.3:\n            result.append('C-')\n        elif g > 1.0:\n            result.append('D+')\n        elif g > 0.7:\n            result.append('D')\n        elif g > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        elif gpa == 0.0:\n            result.append('E')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        elif gpa == 0.0:\n            result.append('E')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for g in grades:\n        if g == 4.0:\n            result.append('A+')\n        elif g > 3.7:\n            result.append('A')\n        elif g > 3.3:\n            result.append('A-')\n        elif g > 3.0:\n            result.append('B+')\n        elif g > 2.7:\n            result.append('B')\n        elif g > 2.3:\n            result.append('B-')\n        elif g > 2.0:\n            result.append('C+')\n        elif g > 1.7:\n            result.append('C')\n        elif g > 1.3:\n            result.append('C-')\n        elif g > 1.0:\n            result.append('D+')\n        elif g > 0.7:\n            result.append('D')\n        elif g > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result", "from typing import List\n\ndef numerical_letter_grade(grades: List[float]) -> List[str]:\n    result = []\n    for gpa in grades:\n        if gpa == 4.0:\n            result.append('A+')\n        elif gpa > 3.7:\n            result.append('A')\n        elif gpa > 3.3:\n            result.append('A-')\n        elif gpa > 3.0:\n            result.append('B+')\n        elif gpa > 2.7:\n            result.append('B')\n        elif gpa > 2.3:\n            result.append('B-')\n        elif gpa > 2.0:\n            result.append('C+')\n        elif gpa > 1.7:\n            result.append('C')\n        elif gpa > 1.3:\n            result.append('C-')\n        elif gpa > 1.0:\n            result.append('D+')\n        elif gpa > 0.7:\n            result.append('D')\n        elif gpa > 0.0:\n            result.append('D-')\n        else:\n            result.append('E')\n    return result"], "outputs": "[[['A+']], [['A']], [['A-']], [['B+']], [['B']], [['B-']], [['C+']], [['C']], [['C-']], [['D+']], [['D']], [['D-']], [['E']], [['A+', 'A-', 'A-', 'B', 'B-', 'B-', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'D-']], [['A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E']]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4.0]], [[3.8]], [[3.5]], [[3.1]], [[2.8]], [[2.5]], [[2.1]], [[1.8]], [[1.4]], [[1.1]], [[0.8]], [[0.5]], [[0.0]], [[4.0, 3.7, 3.4, 3.0, 2.7, 2.4, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0, 0.2]], [[3.7, 3.3, 3.0, 2.7, 2.3, 2.0, 1.7, 1.3, 1.0, 0.7, 0.0]]]", "input_output_examples": "[[[[4.0, 3, 1.7, 2, 3.5]]], [[['A+', 'B', 'C-', 'C', 'A-']]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/82", "original_requirement": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"", "entry_point": "prime_length", "cluster_list": [{"programs_str": ["from math import isqrt\n\ndef prime_length(string: str) -> bool:\n    n = len(string)\n    if n < 2:\n        return False\n    for i in range(2, isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "from math import isqrt\n\ndef prime_length(string: str) -> bool:\n    length = len(string)\n    if length < 2:\n        return False\n    for i in range(2, isqrt(length) + 1):\n        if length % i == 0:\n            return False\n    return True", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))", "def prime_length(string: str) -> bool:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    return is_prime(len(string))"], "outputs": "[[True], [True], [True], [False], [False], [False], [True], [True], [False], [True], [False], [True], [False], [False], [False]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hello'], ['abcdcba'], ['kittens'], ['orange'], [''], ['a'], ['ab'], ['abc'], ['abcd'], ['abcde'], ['abcdef'], ['abcdefg'], ['abcdefgh'], ['abcdefghi'], ['abcdefghij']]", "input_output_examples": "[[['Hello'], ['abcdcba'], ['kittens'], ['orange']], [[True], [True], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/83", "original_requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "repaired_requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of all n-digit positive integers \n    that either start with the digit 1 or end with the digit 1 (or both). \n    Note that n-digit positive integers are those with exactly n digits, \n    where the leading digit is non-zero.\n\n    For example:\n    - If n = 1, the only 1-digit positive integer starting or ending with 1 is 1 itself, so return 1.\n    - For n > 1, count all n-digit numbers starting with 1 plus all n-digit numbers ending with 1,\n      but do not double-count numbers that both start and end with 1.\n    \"\"\"", "original_clusters": {"requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"", "entry_point": "starts_one_ends", "cluster_list": [{"programs_str": ["def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_one = 10 ** (n - 1)\n    end_one = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_one + end_one - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_one = 10 ** (n - 1)\n    end_one = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_one + end_one - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1"], "outputs": "[[1], [18], [180], [18000], [1800000000]]", "probability": 0.5, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}, {"programs_str": ["def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_one = 10 ** (n - 1)\n    end_with_one = 10 ** (n - 1)\n    start_and_end_with_one = 10 ** (n - 2) if n > 1 else 0\n    return start_with_one + end_with_one - start_and_end_with_one", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_one = 10 ** (n - 1)\n    end_with_one = 9 * 10 ** (n - 2)\n    return start_with_one + end_with_one", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_numbers = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_one = 10 ** (n - 1)\n    end_one = 10 ** (n - 1)\n    both = 10 ** (n - 2)\n    return start_one + end_one - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    return 2 * 10 ** (n - 1) - 10 ** (n - 2)", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_one = 10 ** (n - 1)\n    end_one = 10 ** (n - 1)\n    both = 10 ** (n - 2)\n    return start_one + end_one - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 10 ** (n - 1)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both"], "outputs": "[[1], [19], [190], [19000], [1900000000]]", "probability": 0.5, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}], "entropy": 1.0, "llm_generated_inputs": "[[1], [2], [3], [5], [10]]", "input_output_examples": "[[], []]", "weighted_test_consistency": -1.0, "at_least_one_align": false}, "repaired_clusters": {"requirement": "def starts_one_ends(n: int) -> int:\n    \"\"\"\n    Given a positive integer n, return the count of all n-digit positive integers \n    that either start with the digit 1 or end with the digit 1 (or both). \n    Note that n-digit positive integers are those with exactly n digits, \n    where the leading digit is non-zero.\n\n    For example:\n    - If n = 1, the only 1-digit positive integer starting or ending with 1 is 1 itself, so return 1.\n    - For n > 1, count all n-digit numbers starting with 1 plus all n-digit numbers ending with 1,\n      but do not double-count numbers that both start and end with 1.\n    \"\"\"", "entry_point": "starts_one_ends", "cluster_list": [{"programs_str": ["def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_start_1 = 10 ** (n - 1)\n    total_end_1 = 9 * 10 ** (n - 2)\n    total_both_1 = 10 ** (n - 2)\n    return total_start_1 + total_end_1 - total_both_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_start_1 = 10 ** (n - 1)\n    total_end_1 = 9 * 10 ** (n - 2)\n    total_both = 10 ** (n - 2)\n    return total_start_1 + total_end_1 - total_both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    else:\n        total_start_with_1 = 10 ** (n - 1)\n        total_end_with_1 = 9 * 10 ** (n - 2)\n        total_both_start_and_end_with_1 = 10 ** (n - 2)\n        return total_start_with_1 + total_end_with_1 - total_both_start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_start_1 = 10 ** (n - 1)\n    total_end_1 = 9 * 10 ** (n - 2)\n    total_both = 10 ** (n - 2)\n    return total_start_1 + total_end_1 - total_both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_start_1 = 10 ** (n - 1)\n    total_end_1 = 9 * 10 ** (n - 2)\n    total_both = 10 ** (n - 2)\n    return total_start_1 + total_end_1 - total_both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2) if n > 1 else 1\n    both_start_end_1 = 10 ** (n - 2) if n > 2 else 1\n    return start_with_1 + end_with_1 - both_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_numbers = 9 * 10 ** (n - 1)\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    start_and_end_with_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_start_1 = 10 ** (n - 1)\n    total_end_1 = 9 * 10 ** (n - 2)\n    total_start_end_1 = 10 ** (n - 2)\n    return total_start_1 + total_end_1 - total_start_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_start_with_1 = 10 ** (n - 1)\n    total_end_with_1 = 9 * 10 ** (n - 2)\n    total_both = 10 ** (n - 2)\n    return total_start_with_1 + total_end_with_1 - total_both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_and_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_and_end_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_start_with_1 = 10 ** (n - 1)\n    total_end_with_1 = 9 * 10 ** (n - 2)\n    total_start_and_end_with_1 = 10 ** (n - 2)\n    return total_start_with_1 + total_end_with_1 - total_start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_start_with_1 = 10 ** (n - 1)\n    total_end_with_1 = 9 * 10 ** (n - 2)\n    total_start_and_end_with_1 = 10 ** (n - 2)\n    return total_start_with_1 + total_end_with_1 - total_start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    total_start_with_1 = 10 ** (n - 1)\n    total_end_with_1 = 9 * 10 ** (n - 2)\n    total_start_and_end_with_1 = 10 ** (n - 2)\n    return total_start_with_1 + total_end_with_1 - total_start_and_end_with_1", "def starts_one_ends(n: int) -> int:\n    if n == 1:\n        return 1\n    start_with_1 = 10 ** (n - 1)\n    end_with_1 = 9 * 10 ** (n - 2)\n    both_start_end_1 = 10 ** (n - 2)\n    return start_with_1 + end_with_1 - both_start_end_1"], "outputs": "[[1], [18], [180], [18000], [1800000000]]", "probability": 1.0, "is_align_req": -1, "test_consistency": -1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1], [2], [3], [5], [10]]", "input_output_examples": "[[], []]", "weighted_test_consistency": -1.0, "at_least_one_align": false}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.3729357798165137, "original_nzpassk": false, "original_majority_passk": false, "original_entropy": 1.0, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.5408256880733944, "repaired_nzpassk": false, "repaired_majority_passk": false, "repaired_entropy": 0}}
{"task_id": "HumanEval/84", "original_requirement": "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def solve(N: int) -> str:\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"", "entry_point": "solve", "cluster_list": [{"programs_str": ["def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(d) for d in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(d) for d in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "from typing import Optional\n\ndef solve(N: int) -> str:\n    return bin(sum((int(d) for d in str(N))))[2:]", "def solve(N: int) -> str:\n    total = sum((int(d) for d in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    total = sum((int(d) for d in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    total = sum((int(d) for d in str(N)))\n    return bin(total)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(d) for d in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(d) for d in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    s = sum((int(d) for d in str(N)))\n    return bin(s)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(d) for d in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]", "def solve(N: int) -> str:\n    digit_sum = sum((int(d) for d in str(N)))\n    return bin(digit_sum)[2:]", "def solve(N: int) -> str:\n    total_sum = sum((int(digit) for digit in str(N)))\n    return bin(total_sum)[2:]"], "outputs": "[['1'], ['110'], ['1100'], ['0'], ['1001'], ['100100'], ['1']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[1000], [150], [147], [0], [9], [9999], [10000]]", "input_output_examples": "[[[1000], [150], [147]], [['1'], ['110'], ['1100']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/85", "original_requirement": "from typing import List\n\n\ndef add(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef add(lst: List[int]) -> int:\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"", "entry_point": "add", "cluster_list": [{"programs_str": ["from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((value for index, value in enumerate(lst) if index % 2 == 1 and value % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((value for index, value in enumerate(lst) if index % 2 == 1 and value % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((num for i, num in enumerate(lst) if i % 2 == 1 and num % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((x for i, x in enumerate(lst) if i % 2 == 1 and x % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))", "from typing import List\n\ndef add(lst: List[int]) -> int:\n    return sum((lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0))"], "outputs": "[[2], [18], [0], [12], [0], [0], [18], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[4, 2, 6, 7]], [[1, 4, 3, 6, 5, 8]], [[2, 1, 4, 3, 6, 5]], [[0, 2, 0, 4, 0, 6]], [[1]], [[2, 3, 4]], [[-2, 4, -4, 6, -6, 8]], [[1, 3, 5, 7, 9, 11]]]", "input_output_examples": "[[[[4, 2, 6, 7]]], [[2]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/86", "original_requirement": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"", "repaired_requirement": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Takes a string `s` and returns a new string where each contiguous sequence of non-space characters \n    (i.e., each word or token separated by spaces) is replaced by a version of that sequence with its \n    characters sorted in ascending ASCII order. The order of words and the exact spacing between them \n    must be preserved exactly as in the input.\n\n    Important clarifications to remove ambiguity:\n    - Words are defined strictly as sequences of characters separated by space characters.\n    - Each word (including any punctuation or special characters within it) is treated as a whole unit \n      whose characters are sorted by ASCII value.\n    - Spaces between words are preserved exactly as in the input, including multiple spaces if present.\n    - No special handling or separation of alphabetic and non-alphabetic characters within words is done.\n      All characters in a word are sorted together.\n    - The function does not reorder words or spaces, only sorts characters within each word.\n\n    Examples:\n    anti_shuffle('Hi') returns 'Hi'  # 'Hi' sorted is 'Hi' since 'H' < 'i'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    anti_shuffle('!@# $%^ &*()') returns '!#@ $%^ &()*'\n    \"\"\"", "original_clusters": {"requirement": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"", "entry_point": "anti_shuffle", "cluster_list": [{"programs_str": ["import re\n\ndef anti_shuffle(s: str) -> str:\n\n    def sort_word(word):\n        if not word.isalpha():\n            letters = sorted([c for c in word if c.isalpha()])\n            non_letters = [(i, c) for i, c in enumerate(word) if not c.isalpha()]\n            for i, c in non_letters:\n                letters.insert(i, c)\n            return ''.join(letters)\n        else:\n            return ''.join(sorted(word))\n    parts = re.split('(\\\\s+)', s)\n    result = []\n    for part in parts:\n        if part.isspace() or part == '':\n            result.append(part)\n        else:\n            result.append(sort_word(part))\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    parts = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for part in parts:\n        if part.isspace():\n            result.append(part)\n        elif all((char.isalpha() for char in part)):\n            sorted_part = ''.join(sorted(part))\n            result.append(sorted_part)\n        else:\n            letters = [c for c in part if c.isalpha()]\n            letters.sort()\n            non_letters = [(i, c) for i, c in enumerate(part) if not c.isalpha()]\n            res_chars = []\n            letter_idx = 0\n            for i in range(len(part)):\n                if any((nl[0] == i for nl in non_letters)):\n                    res_chars.append(next((c for idx, c in non_letters if idx == i)))\n                else:\n                    res_chars.append(letters[letter_idx])\n                    letter_idx += 1\n            result.append(''.join(res_chars))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    while i < len(s):\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n        else:\n            start = i\n            while i < len(s) and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            if any((not c.isalpha() for c in word)):\n                letters = sorted([c for c in word if c.isalpha()])\n                non_letters = [(idx, c) for idx, c in enumerate(word) if not c.isalpha()]\n                letters_iter = iter(letters)\n                new_word_chars = []\n                for idx in range(len(word)):\n                    if any((idx == pos for pos, _ in non_letters)):\n                        new_word_chars.append(next((c for pos, c in non_letters if pos == idx)))\n                    else:\n                        new_word_chars.append(next(letters_iter))\n                new_word = ''.join(new_word_chars)\n            else:\n                new_word = ''.join(sorted(word))\n            result.append(new_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    import re\n\n    def shuffle_word(word):\n        if word.isalpha():\n            return ''.join(sorted(word))\n        else:\n            alpha_chars = sorted([c for c in word if c.isalpha()])\n            result = []\n            alpha_index = 0\n            for c in word:\n                if c.isalpha():\n                    result.append(alpha_chars[alpha_index])\n                    alpha_index += 1\n                else:\n                    result.append(c)\n            return ''.join(result)\n    parts = re.split('(\\\\s+)', s)\n    for i, part in enumerate(parts):\n        if part.strip() != '':\n            parts[i] = shuffle_word(part)\n    return ''.join(parts)", "def anti_shuffle(s: str) -> str:\n    import re\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        elif all((not c.isalpha() for c in token)):\n            result.append(token)\n        else:\n            letters = [c for c in token if c.isalpha()]\n            non_letters = [(i, c) for i, c in enumerate(token) if not c.isalpha()]\n            letters.sort()\n            res = list(letters)\n            for i, c in non_letters:\n                res.insert(i, c)\n            result.append(''.join(res))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == ' ':\n            result.append(' ')\n            i += 1\n            continue\n        j = i\n        while j < n and s[j] != ' ':\n            j += 1\n        word = s[i:j]\n        if all((c.isalpha() for c in word)):\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n        else:\n            letters = sorted((c for c in word if c.isalpha()))\n            non_letters = [(idx, c) for idx, c in enumerate(word) if not c.isalpha()]\n            for idx, c in non_letters:\n                letters.insert(idx, c)\n            result.append(''.join(letters))\n        i = j\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    import re\n    parts = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for part in parts:\n        if part.isspace():\n            result.append(part)\n        else:\n            letters = [c for c in part if c.isalpha()]\n            if not letters:\n                result.append(part)\n                continue\n            letters.sort()\n            res_word = list(part)\n            letter_idx = 0\n            for i, ch in enumerate(part):\n                if ch.isalpha():\n                    res_word[i] = letters[letter_idx]\n                    letter_idx += 1\n            result.append(''.join(res_word))\n    return ''.join(result)", "from typing import List\nimport re\n\ndef anti_shuffle(s: str) -> str:\n\n    def sort_word(word: str) -> str:\n        if word.isalpha():\n            return ''.join(sorted(word))\n        elif word.isalpha() == False:\n            letters = [c for c in word if c.isalpha()]\n            non_letters = [c for c in word if not c.isalpha()]\n            if letters:\n                sorted_letters = sorted(letters)\n                res = []\n                l_idx = 0\n                for c in word:\n                    if c.isalpha():\n                        res.append(sorted_letters[l_idx])\n                        l_idx += 1\n                    else:\n                        res.append(c)\n                return ''.join(res)\n            else:\n                return word\n        else:\n            return word\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        else:\n            result.append(sort_word(token))\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello Wdlor!!!'], [''], ['   '], ['a'], ['!@# $%^ &*()'], ['123 321'], ['Teh cikqu bnorw fox jmpsu eorv eht alyz dgo'], ['Phnoty3.8 is aeemosw!!!']]", "probability": 0.4, "is_align_req": 0, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[['Hello World!!!'], ['Hello Wdlor!!!'], ['Hello !!!Wdlor']]]"}, {"programs_str": ["def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    in_word = None\n    for ch in s:\n        if ch.isalpha():\n            if in_word is None or in_word is True:\n                word.append(ch)\n                in_word = True\n            elif word:\n                sorted_word = ''.join(sorted(word))\n                result.append(sorted_word)\n                word = [ch]\n                in_word = True\n            else:\n                word.append(ch)\n                in_word = True\n        elif in_word is None or in_word is False:\n            word.append(ch)\n            in_word = False\n        elif word:\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n            word = [ch]\n            in_word = False\n        else:\n            word.append(ch)\n            in_word = False\n    if word:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello Wdlor!!!'], [''], ['   '], ['a'], ['  !#$%&()*@^'], [' 112233'], ['Teh cikqu bnorw fox jmpsu eorv eht alyz dgo'], ['Phnoty .38is aeemosw!!!']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[['Hello World!!!'], ['Hello Wdlor!!!'], ['Hello !!!Wdlor']]]"}, {"programs_str": ["def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for ch in s:\n        if ch == ' ':\n            if word:\n                sorted_word = ''.join(sorted(word))\n                result.append(sorted_word)\n                word = []\n            result.append(' ')\n        else:\n            word.append(ch)\n    if word:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    current_word = []\n    for char in s:\n        if char == ' ':\n            if current_word:\n                result.append(''.join(sorted(current_word)))\n                current_word = []\n            result.append(' ')\n        else:\n            current_word.append(char)\n    if current_word:\n        result.append(''.join(sorted(current_word)))\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word_chars = []\n    for ch in s:\n        if ch == ' ':\n            if word_chars:\n                sorted_word = ''.join(sorted(word_chars))\n                result.append(sorted_word)\n                word_chars = []\n            result.append(' ')\n        else:\n            word_chars.append(ch)\n    if word_chars:\n        sorted_word = ''.join(sorted(word_chars))\n        result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    import re\n    result = []\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        else:\n            sorted_token = ''.join(sorted(token))\n            result.append(sorted_token)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    current_word = []\n    for char in s:\n        if char == ' ':\n            if current_word:\n                result.append(''.join(sorted(current_word)))\n                current_word = []\n            result.append(' ')\n        else:\n            current_word.append(char)\n    if current_word:\n        result.append(''.join(sorted(current_word)))\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        else:\n            chars_sorted = ''.join(sorted(token))\n            result.append(chars_sorted)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for char in s:\n        if char == ' ':\n            if word:\n                sorted_word = ''.join(sorted(word))\n                result.append(sorted_word)\n                word = []\n            result.append(' ')\n        else:\n            word.append(char)\n    if word:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello !!!Wdlor'], [''], ['   '], ['a'], ['!#@ $%^ &()*'], ['123 123'], ['Teh cikqu bnorw fox jmpsu eorv eht alyz dgo'], ['.38Phnoty is !!!aeemosw']]", "probability": 0.35, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def anti_shuffle(s: str) -> str:\n    import re\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        elif token.isalpha():\n            sorted_word = ''.join(sorted(token))\n            result.append(sorted_word)\n        else:\n            letters = sorted([c for c in token if c.isalpha()])\n            non_letters = []\n            for c in token:\n                if not c.isalpha():\n                    non_letters.append(c)\n            prefix_non_letters = []\n            rest_letters = []\n            i = 0\n            while i < len(token) and (not token[i].isalpha()):\n                prefix_non_letters.append(token[i])\n                i += 1\n            letters_rest = sorted([c for c in token if c.isalpha()])\n            suffix_non_letters = []\n            for c in token[i + len(letters_rest):]:\n                if not c.isalpha():\n                    suffix_non_letters.append(c)\n            all_non_letters = [c for c in token if not c.isalpha()]\n            sorted_letters = ''.join(sorted([c for c in token if c.isalpha()]))\n            result.append(''.join(all_non_letters) + sorted_letters)\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello !!!Wdlor'], [''], ['   '], ['a'], ['!@# $%^ &*()'], ['123 321'], ['Teh cikqu bnorw fox jmpsu eorv eht alyz dgo'], ['3.8Phnoty is !!!aeemosw']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def anti_shuffle(s: str) -> str:\n    import re\n\n    def sort_word(word: str) -> str:\n        if word.isalpha():\n            if word[0].isupper() and word[1:].islower():\n                sorted_chars = ''.join(sorted(word.lower()))\n                return sorted_chars.capitalize()\n            else:\n                return ''.join(sorted(word))\n        elif any((c.isalpha() for c in word)):\n            letters = sorted([c for c in word if c.isalpha()])\n            non_letters = [c for c in word if not c.isalpha()]\n            result = []\n            li = 0\n            ni = 0\n            for c in word:\n                if c.isalpha():\n                    result.append(letters[li])\n                    li += 1\n                else:\n                    result.append(c)\n            return ''.join(result)\n        else:\n            return ''.join(sorted(word))\n    parts = re.findall(' +|[^ ]+', s)\n    result = []\n    for part in parts:\n        if part.isspace():\n            result.append(part)\n        else:\n            result.append(sort_word(part))\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Ehllo Wdlor!!!'], [''], ['   '], ['a'], ['!#@ $%^ &()*'], ['123 123'], ['Eht cikqu bnorw fox jmpsu eorv eht alyz dgo'], ['Phnoty3.8 is aeemosw!!!']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[['Hello World!!!'], ['Ehllo Wdlor!!!'], ['Hello !!!Wdlor']]]"}, {"programs_str": ["def anti_shuffle(s: str) -> str:\n    import re\n\n    def sort_word(word):\n        if word.isalpha() and word.islower():\n            return ''.join(sorted(word))\n        return word\n    parts = re.split('(\\\\s+)', s)\n    result = []\n    for part in parts:\n        if part and (not part.isspace()):\n            if part.isalpha() and part.islower():\n                result.append(''.join(sorted(part)))\n            else:\n                result.append(part)\n        else:\n            result.append(part)\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello World!!!'], [''], ['   '], ['a'], ['!@# $%^ &*()'], ['123 321'], ['The cikqu bnorw fox jmpsu eorv eht alyz dgo'], ['Python3.8 is awesome!!!']]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.6666666666666667, "failed_input_output_examples": "[[['Hello World!!!'], ['Hello World!!!'], ['Hello !!!Wdlor']]]"}, {"programs_str": ["import re\n\ndef anti_shuffle(s: str) -> str:\n\n    def sort_word(word: str) -> str:\n        if not any((c.isalpha() for c in word)):\n            return word\n        chars = sorted(word)\n        return ''.join(chars)\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        else:\n            result.append(sort_word(token))\n    return ''.join(result)"], "outputs": "[['Hi'], ['ehllo'], ['Hello !!!Wdlor'], [''], ['   '], ['a'], ['!@# $%^ &*()'], ['123 321'], ['Teh cikqu bnorw fox jmpsu eorv eht alyz dgo'], ['.38Phnoty is !!!aeemosw']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.762053225033334, "llm_generated_inputs": "[['Hi'], ['hello'], ['Hello World!!!'], [''], ['   '], ['a'], ['!@# $%^ &*()'], ['123 321'], ['The quick brown fox jumps over the lazy dog'], ['Python3.8 is awesome!!!']]", "input_output_examples": "[[['Hi'], ['hello'], ['Hello World!!!']], [['Hi'], ['ehllo'], ['Hello !!!Wdlor']]]", "weighted_test_consistency": 0.8166666666666668, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def anti_shuffle(s: str) -> str:\n    \"\"\"\n    Takes a string `s` and returns a new string where each contiguous sequence of non-space characters \n    (i.e., each word or token separated by spaces) is replaced by a version of that sequence with its \n    characters sorted in ascending ASCII order. The order of words and the exact spacing between them \n    must be preserved exactly as in the input.\n\n    Important clarifications to remove ambiguity:\n    - Words are defined strictly as sequences of characters separated by space characters.\n    - Each word (including any punctuation or special characters within it) is treated as a whole unit \n      whose characters are sorted by ASCII value.\n    - Spaces between words are preserved exactly as in the input, including multiple spaces if present.\n    - No special handling or separation of alphabetic and non-alphabetic characters within words is done.\n      All characters in a word are sorted together.\n    - The function does not reorder words or spaces, only sorts characters within each word.\n\n    Examples:\n    anti_shuffle('Hi') returns 'Hi'  # 'Hi' sorted is 'Hi' since 'H' < 'i'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    anti_shuffle('!@# $%^ &*()') returns '!#@ $%^ &()*'\n    \"\"\"", "entry_point": "anti_shuffle", "cluster_list": [{"programs_str": ["import re\n\ndef anti_shuffle(s: str) -> str:\n    tokens = re.split('( +)', s)\n    result = []\n    for token in tokens:\n        if token and token[0] != ' ':\n            sorted_token = ''.join(sorted(token))\n            result.append(sorted_token)\n        else:\n            result.append(token)\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    parts = re.split('(\\\\s+)', s)\n    for i in range(0, len(parts), 2):\n        if parts[i]:\n            parts[i] = ''.join(sorted(parts[i]))\n    return ''.join(parts)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    parts = re.split('(\\\\s+)', s)\n    for i in range(0, len(parts), 2):\n        parts[i] = ''.join(sorted(parts[i]))\n    return ''.join(parts)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == ' ':\n            start = i\n            while i < n and s[i] == ' ':\n                i += 1\n            result.append(s[start:i])\n        else:\n            start = i\n            while i < n and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for char in s:\n        if char == ' ':\n            if word:\n                sorted_word = ''.join(sorted(word))\n                result.append(sorted_word)\n                word = []\n            result.append(char)\n        else:\n            word.append(char)\n    if word:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    tokens = re.findall(' +|[^ ]+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        else:\n            sorted_token = ''.join(sorted(token))\n            result.append(sorted_token)\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    parts = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for part in parts:\n        if part.isspace():\n            result.append(part)\n        else:\n            result.append(''.join(sorted(part)))\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        else:\n            sorted_word = ''.join(sorted(token))\n            result.append(sorted_word)\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        else:\n            result.append(''.join(sorted(token)))\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    parts = re.split('(\\\\s+)', s)\n    for i in range(0, len(parts), 2):\n        parts[i] = ''.join(sorted(parts[i]))\n    return ''.join(parts)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == ' ':\n            start = i\n            while i < n and s[i] == ' ':\n                i += 1\n            result.append(s[start:i])\n        else:\n            start = i\n            while i < n and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    result = []\n    for token in tokens:\n        if token.isspace():\n            result.append(token)\n        else:\n            sorted_token = ''.join(sorted(token))\n            result.append(sorted_token)\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    parts = re.split('(\\\\s+)', s)\n    for i in range(0, len(parts), 2):\n        parts[i] = ''.join(sorted(parts[i])) if parts[i] else parts[i]\n    return ''.join(parts)", "def anti_shuffle(s: str) -> str:\n    result = []\n    word = []\n    for char in s:\n        if char == ' ':\n            if word:\n                sorted_word = ''.join(sorted(word))\n                result.append(sorted_word)\n                word = []\n            result.append(char)\n        else:\n            word.append(char)\n    if word:\n        sorted_word = ''.join(sorted(word))\n        result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == ' ':\n            start = i\n            while i < n and s[i] == ' ':\n                i += 1\n            result.append(s[start:i])\n        else:\n            start = i\n            while i < n and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n    return ''.join(result)", "def anti_shuffle(s: str) -> str:\n    result = []\n    i = 0\n    n = len(s)\n    while i < n:\n        if s[i] == ' ':\n            start = i\n            while i < n and s[i] == ' ':\n                i += 1\n            result.append(s[start:i])\n        else:\n            start = i\n            while i < n and s[i] != ' ':\n                i += 1\n            word = s[start:i]\n            sorted_word = ''.join(sorted(word))\n            result.append(sorted_word)\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    tokens = re.findall('\\\\S+|\\\\s+', s)\n    sorted_tokens = [''.join(sorted(token)) if not token.isspace() else token for token in tokens]\n    return ''.join(sorted_tokens)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    parts = re.split('( )', s)\n    result_parts = []\n    for part in parts:\n        if part == ' ':\n            result_parts.append(part)\n        else:\n            sorted_part = ''.join(sorted(part))\n            result_parts.append(sorted_part)\n    return ''.join(result_parts)", "def anti_shuffle(s: str) -> str:\n    result = []\n    current_word = []\n    for ch in s:\n        if ch == ' ':\n            if current_word:\n                result.append(''.join(sorted(current_word)))\n                current_word = []\n            result.append(ch)\n        else:\n            current_word.append(ch)\n    if current_word:\n        result.append(''.join(sorted(current_word)))\n    return ''.join(result)", "import re\n\ndef anti_shuffle(s: str) -> str:\n    parts = re.split('( )', s)\n    for i, part in enumerate(parts):\n        if part != ' ' and part != '':\n            parts[i] = ''.join(sorted(part))\n    return ''.join(parts)"], "outputs": "[['Hi'], ['ehllo'], ['Hello !!!Wdlor'], [''], ['   '], ['a'], ['!#@ $%^ &()*'], ['123 123'], ['Teh cikqu bnorw fox jmpsu eorv eht alyz dgo'], ['.38Phnoty is !!!aeemosw']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hi'], ['hello'], ['Hello World!!!'], [''], ['   '], ['a'], ['!@# $%^ &*()'], ['123 321'], ['The quick brown fox jumps over the lazy dog'], ['Python3.8 is awesome!!!']]", "input_output_examples": "[[['Hi'], ['hello'], ['Hello World!!!']], [['Hi'], ['ehllo'], ['Hello !!!Wdlor']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.19999999999999996, "original_avg_pass_rate": 0.7433962264150944, "original_nzpassk": true, "original_majority_passk": false, "original_entropy": 0.762053225033334, "repaired_passk": 0.44999999999999996, "repaired_avg_pass_rate": 0.9573982125124131, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/87", "original_requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\nfrom typing import Tuple\n\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"", "entry_point": "get_row", "cluster_list": [{"programs_str": ["from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        cols = [j for j, val in enumerate(row) if val == x]\n        cols.sort(reverse=True)\n        for col in cols:\n            result.append((i, col))\n    result.sort(key=lambda t: t[0])\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    coordinates = []\n    for i, row in enumerate(lst):\n        cols = [j for j, val in enumerate(row) if val == x]\n        cols_sorted_desc = sorted(cols, reverse=True)\n        for col in cols_sorted_desc:\n            coordinates.append((i, col))\n    return coordinates", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        coords = [(i, j) for j, val in enumerate(row) if val == x]\n        coords.sort(key=lambda t: t[1], reverse=True)\n        result.extend(coords)\n    result.sort(key=lambda t: t[0])\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        indices = [col_idx for col_idx, val in enumerate(row) if val == x]\n        indices.sort(reverse=True)\n        for col_idx in indices:\n            result.append((row_idx, col_idx))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_idx, row in enumerate(lst):\n        col_indices = [col_idx for col_idx, val in enumerate(row) if val == x]\n        col_indices.sort(reverse=True)\n        result.extend(((row_idx, col_idx) for col_idx in col_indices))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        positions = [(i, j) for j, val in enumerate(row) if val == x]\n        positions.sort(key=lambda pos: pos[1], reverse=True)\n        result.extend(positions)\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    res = []\n    for i, row in enumerate(lst):\n        coords = [(i, j) for j, val in enumerate(row) if val == x]\n        coords.sort(key=lambda tup: tup[1], reverse=True)\n        res.extend(coords)\n    return res", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        positions = [j for j, val in enumerate(row) if val == x]\n        positions.sort(reverse=True)\n        for pos in positions:\n            result.append((i, pos))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    coordinates = []\n    for row_idx, row in enumerate(lst):\n        cols = [col_idx for col_idx, val in enumerate(row) if val == x]\n        cols.sort(reverse=True)\n        coordinates.extend(((row_idx, col_idx) for col_idx in cols))\n    return coordinates", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    res = []\n    for row_idx, row in enumerate(lst):\n        coords = [(row_idx, col_idx) for col_idx, val in enumerate(row) if val == x]\n        coords.sort(key=lambda c: c[1], reverse=True)\n        res.extend(coords)\n    res.sort(key=lambda c: c[0])\n    return res", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        positions = [j for j, val in enumerate(row) if val == x]\n        positions_sorted = sorted(positions, reverse=True)\n        result.extend(((i, col) for col in positions_sorted))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda t: (t[0], -t[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for r, row in enumerate(lst):\n        coords = [(r, c) for c, val in enumerate(row) if val == x]\n        coords.sort(key=lambda tup: tup[1], reverse=True)\n        result.extend(coords)\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        coords = [(i, j) for j, val in enumerate(row) if val == x]\n        coords.sort(key=lambda c: c[1], reverse=True)\n        result.extend(coords)\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for row_index, row in enumerate(lst):\n        coords = [(row_index, col_index) for col_index, value in enumerate(row) if value == x]\n        coords.sort(key=lambda c: c[1], reverse=True)\n        result.extend(coords)\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        cols = [j for j, val in enumerate(row) if val == x]\n        cols.sort(reverse=True)\n        for j in cols:\n            result.append((i, j))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                result.append((i, j))\n    result.sort(key=lambda c: (c[0], -c[1]))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        positions = [j for j, val in enumerate(row) if val == x]\n        positions.sort(reverse=True)\n        for pos in positions:\n            result.append((i, pos))\n    return result", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    coords = []\n    for i, row in enumerate(lst):\n        row_coords = [(i, j) for j, val in enumerate(row) if val == x]\n        row_coords.sort(key=lambda t: t[1], reverse=True)\n        coords.extend(row_coords)\n    return coords", "from typing import List, Tuple\n\ndef get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:\n    result = []\n    for i, row in enumerate(lst):\n        positions = [j for j, val in enumerate(row) if val == x]\n        positions.sort(reverse=True)\n        for pos in positions:\n            result.append((i, pos))\n    return result"], "outputs": "[[[(0, 0), (1, 2), (2, 1), (2, 0)]], [[]], [[(0, 2), (2, 2), (2, 1), (2, 0)]], [[(0, 2), (0, 1), (0, 0), (1, 0), (2, 2), (2, 0)]], [[(0, 0), (1, 1), (1, 0), (2, 2), (2, 1)]], [[(0, 0)]], [[]], [[(0, 2), (0, 1), (0, 0), (1, 1), (1, 0), (2, 0)]], [[(0, 1), (1, 0), (2, 3), (2, 2)]], [[(1, 0)]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[[1, 2, 3], [4, 5, 1], [1, 1]], 1], [[], 1], [[[1, 2, 3], [], [3, 3, 3], [1]], 3], [[[0, 0, 0], [0], [0, 1, 0]], 0], [[[5], [5, 5], [1, 5, 5], []], 5], [[[10]], 10], [[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 100], [[[1, 1, 1], [1, 1], [1]], 1], [[[1, 2], [2, 1], [1, 1, 2, 2]], 2], [[[1, 2, 3], [4], [1, 2]], 4]]", "input_output_examples": "[[[[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1], [[], 1], [[[], [1], [1, 2, 3]], 3]], [[[(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]], [[]], [[(2, 2)]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/88", "original_requirement": "from typing import List\n\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef sort_array(array: List[int]) -> List[int]:\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"", "entry_point": "sort_array", "cluster_list": [{"programs_str": ["from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    arr_copy = array[:]\n    total = arr_copy[0] + arr_copy[-1]\n    if total % 2 == 1:\n        return sorted(arr_copy)\n    else:\n        return sorted(arr_copy, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    arr_copy = array[:]\n    summation = array[0] + array[-1]\n    if summation % 2 == 1:\n        return sorted(arr_copy)\n    else:\n        return sorted(arr_copy, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    sum_first_last = array[0] + array[-1]\n    if sum_first_last % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    first = array[0]\n    last = array[-1]\n    total = first + last\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    first_last_sum = array[0] + array[-1]\n    if first_last_sum % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    s = array[0] + array[-1]\n    if s % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    s = array[0] + array[-1]\n    return sorted(array) if s % 2 == 1 else sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    return sorted(array) if total % 2 == 1 else sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    s = array[0] + array[-1]\n    if s % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    s = array[0] + array[-1]\n    if s % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)", "from typing import List\n\ndef sort_array(array: List[int]) -> List[int]:\n    if not array:\n        return []\n    total = array[0] + array[-1]\n    if total % 2 == 1:\n        return sorted(array)\n    else:\n        return sorted(array, reverse=True)"], "outputs": "[[[]], [[5]], [[0, 1, 2, 3, 4, 5]], [[6, 5, 4, 3, 2, 1, 0]], [[0, 0, 0, 0]], [[1, 1, 1, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[9, 7, 5, 3, 1]], [[0]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]], [[0, 0, 0, 0]], [[1, 1, 1, 1]], [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], [[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]], [[9, 7, 5, 3, 1]], [[0]]]", "input_output_examples": "[[[[]], [[5]], [[2, 4, 3, 0, 1, 5]], [[2, 4, 3, 0, 1, 5, 6]]], [[[]], [[5]], [[0, 1, 2, 3, 4, 5]], [[6, 5, 4, 3, 2, 1, 0]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/89", "original_requirement": "def encrypt(s: str) -> str:\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"", "repaired_requirement": "def encrypt(s: str) -> str:\n    \"\"\"\n    Encrypt the input string by shifting each lowercase alphabetic character forward by 4 positions in the alphabet,\n    wrapping around from 'z' to 'a' as needed. The shift amount is fixed at 4 (equivalent to \"two multiplied by two\").\n    \n    Only lowercase letters ('a' to 'z') are shifted. All other characters, including uppercase letters, digits, punctuation,\n    and whitespace, are left unchanged.\n    \n    Examples:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    encrypt('HelloWorld') returns 'Hippusvphd'  # uppercase letters remain unchanged\n    \n    Note: The example outputs in the original ambiguous description that show all-lowercase outputs for mixed-case inputs\n    are incorrect. The function preserves case and only shifts lowercase letters.\n    \"\"\"", "original_clusters": {"requirement": "def encrypt(s: str) -> str:\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"", "entry_point": "encrypt", "cluster_list": [{"programs_str": ["def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        result.append(shifted)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n        result.append(chr(shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if char.isalpha():\n            shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n            result.append(chr(shifted))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        result.append(shifted)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n        result.append(chr(shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    shift = 4\n    for char in s:\n        if char.isalpha():\n            start = ord('a')\n            offset = (ord(char) - start + shift) % 26\n            result.append(chr(start + offset))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n        result.append(chr(shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if char.isalpha():\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        result.append(shifted)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n        result.append(chr(shifted))\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    shift = 4\n    result = []\n    for char in s:\n        shifted = chr((ord(char) - 97 + shift) % 26 + 97)\n        result.append(shifted)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n        result.append(shifted)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if char.isalpha():\n            shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n            result.append(chr(shifted))\n        else:\n            result.append(char)\n    return ''.join(result)"], "outputs": "[['lm'], ['ewhjklnop'], ['kj'], ['ix'], [''], ['e'], ['d'], ['bcd'], ['fippsusvph'], ['yzabcdefghijklmnopqrstuvwx'], ['efghijklmnopqrstuvwxyzabcd']]", "probability": 0.65, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = (ord(char) - ord('a') + 4) % 26\n            result.append(chr(ord('a') + shifted))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n            result.append(chr(shifted))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    shift = 4\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            result.append(chr((ord(char) - ord('a') + shift) % 26 + ord('a')))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = (ord(char) - ord('a') + 4) % 26 + ord('a')\n            result.append(chr(shifted))\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    shift = 4\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + shift) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = (ord(char) - ord('a') + 4) % 26\n            result.append(chr(ord('a') + shifted))\n        else:\n            result.append(char)\n    return ''.join(result)"], "outputs": "[['lm'], ['ewhjklnop'], ['kj'], ['ix'], [''], ['e'], ['d'], ['bcd'], ['HippsWsvph'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['efghijklmnopqrstuvwxyzabcd']]", "probability": 0.3, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if char.isalpha():\n            base = ord('a') if char.islower() else ord('A')\n            shifted = (ord(char) - base + 4) % 26 + base\n            result.append(chr(shifted))\n        else:\n            result.append(char)\n    return ''.join(result)"], "outputs": "[['lm'], ['ewhjklnop'], ['kj'], ['ix'], [''], ['e'], ['d'], ['bcd'], ['LippsAsvph'], ['EFGHIJKLMNOPQRSTUVWXYZABCD'], ['efghijklmnopqrstuvwxyzabcd']]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.7199877141320895, "llm_generated_inputs": "[['hi'], ['asdfghjkl'], ['gf'], ['et'], [''], ['a'], ['z'], ['xyz'], ['HelloWorld'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['abcdefghijklmnopqrstuvwxyz']]", "input_output_examples": "[[['hi'], ['asdfghjkl'], ['gf'], ['et']], [['lm'], ['ewhjklnop'], ['kj'], ['ix']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def encrypt(s: str) -> str:\n    \"\"\"\n    Encrypt the input string by shifting each lowercase alphabetic character forward by 4 positions in the alphabet,\n    wrapping around from 'z' to 'a' as needed. The shift amount is fixed at 4 (equivalent to \"two multiplied by two\").\n    \n    Only lowercase letters ('a' to 'z') are shifted. All other characters, including uppercase letters, digits, punctuation,\n    and whitespace, are left unchanged.\n    \n    Examples:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    encrypt('HelloWorld') returns 'Hippusvphd'  # uppercase letters remain unchanged\n    \n    Note: The example outputs in the original ambiguous description that show all-lowercase outputs for mixed-case inputs\n    are incorrect. The function preserves case and only shifts lowercase letters.\n    \"\"\"", "entry_point": "encrypt", "cluster_list": [{"programs_str": ["def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            shifted = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            shifted = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for ch in s:\n        if 'a' <= ch <= 'z':\n            shifted = chr((ord(ch) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encrypt(s: str) -> str:\n    result = []\n    for char in s:\n        if 'a' <= char <= 'z':\n            shifted = chr((ord(char) - ord('a') + 4) % 26 + ord('a'))\n            result.append(shifted)\n        else:\n            result.append(char)\n    return ''.join(result)"], "outputs": "[['lm'], ['ewhjklnop'], ['kj'], ['ix'], [''], ['e'], ['d'], ['bcd'], ['HippsWsvph'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['efghijklmnopqrstuvwxyzabcd']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['hi'], ['asdfghjkl'], ['gf'], ['et'], [''], ['a'], ['z'], ['xyz'], ['HelloWorld'], ['ABCDEFGHIJKLMNOPQRSTUVWXYZ'], ['abcdefghijklmnopqrstuvwxyz']]", "input_output_examples": "[[['hi'], ['asdfghjkl'], ['gf'], ['et']], [['lm'], ['ewhjklnop'], ['kj'], ['ix']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.5, "original_avg_pass_rate": 0.7658730158730159, "original_nzpassk": true, "original_majority_passk": false, "original_entropy": 0.7199877141320895, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/90", "original_requirement": "from typing import List\n\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"", "entry_point": "next_smallest", "cluster_list": [{"programs_str": ["from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_vals = sorted(set(lst))\n    if len(unique_vals) < 2:\n        return None\n    return unique_vals[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_vals = sorted(set(lst))\n    if len(unique_vals) < 2:\n        return None\n    return unique_vals[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_vals = sorted(set(lst))\n    if len(unique_vals) < 2:\n        return None\n    return unique_vals[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_vals = sorted(set(lst))\n    if len(unique_vals) < 2:\n        return None\n    return unique_vals[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_vals = sorted(set(lst))\n    if len(unique_vals) < 2:\n        return None\n    return unique_vals[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_sorted = sorted(set(lst))\n    if len(unique_sorted) < 2:\n        return None\n    return unique_sorted[1]", "from typing import List, Optional\n\ndef next_smallest(lst: List[int]) -> Optional[int]:\n    unique_vals = sorted(set(lst))\n    if len(unique_vals) < 2:\n        return None\n    return unique_vals[1]"], "outputs": "[[2], [2], [None], [None], [None], [None], [4], [-2], [6], [2]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]], [[2]], [[3, 3, 3]], [[5, 4, 5, 4, 1]], [[-1, -3, -2, 0]], [[10, 9, 8, 7, 6, 5]], [[1, 2, 2, 3, 3]]]", "input_output_examples": "[[[[1, 2, 3, 4, 5]], [[5, 1, 4, 3, 2]], [[]], [[1, 1]]], [[2], [2], [None], [None]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/91", "original_requirement": "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", "repaired_requirement": "def is_bored(S: str) -> int:\n    \"\"\"\n    Given a string S containing one or more sentences, count how many sentences start exactly with the word \"I\".\n    \n    Sentences are delimited by the punctuation marks '.', '?', or '!'. Each sentence may have leading or trailing whitespace.\n    \n    A sentence is considered to start with the word \"I\" if, after stripping leading whitespace, the first word is exactly \"I\" (case-sensitive).\n    The word \"I\" must be a standalone word at the start of the sentence, not just the first character of the sentence.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    >>> is_bored(\"Is anyone here? I hope so!\")\n    1\n    \"\"\"", "original_clusters": {"requirement": "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", "entry_point": "is_bored", "cluster_list": [{"programs_str": ["def is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        words = sentence.strip().split()\n        if words and words[0] == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    delimiters = {'.', '?', '!'}\n    count = 0\n    start = 0\n    n = len(S)\n    for i, ch in enumerate(S):\n        if ch in delimiters:\n            sentence = S[start:i].strip()\n            words = sentence.split()\n            if words and words[0] == 'I':\n                count += 1\n            start = i + 1\n    sentence = S[start:].strip()\n    words = sentence.split()\n    if words and words[0] == 'I':\n        count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "def is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count"], "outputs": "[[0], [1], [0], [1], [1], [3], [1], [1], [1], [0]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I'):\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I'):\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I'):\n            count += 1\n    return count"], "outputs": "[[0], [1], [0], [1], [2], [3], [2], [1], [1], [0]]", "probability": 0.15, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.6098403047164005, "llm_generated_inputs": "[['Hello world'], ['The sky is blue. The sun is shining. I love this weather'], [''], ['I am bored. Are you?'], ['Is anyone here? I hope so!'], ['I. I! I?'], [\"This is fun! Isn't it? I think so.\"], ['i love coding. I love Python.'], ['I love coding!i hate bugs.'], ['Why? Because I can!']]", "input_output_examples": "[[['Hello world'], ['The sky is blue. The sun is shining. I love this weather']], [[0], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def is_bored(S: str) -> int:\n    \"\"\"\n    Given a string S containing one or more sentences, count how many sentences start exactly with the word \"I\".\n    \n    Sentences are delimited by the punctuation marks '.', '?', or '!'. Each sentence may have leading or trailing whitespace.\n    \n    A sentence is considered to start with the word \"I\" if, after stripping leading whitespace, the first word is exactly \"I\" (case-sensitive).\n    The word \"I\" must be a standalone word at the start of the sentence, not just the first character of the sentence.\n    \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    >>> is_bored(\"Is anyone here? I hope so!\")\n    1\n    \"\"\"", "entry_point": "is_bored", "cluster_list": [{"programs_str": ["from typing import List\nimport re\n\ndef is_bored(S: str) -> int:\n    sentences: List[str] = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I '):\n            count += 1\n        elif sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I'):\n            if len(sentence) == 1 or (len(sentence) > 1 and (not sentence[1].isalpha())):\n                count += 1\n    return count", "from typing import List\nimport re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I'):\n            words = sentence.split()\n            if words and words[0] == 'I':\n                count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\nimport re\n\ndef is_bored(S: str) -> int:\n    sentences: List[str] = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I '):\n            count += 1\n        elif sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.!?]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I'):\n            if len(sentence) == 1 or (len(sentence) > 1 and sentence[1].isspace()):\n                count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\nimport re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\nimport re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I '):\n            count += 1\n        elif sentence == 'I':\n            count += 1\n    return count", "import re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I') and (len(sentence) == 1 or sentence[1].isspace()):\n            count += 1\n    return count", "from typing import List\nimport re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.lstrip()\n        if sentence.startswith('I') and (len(sentence) == 1 or (len(sentence) > 1 and (not sentence[1].isalpha()))):\n            words = sentence.split()\n            if len(words) > 0 and words[0] == 'I':\n                count += 1\n    return count", "from typing import List\nimport re\n\ndef is_bored(S: str) -> int:\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I ') or sentence == 'I':\n            count += 1\n    return count", "from typing import List\n\ndef is_bored(S: str) -> int:\n    import re\n    sentences = re.split('[.?!]', S)\n    count = 0\n    for sentence in sentences:\n        sentence = sentence.strip()\n        if sentence.startswith('I '):\n            count += 1\n        elif sentence == 'I':\n            count += 1\n    return count"], "outputs": "[[0], [1], [0], [1], [1], [3], [1], [1], [1], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['Hello world'], ['The sky is blue. The sun is shining. I love this weather'], [''], ['I am bored. Are you?'], ['Is anyone here? I hope so!'], ['I. I! I?'], [\"This is fun! Isn't it? I think so.\"], ['i love coding. I love Python.'], ['I love coding!i hate bugs.'], ['Why? Because I can!']]", "input_output_examples": "[[['Hello world'], ['The sky is blue. The sun is shining. I love this weather']], [[0], [1]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.0, "original_avg_pass_rate": 0.9990059642147118, "original_nzpassk": false, "original_majority_passk": false, "original_entropy": 0.6098403047164005, "repaired_passk": 0.0, "repaired_avg_pass_rate": 0.9990059642147118, "repaired_nzpassk": false, "repaired_majority_passk": false, "repaired_entropy": 0}}
{"task_id": "HumanEval/92", "original_requirement": "def any_int(x: int, y: int, z: int) -> bool:\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''", "repaired_requirement": null, "original_clusters": {"requirement": "def any_int(x: int, y: int, z: int) -> bool:\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''", "entry_point": "any_int", "cluster_list": [{"programs_str": ["def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "from typing import Union\n\ndef any_int(x: int, y: int, z: int) -> bool:\n    if not all((isinstance(i, int) for i in (x, y, z))):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not all((isinstance(i, int) for i in (x, y, z))):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y", "def any_int(x: int, y: int, z: int) -> bool:\n    if not (isinstance(x, int) and isinstance(y, int) and isinstance(z, int)):\n        return False\n    return x == y + z or y == x + z or z == x + y"], "outputs": "[[True], [False], [True], [False], [True], [True], [True], [True], [True], [True], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5, 2, 7], [3, 2, 2], [3, -2, 1], [3.6, -2.2, 2], [0, 0, 0], [-1, -1, -2], [10, 5, 5], [1, 2, 3], [2, 3, 5], [2, 2, 4], [2, 4, 2], [4, 2, 2]]", "input_output_examples": "[[[5, 2, 7], [3, 2, 2], [3, -2, 1], [3.6, -2.2, 2]], [[True], [False], [True], [False]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/93", "original_requirement": "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"", "repaired_requirement": "def encode(message: str) -> str:\n    \"\"\"\n    Encode the input message by applying the following transformations to each character:\n    - Swap the case of all alphabetic letters (uppercase to lowercase, lowercase to uppercase).\n    - For letters that are vowels (a, e, i, o, u), after swapping case, replace the vowel with the letter \n      that appears 2 positions ahead of it in the English alphabet, preserving the swapped case.\n      For example, 'a' (lowercase vowel) swapped to 'A' (uppercase), then replaced by 'C' (uppercase).\n      Similarly, 'E' swapped to 'e' (lowercase), then replaced by 'g' (lowercase).\n    - Assume the input contains only letters and spaces.\n    - Non-alphabetic characters (e.g., spaces) should remain unchanged.\n    \n    Notes:\n    - The vowel check and shifting is done after swapping the case.\n    - The English alphabet is considered circular for shifting (e.g., 'y' + 2 -> 'a').\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    >>> encode('AEIOUaeiou')\n    'cgkqwCGKQW'\n    \"\"\"", "original_clusters": {"requirement": "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"", "entry_point": "encode", "cluster_list": [{"programs_str": ["def encode(message: str) -> str:\n    vowels = 'aeiou'\n\n    def shift_vowel(ch):\n        return chr((ord(ch) - ord('a') + 2) % 26 + ord('a'))\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            lower = swapped.lower()\n            if lower in vowels:\n                shifted = shift_vowel(lower)\n                if swapped.isupper():\n                    shifted = shifted.upper()\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            lower = swapped.lower()\n            if lower in vowels:\n                new_char = chr((ord(lower) - ord('a') + 2) % 26 + ord('a'))\n                if swapped.isupper():\n                    new_char = new_char.upper()\n                else:\n                    new_char = new_char.lower()\n                result.append(new_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    vowels_shift = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    result = []\n    for char in message:\n        if char.isalpha():\n            swapped = char.swapcase()\n            lower_char = char.lower()\n            if lower_char in vowels:\n                replaced = vowels_shift[lower_char]\n                if char.islower():\n                    replaced = replaced.upper()\n                else:\n                    replaced = replaced.lower()\n                result.append(replaced)\n            else:\n                result.append(swapped)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n\n    def shift_vowel(ch):\n        if ch.lower() in vowels:\n            new_char = chr((ord(ch.lower()) - 97 + 2) % 26 + 97)\n            return new_char.upper() if ch.isupper() else new_char\n        return ch\n    encoded_chars = []\n    for ch in message:\n        ch_swapped = ch.swapcase()\n        encoded_chars.append(shift_vowel(ch_swapped))\n    return ''.join(encoded_chars)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    vowels_set = set(vowels)\n    result = []\n    for char in message:\n        if char.isalpha():\n            swapped = char.swapcase()\n            if char.lower() in vowels_set:\n                idx = vowels.index(char.lower())\n                base = ord(char.lower())\n                new_char = chr(base + 2)\n                if swapped.islower():\n                    swapped = new_char.lower()\n                else:\n                    swapped = new_char.upper()\n            result.append(swapped)\n        else:\n            result.append(char)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    replacements = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    result = []\n    for ch in message:\n        swapped = ch.swapcase()\n        if swapped in vowels:\n            swapped = replacements[swapped]\n        result.append(swapped)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    shift_map = {v: chr((ord(v) - ord('a') + 2) % 26 + ord('a')) for v in vowels}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            lower_char = swapped.lower()\n            if lower_char in vowels:\n                replaced = shift_map[lower_char]\n                if swapped.isupper():\n                    replaced = replaced.upper()\n                result.append(replaced)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n\n    def shift_vowel(ch):\n        if ch in vowels:\n            code = ord(ch)\n            if ch.islower():\n                shifted = chr((code - ord('a') + 2) % 26 + ord('a'))\n            else:\n                shifted = chr((code - ord('A') + 2) % 26 + ord('A'))\n            return shifted\n        else:\n            return ch\n    swapped = [ch.swapcase() for ch in message]\n    encoded = [shift_vowel(ch) for ch in swapped]\n    return ''.join(encoded)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    vowels_map = {v: chr((ord(v) - ord('a') + 2) % 26 + ord('a')) for v in vowels}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            lower_swapped = swapped.lower()\n            if lower_swapped in vowels_map:\n                mapped_char = vowels_map[lower_swapped]\n                result.append(mapped_char.upper() if swapped.isupper() else mapped_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n\n    def shift_vowel(ch):\n        if ch in vowels:\n            return chr(ord(ch) + 2)\n        return ch\n    swapped = ''.join((ch.lower() if ch.isupper() else ch.upper() for ch in message))\n    result = ''.join((shift_vowel(ch) for ch in swapped))\n    return result", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n\n    def shift_vowel(ch):\n        if ch.lower() in vowels:\n            idx = ord(ch.lower()) - ord('a')\n            new_char = chr(ord('a') + (idx + 2) % 26)\n            return new_char.upper() if ch.isupper() else new_char\n        else:\n            return ch\n    swapped = [c.swapcase() for c in message]\n    replaced = [shift_vowel(c) for c in swapped]\n    return ''.join(replaced)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowels_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels_map:\n                swapped = vowels_map[swapped]\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n\n    def shift_char(c):\n        if c.lower() == 'a':\n            return 'c'\n        elif c.lower() == 'e':\n            return 'g'\n        elif c.lower() == 'i':\n            return 'k'\n        elif c.lower() == 'o':\n            return 'q'\n        elif c.lower() == 'u':\n            return 'w'\n        return c\n    result = []\n    for ch in message:\n        new_ch = ch.swapcase()\n        if ch in vowels:\n            shifted = shift_char(ch)\n            if ch.isupper():\n                shifted = shifted.upper()\n            else:\n                shifted = shifted.lower()\n            new_ch = shifted.swapcase()\n        result.append(new_ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_map = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w', 'A': 'C', 'E': 'G', 'I': 'K', 'O': 'Q', 'U': 'W'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            ch_swapped = ch.swapcase()\n            if ch_swapped in vowels:\n                ch_swapped = vowel_map[ch_swapped]\n            result.append(ch_swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n\n    def shift_vowel(ch: str) -> str:\n        if ch.lower() in vowels:\n            new_char = chr((ord(ch.lower()) - ord('a') + 2) % 26 + ord('a'))\n            return new_char.upper() if ch.islower() else new_char.lower()\n        return ch\n    result = []\n    for ch in message:\n        swapped = ch.swapcase()\n        if swapped.lower() in vowels:\n            new_ch = chr((ord(swapped.lower()) - ord('a') + 2) % 26 + ord('a'))\n            new_ch = new_ch.upper() if swapped.isupper() else new_ch.lower()\n            result.append(new_ch)\n        else:\n            result.append(swapped)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    shift = 2\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            lower = swapped.lower()\n            if lower in vowels:\n                new_char = chr((ord(lower) - ord('a') + shift) % 26 + ord('a'))\n                if swapped.isupper():\n                    new_char = new_char.upper()\n                else:\n                    new_char = new_char.lower()\n                result.append(new_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.lower() if ch.isupper() else ch.upper()\n            if ch.lower() in vowels:\n                new_char = chr((ord(ch.lower()) - ord('a') + 2) % 26 + ord('a'))\n                swapped = new_char.upper() if swapped.isupper() else new_char.lower()\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            lower_swapped = swapped.lower()\n            if lower_swapped in vowels:\n                new_char_ord = ord(lower_swapped) + 2\n                if new_char_ord > ord('z'):\n                    new_char_ord -= 26\n                new_char = chr(new_char_ord)\n                if swapped.isupper():\n                    new_char = new_char.upper()\n                else:\n                    new_char = new_char.lower()\n                result.append(new_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)"], "outputs": "[['TGST'], ['tHKS KS C MGSSCGG'], ['cgkqwCGKQW'], ['BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'], ['Cg Kq W'], ['zZyYxXwW'], ['']]", "probability": 0.9, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["def encode(message: str) -> str:\n    vowels = 'aeiou'\n    shifted_vowels = {'a': 'c', 'e': 'g', 'i': 'k', 'o': 'q', 'u': 'w'}\n    result = []\n    for ch in message:\n        if ch.lower() in vowels:\n            ch = shifted_vowels[ch.lower()]\n            if ch.islower():\n                ch = ch.upper()\n            else:\n                ch = ch.lower()\n            result.append(ch)\n        elif ch.islower():\n            result.append(ch.upper())\n        else:\n            result.append(ch.lower())\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = 'aeiou'\n    shifted_vowels = {v: chr((ord(v) - ord('a') + 2) % 26 + ord('a')) for v in vowels}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            if ch.lower() in vowels:\n                new_char = shifted_vowels[ch.lower()]\n                result.append(new_char.upper() if ch.islower() else new_char.upper())\n            else:\n                result.append(ch.swapcase())\n        else:\n            result.append(ch)\n    return ''.join(result)"], "outputs": "[['TGST'], ['tHKS KS C MGSSCGG'], ['CGKQWCGKQW'], ['BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'], ['CG KQ W'], ['zZyYxXwW'], ['']]", "probability": 0.1, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.46899559358928117, "llm_generated_inputs": "[['test'], ['This is a message'], ['AEIOUaeiou'], ['bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'], ['aE iO u'], ['ZzYyXxWw'], ['']]", "input_output_examples": "[[['test'], ['This is a message']], [['TGST'], ['tHKS KS C MGSSCGG']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def encode(message: str) -> str:\n    \"\"\"\n    Encode the input message by applying the following transformations to each character:\n    - Swap the case of all alphabetic letters (uppercase to lowercase, lowercase to uppercase).\n    - For letters that are vowels (a, e, i, o, u), after swapping case, replace the vowel with the letter \n      that appears 2 positions ahead of it in the English alphabet, preserving the swapped case.\n      For example, 'a' (lowercase vowel) swapped to 'A' (uppercase), then replaced by 'C' (uppercase).\n      Similarly, 'E' swapped to 'e' (lowercase), then replaced by 'g' (lowercase).\n    - Assume the input contains only letters and spaces.\n    - Non-alphabetic characters (e.g., spaces) should remain unchanged.\n    \n    Notes:\n    - The vowel check and shifting is done after swapping the case.\n    - The English alphabet is considered circular for shifting (e.g., 'y' + 2 -> 'a').\n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    >>> encode('AEIOUaeiou')\n    'cgkqwCGKQW'\n    \"\"\"", "entry_point": "encode", "cluster_list": [{"programs_str": ["def encode(message: str) -> str:\n\n    def shift_char(c: str, shift: int) -> str:\n        base = ord('A') if c.isupper() else ord('a')\n        return chr((ord(c) - base + shift) % 26 + base)\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                shifted = shift_char(swapped, 2)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c, n):\n        if c.isupper():\n            base = ord('A')\n        else:\n            base = ord('a')\n        return chr((ord(c) - base + n) % 26 + base)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                shifted = shift_char(swapped, 2)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c):\n        if c.isupper():\n            base = ord('A')\n        else:\n            base = ord('a')\n        pos = ord(c) - base\n        shifted_pos = (pos + 2) % 26\n        return chr(base + shifted_pos)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                shifted = shift_char(swapped)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c: str, shift: int) -> str:\n        if c.islower():\n            return chr((ord(c) - ord('a') + shift) % 26 + ord('a'))\n        else:\n            return chr((ord(c) - ord('A') + shift) % 26 + ord('A'))\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.lower() if ch.isupper() else ch.upper()\n            if swapped.lower() in vowels:\n                shifted = shift_char(swapped, 2)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c: str, n: int) -> str:\n        if c.isupper():\n            base = ord('A')\n        else:\n            base = ord('a')\n        offset = ord(c) - base\n        new_offset = (offset + n) % 26\n        return chr(base + new_offset)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                swapped = shift_char(swapped, 2)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c: str, n: int) -> str:\n        if c.islower():\n            base = ord('a')\n        else:\n            base = ord('A')\n        offset = ord(c) - base\n        new_offset = (offset + n) % 26\n        return chr(base + new_offset)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                shifted = shift_char(swapped, 2)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = set('aeiou')\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                is_upper = swapped.isupper()\n                base = ord('A') if is_upper else ord('a')\n                pos = ord(swapped) - base\n                shifted_pos = (pos + 2) % 26\n                shifted_char = chr(base + shifted_pos)\n                result.append(shifted_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c: str, n: int) -> str:\n        base = ord('a') if c.islower() else ord('A')\n        offset = ord(c) - base\n        shifted = (offset + n) % 26\n        return chr(base + shifted)\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels:\n                shifted = shift_char(swapped, 2)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c: str, shift: int) -> str:\n        if c.isupper():\n            start = ord('A')\n        else:\n            start = ord('a')\n        offset = (ord(c) - start + shift) % 26\n        return chr(start + offset)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                shifted = shift_char(swapped, 2)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n\n    def shift_char(c):\n        base = ord('a') if c.islower() else ord('A')\n        return chr((ord(c) - base + 2) % 26 + base)\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                shifted = shift_char(swapped)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c: str, shift: int) -> str:\n        if c.isupper():\n            base = ord('A')\n            return chr((ord(c) - base + shift) % 26 + base)\n        elif c.islower():\n            base = ord('a')\n            return chr((ord(c) - base + shift) % 26 + base)\n        else:\n            return c\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                shifted = shift_char(swapped, 2)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c, shift=2):\n        is_upper = c.isupper()\n        base = ord('A') if is_upper else ord('a')\n        offset = (ord(c) - base + shift) % 26\n        return chr(base + offset)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                swapped = shift_char(swapped, 2)\n            result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            letter = swapped.lower()\n            if letter in vowels:\n                shifted_ord = (ord(letter) - ord('a') + 2) % 26 + ord('a')\n                shifted_char = chr(shifted_ord)\n                if swapped.isupper():\n                    shifted_char = shifted_char.upper()\n                result.append(shifted_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                base = ord('A') if swapped.isupper() else ord('a')\n                offset = (ord(swapped) - base + 2) % 26\n                new_char = chr(base + offset)\n                result.append(new_char)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c):\n        is_upper = c.isupper()\n        base = ord('A') if is_upper else ord('a')\n        pos = ord(c) - base\n        shifted_pos = (pos + 2) % 26\n        return chr(base + shifted_pos)\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.lower() if ch.isupper() else ch.upper()\n            if swapped in vowels:\n                shifted = shift_char(swapped)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                base = ord('a') if swapped.islower() else ord('A')\n                pos = ord(swapped) - base\n                pos = (pos + 2) % 26\n                new_ch = chr(base + pos)\n                result.append(new_ch)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c, shift=2):\n        if 'a' <= c <= 'z':\n            return chr((ord(c) - ord('a') + shift) % 26 + ord('a'))\n        elif 'A' <= c <= 'Z':\n            return chr((ord(c) - ord('A') + shift) % 26 + ord('A'))\n        else:\n            return c\n    result = []\n    vowels = set('aeiouAEIOU')\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped in vowels:\n                shifted = shift_char(swapped, 2)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c: str, shift: int) -> str:\n        if c.isupper():\n            base = ord('A')\n            return chr((ord(c) - base + shift) % 26 + base)\n        else:\n            base = ord('a')\n            return chr((ord(c) - base + shift) % 26 + base)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                shifted = shift_char(swapped, 2)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n\n    def shift_char(c: str, n: int) -> str:\n        if c.isupper():\n            start = ord('A')\n        else:\n            start = ord('a')\n        pos = ord(c) - start\n        new_pos = (pos + n) % 26\n        return chr(start + new_pos)\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if ch.isalpha():\n            swapped = ch.swapcase()\n            if swapped.lower() in vowels:\n                shifted = shift_char(swapped, 2)\n                result.append(shifted)\n            else:\n                result.append(swapped)\n        else:\n            result.append(ch)\n    return ''.join(result)", "def encode(message: str) -> str:\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    result = []\n    for ch in message:\n        if not ch.isalpha():\n            result.append(ch)\n            continue\n        swapped = ch.swapcase()\n        if swapped.lower() in vowels:\n            is_upper = swapped.isupper()\n            base = ord('A') if is_upper else ord('a')\n            offset = (ord(swapped) - base + 2) % 26\n            shifted = chr(base + offset)\n            result.append(shifted)\n        else:\n            result.append(swapped)\n    return ''.join(result)"], "outputs": "[['TGST'], ['tHKS KS C MGSSCGG'], ['cgkqwCGKQW'], ['BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'], ['Cg Kq W'], ['zZyYxXwW'], ['']]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['test'], ['This is a message'], ['AEIOUaeiou'], ['bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'], ['aE iO u'], ['ZzYyXxWw'], ['']]", "input_output_examples": "[[['test'], ['This is a message']], [['TGST'], ['tHKS KS C MGSSCGG']]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.6, "original_avg_pass_rate": 0.6533830845771145, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.46899559358928117, "repaired_passk": 1.0, "repaired_avg_pass_rate": 1.0, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
{"task_id": "HumanEval/94", "original_requirement": "from typing import List\n\n\ndef skjkasdkd(lst: List[int]) -> int:\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef skjkasdkd(lst: List[int]) -> int:\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"", "entry_point": "skjkasdkd", "cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    max_prime = max(primes)\n    return sum((int(digit) for digit in str(max_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.isqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(digit) for digit in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2 or n == 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        for i in range(5, int(math.sqrt(n)) + 1, 6):\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef skjkasdkd(lst: List[int]) -> int:\n\n    def is_prime(n: int) -> bool:\n        if n < 2:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    largest_prime = -1\n    for num in lst:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    if largest_prime == -1:\n        return 0\n    return sum((int(d) for d in str(largest_prime)))", "from typing import List\nimport math\n\ndef is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef skjkasdkd(lst: List[int]) -> int:\n    primes = [x for x in lst if is_prime(x)]\n    if not primes:\n        return 0\n    largest_prime = max(primes)\n    return sum((int(d) for d in str(largest_prime)))"], "outputs": "[[10], [25], [13], [11], [3], [7], [0], [2], [7], [0]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]], [[0, 1, 4, 6, 8, 10]], [[2]], [[999983, 1000000, 1000033]], [[]]]", "input_output_examples": "[[[[0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]], [[1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]], [[1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]], [[0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]], [[0, 81, 12, 3, 1, 21]], [[0, 8, 1, 2, 1, 7]]], [[10], [25], [13], [11], [3], [7]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/95", "original_requirement": "from typing import Dict\n\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import Dict\n\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"", "entry_point": "check_dict_case", "cluster_list": [{"programs_str": ["from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(key, str) for key in keys)):\n        return False\n    all_lower = all((key.islower() for key in keys))\n    all_upper = all((key.isupper() for key in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Any, Dict\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if any((not isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if any((not isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if any((not isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    return all((k.islower() for k in keys)) or all((k.isupper() for k in keys))", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if any((not isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Any, Dict\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if any((not isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper", "from typing import Dict, Any\n\ndef check_dict_case(dict: Dict[Any, Any]) -> bool:\n    if not dict:\n        return False\n    keys = dict.keys()\n    if not all((isinstance(k, str) for k in keys)):\n        return False\n    all_lower = all((k.islower() for k in keys))\n    all_upper = all((k.isupper() for k in keys))\n    return all_lower or all_upper"], "outputs": "[[True], [False], [False], [False], [True], [False], [True], [True], [False], [False], [False], [False], [True], [True]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[{'a': 'apple', 'b': 'banana'}], [{'a': 'apple', 'A': 'banana', 'B': 'banana'}], [{'a': 'apple', 8: 'banana'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'STATE': 'NC', 'ZIP': '12345'}], [{}], [{'HELLO': 'world', 'WORLD': 'hello'}], [{'hello': 'world', 'world': 'hello'}], [{'hello': 'world', 'WORLD': 'hello'}], [{'Hello': 'World'}], [{42: 'answer'}], [{'lowercase': 1, 'UPPERCASE': 2}], [{'lower': 1, 'lower2': 2}], [{'UPPER': 1, 'UPPER2': 2}]]", "input_output_examples": "[[[{'a': 'apple', 'b': 'banana'}], [{'a': 'apple', 'A': 'banana', 'B': 'banana'}], [{'a': 'apple', 8: 'banana'}], [{'Name': 'John', 'Age': '36', 'City': 'Houston'}], [{'STATE': 'NC', 'ZIP': '12345'}]], [[True], [False], [False], [False], [True]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/96", "original_requirement": "from typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "from typing import List\n\n\ndef count_up_to(n: int) -> List[int]:\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"", "entry_point": "count_up_to", "cluster_list": [{"programs_str": ["from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(num)) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.isqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        for i in range(3, int(x ** 0.5) + 1, 2):\n            if x % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.isqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n    if n <= 2:\n        return []\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n    return primes", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        for i in range(3, int(x ** 0.5) + 1, 2):\n            if x % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(math.sqrt(x)) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.isqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]", "from typing import List\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        if x == 2:\n            return True\n        if x % 2 == 0:\n            return False\n        for i in range(3, int(x ** 0.5) + 1, 2):\n            if x % i == 0:\n                return False\n        return True\n    return [i for i in range(2, n) if is_prime(i)]", "from typing import List\nimport math\n\ndef count_up_to(n: int) -> List[int]:\n\n    def is_prime(num: int) -> bool:\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    return [x for x in range(2, n) if is_prime(x)]"], "outputs": "[[[2, 3]], [[2, 3, 5, 7]], [[]], [[2, 3, 5, 7, 11, 13, 17, 19]], [[]], [[2, 3, 5, 7, 11, 13, 17]], [[]], [[2]], [[2, 3]], [[2, 3, 5, 7]]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[5], [11], [0], [20], [1], [18], [2], [3], [4], [10]]", "input_output_examples": "[[[5], [11], [0], [20], [1], [18]], [[[2, 3]], [[2, 3, 5, 7]], [[]], [[2, 3, 5, 7, 11, 13, 17, 19]], [[]], [[2, 3, 5, 7, 11, 13, 17]]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/97", "original_requirement": "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "entry_point": "multiply", "cluster_list": [{"programs_str": ["def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)", "def multiply(a: int, b: int) -> int:\n    return abs(a) % 10 * (abs(b) % 10)"], "outputs": "[[16], [72], [0], [20], [0], [21], [9], [0], [1]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[[148, 412], [19, 28], [2020, 1851], [14, -15], [0, 0], [-7, -3], [123456789, 987654321], [10, 5], [1, 1]]", "input_output_examples": "[[[148, 412], [19, 28], [2020, 1851], [14, -15]], [[16], [72], [0], [20]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/98", "original_requirement": "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"", "repaired_requirement": null, "original_clusters": {"requirement": "def count_upper(s: str) -> int:\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"", "entry_point": "count_upper", "cluster_list": [{"programs_str": ["def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    return sum((1 for i in range(0, len(s), 2) if s[i] in 'AEIOU'))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    return sum((1 for i in range(0, len(s), 2) if s[i] in 'AEIOU'))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    return sum((1 for i in range(0, len(s), 2) if s[i] in 'AEIOU'))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    return sum((1 for i in range(0, len(s), 2) if s[i] in 'AEIOU'))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    return sum((1 for i in range(0, len(s), 2) if s[i] in vowels))", "def count_upper(s: str) -> int:\n    vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count"], "outputs": "[[1], [0], [0], [0], [3], [3], [0], [5], [0], [4]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['aBCdEf'], ['abcdefg'], ['dBBE'], [''], ['AEIOU'], ['AeIoU'], ['XYZXYZ'], ['A1E2I3O4U5'], ['aAaAaA'], ['EIOUaeiouAEIOU']]", "input_output_examples": "[[['aBCdEf'], ['abcdefg'], ['dBBE']], [[1], [0], [0]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "repaired_clusters": null, "result": {"original_passk": 1.0, "original_avg_pass_rate": 1.0, "repaired_pass_rate": null, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0, "repaired_passk": null, "repaired_avg_pass_rate": null, "repaired_nzpassk": null, "repaired_majority_passk": null, "repaired_entropy": null}}
{"task_id": "HumanEval/99", "original_requirement": "def closest_integer(value: str) -> int:\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''", "repaired_requirement": "def closest_integer(value: str) -> int:\n    \"\"\"\n    Convert the input string representing a number to the closest integer.\n\n    Rounding rules:\n    - If the number is exactly halfway between two integers (i.e., fractional part is exactly 0.5 or -0.5),\n      round away from zero. That means:\n        * For positive numbers with fractional part 0.5, round up to the next integer.\n        * For negative numbers with fractional part -0.5, round down to the next integer away from zero.\n    - Otherwise, round to the nearest integer using standard rounding (round half down).\n      That is, if the fractional part is less than 0.5, round down (towards zero),\n      if greater than 0.5, round up (away from zero).\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    >>> closest_integer(\"-123.4999\")\n    -123\n\n    Note:\n    - \"Rounding away from zero\" means that when the number is exactly halfway between two integers,\n      the integer returned is the one with the greater absolute value.\n    - For all other fractional values, round to the nearest integer in the usual way.\n    \"\"\"", "original_clusters": {"requirement": "def closest_integer(value: str) -> int:\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''", "entry_point": "closest_integer", "cluster_list": [{"programs_str": ["from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    lower = floor(num)\n    upper = ceil(num)\n    diff_lower = abs(num - lower)\n    diff_upper = abs(upper - num)\n    if diff_lower < diff_upper:\n        return lower\n    elif diff_lower > diff_upper:\n        return upper\n    elif num > 0:\n        return upper\n    else:\n        return lower", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(num - ceil_val)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num >= 0:\n        return ceil_val\n    else:\n        return floor_val", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(num - ceil_val)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(num - ceil_val)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "def closest_integer(value: str) -> int:\n    number = float(value)\n    import math\n    floor_val = math.floor(number)\n    ceil_val = math.ceil(number)\n    diff_floor = abs(number - floor_val)\n    diff_ceil = abs(ceil_val - number)\n    if diff_floor == diff_ceil:\n        if number > 0:\n            return ceil_val\n        else:\n            return floor_val\n    elif diff_floor < diff_ceil:\n        return floor_val\n    else:\n        return ceil_val", "def closest_integer(value: str) -> int:\n    num = float(value)\n    int_part = int(num)\n    diff = abs(num - int_part)\n    if diff < 0.5:\n        return int_part\n    elif diff > 0.5:\n        return int_part + 1 if num > 0 else int_part - 1\n    else:\n        return int_part + 1 if num > 0 else int_part - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = int(num // 1)\n    ceil_val = floor_val if num == floor_val else floor_val + 1\n    dist_floor = abs(num - floor_val)\n    dist_ceil = abs(ceil_val - num)\n    if dist_floor < dist_ceil:\n        return floor_val\n    elif dist_ceil < dist_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_num = math.floor(num)\n    ceil_num = math.ceil(num)\n    dist_floor = num - floor_num\n    dist_ceil = ceil_num - num\n    if dist_floor < dist_ceil:\n        return floor_num\n    elif dist_ceil < dist_floor:\n        return ceil_num\n    elif num > 0:\n        return ceil_num\n    else:\n        return floor_num", "def closest_integer(value: str) -> int:\n    num = float(value)\n    floor_num = int(num // 1)\n    ceil_num = floor_num + 1\n    diff_floor = abs(num - floor_num)\n    diff_ceil = abs(num - ceil_num)\n    if diff_floor < diff_ceil:\n        return floor_num\n    elif diff_ceil < diff_floor:\n        return ceil_num\n    elif num > 0:\n        return ceil_num\n    else:\n        return floor_num", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(ceil_val - num)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "def closest_integer(value: str) -> int:\n    num = float(value)\n    import math\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    dist_floor = abs(num - floor_val)\n    dist_ceil = abs(ceil_val - num)\n    if dist_floor < dist_ceil:\n        return floor_val\n    elif dist_floor > dist_ceil:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    dist_floor = abs(num - floor_val)\n    dist_ceil = abs(ceil_val - num)\n    if dist_floor < dist_ceil:\n        return floor_val\n    elif dist_ceil < dist_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = floor(num)\n    ceil_val = ceil(num)\n    dist_floor = abs(num - floor_val)\n    dist_ceil = abs(num - ceil_val)\n    if dist_floor < dist_ceil:\n        return floor_val\n    elif dist_ceil < dist_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_num = floor(num)\n    ceil_num = ceil(num)\n    dist_to_floor = num - floor_num\n    dist_to_ceil = ceil_num - num\n    if dist_to_floor < dist_to_ceil:\n        return floor_num\n    elif dist_to_ceil < dist_to_floor:\n        return ceil_num\n    elif num > 0:\n        return ceil_num\n    else:\n        return floor_num", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = math.floor(num)\n    ceil_val = math.ceil(num)\n    diff_floor = abs(num - floor_val)\n    diff_ceil = abs(ceil_val - num)\n    if diff_floor < diff_ceil:\n        return floor_val\n    elif diff_ceil < diff_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    lower = floor(num)\n    upper = ceil(num)\n    if num - lower < upper - num:\n        return lower\n    elif num - lower > upper - num:\n        return upper\n    elif num > 0:\n        return upper\n    else:\n        return lower", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_num = math.floor(num)\n    ceil_num = math.ceil(num)\n    dist_floor = abs(num - floor_num)\n    dist_ceil = abs(ceil_num - num)\n    if dist_floor < dist_ceil:\n        return floor_num\n    elif dist_ceil < dist_floor:\n        return ceil_num\n    elif num > 0:\n        return ceil_num\n    else:\n        return floor_num"], "outputs": "[[10], [15], [15], [-15], [1], [-1], [100], [-100], [123], [-123], [124], [-124]]", "probability": 0.85, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}, {"programs_str": ["import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    floor_num = math.floor(num)\n    ceil_num = math.ceil(num)\n    dist_floor = abs(num - floor_num)\n    dist_ceil = abs(ceil_num - num)\n    if dist_floor < dist_ceil:\n        return floor_num\n    elif dist_ceil < dist_floor:\n        return ceil_num\n    elif num > 0:\n        return ceil_num\n    else:\n        return floor_num - 1"], "outputs": "[[10], [15], [15], [-16], [1], [-2], [100], [-101], [123], [-123], [124], [-124]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.75, "failed_input_output_examples": "[[['-14.5'], [-16], [-15]]]"}, {"programs_str": ["def closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = int(num // 1)\n    diff = num - floor_val\n    if diff < 0.5:\n        return floor_val\n    elif diff > 0.5:\n        return floor_val + 1\n    elif num > 0:\n        return floor_val + 1\n    else:\n        return floor_val - 1"], "outputs": "[[10], [15], [15], [-16], [1], [-2], [100], [-100], [123], [-123], [124], [-124]]", "probability": 0.05, "is_align_req": 0, "test_consistency": 0.75, "failed_input_output_examples": "[[['-14.5'], [-16], [-15]]]"}, {"programs_str": ["def closest_integer(value: str) -> int:\n    num = float(value)\n    floor_val = int(num // 1)\n    ceil_val = floor_val + 1 if num > 0 else floor_val - 1\n    dist_floor = abs(num - floor_val)\n    dist_ceil = abs(ceil_val - num)\n    if dist_floor < dist_ceil:\n        return floor_val\n    elif dist_ceil < dist_floor:\n        return ceil_val\n    elif num > 0:\n        return ceil_val\n    else:\n        return floor_val"], "outputs": "[[10], [15], [15], [-15], [1], [-1], [100], [-100], [123], [-124], [124], [-124]]", "probability": 0.05, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0.423792339912287, "llm_generated_inputs": "[['10'], ['15.3'], ['14.5'], ['-14.5'], ['0.5'], ['-0.5'], ['100.0'], ['-100.0'], ['123.4999'], ['-123.4999'], ['123.5001'], ['-123.5001']]", "input_output_examples": "[[['10'], ['15.3'], ['14.5'], ['-14.5']], [[10], [15], [15], [-15]]]", "weighted_test_consistency": 0.975, "at_least_one_align": true}, "repaired_clusters": {"requirement": "def closest_integer(value: str) -> int:\n    \"\"\"\n    Convert the input string representing a number to the closest integer.\n\n    Rounding rules:\n    - If the number is exactly halfway between two integers (i.e., fractional part is exactly 0.5 or -0.5),\n      round away from zero. That means:\n        * For positive numbers with fractional part 0.5, round up to the next integer.\n        * For negative numbers with fractional part -0.5, round down to the next integer away from zero.\n    - Otherwise, round to the nearest integer using standard rounding (round half down).\n      That is, if the fractional part is less than 0.5, round down (towards zero),\n      if greater than 0.5, round up (away from zero).\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n    >>> closest_integer(\"14.5\")\n    15\n    >>> closest_integer(\"-14.5\")\n    -15\n    >>> closest_integer(\"-123.4999\")\n    -123\n\n    Note:\n    - \"Rounding away from zero\" means that when the number is exactly halfway between two integers,\n      the integer returned is the one with the greater absolute value.\n    - For all other fractional values, round to the nearest integer in the usual way.\n    \"\"\"", "entry_point": "closest_integer", "cluster_list": [{"programs_str": ["from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fraction = num - integer_part\n    if fraction == 0.5:\n        return integer_part + 1\n    elif fraction == -0.5:\n        return integer_part - 1\n    if num > 0:\n        if fraction < 0.5:\n            return floor(num)\n        else:\n            return ceil(num)\n    elif fraction > -0.5:\n        return ceil(num)\n    else:\n        return floor(num)", "def closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fractional_part = num - integer_part\n    if fractional_part == 0.5:\n        return integer_part + 1\n    elif fractional_part == -0.5:\n        return integer_part - 1\n    else:\n        abs_fraction = abs(fractional_part)\n        if abs_fraction < 0.5:\n            return integer_part\n        elif num > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    frac = num - int(num) if num >= 0 else num - int(num)\n    abs_frac = abs(frac)\n    if abs_frac == 0.5:\n        if num > 0:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    elif frac > 0:\n        if frac < 0.5:\n            return int(floor(num))\n        else:\n            return int(ceil(num))\n    elif frac < 0:\n        if abs_frac < 0.5:\n            return int(ceil(num))\n        else:\n            return int(floor(num))\n    else:\n        return int(num)", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fractional_part = num - integer_part\n    if fractional_part == 0.5:\n        return ceil(num)\n    elif fractional_part == -0.5:\n        return floor(num)\n    else:\n        abs_frac = abs(fractional_part)\n        if abs_frac < 0.5:\n            return integer_part\n        elif fractional_part > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    int_part = int(num)\n    frac_part = num - int_part\n    if frac_part == 0.5:\n        return int_part + 1\n    if frac_part == -0.5:\n        return int_part - 1\n    if frac_part > 0.5:\n        return int_part + 1\n    if frac_part < -0.5:\n        return int_part - 1\n    return int_part", "from typing import Union\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fractional_part = num - integer_part\n    if abs(fractional_part) == 0.5:\n        if num > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1\n    elif fractional_part > 0:\n        if fractional_part < 0.5:\n            return integer_part\n        else:\n            return integer_part + 1\n    elif fractional_part < 0:\n        if abs(fractional_part) < 0.5:\n            return integer_part\n        else:\n            return integer_part - 1\n    else:\n        return integer_part", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fractional_part = num - integer_part\n    if fractional_part == 0.5:\n        return integer_part + 1\n    elif fractional_part == -0.5:\n        return integer_part - 1\n    abs_fraction = abs(fractional_part)\n    if abs_fraction < 0.5:\n        return integer_part\n    elif num > 0:\n        return integer_part + 1\n    else:\n        return integer_part - 1", "from typing import Union\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fractional_part = num - integer_part\n    if fractional_part == 0.5:\n        return integer_part + 1\n    elif fractional_part == -0.5:\n        return integer_part - 1\n    else:\n        abs_fraction = abs(fractional_part)\n        if abs_fraction < 0.5:\n            return integer_part\n        elif num > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fractional_part = num - integer_part\n    if fractional_part == 0.5:\n        return integer_part + 1\n    elif fractional_part == -0.5:\n        return integer_part - 1\n    elif num > 0:\n        if fractional_part < 0.5:\n            return integer_part\n        else:\n            return integer_part + 1\n    elif fractional_part > -0.5:\n        return integer_part\n    else:\n        return integer_part - 1", "import math\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = math.trunc(num)\n    fractional_part = num - integer_part\n    if fractional_part == 0.5:\n        return integer_part + 1\n    elif fractional_part == -0.5:\n        return integer_part - 1\n    elif num > 0:\n        if fractional_part < 0.5:\n            return integer_part\n        else:\n            return integer_part + 1\n    elif fractional_part > -0.5:\n        return integer_part\n    else:\n        return integer_part - 1", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    frac_part = num - integer_part\n    if abs(frac_part) == 0.5:\n        if num > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1\n    elif num > 0:\n        if frac_part < 0.5:\n            return integer_part\n        else:\n            return integer_part + 1\n    elif frac_part > -0.5:\n        return integer_part\n    else:\n        return integer_part - 1", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fractional_part = num - integer_part\n    if fractional_part == 0:\n        return integer_part\n    if fractional_part == 0.5:\n        return integer_part + 1\n    if fractional_part == -0.5:\n        return integer_part - 1\n    if num > 0:\n        if 0 < fractional_part < 0.5:\n            return floor(num)\n        else:\n            return ceil(num)\n    elif -0.5 < fractional_part < 0:\n        return ceil(num)\n    else:\n        return floor(num)", "def closest_integer(value: str) -> int:\n    num = float(value)\n    int_part = int(num)\n    frac = num - int_part\n    if frac == 0.5:\n        return int_part + 1\n    elif frac == -0.5:\n        return int_part - 1\n    elif abs(frac) < 0.5:\n        return int_part\n    elif frac > 0.5:\n        return int_part + 1\n    else:\n        return int_part - 1", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    int_part = int(num)\n    frac_part = num - int_part\n    if frac_part == 0.5:\n        return int_part + 1\n    elif frac_part == -0.5:\n        return int_part - 1\n    else:\n        abs_frac = abs(frac_part)\n        if abs_frac < 0.5:\n            if num > 0:\n                return int_part\n            else:\n                return int_part\n        elif num > 0:\n            return int_part + 1\n        else:\n            return int_part - 1", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fractional_part = num - integer_part\n    if fractional_part == 0.5:\n        return integer_part + 1\n    elif fractional_part == -0.5:\n        return integer_part - 1\n    else:\n        abs_frac = abs(fractional_part)\n        if abs_frac < 0.5:\n            return integer_part\n        elif num > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1", "from math import floor, ceil\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    sign = 1 if num >= 0 else -1\n    abs_num = abs(num)\n    base = int(abs_num)\n    frac = abs_num - base\n    if frac == 0.5:\n        return sign * (base + 1)\n    elif frac < 0.5:\n        return sign * base\n    else:\n        return sign * (base + 1)", "def closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    frac_part = num - integer_part\n    if frac_part == 0.5:\n        return integer_part + 1\n    elif frac_part == -0.5:\n        return integer_part - 1\n    elif num > 0:\n        if frac_part < 0.5:\n            return integer_part\n        else:\n            return integer_part + 1\n    elif frac_part > -0.5:\n        return integer_part\n    else:\n        return integer_part - 1", "def closest_integer(value: str) -> int:\n    num = float(value)\n    integer_part = int(num)\n    fractional_part = num - integer_part\n    if fractional_part == 0.5:\n        return integer_part + 1\n    elif fractional_part == -0.5:\n        return integer_part - 1\n    else:\n        abs_fraction = abs(fractional_part)\n        if abs_fraction < 0.5:\n            return integer_part\n        elif num > 0:\n            return integer_part + 1\n        else:\n            return integer_part - 1", "from math import modf, floor, ceil\n\ndef closest_integer(value: str) -> int:\n    val = float(value)\n    frac, whole = modf(val)\n    if frac == 0:\n        return int(val)\n    if abs(frac) == 0.5:\n        if val > 0:\n            return int(whole) + 1\n        else:\n            return int(whole) - 1\n    if val > 0:\n        if frac < 0.5:\n            return int(whole)\n        else:\n            return int(whole) + 1\n    elif abs(frac) < 0.5:\n        return int(whole)\n    else:\n        return int(whole) - 1", "from math import modf\n\ndef closest_integer(value: str) -> int:\n    num = float(value)\n    fractional, integral = modf(num)\n    if fractional == 0 or fractional == -0.0:\n        return int(num)\n    abs_frac = abs(fractional)\n    if abs_frac == 0.5:\n        if num > 0:\n            return int(integral) + 1\n        else:\n            return int(integral) - 1\n    elif abs_frac < 0.5:\n        return int(integral)\n    elif num > 0:\n        return int(integral) + 1\n    else:\n        return int(integral) - 1"], "outputs": "[[10], [15], [15], [-15], [1], [-1], [100], [-100], [123], [-123], [124], [-124]]", "probability": 1.0, "is_align_req": 1, "test_consistency": 1, "failed_input_output_examples": "[]"}], "entropy": 0, "llm_generated_inputs": "[['10'], ['15.3'], ['14.5'], ['-14.5'], ['0.5'], ['-0.5'], ['100.0'], ['-100.0'], ['123.4999'], ['-123.4999'], ['123.5001'], ['-123.5001']]", "input_output_examples": "[[['10'], ['15.3'], ['14.5'], ['-14.5']], [[10], [15], [15], [-15]]]", "weighted_test_consistency": 1.0, "at_least_one_align": true}, "result": {"original_passk": 0.8, "original_avg_pass_rate": 0.9907692307692308, "original_nzpassk": true, "original_majority_passk": true, "original_entropy": 0.423792339912287, "repaired_passk": 0.85, "repaired_avg_pass_rate": 0.9667132867132867, "repaired_nzpassk": true, "repaired_majority_passk": true, "repaired_entropy": 0}}
